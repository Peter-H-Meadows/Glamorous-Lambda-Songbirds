"
$( Begin $[ set-class.mm $] $)

$(
###############################################################################
                ZF (ZERMELO-FRAENKEL) SET THEORY
###############################################################################

  Set theory uses the formalism of propositional and predicate calculus to
  assert properties of arbitrary mathematical objects called ""sets.""  A set can
  be an element of another set, and this relationship is indicated by the
  ` e. `
  symbol.  Starting with the simplest mathematical object, called the empty
  set, set theory builds up more and more complex structures whose existence
  follows from the axioms, eventually resulting in extremely complicated sets
  that we identify with the real numbers and other familiar mathematical
  objects.

  A simplistic concept of sets, sometimes called ""naive set theory"", is
  vulnerable to a paradox called ""Russell's Paradox"" ( ~ ru ), a discovery that
  revolutionized the foundations of mathematics and logic.  Russell's Paradox
  spawned the development of set theories that countered the paradox, including
  the ZF set theory that is most widely used and is defined here.

  Except for Extensionality, the axioms basically say, ""given an arbitrary set
  x (and, in the cases of Replacement and Regularity, provided that an
  antecedent is satisfied), there exists another set y based on or constructed
  from it, with the stated properties.""  (The axiom of Extensionality can also
  be restated this way as shown by ~ axext2 .) The individual axiom links
  provide more detailed descriptions.  We derive the redundant ZF axioms of
  Separation, Null Set, and Pairing from the others as theorems.

$)

$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
                    Zermelo-Fraenkel Set Theory
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
             ZF Set Theory - start with the Axiom of Extensionality
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Introduce the Axiom of Extensionality
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z $.
    $( Axiom of Extensionality.  An axiom of Zermelo-Fraenkel set theory.  It
       states that two sets are identical if they contain the same elements.
       Axiom Ext of [BellMachover] p. 461.

       Set theory can also be formulated with a _single_ primitive predicate
       ` e. ` on top of traditional predicate calculus _without_ equality.  In
       that case the Axiom of Extensionality becomes
       ` ( A. w ( w e. x <-> w e. y ) -> ( x e. z -> y e. z ) ) ` , and
       equality ` x = y ` is _defined_ as ` A. w ( w e. x <-> w e. y ) ` .  All
       of the usual axioms of equality then become theorems of set theory.
       See, for example, Axiom 1 of [TakeutiZaring] p. 8.

       To use the above ""equality-free"" version of Extensionality with
       Metamath's logical axioms, we would rewrite ~ ax-7 through ~ ax-9 with
       equality expanded according to the above definition.  Some of those
       axioms could be proved from set theory and would be redundant.  Not all
       of them are redundant, since our axioms of predicate calculus make
       essential use of equality for the proper substitution that is a
       primitive notion in traditional predicate calculus.  A study of such an
       axiomatization would be an interesting project for someone exploring the
       foundations of logic.

       _General remarks_:  Our set theory axioms are presented using defined
       connectives ( ` <-> ` , ` E. ` , etc.) for convenience.  However, it is
       implicitly understood that the actual axioms use only the primitive
       connectives ` -> ` , ` -. ` , ` A. ` , ` = ` , and ` e. ` .  It is
       straightforward to establish the equivalence between the actual axioms
       and the ones we display, and we will not do so.

       It is important to understand that strictly speaking, all of our set
       theory axioms are really schemes that represent an infinite number of
       actual axioms.  This is inherent in the design of Metamath
       (""metavariable math""), which manipulates only metavariables.  For
       example, the metavariable ` x ` in ~ ax-ext can represent any actual
       variable _v1_, _v2_, _v3_,... .  Distinct variable restrictions ($d)
       prevent us from substituting say _v1_ for both ` x ` and ` z ` .  This
       is in contrast to typical textbook presentations that present actual
       axioms (except for Replacement ~ ax-rep , which involves a wff
       metavariable).  In practice, though, the theorems and proofs are
       essentially the same.  The $d restrictions make each of the infinite
       axioms generated by the ~ ax-ext scheme exactly logically equivalent to
       each other and in particular to the actual axiom of the textbook
       version.  (Contributed by NM, 21-May-1993.) $)
    ax-ext $a |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $.

    $( The Axiom of Extensionality ( ~ ax-ext ) restated so that it postulates
       the existence of a set ` z ` given two arbitrary sets ` x ` and ` y ` .
       This way to express it follows the general idea of the other ZFC axioms,
       which is to postulate the existence of sets given other sets.
       (Contributed by NM, 28-Sep-2003.) $)
    axext2 $p |- E. z ( ( z e. x <-> z e. y ) -> x = y ) $=
      ( wel wb weq wi wex wal ax-ext 19.36v mpbir ) CADCBDEZABFZGCHMCINGABCJMNC
      KL $.
  $}

  ${
    $d z x w $.  $d z y w $.
    $( A generalization of the Axiom of Extensionality in which ` x ` and ` y `
       need not be distinct.  (Contributed by NM, 15-Sep-1993.)  (Proof
       shortened by Andrew Salmon, 12-Aug-2011.)  Remove dependencies on
       ~ ax-10 , ~ ax-12 , ~ ax-13 .  (Revised by Wolf Lammen, 9-Dec-2019.) $)
    axext3 $p |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $=
      ( vw weq wex wel wb wal wi ax6ev elequ2 bibi1d albidv ax-ext syl6bir ax-7
      syld exlimiv ax-mp ) DAEZDFCAGZCBGZHZCIZABEZJZDAKUAUGDUAUEDBEZUFUAUECDGZU
      CHZCIUHUAUJUDCUAUIUBUCDACLMNDBCOPDABQRST $.

    $d z x w $.  $d z y w $.
    $( Obsolete proof of ~ axext3 as of 9-Dec-2019.  (Contributed by NM,
       15-Sep-1993.)  (Proof shortened by Andrew Salmon, 12-Aug-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    axext3OLD $p |- ( A. z ( z e. x <-> z e. y ) -> x = y ) $=
      ( vw wel wb wal weq wi elequ2 bibi1d albidv equequ1 imbi12d ax-ext chvarv
      ) CDEZCBEZFZCGZDBHZICAEZRFZCGZABHZIDADAHZTUDUAUEUFSUCCUFQUBRDACJKLDABMNDB
      COP $.

    $( A bidirectional version of Extensionality.  Although this theorem
       ""looks"" like it is just a definition of equality, it requires the Axiom
       of Extensionality for its proof under our axiomatization.  See the
       comments for ~ ax-ext and ~ df-cleq .  (Contributed by NM,
       14-Nov-2008.) $)
    axext4 $p |- ( x = y <-> A. z ( z e. x <-> z e. y ) ) $=
      ( weq wel wb wal elequ2 alrimiv axext3 impbii ) ABDZCAECBEFZCGLMCABCHIABC
      JK $.
  $}

  ${
    $d x y z $.  $d ph z $.
    bm1.1.1 $e |- F/ x ph $.
    $( Any set defined by a property is the only set defined by that property.
       Theorem 1.1 of [BellMachover] p. 462.  (Contributed by NM,
       30-Jun-1994.)  (Proof shortened by Wolf Lammen, 13-Nov-2019.) $)
    bm1.1 $p |- ( E. x A. y ( y e. x <-> ph ) ->
                  E! x A. y ( y e. x <-> ph ) ) $=
      ( vz wel wb wal wa weq wi wex weu biantr alanimi ax-ext syl gen2 wmo nfv
      nfbi nfal elequ2 bibi1d albidv mo4f df-mo bitr3i mpbi ) CBFZAGZCHZCEFZAGZ
      CHZIZBEJZKZEHBHZULBLULBMKZURBEUPUJUMGZCHUQUKUNVACUJAUMNOBECPQRUSULBSUTULU
      OBEUNBCUMABUMBTDUAUBUQUKUNCUQUJUMABECUCUDUEUFULBUGUHUI $.
    $( Obsolete proof of ~ bm1.1 as of 12-Nov-2019.  (Contributed by NM,
       30-Jun-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    bm1.1OLD $p |- ( E. x A. y ( y e. x <-> ph ) ->
                  E! x A. y ( y e. x <-> ph ) ) $=
      ( vz wel wb wal wex wsb wa weq wi weu nfv nfbi nfal elequ2 bibi1d albidv
      sbie 19.26 biantr alimi ax-ext syl sylbir sylan2b gen2 jctr eu2 sylibr )
      CBFZAGZCHZBIZUPUOUOBEJZKBELZMZEHBHZKUOBNUPUTUSBEUQUOCEFZAGZCHZURUOVCBEVBB
      CVAABVABODPQURUNVBCURUMVAABECRSTUAUOVCKUNVBKZCHZURUNVBCUBVEUMVAGZCHURVDVF
      CUMAVAUCUDBECUEUFUGUHUIUJUOBEUOEOUKUL $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                   Class abstractions (a.k.a. class builders)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new constants use in class definition. $)
  $c { $. $( Left brace $)
  $c | $.  $( Vertical bar $)
  $c } $. $( Right brace $)

  $( Declare symbols as variables $)
  $v ./\ $.
  $v .\/ $.
  $v .<_ $.
  $v .< $.
  $v .+ $.
  $v .- $.
  $v .X. $.
  $v ./ $.
  $v .^ $.
  $v .0. $.
  $v .1. $.
  $v .|| $.
  $v .~ $.
  $v ._|_ $.
  $v .+^ $.
  $v .+b $.
  $v .(+) $.
  $v .* $.
  $v .x. $.
  $v .xb $.
  $v ., $.
  $v .(x) $.
  $v .o. $.
  $v .0b $.

  $( Declare variable symbols that will be used to represent classes.  Note
     that later on ` R ` , ` S ` , ` F ` and ` G ` denote relations and
     functions, but these letters serve as mnemonics only and in fact behave
     no differently from the variables ` A ` through ` D ` . $)
  $v A $.
  $v B $.
  $v C $.
  $v D $.
  $v P $.
  $v Q $.
  $v R $.
  $v S $.
  $v T $.
  $v U $.

  $( Introduce the class builder or class abstraction notation (""the class of
     sets ` x ` such that ` ph ` is true"").  Our class variables ` A ` ,
     ` B ` , etc. range over class builders (implicitly in the case of defined
     class terms such as ~ df-nul ).  Note that a setvar variable can be
     expressed as a class builder per theorem ~ cvjust , justifying the
     assignment of setvar variables to class variables via the use of ~ cv . $)
  cab $a class { x | ph } $.

  $( $j primitive 'cv' 'wceq' 'wcel' 'cab'; $)

  $( Let ` A ` be a class variable. $)
  cA $f class A $.
  $( Let ` B ` be a class variable. $)
  cB $f class B $.
  $( Let ` C ` be a class variable. $)
  cC $f class C $.

  $( Define a connective symbol for use as a class variable. $)
  c.pa $f class .|| $.

  $( Let ` D ` be a class variable. $)
  cD $f class D $.

  $( Define a connective symbol for use as a class variable. $)
  c.dv $f class ./ $.

  $( Let ` P ` be a class variable. $)
  cP $f class P $.

  $( Define a connective symbol for use as a class variable. $)
  c.pl $f class .+ $.

  $( Define a connective symbol for use as a class variable. $)
  c.pd $f class .+^ $.

  $( Define a connective symbol for use as a class variable. $)
  c.pb $f class .+b $.

  $( Define a connective symbol for use as a class variable. $)
  c.po $f class .{+} $.

  $( Let ` Q ` be a class variable. $)
  cQ $f class Q $.

  $( Define a connective symbol for use as a class variable. $)
  c.sm $f class .~ $.

  $( Let ` R ` be a class variable. $)
  cR $f class R $.
  $( Let ` S ` be a class variable. $)
  cS $f class S $.

  $( Define a connective symbol for use as a class variable. $)
  c.lt $f class .< $.

  $( Define a connective symbol for use as a class variable. $)
  c.xb $f class .xb $.

  $( Let ` T ` be a class variable. $)
  cT $f class T $.

  $( Define a connective symbol for use as a class variable. $)
  c.x $f class .x. $.

  $( Define a connective symbol for use as a class variable. $)
  c.xp $f class .X. $.

  $( Define a connective symbol for use as a class variable. $)
  c.xo $f class .{x} $.

  $( Let ` U ` be a class variable. $)
  cU $f class U $.

  $( Define a connective symbol for use as a class variable. $)
  c.1 $f class .1. $.

  $v e $.
  $v f $.
  $v g $.
  $v h $.
  $v i $.
  $v j $.
  $v k $.
  $v m $.
  $v n $.
  $v o $.
  $v E $.
  $v F $.
  $v G $.
  $v H $.
  $v I $.
  $v J $.
  $v K $.
  $v L $.
  $v M $.
  $v N $.
  $v V $.
  $v W $.
  $v X $.
  $v Y $.
  $v Z $.
  $v O $.
  $v s $.
  $v r $.
  $v q $.
  $v p $.
  $v a $.
  $v b $.
  $v c $.
  $v d $.
  $v l $.

  $( Let ` e ` be an individual variable. $)
  ve $f setvar e $.
  $( Let ` f ` be an individual variable. $)
  vf $f setvar f $.
  $( Let ` g ` be an individual variable. $)
  vg $f setvar g $.
  $( Let ` h ` be an individual variable. $)
  vh $f setvar h $.
  $( Let ` i ` be an individual variable. $)
  vi $f setvar i $.
  $( Let ` j ` be an individual variable. $)
  vj $f setvar j $.
  $( Let ` k ` be an individual variable. $)
  vk $f setvar k $.
  $( Let ` m ` be an individual variable. $)
  vm $f setvar m $.
  $( Let ` n ` be an individual variable. $)
  vn $f setvar n $.
  $( Let ` o ` be an individual variable. $)
  vo $f setvar o $.
  $( Let ` E ` be a class variable. $)
  cE $f class E $.

  $( Define a connective symbol for use as a class variable. $)
  c.ex $f class .^ $.

  $( Let ` F ` be a class variable. $)
  cF $f class F $.
  $( Let ` G ` be a class variable. $)
  cG $f class G $.
  $( Let ` H ` be a class variable. $)
  cH $f class H $.

  $( Define a connective symbol for use as a class variable. $)
  c.xi $f class ., $.

  $( Let ` I ` be a class variable. $)
  cI $f class I $.

  $( Define a connective symbol for use as a class variable. $)
  c.as $f class .* $.

  $( Let ` J ` be a class variable. $)
  cJ $f class J $.

  $( Define a connective symbol for use as a class variable. $)
  c.or $f class .\/ $.

  $( Let ` K ` be a class variable. $)
  cK $f class K $.
  $( Let ` L ` be a class variable. $)
  cL $f class L $.

  $( Define a connective symbol for use as a class variable. $)
  c.le $f class .<_ $.

  $( Let ` M ` be a class variable. $)
  cM $f class M $.

  $( Define a connective symbol for use as a class variable. $)
  c.an $f class ./\ $.

  $( Define a connective symbol for use as a class variable. $)
  c.mi $f class .- $.

  $( Let ` N ` be a class variable. $)
  cN $f class N $.

  $( Define a connective symbol for use as a class variable. $)
  c.pe $f class ._|_ $.

  $( Let ` O ` be a class variable. $)
  cO $f class O $.
  $( Let ` V ` be a class variable. $)
  cV $f class V $.
  $( Let ` W ` be a class variable. $)
  cW $f class W $.
  $( Let ` X ` be a class variable. $)
  cX $f class X $.
  $( Let ` Y ` be a class variable. $)
  cY $f class Y $.

  $( Define a connective symbol for use as a class variable. $)
  c.0 $f class .0. $.

  $( Define a connective symbol for use as a class variable. $)
  c.0b $f class .0b $.

  $( Define a connective symbol for use as a class variable. $)
  c.op $f class .o. $.

  $( Let ` Z ` be a class variable. $)
  cZ $f class Z $.
  $( Let ` s ` be an individual variable. $)
  vs $f setvar s $.
  $( Let ` r ` be an individual variable. $)
  vr $f setvar r $.
  $( Let ` q ` be an individual variable. $)
  vq $f setvar q $.
  $( Let ` p ` be an individual variable. $)
  vp $f setvar p $.
  $( Let ` a ` be an individual variable. $)
  va $f setvar a $.
  $( Let ` b ` be an individual variable. $)
  vb $f setvar b $.
  $( Let ` c ` be an individual variable. $)
  vc $f setvar c $.
  $( Let ` d ` be an individual variable. $)
  vd $f setvar d $.
  $( Let ` l ` be an individual variable. $)
  vl $f setvar l $.

  $( Define class abstraction notation (so-called by Quine), also called a
     ""class builder"" in the literature. ` x ` and ` y ` need not be distinct.
     Definition 2.1 of [Quine] p. 16.  Typically, ` ph ` will have ` y ` as a
     free variable, and "" ` { y | ph } ` "" is read ""the class of all sets ` y `
     such that ` ph ( y ) ` is true.""  We do not define ` { y | ph } ` in
     isolation but only as part of an expression that extends or ""overloads""
     the ` e. ` relationship.

     This is our first use of the ` e. ` symbol to connect classes instead of
     sets.  The syntax definition ~ wcel , which extends or ""overloads"" the
     ~ wel definition connecting setvar variables, requires that both sides of
     ` e. ` be classes.  In ~ df-cleq and ~ df-clel , we introduce a new kind
     of variable (class variable) that can be substituted with expressions such
     as ` { y | ph } ` .  In the present definition, the ` x ` on the left-hand
     side is a setvar variable.  Syntax definition ~ cv allows us to substitute
     a setvar variable ` x ` for a class variable: all sets are classes by
     ~ cvjust (but not necessarily vice-versa).  For a full description of how
     classes are introduced and how to recover the primitive language, see the
     discussion in Quine (and under ~ abeq2 for a quick overview).

     Because class variables can be substituted with compound expressions and
     setvar variables cannot, it is often useful to convert a theorem
     containing a free setvar variable to a more general version with a class
     variable.  This is done with theorems such as ~ vtoclg which is used, for
     example, to convert ~ elirrv to ~ elirr .

     This is called the ""axiom of class comprehension"" by [Levy] p. 338, who
     treats the theory of classes as an extralogical extension to our logic and
     set theory axioms.  He calls the construction ` { y | ph } ` a ""class
     term"".

     While the three class definitions ~ df-clab , ~ df-cleq , and ~ df-clel
     are eliminable and conservative and thus meet the requirements for sound
     definitions, they are technically axioms in that they do not satisfy the
     requirements for the current definition checker.  The proofs of
     conservativity require external justification that is beyond the scope of
     the definition checker.

     For a general discussion of the theory of classes, see
     ~ http://us.metamath.org/mpeuni/mmset.html#class .  (Contributed by NM,
     26-May-1993.) $)
  df-clab $a |- ( x e. { y | ph } <-> [ x / y ] ph ) $.

  $( Simplification of class abstraction notation when the free and bound
     variables are identical.  (Contributed by NM, 26-May-1993.) $)
  abid $p |- ( x e. { x | ph } <-> ph ) $=
    ( cv cab wcel wsb df-clab sbid bitri ) BCABDEABBFAABBGABHI $.

  ${
    $d x y $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by NM, 26-May-1993.) $)
    hbab1 $p |- ( y e. { x | ph } -> A. x y e. { x | ph } ) $=
      ( cv cab wcel wsb df-clab hbs1 hbxfrbi ) CDABEFABCGBACBHABCIJ $.

    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfsab1 $p |- F/ x y e. { x | ph } $=
      ( cv cab wcel hbab1 nfi ) CDABEFBABCGH $.
  $}

  ${
    $d x z $.
    hbab.1 $e |- ( ph -> A. x ph ) $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by NM, 1-Mar-1995.) $)
    hbab $p |- ( z e. { y | ph } -> A. x z e. { y | ph } ) $=
      ( cv cab wcel wsb df-clab hbsb hbxfrbi ) DFACGHACDIBADCJACDBEKL $.
  $}

  ${
    $d x z $.
    nfsab.1 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfsab $p |- F/ x z e. { y | ph } $=
      ( cv cab wcel nfri hbab nfi ) DFACGHBABCDABEIJK $.
  $}

  ${
    $d x A $.  $d x B $.  $d x y z $.
    df-cleq.1 $e |- ( A. x ( x e. y <-> x e. z ) -> y = z ) $.
    $( Define the equality connective between classes.  Definition 2.7 of
       [Quine] p. 18.  Also Definition 4.5 of [TakeutiZaring] p. 13; Chapter 4
       provides its justification and methods for eliminating it.  Note that
       its elimination will not necessarily result in a single wff in the
       original language but possibly a ""scheme"" of wffs.

       This is an example of a somewhat ""risky"" definition, meaning that it has
       a more complex than usual soundness justification (outside of Metamath),
       because it ""overloads"" or reuses the existing equality symbol rather
       than introducing a new symbol.  This allows us to make statements that
       may not hold for the original symbol.  For example, it permits us to
       deduce ` y = z <-> A. x ( x e. y <-> x e. z ) ` , which is not a theorem
       of logic but rather presupposes the Axiom of Extensionality (see theorem
       ~ axext4 ).  We therefore include this axiom as a hypothesis, so that
       the use of Extensionality is properly indicated.

       We could avoid this complication by introducing a new symbol, say =_2,
       in place of ` = ` .  This would also have the advantage of making
       elimination of the definition straightforward, so that we could
       eliminate Extensionality as a hypothesis.  We would then also have the
       advantage of being able to identify in various proofs exactly where
       Extensionality truly comes into play rather than just being an artifact
       of a definition.  One of our theorems would then be ` x ` =_2
       ` y <-> x = y ` by invoking Extensionality.

       However, to conform to literature usage, we retain this overloaded
       definition.  This also makes some proofs shorter and probably easier to
       read, without the constant switching between two kinds of equality.

       See also comments under ~ df-clab , ~ df-clel , and ~ abeq2 .

       In the form of ~ dfcleq , this is called the ""axiom of extensionality""
       by [Levy] p. 338, who treats the theory of classes as an extralogical
       extension to our logic and set theory axioms.

       While the three class definitions ~ df-clab , ~ df-cleq , and ~ df-clel
       are eliminable and conservative and thus meet the requirements for sound
       definitions, they are technically axioms in that they do not satisfy the
       requirements for the current definition checker.  The proofs of
       conservativity require external justification that is beyond the scope
       of the definition checker.

       For a general discussion of the theory of classes, see
       ~ http://us.metamath.org/mpeuni/mmset.html#class .  (Contributed by NM,
       15-Sep-1993.) $)
    df-cleq $a |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $.
  $}

  ${
    $d x A $.  $d x B $.  $d x y z $.
    $( The same as ~ df-cleq with the hypothesis removed using the Axiom of
       Extensionality ~ ax-ext .  (Contributed by NM, 15-Sep-1993.) $)
    dfcleq $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( vy vz ax-ext df-cleq ) ADEBCDEAFG $.
  $}

  ${
    $d x y z $.
    $( Every set is a class.  Proposition 4.9 of [TakeutiZaring] p. 13.  This
       theorem shows that a setvar variable can be expressed as a class
       abstraction.  This provides a motivation for the class syntax
       construction ~ cv , which allows us to substitute a setvar variable for
       a class variable.  See also ~ cab and ~ df-clab .  Note that this is not
       a rigorous justification, because ~ cv is used as part of the proof of
       this theorem, but a careful argument can be made outside of the
       formalism of Metamath, for example as is done in Chapter 4 of Takeuti
       and Zaring.  See also the discussion under the definition of class in
       [Jech] p. 4 showing that ""Every set can be considered to be a class.""
       (Contributed by NM, 7-Nov-2006.) $)
    cvjust $p |- x = { y | y e. x } $=
      ( vz cv wcel cab wceq wb dfcleq wsb df-clab elsb3 bitr2i mpgbir ) ADZBDOE
      ZBFZGCDZOEZRQEZHCCOQITPBCJSPCBKCBALMN $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Define the membership connective between classes.  Theorem 6.3 of
       [Quine] p. 41, or Proposition 4.6 of [TakeutiZaring] p. 13, which we
       adopt as a definition.  See these references for its metalogical
       justification.  Note that like ~ df-cleq it extends or ""overloads"" the
       use of the existing membership symbol, but unlike ~ df-cleq it does not
       strengthen the set of valid wffs of logic when the class variables are
       replaced with setvar variables (see ~ cleljust ), so we don't include
       any set theory axiom as a hypothesis.  See also comments about the
       syntax under ~ df-clab .  Alternate definitions of ` A e. B ` (but that
       require either ` A ` or ` B ` to be a set) are shown by ~ clel2 ,
       ~ clel3 , and ~ clel4 .

       This is called the ""axiom of membership"" by [Levy] p. 338, who treats
       the theory of classes as an extralogical extension to our logic and set
       theory axioms.

       While the three class definitions ~ df-clab , ~ df-cleq , and ~ df-clel
       are eliminable and conservative and thus meet the requirements for sound
       definitions, they are technically axioms in that they do not satisfy the
       requirements for the current definition checker.  The proofs of
       conservativity require external justification that is beyond the scope
       of the definition checker.

       For a general discussion of the theory of classes, see
       ~ http://us.metamath.org/mpeuni/mmset.html#class .  (Contributed by NM,
       26-May-1993.) $)
    df-clel $a |- ( A e. B <-> E. x ( x = A /\ x e. B ) ) $.
  $}

  ${
    $d x A $.  $d x B $.
    eqriv.1 $e |- ( x e. A <-> x e. B ) $.
    $( Infer equality of classes from equivalence of membership.  (Contributed
       by NM, 21-Jun-1993.) $)
    eqriv $p |- A = B $=
      ( wceq cv wcel wb dfcleq mpgbir ) BCEAFZBGKCGHAABCIDJ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    eqrdv.1 $e |- ( ph -> ( x e. A <-> x e. B ) ) $.
    $( Deduce equality of classes from equivalence of membership.  (Contributed
       by NM, 17-Mar-1996.) $)
    eqrdv $p |- ( ph -> A = B ) $=
      ( cv wcel wb wal wceq alrimiv dfcleq sylibr ) ABFZCGNDGHZBICDJAOBEKBCDLM
      $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    eqrdav.1 $e |- ( ( ph /\ x e. A ) -> x e. C ) $.
    eqrdav.2 $e |- ( ( ph /\ x e. B ) -> x e. C ) $.
    eqrdav.3 $e |- ( ( ph /\ x e. C ) -> ( x e. A <-> x e. B ) ) $.
    $( Deduce equality of classes from an equivalence of membership that
       depends on the membership variable.  (Contributed by NM, 7-Nov-2008.)
       (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
    eqrdav $p |- ( ph -> A = B ) $=
      ( cv wcel wa biimpd impancom mpd biimprd impbida eqrdv ) ABCDABIZCJZRDJZA
      SKREJZTFAUASTAUAKZSTHLMNATKUASGAUATSUBSTHOMNPQ $.

    $( Obsolete proof of ~ eqrdav as of 19-Nov-2019.  (Contributed by NM,
       7-Nov-2008.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eqrdavOLD $p |- ( ph -> A = B ) $=
      ( cv wcel wa biimpd impancom mpd wi exbiri com23 imp impbida eqrdv ) ABCD
      ABIZCJZUADJZAUBKUAEJZUCFAUDUBUCAUDKUBUCHLMNAUCKUDUBGAUCUDUBOAUDUCUBAUDUBU
      CHPQRNST $.
  $}

  ${
    $d x A $.
    $( Law of identity (reflexivity of class equality).  Theorem 6.4 of [Quine]
       p. 41.

       This is part of Frege's eighth axiom per Proposition 54 of [Frege1879]
       p. 50; see also ~ biid .  This law is thought to have originated with
       Aristotle (_Metaphysics_, Zeta, 17, 1041 a, 10-20).  (Thanks to Stefan
       Allan and BJ for this information.)  (Contributed by NM, 21-Jun-1993.)
       (Revised by BJ, 14-Oct-2017.) $)
    eqid $p |- A = A $=
      ( vx cv wcel biid eqriv ) BAABCADEF $.
  $}

  $( Class identity law with antecedent.  (Contributed by NM, 21-Aug-2008.) $)
  eqidd $p |- ( ph -> A = A ) $=
    ( wceq eqid a1i ) BBCABDE $.

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ph $.
    eqeq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction from equality to equivalence of equalities.  (Contributed by
       NM, 27-Dec-1993.)  Reduce dependencies on axioms.  (Revised by Wolf
       Lammen, 5-Dec-2019.) $)
    eqeq1d $p |- ( ph -> ( A = C <-> B = C ) ) $=
      ( vx cv wcel wb wal wceq dfcleq biimpi bibi1 alimi albi 4syl 3bitr4g ) AF
      GZBHZSDHZIZFJZSCHZUAIZFJZBDKCDKABCKZTUDIZFJZUBUEIZFJUCUFIEUGUIFBCLMUHUJFT
      UDUANOUBUEFPQFBDLFCDLR $.

    $( Shorter proof of ~ eqeq1d based on more axioms.  (Contributed by NM,
       27-Dec-1993.)  (Revised by Wolf Lammen, 19-Nov-2019.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    eqeq1dALT $p |- ( ph -> ( A = C <-> B = C ) ) $=
      ( vx cv wcel wb wal wceq dfcleq sylib 19.21bi bibi1d albidv 3bitr4g ) AFG
      ZBHZRDHZIZFJRCHZTIZFJBDKCDKAUAUCFASUBTASUBIZFABCKUDFJEFBCLMNOPFBDLFCDLQ
      $.
  $}

  $( Equality implies equivalence of equalities.  (Contributed by NM,
     26-May-1993.)  (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
  eqeq1 $p |- ( A = B -> ( A = C <-> B = C ) ) $=
    ( wceq id eqeq1d ) ABDZABCGEF $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Obsolete proof of ~ eqeq1 as of 19-Nov-2019.  (Contributed by NM,
       26-May-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eqeq1OLD $p |- ( A = B -> ( A = C <-> B = C ) ) $=
      ( vx wceq cv wcel wb wal dfcleq biimpi 19.21bi bibi1d albidv 3bitr4g ) AB
      EZDFZAGZQCGZHZDIQBGZSHZDIACEBCEPTUBDPRUASPRUAHZDPUCDIDABJKLMNDACJDBCJO $.
  $}

  ${
    eqeq1dOLD.1 $e |- ( ph -> A = B ) $.
    $( Obsolete proof of ~ eqeq1d as of 19-Nov-2019.  (Contributed by NM,
       27-Dec-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eqeq1dOLD $p |- ( ph -> ( A = C <-> B = C ) ) $=
      ( wceq wb eqeq1OLD syl ) ABCFBDFCDFGEBCDHI $.
  $}

  ${
    eqeq1i.1 $e |- A = B $.
    $( Inference from equality to equivalence of equalities.  (Contributed by
       NM, 15-Jul-1993.) $)
    eqeq1i $p |- ( A = C <-> B = C ) $=
      ( wceq wb eqeq1 ax-mp ) ABEACEBCEFDABCGH $.
  $}

  ${
    eqcomd.1 $e |- ( ph -> A = B ) $.
    $( Deduction from commutative law for class equality.  (Contributed by NM,
       15-Aug-1994.)  Allow shortening of ~ eqcom .  (Revised by Wolf Lammen,
       19-Nov-2019.) $)
    eqcomd $p |- ( ph -> B = A ) $=
      ( wceq eqid eqeq1d mpbii ) ABBECBEBFABCBDGH $.
  $}

  $( Commutative law for class equality.  Theorem 6.5 of [Quine] p. 41.
     (Contributed by NM, 26-May-1993.)  (Proof shortened by Wolf Lammen,
     19-Nov-2019.) $)
  eqcom $p |- ( A = B <-> B = A ) $=
    ( wceq id eqcomd impbii ) ABCZBACZGABGDEHBAHDEF $.

  ${
    $d x A $.  $d x B $.
    $( Obsolete proof of ~ eqcom as of 19-Nov-2019.  (Contributed by NM,
       26-May-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eqcomOLD $p |- ( A = B <-> B = A ) $=
      ( vx cv wcel wb wal wceq bicom albii dfcleq 3bitr4i ) CDZAEZMBEZFZCGONFZC
      GABHBAHPQCNOIJCABKCBAKL $.
  $}

  ${
    eqcomdOLD.1 $e |- ( ph -> A = B ) $.
    $( Obsolete proof of ~ eqcomd as of 19-Nov-2019.  (Contributed by NM,
       15-Aug-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eqcomdOLD $p |- ( ph -> B = A ) $=
      ( wceq eqcomOLD sylib ) ABCECBEDBCFG $.
  $}

  ${
    eqcoms.1 $e |- ( A = B -> ph ) $.
    $( Inference applying commutative law for class equality to an antecedent.
       (Contributed by NM, 24-Jun-1993.) $)
    eqcoms $p |- ( B = A -> ph ) $=
      ( wceq eqcom sylbi ) CBEBCEACBFDG $.
  $}

  ${
    eqcomi.1 $e |- A = B $.
    $( Inference from commutative law for class equality.  (Contributed by NM,
       26-May-1993.) $)
    eqcomi $p |- B = A $=
      ( wceq eqcom mpbi ) ABDBADCABEF $.
  $}

  ${
    eqeq2d.1 $e |- ( ph -> A = B ) $.
    $( Deduction from equality to equivalence of equalities.  (Contributed by
       NM, 27-Dec-1993.)  Allow shortening of ~ eqeq2 .  (Revised by Wolf
       Lammen, 19-Nov-2019.) $)
    eqeq2d $p |- ( ph -> ( C = A <-> C = B ) ) $=
      ( wceq eqeq1d eqcom 3bitr4g ) ABDFCDFDBFDCFABCDEGDBHDCHI $.
  $}

  $( Equality implies equivalence of equalities.  (Contributed by NM,
     26-May-1993.)  (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
  eqeq2 $p |- ( A = B -> ( C = A <-> C = B ) ) $=
    ( wceq id eqeq2d ) ABDZABCGEF $.

  $( Obsolete proof of ~ eqeq2 as of 19-Nov-2019.  (Contributed by NM,
     26-May-1993.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  eqeq2OLD $p |- ( A = B -> ( C = A <-> C = B ) ) $=
    ( wceq eqeq1 eqcom 3bitr4g ) ABDACDBCDCADCBDABCECAFCBFG $.

  ${
    eqeq2dOLD.1 $e |- ( ph -> A = B ) $.
    $( Obsolete proof of ~ eqeq2d as of 19-Nov-2019.  (Contributed by NM,
       27-Dec-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eqeq2dOLD $p |- ( ph -> ( C = A <-> C = B ) ) $=
      ( wceq wb eqeq2OLD syl ) ABCFDBFDCFGEBCDHI $.
  $}

  ${
    eqeq2i.1 $e |- A = B $.
    $( Inference from equality to equivalence of equalities.  (Contributed by
       NM, 26-May-1993.) $)
    eqeq2i $p |- ( C = A <-> C = B ) $=
      ( wceq wb eqeq2 ax-mp ) ABECAECBEFDABCGH $.
  $}

  $( Equality relationship among 4 classes.  (Contributed by NM,
     3-Aug-1994.) $)
  eqeq12 $p |- ( ( A = B /\ C = D ) -> ( A = C <-> B = D ) ) $=
    ( wceq eqeq1 eqeq2 sylan9bb ) ABEACEBCECDEBDEABCFCDBGH $.

  ${
    eqeq12i.1 $e |- A = B $.
    eqeq12i.2 $e |- C = D $.
    $( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 15-Jul-1993.)  (Proof shortened by Andrew Salmon,
       25-May-2011.)  (Proof shortened by Wolf Lammen, 20-Nov-2019.) $)
    eqeq12i $p |- ( A = C <-> B = D ) $=
      ( wceq eqeq1i eqeq2i bitri ) ACGBCGBDGABCEHCDBFIJ $.

    $( Theorem eqeq12i is the congruence law for equality. $)
    $( $j congruence 'eqeq12i'; $)
  $}

  ${
    eqeq12iOLD.1 $e |- A = B $.
    eqeq12iOLD.2 $e |- C = D $.
    $( Obsolete proof of ~ eqeq12i as of 20-Nov-2019.  (Contributed by NM,
       15-Jul-1993.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    eqeq12iOLD $p |- ( A = C <-> B = D ) $=
      ( wceq wb eqeq12 mp2an ) ABGCDGACGBDGHEFABCDIJ $.
  $}

  ${
    eqeq12d.1 $e |- ( ph -> A = B ) $.
    eqeq12d.2 $e |- ( ph -> C = D ) $.
    $( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew Salmon,
       25-May-2011.) $)
    eqeq12d $p |- ( ph -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeq12 syl2anc ) ABCHDEHBDHCEHIFGBCDEJK $.
  $}

  ${
    eqeqan12d.1 $e |- ( ph -> A = B ) $.
    eqeqan12d.2 $e |- ( ps -> C = D ) $.
    $( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 9-Aug-1994.)  (Proof shortened by Andrew Salmon,
       25-May-2011.)  (Proof shortened by Wolf Lammen, 20-Nov-2019.) $)
    eqeqan12d $p |- ( ( ph /\ ps ) -> ( A = C <-> B = D ) ) $=
      ( wa wceq adantr adantl eqeq12d ) ABICDEFACDJBGKBEFJAHLM $.
    $( Obsolete proof of ~ eqeqan12d as of 20-Nov-2019.  (Contributed by NM,
       9-Aug-1994.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    eqeqan12dOLD $p |- ( ( ph /\ ps ) -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeq12 syl2an ) ACDIEFICEIDFIJBGHCDEFKL $.
  $}

  ${
    eqeqan12rd.1 $e |- ( ph -> A = B ) $.
    eqeqan12rd.2 $e |- ( ps -> C = D ) $.
    $( A useful inference for substituting definitions into an equality.
       (Contributed by NM, 9-Aug-1994.) $)
    eqeqan12rd $p |- ( ( ps /\ ph ) -> ( A = C <-> B = D ) ) $=
      ( wceq wb eqeqan12d ancoms ) ABCEIDFIJABCDEFGHKL $.
  $}

  $( Transitive law for class equality.  Proposition 4.7(3) of [TakeutiZaring]
     p. 13.  (Contributed by NM, 25-Jan-2004.) $)
  eqtr $p |- ( ( A = B /\ B = C ) -> A = C ) $=
    ( wceq eqeq1 biimpar ) ABDACDBCDABCEF $.

  $( A transitive law for class equality.  (Contributed by NM, 20-May-2005.)
     (Proof shortened by Andrew Salmon, 25-May-2011.) $)
  eqtr2 $p |- ( ( A = B /\ A = C ) -> B = C ) $=
    ( wceq eqcom eqtr sylanb ) ABDBADACDBCDABEBACFG $.

  $( A transitive law for class equality.  (Contributed by NM, 20-May-2005.) $)
  eqtr3 $p |- ( ( A = C /\ B = C ) -> A = B ) $=
    ( wceq eqcom eqtr sylan2b ) BCDACDCBDABDBCEACBFG $.

  ${
    eqtri.1 $e |- A = B $.
    eqtri.2 $e |- B = C $.
    $( An equality transitivity inference.  (Contributed by NM,
       26-May-1993.) $)
    eqtri $p |- A = C $=
      ( wceq eqeq2i mpbi ) ABFACFDBCAEGH $.
  $}

  ${
    eqtr2i.1 $e |- A = B $.
    eqtr2i.2 $e |- B = C $.
    $( An equality transitivity inference.  (Contributed by NM,
       21-Feb-1995.) $)
    eqtr2i $p |- C = A $=
      ( eqtri eqcomi ) ACABCDEFG $.
  $}

  ${
    eqtr3i.1 $e |- A = B $.
    eqtr3i.2 $e |- A = C $.
    $( An equality transitivity inference.  (Contributed by NM, 6-May-1994.) $)
    eqtr3i $p |- B = C $=
      ( eqcomi eqtri ) BACABDFEG $.
  $}

  ${
    eqtr4i.1 $e |- A = B $.
    eqtr4i.2 $e |- C = B $.
    $( An equality transitivity inference.  (Contributed by NM,
       26-May-1993.) $)
    eqtr4i $p |- A = C $=
      ( eqcomi eqtri ) ABCDCBEFG $.
  $}

  $( Register '=' as an equality for its type (class). $)
  $( $j equality 'wceq' from 'eqid' 'eqcomi' 'eqtri'; $)

  ${
    3eqtri.1 $e |- A = B $.
    3eqtri.2 $e |- B = C $.
    3eqtri.3 $e |- C = D $.
    $( An inference from three chained equalities.  (Contributed by NM,
       29-Aug-1993.) $)
    3eqtri $p |- A = D $=
      ( eqtri ) ABDEBCDFGHH $.

    $( An inference from three chained equalities.  (Contributed by NM,
       3-Aug-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtrri $p |- D = A $=
      ( eqtri eqtr2i ) ACDABCEFHGI $.
  $}

  ${
    3eqtr2i.1 $e |- A = B $.
    3eqtr2i.2 $e |- C = B $.
    3eqtr2i.3 $e |- C = D $.
    $( An inference from three chained equalities.  (Contributed by NM,
       3-Aug-2006.) $)
    3eqtr2i $p |- A = D $=
      ( eqtr4i eqtri ) ACDABCEFHGI $.

    $( An inference from three chained equalities.  (Contributed by NM,
       3-Aug-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr2ri $p |- D = A $=
      ( eqtr4i eqtr2i ) ACDABCEFHGI $.
  $}

  ${
    3eqtr3i.1 $e |- A = B $.
    3eqtr3i.2 $e |- A = C $.
    3eqtr3i.3 $e |- B = D $.
    $( An inference from three chained equalities.  (Contributed by NM,
       6-May-1994.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr3i $p |- C = D $=
      ( eqtr3i ) BCDABCEFHGH $.

    $( An inference from three chained equalities.  (Contributed by NM,
       15-Aug-2004.) $)
    3eqtr3ri $p |- D = C $=
      ( eqtr3i ) BDCGABCEFHH $.
  $}

  ${
    3eqtr4i.1 $e |- A = B $.
    3eqtr4i.2 $e |- C = A $.
    3eqtr4i.3 $e |- D = B $.
    $( An inference from three chained equalities.  (Contributed by NM,
       26-May-1993.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr4i $p |- C = D $=
      ( eqtr4i ) CADFDBAGEHH $.

    $( An inference from three chained equalities.  (Contributed by NM,
       2-Sep-1995.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr4ri $p |- D = C $=
      ( eqtr4i ) DACDBAGEHFH $.
  $}

  ${
    eqtrd.1 $e |- ( ph -> A = B ) $.
    eqtrd.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       21-Jun-1993.) $)
    eqtrd $p |- ( ph -> A = C ) $=
      ( wceq eqeq2d mpbid ) ABCGBDGEACDBFHI $.
  $}

  ${
    eqtr2d.1 $e |- ( ph -> A = B ) $.
    eqtr2d.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       18-Oct-1999.) $)
    eqtr2d $p |- ( ph -> C = A ) $=
      ( eqtrd eqcomd ) ABDABCDEFGH $.
  $}

  ${
    eqtr3d.1 $e |- ( ph -> A = B ) $.
    eqtr3d.2 $e |- ( ph -> A = C ) $.
    $( An equality transitivity equality deduction.  (Contributed by NM,
       18-Jul-1995.) $)
    eqtr3d $p |- ( ph -> B = C ) $=
      ( eqcomd eqtrd ) ACBDABCEGFH $.
  $}

  ${
    eqtr4d.1 $e |- ( ph -> A = B ) $.
    eqtr4d.2 $e |- ( ph -> C = B ) $.
    $( An equality transitivity equality deduction.  (Contributed by NM,
       18-Jul-1995.) $)
    eqtr4d $p |- ( ph -> A = C ) $=
      ( eqcomd eqtrd ) ABCDEADCFGH $.
  $}

  ${
    3eqtrd.1 $e |- ( ph -> A = B ) $.
    3eqtrd.2 $e |- ( ph -> B = C ) $.
    3eqtrd.3 $e |- ( ph -> C = D ) $.
    $( A deduction from three chained equalities.  (Contributed by NM,
       29-Oct-1995.) $)
    3eqtrd $p |- ( ph -> A = D ) $=
      ( eqtrd ) ABCEFACDEGHII $.

    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtrrd $p |- ( ph -> D = A ) $=
      ( eqtrd eqtr2d ) ABDEABCDFGIHJ $.
  $}

  ${
    3eqtr2d.1 $e |- ( ph -> A = B ) $.
    3eqtr2d.2 $e |- ( ph -> C = B ) $.
    3eqtr2d.3 $e |- ( ph -> C = D ) $.
    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-2006.) $)
    3eqtr2d $p |- ( ph -> A = D ) $=
      ( eqtr4d eqtrd ) ABDEABCDFGIHJ $.

    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-2006.) $)
    3eqtr2rd $p |- ( ph -> D = A ) $=
      ( eqtr4d eqtr2d ) ABDEABCDFGIHJ $.
  $}

  ${
    3eqtr3d.1 $e |- ( ph -> A = B ) $.
    3eqtr3d.2 $e |- ( ph -> A = C ) $.
    3eqtr3d.3 $e |- ( ph -> B = D ) $.
    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-1995.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr3d $p |- ( ph -> C = D ) $=
      ( eqtr3d ) ACDEABCDFGIHI $.

    $( A deduction from three chained equalities.  (Contributed by NM,
       14-Jan-2006.) $)
    3eqtr3rd $p |- ( ph -> D = C ) $=
      ( eqtr3d ) ACEDHABCDFGII $.
  $}

  ${
    3eqtr4d.1 $e |- ( ph -> A = B ) $.
    3eqtr4d.2 $e |- ( ph -> C = A ) $.
    3eqtr4d.3 $e |- ( ph -> D = B ) $.
    $( A deduction from three chained equalities.  (Contributed by NM,
       4-Aug-1995.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    3eqtr4d $p |- ( ph -> C = D ) $=
      ( eqtr4d ) ADBEGAECBHFII $.

    $( A deduction from three chained equalities.  (Contributed by NM,
       21-Sep-1995.) $)
    3eqtr4rd $p |- ( ph -> D = C ) $=
      ( eqtr4d ) AEBDAECBHFIGI $.
  $}

  ${
    syl5eq.1 $e |- A = B $.
    syl5eq.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       21-Jun-1993.) $)
    syl5eq $p |- ( ph -> A = C ) $=
      ( wceq a1i eqtrd ) ABCDBCGAEHFI $.
  $}

  ${
    syl5req.1 $e |- A = B $.
    syl5req.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
    syl5req $p |- ( ph -> C = A ) $=
      ( syl5eq eqcomd ) ABDABCDEFGH $.
  $}

  ${
    syl5eqr.1 $e |- B = A $.
    syl5eqr.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM, 5-Aug-1993.) $)
    syl5eqr $p |- ( ph -> A = C ) $=
      ( eqcomi syl5eq ) ABCDCBEGFH $.
  $}

  ${
    syl5reqr.1 $e |- B = A $.
    syl5reqr.2 $e |- ( ph -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
    syl5reqr $p |- ( ph -> C = A ) $=
      ( eqcomi syl5req ) ABCDCBEGFH $.
  $}

  ${
    syl6eq.1 $e |- ( ph -> A = B ) $.
    syl6eq.2 $e |- B = C $.
    $( An equality transitivity deduction.  (Contributed by NM,
       21-Jun-1993.) $)
    syl6eq $p |- ( ph -> A = C ) $=
      ( wceq a1i eqtrd ) ABCDECDGAFHI $.
  $}

  ${
    syl6req.1 $e |- ( ph -> A = B ) $.
    syl6req.2 $e |- B = C $.
    $( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
    syl6req $p |- ( ph -> C = A ) $=
      ( syl6eq eqcomd ) ABDABCDEFGH $.
  $}

  ${
    syl6eqr.1 $e |- ( ph -> A = B ) $.
    syl6eqr.2 $e |- C = B $.
    $( An equality transitivity deduction.  (Contributed by NM,
       21-Jun-1993.) $)
    syl6eqr $p |- ( ph -> A = C ) $=
      ( eqcomi syl6eq ) ABCDEDCFGH $.
  $}

  ${
    syl6reqr.1 $e |- ( ph -> A = B ) $.
    syl6reqr.2 $e |- C = B $.
    $( An equality transitivity deduction.  (Contributed by NM,
       29-Mar-1998.) $)
    syl6reqr $p |- ( ph -> C = A ) $=
      ( eqcomi syl6req ) ABCDEDCFGH $.
  $}

  ${
    sylan9eq.1 $e |- ( ph -> A = B ) $.
    sylan9eq.2 $e |- ( ps -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM, 8-May-1994.)
       (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    sylan9eq $p |- ( ( ph /\ ps ) -> A = C ) $=
      ( wceq eqtr syl2an ) ACDHDEHCEHBFGCDEIJ $.
  $}

  ${
    sylan9req.1 $e |- ( ph -> B = A ) $.
    sylan9req.2 $e |- ( ps -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM,
       23-Jun-2007.) $)
    sylan9req $p |- ( ( ph /\ ps ) -> A = C ) $=
      ( eqcomd sylan9eq ) ABCDEADCFHGI $.
  $}

  ${
    sylan9eqr.1 $e |- ( ph -> A = B ) $.
    sylan9eqr.2 $e |- ( ps -> B = C ) $.
    $( An equality transitivity deduction.  (Contributed by NM, 8-May-1994.) $)
    sylan9eqr $p |- ( ( ps /\ ph ) -> A = C ) $=
      ( wceq sylan9eq ancoms ) ABCEHABCDEFGIJ $.
  $}

  ${
    3eqtr3g.1 $e |- ( ph -> A = B ) $.
    3eqtr3g.2 $e |- A = C $.
    3eqtr3g.3 $e |- B = D $.
    $( A chained equality inference, useful for converting from definitions.
       (Contributed by NM, 15-Nov-1994.) $)
    3eqtr3g $p |- ( ph -> C = D ) $=
      ( syl5eqr syl6eq ) ADCEADBCGFIHJ $.
  $}

  ${
    3eqtr3a.1 $e |- A = B $.
    3eqtr3a.2 $e |- ( ph -> A = C ) $.
    3eqtr3a.3 $e |- ( ph -> B = D ) $.
    $( A chained equality inference, useful for converting from definitions.
       (Contributed by Mario Carneiro, 6-Nov-2015.) $)
    3eqtr3a $p |- ( ph -> C = D ) $=
      ( syl5eq eqtr3d ) ABDEGABCEFHIJ $.
  $}

  ${
    3eqtr4g.1 $e |- ( ph -> A = B ) $.
    3eqtr4g.2 $e |- C = A $.
    3eqtr4g.3 $e |- D = B $.
    $( A chained equality inference, useful for converting to definitions.
       (Contributed by NM, 21-Jun-1993.) $)
    3eqtr4g $p |- ( ph -> C = D ) $=
      ( syl5eq syl6eqr ) ADCEADBCGFIHJ $.
  $}

  ${
    3eqtr4a.1 $e |- A = B $.
    3eqtr4a.2 $e |- ( ph -> C = A ) $.
    3eqtr4a.3 $e |- ( ph -> D = B ) $.
    $( A chained equality inference, useful for converting to definitions.
       (Contributed by NM, 2-Feb-2007.)  (Proof shortened by Andrew Salmon,
       25-May-2011.) $)
    3eqtr4a $p |- ( ph -> C = D ) $=
      ( syl6eq eqtr4d ) ADCEADBCGFIHJ $.
  $}

  ${
    eq2tr.1 $e |- ( A = C -> D = F ) $.
    eq2tr.2 $e |- ( B = D -> C = G ) $.
    $( A compound transitive inference for class equality.  (Contributed by NM,
       22-Jan-2004.) $)
    eq2tri $p |- ( ( A = C /\ B = F ) <-> ( B = D /\ A = G ) ) $=
      ( wceq wa ancom eqeq2d pm5.32i 3bitr3i ) ACIZBDIZJPOJOBEIZJPAFIZJOPKOPQOD
      EBGLMPORPCFAHLMN $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ph $.
    eleq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction from equality to equivalence of membership.  (Contributed by
       NM, 21-Jun-1993.)  Allow shortening of ~ eleq1 .  (Revised by Wolf
       Lammen, 20-Nov-2019.) $)
    eleq1d $p |- ( ph -> ( A e. C <-> B e. C ) ) $=
      ( vx cv wceq wcel wa wex eqeq2d anbi1d exbidv df-clel 3bitr4g ) AFGZBHZQD
      IZJZFKQCHZSJZFKBDICDIATUBFARUASABCQELMNFBDOFCDOP $.

    $( Deduction from equality to equivalence of membership.  (Contributed by
       NM, 27-Dec-1993.)  Reduce dependencies on axioms.  (Revised by Wolf
       Lammen, 5-Dec-2019.) $)
    eleq2d $p |- ( ph -> ( C e. A <-> C e. B ) ) $=
      ( vx cv wceq wcel wa wex wal dfcleq sylib bi1 anim2d aleximi bi2 df-clel
      wb impbid syl 3bitr4g ) AFGZDHZUDBIZJZFKZUEUDCIZJZFKZDBIDCIAUFUITZFLZUHUK
      TABCHUMEFBCMNUMUHUKULUGUJFULUFUIUEUFUIOPQULUJUGFULUIUFUEUFUIRPQUAUBFDBSFD
      CSUC $.

    $( Alternative, shorter proof of ~ eleq2d , at the expense of using more
       axioms.  (Contributed by NM, 27-Dec-1993.)  (Revised by Wolf Lammen,
       20-Nov-2019.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    eleq2dALT $p |- ( ph -> ( C e. A <-> C e. B ) ) $=
      ( vx cv wceq wcel wa wex wal dfcleq 19.21bi anbi2d exbidv df-clel 3bitr4g
      wb sylib ) AFGZDHZUABIZJZFKUBUACIZJZFKDBIDCIAUDUFFAUCUEUBAUCUESZFABCHUGFL
      EFBCMTNOPFDBQFDCQR $.
  $}

  $( Equality implies equivalence of membership.  (Contributed by NM,
     26-May-1993.)  (Proof shortened by Wolf Lammen, 20-Nov-2019.) $)
  eleq1 $p |- ( A = B -> ( A e. C <-> B e. C ) ) $=
    ( wceq id eleq1d ) ABDZABCGEF $.

  $( Equality implies equivalence of membership.  (Contributed by NM,
     26-May-1993.)  (Proof shortened by Wolf Lammen, 20-Nov-2019.) $)
  eleq2 $p |- ( A = B -> ( C e. A <-> C e. B ) ) $=
    ( wceq id eleq2d ) ABDZABCGEF $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Obsolete proof of ~ eleq1 as of 20-Nov-2019.  (Contributed by NM,
       26-May-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eleq1OLD $p |- ( A = B -> ( A e. C <-> B e. C ) ) $=
      ( vx wceq cv wcel wa wex eqeq2 anbi1d exbidv df-clel 3bitr4g ) ABEZDFZAEZ
      PCGZHZDIPBEZRHZDIACGBCGOSUADOQTRABPJKLDACMDBCMN $.

    $( Obsolete proof of ~ eleq2 as of 20-Nov-2019.  (Contributed by NM,
       26-May-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eleq2OLD $p |- ( A = B -> ( C e. A <-> C e. B ) ) $=
      ( vx wceq cv wcel wa wex wal dfcleq biimpi 19.21bi anbi2d df-clel 3bitr4g
      wb exbidv ) ABEZDFZCEZTAGZHZDIUATBGZHZDICAGCBGSUCUEDSUBUDUASUBUDQZDSUFDJD
      ABKLMNRDCAODCBOP $.
  $}

  $( Equality implies equivalence of membership.  (Contributed by NM,
     31-May-1999.) $)
  eleq12 $p |- ( ( A = B /\ C = D ) -> ( A e. C <-> B e. D ) ) $=
    ( wceq wcel eleq1 eleq2 sylan9bb ) ABEACFBCFCDEBDFABCGCDBHI $.

  ${
    eleq1i.1 $e |- A = B $.
    $( Inference from equality to equivalence of membership.  (Contributed by
       NM, 21-Jun-1993.) $)
    eleq1i $p |- ( A e. C <-> B e. C ) $=
      ( wceq wcel wb eleq1 ax-mp ) ABEACFBCFGDABCHI $.

    $( Inference from equality to equivalence of membership.  (Contributed by
       NM, 26-May-1993.) $)
    eleq2i $p |- ( C e. A <-> C e. B ) $=
      ( wceq wcel wb eleq2 ax-mp ) ABECAFCBFGDABCHI $.

    ${
      eleq12i.2 $e |- C = D $.
      $( Inference from equality to equivalence of membership.  (Contributed by
         NM, 31-May-1994.) $)
      eleq12i $p |- ( A e. C <-> B e. D ) $=
        ( wcel eleq2i eleq1i bitri ) ACGADGBDGCDAFHABDEIJ $.

      $( Theorem eleq12i is the congruence law for elementhood. $)
      $( $j congruence 'eleq12i'; $)
    $}
  $}

  ${
    eleq2d.1 $e |- ( ph -> A = B ) $.
    $( Obsolete proof of ~ eleq1d as of 20-Nov-2019.  (Contributed by NM,
       21-Jun-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eleq1dOLD $p |- ( ph -> ( A e. C <-> B e. C ) ) $=
      ( wceq wcel wb eleq1 syl ) ABCFBDGCDGHEBCDIJ $.

    $( Obsolete proof of ~ eleq2d as of 20-Nov-2019.  (Contributed by NM,
       27-Dec-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eleq2dOLD $p |- ( ph -> ( C e. A <-> C e. B ) ) $=
      ( wceq wcel wb eleq2 syl ) ABCFDBGDCGHEBCDIJ $.

    ${
      eleq12d.2 $e |- ( ph -> C = D ) $.
      $( Deduction from equality to equivalence of membership.  (Contributed by
         NM, 31-May-1994.) $)
      eleq12d $p |- ( ph -> ( A e. C <-> B e. D ) ) $=
        ( wcel eleq2d eleq1d bitrd ) ABDHBEHCEHADEBGIABCEFJK $.
    $}
  $}

  $( A transitive-type law relating membership and equality.  (Contributed by
     NM, 9-Apr-1994.) $)
  eleq1a $p |- ( A e. B -> ( C = A -> C e. B ) ) $=
    ( wceq wcel eleq1 biimprcd ) CADCBEABECABFG $.

  ${
    eqeltr.1 $e |- A = B $.
    eqeltr.2 $e |- B e. C $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       NM, 21-Jun-1993.) $)
    eqeltri $p |- A e. C $=
      ( wcel eleq1i mpbir ) ACFBCFEABCDGH $.
  $}

  ${
    eqeltrr.1 $e |- A = B $.
    eqeltrr.2 $e |- A e. C $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       NM, 21-Jun-1993.) $)
    eqeltrri $p |- B e. C $=
      ( eqcomi eqeltri ) BACABDFEG $.
  $}

  ${
    eleqtr.1 $e |- A e. B $.
    eleqtr.2 $e |- B = C $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       NM, 15-Jul-1993.) $)
    eleqtri $p |- A e. C $=
      ( wcel eleq2i mpbi ) ABFACFDBCAEGH $.
  $}

  ${
    eleqtrr.1 $e |- A e. B $.
    eleqtrr.2 $e |- C = B $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       NM, 15-Jul-1993.) $)
    eleqtrri $p |- A e. C $=
      ( eqcomi eleqtri ) ABCDCBEFG $.
  $}

  ${
    eqeltrd.1 $e |- ( ph -> A = B ) $.
    eqeltrd.2 $e |- ( ph -> B e. C ) $.
    $( Substitution of equal classes into membership relation, deduction form.
       (Contributed by Raph Levien, 10-Dec-2002.) $)
    eqeltrd $p |- ( ph -> A e. C ) $=
      ( wcel eleq1d mpbird ) ABDGCDGFABCDEHI $.
  $}

  ${
    eqeltrrd.1 $e |- ( ph -> A = B ) $.
    eqeltrrd.2 $e |- ( ph -> A e. C ) $.
    $( Deduction that substitutes equal classes into membership.  (Contributed
       by NM, 14-Dec-2004.) $)
    eqeltrrd $p |- ( ph -> B e. C ) $=
      ( eqcomd eqeltrd ) ACBDABCEGFH $.
  $}

  ${
    eleqtrd.1 $e |- ( ph -> A e. B ) $.
    eleqtrd.2 $e |- ( ph -> B = C ) $.
    $( Deduction that substitutes equal classes into membership.  (Contributed
       by NM, 14-Dec-2004.) $)
    eleqtrd $p |- ( ph -> A e. C ) $=
      ( wcel eleq2d mpbid ) ABCGBDGEACDBFHI $.
  $}

  ${
    eleqtrrd.1 $e |- ( ph -> A e. B ) $.
    eleqtrrd.2 $e |- ( ph -> C = B ) $.
    $( Deduction that substitutes equal classes into membership.  (Contributed
       by NM, 14-Dec-2004.) $)
    eleqtrrd $p |- ( ph -> A e. C ) $=
      ( eqcomd eleqtrd ) ABCDEADCFGH $.
  $}

  ${
    syl5eqel.1 $e |- A = B $.
    syl5eqel.2 $e |- ( ph -> B e. C ) $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl5eqel $p |- ( ph -> A e. C ) $=
      ( wceq a1i eqeltrd ) ABCDBCGAEHFI $.
  $}

  ${
    syl5eqelr.1 $e |- B = A $.
    syl5eqelr.2 $e |- ( ph -> B e. C ) $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl5eqelr $p |- ( ph -> A e. C ) $=
      ( eqcomi syl5eqel ) ABCDCBEGFH $.
  $}

  ${
    syl5eleq.1 $e |- A e. B $.
    syl5eleq.2 $e |- ( ph -> B = C ) $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl5eleq $p |- ( ph -> A e. C ) $=
      ( wcel a1i eleqtrd ) ABCDBCGAEHFI $.
  $}

  ${
    syl5eleqr.1 $e |- A e. B $.
    syl5eleqr.2 $e |- ( ph -> C = B ) $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl5eleqr $p |- ( ph -> A e. C ) $=
      ( eqcomd syl5eleq ) ABCDEADCFGH $.
  $}

  ${
    syl6eqel.1 $e |- ( ph -> A = B ) $.
    syl6eqel.2 $e |- B e. C $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl6eqel $p |- ( ph -> A e. C ) $=
      ( wcel a1i eqeltrd ) ABCDECDGAFHI $.
  $}

  ${
    syl6eqelr.1 $e |- ( ph -> B = A ) $.
    syl6eqelr.2 $e |- B e. C $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl6eqelr $p |- ( ph -> A e. C ) $=
      ( eqcomd syl6eqel ) ABCDACBEGFH $.
  $}

  ${
    syl6eleq.1 $e |- ( ph -> A e. B ) $.
    syl6eleq.2 $e |- B = C $.
    $( A membership and equality inference.  (Contributed by NM,
       4-Jan-2006.) $)
    syl6eleq $p |- ( ph -> A e. C ) $=
      ( wceq a1i eleqtrd ) ABCDECDGAFHI $.
  $}

  ${
    syl6eleqr.1 $e |- ( ph -> A e. B ) $.
    syl6eleqr.2 $e |- C = B $.
    $( A membership and equality inference.  (Contributed by NM,
       24-Apr-2005.) $)
    syl6eleqr $p |- ( ph -> A e. C ) $=
      ( eqcomi syl6eleq ) ABCDEDCFGH $.
  $}

  ${
    3eltr3.1 $e |- A e. B $.
    3eltr3.2 $e |- A = C $.
    3eltr3.3 $e |- B = D $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
    3eltr3i $p |- C e. D $=
      ( eleqtri eqeltrri ) ACDFABDEGHI $.
  $}

  ${
    3eltr4.1 $e |- A e. B $.
    3eltr4.2 $e |- C = A $.
    3eltr4.3 $e |- D = B $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
    3eltr4i $p |- C e. D $=
      ( eleqtrri eqeltri ) CADFABDEGHI $.
  $}

  ${
    3eltr3d.1 $e |- ( ph -> A e. B ) $.
    3eltr3d.2 $e |- ( ph -> A = C ) $.
    3eltr3d.3 $e |- ( ph -> B = D ) $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
    3eltr3d $p |- ( ph -> C e. D ) $=
      ( eleqtrd eqeltrrd ) ABDEGABCEFHIJ $.
  $}

  ${
    3eltr4d.1 $e |- ( ph -> A e. B ) $.
    3eltr4d.2 $e |- ( ph -> C = A ) $.
    3eltr4d.3 $e |- ( ph -> D = B ) $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.) $)
    3eltr4d $p |- ( ph -> C e. D ) $=
      ( eleqtrrd eqeltrd ) ADBEGABCEFHIJ $.
  $}

  ${
    3eltr3g.1 $e |- ( ph -> A e. B ) $.
    3eltr3g.2 $e |- A = C $.
    3eltr3g.3 $e |- B = D $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.)  (Proof shortened by Wolf Lammen,
       23-Nov-2019.) $)
    3eltr3g $p |- ( ph -> C e. D ) $=
      ( syl5eqelr syl6eleq ) ADCEADBCGFIHJ $.

    $( Obsolete proof of ~ 3eltr3g as of 23.-Nov-2019.  (Contributed by Mario
       Carneiro, 6-Jan-2017.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    3eltr3gOLD $p |- ( ph -> C e. D ) $=
      ( wcel eleq12i sylib ) ABCIDEIFBDCEGHJK $.
  $}

  ${
    3eltr4g.1 $e |- ( ph -> A e. B ) $.
    3eltr4g.2 $e |- C = A $.
    3eltr4g.3 $e |- D = B $.
    $( Substitution of equal classes into membership relation.  (Contributed by
       Mario Carneiro, 6-Jan-2017.)  (Proof shortened by Wolf Lammen,
       23-Nov-2019.) $)
    3eltr4g $p |- ( ph -> C e. D ) $=
      ( syl5eqel syl6eleqr ) ADCEADBCGFIHJ $.

    $( Obsolete proof of ~ 3eltr4g as of 23.-Nov-2019.  (Contributed by Mario
       Carneiro, 6-Jan-2017.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    3eltr4gOLD $p |- ( ph -> C e. D ) $=
      ( wcel eleq12i sylibr ) ABCIDEIFDBECGHJK $.
  $}

  ${
    eleq2s.1 $e |- ( A e. B -> ph ) $.
    eleq2s.2 $e |- C = B $.
    $( Substitution of equal classes into a membership antecedent.
       (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    eleq2s $p |- ( A e. C -> ph ) $=
      ( wcel eleq2i sylbi ) BDGBCGADCBFHEI $.
  $}

  ${
    eqneltrd.1 $e |- ( ph -> A = B ) $.
    eqneltrd.2 $e |- ( ph -> -. B e. C ) $.
    $( If a class is not an element of another class, an equal class is also
       not an element.  Deduction form.  (Contributed by David Moews,
       1-May-2017.) $)
    eqneltrd $p |- ( ph -> -. A e. C ) $=
      ( wcel eleq1d mtbird ) ABDGCDGFABCDEHI $.
  $}

  ${
    eqneltrrd.1 $e |- ( ph -> A = B ) $.
    eqneltrrd.2 $e |- ( ph -> -. A e. C ) $.
    $( If a class is not an element of another class, an equal class is also
       not an element.  Deduction form.  (Contributed by David Moews,
       1-May-2017.)  (Proof shortened by Wolf Lammen, 13-Nov-2019.) $)
    eqneltrrd $p |- ( ph -> -. B e. C ) $=
      ( eqcomd eqneltrd ) ACBDABCEGFH $.
    $( Obsolete proof of ~ eqneltrrd as of 13-Nov-2019.  (Contributed by David
       Moews, 1-May-2017.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    eqneltrrdOLD $p |- ( ph -> -. B e. C ) $=
      ( wcel eleq1d mtbid ) ABDGCDGFABCDEHI $.
  $}

  ${
    neleqtrd.1 $e |- ( ph -> -. C e. A ) $.
    neleqtrd.2 $e |- ( ph -> A = B ) $.
    $( If a class is not an element of another class, it is also not an element
       of an equal class.  Deduction form.  (Contributed by David Moews,
       1-May-2017.) $)
    neleqtrd $p |- ( ph -> -. C e. B ) $=
      ( wcel eleq2d mtbid ) ADBGDCGEABCDFHI $.
  $}

  ${
    neleqtrrd.1 $e |- ( ph -> -. C e. B ) $.
    neleqtrrd.2 $e |- ( ph -> A = B ) $.
    $( If a class is not an element of another class, it is also not an element
       of an equal class.  Deduction form.  (Contributed by David Moews,
       1-May-2017.)  (Proof shortened by Wolf Lammen, 13-Nov-2019.) $)
    neleqtrrd $p |- ( ph -> -. C e. A ) $=
      ( eqcomd neleqtrd ) ACBDEABCFGH $.
    $( Obsolete proof of ~ neleqtrrd as of 13-Nov-2019.  (Contributed by David
       Moews, 1-May-2017.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    neleqtrrdOLD $p |- ( ph -> -. C e. A ) $=
      ( wcel eleq2d mtbird ) ADBGDCGEABCDFHI $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    cleqh.1 $e |- ( y e. A -> A. x y e. A ) $.
    cleqh.2 $e |- ( y e. B -> A. x y e. B ) $.
    $( Establish equality between classes, using bound-variable hypotheses
       instead of distinct variable conditions.  See also ~ cleqf .
       (Contributed by NM, 26-May-1993.)  (Proof shortened by Wolf Lammen,
       14-Nov-2019.) $)
    cleqh $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( wceq cv wcel wb wal dfcleq nfv nfi nfbi weq eleq1 bibi12d cbval bitr4i
      ) CDGBHZCIZUADIZJZBKAHZCIZUEDIZJZAKBCDLUHUDABUHBMUBUCAUBAENUCAFNOABPUFUBU
      GUCUEUACQUEUADQRST $.
    $( Obsolete proof of ~ cleqh as of 14-Nov-2019.  (Contributed by NM,
       26-May-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    cleqhOLD $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( wceq cv wcel wb wal dfcleq ax-5 wi wa dfbi2 hbim weq eleq1 cbv3h biimpd
      hban hbxfrbi bibi12d equcoms biimprd impbii bitr4i ) CDGBHZCIZUIDIZJZBKZA
      HZCIZUNDIZJZAKZBCDLURUMUQULABUQBMZULUJUKNZUKUJNZOAUJUKPUTVAAUJUKAEFQUKUJA
      FEQUBUCZABRZUQULVCUOUJUPUKUNUICSUNUIDSUDZUATULUQBAVBUSBARUQULUQULJABVDUEU
      FTUGUH $.
  $}

  $( A way of showing two classes are not equal.  (Contributed by NM,
     1-Apr-1997.) $)
  nelneq $p |- ( ( A e. C /\ -. B e. C ) -> -. A = B ) $=
    ( wcel wceq eleq1 biimpcd con3dimp ) ACDZABEZBCDZJIKABCFGH $.

  $( A way of showing two classes are not equal.  (Contributed by NM,
     12-Jan-2002.) $)
  nelneq2 $p |- ( ( A e. B /\ -. A e. C ) -> -. B = C ) $=
    ( wcel wceq eleq2 biimpcd con3dimp ) ABDZBCEZACDZJIKBCAFGH $.

  ${
    $d x y $.  $d y A $.
    $( Lemma for ~ eqsb3 .  (Contributed by Rodolfo Medina, 28-Apr-2010.)
       (Proof shortened by Andrew Salmon, 14-Jun-2011.) $)
    eqsb3lem $p |- ( [ x / y ] y = A <-> x = A ) $=
      ( cv wceq nfv eqeq1 sbie ) BDZCEADZCEZBAKBFIJCGH $.
  $}

  ${
    $d y A $.  $d w y $.  $d w A $.  $d x w $.
    $( Substitution applied to an atomic wff (class version of ~ equsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.) $)
    eqsb3 $p |- ( [ x / y ] y = A <-> x = A ) $=
      ( vw cv wceq wsb eqsb3lem sbbii nfv sbco2 3bitr3i ) BECFZBDGZDAGDECFZDAGM
      BAGAECFNODADBCHIMBADMDJKADCHL $.
  $}

  ${
    $d y A $.  $d w y $.  $d w A $.  $d w x $.
    $( Substitution applied to an atomic wff (class version of ~ elsb3 ).
       (Contributed by Rodolfo Medina, 28-Apr-2010.)  (Proof shortened by
       Andrew Salmon, 14-Jun-2011.) $)
    clelsb3 $p |- ( [ x / y ] y e. A <-> x e. A ) $=
      ( vw cv wcel wsb nfv sbco2 eleq1 sbie sbbii 3bitr3i ) DEZCFZDBGZBAGODAGBE
      ZCFZBAGAEZCFZODABOBHIPRBAORDBRDHNQCJKLOTDATDHNSCJKM $.
  $}

  ${
    hbxfr.1 $e |- A = B $.
    hbxfr.2 $e |- ( y e. B -> A. x y e. B ) $.
    $( A utility lemma to transfer a bound-variable hypothesis builder into a
       definition.  See ~ hbxfrbi for equivalence version.  (Contributed by NM,
       21-Aug-2007.) $)
    hbxfreq $p |- ( y e. A -> A. x y e. A ) $=
      ( cv wcel eleq2i hbxfrbi ) BGZCHKDHACDKEIFJ $.
  $}

  ${
    $d w y A $.  $d w x z $.
    hblem.1 $e |- ( y e. A -> A. x y e. A ) $.
    $( Change the free variable of a hypothesis builder.  Lemma for ~ nfcrii .
       (Contributed by NM, 21-Jun-1993.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
    hblem $p |- ( z e. A -> A. x z e. A ) $=
      ( cv wcel wsb wal hbsb clelsb3 albii 3imtr3i ) BFDGZBCHZOAICFDGZPAINBCAEJ
      CBDKZOPAQLM $.
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Equality of a class variable and a class abstraction (also called a
       class builder).  Theorem 5.1 of [Quine] p. 34.  This theorem shows the
       relationship between expressions with class abstractions and expressions
       with class variables.  Note that ~ abbi and its relatives are among
       those useful for converting theorems with class variables to equivalent
       theorems with wff variables, by first substituting a class abstraction
       for each class variable.

       Class variables can always be eliminated from a theorem to result in an
       equivalent theorem with wff variables, and vice-versa.  The idea is
       roughly as follows.  To convert a theorem with a wff variable ` ph `
       (that has a free variable ` x ` ) to a theorem with a class variable
       ` A ` , we substitute ` x e. A ` for ` ph ` throughout and simplify,
       where ` A ` is a new class variable not already in the wff.  An example
       is the conversion of ~ zfauscl to ~ inex1 (look at the instance of
       ~ zfauscl that occurs in the proof of ~ inex1 ).  Conversely, to convert
       a theorem with a class variable ` A ` to one with ` ph ` , we substitute
       ` { x | ph } ` for ` A ` throughout and simplify, where ` x ` and ` ph `
       are new setvar and wff variables not already in the wff.  An example is
       ~ cp , which derives a formula containing wff variables from
       substitution instances of the class variables in its equivalent
       formulation ~ cplem2 .  For more information on class variables, see
       Quine pp. 15-21 and/or Takeuti and Zaring pp. 10-13.  (Contributed by
       NM, 26-May-1993.) $)
    abeq2 $p |- ( A = { x | ph } <-> A. x ( x e. A <-> ph ) ) $=
      ( vy cab wceq cv wcel wb wal ax-5 hbab1 cleqh abid bibi2i albii bitri ) C
      ABEZFBGZCHZSRHZIZBJTAIZBJBDCRDGCHBKABDLMUBUCBUAATABNOPQ $.
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Equality of a class variable and a class abstraction.  (Contributed by
       NM, 20-Aug-1993.) $)
    abeq1 $p |- ( { x | ph } = A <-> A. x ( ph <-> x e. A ) ) $=
      ( cab wceq cv wcel wb wal abeq2 eqcom bicom albii 3bitr4i ) CABDZEBFCGZAH
      ZBIOCEAPHZBIABCJOCKRQBAPLMN $.
  $}

  ${
    abeqd.1 $e |- ( ph -> A = { x | ps } ) $.
    $( Equality of a class variable and a class abstraction (deduction).
       (Contributed by NM, 16-Nov-1995.) $)
    abeq2d $p |- ( ph -> ( x e. A <-> ps ) ) $=
      ( cv wcel cab eleq2d abid syl6bb ) ACFZDGLBCHZGBADMLEIBCJK $.
  $}

  ${
    abeqi.1 $e |- A = { x | ph } $.
    $( Equality of a class variable and a class abstraction (inference rule).
       (Contributed by NM, 3-Apr-1996.)  (Proof shortened by Wolf Lammen,
       15-Nov-2019.) $)
    abeq2i $p |- ( x e. A <-> ph ) $=
      ( cv wcel wb wtru cab wceq a1i abeq2d trud ) BECFAGHABCCABIJHDKLM $.
    $( Obsolete proof of ~ abeq2i as of 15-Nov-2019.  (Contributed by NM,
       3-Apr-1996.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    abeq2iOLD $p |- ( x e. A <-> ph ) $=
      ( cv wcel cab eleq2i abid bitri ) BEZCFKABGZFACLKDHABIJ $.
  $}

  ${
    abeqri.1 $e |- { x | ph } = A $.
    $( Equality of a class variable and a class abstraction (inference rule).
       (Contributed by NM, 31-Jul-1994.)  (Proof shortened by Wolf Lammen,
       15-Nov-2019.) $)
    abeq1i $p |- ( ph <-> x e. A ) $=
      ( cv wcel cab eqcomi abeq2i bicomi ) BECFAABCABGCDHIJ $.
    $( Obsolete proof of ~ abeq1i as of 15-Nov-2019.  (Contributed by NM,
       31-Jul-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    abeq1iOLD $p |- ( ph <-> x e. A ) $=
      ( cv cab wcel abid eleq2i bitr3i ) ABEZABFZGKCGABHLCKDIJ $.
  $}

  ${
    $d ph y $.  $d ps y $.  $d x y $.
    $( Equivalent wff's correspond to equal class abstractions.  (Contributed
       by NM, 25-Nov-2013.)  (Revised by Mario Carneiro, 11-Aug-2016.)  (Proof
       shortened by Wolf Lammen, 16-Nov-2019.) $)
    abbi $p |- ( A. x ( ph <-> ps ) <-> { x | ph } = { x | ps } ) $=
      ( vy cab wceq cv wcel wb wal hbab1 cleqh abid bibi12i albii bitr2i ) ACEZ
      BCEZFCGZQHZSRHZIZCJABIZCJCDQRACDKBCDKLUBUCCTAUABACMBCMNOP $.
    $( Obsolete proof of ~ abbi as of 16-Nov-2019.  (Contributed by NM,
       25-Nov-2013.)  (Revised by Mario Carneiro, 11-Aug-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    abbiOLD $p |- ( A. x ( ph <-> ps ) <-> { x | ph } = { x | ps } ) $=
      ( vy cab wceq wcel wal dfcleq nfsab1 nfbi nfv wsb df-clab sbequ12r syl5bb
      cv wb bibi12d cbval bitr2i ) ACEZBCEZFDQZUBGZUDUCGZRZDHABRZCHDUBUCIUGUHDC
      UEUFCACDJBCDJKUHDLUDCQFZUEAUFBUEACDMUIAADCNADCOPUFBCDMUIBBDCNBDCOPSTUA $.
  $}

  ${
    $d x A $.
    abbi2i.1 $e |- ( x e. A <-> ph ) $.
    $( Equality of a class variable and a class abstraction (inference rule).
       (Contributed by NM, 26-May-1993.) $)
    abbi2i $p |- A = { x | ph } $=
      ( cab wceq cv wcel wb abeq2 mpgbir ) CABEFBGCHAIBABCJDK $.
  $}

  ${
    abbii.1 $e |- ( ph <-> ps ) $.
    $( Equivalent wff's yield equal class abstractions (inference rule).
       (Contributed by NM, 26-May-1993.) $)
    abbii $p |- { x | ph } = { x | ps } $=
      ( wb cab wceq abbi mpgbi ) ABEACFBCFGCABCHDI $.

    $( Theorem abbii is the congruence law for class abstraction. $)
    $( $j congruence 'abbii'; $)
  $}

  ${
    $d x y $.  $d ph y $.  $d ps y $.  $d ch y $.
    abbid.1 $e |- F/ x ph $.
    abbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal class abstractions (deduction rule).
       (Contributed by NM, 21-Jun-1993.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
    abbid $p |- ( ph -> { x | ps } = { x | ch } ) $=
      ( wb wal cab wceq alrimi abbi sylib ) ABCGZDHBDICDIJANDEFKBCDLM $.
  $}

  ${
    $d x ph $.
    abbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal class abstractions (deduction rule).
       (Contributed by NM, 10-Aug-1993.) $)
    abbidv $p |- ( ph -> { x | ps } = { x | ch } ) $=
      ( nfv abbid ) ABCDADFEG $.
  $}

  ${
    $d x y A $.  $d ph x y $.  $d ps y $.
    abbi2dv.1 $e |- ( ph -> ( x e. A <-> ps ) ) $.
    $( Deduction from a wff to a class abstraction.  (Contributed by NM,
       9-Jul-1994.) $)
    abbi2dv $p |- ( ph -> A = { x | ps } ) $=
      ( cv wcel wb wal cab wceq alrimiv abeq2 sylibr ) ACFDGBHZCIDBCJKAOCELBCDM
      N $.
  $}

  ${
    $d x y A $.  $d ph x y $.  $d ps y $.
    abbi1dv.1 $e |- ( ph -> ( ps <-> x e. A ) ) $.
    $( Deduction from a wff to a class abstraction.  (Contributed by NM,
       9-Jul-1994.)  (Proof shortened by Wolf Lammen, 16-Nov-2019.) $)
    abbi1dv $p |- ( ph -> { x | ps } = A ) $=
      ( cab cv wcel bicomd abbi2dv eqcomd ) ADBCFABCDABCGDHEIJK $.
    $( Obsolete proof of ~ abbidv as of 16-Nov-2019.  (Contributed by NM,
       9-Jul-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    abbi1dvOLD $p |- ( ph -> { x | ps } = A ) $=
      ( cv wcel wb wal cab wceq alrimiv abeq1 sylibr ) ABCFDGHZCIBCJDKAOCELBCDM
      N $.
  $}

  ${
    $d x A $.
    $( A simplification of class abstraction.  Theorem 5.2 of [Quine] p. 35.
       (Contributed by NM, 26-Dec-1993.) $)
    abid2 $p |- { x | x e. A } = A $=
      ( cv wcel cab biid abbi2i eqcomi ) BACBDZAEIABIFGH $.
  $}

  ${
    $d x z $.  $d y z $.  $d ph z $.  $d ps z $.
    cbvab.1 $e |- F/ y ph $.
    cbvab.2 $e |- F/ x ps $.
    cbvab.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by Andrew Salmon, 11-Jul-2011.)  (Proof shortened by Wolf
       Lammen, 16-Nov-2019.) $)
    cbvab $p |- { x | ph } = { y | ps } $=
      ( vz cab wsb cv wcel sbco2 sbie sbbii bitr3i df-clab 3bitr4i eqriv ) HACI
      ZBDIZACHJZBDHJZHKZTLUDUALUBACDJZDHJUCACHDEMUEBDHABCDFGNOPAHCQBHDQRS $.
    $( Obsolete proof of ~ cbvab as of 16-Nov-2019.  (Contributed by Andrew
       Salmon, 11-Jul-2011.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    cbvabOLD $p |- { x | ph } = { y | ps } $=
      ( vz cab wsb cv wcel nfsb weq wb equcoms bicomd sbie sbequ df-clab eqriv
      syl5bbr 3bitr4i ) HACIZBDIZACHJBDHJZHKZUDLUGUELAUFCHBDHCFMABDCJCHNUFBADCE
      DCNABABOCDGPQRBCHDSUBRAHCTBHDTUCUA $.
  $}

  ${
    $d y ph $.  $d x ps $.
    cbvabv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 26-May-1999.) $)
    cbvabv $p |- { x | ph } = { y | ps } $=
      ( nfv cbvab ) ABCDADFBCFEG $.
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Membership of a class variable in a class abstraction.  (Contributed by
       NM, 23-Dec-1993.)  (Proof shortened by Wolf Lammen, 16-Nov-2019.) $)
    clelab $p |- ( A e. { x | ph } <-> E. x ( x = A /\ ph ) ) $=
      ( vy cab wcel cv wceq wa wex df-clel nfv nfsab1 weq eqeq1 sbequ12 df-clab
      nfan wsb syl6bbr anbi12d cbvex bitr4i ) CABEZFDGZCHZUEUDFZIZDJBGZCHZAIZBJ
      DCUDKUKUHBDUKDLUFUGBUFBLABDMRBDNZUJUFAUGUIUECOULAABDSUGABDPADBQTUAUBUC $.
    $( Obsolete proof of ~ clelab as of 16-Nov-2019.  (Contributed by NM,
       23-Dec-1993.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    clelabOLD $p |- ( A e. { x | ph } <-> E. x ( x = A /\ ph ) ) $=
      ( vy cv wceq cab wcel wex wsb df-clab anbi2i exbii df-clel nfv nfs1v nfan
      wa eqeq1 sbequ12 anbi12d cbvex 3bitr4i ) DEZCFZUDABGZHZRZDIUEABDJZRZDICUF
      HBEZCFZARZBIUHUJDUGUIUEADBKLMDCUFNUMUJBDUMDOUEUIBUEBOABDPQUKUDFULUEAUIUKU
      DCSABDTUAUBUC $.
  $}

  ${
    $d y A $.  $d y ph $.  $d x y $.
    $( Membership of a class abstraction in another class.  (Contributed by NM,
       17-Jan-2006.) $)
    clabel $p |- ( { x | ph } e. A <->
                 E. y ( y e. A /\ A. x ( x e. y <-> ph ) ) ) $=
      ( cab wcel cv wceq wa wex wb wal df-clel abeq2 anbi2ci exbii bitri ) ABEZ
      DFCGZRHZSDFZIZCJUABGSFAKBLZIZCJCRDMUBUDCTUCUAABSNOPQ $.
  $}

  ${
    $d z A $.  $d z x $.  $d z y $.
    $( The right-hand side of the second equality is a way of representing
       proper substitution of ` y ` for ` x ` into a class variable.
       (Contributed by NM, 14-Sep-2003.) $)
    sbab $p |- ( x = y -> A = { z | [ y / x ] z e. A } ) $=
      ( weq cv wcel wsb sbequ12 abbi2dv ) ABECFDGZABHCDKABIJ $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Class form not-free predicate
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c F/_ $.  $( Underlined not-free symbol. $)

  $( Extend wff definition to include the not-free predicate for classes. $)
  wnfc $a wff F/_ x A $.

  ${
    $d x y z $.  $d y z A $.
    $( Justification theorem for ~ df-nfc .  (Contributed by Mario Carneiro,
       13-Oct-2016.) $)
    nfcjust $p |- ( A. y F/ x y e. A <-> A. z F/ x z e. A ) $=
      ( cv wcel wnf weq nfv eleq1 nfbidf cbvalv ) BEZDFZAGCEZDFZAGBCBCHZNPAQAIM
      ODJKL $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Define the not-free predicate for classes.  This is read "" ` x ` is not
       free in ` A ` "".  Not-free means that the value of ` x ` cannot affect
       the value of ` A ` , e.g., any occurrence of ` x ` in ` A ` is
       effectively bound by a ""for all"" or something that expands to one (such
       as ""there exists"").  It is defined in terms of the not-free predicate
       ~ df-nf for wffs; see that definition for more information.
       (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    df-nfc $a |- ( F/_ x A <-> A. y F/ x y e. A ) $.

    ${
      nfci.1 $e |- F/ x y e. A $.
      $( Deduce that a class ` A ` does not have ` x ` free in it.
         (Contributed by Mario Carneiro, 11-Aug-2016.) $)
      nfci $p |- F/_ x A $=
        ( wnfc cv wcel wnf df-nfc mpgbir ) ACEBFCGAHBABCIDJ $.
    $}

    ${
      nfcii.1 $e |- ( y e. A -> A. x y e. A ) $.
      $( Deduce that a class ` A ` does not have ` x ` free in it.
         (Contributed by Mario Carneiro, 11-Aug-2016.) $)
      nfcii $p |- F/_ x A $=
        ( cv wcel nfi nfci ) ABCBECFADGH $.
    $}

    $( Consequence of the not-free predicate.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nfcr $p |- ( F/_ x A -> F/ x y e. A ) $=
      ( wnfc cv wcel wnf wal df-nfc sp sylbi ) ACDBECFAGZBHLABCILBJK $.
  $}

  ${
    $d x y z $.  $d z A $.
    nfcri.1 $e |- F/_ x A $.
    $( Consequence of the not-free predicate.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nfcrii $p |- ( y e. A -> A. x y e. A ) $=
      ( vz cv wcel wnfc wnf nfcr ax-mp nfri hblem ) AEBCEFCGZAACHNAIDAECJKLM $.

    $( Consequence of the not-free predicate.  (Note that unlike ~ nfcr , this
       does not require ` y ` and ` A ` to be disjoint.)  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    nfcri $p |- F/ x y e. A $=
      ( cv wcel nfcrii nfi ) BECFAABCDGH $.
  $}

  ${
    $d x y $.  $d y A $.
    nfcd.1 $e |- F/ y ph $.
    nfcd.2 $e |- ( ph -> F/ x y e. A ) $.
    $( Deduce that a class ` A ` does not have ` x ` free in it.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfcd $p |- ( ph -> F/_ x A ) $=
      ( cv wcel wnf wal wnfc alrimi df-nfc sylibr ) ACGDHBIZCJBDKAOCEFLBCDMN $.
  $}

  ${
    $d x y $.  $d A y $.  $d B y $.  $d ph y $.
    nfceqdf.1 $e |- F/ x ph $.
    nfceqdf.2 $e |- ( ph -> A = B ) $.
    $( An equality theorem for effectively not free.  (Contributed by Mario
       Carneiro, 14-Oct-2016.) $)
    nfceqdf $p |- ( ph -> ( F/_ x A <-> F/_ x B ) ) $=
      ( vy cv wcel wnf wal wnfc eleq2d nfbidf albidv df-nfc 3bitr4g ) AGHZCIZBJ
      ZGKRDIZBJZGKBCLBDLATUBGASUABEACDRFMNOBGCPBGDPQ $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    nfceqi.1 $e |- A = B $.
    $( Equality theorem for class not-free.  (Contributed by Mario Carneiro,
       11-Aug-2016.)  (Proof shortened by Wolf Lammen, 16-Nov-2019.) $)
    nfceqi $p |- ( F/_ x A <-> F/_ x B ) $=
      ( wnfc wb wtru nftru wceq a1i nfceqdf trud ) ABEACEFGABCAHBCIGDJKL $.
    $( Obsolete proof of ~ nfceqi as of 16-Nov-2019.  (Contributed by Mario
       Carneiro, 11-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nfceqiOLD $p |- ( F/_ x A <-> F/_ x B ) $=
      ( vy cv wcel wnf wal wnfc eleq2i nfbii albii df-nfc 3bitr4i ) EFZBGZAHZEI
      PCGZAHZEIABJACJRTEQSABCPDKLMAEBNAECNO $.

    ${
      nfcxfr.2 $e |- F/_ x B $.
      $( A utility lemma to transfer a bound-variable hypothesis builder into a
         definition.  (Contributed by Mario Carneiro, 11-Aug-2016.) $)
      nfcxfr $p |- F/_ x A $=
        ( wnfc nfceqi mpbir ) ABFACFEABCDGH $.
    $}

    ${
      nfcxfrd.2 $e |- ( ph -> F/_ x B ) $.
      $( A utility lemma to transfer a bound-variable hypothesis builder into a
         definition.  (Contributed by Mario Carneiro, 11-Aug-2016.) $)
      nfcxfrd $p |- ( ph -> F/_ x A ) $=
        ( wnfc nfceqi sylibr ) ABDGBCGFBCDEHI $.
    $}
  $}

  ${
    $d x y A $.
    $( If ` x ` is disjoint from ` A ` , then ` x ` is not free in ` A ` .
       (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    nfcv $p |- F/_ x A $=
      ( vy cv wcel nfv nfci ) ACBCDBEAFG $.

    $( If ` x ` is disjoint from ` A ` , then ` x ` is not free in ` A ` .
       (Contributed by Mario Carneiro, 7-Oct-2016.) $)
    nfcvd $p |- ( ph -> F/_ x A ) $=
      ( wnfc nfcv a1i ) BCDABCEF $.
  $}

  ${
    $d x y $.  $d y A $.  $d y ph $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfab1 $p |- F/_ x { x | ph } $=
      ( vy cab nfsab1 nfci ) BCABDABCEF $.

    $( ` x ` is bound in ` F/_ x A ` .  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nfnfc1 $p |- F/ x F/_ x A $=
      ( vy wnfc cv wcel wnf wal df-nfc nfnf1 nfal nfxfr ) ABDCEBFZAGZCHAACBINAC
      MAJKL $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.
    nfab.1 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 11-Aug-2016.) $)
    nfab $p |- F/_ x { y | ph } $=
      ( vz cab nfsab nfci ) BEACFABCEDGH $.
  $}

  ${
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 14-Oct-2016.) $)
    nfaba1 $p |- F/_ x { y | A. x ph } $=
      ( wal nfa1 nfab ) ABDBCABEF $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    nfeqd.1 $e |- ( ph -> F/_ x A ) $.
    $( Consequence of the not-free predicate.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nfcrd $p |- ( ph -> F/ x y e. A ) $=
      ( wnfc cv wcel wnf nfcr syl ) ABDFCGDHBIEBCDJK $.

    $d y ph $.
    nfeqd.2 $e |- ( ph -> F/_ x B ) $.
    $( Hypothesis builder for equality.  (Contributed by Mario Carneiro,
       7-Oct-2016.) $)
    nfeqd $p |- ( ph -> F/ x A = B ) $=
      ( vy wceq cv wcel wb wal dfcleq nfv nfcrd nfbid nfald nfxfrd ) CDHGIZCJZS
      DJZKZGLABGCDMAUBBGAGNATUABABGCEOABGDFOPQR $.

    $( Hypothesis builder for elementhood.  (Contributed by Mario Carneiro,
       7-Oct-2016.) $)
    nfeld $p |- ( ph -> F/ x A e. B ) $=
      ( vy wcel cv wceq wa wex df-clel nfv nfcvd nfeqd nfcrd nfand nfexd nfxfrd
      ) CDHGIZCJZUADHZKZGLABGCDMAUDBGAGNAUBUCBABUACABUAOEPABGDFQRST $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z B $.
    nfnfc.1 $e |- F/_ x A $.
    $( Hypothesis builder for ` F/_ y A ` .  (Contributed by Mario Carneiro,
       11-Aug-2016.)  Remove dependency on ~ ax-13 .  (Revised by Wolf Lammen,
       10-Dec-2019.) $)
    nfnfc $p |- F/ x F/_ y A $=
      ( vz wnfc cv wcel wnf wal df-nfc nfcr ax-mp nfnf nfal nfxfr ) BCFEGCHZBIZ
      EJABECKRAEQABACFQAIDAECLMNOP $.

    $( Alternative, shorter proof of ~ nfnfc , based on more axioms.
       (Contributed by Mario Carneiro, 11-Aug-2016.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    nfnfcALT $p |- F/ x F/_ y A $=
      ( vz wnfc cv wcel wnf wal df-nfc nfcri nfnf nfal nfxfr ) BCFEGCHZBIZEJABE
      CKQAEPABAECDLMNO $.

    nfeq.2 $e |- F/_ x B $.
    $( Hypothesis builder for equality.  (Contributed by NM, 21-Jun-1993.)
       (Revised by Mario Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf
       Lammen, 16-Nov-2019.) $)
    nfeq $p |- F/ x A = B $=
      ( wceq wnf wtru wnfc a1i nfeqd trud ) BCFAGHABCABIHDJACIHEJKL $.

    $( Obsolete proof of ~ nfeq as of 16-Nov-2019.  (Contributed by NM,
       21-Jun-1993.)  (Revised by Mario Carneiro, 11-Aug-2016.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    nfeqOLD $p |- F/ x A = B $=
      ( vz wceq cv wcel wb wal dfcleq nfcri nfbi nfal nfxfr ) BCGFHZBIZQCIZJZFK
      AFBCLTAFRSAAFBDMAFCEMNOP $.

    $( Hypothesis builder for elementhood.  (Contributed by NM, 1-Aug-1993.)
       (Revised by Mario Carneiro, 11-Aug-2016.)  (Proof shortened by Wolf
       Lammen, 16-Nov-2019.) $)
    nfel $p |- F/ x A e. B $=
      ( wcel wnf wtru wnfc a1i nfeld trud ) BCFAGHABCABIHDJACIHEJKL $.

    $( Obsolete proof of ~ nfel as of 16-Nov-2019.  (Contributed by NM,
       1-Aug-1993.)  (Revised by Mario Carneiro, 11-Aug-2016.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    nfelOLD $p |- F/ x A e. B $=
      ( vz wcel cv wceq wa wex df-clel nfcv nfeq nfcri nfan nfex nfxfr ) BCGFHZ
      BIZSCGZJZFKAFBCLUBAFTUAAASBASMDNAFCEOPQR $.
  $}

  ${
    $d x B $.
    nfeq1.1 $e |- F/_ x A $.
    $( Hypothesis builder for equality, special case.  (Contributed by Mario
       Carneiro, 10-Oct-2016.) $)
    nfeq1 $p |- F/ x A = B $=
      ( nfcv nfeq ) ABCDACEF $.

    $( Hypothesis builder for elementhood, special case.  (Contributed by Mario
       Carneiro, 10-Oct-2016.) $)
    nfel1 $p |- F/ x A e. B $=
      ( nfcv nfel ) ABCDACEF $.
  $}

  ${
    $d x A $.
    nfeq2.1 $e |- F/_ x B $.
    $( Hypothesis builder for equality, special case.  (Contributed by Mario
       Carneiro, 10-Oct-2016.) $)
    nfeq2 $p |- F/ x A = B $=
      ( nfcv nfeq ) ABCABEDF $.

    $( Hypothesis builder for elementhood, special case.  (Contributed by Mario
       Carneiro, 10-Oct-2016.) $)
    nfel2 $p |- F/ x A e. B $=
      ( nfcv nfel ) ABCABEDF $.
  $}

  ${
    $d w x $.  $d w y $.  $d w z $.  $d w A $.  $d w B $.
    drnfc1.1 $e |- ( A. x x = y -> A = B ) $.
    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       (Contributed by Mario Carneiro, 8-Oct-2016.) $)
    drnfc1 $p |- ( A. x x = y -> ( F/_ x A <-> F/_ y B ) ) $=
      ( vw weq wal cv wcel wnf wnfc eleq2d drnf1 dral2 df-nfc 3bitr4g ) ABGAHZF
      IZCJZAKZFHSDJZBKZFHACLBDLUAUCABFTUBABRCDSEMNOAFCPBFDPQ $.

    $( Formula-building lemma for use with the Distinctor Reduction Theorem.
       (Contributed by Mario Carneiro, 8-Oct-2016.) $)
    drnfc2 $p |- ( A. x x = y -> ( F/_ z A <-> F/_ z B ) ) $=
      ( vw weq wal cv wcel wnf wnfc eleq2d drnf2 dral2 df-nfc 3bitr4g ) ABHAIZG
      JZDKZCLZGITEKZCLZGICDMCEMUBUDABGUAUCABCSDETFNOPCGDQCGEQR $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.  $d z ps $.
    nfabd2.1 $e |- F/ y ph $.
    nfabd2.2 $e |- ( ( ph /\ -. A. x x = y ) -> F/ x ps ) $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 8-Oct-2016.) $)
    nfabd2 $p |- ( ph -> F/_ x { y | ps } ) $=
      ( vz weq wal cab wnfc wn wa nfv cv wcel wsb df-clab nfnae nfan nfsbd nfcd
      nfxfrd ex nfab1 eqidd drnfc1 mpbiri pm2.61d2 ) ACDHCIZCBDJZKZAUJLZULAUMMZ
      CGUKUNGNGOUKPBDGQUNCBGDRUNBDGCAUMDECDDSTFUAUCUBUDUJULDUKKBDUECDUKUKUJUKUF
      UGUHUI $.
  $}

  ${
    nfabd.1 $e |- F/ y ph $.
    nfabd.2 $e |- ( ph -> F/ x ps ) $.
    $( Bound-variable hypothesis builder for a class abstraction.  (Contributed
       by Mario Carneiro, 8-Oct-2016.) $)
    nfabd $p |- ( ph -> F/_ x { y | ps } ) $=
      ( wnf weq wal wn adantr nfabd2 ) ABCDEABCGCDHCIJFKL $.
  $}

  ${
    $d w x $.  $d w y $.  $d w z $.  $d w A $.  $d w B $.  $d w ph $.
    dvelimdc.1 $e |- F/ x ph $.
    dvelimdc.2 $e |- F/ z ph $.
    dvelimdc.3 $e |- ( ph -> F/_ x A ) $.
    dvelimdc.4 $e |- ( ph -> F/_ z B ) $.
    dvelimdc.5 $e |- ( ph -> ( z = y -> A = B ) ) $.
    $( Deduction form of ~ dvelimc .  (Contributed by Mario Carneiro,
       8-Oct-2016.) $)
    dvelimdc $p |- ( ph -> ( -. A. x x = y -> F/_ x B ) ) $=
      ( vw weq wal wn wnfc wa nfv wcel nfcrd cv wnf wceq wb eleq2 syl6 dvelimdf
      imp nfcd ex ) ABCMBNOZBFPAUKQZBLFULLRAUKLUAZFSZBUBAUMESZUNBCDGHABLEITADLF
      JTADCMEFUCUOUNUDKEFUMUEUFUGUHUIUJ $.
  $}

  ${
    dvelimc.1 $e |- F/_ x A $.
    dvelimc.2 $e |- F/_ z B $.
    dvelimc.3 $e |- ( z = y -> A = B ) $.
    $( Version of ~ dvelim for classes.  (Contributed by Mario Carneiro,
       8-Oct-2016.) $)
    dvelimc $p |- ( -. A. x x = y -> F/_ x B ) $=
      ( weq wal wn wnfc wi wtru nftru a1i wceq dvelimdc trud ) ABIAJKAELMNABCDE
      AOCOADLNFPCELNGPCBIDEQMNHPRS $.
  $}

  ${
    $d x z $.  $d y z $.
    $( If ` x ` and ` y ` are distinct, then ` x ` is not free in ` y ` .
       (Contributed by Mario Carneiro, 8-Oct-2016.) $)
    nfcvf $p |- ( -. A. x x = y -> F/_ x y ) $=
      ( vz cv nfcv weq id dvelimc ) ABCCDZBDZAIECJECBFGH $.

    $( If ` x ` and ` y ` are distinct, then ` y ` is not free in ` x ` .
       (Contributed by Mario Carneiro, 5-Dec-2016.) $)
    nfcvf2 $p |- ( -. A. x x = y -> F/_ y x ) $=
      ( cv wnfc nfcvf naecoms ) BACDBABAEF $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    cleqf.1 $e |- F/_ x A $.
    cleqf.2 $e |- F/_ x B $.
    $( Establish equality between classes, using bound-variable hypotheses
       instead of distinct variable conditions.  See also ~ cleqh .
       (Contributed by NM, 26-May-1993.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof shortened by Wolf Lammen, 17-Nov-2019.) $)
    cleqf $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( vy nfcrii cleqh ) AFBCAFBDGAFCEGH $.

    $( Obsolete proof of ~ cleqf as of 17-Nov-2019.  (Contributed by NM,
       26-May-1993.)  (Revised by Mario Carneiro, 7-Oct-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    cleqfOLD $p |- ( A = B <-> A. x ( x e. A <-> x e. B ) ) $=
      ( vy wceq cv wcel wb wal dfcleq nfv nfcri nfbi eleq1 bibi12d cbval bitr4i
      ) BCGFHZBIZTCIZJZFKAHZBIZUDCIZJZAKFBCLUGUCAFUGFMUAUBAAFBDNAFCENOUDTGUEUAU
      FUBUDTBPUDTCPQRS $.
  $}

  ${
    abid2f.1 $e |- F/_ x A $.
    $( A simplification of class abstraction.  Theorem 5.2 of [Quine] p. 35.
       (Contributed by NM, 5-Sep-2011.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof shortened by Wolf Lammen, 17-Nov-2019.) $)
    abid2f $p |- { x | x e. A } = A $=
      ( cv wcel cab wceq wb nfab1 cleqf abid mpgbir ) ADZBEZAFZBGMOENHAAOBNAICJ
      NAKL $.

    $( Obsolete proof of ~ abid2f as of 17-Nov-2019.  (Contributed by NM,
       5-Sep-2011.)  (Revised by Mario Carneiro, 7-Oct-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    abid2fOLD $p |- { x | x e. A } = A $=
      ( cv wcel cab wceq wb wal nfab1 cleqf abid bibi2i albii bitri biid mpgbir
      eqcomi ) BADZBEZAFZBUAGZTTHZAUBTSUAEZHZAIUCAIABUACTAJKUEUCAUDTTTALMNOTPQR
      $.
  $}

  ${
    $d v A w $.  $d x z v u $.  $d y z v u $.  $d v ph $.
    sbabel.1 $e |- F/_ x A $.
    $( Theorem to move a substitution in and out of a class abstraction.
       (Contributed by NM, 27-Sep-2003.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof shortened by Wolf Lammen, 26-Dec-2019.) $)
    sbabel $p |- ( [ y / x ] { z | ph } e. A <-> { z | [ y / x ] ph } e. A ) $=
      ( vv cv wcel wel wb wal wa wex wsb cab sbex sbf bitri clabel nfcri sbrbis
      sban nfv sbalv anbi12i exbii sbbii 3bitr4i ) GHEIZDGJZAKZDLZMZGNZBCOZUJUK
      ABCOZKZDLZMZGNZADPEIZBCOUQDPEIUPUNBCOZGNVAUNGBCQVCUTGVCUJBCOZUMBCOZMUTUJU
      MBCUCVDUJVEUSUJBCBGEFUARULURBCDUKUKABCUKBCUKBUDRUBUEUFSUGSVBUOBCADGETUHUQ
      DGETUI $.
    $( Obsolete proof of ~ sbabel as of 26-Dec-2019.  (Contributed by NM,
       27-Sep-2003.)  (Revised by Mario Carneiro, 7-Oct-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    sbabelOLD $p |- ( [ y / x ] { z | ph } e. A
                                             <-> { z | [ y / x ] ph } e. A ) $=
      ( vv cv cab wceq wcel wa wex wsb wb wal sbf abeq2 sbbii 3bitr4i sbex sban
      nfv sbrbis sbalv nfcri anbi12i bitri exbii df-clel ) GHZADIZJZUKEKZLZGMZB
      CNZUKABCNZDIZJZUNLZGMZULEKZBCNUSEKUQUOBCNZGMVBUOGBCUAVDVAGVDUMBCNZUNBCNZL
      VAUMUNBCUBVEUTVFUNDHUKKZAOZDPZBCNVGUROZDPVEUTVHVJBCDVGVGABCVGBCVGBUCQUDUE
      UMVIBCADUKRSURDUKRTUNBCBGEFUFQUGUHUIUHVCUPBCGULEUJSGUSEUJT $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Negated equality and membership
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new connectives. $)
  $c =/= $. $( Not equal to (equal sign with slash through it). $)
  $c e/ $. $( Not an element of (epsilon with slash through it). $)

  $( Extend wff notation to include inequality. $)
  wne $a wff A =/= B $.

  $( Extend wff notation to include negated membership. $)
  wnel $a wff A e/ B $.

  $( Define inequality.  (Contributed by NM, 26-May-1993.) $)
  df-ne $a |- ( A =/= B <-> -. A = B ) $.

  $( Define negated membership.  (Contributed by NM, 7-Aug-1994.) $)
  df-nel $a |- ( A e/ B <-> -. A e. B ) $.

$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
        Negated equality
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    neii.1 $e |- A =/= B $.
    $( Inference associated with ~ df-ne .  (Contributed by BJ, 7-Jul-2018.) $)
    neii $p |- -. A = B $=
      ( wne wceq wn df-ne mpbi ) ABDABEFCABGH $.
  $}

  ${
    neir.1 $e |- -. A = B $.
    $( Inference associated with ~ df-ne .  (Contributed by BJ, 7-Jul-2018.) $)
    neir $p |- A =/= B $=
      ( wne wceq wn df-ne mpbir ) ABDABEFCABGH $.
  $}

  $( Negation of inequality.  (Contributed by NM, 9-Jun-2006.) $)
  nne $p |- ( -. A =/= B <-> A = B ) $=
    ( wceq wne wn df-ne con2bii bicomi ) ABCZABDZEJIABFGH $.

  ${
    neneqd.1 $e |- ( ph -> A =/= B ) $.
    $( Deduction eliminating inequality definition.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) $)
    neneqd $p |- ( ph -> -. A = B ) $=
      ( wne wceq wn df-ne sylib ) ABCEBCFGDBCHI $.
  $}

  ${
    neqned.1 $e |- ( ph -> -. A = B ) $.
    $( If it is not the case that two classes are equal, they are unequal.
       Converse of ~ neneqd .  One-way deduction form of ~ df-ne .
       (Contributed by David Moews, 28-Feb-2017.)  Allow a shortening of
       ~ necon3bi .  (Revised by Wolf Lammen, 22-Nov-2019.) $)
    neqned $p |- ( ph -> A =/= B ) $=
      ( wceq wn wne df-ne sylibr ) ABCEFBCGDBCHI $.
  $}

  $( No class is unequal to itself.  Inequality is irreflexive.  (Contributed
     by Stefan O'Rear, 1-Jan-2015.) $)
  neirr $p |- -. A =/= A $=
    ( wne wn wceq eqid nne mpbir ) AABCAADAEAAFG $.

  $( Excluded middle with equality and inequality.  (Contributed by NM,
     3-Feb-2012.)  (Proof shortened by Wolf Lammen, 17-Nov-2019.) $)
  exmidne $p |- ( A = B \/ A =/= B ) $=
    ( wceq wne wn df-ne biimpri orri ) ABCZABDZJIEABFGH $.

  $( Obsolete proof of ~ exmidne as of 17-Nov-2019.  (Contributed by NM,
     3-Feb-2012.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  exmidneOLD $p |- ( A = B \/ A =/= B ) $=
    ( wceq wne wo wn exmid df-ne orbi2i mpbir ) ABCZABDZEKKFZEKGLMKABHIJ $.

  $( A contradiction concerning equality implies anything.  (Contributed by
     Alexander van der Vekens, 25-Jan-2018.) $)
  eqneqall $p |- ( A = B -> ( A =/= B -> ph ) ) $=
    ( wne wceq wn df-ne pm2.24 syl5bi ) BCDBCEZFJABCGJAHI $.

  $( Law of noncontradiction with equality and inequality.  (Contributed by NM,
     3-Feb-2012.)  (Proof shortened by Wolf Lammen, 21-Dec-2019.) $)
  nonconne $p |- -. ( A = B /\ A =/= B ) $=
    ( wceq wne wa wfal fal eqneqall imp mto ) ABCZABDZEFGKLFFABHIJ $.

  $( Obsolete proof of ~ nonconne as of 21-Dec-2019.  (Contributed by NM,
     3-Feb-2012.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nonconneOLD $p |- -. ( A = B /\ A =/= B ) $=
    ( wceq wne wa wn pm3.24 df-ne anbi2i mtbir ) ABCZABDZEKKFZEKGLMKABHIJ $.

  ${
    necon3ad.1 $e |- ( ph -> ( ps -> A = B ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon3ad $p |- ( ph -> ( A =/= B -> -. ps ) ) $=
      ( wceq wne id neneqd nsyli ) ABCDFCDGZEKCDKHIJ $.

    $( Obsolete proof of ~ necon3ad as of 23-Nov-2019.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon3adOLD $p |- ( ph -> ( A =/= B -> -. ps ) ) $=
      ( wne wceq wn nne syl6ibr con2d ) ABCDFZABCDGLHECDIJK $.
  $}

  ${
    necon3bd.1 $e |- ( ph -> ( A = B -> ps ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon3bd $p |- ( ph -> ( -. ps -> A =/= B ) ) $=
      ( wne wn wceq nne syl5bi con1d ) ACDFZBLGCDHABCDIEJK $.
  $}

  ${
    necon2ad.1 $e |- ( ph -> ( A = B -> -. ps ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       19-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon2ad $p |- ( ph -> ( ps -> A =/= B ) ) $=
      ( wn wne notnot1 necon3bd syl5 ) BBFZFACDGBHAKCDEIJ $.

    $( Obsolete proof of ~ necon2ad as of 23-Nov-2019.  (Contributed by NM,
       19-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon2adOLD $p |- ( ph -> ( ps -> A =/= B ) ) $=
      ( wne wn wceq nne syl5bi con4d ) ACDFZBLGCDHABGCDIEJK $.
  $}

  ${
    necon2bd.1 $e |- ( ph -> ( ps -> A =/= B ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       13-Apr-2007.) $)
    necon2bd $p |- ( ph -> ( A = B -> -. ps ) ) $=
      ( wceq wne wn df-ne syl6ib con2d ) ABCDFZABCDGLHECDIJK $.
  $}

  ${
    necon1ad.1 $e |- ( ph -> ( -. ps -> A = B ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon1ad $p |- ( ph -> ( A =/= B -> ps ) ) $=
      ( wne wn necon3ad notnot2 syl6 ) ACDFBGZGBAKCDEHBIJ $.

    $( Obsolete proof of ~ necon1ad as of 23-Nov-2019.  (Contributed by NM,
       2-Apr-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    necon1adOLD $p |- ( ph -> ( A =/= B -> ps ) ) $=
      ( wne wceq wn df-ne con1d syl5bi ) CDFCDGZHABCDIABLEJK $.
  $}

  ${
    necon1bd.1 $e |- ( ph -> ( A =/= B -> ps ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       21-Mar-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon1bd $p |- ( ph -> ( -. ps -> A = B ) ) $=
      ( wceq wn wne df-ne syl5bir con1d ) ACDFZBLGCDHABCDIEJK $.

    $( Obsolete proof of ~ necon1bd as of 23-Nov-2019.  (Contributed by NM,
       21-Mar-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon1bdOLD $p |- ( ph -> ( -. ps -> A = B ) ) $=
      ( wn wne wceq con3d nne syl6ib ) ABFCDGZFCDHALBEICDJK $.
  $}

  ${
    necon4ad.1 $e |- ( ph -> ( A =/= B -> -. ps ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon4ad $p |- ( ph -> ( ps -> A = B ) ) $=
      ( wn wceq notnot1 necon1bd syl5 ) BBFZFACDGBHAKCDEIJ $.

    $( Obsolete proof of ~ necon4ad as of 23-Nov-2019.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon4adOLD $p |- ( ph -> ( ps -> A = B ) ) $=
      ( wne wn wceq con2d nne syl6ib ) ABCDFZGCDHALBEICDJK $.
  $}

  ${
    necon4bd.1 $e |- ( ph -> ( -. ps -> A =/= B ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       1-Jun-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 23-Nov-2019.) $)
    necon4bd $p |- ( ph -> ( A = B -> ps ) ) $=
      ( wceq wn necon2bd notnot2 syl6 ) ACDFBGZGBAKCDEHBIJ $.

    $( Obsolete proof of ~ necon4bd as of 23-Nov-2019.  (Contributed by NM,
       1-Jun-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon4bdOLD $p |- ( ph -> ( A = B -> ps ) ) $=
      ( wceq wne wn nne con1d syl5bir ) CDFCDGZHABCDIABLEJK $.
  $}

  ${
    necon3d.1 $e |- ( ph -> ( A = B -> C = D ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       10-Jun-2006.) $)
    necon3d $p |- ( ph -> ( C =/= D -> A =/= B ) ) $=
      ( wne wceq wn necon3ad df-ne syl6ibr ) ADEGBCHZIBCGAMDEFJBCKL $.
  $}

  ${
    necon1d.1 $e |- ( ph -> ( A =/= B -> C = D ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       28-Dec-2008.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon1d $p |- ( ph -> ( C =/= D -> A = B ) ) $=
      ( wne wceq wn nne syl6ibr necon4ad ) ADEGZBCABCGDEHMIFDEJKL $.
  $}

  ${
    necon2d.1 $e |- ( ph -> ( A = B -> C =/= D ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       28-Dec-2008.) $)
    necon2d $p |- ( ph -> ( C = D -> A =/= B ) ) $=
      ( wceq wne wn df-ne syl6ib necon2ad ) ADEGZBCABCGDEHMIFDEJKL $.
  $}

  ${
    necon4d.1 $e |- ( ph -> ( A =/= B -> C =/= D ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       2-Apr-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon4d $p |- ( ph -> ( C = D -> A = B ) ) $=
      ( wceq wne wn necon2bd nne syl6ib ) ADEGBCHZIBCGAMDEFJBCKL $.
  $}

  ${
    necon3ai.1 $e |- ( ph -> A = B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       23-May-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon3ai $p |- ( A =/= B -> -. ph ) $=
      ( wne wceq wn nne sylibr con2i ) ABCEZABCFKGDBCHIJ $.
  $}

  ${
    necon3bi.1 $e |- ( A = B -> ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       1-Jun-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon3bi $p |- ( -. ph -> A =/= B ) $=
      ( wn wceq con3i neqned ) AEBCBCFADGH $.

    $( Obsolete proof of ~ necon3bi as of 22-Nov-2019.  (Contributed by NM,
       1-Jun-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon3biOLD $p |- ( -. ph -> A =/= B ) $=
      ( wne wn wceq nne sylbi con1i ) BCEZAKFBCGABCHDIJ $.
  $}

  ${
    necon1ai.1 $e |- ( -. ph -> A = B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       12-Feb-2007.)  (Proof shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon1ai $p |- ( A =/= B -> ph ) $=
      ( wne wn necon3ai notnotrd ) BCEAAFBCDGH $.

    $( Obsolete proof of ~ necon1ai as of 22-Nov-2019.  (Contributed by NM,
       12-Feb-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    necon1aiOLD $p |- ( A =/= B -> ph ) $=
      ( wne wceq wn df-ne con1i sylbi ) BCEBCFZGABCHAKDIJ $.
  $}

  ${
    necon1bi.1 $e |- ( A =/= B -> ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       18-Mar-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon1bi $p |- ( -. ph -> A = B ) $=
      ( wceq wn wne df-ne sylbir con1i ) BCEZAKFBCGABCHDIJ $.

    $( Obsolete proof of ~ necon1bi as of 22-Nov-2019.  (Contributed by NM,
       18-Mar-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon1biOLD $p |- ( -. ph -> A = B ) $=
      ( wn wne wceq con3i nne sylib ) AEBCFZEBCGKADHBCIJ $.
  $}

  ${
    necon2ai.1 $e |- ( A = B -> -. ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       16-Jan-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon2ai $p |- ( ph -> A =/= B ) $=
      ( wceq con2i neqned ) ABCBCEADFG $.

    $( Obsolete proof of ~ necon2ai as of 22-Nov-2019.  (Contributed by NM,
       16-Jan-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon2aiOLD $p |- ( ph -> A =/= B ) $=
      ( wne wn wceq nne sylbi con4i ) BCEZAKFBCGAFBCHDIJ $.
  $}

  ${
    necon2bi.1 $e |- ( ph -> A =/= B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       1-Apr-2007.) $)
    necon2bi $p |- ( A = B -> -. ph ) $=
      ( wceq neneqd con2i ) ABCEABCDFG $.
  $}

  ${
    necon4ai.1 $e |- ( A =/= B -> -. ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       16-Jan-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon4ai $p |- ( ph -> A = B ) $=
      ( wn wceq notnot1 necon1bi syl ) AAEZEBCFAGJBCDHI $.

    $( Obsolete proof of ~ necon4ai as of 22-Nov-2019.  (Contributed by NM,
       16-Jan-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon4aiOLD $p |- ( ph -> A = B ) $=
      ( wne wn wceq con2i nne sylib ) ABCEZFBCGKADHBCIJ $.
  $}

  ${
    necon3i.1 $e |- ( A = B -> C = D ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       9-Aug-2006.)  (Proof shortened by Wolf Lammen, 22-Nov-2019.) $)
    necon3i $p |- ( C =/= D -> A =/= B ) $=
      ( wne wceq necon3ai neqned ) CDFABABGCDEHI $.

    $( Obsolete proof of ~ necon3i as of 22-Nov-2019.  (Contributed by NM,
       9-Aug-2006.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    necon3iOLD $p |- ( C =/= D -> A =/= B ) $=
      ( wceq wi wne id necon3d ax-mp ) ABFCDFGZCDHABHGELABCDLIJK $.
  $}

  ${
    necon1i.1 $e |- ( A =/= B -> C = D ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       18-Mar-2007.) $)
    necon1i $p |- ( C =/= D -> A = B ) $=
      ( wceq wn wne df-ne sylbir necon1ai ) ABFZCDLGABHCDFABIEJK $.
  $}

  ${
    necon2i.1 $e |- ( A = B -> C =/= D ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       18-Mar-2007.) $)
    necon2i $p |- ( C = D -> A =/= B ) $=
      ( wceq neneqd necon2ai ) CDFABABFCDEGH $.
  $}

  ${
    necon4i.1 $e |- ( A =/= B -> C =/= D ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       17-Mar-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)  (Proof
       shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon4i $p |- ( C = D -> A = B ) $=
      ( wceq wne neneqd necon4ai ) CDFABABGCDEHI $.

    $( Obsolete proof of ~ necon4i as of 24-Nov-2019.  (Contributed by NM,
       17-Mar-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    necon4iOLD $p |- ( C = D -> A = B ) $=
      ( wceq wne wn necon2bi nne sylib ) CDFABGZHABFLCDEIABJK $.
  $}

  ${
    necon3abid.1 $e |- ( ph -> ( A = B <-> ps ) ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       21-Mar-2007.) $)
    necon3abid $p |- ( ph -> ( A =/= B <-> -. ps ) ) $=
      ( wne wceq wn df-ne notbid syl5bb ) CDFCDGZHABHCDIALBEJK $.
  $}

  ${
    necon3bbid.1 $e |- ( ph -> ( ps <-> A = B ) ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       2-Jun-2007.) $)
    necon3bbid $p |- ( ph -> ( -. ps <-> A =/= B ) ) $=
      ( wne wn wceq bicomd necon3abid ) ACDFBGABCDABCDHEIJI $.
  $}

  ${
    necon1abid.1 $e |- ( ph -> ( -. ps <-> A = B ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       21-Aug-2007.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon1abid $p |- ( ph -> ( A =/= B <-> ps ) ) $=
      ( wn wne notnot necon3bbid syl5rbb ) BBFZFACDGBHAKCDEIJ $.

    $( Contrapositive deduction for inequality.  (Contributed by NM,
       21-Aug-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    necon1abidOLD $p |- ( ph -> ( A =/= B <-> ps ) ) $=
      ( wne wceq wn df-ne con1bid syl5bb ) CDFCDGZHABCDIABLEJK $.
  $}

  ${
    necon1bbid.1 $e |- ( ph -> ( A =/= B <-> ps ) ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       31-Jan-2008.) $)
    necon1bbid $p |- ( ph -> ( -. ps <-> A = B ) ) $=
      ( wceq wn wne df-ne syl5bbr con1bid ) ACDFZBLGCDHABCDIEJK $.
  $}

  ${
    necon4abid.1 $e |- ( ph -> ( A =/= B <-> -. ps ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       11-Jan-2008.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon4abid $p |- ( ph -> ( A = B <-> ps ) ) $=
      ( wn wceq notnot necon1bbid syl5rbb ) BBFZFACDGBHAKCDEIJ $.

    $( Obsolete proof of ~ necon4abid as of 24-Nov-2019.  (Contributed by NM,
       11-Jan-2008.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    necon4abidOLD $p |- ( ph -> ( A = B <-> ps ) ) $=
      ( wceq wn wne df-ne syl5bbr con4bid ) ACDFZBLGCDHABGCDIEJK $.
  $}

  ${
    necon4bbid.1 $e |- ( ph -> ( -. ps <-> A =/= B ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       9-May-2012.) $)
    necon4bbid $p |- ( ph -> ( ps <-> A = B ) ) $=
      ( wceq wn wne bicomd necon4abid ) ACDFBABCDABGCDHEIJI $.
  $}

  ${
    necon2abid.1 $e |- ( ph -> ( A = B <-> -. ps ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       18-Jul-2007.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon2abid $p |- ( ph -> ( ps <-> A =/= B ) ) $=
      ( wne wn necon3abid notnot syl6rbbr ) ACDFBGZGBAKCDEHBIJ $.

    $( Obsolete proof of ~ necon2abid as of 24-Nov-2019.  (Contributed by NM,
       18-Jul-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    necon2abidOLD $p |- ( ph -> ( ps <-> A =/= B ) ) $=
      ( wceq wn wne con2bid df-ne syl6bbr ) ABCDFZGCDHALBEICDJK $.
  $}

  ${
    necon2bbid.1 $e |- ( ph -> ( ps <-> A =/= B ) ) $.
    $( Contrapositive deduction for inequality.  (Contributed by NM,
       13-Apr-2007.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon2bbid $p |- ( ph -> ( A = B <-> -. ps ) ) $=
      ( wn wne notnot syl5rbbr necon4abid ) ABFZCDKFBACDGBHEIJ $.

    $( Obsolete proof of ~ necon2bbid as of 24-Nov-2019.  (Contributed by NM,
       13-Apr-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    necon2bbidOLD $p |- ( ph -> ( A = B <-> -. ps ) ) $=
      ( wceq wne wn df-ne syl6bb con2bid ) ABCDFZABCDGLHECDIJK $.
  $}

  ${
    necon3bid.1 $e |- ( ph -> ( A = B <-> C = D ) ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       23-Feb-2005.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    necon3bid $p |- ( ph -> ( A =/= B <-> C =/= D ) ) $=
      ( wne wceq wn df-ne necon3bbid syl5bb ) BCGBCHZIADEGBCJAMDEFKL $.
  $}

  ${
    necon4bid.1 $e |- ( ph -> ( A =/= B <-> C =/= D ) ) $.
    $( Contrapositive law deduction for inequality.  (Contributed by NM,
       29-Jun-2007.) $)
    necon4bid $p |- ( ph -> ( A = B <-> C = D ) ) $=
      ( wceq wne wn necon2bbid nne syl6rbb ) ADEGBCHZIBCGAMDEFJBCKL $.
  $}

  ${
    necon3abii.1 $e |- ( A = B <-> ph ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       9-Nov-2007.) $)
    necon3abii $p |- ( A =/= B <-> -. ph ) $=
      ( wne wceq df-ne xchbinx ) BCEBCFABCGDH $.
  $}

  ${
    necon3bbii.1 $e |- ( ph <-> A = B ) $.
    $( Deduction from equality to inequality.  (Contributed by NM,
       13-Apr-2007.) $)
    necon3bbii $p |- ( -. ph <-> A =/= B ) $=
      ( wne wn wceq bicomi necon3abii ) BCEAFABCABCGDHIH $.
  $}

  ${
    necon1abii.1 $e |- ( -. ph <-> A = B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       17-Mar-2007.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    necon1abii $p |- ( A =/= B <-> ph ) $=
      ( wn wne notnot necon3bbii bitr2i ) AAEZEBCFAGJBCDHI $.

    $( Obsolete proof of ~ necon1abii as of 25-Nov-2019.  (Contributed by NM,
       17-Mar-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    necon1abiiOLD $p |- ( A =/= B <-> ph ) $=
      ( wne wceq wn df-ne con1bii bitri ) BCEBCFZGABCHAKDIJ $.
  $}

  ${
    necon1bbii.1 $e |- ( A =/= B <-> ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       17-Mar-2007.)  (Proof shortened by Wolf Lammen, 24-Nov-2019.) $)
    necon1bbii $p |- ( -. ph <-> A = B ) $=
      ( wne wceq nne xchnxbi ) BCEBCFABCGDH $.

    $( Obsolete proof of ~ necon1bbii as of 24-Nov-2019.  (Contributed by NM,
       17-Mar-2007.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    necon1bbiiOLD $p |- ( -. ph <-> A = B ) $=
      ( wceq wn wne df-ne bitr3i con1bii ) BCEZAKFBCGABCHDIJ $.
  $}

  ${
    necon2abii.1 $e |- ( A = B <-> -. ph ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       2-Mar-2007.) $)
    necon2abii $p |- ( ph <-> A =/= B ) $=
      ( wne wceq wn bicomi necon1abii ) BCEAABCBCFAGDHIH $.
  $}

  ${
    necon2bbii.1 $e |- ( ph <-> A =/= B ) $.
    $( Contrapositive inference for inequality.  (Contributed by NM,
       13-Apr-2007.) $)
    necon2bbii $p |- ( A = B <-> -. ph ) $=
      ( wn wceq wne bicomi necon1bbii ) AEBCFABCABCGDHIH $.
  $}

  ${
    necon3bii.1 $e |- ( A = B <-> C = D ) $.
    $( Inference from equality to inequality.  (Contributed by NM,
       23-Feb-2005.) $)
    necon3bii $p |- ( A =/= B <-> C =/= D ) $=
      ( wne wceq wn necon3abii df-ne bitr4i ) ABFCDGZHCDFLABEICDJK $.
  $}

  $( Commutation of inequality.  (Contributed by NM, 14-May-1999.) $)
  necom $p |- ( A =/= B <-> B =/= A ) $=
    ( eqcom necon3bii ) ABBAABCD $.

  ${
    necomi.1 $e |- A =/= B $.
    $( Inference from commutative law for inequality.  (Contributed by NM,
       17-Oct-2012.) $)
    necomi $p |- B =/= A $=
      ( wne necom mpbi ) ABDBADCABEF $.
  $}

  ${
    necomd.1 $e |- ( ph -> A =/= B ) $.
    $( Deduction from commutative law for inequality.  (Contributed by NM,
       12-Feb-2008.) $)
    necomd $p |- ( ph -> B =/= A ) $=
      ( wne necom sylib ) ABCECBEDBCFG $.
  $}

  $( Characterization of inequality in terms of reversed equality (see
     ~ bicom ).  (Contributed by BJ, 7-Jul-2018.) $)
  nesym $p |- ( A =/= B <-> -. B = A ) $=
    ( wceq eqcom necon3abii ) BACABABDE $.

  ${
    nesymi.1 $e |- A =/= B $.
    $( Inference associated with ~ nesym .  (Contributed by BJ, 7-Jul-2018.)
       (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    nesymi $p |- -. B = A $=
      ( necomi neii ) BAABCDE $.

    $( Obsolete proof of ~ nesymi as of 25-Nov-2019.  (Contributed by BJ,
       7-Jul-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nesymiOLD $p |- -. B = A $=
      ( wne wceq wn nesym mpbi ) ABDBAEFCABGH $.
  $}

  ${
    nesymir.1 $e |- -. A = B $.
    $( Inference associated with ~ nesym .  (Contributed by BJ, 7-Jul-2018.)
       (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    nesymir $p |- B =/= A $=
      ( neir necomi ) ABABCDE $.

    $( Obsolete proof of ~ nesymir as of 25-Nov-2019.  (Contributed by BJ,
       7-Jul-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    nesymirOLD $p |- B =/= A $=
      ( wne wceq wn nesym mpbir ) BADABEFCBAGH $.
  $}

  ${
    neeq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction for inequality.  (Contributed by NM, 25-Oct-1999.)  (Proof
       shortened by Wolf Lammen, 19-Nov-2019.) $)
    neeq1d $p |- ( ph -> ( A =/= C <-> B =/= C ) ) $=
      ( eqeq1d necon3bid ) ABDCDABCDEFG $.

    $( Deduction for inequality.  (Contributed by NM, 25-Oct-1999.)  (Proof
       shortened by Wolf Lammen, 19-Nov-2019.) $)
    neeq2d $p |- ( ph -> ( C =/= A <-> C =/= B ) ) $=
      ( eqeq2d necon3bid ) ADBDCABCDEFG $.

    neeq12d.2 $e |- ( ph -> C = D ) $.
    $( Deduction for inequality.  (Contributed by NM, 24-Jul-2012.)  (Proof
       shortened by Wolf Lammen, 25-Nov-2019.) $)
    neeq12d $p |- ( ph -> ( A =/= C <-> B =/= D ) ) $=
      ( eqeq12d necon3bid ) ABDCEABCDEFGHI $.

    $( Obsolete proof of ~ neeq12d as of 25-Nov-2019.  (Contributed by NM,
       24-Jul-2012.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    neeq12dOLD $p |- ( ph -> ( A =/= C <-> B =/= D ) ) $=
      ( wne neeq1d neeq2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  $( Equality theorem for inequality.  (Contributed by NM, 19-Nov-1994.)
     (Proof shortened by Wolf Lammen, 18-Nov-2019.) $)
  neeq1 $p |- ( A = B -> ( A =/= C <-> B =/= C ) ) $=
    ( wceq id neeq1d ) ABDZABCGEF $.

  $( Obsolete proof of ~ neeq1 as of 18-Nov-2019.  (Contributed by NM,
     19-Nov-1994.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  neeq1OLD $p |- ( A = B -> ( A =/= C <-> B =/= C ) ) $=
    ( wceq wn wne eqeq1 notbid df-ne 3bitr4g ) ABDZACDZEBCDZEACFBCFKLMABCGHACIB
    CIJ $.

  $( Equality theorem for inequality.  (Contributed by NM, 19-Nov-1994.)
     (Proof shortened by Wolf Lammen, 18-Nov-2019.) $)
  neeq2 $p |- ( A = B -> ( C =/= A <-> C =/= B ) ) $=
    ( wceq id neeq2d ) ABDZABCGEF $.

  $( Obsolete proof of ~ neeq2 as of 18-Nov-2019.  (Contributed by NM,
     19-Nov-1994.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  neeq2OLD $p |- ( A = B -> ( C =/= A <-> C =/= B ) ) $=
    ( wceq wn wne eqeq2 notbid df-ne 3bitr4g ) ABDZCADZECBDZECAFCBFKLMABCGHCAIC
    BIJ $.

  ${
    neeq1i.1 $e |- A = B $.
    $( Inference for inequality.  (Contributed by NM, 29-Apr-2005.)  (Proof
       shortened by Wolf Lammen, 19-Nov-2019.) $)
    neeq1i $p |- ( A =/= C <-> B =/= C ) $=
      ( eqeq1i necon3bii ) ACBCABCDEF $.

    $( Obsolete proof of ~ neeq1i as of 19-Nov-2019.  (Contributed by NM,
       29-Apr-2005.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    neeq1iOLD $p |- ( A =/= C <-> B =/= C ) $=
      ( wceq wne wb neeq1 ax-mp ) ABEACFBCFGDABCHI $.

    $( Inference for inequality.  (Contributed by NM, 29-Apr-2005.)  (Proof
       shortened by Wolf Lammen, 19-Nov-2019.) $)
    neeq2i $p |- ( C =/= A <-> C =/= B ) $=
      ( eqeq2i necon3bii ) CACBABCDEF $.

    $( Obsolete proof of ~ neeq2i as of 19-Nov-2019.  (Contributed by NM,
       29-Apr-2005.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    neeq2iOLD $p |- ( C =/= A <-> C =/= B ) $=
      ( wceq wne wb neeq2 ax-mp ) ABECAFCBFGDABCHI $.

    neeq12i.2 $e |- C = D $.
    $( Inference for inequality.  (Contributed by NM, 24-Jul-2012.)  (Proof
       shortened by Wolf Lammen, 25-Nov-2019.) $)
    neeq12i $p |- ( A =/= C <-> B =/= D ) $=
      ( eqeq12i necon3bii ) ACBDABCDEFGH $.

    $( Obsolete proof of ~ neeq12i as of 25-Nov-2019.  (Contributed by NM,
       24-Jul-2012.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    neeq12iOLD $p |- ( A =/= C <-> B =/= D ) $=
      ( wne neeq2i neeq1i bitri ) ACGADGBDGCDAFHABDEIJ $.
  $}

  ${
    neeq1dOLD.1 $e |- ( ph -> A = B ) $.
    $( Obsolete proof of ~ neeq1d as of 18-Nov-2019.  (Contributed by NM,
       25-Oct-1999.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    neeq1dOLD $p |- ( ph -> ( A =/= C <-> B =/= C ) ) $=
      ( wceq wne wb neeq1 syl ) ABCFBDGCDGHEBCDIJ $.

    $( Obsolete proof of ~ neeq2d as of 18-Nov-2019.  (Contributed by NM,
       25-Oct-1999.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    neeq2dOLD $p |- ( ph -> ( C =/= A <-> C =/= B ) ) $=
      ( wceq wne wb neeq2 syl ) ABCFDBGDCGHEBCDIJ $.
  $}

  ${
    eqnetrd.1 $e |- ( ph -> A = B ) $.
    eqnetrd.2 $e |- ( ph -> B =/= C ) $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    eqnetrd $p |- ( ph -> A =/= C ) $=
      ( wne neeq1d mpbird ) ABDGCDGFABCDEHI $.
  $}

  ${
    eqnetrrd.1 $e |- ( ph -> A = B ) $.
    eqnetrrd.2 $e |- ( ph -> A =/= C ) $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    eqnetrrd $p |- ( ph -> B =/= C ) $=
      ( eqcomd eqnetrd ) ACBDABCEGFH $.
  $}

  ${
    neeqtrd.1 $e |- ( ph -> A =/= B ) $.
    neeqtrd.2 $e |- ( ph -> B = C ) $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    neeqtrd $p |- ( ph -> A =/= C ) $=
      ( wne neeq2d mpbid ) ABCGBDGEACDBFHI $.
  $}

  ${
    eqnetr.1 $e |- A = B $.
    eqnetr.2 $e |- B =/= C $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    eqnetri $p |- A =/= C $=
      ( wne neeq1i mpbir ) ACFBCFEABCDGH $.
  $}

  ${
    eqnetrr.1 $e |- A = B $.
    eqnetrr.2 $e |- A =/= C $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    eqnetrri $p |- B =/= C $=
      ( eqcomi eqnetri ) BACABDFEG $.
  $}

  ${
    neeqtr.1 $e |- A =/= B $.
    neeqtr.2 $e |- B = C $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    neeqtri $p |- A =/= C $=
      ( wne neeq2i mpbi ) ABFACFDBCAEGH $.
  $}

  ${
    neeqtrr.1 $e |- A =/= B $.
    neeqtrr.2 $e |- C = B $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    neeqtrri $p |- A =/= C $=
      ( eqcomi neeqtri ) ABCDCBEFG $.
  $}

  ${
    neeqtrrd.1 $e |- ( ph -> A =/= B ) $.
    neeqtrrd.2 $e |- ( ph -> C = B ) $.
    $( Substitution of equal classes into an inequality.  (Contributed by NM,
       4-Jul-2012.) $)
    neeqtrrd $p |- ( ph -> A =/= C ) $=
      ( eqcomd neeqtrd ) ABCDEADCFGH $.
  $}

  ${
    syl5eqner.1 $e |- B = A $.
    syl5eqner.2 $e |- ( ph -> B =/= C ) $.
    $( A chained equality inference for inequality.  (Contributed by NM,
       6-Jun-2012.)  (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
    syl5eqner $p |- ( ph -> A =/= C ) $=
      ( wceq a1i eqnetrrd ) ACBDCBGAEHFI $.

    $( Obsolete proof of ~ syl5eqner as of 19-Nov-2019.  (Contributed by NM,
       6-Jun-2012.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    syl5eqnerOLD $p |- ( ph -> A =/= C ) $=
      ( wne neeq1i sylib ) ACDGBDGFCBDEHI $.
  $}

  ${
    3netr3d.1 $e |- ( ph -> A =/= B ) $.
    3netr3d.2 $e |- ( ph -> A = C ) $.
    3netr3d.3 $e |- ( ph -> B = D ) $.
    $( Substitution of equality into both sides of an inequality.  (Contributed
       by NM, 24-Jul-2012.)  (Proof shortened by Wolf Lammen, 19-Nov-2019.) $)
    3netr3d $p |- ( ph -> C =/= D ) $=
      ( neeqtrd eqnetrrd ) ABDEGABCEFHIJ $.
    $( Obsolete proof of ~ 3netr3d as of 19-Nov-2019.  (Contributed by NM,
       24-Jul-2012.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    3netr3dOLD $p |- ( ph -> C =/= D ) $=
      ( wne neeq12d mpbid ) ABCIDEIFABDCEGHJK $.
  $}

  ${
    3netr4d.1 $e |- ( ph -> A =/= B ) $.
    3netr4d.2 $e |- ( ph -> C = A ) $.
    3netr4d.3 $e |- ( ph -> D = B ) $.
    $( Substitution of equality into both sides of an inequality.  (Contributed
       by NM, 24-Jul-2012.)  (Proof shortened by Wolf Lammen, 21-Nov-2019.) $)
    3netr4d $p |- ( ph -> C =/= D ) $=
      ( eqnetrd neeqtrrd ) ADCEADBCGFIHJ $.
    $( Obsolete proof of ~ 3netr4d as of 21-Nov-2019.  (Contributed by NM,
       24-Jul-2012.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    3netr4dOLD $p |- ( ph -> C =/= D ) $=
      ( wne neeq12d mpbird ) ADEIBCIFADBECGHJK $.
  $}

  ${
    3netr3g.1 $e |- ( ph -> A =/= B ) $.
    3netr3g.2 $e |- A = C $.
    3netr3g.3 $e |- B = D $.
    $( Substitution of equality into both sides of an inequality.  (Contributed
       by NM, 24-Jul-2012.) $)
    3netr3g $p |- ( ph -> C =/= D ) $=
      ( wne neeq12i sylib ) ABCIDEIFBDCEGHJK $.
  $}

  ${
    3netr4g.1 $e |- ( ph -> A =/= B ) $.
    3netr4g.2 $e |- C = A $.
    3netr4g.3 $e |- D = B $.
    $( Substitution of equality into both sides of an inequality.  (Contributed
       by NM, 14-Jun-2012.) $)
    3netr4g $p |- ( ph -> C =/= D ) $=
      ( wne neeq12i sylibr ) ABCIDEIFDBECGHJK $.
  $}

  ${
    neneqadOLD.1 $e |- ( ph -> -. A = B ) $.
    $( Obsolete proof of ~ neqned (formerly ""neneqad"") as of 22-Nov-2019.
       (Contributed by David Moews, 28-Feb-2017.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    neneqadOLD $p |- ( ph -> A =/= B ) $=
      ( wceq con2i necon2ai ) ABCABCEDFG $.
  $}

  $( Contraposition law for inequality.  (Contributed by NM, 28-Dec-2008.) $)
  nebi $p |- ( ( A = B <-> C = D ) <-> ( A =/= B <-> C =/= D ) ) $=
    ( wceq wb wne id necon3bid necon4bid impbii ) ABECDEFZABGCDGFZLABCDLHIMABCD
    MHJK $.

  $( Theorem *13.18 in [WhiteheadRussell] p. 178.  (Contributed by Andrew
     Salmon, 3-Jun-2011.) $)
  pm13.18 $p |- ( ( A = B /\ A =/= C ) -> B =/= C ) $=
    ( wceq wne eqeq1 biimprd necon3d imp ) ABDZACEBCEJBCACJACDBCDABCFGHI $.

  $( Theorem *13.181 in [WhiteheadRussell] p. 178.  (Contributed by Andrew
     Salmon, 3-Jun-2011.) $)
  pm13.181 $p |- ( ( A = B /\ B =/= C ) -> A =/= C ) $=
    ( wceq wne eqcom pm13.18 sylanb ) ABDBADBCEACEABFBACGH $.

  ${
    pm2.61ine.1 $e |- ( A = B -> ph ) $.
    pm2.61ine.2 $e |- ( A =/= B -> ph ) $.
    $( Inference eliminating an inequality in an antecedent.  (Contributed by
       NM, 16-Jan-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    pm2.61ine $p |- ph $=
      ( wne wn wceq nne sylbi pm2.61i ) BCFZAELGBCHABCIDJK $.
  $}

  ${
    pm2.21ddne.1 $e |- ( ph -> A = B ) $.
    pm2.21ddne.2 $e |- ( ph -> A =/= B ) $.
    $( A contradiction implies anything.  Equality/inequality deduction form.
       (Contributed by David Moews, 28-Feb-2017.) $)
    pm2.21ddne $p |- ( ph -> ps ) $=
      ( wceq neneqd pm2.21dd ) ACDGBEACDFHI $.
  $}

  ${
    pm2.61ne.1 $e |- ( A = B -> ( ps <-> ch ) ) $.
    pm2.61ne.2 $e |- ( ( ph /\ A =/= B ) -> ps ) $.
    pm2.61ne.3 $e |- ( ph -> ch ) $.
    $( Deduction eliminating an inequality in an antecedent.  (Contributed by
       NM, 24-May-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    pm2.61ne $p |- ( ph -> ps ) $=
      ( wi wceq syl5ibr wne expcom pm2.61ine ) ABIDEABDEJCHFKADELBGMN $.

    $( Obsolete proof of ~ pm2.61ne as of 25-Nov-2019.  (Contributed by NM,
       24-May-2006.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    pm2.61neOLD $p |- ( ph -> ps ) $=
      ( wne wi expcom wn wceq nne syl5ibr sylbi pm2.61i ) DEIZABJZARBGKRLDEMZSD
      ENABTCHFOPQ $.
  $}

  ${
    pm2.61dne.1 $e |- ( ph -> ( A = B -> ps ) ) $.
    pm2.61dne.2 $e |- ( ph -> ( A =/= B -> ps ) ) $.
    $( Deduction eliminating an inequality in an antecedent.  (Contributed by
       NM, 1-Jun-2007.)  (Proof shortened by Andrew Salmon, 25-May-2011.) $)
    pm2.61dne $p |- ( ph -> ps ) $=
      ( wne wn wceq nne syl5bi pm2.61d ) ACDGZBFMHCDIABCDJEKL $.
  $}

  ${
    pm2.61dane.1 $e |- ( ( ph /\ A = B ) -> ps ) $.
    pm2.61dane.2 $e |- ( ( ph /\ A =/= B ) -> ps ) $.
    $( Deduction eliminating an inequality in an antecedent.  (Contributed by
       NM, 30-Nov-2011.) $)
    pm2.61dane $p |- ( ph -> ps ) $=
      ( wceq ex wne pm2.61dne ) ABCDACDGBEHACDIBFHJ $.
  $}

  ${
    pm2.61da2ne.1 $e |- ( ( ph /\ A = B ) -> ps ) $.
    pm2.61da2ne.2 $e |- ( ( ph /\ C = D ) -> ps ) $.
    pm2.61da2ne.3 $e |- ( ( ph /\ ( A =/= B /\ C =/= D ) ) -> ps ) $.
    $( Deduction eliminating two inequalities in an antecedent.  (Contributed
       by NM, 29-May-2013.) $)
    pm2.61da2ne $p |- ( ph -> ps ) $=
      ( wne wa wceq adantlr anassrs pm2.61dane ) ABCDGACDJZKBEFAEFLBPHMAPEFJBIN
      OO $.
  $}

  ${
    pm2.61da3ne.1 $e |- ( ( ph /\ A = B ) -> ps ) $.
    pm2.61da3ne.2 $e |- ( ( ph /\ C = D ) -> ps ) $.
    pm2.61da3ne.3 $e |- ( ( ph /\ E = F ) -> ps ) $.
    pm2.61da3ne.4 $e |- ( ( ph /\ ( A =/= B /\ C =/= D /\ E =/= F ) )
          -> ps ) $.
    $( Deduction eliminating three inequalities in an antecedent.  (Contributed
       by NM, 15-Jun-2013.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    pm2.61da3ne $p |- ( ph -> ps ) $=
      ( wne wa wi wceq a1d 3exp2 imp4b pm2.61dane imp pm2.61da2ne ) ABEFGHJKAEF
      MZGHMZNZBAUEBOCDACDPNBUEIQACDMZUCUDBAUFUCUDBLRSTUAUB $.

    $( Obsolete proof of ~ pm2.61da3ne as of 25-Nov-2019.  (Contributed by NM,
       15-Jun-2013.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    pm2.61da3neOLD $p |- ( ph -> ps ) $=
      ( wne wa wceq adantlr simpll simplrl simplrr simpr pm2.61dane pm2.61da2ne
      syl13anc ) ABCDEFIJACDMZEFMZNZNZBGHAGHOBUFKPUGGHMZNAUDUEUHBAUFUHQAUDUEUHR
      AUDUEUHSUGUHTLUCUAUB $.
  $}

  ${
    pm2.61iine.1 $e |- ( ( A =/= C /\ B =/= D ) -> ph ) $.
    pm2.61iine.2 $e |- ( A = C -> ph ) $.
    pm2.61iine.3 $e |- ( B = D -> ph ) $.
    $( Equality version of ~ pm2.61ii .  (Contributed by Scott Fenton,
       13-Jun-2013.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    pm2.61iine $p |- ph $=
      ( wne wceq adantl pm2.61dane pm2.61ine ) ABDGBDIZACECEJANHKFLM $.

    $( Obsolete proof of ~ pm2.61iine .  (Contributed by Scott Fenton,
       13-Jun-2013.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    pm2.61iineOLD $p |- ph $=
      ( wceq wn wne df-ne syl2anbr ex pm2.61ii ) BDIZCEIZAPJZQJZARBDKCEKASBDLCE
      LFMNGHO $.
  $}

  $( Logical OR with an equality.  (Contributed by NM, 29-Apr-2007.) $)
  neor $p |- ( ( A = B \/ ps ) <-> ( A =/= B -> ps ) ) $=
    ( wceq wo wn wi wne df-or df-ne imbi1i bitr4i ) BCDZAEMFZAGBCHZAGMAIONABCJK
    L $.

  $( A De Morgan's law for inequality.  (Contributed by NM, 18-May-2007.) $)
  neanior $p |- ( ( A =/= B /\ C =/= D ) <-> -. ( A = B \/ C = D ) ) $=
    ( wne wa wceq wn wo df-ne anbi12i pm4.56 bitri ) ABEZCDEZFABGZHZCDGZHZFPRIH
    NQOSABJCDJKPRLM $.

  $( A De Morgan's law for inequality.  (Contributed by NM, 30-Sep-2013.) $)
  ne3anior $p |- ( ( A =/= B /\ C =/= D /\ E =/= F )
        <-> -. ( A = B \/ C = D \/ E = F ) ) $=
    ( wne w3a wn w3o wceq 3anor nne 3orbi123i xchbinx ) ABGZCDGZEFGZHPIZQIZRIZJ
    ABKZCDKZEFKZJPQRLSUBTUCUAUDABMCDMEFMNO $.

  $( A De Morgan's law for inequality.  (Contributed by NM, 18-May-2007.) $)
  neorian $p |- ( ( A =/= B \/ C =/= D ) <-> -. ( A = B /\ C = D ) ) $=
    ( wne wo wceq wn wa df-ne orbi12i ianor bitr4i ) ABEZCDEZFABGZHZCDGZHZFPRIH
    NQOSABJCDJKPRLM $.

  ${
    nemtbir.1 $e |- A =/= B $.
    nemtbir.2 $e |- ( ph <-> A = B ) $.
    $( An inference from an inequality, related to modus tollens.  (Contributed
       by NM, 13-Apr-2007.) $)
    nemtbir $p |- -. ph $=
      ( wceq neii mtbir ) ABCFBCDGEH $.
  $}

  $( Two classes are different if they don't contain the same element.
     (Contributed by NM, 3-Feb-2012.) $)
  nelne1 $p |- ( ( A e. B /\ -. A e. C ) -> B =/= C ) $=
    ( wcel wn wne wceq eleq2 biimpcd necon3bd imp ) ABDZACDZEBCFLMBCBCGLMBCAHIJ
    K $.

  $( Two classes are different if they don't belong to the same class.
     (Contributed by NM, 25-Jun-2012.) $)
  nelne2 $p |- ( ( A e. C /\ -. B e. C ) -> A =/= B ) $=
    ( wcel wn wne wceq eleq1 biimpcd necon3bd imp ) ACDZBCDZEABFLMABABGLMABCHIJ
    K $.

  ${
    $d y A $.  $d y B $.
    nfne.1 $e |- F/_ x A $.
    nfne.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for inequality.  (Contributed by NM,
       10-Nov-2007.)  (Revised by Mario Carneiro, 7-Oct-2016.) $)
    nfne $p |- F/ x A =/= B $=
      ( wne wceq wn df-ne nfeq nfn nfxfr ) BCFBCGZHABCIMAABCDEJKL $.
  $}

  ${
    $d y A $.  $d y B $.
    nfned.1 $e |- ( ph -> F/_ x A ) $.
    nfned.2 $e |- ( ph -> F/_ x B ) $.
    $( Bound-variable hypothesis builder for inequality.  (Contributed by NM,
       10-Nov-2007.)  (Revised by Mario Carneiro, 7-Oct-2016.) $)
    nfned $p |- ( ph -> F/ x A =/= B ) $=
      ( wne wceq wn df-ne nfeqd nfnd nfxfrd ) CDGCDHZIABCDJANBABCDEFKLM $.
  $}

  $( Not equivalent wff's correspond to not equal class abstractions.
     (Contributed by AV, 7-Apr-2019.)  (Proof shortened by Wolf Lammen,
     25-Nov-2019.) $)
  nabbi $p |- ( E. x ( ph <-> -. ps ) <-> { x | ph } =/= { x | ps } ) $=
    ( cab wne wceq wn wex df-ne wal exnal xor3 exbii bitr3i abbi xchnxbi bitr2i
    wb ) ACDZBCDZESTFZGABGRZCHZSTIABRZCJZUCUAUEGUDGZCHUCUDCKUFUBCABLMNABCOPQ $.

  $( Obsolete proof of ~ nabbi as of 25-Nov-2019.  (Contributed by AV,
     7-Apr-2019.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nabbiOLD $p |- ( E. x ( ph <-> -. ps ) <-> { x | ph } =/= { x | ps } ) $=
    ( cab wne wn wex wceq df-ne wal abbi bicomi notbii exnal xor3 exbii bitri
    wb ) ACDZBCDZEZABFRZCGZUASTHZFZUCSTIUEABRZCJZFZUCUDUGUGUDABCKLMUHUFFZCGZUCU
    JUHUFCNLUIUBCABOPQQQL $.

$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
        Negated membership
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    neli.1 $e |- A e/ B $.
    $( Inference associated with ~ df-nel .  (Contributed by BJ,
       7-Jul-2018.) $)
    neli $p |- -. A e. B $=
      ( wnel wcel wn df-nel mpbi ) ABDABEFCABGH $.
  $}

  ${
    nelir.1 $e |- -. A e. B $.
    $( Inference associated with ~ df-nel .  (Contributed by BJ,
       7-Jul-2018.) $)
    nelir $p |- A e/ B $=
      ( wnel wcel wn df-nel mpbir ) ABDABEFCABGH $.
  $}

  ${
    neleq12d.1 $e |- ( ph -> A = B ) $.
    neleq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality theorem for negated membership.  (Contributed by FL,
       10-Aug-2016.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
    neleq12d $p |- ( ph -> ( A e/ C <-> B e/ D ) ) $=
      ( wcel wn wnel eleq12d notbid df-nel 3bitr4g ) ABDHZICEHZIBDJCEJAOPABCDEF
      GKLBDMCEMN $.
  $}

  $( Equality theorem for negated membership.  (Contributed by NM,
     20-Nov-1994.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
  neleq1 $p |- ( A = B -> ( A e/ C <-> B e/ C ) ) $=
    ( wceq id eqidd neleq12d ) ABDZABCCHEHCFG $.

  $( Obsolete proof of ~ neleq1 as of 25-Nov-2019.  (Contributed by NM,
     20-Nov-1994.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  neleq1OLD $p |- ( A = B -> ( A e/ C <-> B e/ C ) ) $=
    ( wceq wcel wn wnel eleq1 notbid df-nel 3bitr4g ) ABDZACEZFBCEZFACGBCGLMNAB
    CHIACJBCJK $.

  $( Equality theorem for negated membership.  (Contributed by NM,
     20-Nov-1994.)  (Proof shortened by Wolf Lammen, 25-Nov-2019.) $)
  neleq2 $p |- ( A = B -> ( C e/ A <-> C e/ B ) ) $=
    ( wceq eqidd id neleq12d ) ABDZCCABHCEHFG $.

  $( Obsolete proof of ~ neleq2 as of 25-Nov-2019.  (Contributed by NM,
     20-Nov-1994.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  neleq2OLD $p |- ( A = B -> ( C e/ A <-> C e/ B ) ) $=
    ( wceq wcel wn wnel eleq2 notbid df-nel 3bitr4g ) ABDZCAEZFCBEZFCAGCBGLMNAB
    CHICAJCBJK $.

  ${
    neleq12dOLD.1 $e |- ( ph -> A = B ) $.
    neleq12dOLD.2 $e |- ( ph -> C = D ) $.
    $( Obsolete proof of ~ neleq12d as of 25-Nov-2019.  (Contributed by FL,
       10-Aug-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    neleq12dOLD $p |- ( ph -> ( A e/ C <-> B e/ D ) ) $=
      ( wnel wceq wb neleq1 syl neleq2 bitrd ) ABDHZCDHZCEHZABCIOPJFBCDKLADEIPQ
      JGDECMLN $.
  $}

  ${
    $d y A $.  $d z B $.
    nfnel.1 $e |- F/_ x A $.
    nfnel.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for negated membership.  (Contributed
       by David Abernethy, 26-Jun-2011.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
    nfnel $p |- F/ x A e/ B $=
      ( wnel wcel wn df-nel nfel nfn nfxfr ) BCFBCGZHABCIMAABCDEJKL $.
  $}

  ${
    $d y A $.  $d z B $.
    nfneld.1 $e |- ( ph -> F/_ x A ) $.
    nfneld.2 $e |- ( ph -> F/_ x B ) $.
    $( Bound-variable hypothesis builder for negated membership.  (Contributed
       by David Abernethy, 26-Jun-2011.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
    nfneld $p |- ( ph -> F/ x A e/ B ) $=
      ( wnel wcel wn df-nel nfeld nfnd nfxfrd ) CDGCDHZIABCDJANBABCDEFKLM $.
  $}

  $( Negation of negated membership, analogous to ~ nne .  (Contributed by
     Alexander van der Vekens, 18-Jan-2018.)  (Proof shortened by Wolf Lammen,
     25-Nov-2019.) $)
  nnel $p |- ( -. A e/ B <-> A e. B ) $=
    ( wcel wnel wn df-nel bicomi con1bii ) ABCZABDZJIEABFGH $.

  $( Obsolete proof of ~ nnel as of 25-Nov-2019.  (Contributed by Alexander van
     der Vekens, 18-Jan-2018.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  nnelOLD $p |- ( -. A e/ B <-> A e. B ) $=
    ( wcel wn wnel notnot bicomi df-nel xchnxbir ) ABCZDZJABEJKDJFGABHI $.

  $( Two classes are different if they don't contain the same element.
     (Contributed by AV, 28-Jan-2020.) $)
  elnelne1 $p |- ( ( A e. B /\ A e/ C ) -> B =/= C ) $=
    ( wnel wcel wn wne df-nel nelne1 sylan2b ) ACDABEACEFBCGACHABCIJ $.

  $( Two classes are different if they don't belong to the same class.
     (Contributed by AV, 28-Jan-2020.) $)
  elnelne2 $p |- ( ( A e. C /\ B e/ C ) -> A =/= B ) $=
    ( wnel wcel wn wne df-nel nelne2 sylan2b ) BCDACEBCEFABGBCHABCIJ $.

  ${
    nelcon3d.1 $e |- ( ph -> ( A e. B -> C e. D ) ) $.
    $( Contrapositive law deduction for negated membership.  (Contributed by
       AV, 28-Jan-2020.) $)
    nelcon3d $p |- ( ph -> ( C e/ D -> A e/ B ) ) $=
      ( wcel wn wnel con3d df-nel 3imtr4g ) ADEGZHBCGZHDEIBCIANMFJDEKBCKL $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Restricted quantification
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Extend wff notation to include restricted universal quantification. $)
  wral $a wff A. x e. A ph $.

  $( Extend wff notation to include restricted existential quantification. $)
  wrex $a wff E. x e. A ph $.

  $( Extend wff notation to include restricted existential uniqueness. $)
  wreu $a wff E! x e. A ph $.

  $( Extend wff notation to include restricted ""at most one."" $)
  wrmo $a wff E* x e. A ph $.

  $( Extend class notation to include the restricted class abstraction (class
     builder). $)
  crab $a class { x e. A | ph } $.

  $( Define restricted universal quantification.  Special case of Definition
     4.15(3) of [TakeutiZaring] p. 22.  (Contributed by NM, 19-Aug-1993.) $)
  df-ral $a |- ( A. x e. A ph <-> A. x ( x e. A -> ph ) ) $.

  $( Define restricted existential quantification.  Special case of Definition
     4.15(4) of [TakeutiZaring] p. 22.  (Contributed by NM, 30-Aug-1993.) $)
  df-rex $a |- ( E. x e. A ph <-> E. x ( x e. A /\ ph ) ) $.

  $( Define restricted existential uniqueness.  (Contributed by NM,
     22-Nov-1994.) $)
  df-reu $a |- ( E! x e. A ph <-> E! x ( x e. A /\ ph ) ) $.

  $( Define restricted ""at most one"".  (Contributed by NM, 16-Jun-2017.) $)
  df-rmo $a |- ( E* x e. A ph <-> E* x ( x e. A /\ ph ) ) $.

  $( Define a restricted class abstraction (class builder), which is the class
     of all ` x ` in ` A ` such that ` ph ` is true.  Definition of
     [TakeutiZaring] p. 20.  (Contributed by NM, 22-Nov-1994.) $)
  df-rab $a |- { x e. A | ph } = { x | ( x e. A /\ ph ) } $.

  ${
    rgen.1 $e |- ( x e. A -> ph ) $.
    $( Generalization rule for restricted quantification.  (Contributed by NM,
       19-Nov-1994.) $)
    rgen $p |- A. x e. A ph $=
      ( wral cv wcel wi df-ral mpgbir ) ABCEBFCGAHBABCIDJ $.
  $}

  ${
    rgenw.1 $e |- ph $.
    $( Generalization rule for restricted quantification.  (Contributed by NM,
       18-Jun-2014.) $)
    rgenw $p |- A. x e. A ph $=
      ( cv wcel a1i rgen ) ABCABECFDGH $.

    $( Generalization rule for restricted quantification.  Note that ` x ` and
       ` y ` needn't be distinct.  (Contributed by NM, 18-Jun-2014.) $)
    rgen2w $p |- A. x e. A A. y e. B ph $=
      ( wral rgenw ) ACEGBDACEFHH $.
  $}

  ${
    mprg.1 $e |- ( A. x e. A ph -> ps ) $.
    mprg.2 $e |- ( x e. A -> ph ) $.
    $( Modus ponens combined with restricted generalization.  (Contributed by
       NM, 10-Aug-2004.) $)
    mprg $p |- ps $=
      ( wral rgen ax-mp ) ACDGBACDFHEI $.
  $}

  ${
    mprgbir.1 $e |- ( ph <-> A. x e. A ps ) $.
    mprgbir.2 $e |- ( x e. A -> ps ) $.
    $( Modus ponens on biconditional combined with restricted generalization.
       (Contributed by NM, 21-Mar-2004.) $)
    mprgbir $p |- ph $=
      ( wral rgen mpbir ) ABCDGBCDFHEI $.
  $}

  $( Universal quantification implies restricted quantification.  (Contributed
     by NM, 20-Oct-2006.) $)
  alral $p |- ( A. x ph -> A. x e. A ph ) $=
    ( wal cv wcel wi wral ala1 df-ral sylibr ) ABDBECFZAGBDABCHALBIABCJK $.

  $( Restricted specialization.  (Contributed by NM, 17-Oct-1996.) $)
  rsp $p |- ( A. x e. A ph -> ( x e. A -> ph ) ) $=
    ( wral cv wcel wi wal df-ral sp sylbi ) ABCDBECFAGZBHLABCILBJK $.

  $( Restricted specialization.  (Contributed by Glauco Siliprandi,
     11-Dec-2019.) $)
  rspa $p |- ( ( A. x e. A ph /\ x e. A ) -> ph ) $=
    ( wral cv wcel rsp imp ) ABCDBECFAABCGH $.

  ${
    rspec.1 $e |- A. x e. A ph $.
    $( Specialization rule for restricted quantification.  (Contributed by NM,
       19-Nov-1994.) $)
    rspec $p |- ( x e. A -> ph ) $=
      ( wral cv wcel wi rsp ax-mp ) ABCEBFCGAHDABCIJ $.
  $}

  ${
    r19.21bi.1 $e |- ( ph -> A. x e. A ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 20-Nov-1994.)  (Proof
       shortened by Wolf Lammen, 1-Jan-2020.) $)
    r19.21bi $p |- ( ( ph /\ x e. A ) -> ps ) $=
      ( cv wcel wral wi rsp syl imp ) ACFDGZBABCDHMBIEBCDJKL $.

    $( Obsolete proof of ~ r19.21bi as of 1-Jan-2020.  (Contributed by NM,
       20-Nov-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r19.21biOLD $p |- ( ( ph /\ x e. A ) -> ps ) $=
      ( cv wcel wi wral wal df-ral sylib 19.21bi imp ) ACFDGZBAOBHZCABCDIPCJEBC
      DKLMN $.
  $}

  ${
    r19.21be.1 $e |- ( ph -> A. x e. A ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 21-Nov-1994.) $)
    r19.21be $p |- A. x e. A ( ph -> ps ) $=
      ( wi cv wcel r19.21bi expcom rgen ) ABFCDACGDHBABCDEIJK $.
  $}

  ${
    rspec2.1 $e |- A. x e. A A. y e. B ph $.
    $( Specialization rule for restricted quantification, with two
       quantifiers.  (Contributed by NM, 20-Nov-1994.) $)
    rspec2 $p |- ( ( x e. A /\ y e. B ) -> ph ) $=
      ( cv wcel wral rspec r19.21bi ) BGDHACEACEIBDFJK $.
  $}

  ${
    rspec3.1 $e |- A. x e. A A. y e. B A. z e. C ph $.
    $( Specialization rule for restricted quantification, with three
       quantifiers.  (Contributed by NM, 20-Nov-1994.) $)
    rspec3 $p |- ( ( x e. A /\ y e. B /\ z e. C ) -> ph ) $=
      ( cv wcel wa wral rspec2 r19.21bi 3impa ) BIEJZCIFJZDIGJAPQKADGADGLBCEFHM
      NO $.
  $}

  $( Restricted specialization, with two quantifiers.  (Contributed by NM,
     11-Feb-1997.) $)
  rsp2 $p |- ( A. x e. A A. y e. B ph -> ( ( x e. A /\ y e. B ) -> ph ) ) $=
    ( wral cv wcel wi rsp syl6 impd ) ACEFZBDFZBGDHZCGEHZANOMPAIMBDJACEJKL $.

  ${
    r2allem.1 $e |- ( A. y ( x e. A -> ( y e. B -> ph ) )
                      <-> ( x e. A -> A. y ( y e. B -> ph ) ) ) $.
    $( Lemma factoring out common proof steps of ~ r2alf and ~ r2al .
       Introduced to reduce dependencies on axioms.  (Contributed by Wolf
       Lammen, 9-Jan-2020.) $)
    r2allem $p |- ( A. x e. A A. y e. B ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> ph ) ) $=
      ( wral cv wcel wi wal wa df-ral impexp albii imbi2i 3bitr4i bitr4i ) ACEG
      ZBDGBHDIZSJZBKTCHEIZLAJZCKZBKSBDMUDUABTUBAJZJZCKTUECKZJUDUAFUCUFCTUBANOSU
      GTACEMPQOR $.
  $}

  ${
    $d x y $.
    r2alf.1 $e |- F/_ y A $.
    $( Double restricted universal quantification.  (Contributed by Mario
       Carneiro, 14-Oct-2016.)  Use ~ r2allem .  (Revised by Wolf Lammen,
       9-Jan-2020.) $)
    r2alf $p |- ( A. x e. A A. y e. B ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> ph ) ) $=
      ( cv wcel wi nfcri 19.21 r2allem ) ABCDEBGDHCGEHAICCBDFJKL $.

    $( Obsolete proof of ~ r2alf as of 9-Jan-2020.  (Contributed by Mario
       Carneiro, 14-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r2alfOLD $p |- ( A. x e. A A. y e. B ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> ph ) ) $=
      ( wral cv wi wal wa df-ral nfcri 19.21 impexp albii imbi2i 3bitr4i bitr4i
      wcel ) ACEGZBDGBHDTZUAIZBJUBCHETZKAIZCJZBJUABDLUFUCBUBUDAIZIZCJUBUGCJZIUF
      UCUBUGCCBDFMNUEUHCUBUDAOPUAUIUBACELQRPS $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Double restricted universal quantification.  (Contributed by NM,
       19-Nov-1995.)  Reduce dependencies on axioms.  (Revised by Wolf Lammen,
       9-Jan-2020.) $)
    r2al $p |- ( A. x e. A A. y e. B ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> ph ) ) $=
      ( cv wcel wi 19.21v r2allem ) ABCDEBFDGCFEGAHCIJ $.

    $( Obsolete proof of ~ r2al as of 9-Jan-2020.  (Contributed by NM,
       19-Nov-1995.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r2alOLD $p |- ( A. x e. A A. y e. B ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> ph ) ) $=
      ( nfcv r2alf ) ABCDECDFG $.
  $}

  ${
    $d x y z $.  $d y z A $.  $d z B $.
    $( Triple restricted universal quantification.  (Contributed by NM,
       19-Nov-1995.)  (Proof shortened by Wolf Lammen, 30-Dec-2019.) $)
    r3al $p |- ( A. x e. A A. y e. B A. z e. C ph <->
               A. x A. y A. z ( ( x e. A /\ y e. B /\ z e. C ) -> ph ) ) $=
      ( wral cv wcel wa wi wal w3a r2al 19.21v df-3an imbi1i impexp bitri albii
      df-ral imbi2i 3bitr4ri 2albii ) ADGHZCFHBEHBIEJZCIFJZKZUFLZCMBMUGUHDIGJZN
      ZALZDMZCMBMUFBCEFOUJUNBCUIUKALZLZDMUIUODMZLUNUJUIUODPUMUPDUMUIUKKZALUPULU
      RAUGUHUKQRUIUKASTUAUFUQUIADGUBUCUDUET $.
  $}

  $( ` x ` is not free in ` A. x e. A ph ` .  (Contributed by NM,
     18-Oct-1996.)  (Revised by Mario Carneiro, 7-Oct-2016.) $)
  nfra1 $p |- F/ x A. x e. A ph $=
    ( wral cv wcel wi wal df-ral nfa1 nfxfr ) ABCDBECFAGZBHBABCILBJK $.

  $( ` x ` is not free in ` A. x e. A ph ` .  (Contributed by NM,
     18-Oct-1996.)  (Proof shortened by Wolf Lammen, 7-Dec-2019.) $)
  hbra1 $p |- ( A. x e. A ph -> A. x A. x e. A ph ) $=
    ( wral nfra1 nfri ) ABCDBABCEF $.

  $( Obsolete proof of ~ hbra1 as of 7-Dec-2019.  (Contributed by NM,
     18-Oct-1996.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  hbra1OLD $p |- ( A. x e. A ph -> A. x A. x e. A ph ) $=
    ( wral cv wcel wi wal df-ral hba1 hbxfrbi ) ABCDBECFAGZBHBABCILBJK $.

  ${
    hbral.1 $e |- ( y e. A -> A. x y e. A ) $.
    hbral.2 $e |- ( ph -> A. x ph ) $.
    $( Bound-variable hypothesis builder for restricted quantification.
       (Contributed by NM, 1-Sep-1999.)  (Revised by David Abernethy,
       13-Dec-2009.) $)
    hbral $p |- ( A. y e. A ph -> A. x A. y e. A ph ) $=
      ( wral cv wcel wi wal df-ral hbim hbal hbxfrbi ) ACDGCHDIZAJZCKBACDLQBCPA
      BEFMNO $.
  $}

  ${
    nfrald.1 $e |- F/ y ph $.
    nfrald.2 $e |- ( ph -> F/_ x A ) $.
    nfrald.3 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfral .  (Contributed by NM, 15-Feb-2013.)
       (Revised by Mario Carneiro, 7-Oct-2016.) $)
    nfrald $p |- ( ph -> F/ x A. y e. A ps ) $=
      ( wral cv wcel wi wal df-ral weq wn wa wnfc nfcvf adantr adantl nfeld wnf
      nfimd nfald2 nfxfrd ) BDEIDJZEKZBLZDMACBDENAUICDFACDOCMPZQZUHBCUKCUGEUJCU
      GRACDSUAACERUJGTUBABCUCUJHTUDUEUF $.
  $}

  ${
    nfral.1 $e |- F/_ x A $.
    nfral.2 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for restricted quantification.
       (Contributed by NM, 1-Sep-1999.)  (Revised by Mario Carneiro,
       7-Oct-2016.) $)
    nfral $p |- F/ x A. y e. A ph $=
      ( wral wnf wtru nftru wnfc a1i nfrald trud ) ACDGBHIABCDCJBDKIELABHIFLMN
      $.
  $}

  ${
    $d A y $.
    $( Similar to Lemma 24 of [Monk2] p. 114, except the quantification of the
       antecedent is restricted.  Derived automatically from ~ hbra2VD .
       Contributed by Alan Sare 31-Dec-2011.  (Contributed by NM,
       31-Dec-2011.) $)
    nfra2 $p |- F/ y A. x e. A A. y e. B ph $=
      ( wral nfcv nfra1 nfral ) ACEFCBDCDGACEHI $.
  $}

  ${
    ral2imi.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference quantifying antecedent, nested antecedent, and consequent,
       with a strong hypothesis.  (Contributed by NM, 19-Dec-2006.)  Allow
       shortening of ~ ralim .  (Revised by Wolf Lammen, 1-Dec-2019.) $)
    ral2imi $p |- ( A. x e. A ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( wral cv wcel wi wal df-ral imim3i al2imi 3imtr4g sylbi ) ADEGDHEIZAJZDK
      ZBDEGZCDEGZJADELSQBJZDKQCJZDKTUARUBUCDABCQFMNBDELCDELOP $.
  $}

  $( Distribution of restricted quantification over implication.  (Contributed
     by NM, 9-Feb-1997.)  (Proof shortened by Wolf Lammen, 1-Dec-2019.) $)
  ralim $p |- ( A. x e. A ( ph -> ps ) ->
               ( A. x e. A ph -> A. x e. A ps ) ) $=
    ( wi id ral2imi ) ABEZABCDHFG $.

  ${
    ralimi2.1 $e |- ( ( x e. A -> ph ) -> ( x e. B -> ps ) ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 22-Feb-2004.) $)
    ralimi2 $p |- ( A. x e. A ph -> A. x e. B ps ) $=
      ( cv wcel wi wal wral alimi df-ral 3imtr4i ) CGZDHAIZCJOEHBIZCJACDKBCEKPQ
      CFLACDMBCEMN $.
  $}

  ${
    ralimia.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 19-Jul-1996.) $)
    ralimia $p |- ( A. x e. A ph -> A. x e. A ps ) $=
      ( cv wcel a2i ralimi2 ) ABCDDCFDGABEHI $.
  $}

  ${
    ralimiaa.1 $e |- ( ( x e. A /\ ph ) -> ps ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 4-Aug-2007.) $)
    ralimiaa $p |- ( A. x e. A ph -> A. x e. A ps ) $=
      ( cv wcel ex ralimia ) ABCDCFDGABEHI $.
  $}

  ${
    ralimi.1 $e |- ( ph -> ps ) $.
    $( Inference quantifying both antecedent and consequent, with strong
       hypothesis.  (Contributed by NM, 4-Mar-1997.) $)
    ralimi $p |- ( A. x e. A ph -> A. x e. A ps ) $=
      ( wi cv wcel a1i ralimia ) ABCDABFCGDHEIJ $.
  $}

  $( Obsolete proof of ~ ralim as of 1-Dec-2019.  (Contributed by NM,
     9-Feb-1997.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  ralimOLD $p |- ( A. x e. A ( ph -> ps ) ->
               ( A. x e. A ph -> A. x e. A ps ) ) $=
    ( wi wral cv wcel wal df-ral ax-2 al2imi sylbi 3imtr4g ) ABEZCDFZCGDHZAEZCI
    ZQBEZCIZACDFBCDFPQOEZCISUAEOCDJUBRTCQABKLMACDJBCDJN $.

  ${
    ral2imiOLD.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Obsolete proof of ~ ral2imi as of 1-Dec-2019.  (Contributed by NM,
       19-Dec-2006.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    ral2imiOLD $p |- ( A. x e. A ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( wral wi ralimi ralimOLD syl ) ADEGBCHZDEGBDEGCDEGHALDEFIBCDEJK $.
  $}

  ${
    hbralrimi.1 $e |- ( ph -> A. x ph ) $.
    hbralrimi.2 $e |- ( ph -> ( x e. A -> ps ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90 (restricted quantifier
       version).  This theorem contains the common proof steps for ~ ralrimi
       and ~ ralrimiv .  Its main advantage over these two is its minimal
       references to axioms.  The proof is extracted from NM's previous work.
       (Contributed by Wolf Lammen, 4-Dec-2019.) $)
    hbralrimi $p |- ( ph -> A. x e. A ps ) $=
      ( cv wcel wi wal wral alrimih df-ral sylibr ) ACGDHBIZCJBCDKAOCEFLBCDMN
      $.
  $}

  ${
    $( Restricted quantifier version of ~ 19.21t ; closed form of ~ r19.21 .
       (Contributed by NM, 1-Mar-2008.)  (Proof shortened by Wolf Lammen,
       2-Jan-2020.) $)
    r19.21t $p |- ( F/ x ph ->
             ( A. x e. A ( ph -> ps ) <-> ( ph -> A. x e. A ps ) ) ) $=
      ( wnf cv wcel wi wal wral 19.21t df-ral bi2.04 albii bitri imbi2i 3bitr4g
      ) ACEACFDGZBHZHZCIZASCIZHABHZCDJZABCDJZHASCKUDRUCHZCIUAUCCDLUFTCRABMNOUEU
      BABCDLPQ $.

    $( Obsolete proof of ~ 19.21t as of 2-Jan-2020.  (Contributed by NM,
       1-Mar-2008.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r19.21tOLD $p |- ( F/ x ph ->
             ( A. x e. A ( ph -> ps ) <-> ( ph -> A. x e. A ps ) ) ) $=
      ( wnf cv wcel wal wral bi2.04 albii 19.21t syl5bb df-ral imbi2i 3bitr4g
      wi ) ACEZCFDGZABQZQZCHZASBQZCHZQZTCDIABCDIZQUBAUCQZCHRUEUAUGCSABJKAUCCLMT
      CDNUFUDABCDNOP $.
  $}

  ${
    r19.21.1 $e |- F/ x ph $.
    $( Restricted quantifier version of ~ 19.21 .  (Contributed by Scott
       Fenton, 30-Mar-2011.) $)
    r19.21 $p |- ( A. x e. A ( ph -> ps ) <-> ( ph -> A. x e. A ps ) ) $=
      ( wnf wi wral wb r19.21t ax-mp ) ACFABGCDHABCDHGIEABCDJK $.
  $}

  ${
    ralrimi.1 $e |- F/ x ph $.
    ralrimi.2 $e |- ( ph -> ( x e. A -> ps ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 10-Oct-1999.)  Shortened after
       introduction of ~ hbralrimi .  (Revised by Wolf Lammen, 4-Dec-2019.) $)
    ralrimi $p |- ( ph -> A. x e. A ps ) $=
      ( nfri hbralrimi ) ABCDACEGFH $.

    $( Obsolete proof of ~ ralrimi as of 4-Dec-2019.  (Contributed by NM,
       10-Oct-1999.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ralrimiOLD $p |- ( ph -> A. x e. A ps ) $=
      ( cv wcel wi wal wral alrimi df-ral sylibr ) ACGDHBIZCJBCDKAOCEFLBCDMN $.
  $}

  ${
    ralimdaa.1 $e |- F/ x ph $.
    ralimdaa.2 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.20 of [Margaris] p. 90.  (Contributed by NM, 22-Sep-2003.)  (Proof
       shortened by Wolf Lammen, 29-Dec-2019.) $)
    ralimdaa $p |- ( ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( wi wral cv wcel ex ralrimi ralim syl ) ABCHZDEIBDEICDEIHAPDEFADJEKPGLMB
      CDENO $.

    $( Obsolete proof of ~ ralimdaa as of 4-Dec-2019.  (Contributed by NM,
       22-Sep-2003.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ralimdaaOLD $p |- ( ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( cv wcel wi wal wral ex a2d alimd df-ral 3imtr4g ) ADHEIZBJZDKRCJZDKBDEL
      CDELASTDFARBCARBCJGMNOBDEPCDEPQ $.
  $}

  ${
    ralrimd.1 $e |- F/ x ph $.
    ralrimd.2 $e |- F/ x ps $.
    ralrimd.3 $e |- ( ph -> ( ps -> ( x e. A -> ch ) ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 16-Feb-2004.) $)
    ralrimd $p |- ( ph -> ( ps -> A. x e. A ch ) ) $=
      ( cv wcel wi wal wral alrimd df-ral syl6ibr ) ABDIEJCKZDLCDEMABQDFGHNCDEO
      P $.
  $}

  ${
    $d x ph $.
    $( Restricted quantifier version of ~ 19.21v .  (Contributed by NM,
       15-Oct-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 2-Jan-2020.) $)
    r19.21v $p |- ( A. x e. A ( ph -> ps ) <-> ( ph -> A. x e. A ps ) ) $=
      ( cv wcel wi wal wral bi2.04 albii 19.21v bitri df-ral imbi2i 3bitr4i ) C
      EDFZABGZGZCHZAQBGZCHZGZRCDIABCDIZGTAUAGZCHUCSUECQABJKAUACLMRCDNUDUBABCDNO
      P $.

    $( Obsolete proof of ~ r19.21v as of 2-Jan-2020.  (Contributed by NM,
       15-Oct-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    r19.21vOLD $p |- ( A. x e. A ( ph -> ps ) <-> ( ph -> A. x e. A ps ) ) $=
      ( nfv r19.21 ) ABCDACEF $.
  $}

  ${
    $d x ph $.
    ralimdv2.1 $e |- ( ph -> ( ( x e. A -> ps ) -> ( x e. B -> ch ) ) ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 1-Feb-2005.) $)
    ralimdv2 $p |- ( ph -> ( A. x e. A ps -> A. x e. B ch ) ) $=
      ( cv wcel wi wal wral alimdv df-ral 3imtr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    $d x ph $.
    ralimdva.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.20 of [Margaris] p. 90.  (Contributed by NM, 22-May-1999.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 5-Dec-2019.) $)
    ralimdva $p |- ( ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( cv wcel wi ex a2d ralimdv2 ) ABCDEEADGEHZBCAMBCIFJKL $.

    $( Obsolete proof of ~ ralimdva as of 5-Dec-2019.  (Contributed by NM,
       22-May-1999.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ralimdvaOLD $p |- ( ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( nfv ralimdaa ) ABCDEADGFH $.
  $}

  ${
    $d x ph $.
    ralimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.20 of [Margaris] p. 90 ( ~ alim ).  (Contributed by NM,
       8-Oct-2003.) $)
    ralimdv $p |- ( ph -> ( A. x e. A ps -> A. x e. A ch ) ) $=
      ( wi cv wcel adantr ralimdva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    $d y A $.  $d x y ph $.
    ralimdvva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps -> ch ) ) $.
    $( Deduction doubly quantifying both antecedent and consequent, based on
       Theorem 19.20 of [Margaris] p. 90 ( ~ alim ).  (Contributed by AV,
       27-Nov-2019.) $)
    ralimdvva $p |- ( ph -> ( A. x e. A A. y e. B ps
                              -> A. x e. A A. y e. B ch ) ) $=
      ( wral cv wcel wa wi anassrs ralimdva ) ABEGICEGIDFADJFKZLBCEGAPEJGKBCMHN
      OO $.
  $}

  ${
    $d x ph $.
    ralrimiv.1 $e |- ( ph -> ( x e. A -> ps ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 22-Nov-1994.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 4-Dec-2019.) $)
    ralrimiv $p |- ( ph -> A. x e. A ps ) $=
      ( ax-5 hbralrimi ) ABCDACFEG $.

    $( Obsolete proof of ~ ralrimiv as of 4-Dec-2019.  (Contributed by NM,
       22-Nov-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ralrimivOLD $p |- ( ph -> A. x e. A ps ) $=
      ( nfv ralrimi ) ABCDACFEG $.
  $}

  ${
    $d x ph $.
    ralrimiva.1 $e |- ( ( ph /\ x e. A ) -> ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 2-Jan-2006.) $)
    ralrimiva $p |- ( ph -> A. x e. A ps ) $=
      ( cv wcel ex ralrimiv ) ABCDACFDGBEHI $.
  $}

  ${
    $d x ph $.
    ralrimivw.1 $e |- ( ph -> ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 18-Jun-2014.) $)
    ralrimivw $p |- ( ph -> A. x e. A ps ) $=
      ( cv wcel a1d ralrimiv ) ABCDABCFDGEHI $.
  $}

  ${
    $d x ph $.  $d x ps $.
    ralrimdv.1 $e |- ( ph -> ( ps -> ( x e. A -> ch ) ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 27-May-1998.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 28-Dec-2019.) $)
    ralrimdv $p |- ( ph -> ( ps -> A. x e. A ch ) ) $=
      ( wral wa cv wcel wi imp ralrimiv ex ) ABCDEGABHCDEABDIEJCKFLMN $.

    $( Obsolete proof of ~ ralrimdv as of 28-Dec-2019.  (Contributed by NM,
       27-May-1998.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ralrimdvOLD $p |- ( ph -> ( ps -> A. x e. A ch ) ) $=
      ( nfv ralrimd ) ABCDEADGBDGFH $.
  $}

  ${
    $d x ph $.  $d x ps $.
    ralrimdva.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 2-Feb-2008.)  (Proof shortened
       by Wolf Lammen, 28-Dec-2019.) $)
    ralrimdva $p |- ( ph -> ( ps -> A. x e. A ch ) ) $=
      ( cv wcel expimpd expcomd ralrimdv ) ABCDEADGEHZBCALBCFIJK $.

    $( Obsolete proof of ~ ralrimdva as of 28-Dec-2019.  (Contributed by NM,
       2-Feb-2008.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ralrimdvaOLD $p |- ( ph -> ( ps -> A. x e. A ch ) ) $=
      ( cv wcel wi ex com23 ralrimdv ) ABCDEADGEHZBCAMBCIFJKL $.
  $}

  ${
    $d x y ph $.  $d y A $.
    ralrimivv.1 $e |- ( ph -> ( ( x e. A /\ y e. B ) -> ps ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with double quantification.)  (Contributed by NM,
       24-Jul-2004.) $)
    ralrimivv $p |- ( ph -> A. x e. A A. y e. B ps ) $=
      ( wral cv wcel expd ralrimdv ralrimiv ) ABDFHCEACIEJZBDFANDIFJBGKLM $.
  $}

  ${
    $d ph x y $.  $d A y $.
    ralrimivva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with double quantification.)  (Contributed by Jeff
       Madsen, 19-Jun-2011.) $)
    ralrimivva $p |- ( ph -> A. x e. A A. y e. B ps ) $=
      ( cv wcel wa ex ralrimivv ) ABCDEFACHEIDHFIJBGKL $.
  $}

  ${
    $d ph x y z $.  $d A y z $.  $d B z $.
    ralrimivvva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B /\ z e. C ) ) -> ps ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with triple quantification.)  (Contributed by Mario
       Carneiro, 9-Jul-2014.) $)
    ralrimivvva $p |- ( ph -> A. x e. A A. y e. B A. z e. C ps ) $=
      ( wral cv wcel wa 3anassrs ralrimiva ) ABEHJZDGJCFACKFLZMZPDGRDKGLZMBEHAQ
      SEKHLBINOOO $.
  $}

  ${
    $d x y ph $.  $d x y ps $.  $d y A $.
    ralrimdvv.1 $e |- ( ph -> ( ps -> ( ( x e. A /\ y e. B ) -> ch ) ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with double quantification.)  (Contributed by NM,
       1-Jun-2005.) $)
    ralrimdvv $p |- ( ph -> ( ps -> A. x e. A A. y e. B ch ) ) $=
      ( wral wa cv wcel wi imp ralrimivv ex ) ABCEGIDFIABJCDEFGABDKFLEKGLJCMHNO
      P $.
  $}

  ${
    $d x y ph $.  $d x y ps $.  $d y A $.
    ralrimdvva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.21 of [Margaris] p. 90.  (Restricted
       quantifier version with double quantification.)  (Contributed by NM,
       2-Feb-2008.) $)
    ralrimdvva $p |- ( ph -> ( ps -> A. x e. A A. y e. B ch ) ) $=
      ( cv wcel wa wi ex com23 ralrimdvv ) ABCDEFGADIFJEIGJKZBCAPBCLHMNO $.
  $}

  ${
    $d x y $.  $d y A $.
    rgen2.1 $e |- ( ( x e. A /\ y e. B ) -> ph ) $.
    $( Generalization rule for restricted quantification, with two
       quantifiers.  (Contributed by NM, 30-May-1999.) $)
    rgen2 $p |- A. x e. A A. y e. B ph $=
      ( wral cv wcel ralrimiva rgen ) ACEGBDBHDIACEFJK $.
  $}

  ${
    $d y z A $.  $d z B $.  $d x y z $.
    rgen3.1 $e |- ( ( x e. A /\ y e. B /\ z e. C ) -> ph ) $.
    $( Generalization rule for restricted quantification, with three
       quantifiers.  (Contributed by NM, 12-Jan-2008.) $)
    rgen3 $p |- A. x e. A A. y e. B A. z e. C ph $=
      ( wral cv wcel wa 3expa ralrimiva rgen2 ) ADGIBCEFBJEKZCJFKZLADGPQDJGKAHM
      NO $.
  $}

  ${
    $d y z A $.  $d x z $.
    rgen2a.1 $e |- ( ( x e. A /\ y e. A ) -> ph ) $.
    $( Generalization rule for restricted quantification.  Note that ` x ` and
       ` y ` needn't be distinct (and illustrates the use of ~ dvelim ).
       (Contributed by NM, 23-Nov-1994.)  (Proof shortened by Andrew Salmon,
       25-May-2011.)  (Proof shortened by Wolf Lammen, 1-Jan-2020.)
       (Proof modification is discouraged.) $)
    rgen2a $p |- A. x e. A A. y e. A ph $=
      ( vz wral cv wcel wi wal weq wn eleq1 dvelimv alimi syl6com biimpd syli
      ex pm2.61d2 df-ral sylibr rgen ) ACDGZBDBHZDIZCHZDIZAJZCKZUEUGCBLZCKZUKUM
      MUGUGCKUKFHZDIUGCBFUNUFDNOUGUJCUGUIAETZPQULUJCUIULUGAULUIUGUHUFDNRUOSPUAA
      CDUBUCUD $.

    $( Obsolete proof of rgen2a as of 1-Jan-2020.  (Contributed by NM,
       23-Nov-1994.)  (Proof shortened by Andrew Salmon, 25-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rgen2aOLD $p |- A. x e. A A. y e. A ph $=
      ( vz wral cv wcel wi wal weq eleq1 ex syl6bi pm2.43d alimi a1d wn dvelimv
      syl6 pm2.61i df-ral sylibr rgen ) ACDGZBDBHZDIZCHZDIZAJZCKZUFCBLZCKZUHULJ
      UNULUHUMUKCUMUJAUMUJUHUKUIUGDMUHUJAENZOPQRUNSUHUHCKULFHZDIUHCBFUPUGDMTUHU
      KCUOQUAUBACDUCUDUE $.
  $}

  ${
    ralbii2.1 $e |- ( ( x e. A -> ph ) <-> ( x e. B -> ps ) ) $.
    $( Inference adding different restricted universal quantifiers to each side
       of an equivalence.  (Contributed by NM, 15-Aug-2005.) $)
    ralbii2 $p |- ( A. x e. A ph <-> A. x e. B ps ) $=
      ( cv wcel wi wal wral albii df-ral 3bitr4i ) CGZDHAIZCJOEHBIZCJACDKBCEKPQ
      CFLACDMBCEMN $.
  $}

  ${
    ralbiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Inference adding restricted universal quantifier to both sides of an
       equivalence.  (Contributed by NM, 26-Nov-2000.) $)
    ralbiia $p |- ( A. x e. A ph <-> A. x e. A ps ) $=
      ( cv wcel pm5.74i ralbii2 ) ABCDDCFDGABEHI $.
  $}

  ${
    ralbii.1 $e |- ( ph <-> ps ) $.
    $( Inference adding restricted universal quantifier to both sides of an
       equivalence.  (Contributed by NM, 23-Nov-1994.)  (Revised by Mario
       Carneiro, 17-Oct-2016.)  (Proof shortened by Wolf Lammen,
       4-Dec-2019.) $)
    ralbii $p |- ( A. x e. A ph <-> A. x e. A ps ) $=
      ( cv wcel imbi2i ralbii2 ) ABCDDABCFDGEHI $.

    $( Inference adding two restricted universal quantifiers to both sides of
       an equivalence.  (Contributed by NM, 1-Aug-2004.) $)
    2ralbii $p |- ( A. x e. A A. y e. B ph <-> A. x e. A A. y e. B ps ) $=
      ( wral ralbii ) ADFHBDFHCEABDFGII $.
  $}

  ${
    ralbida.1 $e |- F/ x ph $.
    ralbida.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       rule).  (Contributed by NM, 6-Oct-2003.) $)
    ralbida $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( cv wcel wi wal wral pm5.74da albid df-ral 3bitr4g ) ADHEIZBJZDKQCJZDKBD
      ELCDELARSDFAQBCGMNBDEOCDEOP $.
  $}

  ${
    ralbid.1 $e |- F/ x ph $.
    ralbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       rule).  (Contributed by NM, 27-Jun-1998.) $)
    ralbid $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( wb cv wcel adantr ralbida ) ABCDEFABCHDIEJGKL $.
  $}

  ${
    $d x ph $.
    ralbidv2.1 $e |- ( ph -> ( ( x e. A -> ps ) <-> ( x e. B -> ch ) ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       rule).  (Contributed by NM, 6-Apr-1997.) $)
    ralbidv2 $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $=
      ( cv wcel wi wal wral albidv df-ral 3bitr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    $d x ph $.
    ralbidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       rule).  (Contributed by NM, 4-Mar-1997.)  Reduce dependencies on
       axioms.  (Revised by Wolf Lammen, 29-Dec-2019.) $)
    ralbidva $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( cv wcel pm5.74da ralbidv2 ) ABCDEEADGEHBCFIJ $.

    $( Obsolete proof of ~ ralbidva as of 5-Dec-2019.  (Contributed by NM,
       4-Mar-1997.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ralbidvaOLD $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( nfv ralbida ) ABCDEADGFH $.
  $}

  ${
    $d x y z $.  $d y z A $.  $d z B $.
    $( Obsolete proof of ~ r3al as of 30-Dec-2019.  (Contributed by NM,
       19-Nov-1995.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r3alOLD $p |- ( A. x e. A A. y e. B A. z e. C ph <->
               A. x A. y A. z ( ( x e. A /\ y e. B /\ z e. C ) -> ph ) ) $=
      ( cv wcel wa wi wal wral w3a df-ral r2al ralbii bitri albii 19.21v 3anass
      imbi1i impexp 3bitr4i ) CHFIZDHGIZJZAKZDLZCLZBEMBHEIZUJKZBLADGMCFMZBEMUKU
      EUFNZAKZDLZCLZBLUJBEOUMUJBEACDFGPQUQULBUQUKUIKZCLULUPURCUPUKUHKZDLURUOUSD
      UOUKUGJZAKUSUNUTAUKUEUFUAUBUKUGAUCRSUKUHDTRSUKUICTRSUD $.
  $}

  ${
    $d x ph $.
    ralbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       rule).  (Contributed by NM, 20-Nov-1994.)  Reduce dependencies on
       axioms.  (Revised by Wolf Lammen, 5-Dec-2019.) $)
    ralbidv $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( wb cv wcel adantr ralbidva ) ABCDEABCGDHEIFJK $.

    $( Obsolete proof of ~ ralbidv as of 5-Dec-2019.  (Contributed by NM,
       20-Nov-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ralbidvOLD $p |- ( ph -> ( A. x e. A ps <-> A. x e. A ch ) ) $=
      ( nfv ralbid ) ABCDEADGFH $.
  $}

  ${
    $d x y $.  $d y A $.
    2ralbida.1 $e |- F/ x ph $.
    2ralbida.2 $e |- F/ y ph $.
    2ralbida.3 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifier (deduction
       rule).  (Contributed by NM, 24-Feb-2004.) $)
    2ralbida $p |- ( ph ->
                     ( A. x e. A A. y e. B ps <-> A. x e. A A. y e. B ch ) ) $=
      ( wral cv wcel wa nfv nfan wb anassrs ralbida ) ABEGKCEGKDFHADLFMZNBCEGAT
      EITEOPATELGMBCQJRSS $.
  $}

  ${
    $d x y ph $.  $d y A $.
    2ralbidva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifiers (deduction
       rule).  (Contributed by NM, 4-Mar-1997.)  Reduce dependencies on
       axioms.  (Revised by Wolf Lammen, 9-Dec-2019.) $)
    2ralbidva $p |- ( ph ->
                     ( A. x e. A A. y e. B ps <-> A. x e. A A. y e. B ch ) ) $=
      ( wral cv wcel wa wb anassrs ralbidva ) ABEGICEGIDFADJFKZLBCEGAPEJGKBCMHN
      OO $.

    $( Obsolete proof of ~ 2ralbidva as of 9-Dec-2019.  (Contributed by NM,
       4-Mar-1997.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    2ralbidvaOLD $p |- ( ph ->
                     ( A. x e. A A. y e. B ps <-> A. x e. A A. y e. B ch ) ) $=
      ( nfv 2ralbida ) ABCDEFGADIAEIHJ $.
  $}

  ${
    $d x ph $.  $d y ph $.
    2ralbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted universal quantifiers (deduction
       rule).  (Contributed by NM, 28-Jan-2006.)  (Revised by Szymon
       Jaroszewicz, 16-Mar-2007.) $)
    2ralbidv $p |- ( ph ->
                     ( A. x e. A A. y e. B ps <-> A. x e. A A. y e. B ch ) ) $=
      ( wral ralbidv ) ABEGICEGIDFABCEGHJJ $.
  $}

  ${
    raleqbii.1 $e |- A = B $.
    raleqbii.2 $e |- ( ps <-> ch ) $.
    $( Equality deduction for restricted universal quantifier, changing both
       formula and quantifier domain.  Inference form.  (Contributed by David
       Moews, 1-May-2017.) $)
    raleqbii $p |- ( A. x e. A ps <-> A. x e. B ch ) $=
      ( cv wcel eleq2i imbi12i ralbii2 ) ABCDECHZDIMEIABDEMFJGKL $.
  $}

  $( Relationship between restricted universal and existential quantifiers.
     (Contributed by NM, 21-Jan-1997.) $)
  ralnex $p |- ( A. x e. A -. ph <-> -. E. x e. A ph ) $=
    ( wn wral cv wcel wi wal wrex df-ral wa wex alinexa df-rex xchbinxr bitri )
    ADZBCEBFCGZRHBIZABCJZDRBCKTSALBMUASABNABCOPQ $.

  $( Relationship between restricted universal and existential quantifiers.
     (Contributed by NM, 21-Jan-1997.)  Allow shortening of ~ rexnal .
     (Revised by Wolf Lammen, 9-Dec-2019.) $)
  dfral2 $p |- ( A. x e. A ph <-> -. E. x e. A -. ph ) $=
    ( wral wn wrex notnot ralbii ralnex bitri ) ABCDAEZEZBCDKBCFEALBCAGHKBCIJ
    $.

  $( Relationship between restricted universal and existential quantifiers.
     (Contributed by NM, 21-Jan-1997.)  (Proof shortened by Wolf Lammen,
     9-Dec-2019.) $)
  rexnal $p |- ( E. x e. A -. ph <-> -. A. x e. A ph ) $=
    ( wral wn wrex dfral2 con2bii ) ABCDAEBCFABCGH $.

  $( Obsolete proof of ~ rexnal as of 26-Nov-2019.  (Contributed by NM,
     21-Jan-1997.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  rexnalOLD $p |- ( E. x e. A -. ph <-> -. A. x e. A ph ) $=
    ( wn wrex cv wcel wa wex wral df-rex wi wal exanali df-ral xchbinxr bitri )
    ADZBCEBFCGZRHBIZABCJZDRBCKTSALBMUASABNABCOPQ $.

  $( Obsolete proof of ~ dfral2 as of 9-Dec-2019.  (Contributed by NM,
     21-Jan-1997.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  dfral2OLD $p |- ( A. x e. A ph <-> -. E. x e. A -. ph ) $=
    ( wn wrex wral rexnal con2bii ) ADBCEABCFABCGH $.

  $( Relationship between restricted universal and existential quantifiers.
     (Contributed by NM, 21-Jan-1997.)  (Proof shortened by Wolf Lammen,
     26-Nov-2019.) $)
  dfrex2 $p |- ( E. x e. A ph <-> -. A. x e. A -. ph ) $=
    ( wn wral wrex ralnex con2bii ) ADBCEABCFABCGH $.

  $( A transformation of restricted quantifiers and logical connectives.
     (Contributed by NM, 4-Sep-2005.) $)
  ralinexa $p |- ( A. x e. A ( ph -> -. ps ) <-> -. E. x e. A ( ph /\ ps ) ) $=
    ( wn wi wral wa wrex imnan ralbii ralnex bitri ) ABEFZCDGABHZEZCDGOCDIENPCD
    ABJKOCDLM $.

  $( A transformation of restricted quantifiers and logical connectives.
     (Contributed by NM, 4-Sep-2005.)  (Proof shortened by Wolf Lammen,
     27-Dec-2019.) $)
  rexanali $p |- ( E. x e. A ( ph /\ -. ps ) <-> -. A. x e. A ( ph -> ps ) ) $=
    ( wn wa wrex wral wi dfrex2 iman ralbii xchbinxr ) ABEFZCDGNEZCDHABIZCDHNCD
    JPOCDABKLM $.

  $( Negation of a complex predicate calculus formula.  (Contributed by FL,
     31-Jul-2009.) $)
  nrexralim $p |- ( -. E. x e. A A. y e. B ( ph -> ps )
     <-> A. x e. A E. y e. B ( ph /\ -. ps ) ) $=
    ( wn wa wrex wral wi rexanali ralbii ralnex bitr2i ) ABGHDFIZCEJABKDFJZGZCE
    JQCEIGPRCEABDFLMQCENO $.

  ${
    nrex.1 $e |- ( x e. A -> -. ps ) $.
    $( Inference adding restricted existential quantifier to negated wff.
       (Contributed by NM, 16-Oct-2003.) $)
    nrex $p |- -. E. x e. A ps $=
      ( wn wral wrex rgen ralnex mpbi ) AEZBCFABCGEKBCDHABCIJ $.
  $}

  ${
    $d x ph $.
    nrexdv.1 $e |- ( ( ph /\ x e. A ) -> -. ps ) $.
    $( Deduction adding restricted existential quantifier to negated wff.
       (Contributed by NM, 16-Oct-2003.)  (Proof shortened by Wolf Lammen,
       5-Jan-2020.) $)
    nrexdv $p |- ( ph -> -. E. x e. A ps ) $=
      ( wn wral wrex ralrimiva ralnex sylib ) ABFZCDGBCDHFALCDEIBCDJK $.
  $}

  $( Restricted existence implies existence.  (Contributed by NM,
     11-Nov-1995.) $)
  rexex $p |- ( E. x e. A ph -> E. x ph ) $=
    ( wrex cv wcel wa wex df-rex exsimpr sylbi ) ABCDBECFZAGBHABHABCILABJK $.

  $( Restricted specialization.  (Contributed by NM, 12-Oct-1999.) $)
  rspe $p |- ( ( x e. A /\ ph ) -> E. x e. A ph ) $=
    ( cv wcel wa wex wrex 19.8a df-rex sylibr ) BDCEAFZLBGABCHLBIABCJK $.

  $( Restricted specialization.  (Contributed by FL, 4-Jun-2012.)  (Proof
     shortened by Wolf Lammen, 7-Jan-2020.) $)
  rsp2e $p |- ( ( x e. A /\ y e. B /\ ph ) -> E. x e. A E. y e. B ph ) $=
    ( cv wcel wrex wa rspe sylan2 3impb ) BFDGZCFEGZAACEHZBDHZNAIMOPACEJOBDJKL
    $.

  $( Obsolete proof of ~ rsp2e as of 7-Jan-2020.  (Contributed by FL,
     4-Jun-2012.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  rsp2eOLD $p |- ( ( x e. A /\ y e. B /\ ph ) -> E. x e. A E. y e. B ph ) $=
    ( cv wcel w3a wrex wa wex simp1 rspe 3adant1 19.8a syl2anc df-rex sylibr )
    BFDGZCFEGZAHZSACEIZJZBKZUBBDIUASUBUDSTALTAUBSACEMNUCBOPUBBDQR $.

  $( ` x ` is not free in ` E. x e. A ph ` .  (Contributed by NM,
     19-Mar-1997.)  (Revised by Mario Carneiro, 7-Oct-2016.) $)
  nfre1 $p |- F/ x E. x e. A ph $=
    ( wrex cv wcel wa wex df-rex nfe1 nfxfr ) ABCDBECFAGZBHBABCILBJK $.

  ${
    nfrexd.1 $e |- F/ y ph $.
    nfrexd.2 $e |- ( ph -> F/_ x A ) $.
    nfrexd.3 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfrex .  (Contributed by Mario Carneiro,
       14-Oct-2016.) $)
    nfrexd $p |- ( ph -> F/ x E. y e. A ps ) $=
      ( wrex wn wral dfrex2 nfnd nfrald nfxfrd ) BDEIBJZDEKZJACBDELAQCAPCDEFGAB
      CHMNMO $.
  $}

  ${
    nfrex.1 $e |- F/_ x A $.
    nfrex.2 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for restricted quantification.
       (Contributed by NM, 1-Sep-1999.)  (Revised by Mario Carneiro,
       7-Oct-2016.)  (Proof shortened by Wolf Lammen, 30-Dec-2019.) $)
    nfrex $p |- F/ x E. y e. A ph $=
      ( wrex wnf wtru nftru wnfc a1i nfrexd trud ) ACDGBHIABCDCJBDKIELABHIFLMN
      $.

    $( Obsolete proof of ~ nfrex as of 30-Dec-2019.  (Contributed by NM,
       1-Sep-1999.)  (Revised by Mario Carneiro, 7-Oct-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    nfrexOLD $p |- F/ x E. y e. A ph $=
      ( wrex wn wral dfrex2 nfn nfral nfxfr ) ACDGAHZCDIZHBACDJOBNBCDEABFKLKM
      $.
  $}

  $( Theorem 19.22 of [Margaris] p. 90.  (Restricted quantifier version.)
     (Contributed by NM, 22-Nov-1994.)  (Proof shortened by Andrew Salmon,
     30-May-2011.) $)
  rexim $p |- ( A. x e. A ( ph -> ps ) ->
               ( E. x e. A ph -> E. x e. A ps ) ) $=
    ( wi wral wn wrex con3 ral2imi con3d dfrex2 3imtr4g ) ABEZCDFZAGZCDFZGBGZCD
    FZGACDHBCDHOSQNRPCDABIJKACDLBCDLM $.

  ${
    reximia.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 10-Feb-1997.) $)
    reximia $p |- ( E. x e. A ph -> E. x e. A ps ) $=
      ( wi wrex rexim mprg ) ABFACDGBCDGFCDABCDHEI $.
  $}

  ${
    reximi2.1 $e |- ( ( x e. A /\ ph ) -> ( x e. B /\ ps ) ) $.
    $( Inference quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by NM, 8-Nov-2004.) $)
    reximi2 $p |- ( E. x e. A ph -> E. x e. B ps ) $=
      ( cv wcel wa wex wrex eximi df-rex 3imtr4i ) CGZDHAIZCJOEHBIZCJACDKBCEKPQ
      CFLACDMBCEMN $.
  $}

  ${
    reximi.1 $e |- ( ph -> ps ) $.
    $( Inference quantifying both antecedent and consequent.  (Contributed by
       NM, 18-Oct-1996.) $)
    reximi $p |- ( E. x e. A ph -> E. x e. A ps ) $=
      ( wi cv wcel a1i reximia ) ABCDABFCGDHEIJ $.
  $}

  ${
    reximdai.1 $e |- F/ x ph $.
    reximdai.2 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Deduction from Theorem 19.22 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 31-Aug-1999.) $)
    reximdai $p |- ( ph -> ( E. x e. A ps -> E. x e. A ch ) ) $=
      ( wi wral wrex ralrimi rexim syl ) ABCHZDEIBDEJCDEJHANDEFGKBCDELM $.
  $}

  ${
    reximd2a.1 $e |- F/ x ph $.
    reximd2a.2 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> x e. B ) $.
    reximd2a.3 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    reximd2a.4 $e |- ( ph -> E. x e. A ps ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by Thierry Arnoux,
       27-Jan-2020.) $)
    reximd2a $p |- ( ph -> E. x e. B ch ) $=
      ( wrex cv wcel wa wex jca expl eximd df-rex 3imtr4g mpd ) ABDEKZCDFKZJADL
      ZEMZBNZDOUDFMZCNZDOUBUCAUFUHDGAUEBUHAUENBNUGCHIPQRBDESCDFSTUA $.
  $}

  ${
    $d x ph $.
    reximdv2.1 $e |- ( ph -> ( ( x e. A /\ ps ) -> ( x e. B /\ ch ) ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by NM, 17-Sep-2003.) $)
    reximdv2 $p |- ( ph -> ( E. x e. A ps -> E. x e. B ch ) ) $=
      ( cv wcel wa wex wrex eximdv df-rex 3imtr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    $d x ph $.
    reximdvai.1 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by NM, 14-Nov-2002.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 8-Jan-2020.) $)
    reximdvai $p |- ( ph -> ( E. x e. A ps -> E. x e. A ch ) ) $=
      ( wi wral wrex ralrimiv rexim syl ) ABCGZDEHBDEICDEIGAMDEFJBCDEKL $.

    $( Obsolete proof of ~ reximdvai as of 8-Jan-2020.  (Contributed by NM,
       14-Nov-2002.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    reximdvaiOLD $p |- ( ph -> ( E. x e. A ps -> E. x e. A ch ) ) $=
      ( nfv reximdai ) ABCDEADGFH $.
  $}

  ${
    $d x ph $.
    reximdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction from Theorem 19.22 of [Margaris] p. 90.  (Restricted
       quantifier version with strong hypothesis.)  (Contributed by NM,
       24-Jun-1998.) $)
    reximdv $p |- ( ph -> ( E. x e. A ps -> E. x e. A ch ) ) $=
      ( wi cv wcel a1d reximdvai ) ABCDEABCGDHEIFJK $.
  $}

  ${
    $d x ph $.
    reximdva.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Deduction quantifying both antecedent and consequent, based on Theorem
       19.22 of [Margaris] p. 90.  (Contributed by NM, 22-May-1999.) $)
    reximdva $p |- ( ph -> ( E. x e. A ps -> E. x e. A ch ) ) $=
      ( cv wcel wi ex reximdvai ) ABCDEADGEHBCIFJK $.
  $}

  ${
    $d x ph $.
    reximddva.1 $e |- ( ( ph /\ ( x e. A /\ ps ) ) -> ch ) $.
    reximddva.2 $e |- ( ph -> E. x e. A ps ) $.
    $( Deduction from Theorem 19.22 of [Margaris] p. 90.  (Contributed by
       Thierry Arnoux, 7-Dec-2016.) $)
    reximddv $p |- ( ph -> E. x e. A ch ) $=
      ( wrex cv wcel expr reximdva mpd ) ABDEHCDEHGABCDEADIEJBCFKLM $.
  $}

  ${
    $d A y $.  $d ph x y $.
    reximddv2.1 $e |- ( ( ( ( ph /\ x e. A ) /\ y e. B ) /\ ps ) -> ch ) $.
    reximddv2.2 $e |- ( ph -> E. x e. A E. y e. B ps ) $.
    $( Double deduction from Theorem 19.22 of [Margaris] p. 90.  (Contributed
       by Thierry Arnoux, 15-Dec-2019.) $)
    reximddv2 $p |- ( ph -> E. x e. A E. y e. B ch ) $=
      ( wrex cv wcel wa ex reximdva impr reximddv ) ABEGJZCEGJZDFADKFLZRSATMZBC
      EGUAEKGLMBCHNOPIQ $.
  $}

  $( Closed theorem form of ~ r19.23 .  (Contributed by NM, 4-Mar-2013.)
     (Revised by Mario Carneiro, 8-Oct-2016.) $)
  r19.23t $p |- ( F/ x ps ->
    ( A. x e. A ( ph -> ps ) <-> ( E. x e. A ph -> ps ) ) ) $=
    ( wnf cv wcel wa wal wex wral wrex 19.23t df-ral impexp albii bitr4i df-rex
    wi imbi1i 3bitr4g ) BCECFDGZAHZBSZCIZUCCJZBSABSZCDKZACDLZBSUCBCMUHUBUGSZCIU
    EUGCDNUDUJCUBABOPQUIUFBACDRTUA $.

  ${
    r19.23.1 $e |- F/ x ps $.
    $( Restricted quantifier version of ~ 19.23 .  See ~ r19.23v for a version
       requiring fewer axioms.  (Contributed by NM, 22-Oct-2010.)  (Proof
       shortened by Mario Carneiro, 8-Oct-2016.) $)
    r19.23 $p |- ( A. x e. A ( ph -> ps ) <-> ( E. x e. A ph -> ps ) ) $=
      ( wnf wi wral wrex wb r19.23t ax-mp ) BCFABGCDHACDIBGJEABCDKL $.
  $}

  ${
    $d x ps $.
    $( Restricted quantifier version of ~ 19.23v .  Version of ~ r19.23 with a
       dv condition.  (Contributed by NM, 31-Aug-1999.)  Reduce dependencies on
       axioms.  (Revised by Wolf Lammen, 14-Jan-2020.) $)
    r19.23v $p |- ( A. x e. A ( ph -> ps ) <-> ( E. x e. A ph -> ps ) ) $=
      ( wi wral wn wrex con34b ralbii r19.21v dfrex2 imbi1i con1b bitr2i 3bitri
      ) ABEZCDFBGZAGZEZCDFRSCDFZEZACDHZBEZQTCDABIJRSCDKUDUAGZBEUBUCUEBACDLMUABN
      OP $.

    $( Obsolete proof of ~ r19.23v as of 12-Jan-2020.  (Contributed by NM,
       31-Aug-1999.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r19.23vOLD $p |- ( A. x e. A ( ph -> ps ) <-> ( E. x e. A ph -> ps ) ) $=
      ( nfv r19.23 ) ABCDBCEF $.
  $}

  ${
    rexlimi.1 $e |- F/ x ps $.
    rexlimi.2 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Restricted quantifier version of ~ exlimi .  (Contributed by NM,
       30-Nov-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
    rexlimi $p |- ( E. x e. A ph -> ps ) $=
      ( wi wral wrex rgen r19.23 mpbi ) ABGZCDHACDIBGMCDFJABCDEKL $.
  $}

  ${
    rexlimd2.1 $e |- F/ x ph $.
    rexlimd2.2 $e |- ( ph -> F/ x ch ) $.
    rexlimd2.3 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Version of ~ rexlimd with deduction version of second hypothesis.
       (Contributed by NM, 21-Jul-2013.)  (Revised by Mario Carneiro,
       8-Oct-2016.) $)
    rexlimd2 $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( wi wral wrex ralrimi wnf wb r19.23t syl mpbid ) ABCIZDEJZBDEKCIZARDEFHL
      ACDMSTNGBCDEOPQ $.
  $}

  ${
    rexlimd.1 $e |- F/ x ph $.
    rexlimd.2 $e |- F/ x ch $.
    rexlimd.3 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Deduction form of ~ rexlimd .  (Contributed by NM, 27-May-1998.)  (Proof
       shortened by Andrew Salmon, 30-May-2011.)  (Proof shortened by Wolf
       Lammen, 14-Jan-2020.) $)
    rexlimd $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( wnf a1i rexlimd2 ) ABCDEFCDIAGJHK $.

    $( Obsolete proof of ~ rexlimd as of 14-Jan-2020.  (Contributed by NM,
       27-May-1998.)  (Proof shortened by Andrew Salmon, 30-May-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rexlimdOLD $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( wi wral wrex ralrimi r19.23 sylib ) ABCIZDEJBDEKCIAODEFHLBCDEGMN $.
  $}

  ${
    $d x ps $.
    rexlimiv.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 20-Nov-1994.)  Reduce
       dependencies on axioms.  (Revised by Wolf Lammen, 14-Jan-2020.) $)
    rexlimiv $p |- ( E. x e. A ph -> ps ) $=
      ( wi wral wrex rgen r19.23v mpbi ) ABFZCDGACDHBFLCDEIABCDJK $.

    $( Obsolete proof of ~ rexlimiv as of 14-Jan-2020.  (Contributed by NM,
       20-Nov-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    rexlimivOLD $p |- ( E. x e. A ph -> ps ) $=
      ( nfv rexlimi ) ABCDBCFEG $.
  $}

  ${
    $d x ps $.
    rexlimiva.1 $e |- ( ( x e. A /\ ph ) -> ps ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 18-Dec-2006.) $)
    rexlimiva $p |- ( E. x e. A ph -> ps ) $=
      ( cv wcel ex rexlimiv ) ABCDCFDGABEHI $.
  $}

  ${
    $d ps x $.
    rexlimivw.1 $e |- ( ph -> ps ) $.
    $( Weaker version of ~ rexlimiv .  (Contributed by FL, 19-Sep-2011.) $)
    rexlimivw $p |- ( E. x e. A ph -> ps ) $=
      ( wi cv wcel a1i rexlimiv ) ABCDABFCGDHEIJ $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdv.1 $e |- ( ph -> ( x e. A -> ( ps -> ch ) ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 14-Nov-2002.)  (Proof shortened by Eric
       Schmidt, 22-Dec-2006.)  Reduce dependencies on axioms.  (Revised by Wolf
       Lammen, 14-Jan-2020.) $)
    rexlimdv $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( wrex wi cv wcel com3l rexlimiv com12 ) BDEGACBACHDEADIEJBCFKLM $.

    $( Obsolete proof of ~ rexlimdv as of 14-Jan-2020.  (Contributed by NM,
       14-Nov-2002.)  (Proof shortened by Eric Schmidt, 22-Dec-2006.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rexlimdvOLD $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( nfv rexlimd ) ABCDEADGCDGFH $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdva.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 20-Jan-2007.) $)
    rexlimdva $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( cv wcel wi ex rexlimdv ) ABCDEADGEHBCIFJK $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdvaa.1 $e |- ( ( ph /\ ( x e. A /\ ps ) ) -> ch ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by Mario Carneiro, 15-Jun-2016.) $)
    rexlimdvaa $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( cv wcel expr rexlimdva ) ABCDEADGEHBCFIJ $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdv3a.1 $e |- ( ( ph /\ x e. A /\ ps ) -> ch ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  Frequently-used variant of ~ rexlimdv .  (Contributed by NM,
       7-Jun-2015.) $)
    rexlimdv3a $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( cv wcel 3exp rexlimdv ) ABCDEADGEHBCFIJ $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimdvw.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 18-Jun-2014.) $)
    rexlimdvw $p |- ( ph -> ( E. x e. A ps -> ch ) ) $=
      ( wi cv wcel a1d rexlimdv ) ABCDEABCGDHEIFJK $.
  $}

  ${
    $d x ph $.  $d x ch $.
    rexlimddv.1 $e |- ( ph -> E. x e. A ps ) $.
    rexlimddv.2 $e |- ( ( ph /\ ( x e. A /\ ps ) ) -> ch ) $.
    $( Restricted existential elimination rule of natural deduction.
       (Contributed by Mario Carneiro, 15-Jun-2016.) $)
    rexlimddv $p |- ( ph -> ch ) $=
      ( wrex rexlimdvaa mpd ) ABDEHCFABCDEGIJ $.
  $}

  ${
    $d x y ps $.  $d y A $.
    rexlimivv.1 $e |- ( ( x e. A /\ y e. B ) -> ( ph -> ps ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90 (restricted quantifier
       version).  (Contributed by NM, 17-Feb-2004.) $)
    rexlimivv $p |- ( E. x e. A E. y e. B ph -> ps ) $=
      ( wrex cv wcel rexlimdva rexlimiv ) ADFHBCECIEJABDFGKL $.
  $}

  ${
    $d x y ph $.  $d x y ch $.  $d y A $.
    rexlimdvv.1 $e |- ( ph -> ( ( x e. A /\ y e. B ) -> ( ps -> ch ) ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 22-Jul-2004.) $)
    rexlimdvv $p |- ( ph -> ( E. x e. A E. y e. B ps -> ch ) ) $=
      ( wrex cv wcel wa wi expdimp rexlimdv rexlimdva ) ABEGICDFADJFKZLBCEGAQEJ
      GKBCMHNOP $.
  $}

  ${
    $d x y ph $.  $d x y ch $.  $d y A $.
    rexlimdvva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps -> ch ) ) $.
    $( Inference from Theorem 19.23 of [Margaris] p. 90.  (Restricted
       quantifier version.)  (Contributed by NM, 18-Jun-2014.) $)
    rexlimdvva $p |- ( ph -> ( E. x e. A E. y e. B ps -> ch ) ) $=
      ( cv wcel wa wi ex rexlimdvv ) ABCDEFGADIFJEIGJKBCLHMN $.
  $}

  ${
    rexbii2.1 $e |- ( ( x e. A /\ ph ) <-> ( x e. B /\ ps ) ) $.
    $( Inference adding different restricted existential quantifiers to each
       side of an equivalence.  (Contributed by NM, 4-Feb-2004.) $)
    rexbii2 $p |- ( E. x e. A ph <-> E. x e. B ps ) $=
      ( cv wcel wa wex wrex exbii df-rex 3bitr4i ) CGZDHAIZCJOEHBIZCJACDKBCEKPQ
      CFLACDMBCEMN $.
  $}

  ${
    rexbiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Inference adding restricted existential quantifier to both sides of an
       equivalence.  (Contributed by NM, 26-Oct-1999.) $)
    rexbiia $p |- ( E. x e. A ph <-> E. x e. A ps ) $=
      ( cv wcel pm5.32i rexbii2 ) ABCDDCFDGABEHI $.
  $}

  ${
    rexbii.1 $e |- ( ph <-> ps ) $.
    $( Inference adding restricted existential quantifier to both sides of an
       equivalence.  (Contributed by NM, 23-Nov-1994.)  (Revised by Mario
       Carneiro, 17-Oct-2016.)  (Proof shortened by Wolf Lammen,
       6-Dec-2019.) $)
    rexbii $p |- ( E. x e. A ph <-> E. x e. A ps ) $=
      ( cv wcel anbi2i rexbii2 ) ABCDDABCFDGEHI $.

    $( Inference adding two restricted existential quantifiers to both sides of
       an equivalence.  (Contributed by NM, 11-Nov-1995.) $)
    2rexbii $p |- ( E. x e. A E. y e. B ph <-> E. x e. A E. y e. B ps ) $=
      ( wrex rexbii ) ADFHBDFHCEABDFGII $.
  $}

  $( Relationship between two restricted universal and existential
     quantifiers.  (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
  rexnal2 $p |- ( E. x e. A E. y e. B -. ph <-> -. A. x e. A A. y e. B ph ) $=
    ( wn wrex wral rexnal rexbii bitri ) AFCEGZBDGACEHZFZBDGMBDHFLNBDACEIJMBDIK
    $.

  $( Obsolete proof of ~ rexanali as of 27-Dec-2019.  (Contributed by NM,
     4-Sep-2005.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  rexanaliOLD $p |- ( E. x e. A ( ph /\ -. ps ) <->
                                                -. A. x e. A ( ph -> ps ) ) $=
    ( wn wa wrex wi wral annim rexbii rexnal bitri ) ABEFZCDGABHZEZCDGOCDIENPCD
    ABJKOCDLM $.

  ${
    rexbida.1 $e |- F/ x ph $.
    rexbida.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 6-Oct-2003.) $)
    rexbida $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( cv wcel wa wex wrex pm5.32da exbid df-rex 3bitr4g ) ADHEIZBJZDKQCJZDKBD
      ELCDELARSDFAQBCGMNBDEOCDEOP $.
  $}

  ${
    $d x ph $.
    rexbidv2.1 $e |- ( ph -> ( ( x e. A /\ ps ) <-> ( x e. B /\ ch ) ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 22-May-1999.) $)
    rexbidv2 $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $=
      ( cv wcel wa wex wrex exbidv df-rex 3bitr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    $d x ph $.
    rexbidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 9-Mar-1997.)  Reduce dependencies on
       axioms.  (Revised by Wolf Lammen, 6-Dec-2019.)  (Proof shortened by Wolf
       Lammen, 10-Dec-2019.) $)
    rexbidva $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( cv wcel pm5.32da rexbidv2 ) ABCDEEADGEHBCFIJ $.

    $( Alternative, shorter proof of ~ rexbida , that bases on more axioms.
       (Contributed by NM, 9-Mar-1997.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rexbidvaALT $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( nfv rexbida ) ABCDEADGFH $.
  $}

  ${
    rexbid.1 $e |- F/ x ph $.
    rexbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 27-Jun-1998.) $)
    rexbid $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( wb cv wcel adantr rexbida ) ABCDEFABCHDIEJGKL $.
  $}

  ${
    $d x ph $.
    rexbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 20-Nov-1994.)  Reduce dependencies on
       axioms.  (Revised by Wolf Lammen, 6-Dec-2019.) $)
    rexbidv $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( wb cv wcel adantr rexbidva ) ABCDEABCGDHEIFJK $.

    $( Alternative, shorter proof of ~ rexbidv , using more axioms.
       (Contributed by NM, 20-Nov-1994.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rexbidvALT $p |- ( ph -> ( E. x e. A ps <-> E. x e. A ch ) ) $=
      ( nfv rexbid ) ABCDEADGFH $.
  $}

  ${
    rexbiiOLD.1 $e |- ( ph <-> ps ) $.
    $( Obsolete proof of ~ rexbii as of 6-Dec-2019.  (Contributed by NM,
       23-Nov-1994.)  (Revised by Mario Carneiro, 17-Oct-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    rexbiiOLD $p |- ( E. x e. A ph <-> E. x e. A ps ) $=
      ( wrex wb wtru a1i rexbidv trud ) ACDFBCDFGHABCDABGHEIJK $.

    $( Obsolete proof of ~ ralbii as of 4-Dec-2019.  (Contributed by NM,
       23-Nov-1994.)  (Revised by Mario Carneiro, 17-Oct-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    ralbiiOLD $p |- ( A. x e. A ph <-> A. x e. A ps ) $=
      ( wral wb wtru a1i ralbidv trud ) ACDFBCDFGHABCDABGHEIJK $.
  $}

  ${
    rexeqbii.1 $e |- A = B $.
    rexeqbii.2 $e |- ( ps <-> ch ) $.
    $( Equality deduction for restricted existential quantifier, changing both
       formula and quantifier domain.  Inference form.  (Contributed by David
       Moews, 1-May-2017.) $)
    rexeqbii $p |- ( E. x e. A ps <-> E. x e. B ch ) $=
      ( cv wcel eleq2i anbi12i rexbii2 ) ABCDECHZDIMEIABDEMFJGKL $.
  $}

  ${
    $d x y $.  $d y A $.
    2rexbiia.1 $e |- ( ( x e. A /\ y e. B ) -> ( ph <-> ps ) ) $.
    $( Inference adding two restricted existential quantifiers to both sides of
       an equivalence.  (Contributed by NM, 1-Aug-2004.) $)
    2rexbiia $p |- ( E. x e. A E. y e. B ph <-> E. x e. A E. y e. B ps ) $=
      ( wrex cv wcel rexbidva rexbiia ) ADFHBDFHCECIEJABDFGKL $.
  $}

  ${
    $d x y ph $.  $d y A $.
    2rexbidva.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifiers (deduction
       rule).  (Contributed by NM, 15-Dec-2004.) $)
    2rexbidva $p |- ( ph ->
                    ( E. x e. A E. y e. B ps <-> E. x e. A E. y e. B ch ) ) $=
      ( wrex cv wcel wa wb anassrs rexbidva ) ABEGICEGIDFADJFKZLBCEGAPEJGKBCMHN
      OO $.
  $}

  ${
    $d x ph $.  $d y ph $.
    2rexbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifiers (deduction
       rule).  (Contributed by NM, 28-Jan-2006.) $)
    2rexbidv $p |- ( ph ->
                    ( E. x e. A E. y e. B ps <-> E. x e. A E. y e. B ch ) ) $=
      ( wrex rexbidv ) ABEGICEGIDFABCEGHJJ $.

    $( Formula-building rule for restricted quantifiers (deduction rule).
       (Contributed by NM, 28-Jan-2006.) $)
    rexralbidv $p |- ( ph ->
                    ( E. x e. A A. y e. B ps <-> E. x e. A A. y e. B ch ) ) $=
      ( wral ralbidv rexbidv ) ABEGICEGIDFABCEGHJK $.
  $}

  ${
    r2exlem.1 $e |- ( A. x e. A A. y e. B -. ph <->
               A. x A. y ( ( x e. A /\ y e. B ) -> -. ph ) ) $.
    $( Lemma factoring out common proof steps in ~ r2exf an ~ r2ex .
       Introduced to reduce dependencies on axioms.  (Contributed by Wolf
       Lammen, 10-Jan-2020.) $)
    r2exlem $p |- ( E. x e. A E. y e. B ph <->
                E. x E. y ( ( x e. A /\ y e. B ) /\ ph ) ) $=
      ( cv wcel wa wn wal wex wral wrex exnal xchbinxr alinexa con2bii ralnex
      wi exbii ralbii bitri 3bitr4ri ) BGDHCGEHIZAJZTCKZJZBLZUFCEMZBDMZJUEAICLZ
      BLACENZBDNZUIUGBKUKUGBOFPULUHBUGULUEACQRUAUKUNUKUMJZBDMUNJUJUOBDACESUBUMB
      DSUCRUD $.
  $}

  ${
    $d x y $.
    r2exf.1 $e |- F/_ y A $.
    $( Double restricted existential quantification.  (Contributed by Mario
       Carneiro, 14-Oct-2016.)  Use ~ r2exlem .  (Revised by Wolf Lammen,
       10-Jan-2020.) $)
    r2exf $p |- ( E. x e. A E. y e. B ph <->
               E. x E. y ( ( x e. A /\ y e. B ) /\ ph ) ) $=
      ( wn r2alf r2exlem ) ABCDEAGBCDEFHI $.

    $( Obsolete proof of ~ r2exf as of 10-Jan-2020.  (Contributed by Mario
       Carneiro, 14-Oct-2016.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r2exfOLD $p |- ( E. x e. A E. y e. B ph <->
               E. x E. y ( ( x e. A /\ y e. B ) /\ ph ) ) $=
      ( wrex cv wcel wex df-rex nfcri 19.42 anass exbii anbi2i 3bitr4i bitr4i
      wa ) ACEGZBDGBHDIZTSZBJUACHEIZSASZCJZBJTBDKUEUBBUAUCASZSZCJUAUFCJZSUEUBUA
      UFCCBDFLMUDUGCUAUCANOTUHUAACEKPQOR $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Double restricted existential quantification.  (Contributed by NM,
       11-Nov-1995.)  Reduce dependencies on axioms.  (Revised by Wolf Lammen,
       10-Jan-2020.) $)
    r2ex $p |- ( E. x e. A E. y e. B ph <->
               E. x E. y ( ( x e. A /\ y e. B ) /\ ph ) ) $=
      ( wn r2al r2exlem ) ABCDEAFBCDEGH $.

    $( Obsolete proof of ~ r2ex as of 10-Jan-2020.  (Contributed by NM,
       11-Nov-1995.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    r2exOLD $p |- ( E. x e. A E. y e. B ph <->
               E. x E. y ( ( x e. A /\ y e. B ) /\ ph ) ) $=
      ( nfcv r2exf ) ABCDECDFG $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Two ways to say "" ` A ` belongs to ` B ` .""  (Contributed by NM,
       22-Nov-1994.) $)
    risset $p |- ( A e. B <-> E. x e. B x = A ) $=
      ( cv wcel wceq wa wex wrex exancom df-rex df-clel 3bitr4ri ) ADZCEZNBFZGA
      HPOGAHPACIBCEOPAJPACKABCLM $.
  $}

  ${
    $d x y $.  $d y A $.  $d x B $.
    $( Restricted quantifier version of ~ 19.12 .  (Contributed by NM,
       15-Oct-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
    r19.12 $p |- ( E. x e. A A. y e. B ph -> A. y e. B E. x e. A ph ) $=
      ( wral wrex nfcv nfra1 nfrex cv wcel ax-1 ralrimi rsp reximdv ralimia syl
      com12 ) ACEFZBDGZUACEFABDGZCEFUAUACETCBDCDHACEIJUACKELZMNUAUBCEUCTABDTUCA
      ACEOSPQR $.
  $}

  $( Restricted quantifier version of ~ 19.26 .  (Contributed by NM,
     28-Jan-1997.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
  r19.26 $p |- ( A. x e. A ( ph /\ ps ) <->
               ( A. x e. A ph /\ A. x e. A ps ) ) $=
    ( wa wral simpl ralimi simpr jca pm3.2 ral2imi imp impbii ) ABEZCDFZACDFZBC
    DFZEPQROACDABGHOBCDABIHJQRPABOCDABKLMN $.

  $( Restricted quantifier version of ~ 19.26-2 .  Version of ~ r19.26 with two
     quantifiers.  (Contributed by NM, 10-Aug-2004.) $)
  r19.26-2 $p |- ( A. x e. A A. y e. B ( ph /\ ps ) <->
               ( A. x e. A A. y e. B ph /\ A. x e. A A. y e. B ps ) ) $=
    ( wa wral r19.26 ralbii bitri ) ABGDFHZCEHADFHZBDFHZGZCEHMCEHNCEHGLOCEABDFI
    JMNCEIK $.

  $( Version of ~ r19.26 with three quantifiers.  (Contributed by FL,
     22-Nov-2010.) $)
  r19.26-3 $p |- ( A. x e. A ( ph /\ ps /\ ch ) <->
               ( A. x e. A ph /\ A. x e. A ps /\ A. x e. A ch ) ) $=
    ( w3a wral wa df-3an ralbii r19.26 anbi1i bitr4i 3bitri ) ABCFZDEGABHZCHZDE
    GPDEGZCDEGZHZADEGZBDEGZSFZOQDEABCIJPCDEKTUAUBHZSHUCRUDSABDEKLUAUBSIMN $.

  $( Version of ~ 19.26 and ~ r19.26 with restricted quantifiers ranging over
     different classes.  (Contributed by NM, 22-Feb-2004.) $)
  r19.26m $p |- ( A. x ( ( x e. A -> ph ) /\ ( x e. B -> ps ) ) <->
               ( A. x e. A ph /\ A. x e. B ps ) ) $=
    ( cv wcel wi wa wal wral 19.26 df-ral anbi12i bitr4i ) CFZDGAHZPEGBHZICJQCJ
    ZRCJZIACDKZBCEKZIQRCLUASUBTACDMBCEMNO $.

  $( Distribute a restricted universal quantifier over a biconditional.
     Restricted quantification version of ~ albi .  (Contributed by NM,
     6-Oct-2003.) $)
  ralbi $p |- ( A. x e. A ( ph <-> ps ) ->
               ( A. x e. A ph <-> A. x e. A ps ) ) $=
    ( wb wral nfra1 rspa ralbida ) ABEZCDFABCDJCDGJCDHI $.

  $( Split a biconditional and distribute quantifier.  Restricted quantifier
     version of ~ albiim .  (Contributed by NM, 3-Jun-2012.) $)
  ralbiim $p |- ( A. x e. A ( ph <-> ps ) <->
             ( A. x e. A ( ph -> ps ) /\ A. x e. A ( ps -> ph ) ) ) $=
    ( wb wral wi wa dfbi2 ralbii r19.26 bitri ) ABEZCDFABGZBAGZHZCDFNCDFOCDFHMP
    CDABIJNOCDKL $.

  ${
    $d x ps $.
    $( Restricted quantitifer version of one direction of ~ 19.27 .  (The other
       direction does not hold when ` A ` is empty.)  (Contributed by NM,
       3-Jun-2004.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
    r19.27av $p |- ( ( A. x e. A ph /\ ps ) -> A. x e. A ( ph /\ ps ) ) $=
      ( wral wa cv wcel ax-1 ralrimiv anim2i r19.26 sylibr ) ACDEZBFNBCDEZFABFC
      DEBONBBCDBCGDHIJKABCDLM $.
  $}

  ${
    $d x ph $.
    $( Restricted quantifier version of one direction of ~ 19.28 .  (The other
       direction does not hold when ` A ` is empty.)  (Contributed by NM,
       2-Apr-2004.) $)
    r19.28av $p |- ( ( ph /\ A. x e. A ps ) -> A. x e. A ( ph /\ ps ) ) $=
      ( wral wa r19.27av ancom ralbii 3imtr4i ) BCDEZAFBAFZCDEAKFABFZCDEBACDGAK
      HMLCDABHIJ $.
  $}

  $( Restricted quantifier version of ~ 19.29 .  See also ~ r19.29r .
     (Contributed by NM, 31-Aug-1999.)  (Proof shortened by Andrew Salmon,
     30-May-2011.) $)
  r19.29 $p |- ( ( A. x e. A ph /\ E. x e. A ps ) ->
               E. x e. A ( ph /\ ps ) ) $=
    ( wral wrex wa wi pm3.2 ralimi rexim syl imp ) ACDEZBCDFZABGZCDFZNBPHZCDEOQ
    HARCDABIJBPCDKLM $.

  $( Restricted quantifier version of ~ 19.29r ; variation of ~ r19.29 .
     (Contributed by NM, 31-Aug-1999.) $)
  r19.29r $p |- ( ( E. x e. A ph /\ A. x e. A ps ) ->
                E. x e. A ( ph /\ ps ) ) $=
    ( wral wrex wa r19.29 ancom rexbii 3imtr4i ) BCDEZACDFZGBAGZCDFMLGABGZCDFBA
    CDHMLIONCDABIJK $.

  ${
    r19.29imd.1 $e |- ( ph -> E. x e. A ps ) $.
    r19.29imd.2 $e |- ( ph -> A. x e. A ( ps -> ch ) ) $.
    $( Theorem 19.29 of [Margaris] p. 90 with an implication in the hypothesis
       containing the generalization, deduction version.  (Contributed by AV,
       19-Jan-2019.) $)
    r19.29imd $p |- ( ph -> E. x e. A ( ps /\ ch ) ) $=
      ( wi wa wrex wral r19.29r syl2anc abai rexbii sylibr ) ABBCHZIZDEJZBCIZDE
      JABDEJQDEKSFGBQDELMTRDEBCNOP $.
  $}

  ${
    r19.29af2.p $e |- F/ x ph $.
    r19.29af2.c $e |- F/ x ch $.
    r19.29af2.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    r19.29af2.2 $e |- ( ph -> E. x e. A ps ) $.
    $( A commonly used pattern based on ~ r19.29 .  (Contributed by Thierry
       Arnoux, 17-Dec-2017.)  (Proof shortened by OpenAI, 25-Mar-2020.) $)
    r19.29af2 $p |- ( ph -> ch ) $=
      ( wrex cv wcel exp31 rexlimd mpd ) ABDEJCIABCDEFGADKELBCHMNO $.
  $}

  ${
    r19.29af2OLD.p $e |- F/ x ph $.
    r19.29af2OLD.c $e |- F/ x ch $.
    r19.29af2OLD.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    r19.29af2OLD.2 $e |- ( ph -> E. x e. A ps ) $.
    $( A commonly used pattern based on ~ r19.29 .  (Contributed by Thierry
       Arnoux, 17-Dec-2017.)  Obsolete version of ~ r19.29af2 as of
       25-Mar-2020.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    r19.29af2OLD $p |- ( ph -> ch ) $=
      ( wrex wi wral wa cv wcel exp31 ralrimi jca r19.29r pm3.35 rexlimi 3syl
      a1i ) ABDEJZBCKZDELZMBUEMZDEJCAUDUFIAUEDEFADNEOZBCHPQRBUEDESUGCDEGUGCKUHB
      CTUCUAUB $.
  $}

  ${
    $d x ch $.
    r19.29af.0 $e |- F/ x ph $.
    r19.29af.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    r19.29af.2 $e |- ( ph -> E. x e. A ps ) $.
    $( A commonly used pattern based on ~ r19.29 .  (Contributed by Thierry
       Arnoux, 29-Nov-2017.) $)
    r19.29af $p |- ( ph -> ch ) $=
      ( nfv r19.29af2 ) ABCDEFCDIGHJ $.
  $}

  ${
    $d x ch $.  $d x ph $.
    r19.29an.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    $( A commonly used pattern based on ~ r19.29 .  (Contributed by Thierry
       Arnoux, 29-Dec-2019.) $)
    r19.29an $p |- ( ( ph /\ E. x e. A ps ) -> ch ) $=
      ( wrex wa nfv nfre1 nfan cv wcel adantllr simpr r19.29af ) ABDEGZHBCDEAQD
      ADIBDEJKADLEMBCQFNAQOP $.
  $}

  ${
    $d x ch $.  $d x ph $.
    r19.29a.1 $e |- ( ( ( ph /\ x e. A ) /\ ps ) -> ch ) $.
    r19.29a.2 $e |- ( ph -> E. x e. A ps ) $.
    $( A commonly used pattern based on ~ r19.29 .  (Contributed by Thierry
       Arnoux, 22-Nov-2017.) $)
    r19.29a $p |- ( ph -> ch ) $=
      ( nfv r19.29af ) ABCDEADHFGI $.
  $}

  ${
    r19.29d2r.1 $e |- ( ph -> A. x e. A A. y e. B ps ) $.
    r19.29d2r.2 $e |- ( ph -> E. x e. A E. y e. B ch ) $.
    $( Theorem 19.29 of [Margaris] p. 90 with two restricted quantifiers,
       deduction version (Contributed by Thierry Arnoux, 30-Jan-2017.) $)
    r19.29d2r $p |- ( ph -> E. x e. A E. y e. B ( ps /\ ch ) ) $=
      ( wral wrex wa r19.29 syl2anc reximi syl ) ABEGJZCEGKZLZDFKZBCLEGKZDFKAQD
      FJRDFKTHIQRDFMNSUADFBCEGMOP $.
  $}

  ${
    $d y A $.  $d x y ch $.  $d x y ph $.
    r19.29_2a.1 $e |- ( ( ( ( ph /\ x e. A ) /\ y e. B ) /\ ps ) -> ch ) $.
    r19.29_2a.2 $e |- ( ph -> E. x e. A E. y e. B ps ) $.
    $( A commonly used pattern based on ~ r19.29 , version with two restricted
       quantifiers (Contributed by Thierry Arnoux, 26-Nov-2017.) $)
    r19.29_2a $p |- ( ph -> ch ) $=
      ( wi wa wrex wral cv wcel ex ralrimiva r19.29d2r pm3.35 rexlimivw ancoms
      syl ) ABCJZBKZEGLZDFLCAUCBDEFGAUCEGMDFADNFOKZUCEGUFENGOKBCHPQQIRUECDFUDCE
      GBUCCBCSUATTUB $.
  $}

  $( Restricted quantifier version of ~ 19.30 .  (Contributed by Scott Fenton,
     25-Feb-2011.) $)
  r19.30 $p |- ( A. x e. A ( ph \/ ps ) ->
                 ( A. x e. A ph \/ E. x e. A ps ) ) $=
    ( wn wi wral wrex ralim orcom df-or bitri ralbii dfrex2 orbi2i imor 3bitr4i
    wo 3imtr4i ) BEZAFZCDGTCDGZACDGZFZABRZCDGUCBCDHZRZTACDIUEUACDUEBARUAABJBAKL
    MUCUBEZRUHUCRUGUDUCUHJUFUHUCBCDNOUBUCPQS $.

  ${
    $d x ph $.
    $( Restricted quantifier version of ~ 19.32v .  (Contributed by NM,
       25-Nov-2003.) $)
    r19.32v $p |- ( A. x e. A ( ph \/ ps ) <-> ( ph \/ A. x e. A ps ) ) $=
      ( wn wi wral wo r19.21v df-or ralbii 3bitr4i ) AEZBFZCDGMBCDGZFABHZCDGAOH
      MBCDIPNCDABJKAOJL $.
  $}

  $( Restricted quantifier version of ~ 19.35 .  (Contributed by NM,
     20-Sep-2003.) $)
  r19.35 $p |- ( E. x e. A ( ph -> ps ) <->
               ( A. x e. A ph -> E. x e. A ps ) ) $=
    ( wral wn wi wrex r19.26 annim ralbii df-an 3bitr3i con2bii dfrex2 3bitr4ri
    wa imbi2i ) ACDEZBFZCDEZFZGZABGZFZCDEZFSBCDHZGUDCDHUFUCATQZCDESUAQUFUCFATCD
    IUHUECDABJKSUALMNUGUBSBCDORUDCDOP $.

  ${
    $d x ps $.
    $( Restricted quantifier version of one direction of ~ 19.36 .  (The other
       direction does not hold when ` A ` is empty.)  (Contributed by NM,
       22-Oct-2003.) $)
    r19.36av $p |- ( E. x e. A ( ph -> ps ) -> ( A. x e. A ph -> ps ) ) $=
      ( wi wrex wral r19.35 cv wcel idd rexlimiv imim2i sylbi ) ABECDFACDGZBCDF
      ZEOBEABCDHPBOBBCDCIDJBKLMN $.
  $}

  ${
    r19.37.1 $e |- F/ x ph $.
    $( Restricted quantifier version of one direction of ~ 19.37 .  (The other
       direction does not hold when ` A ` is empty.)  (Contributed by FL,
       13-May-2012.)  (Revised by Mario Carneiro, 11-Dec-2016.) $)
    r19.37 $p |- ( E. x e. A ( ph -> ps ) -> ( ph -> E. x e. A ps ) ) $=
      ( wi wrex wral r19.35 cv wcel ax-1 ralrimi imim1i sylbi ) ABFCDGACDHZBCDG
      ZFAQFABCDIAPQAACDEACJDKLMNO $.
  $}

  ${
    $d x ph $.
    $( Restricted quantifier version of one direction of ~ 19.37v .  (The other
       direction does not hold when ` A ` is empty.)  (Contributed by NM,
       2-Apr-2004.) $)
    r19.37av $p |- ( E. x e. A ( ph -> ps ) -> ( ph -> E. x e. A ps ) ) $=
      ( nfv r19.37 ) ABCDACEF $.
  $}

  $( Restricted quantifier version of Theorem 19.40 of [Margaris] p. 90.
     (Contributed by NM, 2-Apr-2004.) $)
  r19.40 $p |- ( E. x e. A ( ph /\ ps )
        -> ( E. x e. A ph /\ E. x e. A ps ) ) $=
    ( wa wrex simpl reximi simpr jca ) ABEZCDFACDFBCDFKACDABGHKBCDABIHJ $.

  ${
    $d x ps $.
    $( Restricted quantifier version of Theorem 19.41 of [Margaris] p. 90.
       (Contributed by NM, 17-Dec-2003.)  Reduced dependencies on axioms.
       (Revised by BJ, 29-Mar-2020.) $)
    r19.41v $p |- ( E. x e. A ( ph /\ ps ) <-> ( E. x e. A ph /\ ps ) ) $=
      ( cv wcel wa wex wrex anass exbii 19.41v bitr3i df-rex anbi1i 3bitr4i ) C
      EDFZABGZGZCHZQAGZCHZBGZRCDIACDIZBGTUABGZCHUCUESCQABJKUABCLMRCDNUDUBBACDNO
      P $.
  $}

  ${
    r19.41.1 $e |- F/ x ps $.
    $( Restricted quantifier version of Theorem 19.41 of [Margaris] p. 90.
       (Contributed by NM, 1-Nov-2010.) $)
    r19.41 $p |- ( E. x e. A ( ph /\ ps ) <-> ( E. x e. A ph /\ ps ) ) $=
      ( cv wcel wa wex wrex anass exbii 19.41 bitr3i df-rex anbi1i 3bitr4i ) CF
      DGZABHZHZCIZRAHZCIZBHZSCDJACDJZBHUAUBBHZCIUDUFTCRABKLUBBCEMNSCDOUEUCBACDO
      PQ $.
  $}

  ${
    $d x ps $.  $d y ps $.
    $( Restricted quantifier version of Theorem 19.41 of [Margaris] p. 90.
       Version with two quantifiers (Contributed by Thierry Arnoux,
       25-Jan-2017.) $)
    r19.41vv $p |- ( E. x e. A E. y e. B ( ph /\ ps )
         <-> ( E. x e. A E. y e. B ph /\ ps ) ) $=
      ( wa wrex r19.41v rexbii bitri ) ABGDFHZCEHADFHZBGZCEHMCEHBGLNCEABDFIJMBC
      EIK $.
  $}

  ${
    $d x ph $.
    $( Restricted version of Theorem 19.42 of [Margaris] p. 90.  (Contributed
       by NM, 27-May-1998.) $)
    r19.42v $p |- ( E. x e. A ( ph /\ ps ) <-> ( ph /\ E. x e. A ps ) ) $=
      ( wa wrex r19.41v ancom rexbii 3bitr4i ) BAEZCDFBCDFZAEABEZCDFALEBACDGMKC
      DABHIALHJ $.
  $}

  $( Restricted version of Theorem 19.43 of [Margaris] p. 90.  (Contributed by
     NM, 27-May-1998.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
  r19.43 $p |- ( E. x e. A ( ph \/ ps )
         <-> ( E. x e. A ph \/ E. x e. A ps ) ) $=
    ( wn wi wrex wral wo r19.35 df-or rexbii ralnex imbi1i bitr4i 3bitr4i ) AEZ
    BFZCDGQCDHZBCDGZFZABIZCDGACDGZTIZQBCDJUBRCDABKLUDUCEZTFUAUCTKSUETACDMNOP $.

  ${
    $d x ps $.
    $( One direction of a restricted quantifier version of Theorem 19.44 of
       [Margaris] p. 90.  The other direction doesn't hold when ` A ` is
       empty.  (Contributed by NM, 2-Apr-2004.) $)
    r19.44av $p |- ( E. x e. A ( ph \/ ps ) -> ( E. x e. A ph \/ ps ) ) $=
      ( wo wrex r19.43 cv wcel idd rexlimiv orim2i sylbi ) ABECDFACDFZBCDFZENBE
      ABCDGOBNBBCDCHDIBJKLM $.
  $}

  ${
    $d x ph $.
    $( Restricted version of one direction of Theorem 19.45 of [Margaris]
       p. 90.  (The other direction doesn't hold when ` A ` is empty.)
       (Contributed by NM, 2-Apr-2004.) $)
    r19.45av $p |- ( E. x e. A ( ph \/ ps ) -> ( ph \/ E. x e. A ps ) ) $=
      ( wo wrex r19.43 cv wcel idd rexlimiv orim1i sylbi ) ABECDFACDFZBCDFZEAOE
      ABCDGNAOAACDCHDIAJKLM $.
  $}

  ${
    $d x y $.
    ralcomf.1 $e |- F/_ y A $.
    ralcomf.2 $e |- F/_ x B $.
    $( Commutation of restricted quantifiers.  (Contributed by Mario Carneiro,
       14-Oct-2016.) $)
    ralcomf $p |- ( A. x e. A A. y e. B ph <-> A. y e. B A. x e. A ph ) $=
      ( cv wcel wa wi wal wral ancomst 2albii alcom bitri r2alf 3bitr4i ) BHDIZ
      CHEIZJAKZCLBLZUATJAKZBLCLZACEMBDMABDMCEMUCUDCLBLUEUBUDBCTUAANOUDBCPQABCDE
      FRACBEDGRS $.

    $( Commutation of restricted quantifiers.  (Contributed by Mario Carneiro,
       14-Oct-2016.) $)
    rexcomf $p |- ( E. x e. A E. y e. B ph <-> E. y e. B E. x e. A ph ) $=
      ( cv wcel wa wex wrex ancom anbi1i 2exbii excom bitri r2exf 3bitr4i ) BHD
      IZCHEIZJZAJZCKBKZUATJZAJZBKCKZACELBDLABDLCELUDUFCKBKUGUCUFBCUBUEATUAMNOUF
      BCPQABCDEFRACBEDGRS $.
  $}

  ${
    $d x y $.  $d x B $.  $d y A $.
    $( Commutation of restricted quantifiers.  (Contributed by NM,
       13-Oct-1999.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    ralcom $p |- ( A. x e. A A. y e. B ph <-> A. y e. B A. x e. A ph ) $=
      ( nfcv ralcomf ) ABCDECDFBEFG $.

    $( Commutation of restricted quantifiers.  (Contributed by NM,
       19-Nov-1995.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    rexcom $p |- ( E. x e. A E. y e. B ph <-> E. y e. B E. x e. A ph ) $=
      ( nfcv rexcomf ) ABCDECDFBEFG $.
  $}

  ${
    $d y z A $.  $d x z B $.  $d x y C $.
    $( Swap 1st and 3rd restricted existential quantifiers.  (Contributed by
       NM, 8-Apr-2015.) $)
    rexcom13 $p |- ( E. x e. A E. y e. B E. z e. C ph
         <-> E. z e. C E. y e. B E. x e. A ph ) $=
      ( wrex rexcom rexbii 3bitri ) ADGHZCFHBEHLBEHZCFHABEHZDGHZCFHNCFHDGHLBCEF
      IMOCFABDEGIJNCDFGIK $.
  $}

  ${
    $d w z A $.  $d w z B $.  $d w x y C $.  $d x y z D $.
    $( Rotate existential restricted quantifiers twice.  (Contributed by NM,
       8-Apr-2015.) $)
    rexrot4 $p |- ( E. x e. A E. y e. B E. z e. C E. w e. D ph
        <-> E. z e. C E. w e. D E. x e. A E. y e. B ph ) $=
      ( wrex rexcom13 rexbii bitri ) AEIJDHJCGJZBFJACGJZDHJEIJZBFJOBFJEIJDHJNPB
      FACDEGHIKLOBEDFIHKM $.
  $}

  ${
    $d y z A $.  $d x z A $.
    $( Commutation of restricted quantifiers.  Note that ` x ` and ` y `
       needn't be distinct (this makes the proof longer).  (Contributed by NM,
       24-Nov-1994.)  (Proof shortened by Mario Carneiro, 17-Oct-2016.) $)
    ralcom2 $p |- ( A. x e. A A. y e. A ph -> A. y e. A A. x e. A ph ) $=
      ( weq wral wi cv wcel wb eleq1 dral1 df-ral 3bitr4g wa nfnae nfan ralrimi
      wal ex sps imbi1d bicomd imbi12d biimpd wn nfra2 nfra1 nfcvf adantr nfcvd
      wnfc nfeld nfan1 rsp2 ancomsd expdimp adantll pm2.61i ) BCEZBSZACDFZBDFZA
      BDFZCDFZGVAVCVEVABHZDIZVBGZBSCHZDIZVDGZCSVCVEVHVKBCVAVGVJVBVDUTVGVJJBVFVI
      DKUAZVAVJAGZCSZVGAGZBSZVBVDVAVPVNVOVMBCVAVGVJAVLUBLUCACDMABDMNUDLVBBDMVDC
      DMNUEVAUFZVCVEVQVCOZVDCDVQVCCBCCPABCDDUGQVRVJVDVRVJOABDVRVJBVQVCBBCBPVBBD
      UHQVRBVIDVQBVIULVCBCUIUJVRBDUKUMUNVCVJVOVQVCVJVGAVCVGVJAABCDDUOUPUQURRTRT
      US $.
  $}

  ${
    $( A commutative law for restricted quantifiers that swaps the domain of
       the restriction.  (Contributed by NM, 22-Feb-2004.) $)
    ralcom3 $p |- ( A. x e. A ( x e. B -> ph ) <->
                    A. x e. B ( x e. A -> ph ) ) $=
      ( cv wcel wi wral pm2.04 ralimi2 impbii ) BEZDFZAGZBCHLCFZAGZBDHNPBCDOMAI
      JPNBDCMOAIJK $.
  $}

  ${
    $d y A $.  $d x B $.  $d x y $.
    reean.1 $e |- F/ y ph $.
    reean.2 $e |- F/ x ps $.
    $( Rearrange existential quantifiers.  (Contributed by NM, 27-Oct-2010.)
       (Proof shortened by Andrew Salmon, 30-May-2011.) $)
    reean $p |- ( E. x e. A E. y e. B ( ph /\ ps ) <->
                 ( E. x e. A ph /\ E. y e. B ps ) ) $=
      ( cv wcel wa wex wrex an4 2exbii nfv nfan eean bitri df-rex r2ex anbi12i
      3bitr4i ) CIEJZDIFJZKABKZKZDLCLZUDAKZCLZUEBKZDLZKZUFDFMCEMACEMZBDFMZKUHUI
      UKKZDLCLUMUGUPCDUDUEABNOUIUKCDUDADUDDPGQUEBCUECPHQRSUFCDEFUAUNUJUOULACETB
      DFTUBUC $.
  $}

  ${
    $d y ph $.  $d x ps $.  $d x y $.  $d y A $.  $d x B $.
    $( Rearrange existential quantifiers.  (Contributed by NM, 9-May-1999.) $)
    reeanv $p |- ( E. x e. A E. y e. B ( ph /\ ps ) <->
                 ( E. x e. A ph /\ E. y e. B ps ) ) $=
      ( nfv reean ) ABCDEFADGBCGH $.
  $}

  ${
    $d ph y z $.  $d ps x z $.  $d ch x y $.  $d A y $.  $d B x z $.
    $d C x y $.
    $( Rearrange three existential quantifiers.  (Contributed by Jeff Madsen,
       11-Jun-2010.) $)
    3reeanv $p |- ( E. x e. A E. y e. B E. z e. C ( ph /\ ps /\ ch )
                      <-> ( E. x e. A ph /\ E. y e. B ps /\ E. z e. C ch ) ) $=
      ( wa wrex w3a r19.41v reeanv anbi1i bitri df-3an 2rexbii rexbii 3bitr4i )
      ABJZEHKZCFIKZJZDGKZADGKZBEHKZJZUCJZABCLZFIKEHKZDGKUFUGUCLUEUBDGKZUCJUIUBU
      CDGMULUHUCABDEGHNOPUKUDDGUKUACJZFIKEHKUDUJUMEFHIABCQRUACEFHINPSUFUGUCQT
      $.
  $}

  ${
    $d ph y $.  $d ps x $.  $d A y $.  $d B x $.  $d x y $.
    $( Distribute quantification over ""or"".  (Contributed by Jeff Madsen,
       19-Jun-2010.) $)
    2ralor $p |- ( A. x e. A A. y e. B ( ph \/ ps ) <->
                  ( A. x e. A ph \/ A. y e. B ps ) ) $=
      ( wo wral wn wrex wa rexnal anbi12i rexbii bitr3i reeanv 3bitr3ri 3bitr4i
      ioran con4bii ) ABGZDFHZCEHZACEHZBDFHZGZAIZCEJZBIZDFJZKZUDIZUEIZKUCIZUFIU
      HULUJUMACELBDFLMUGUIKZDFJZCEJUBIZCEJUKUNUPUQCEUPUAIZDFJUQURUODFABSNUADFLO
      NUGUICDEFPUBCELQUDUESRT $.
  $}

  $( ` x ` is not free in ` E! x e. A ph ` .  (Contributed by NM,
     19-Mar-1997.) $)
  nfreu1 $p |- F/ x E! x e. A ph $=
    ( wreu cv wcel wa weu df-reu nfeu1 nfxfr ) ABCDBECFAGZBHBABCILBJK $.

  $( ` x ` is not free in ` E* x e. A ph ` .  (Contributed by NM,
     16-Jun-2017.) $)
  nfrmo1 $p |- F/ x E* x e. A ph $=
    ( wrmo cv wcel wa wmo df-rmo nfmo1 nfxfr ) ABCDBECFAGZBHBABCILBJK $.

  ${
    $d x z $.  $d y z $.  $d A z $.  $d ph z $.
    nfreud.1 $e |- F/ y ph $.
    nfreud.2 $e |- ( ph -> F/_ x A ) $.
    nfreud.3 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfreu .  (Contributed by NM, 15-Feb-2013.)
       (Revised by Mario Carneiro, 8-Oct-2016.) $)
    nfreud $p |- ( ph -> F/ x E! y e. A ps ) $=
      ( wreu cv wcel wa weu df-reu weq wal wn wnfc nfcvf adantr nfeld wnf nfand
      adantl nfeud2 nfxfrd ) BDEIDJZEKZBLZDMACBDENAUICDFACDOCPQZLZUHBCUKCUGEUJC
      UGRACDSUDACERUJGTUAABCUBUJHTUCUEUF $.

    $( Deduction version of ~ nfrmo .  (Contributed by NM, 17-Jun-2017.) $)
    nfrmod $p |- ( ph -> F/ x E* y e. A ps ) $=
      ( wrmo cv wcel wa wmo df-rmo weq wal wn wnfc nfcvf adantr nfeld wnf nfand
      adantl nfmod2 nfxfrd ) BDEIDJZEKZBLZDMACBDENAUICDFACDOCPQZLZUHBCUKCUGEUJC
      UGRACDSUDACERUJGTUAABCUBUJHTUCUEUF $.
  $}

  ${
    nfreu.1 $e |- F/_ x A $.
    nfreu.2 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for restricted uniqueness.
       (Contributed by NM, 30-Oct-2010.)  (Revised by Mario Carneiro,
       8-Oct-2016.) $)
    nfreu $p |- F/ x E! y e. A ph $=
      ( wreu wnf wtru nftru wnfc a1i nfreud trud ) ACDGBHIABCDCJBDKIELABHIFLMN
      $.

    $( Bound-variable hypothesis builder for restricted uniqueness.
       (Contributed by NM, 16-Jun-2017.) $)
    nfrmo $p |- F/ x E* y e. A ph $=
      ( wrmo cv wcel wa wmo df-rmo wnf wtru nftru weq wal wn nfcvf a1i adantl
      wnfc nfeld nfand nfmod2 trud nfxfr ) ACDGCHZDIZAJZCKZBACDLUKBMNUJBCCOBCPB
      QRZUJBMNULUIABULBUHDBCSBDUBULETUCABMULFTUDUAUEUFUG $.
  $}

  $( An ""identity"" law of concretion for restricted abstraction.  Special case
     of Definition 2.1 of [Quine] p. 16.  (Contributed by NM, 9-Oct-2003.) $)
  rabid $p |- ( x e. { x e. A | ph } <-> ( x e. A /\ ph ) ) $=
    ( cv wcel wa crab df-rab abeq2i ) BDCEAFBABCGABCHI $.

  ${
    $d x A $.
    $( An ""identity"" law for restricted class abstraction.  (Contributed by NM,
       9-Oct-2003.)  (Proof shortened by Andrew Salmon, 30-May-2011.) $)
    rabid2 $p |- ( A = { x e. A | ph } <-> A. x e. A ph ) $=
      ( cv wcel wa cab wceq wi wal crab abeq2 pm4.71 albii bitr4i df-rab eqeq2i
      wral wb df-ral 3bitr4i ) CBDCEZAFZBGZHZUBAIZBJZCABCKZHABCRUEUBUCSZBJUGUCB
      CLUFUIBUBAMNOUHUDCABCPQABCTUA $.
  $}

  ${
    $( Equivalent wff's correspond to equal restricted class abstractions.
       Closed theorem form of ~ rabbidva .  (Contributed by NM,
       25-Nov-2013.) $)
    rabbi $p |- ( A. x e. A ( ps <-> ch )
         <-> { x e. A | ps } = { x e. A | ch } ) $=
      ( cv wcel wa wb wal cab wceq wral crab abbi wi df-ral pm5.32 albii df-rab
      bitri eqeq12i 3bitr4i ) CEDFZAGZUCBGZHZCIZUDCJZUECJZKABHZCDLZACDMZBCDMZKU
      DUECNUKUCUJOZCIUGUJCDPUNUFCUCABQRTULUHUMUIACDSBCDSUAUB $.
  $}

  $( Swap with a membership relation in a restricted class abstraction.
     (Contributed by NM, 4-Jul-2005.) $)
  rabswap $p |- { x e. A | x e. B } = { x e. B | x e. A } $=
    ( cv wcel wa cab crab ancom abbii df-rab 3eqtr4i ) ADZBEZMCEZFZAGONFZAGOABH
    NACHPQANOIJOABKNACKL $.

  ${
    $d x y $.
    $( The abstraction variable in a restricted class abstraction isn't free.
       (Contributed by NM, 19-Mar-1997.) $)
    nfrab1 $p |- F/_ x { x e. A | ph } $=
      ( crab cv wcel wa cab df-rab nfab1 nfcxfr ) BABCDBECFAGZBHABCILBJK $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.
    nfrab.1 $e |- F/ x ph $.
    nfrab.2 $e |- F/_ x A $.
    $( A variable not free in a wff remains so in a restricted class
       abstraction.  (Contributed by NM, 13-Oct-2003.)  (Revised by Mario
       Carneiro, 9-Oct-2016.) $)
    nfrab $p |- F/_ x { y e. A | ph } $=
      ( vz crab cv wcel wa cab df-rab wnfc wtru nftru weq wal wn wnf a1i adantl
      nfcri eleq1 dvelimnf nfand nfabd2 trud nfcxfr ) BACDHCIZDJZAKZCLZACDMBUMN
      OULBCCPBCQBRSZULBTOUNUKABGIZDJUKBCGBGDFUCUOUJDUDUEABTUNEUAUFUBUGUHUI $.
  $}

  ${
    reubida.1 $e |- F/ x ph $.
    reubida.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by Mario Carneiro, 19-Nov-2016.) $)
    reubida $p |- ( ph -> ( E! x e. A ps <-> E! x e. A ch ) ) $=
      ( cv wcel wa weu wreu pm5.32da eubid df-reu 3bitr4g ) ADHEIZBJZDKQCJZDKBD
      ELCDELARSDFAQBCGMNBDEOCDEOP $.
  $}

  ${
    $d x ph $.
    reubidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 13-Nov-2004.) $)
    reubidva $p |- ( ph -> ( E! x e. A ps <-> E! x e. A ch ) ) $=
      ( nfv reubida ) ABCDEADGFH $.
  $}

  ${
    $d x ph $.
    reubidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 17-Oct-1996.) $)
    reubidv $p |- ( ph -> ( E! x e. A ps <-> E! x e. A ch ) ) $=
      ( wb cv wcel adantr reubidva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    reubiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Formula-building rule for restricted existential quantifier (inference
       rule).  (Contributed by NM, 14-Nov-2004.) $)
    reubiia $p |- ( E! x e. A ph <-> E! x e. A ps ) $=
      ( cv wcel wa weu wreu pm5.32i eubii df-reu 3bitr4i ) CFDGZAHZCIOBHZCIACDJ
      BCDJPQCOABEKLACDMBCDMN $.
  $}

  ${
    reubii.1 $e |- ( ph <-> ps ) $.
    $( Formula-building rule for restricted existential quantifier (inference
       rule).  (Contributed by NM, 22-Oct-1999.) $)
    reubii $p |- ( E! x e. A ph <-> E! x e. A ps ) $=
      ( wb cv wcel a1i reubiia ) ABCDABFCGDHEIJ $.
  $}

  ${
    rmobida.1 $e |- F/ x ph $.
    rmobida.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 16-Jun-2017.) $)
    rmobida $p |- ( ph -> ( E* x e. A ps <-> E* x e. A ch ) ) $=
      ( cv wcel wa wmo wrmo pm5.32da mobid df-rmo 3bitr4g ) ADHEIZBJZDKQCJZDKBD
      ELCDELARSDFAQBCGMNBDEOCDEOP $.
  $}

  ${
    $d x ph $.
    rmobidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 16-Jun-2017.) $)
    rmobidva $p |- ( ph -> ( E* x e. A ps <-> E* x e. A ch ) ) $=
      ( nfv rmobida ) ABCDEADGFH $.
  $}

  ${
    $d x ph $.
    rmobidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building rule for restricted existential quantifier (deduction
       rule).  (Contributed by NM, 16-Jun-2017.) $)
    rmobidv $p |- ( ph -> ( E* x e. A ps <-> E* x e. A ch ) ) $=
      ( wb cv wcel adantr rmobidva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    rmobiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Formula-building rule for restricted existential quantifier (inference
       rule).  (Contributed by NM, 16-Jun-2017.) $)
    rmobiia $p |- ( E* x e. A ph <-> E* x e. A ps ) $=
      ( cv wcel wa wmo wrmo pm5.32i mobii df-rmo 3bitr4i ) CFDGZAHZCIOBHZCIACDJ
      BCDJPQCOABEKLACDMBCDMN $.
  $}

  ${
    rmobii.1 $e |- ( ph <-> ps ) $.
    $( Formula-building rule for restricted existential quantifier (inference
       rule).  (Contributed by NM, 16-Jun-2017.) $)
    rmobii $p |- ( E* x e. A ph <-> E* x e. A ps ) $=
      ( wb cv wcel a1i rmobiia ) ABCDABFCGDHEIJ $.
  $}

  ${
    $d y A $.  $d y B $.
    raleq1f.1 $e |- F/_ x A $.
    raleq1f.2 $e |- F/_ x B $.
    $( Equality theorem for restricted universal quantifier, with
       bound-variable hypotheses instead of distinct variable restrictions.
       (Contributed by NM, 7-Mar-2004.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
    raleqf $p |- ( A = B -> ( A. x e. A ph <-> A. x e. B ph ) ) $=
      ( wceq cv wcel wi wal wral nfeq eleq2 imbi1d albid df-ral 3bitr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.

    $( Equality theorem for restricted existential quantifier, with
       bound-variable hypotheses instead of distinct variable restrictions.
       (Contributed by NM, 9-Oct-2003.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
    rexeqf $p |- ( A = B -> ( E. x e. A ph <-> E. x e. B ph ) ) $=
      ( wceq cv wcel wa wex wrex nfeq eleq2 anbi1d exbid df-rex 3bitr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.

    $( Equality theorem for restricted uniqueness quantifier, with
       bound-variable hypotheses instead of distinct variable restrictions.
       (Contributed by NM, 5-Apr-2004.)  (Revised by Andrew Salmon,
       11-Jul-2011.) $)
    reueq1f $p |- ( A = B -> ( E! x e. A ph <-> E! x e. B ph ) ) $=
      ( wceq cv wcel wa weu wreu nfeq eleq2 anbi1d eubid df-reu 3bitr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.

    $( Equality theorem for restricted uniqueness quantifier, with
       bound-variable hypotheses instead of distinct variable restrictions.
       (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
    rmoeq1f $p |- ( A = B -> ( E* x e. A ph <-> E* x e. B ph ) ) $=
      ( wceq cv wcel wa wmo wrmo nfeq eleq2 anbi1d mobid df-rmo 3bitr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Equality theorem for restricted universal quantifier.  (Contributed by
       NM, 16-Nov-1995.) $)
    raleq $p |- ( A = B -> ( A. x e. A ph <-> A. x e. B ph ) ) $=
      ( nfcv raleqf ) ABCDBCEBDEF $.

    $( Equality theorem for restricted existential quantifier.  (Contributed by
       NM, 29-Oct-1995.) $)
    rexeq $p |- ( A = B -> ( E. x e. A ph <-> E. x e. B ph ) ) $=
      ( nfcv rexeqf ) ABCDBCEBDEF $.

    $( Equality theorem for restricted uniqueness quantifier.  (Contributed by
       NM, 5-Apr-2004.) $)
    reueq1 $p |- ( A = B -> ( E! x e. A ph <-> E! x e. B ph ) ) $=
      ( nfcv reueq1f ) ABCDBCEBDEF $.

    $( Equality theorem for restricted uniqueness quantifier.  (Contributed by
       Alexander van der Vekens, 17-Jun-2017.) $)
    rmoeq1 $p |- ( A = B -> ( E* x e. A ph <-> E* x e. B ph ) ) $=
      ( nfcv rmoeq1f ) ABCDBCEBDEF $.
  $}

  ${
    $d A x $.  $d B x $.
    raleq1i.1 $e |- A = B $.
    $( Equality inference for restricted universal qualifier.  (Contributed by
       Paul Chapman, 22-Jun-2011.) $)
    raleqi $p |- ( A. x e. A ph <-> A. x e. B ph ) $=
      ( wceq wral wb raleq ax-mp ) CDFABCGABDGHEABCDIJ $.

    $( Equality inference for restricted existential qualifier.  (Contributed
       by Mario Carneiro, 23-Apr-2015.) $)
    rexeqi $p |- ( E. x e. A ph <-> E. x e. B ph ) $=
      ( wceq wrex wb rexeq ax-mp ) CDFABCGABDGHEABCDIJ $.
  $}

  ${
    $d x A $.  $d x B $.
    raleq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       NM, 13-Nov-2005.) $)
    raleqdv $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ps ) ) $=
      ( wceq wral wb raleq syl ) ADEGBCDHBCEHIFBCDEJK $.

    $( Equality deduction for restricted existential quantifier.  (Contributed
       by NM, 14-Jan-2007.) $)
    rexeqdv $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ps ) ) $=
      ( wceq wrex wb rexeq syl ) ADEGBCDHBCEHIFBCDEJK $.
  $}

  ${
    $d x A $.  $d x B $.
    raleqd.1 $e |- ( A = B -> ( ph <-> ps ) ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       NM, 16-Nov-1995.) $)
    raleqbi1dv $p |- ( A = B -> ( A. x e. A ph <-> A. x e. B ps ) ) $=
      ( wceq wral raleq ralbidv bitrd ) DEGZACDHACEHBCEHACDEILABCEFJK $.

    $( Equality deduction for restricted existential quantifier.  (Contributed
       by NM, 18-Mar-1997.) $)
    rexeqbi1dv $p |- ( A = B -> ( E. x e. A ph <-> E. x e. B ps ) ) $=
      ( wceq wrex rexeq rexbidv bitrd ) DEGZACDHACEHBCEHACDEILABCEFJK $.

    $( Equality deduction for restricted uniqueness quantifier.  (Contributed
       by NM, 5-Apr-2004.) $)
    reueqd $p |- ( A = B -> ( E! x e. A ph <-> E! x e. B ps ) ) $=
      ( wceq wreu reueq1 reubidv bitrd ) DEGZACDHACEHBCEHACDEILABCEFJK $.

    $( Equality deduction for restricted uniqueness quantifier.  (Contributed
       by Alexander van der Vekens, 17-Jun-2017.) $)
    rmoeqd $p |- ( A = B -> ( E* x e. A ph <-> E* x e. B ps ) ) $=
      ( wceq wrmo rmoeq1 rmobidv bitrd ) DEGZACDHACEHBCEHACDEILABCEFJK $.
  $}

  ${
    raleqbid.0 $e |- F/ x ph $.
    raleqbid.1 $e |- F/_ x A $.
    raleqbid.2 $e |- F/_ x B $.
    raleqbid.3 $e |- ( ph -> A = B ) $.
    raleqbid.4 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       Thierry Arnoux, 8-Mar-2017.) $)
    raleqbid $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $=
      ( wral wceq wb raleqf syl ralbid bitrd ) ABDELZBDFLZCDFLAEFMSTNJBDEFHIOPA
      BCDFGKQR $.

    $( Equality deduction for restricted existential quantifier.  (Contributed
       by Thierry Arnoux, 8-Mar-2017.) $)
    rexeqbid $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $=
      ( wrex wceq wb rexeqf syl rexbid bitrd ) ABDELZBDFLZCDFLAEFMSTNJBDEFHIOPA
      BCDFGKQR $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    raleqbidv.1 $e |- ( ph -> A = B ) $.
    raleqbidv.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       NM, 6-Nov-2007.) $)
    raleqbidv $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $=
      ( wral raleqdv ralbidv bitrd ) ABDEIBDFICDFIABDEFGJABCDFHKL $.

    $( Equality deduction for restricted universal quantifier.  (Contributed by
       NM, 6-Nov-2007.) $)
    rexeqbidv $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $=
      ( wrex rexeqdv rexbidv bitrd ) ABDEIBDFICDFIABDEFGJABCDFHKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    raleqbidva.1 $e |- ( ph -> A = B ) $.
    raleqbidva.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       Mario Carneiro, 5-Jan-2017.) $)
    raleqbidva $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ch ) ) $=
      ( wral ralbidva raleqdv bitrd ) ABDEICDEICDFIABCDEHJACDEFGKL $.

    $( Equality deduction for restricted universal quantifier.  (Contributed by
       Mario Carneiro, 5-Jan-2017.) $)
    rexeqbidva $p |- ( ph -> ( E. x e. A ps <-> E. x e. B ch ) ) $=
      ( wrex rexbidva rexeqdv bitrd ) ABDEICDEICDFIABCDEHJACDEFGKL $.
  $}

  $( Unrestricted ""at most one"" implies restricted ""at most one"".  (Contributed
     by NM, 16-Jun-2017.) $)
  mormo $p |- ( E* x ph -> E* x e. A ph ) $=
    ( wmo cv wcel wa wrmo moan df-rmo sylibr ) ABDBECFZAGBDABCHALBIABCJK $.

  $( Restricted uniqueness in terms of ""at most one.""  (Contributed by NM,
     23-May-1999.)  (Revised by NM, 16-Jun-2017.) $)
  reu5 $p |- ( E! x e. A ph <-> ( E. x e. A ph /\ E* x e. A ph ) ) $=
    ( cv wcel wa weu wex wmo wreu wrex eu5 df-reu df-rex df-rmo anbi12i 3bitr4i
    wrmo ) BDCEAFZBGSBHZSBIZFABCJABCKZABCRZFSBLABCMUBTUCUAABCNABCOPQ $.

  $( Restricted unique existence implies restricted existence.  (Contributed by
     NM, 19-Aug-1999.) $)
  reurex $p |- ( E! x e. A ph -> E. x e. A ph ) $=
    ( wreu wrex wrmo reu5 simplbi ) ABCDABCEABCFABCGH $.

  $( Restricted existential uniqueness implies restricted ""at most one.""
     (Contributed by NM, 16-Jun-2017.) $)
  reurmo $p |- ( E! x e. A ph -> E* x e. A ph ) $=
    ( wreu wrex wrmo reu5 simprbi ) ABCDABCEABCFABCGH $.

  $( Restricted ""at most one"" in term of uniqueness.  (Contributed by NM,
     16-Jun-2017.) $)
  rmo5 $p |- ( E* x e. A ph <-> ( E. x e. A ph -> E! x e. A ph ) ) $=
    ( cv wcel wa wmo wex weu wrmo wrex wreu df-mo df-rmo df-rex imbi12i 3bitr4i
    wi df-reu ) BDCEAFZBGTBHZTBIZRABCJABCKZABCLZRTBMABCNUCUAUDUBABCOABCSPQ $.

  $( Nonexistence implies restricted ""at most one"".  (Contributed by NM,
     17-Jun-2017.) $)
  nrexrmo $p |- ( -. E. x e. A ph -> E* x e. A ph ) $=
    ( wrex wn wreu wi wrmo pm2.21 rmo5 sylibr ) ABCDZELABCFZGABCHLMIABCJK $.

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z ps $.  $d z ph $.
    cbvralf.1 $e |- F/_ x A $.
    cbvralf.2 $e |- F/_ y A $.
    cbvralf.3 $e |- F/ y ph $.
    cbvralf.4 $e |- F/ x ps $.
    cbvralf.5 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 7-Mar-2004.)  (Revised by Mario Carneiro,
       9-Oct-2016.) $)
    cbvralf $p |- ( A. x e. A ph <-> A. y e. A ps ) $=
      ( vz cv wcel wi wal wral wsb nfv nfcri nfim nfs1v weq eleq1 sbequ12 cbval
      imbi12d nfsb sbequ sbie syl6bb bitri df-ral 3bitr4i ) CLZEMZANZCOZDLZEMZB
      NZDOZACEPBDEPUQKLZEMZACKQZNZKOVAUPVECKUPKRVCVDCCKEFSACKUATCKUBUOVCAVDUNVB
      EUCACKUDUFUEVEUTKDVCVDDDKEGSACKDHUGTUTKRKDUBZVCUSVDBVBUREUCVFVDACDQBAKDCU
      HABCDIJUIUJUFUEUKACEULBDEULUM $.

    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by FL, 27-Apr-2008.)  (Revised by Mario Carneiro,
       9-Oct-2016.) $)
    cbvrexf $p |- ( E. x e. A ph <-> E. y e. A ps ) $=
      ( wn wral wrex nfn weq notbid cbvralf notbii dfrex2 3bitr4i ) AKZCELZKBKZ
      DELZKACEMBDEMUBUDUAUCCDEFGADHNBCINCDOABJPQRACESBDEST $.
  $}

  ${
    $d x z A $.  $d y z A $.  $d z ph $.  $d z ps $.
    cbvral.1 $e |- F/ y ph $.
    cbvral.2 $e |- F/ x ps $.
    cbvral.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 31-Jul-2003.) $)
    cbvral $p |- ( A. x e. A ph <-> A. y e. A ps ) $=
      ( nfcv cbvralf ) ABCDECEIDEIFGHJ $.

    $( Rule used to change bound variables, using implicit substitution.
       (Contributed by NM, 31-Jul-2003.)  (Proof shortened by Andrew Salmon,
       8-Jun-2011.) $)
    cbvrex $p |- ( E. x e. A ph <-> E. y e. A ps ) $=
      ( nfcv cbvrexf ) ABCDECEIDEIFGHJ $.

    $( Change the bound variable of a restricted uniqueness quantifier using
       implicit substitution.  (Contributed by Mario Carneiro, 15-Oct-2016.) $)
    cbvreu $p |- ( E! x e. A ph <-> E! y e. A ps ) $=
      ( vz cv wcel wa weu wreu wsb nfv sb8eu sban eubii df-reu anbi1i nfsb nfan
      clelsb3 weq eleq1 sbequ sbie syl6bb anbi12d cbveu bitri 3bitri 3bitr4i )
      CJEKZALZCMZDJZEKZBLZDMZACENBDENUQUPCIOZIMUOCIOZACIOZLZIMZVAUPCIUPIPQVBVEI
      UOACIRSVFIJZEKZVDLZIMVAVEVIIVCVHVDICEUDUASVIUTIDVHVDDVHDPACIDFUBUCUTIPIDU
      EZVHUSVDBVGUREUFVJVDACDOBAIDCUGABCDGHUHUIUJUKULUMACETBDETUN $.

    $( Change the bound variable of restricted ""at most one"" using implicit
       substitution.  (Contributed by NM, 16-Jun-2017.) $)
    cbvrmo $p |- ( E* x e. A ph <-> E* y e. A ps ) $=
      ( wrex wreu wi wrmo cbvrex cbvreu imbi12i rmo5 3bitr4i ) ACEIZACEJZKBDEIZ
      BDEJZKACELBDELRTSUAABCDEFGHMABCDEFGHNOACEPBDEPQ $.
  $}

  ${
    $d z x A $.  $d y A $.  $d z y ph $.  $d z x ps $.
    cbvralv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change the bound variable of a restricted universal quantifier using
       implicit substitution.  (Contributed by NM, 28-Jan-1997.) $)
    cbvralv $p |- ( A. x e. A ph <-> A. y e. A ps ) $=
      ( nfv cbvral ) ABCDEADGBCGFH $.

    $( Change the bound variable of a restricted existential quantifier using
       implicit substitution.  (Contributed by NM, 2-Jun-1998.) $)
    cbvrexv $p |- ( E. x e. A ph <-> E. y e. A ps ) $=
      ( nfv cbvrex ) ABCDEADGBCGFH $.

    $( Change the bound variable of a restricted uniqueness quantifier using
       implicit substitution.  (Contributed by NM, 5-Apr-2004.)  (Revised by
       Mario Carneiro, 15-Oct-2016.) $)
    cbvreuv $p |- ( E! x e. A ph <-> E! y e. A ps ) $=
      ( nfv cbvreu ) ABCDEADGBCGFH $.

    $( Change the bound variable of a restricted uniqueness quantifier using
       implicit substitution.  (Contributed by Alexander van der Vekens,
       17-Jun-2017.) $)
    cbvrmov $p |- ( E* x e. A ph <-> E* y e. A ps ) $=
      ( nfv cbvrmo ) ABCDEADGBCGFH $.
  $}

  ${
    $d A y $.  $d ps y $.  $d B x $.  $d ch x $.  $d x ph y $.
    cbvraldva2.1 $e |- ( ( ph /\ x = y ) -> ( ps <-> ch ) ) $.
    cbvraldva2.2 $e |- ( ( ph /\ x = y ) -> A = B ) $.
    $( Rule used to change the bound variable in a restricted universal
       quantifier with implicit substitution which also changes the quantifier
       domain.  Deduction form.  (Contributed by David Moews, 1-May-2017.) $)
    cbvraldva2 $p |- ( ph -> ( A. x e. A ps <-> A. y e. B ch ) ) $=
      ( cv wcel wi wal wral weq wa simpr eleq12d imbi12d df-ral cbvaldva
      3bitr4g ) ADJZFKZBLZDMEJZGKZCLZEMBDFNCEGNAUEUHDEADEOZPZUDUGBCUJUCUFFGAUIQ
      IRHSUABDFTCEGTUB $.

    $( Rule used to change the bound variable in a restricted existential
       quantifier with implicit substitution which also changes the quantifier
       domain.  Deduction form.  (Contributed by David Moews, 1-May-2017.) $)
    cbvrexdva2 $p |- ( ph -> ( E. x e. A ps <-> E. y e. B ch ) ) $=
      ( cv wcel wa wex wrex weq simpr eleq12d anbi12d cbvexdva df-rex 3bitr4g )
      ADJZFKZBLZDMEJZGKZCLZEMBDFNCEGNAUDUGDEADEOZLZUCUFBCUIUBUEFGAUHPIQHRSBDFTC
      EGTUA $.
  $}

  ${
    $d ps y $.  $d ch x $.  $d A x y $.  $d x ph y $.
    cbvraldva.1 $e |- ( ( ph /\ x = y ) -> ( ps <-> ch ) ) $.
    $( Rule used to change the bound variable in a restricted universal
       quantifier with implicit substitution.  Deduction form.  (Contributed by
       David Moews, 1-May-2017.) $)
    cbvraldva $p |- ( ph -> ( A. x e. A ps <-> A. y e. A ch ) ) $=
      ( weq wa eqidd cbvraldva2 ) ABCDEFFGADEHIFJK $.

    $( Rule used to change the bound variable in a restricted existential
       quantifier with implicit substitution.  Deduction form.  (Contributed by
       David Moews, 1-May-2017.) $)
    cbvrexdva $p |- ( ph -> ( E. x e. A ps <-> E. y e. A ch ) ) $=
      ( weq wa eqidd cbvrexdva2 ) ABCDEFFGADEHIFJK $.
  $}

  ${
    $d x A $.  $d z A $.  $d x y B $.  $d z y B $.  $d w B $.  $d z ph $.
    $d y ps $.  $d x ch $.  $d w ch $.
    cbvral2v.1 $e |- ( x = z -> ( ph <-> ch ) ) $.
    cbvral2v.2 $e |- ( y = w -> ( ch <-> ps ) ) $.
    $( Change bound variables of double restricted universal quantification,
       using implicit substitution.  (Contributed by NM, 10-Aug-2004.) $)
    cbvral2v $p |- ( A. x e. A A. y e. B ph <-> A. z e. A A. w e. B ps ) $=
      ( wral weq ralbidv cbvralv ralbii bitri ) AEILZDHLCEILZFHLBGILZFHLRSDFHDF
      MACEIJNOSTFHCBEGIKOPQ $.
  $}

  ${
    $d A x $.  $d A z $.  $d B w $.  $d B x y $.  $d B z y $.  $d ch w $.
    $d ch x $.  $d ph z $.  $d ps y $.
    cbvrex2v.1 $e |- ( x = z -> ( ph <-> ch ) ) $.
    cbvrex2v.2 $e |- ( y = w -> ( ch <-> ps ) ) $.
    $( Change bound variables of double restricted universal quantification,
       using implicit substitution.  (Contributed by FL, 2-Jul-2012.) $)
    cbvrex2v $p |- ( E. x e. A E. y e. B ph <-> E. z e. A E. w e. B ps ) $=
      ( wrex weq rexbidv cbvrexv rexbii bitri ) AEILZDHLCEILZFHLBGILZFHLRSDFHDF
      MACEIJNOSTFHCBEGIKOPQ $.
  $}

  ${
    $d w ph $.  $d z ps $.  $d x ch $.  $d v ch $.  $d y u th $.  $d x A $.
    $d w A $.  $d x y B $.  $d w y B $.  $d v B $.  $d x y z C $.
    $d w y z C $.  $d v z C $.  $d z y C $.  $d z C $.  $d u C $.
    cbvral3v.1 $e |- ( x = w -> ( ph <-> ch ) ) $.
    cbvral3v.2 $e |- ( y = v -> ( ch <-> th ) ) $.
    cbvral3v.3 $e |- ( z = u -> ( th <-> ps ) ) $.
    $( Change bound variables of triple restricted universal quantification,
       using implicit substitution.  (Contributed by NM, 10-May-2005.) $)
    cbvral3v $p |- ( A. x e. A A. y e. B A. z e. C ph <->
                     A. w e. A A. v e. B A. u e. C ps ) $=
      ( wral weq 2ralbidv cbvralv cbvral2v ralbii bitri ) AGMQFLQZEKQCGMQFLQZHK
      QBJMQILQZHKQUDUEEHKEHRACFGLMNSTUEUFHKCBDFGIJLMOPUAUBUC $.
  $}

  ${
    $d z x A $.  $d y A $.  $d z y ph $.
    $( Change bound variable by using a substitution.  (Contributed by NM,
       20-Nov-2005.)  (Revised by Andrew Salmon, 11-Jul-2011.) $)
    cbvralsv $p |- ( A. x e. A ph <-> A. y e. A [ y / x ] ph ) $=
      ( vz wral wsb nfv nfs1v sbequ12 cbvral nfsb sbequ bitri ) ABDFABEGZEDFABC
      GZCDFAOBEDAEHABEIABEJKOPECDABECACHLPEHAECBMKN $.
  $}

  ${
    $d z x A $.  $d y z ph $.  $d y A $.
    $( Change bound variable by using a substitution.  (Contributed by NM,
       2-Mar-2008.)  (Revised by Andrew Salmon, 11-Jul-2011.) $)
    cbvrexsv $p |- ( E. x e. A ph <-> E. y e. A [ y / x ] ph ) $=
      ( vz wrex wsb nfv nfs1v sbequ12 cbvrex nfsb sbequ bitri ) ABDFABEGZEDFABC
      GZCDFAOBEDAEHABEIABEJKOPECDABECACHLPEHAECBMKN $.
  $}

  ${
    $d x y z $.  $d y z ph $.  $d x z ps $.
    sbralie.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Implicit to explicit substitution that swaps variables in a quantified
       expression.  (Contributed by NM, 5-Sep-2004.) $)
    sbralie $p |- ( [ x / y ] A. x e. y ph <-> A. y e. x ps ) $=
      ( vz cv wral wsb cbvralsv sbbii nfv raleq sbie bitri sbco2 ralbii ) ACDGZ
      HZDCIZACFIZFCGZHZBDUBHZTUAFRHZDCIUCSUEDCACFRJKUEUCDCUCDLUAFRUBMNOUCUAFDIZ
      DUBHUDUAFDUBJUFBDUBUFACDIBACDFAFLPABCDBCLENOQOO $.
  $}

  ${
    rabbiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions (inference
       rule).  (Contributed by NM, 22-May-1999.) $)
    rabbiia $p |- { x e. A | ph } = { x e. A | ps } $=
      ( cv wcel wa cab crab pm5.32i abbii df-rab 3eqtr4i ) CFDGZAHZCIOBHZCIACDJ
      BCDJPQCOABEKLACDMBCDMN $.
  $}

  ${
    $d x ph $.
    rabbidva2.1 $e |- ( ph -> ( ( x e. A /\ ps ) <-> ( x e. B /\ ch ) ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions.
       (Contributed by Thierry Arnoux, 4-Feb-2017.) $)
    rabbidva2 $p |- ( ph -> { x e. A | ps } = { x e. B | ch } ) $=
      ( cv wcel wa cab crab abbidv df-rab 3eqtr4g ) ADHZEIBJZDKPFICJZDKBDELCDFL
      AQRDGMBDENCDFNO $.
  $}

  ${
    $d x ph $.
    rabbidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions (deduction
       rule).  (Contributed by NM, 28-Nov-2003.) $)
    rabbidva $p |- ( ph -> { x e. A | ps } = { x e. A | ch } ) $=
      ( wb wral crab wceq ralrimiva rabbi sylib ) ABCGZDEHBDEICDEIJANDEFKBCDELM
      $.
  $}

  ${
    $d x ph $.
    rabbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions (deduction
       rule).  (Contributed by NM, 10-Feb-1995.) $)
    rabbidv $p |- ( ph -> { x e. A | ps } = { x e. A | ch } ) $=
      ( wb cv wcel adantr rabbidva ) ABCDEABCGDHEIFJK $.
  $}

  ${
    $d y A $.  $d y B $.
    rabeqf.1 $e |- F/_ x A $.
    rabeqf.2 $e |- F/_ x B $.
    $( Equality theorem for restricted class abstractions, with bound-variable
       hypotheses instead of distinct variable restrictions.  (Contributed by
       NM, 7-Mar-2004.) $)
    rabeqf $p |- ( A = B -> { x e. A | ph } = { x e. B | ph } ) $=
      ( wceq cv wcel wa cab crab nfeq eleq2 anbi1d abbid df-rab 3eqtr4g ) CDGZB
      HZCIZAJZBKTDIZAJZBKABCLABDLSUBUDBBCDEFMSUAUCACDTNOPABCQABDQR $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Equality theorem for restricted class abstractions.  (Contributed by NM,
       15-Oct-2003.) $)
    rabeq $p |- ( A = B -> { x e. A | ph } = { x e. B | ph } ) $=
      ( nfcv rabeqf ) ABCDBCEBDEF $.
  $}

  ${
    $d A x $.  $d B x $.  $d ph x $.
    rabeqbidv.1 $e |- ( ph -> A = B ) $.
    rabeqbidv.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equality of restricted class abstractions.  (Contributed by Jeff Madsen,
       1-Dec-2009.) $)
    rabeqbidv $p |- ( ph -> { x e. A | ps } = { x e. B | ch } ) $=
      ( crab wceq rabeq syl rabbidv eqtrd ) ABDEIZBDFIZCDFIAEFJOPJGBDEFKLABCDFH
      MN $.
  $}

  ${
    $d A x $.  $d B x $.  $d ph x $.
    rabeqbidva.1 $e |- ( ph -> A = B ) $.
    rabeqbidva.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Equality of restricted class abstractions.  (Contributed by Mario
       Carneiro, 26-Jan-2017.) $)
    rabeqbidva $p |- ( ph -> { x e. A | ps } = { x e. B | ch } ) $=
      ( crab rabbidva wceq rabeq syl eqtrd ) ABDEICDEIZCDFIZABCDEHJAEFKOPKGCDEF
      LMN $.
  $}

  ${
    rabeqi.1 $e |- A = { x e. B | ph } $.
    $( Inference rule from equality of a class variable and a restricted class
       abstraction.  (Contributed by NM, 16-Feb-2004.) $)
    rabeq2i $p |- ( x e. A <-> ( x e. B /\ ph ) ) $=
      ( cv wcel crab wa eleq2i rabid bitri ) BFZCGMABDHZGMDGAICNMEJABDKL $.
  $}

  ${
    $d x z $.  $d y z $.  $d A z $.  $d ph z $.  $d ps z $.
    cbvrab.1 $e |- F/_ x A $.
    cbvrab.2 $e |- F/_ y A $.
    cbvrab.3 $e |- F/ y ph $.
    cbvrab.4 $e |- F/ x ps $.
    cbvrab.5 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule to change the bound variable in a restricted class abstraction,
       using implicit substitution.  This version has bound-variable hypotheses
       in place of distinct variable conditions.  (Contributed by Andrew
       Salmon, 11-Jul-2011.)  (Revised by Mario Carneiro, 9-Oct-2016.) $)
    cbvrab $p |- { x e. A | ph } = { y e. A | ps } $=
      ( vz cv wcel wa cab crab wsb nfv nfcri nfan nfs1v weq eleq1 sbequ12 cbvab
      anbi12d nfsb sbequ sbie syl6bb eqtri df-rab 3eqtr4i ) CLZEMZANZCOZDLZEMZB
      NZDOZACEPBDEPUQKLZEMZACKQZNZKOVAUPVECKUPKRVCVDCCKEFSACKUATCKUBUOVCAVDUNVB
      EUCACKUDUFUEVEUTKDVCVDDDKEGSACKDHUGTUTKRKDUBZVCUSVDBVBUREUCVFVDACDQBAKDCU
      HABCDIJUIUJUFUEUKACEULBDEULUM $.
  $}

  ${
    $d x y z A $.  $d y ph $.  $d x ps $.
    cbvrabv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Rule to change the bound variable in a restricted class abstraction,
       using implicit substitution.  (Contributed by NM, 26-May-1999.) $)
    cbvrabv $p |- { x e. A | ph } = { y e. A | ps } $=
      ( nfcv nfv cbvrab ) ABCDECEGDEGADHBCHFI $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        The universal class
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare the symbol for the universal class. $)
  $c _V $. $( Letter V (for the universal class) $)

  $( Extend class notation to include the universal class symbol. $)
  cvv $a class _V $.

  ${
    $d z x $.  $d z y $.
    $( Soundness justification theorem for ~ df-v .  (Contributed by Rodolfo
       Medina, 27-Apr-2010.) $)
    vjust $p |- { x | x = x } = { y | y = y } $=
      ( vz weq cab wsb cv wcel equid sbt 2th df-clab 3bitr4i eqriv ) CAADZAEZBB
      DZBEZOACFZQBCFZCGZPHUARHSTOACAIJQBCBIJKOCALQCBLMN $.
  $}

  $( Define the universal class.  Definition 5.20 of [TakeutiZaring] p. 21.
     Also Definition 2.9 of [Quine] p. 19.  The class ` _V ` can be described
     as the ""class of all sets""; ~ vprc proves that ` _V ` is not itself a set
     in ZFC. We will frequently use the expression ` A e. _V ` as a short way
     to say "" ` A ` is a set"", and ~ isset proves that this expression has the
     same meaning as ` E. x x = A ` .  The class ` _V ` is called the ""von
     Neumann universe"", however, the letter ""V"" is not a tribute to the name of
     von Neumann.  The letter ""V"" was used earlier by Peano in 1889 for the
     universe of sets, where the letter V is derived from the word ""Verum"".
     Peano's notation V was adopted by Whitehead and Russell in Principia
     Mathematica for the class of all sets in 1910.  For a general discussion
     of the theory of classes, see
     ~ http://us.metamath.org/mpeuni/mmset.html#class .  (Contributed by NM,
     26-May-1993.) $)
  df-v $a |- _V = { x | x = x } $.

  $( All setvar variables are sets (see ~ isset ).  Theorem 6.8 of [Quine]
     p. 43.  (Contributed by NM, 26-May-1993.) $)
  vex $p |- x e. _V $=
    ( cv cvv wcel weq equid df-v abeq2i mpbir ) ABCDAAEZAFJACAGHI $.

  ${
    $d x A $.
    $( Two ways to say "" ` A ` is a set"":  A class ` A ` is a member of the
       universal class ` _V ` (see ~ df-v ) if and only if the class ` A `
       exists (i.e. there exists some set ` x ` equal to class ` A ` ).
       Theorem 6.9 of [Quine] p. 43. _Notational convention_:  We will use the
       notational device "" ` A e. _V ` "" to mean "" ` A ` is a set"" very
       frequently, for example in ~ uniex .  Note the when ` A ` is not a set,
       it is called a proper class.  In some theorems, such as ~ uniexg , in
       order to shorten certain proofs we use the more general antecedent
       ` A e. V ` instead of ` A e. _V ` to mean "" ` A ` is a set.""

       Note that a constant is implicitly considered distinct from all
       variables.  This is why ` _V ` is not included in the distinct variable
       list, even though ~ df-clel requires that the expression substituted for
       ` B ` not contain ` x ` .  (Also, the Metamath spec does not allow
       constants in the distinct variable list.)  (Contributed by NM,
       26-May-1993.) $)
    isset $p |- ( A e. _V <-> E. x x = A ) $=
      ( cvv wcel cv wceq wa wex df-clel vex biantru exbii bitr4i ) BCDAEZBFZNCD
      ZGZAHOAHABCIOQAPOAJKLM $.
  $}

  ${
    $d A y $.  $d x y $.
    issetf.1 $e |- F/_ x A $.
    $( A version of ~ isset that does not require ` x ` and ` A ` to be
       distinct.  (Contributed by Andrew Salmon, 6-Jun-2011.)  (Revised by
       Mario Carneiro, 10-Oct-2016.) $)
    issetf $p |- ( A e. _V <-> E. x x = A ) $=
      ( vy cvv wcel cv wceq wex isset nfeq2 nfv eqeq1 cbvex bitri ) BEFDGZBHZDI
      AGZBHZAIDBJQSDAAPBCKSDLPRBMNO $.
  $}

  ${
    $d x A $.
    isseti.1 $e |- A e. _V $.
    $( A way to say "" ` A ` is a set"" (inference rule).  (Contributed by NM,
       24-Jun-1993.) $)
    isseti $p |- E. x x = A $=
      ( cvv wcel cv wceq wex isset mpbi ) BDEAFBGAHCABIJ $.
  $}

  ${
    $d x A $.
    issetri.1 $e |- E. x x = A $.
    $( A way to say "" ` A ` is a set"" (inference rule).  (Contributed by NM,
       21-Jun-1993.) $)
    issetri $p |- A e. _V $=
      ( cvv wcel cv wceq wex isset mpbir ) BDEAFBGAHCABIJ $.
  $}

  $( A class equal to a variable is a set.  Note the absence of dv condition,
     contrary to ~ isset and ~ issetri .  (Contributed by BJ, 27-Apr-2019.) $)
  eqvisset $p |- ( x = A -> A e. _V ) $=
    ( cv wceq cvv wcel vex eleq1 mpbii ) ACZBDJEFBEFAGJBEHI $.

  ${
    $d x A $.  $d x B $.
    $( If a class is a member of another class, it is a set.  Theorem 6.12 of
       [Quine] p. 44.  (Contributed by NM, 26-May-1993.)  (Proof shortened by
       Andrew Salmon, 8-Jun-2011.) $)
    elex $p |- ( A e. B -> A e. _V ) $=
      ( vx cv wceq wcel wa wex cvv exsimpl df-clel isset 3imtr4i ) CDZAEZNBFZGC
      HOCHABFAIFOPCJCABKCALM $.
  $}

  ${
    elexi.1 $e |- A e. B $.
    $( If a class is a member of another class, it is a set.  (Contributed by
       NM, 11-Jun-1994.) $)
    elexi $p |- A e. _V $=
      ( wcel cvv elex ax-mp ) ABDAEDCABFG $.
  $}

  ${
    $d x A $.
    $( An element of a class exists.  (Contributed by NM, 1-May-1995.) $)
    elisset $p |- ( A e. V -> E. x x = A ) $=
      ( wcel cvv cv wceq wex elex isset sylib ) BCDBEDAFBGAHBCIABJK $.
  $}

  ${
    $d x A $.  $d x B $.
    $( If a class contains another class, then it contains some set.
       (Contributed by Alan Sare, 25-Sep-2011.) $)
    elex2 $p |- ( A e. B -> E. x x e. B ) $=
      ( wcel cv wceq wi wal wex eleq1a alrimiv elisset exim sylc ) BCDZAEZBFZPC
      DZGZAHQAIRAIOSABCPJKABCLQRAMN $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( If two classes each contain another class, then both contain some set.
       (Contributed by Alan Sare, 24-Oct-2011.) $)
    elex22 $p |- ( ( A e. B /\ A e. C ) -> E. x ( x e. B /\ x e. C ) ) $=
      ( wcel wa cv wceq wi wal eleq1a anim12ii alrimiv elisset adantr exim sylc
      wex ) BCEZBDEZFZAGZBHZUBCEZUBDEZFZIZAJUCARZUFARUAUGASUCUDTUEBCUBKBDUBKLMS
      UHTABCNOUCUFAPQ $.
  $}

  $( A universal quantifier restricted to the universe is unrestricted.
     (Contributed by NM, 26-Mar-2004.) $)
  ralv $p |- ( A. x e. _V ph <-> A. x ph ) $=
    ( cvv wral cv wcel wi wal df-ral vex a1bi albii bitr4i ) ABCDBECFZAGZBHABHA
    BCIAOBNABJKLM $.

  $( An existential quantifier restricted to the universe is unrestricted.
     (Contributed by NM, 26-Mar-2004.) $)
  rexv $p |- ( E. x e. _V ph <-> E. x ph ) $=
    ( cvv wrex cv wcel wa wex df-rex vex biantrur exbii bitr4i ) ABCDBECFZAGZBH
    ABHABCIAOBNABJKLM $.

  $( A uniqueness quantifier restricted to the universe is unrestricted.
     (Contributed by NM, 1-Nov-2010.) $)
  reuv $p |- ( E! x e. _V ph <-> E! x ph ) $=
    ( cvv wreu cv wcel wa weu df-reu vex biantrur eubii bitr4i ) ABCDBECFZAGZBH
    ABHABCIAOBNABJKLM $.

  $( A uniqueness quantifier restricted to the universe is unrestricted.
     (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
  rmov $p |- ( E* x e. _V ph <-> E* x ph ) $=
    ( cvv wrmo cv wcel wa wmo df-rmo vex biantrur mobii bitr4i ) ABCDBECFZAGZBH
    ABHABCIAOBNABJKLM $.

  $( A class abstraction restricted to the universe is unrestricted.
     (Contributed by NM, 27-Dec-2004.)  (Proof shortened by Andrew Salmon,
     8-Jun-2011.) $)
  rabab $p |- { x e. _V | ph } = { x | ph } $=
    ( cvv crab cv wcel wa cab df-rab vex biantrur abbii eqtr4i ) ABCDBECFZAGZBH
    ABHABCIAOBNABJKLM $.

  ${
    $d x y $.  $d y A $.
    $( Commutation of restricted and unrestricted universal quantifiers.
       (Contributed by NM, 26-Mar-2004.)  (Proof shortened by Andrew Salmon,
       8-Jun-2011.) $)
    ralcom4 $p |- ( A. x e. A A. y ph <-> A. y A. x e. A ph ) $=
      ( cvv wral wal ralcom ralv ralbii 3bitr3i ) ACEFZBDFABDFZCEFACGZBDFMCGABC
      DEHLNBDACIJMCIK $.

    $( Commutation of restricted and unrestricted existential quantifiers.
       (Contributed by NM, 12-Apr-2004.)  (Proof shortened by Andrew Salmon,
       8-Jun-2011.) $)
    rexcom4 $p |- ( E. x e. A E. y ph <-> E. y E. x e. A ph ) $=
      ( cvv wrex wex rexcom rexv rexbii 3bitr3i ) ACEFZBDFABDFZCEFACGZBDFMCGABC
      DEHLNBDACIJMCIK $.
  $}

  ${
    $d A x $.  $d x y $.  $d ph x $.
    $( Specialized existential commutation lemma.  (Contributed by Jeff Madsen,
       1-Jun-2011.) $)
    rexcom4a $p |- ( E. x E. y e. A ( ph /\ ps )
                          <-> E. y e. A ( ph /\ E. x ps ) ) $=
      ( wa wrex wex rexcom4 19.42v rexbii bitr3i ) ABFZDEGCHMCHZDEGABCHFZDEGMDC
      EINODEABCJKL $.

    $d B x $.
    rexcom4b.1 $e |- B e. _V $.
    $( Specialized existential commutation lemma.  (Contributed by Jeff Madsen,
       1-Jun-2011.) $)
    rexcom4b $p |- ( E. x E. y e. A ( ph /\ x = B ) <-> E. y e. A ph ) $=
      ( cv wceq wa wrex wex rexcom4a isseti biantru rexbii bitr4i ) ABGEHZICDJB
      KAQBKZIZCDJACDJAQBCDLASCDRABEFMNOP $.
  $}

  ${
    $d x A $.
    $( Closed theorem version of ~ ceqsalg .  (Contributed by NM,
       28-Feb-2013.)  (Revised by Mario Carneiro, 10-Oct-2016.) $)
    ceqsalt $p |- ( ( F/ x ps /\ A. x ( x = A -> ( ph <-> ps ) ) /\ A e. V )
         -> ( A. x ( x = A -> ph ) <-> ps ) ) $=
      ( wnf cv wceq wb wi wal wcel w3a wex elisset 3ad2ant3 bi1 imim3i 3ad2ant2
      3ad2ant1 al2imi 19.23t sylibd mpid imim2i com23 alimi 19.21t mpbid impbid
      bi2 ) BCFZCGDHZABIZJZCKZDELZMZUMAJZCKZBURUTUMCNZBUQULVAUPCDEOPURUTUMBJZCK
      ZVABJZUPULUTVCJUQUOUSVBCUNABUMABQRUASULUPVCVDIUQUMBCUBTUCUDURBUSJZCKZBUTJ
      ZUPULVFUQUOVECUOUMBAUNBAJUMABUKUEUFUGSULUPVFVGIUQBUSCUHTUIUJ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Restricted quantifier version of ~ ceqsalt .  (Contributed by NM,
       28-Feb-2013.)  (Revised by Mario Carneiro, 10-Oct-2016.) $)
    ceqsralt $p |- ( ( F/ x ps
              /\ A. x ( x = A -> ( ph <-> ps ) ) /\ A e. B )
         -> ( A. x e. B ( x = A -> ph ) <-> ps ) ) $=
      ( wnf cv wceq wb wi wal wcel w3a wral df-ral eleq1 pm5.32ri imbi1i impexp
      wa 3bitr3i albii a1i syl5bb 19.21v syl6bb biimt 3ad2ant3 ceqsalt 3bitr2d
      ) BCFZCGZDHZABIJCKZDELZMZUMAJZCENZUOUQCKZJZUSBUPURUOUQJZCKZUTURULELZUQJZC
      KZUPVBUQCEOVEVBIUPVDVACVCUMTZAJUOUMTZAJVDVAVFVGAUMVCUOULDEPQRVCUMASUOUMAS
      UAUBUCUDUOUQCUEUFUOUKUSUTIUNUOUSUGUHABCDEUIUJ $.
  $}

  ${
    $d x A $.
    ceqsalg.1 $e |- F/ x ps $.
    ceqsalg.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A representation of explicit substitution of a class for a variable,
       inferred from an implicit substitution hypothesis.  For an alternate
       proof, see ~ ceqsalgALT .  (Contributed by NM, 29-Oct-2003.)  (Proof
       shortened by BJ, 29-Sep-2019.) $)
    ceqsalg $p |- ( A e. V -> ( A. x ( x = A -> ph ) <-> ps ) ) $=
      ( wnf cv wceq wb wi wal wcel ax-gen ceqsalt mp3an12 ) BCHCIDJZABKLZCMDENR
      ALCMBKFSCGOABCDEPQ $.

    $( Alternate proof of ~ ceqsalg , not using ~ ceqsalt .  (Contributed by
       NM, 29-Oct-2003.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.)
       (Revised by BJ, 29-Sep-2019.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ceqsalgALT $p |- ( A e. V -> ( A. x ( x = A -> ph ) <-> ps ) ) $=
      ( wcel cv wceq wi wal wex elisset nfa1 biimpd a2i sps exlimd syl5com
      biimprcd alrimi impbid1 ) DEHZCIDJZAKZCLZBUDUECMUGBCDENUGUEBCUFCOFUFUEBKC
      UEABUEABGPQRSTBUFCFUEABGUAUBUC $.
  $}

  ${
    $d x A $.
    ceqsal.1 $e |- F/ x ps $.
    ceqsal.2 $e |- A e. _V $.
    ceqsal.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A representation of explicit substitution of a class for a variable,
       inferred from an implicit substitution hypothesis.  (Contributed by NM,
       18-Aug-1993.) $)
    ceqsal $p |- ( A. x ( x = A -> ph ) <-> ps ) $=
      ( cvv wcel cv wceq wi wal wb ceqsalg ax-mp ) DHICJDKALCMBNFABCDHEGOP $.
  $}

  ${
    $d x A $.  $d x ps $.
    ceqsalv.1 $e |- A e. _V $.
    ceqsalv.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A representation of explicit substitution of a class for a variable,
       inferred from an implicit substitution hypothesis.  (Contributed by NM,
       18-Aug-1993.) $)
    ceqsalv $p |- ( A. x ( x = A -> ph ) <-> ps ) $=
      ( nfv ceqsal ) ABCDBCGEFH $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    ceqsralv.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Restricted quantifier version of ~ ceqsalv .  (Contributed by NM,
       21-Jun-2013.) $)
    ceqsralv $p |- ( A e. B -> ( A. x e. B ( x = A -> ph ) <-> ps ) ) $=
      ( wnf cv wceq wb wi wal wcel wral nfv ax-gen ceqsralt mp3an12 ) BCGCHDIZA
      BJKZCLDEMSAKCENBJBCOTCFPABCDEQR $.
  $}

  ${
    $d x ps $.
    gencl.1 $e |- ( th <-> E. x ( ch /\ A = B ) ) $.
    gencl.2 $e |- ( A = B -> ( ph <-> ps ) ) $.
    gencl.3 $e |- ( ch -> ph ) $.
    $( Implicit substitution for class with embedded variable.  (Contributed by
       NM, 17-May-1996.) $)
    gencl $p |- ( th -> ps ) $=
      ( wceq wa wex syl5ib impcom exlimiv sylbi ) DCFGKZLZEMBHSBERCBCARBJINOPQ
      $.
  $}

  ${
    $d x y $.  $d x R $.  $d x ps $.  $d y C $.  $d y S $.  $d y ch $.
    2gencl.1 $e |- ( C e. S <-> E. x e. R A = C ) $.
    2gencl.2 $e |- ( D e. S <-> E. y e. R B = D ) $.
    2gencl.3 $e |- ( A = C -> ( ph <-> ps ) ) $.
    2gencl.4 $e |- ( B = D -> ( ps <-> ch ) ) $.
    2gencl.5 $e |- ( ( x e. R /\ y e. R ) -> ph ) $.
    $( Implicit substitution for class with embedded variable.  (Contributed by
       NM, 17-May-1996.) $)
    2gencl $p |- ( ( C e. S /\ D e. S ) -> ch ) $=
      ( wcel wi cv wceq wrex wa wex df-rex bitri imbi2d ex gencl com12 impcom )
      IKQZHKQZCULBRULCRESJQZUKEGIUKGITZEJUAUMUNUBEUCMUNEJUDUEUNBCULOUFULUMBUMAR
      UMBRDSJQZULDFHULFHTZDJUAUOUPUBDUCLUPDJUDUEUPABUMNUFUOUMAPUGUHUIUHUJ $.
  $}

  ${
    $d x y z $.  $d y z D $.  $d z F $.  $d x y R $.  $d y z S $.  $d x ps $.
    $d y ch $.  $d z th $.
    3gencl.1 $e |- ( D e. S <-> E. x e. R A = D ) $.
    3gencl.2 $e |- ( F e. S <-> E. y e. R B = F ) $.
    3gencl.3 $e |- ( G e. S <-> E. z e. R C = G ) $.
    3gencl.4 $e |- ( A = D -> ( ph <-> ps ) ) $.
    3gencl.5 $e |- ( B = F -> ( ps <-> ch ) ) $.
    3gencl.6 $e |- ( C = G -> ( ch <-> th ) ) $.
    3gencl.7 $e |- ( ( x e. R /\ y e. R /\ z e. R ) -> ph ) $.
    $( Implicit substitution for class with embedded variable.  (Contributed by
       NM, 17-May-1996.) $)
    3gencl $p |- ( ( D e. S /\ F e. S /\ G e. S ) -> th ) $=
      ( wcel wa wi wceq wrex wex df-rex bitri imbi2d 3expia 2gencl com12 3impia
      cv gencl ) KMUCZNMUCZOMUCZDUTURUSUDZDVACUEVADUEGUPLUCZUTGJOUTJOUFZGLUGVBV
      CUDGUHRVCGLUIUJVCCDVAUAUKVAVBCVBAUEVBBUEVBCUEEFHIKNLMPQHKUFABVBSUKINUFBCV
      BTUKEUPLUCFUPLUCVBAUBULUMUNUQUNUO $.
  $}

  ${
    $d x A $.  $d x ps $.
    cgsexg.1 $e |- ( x = A -> ch ) $.
    cgsexg.2 $e |- ( ch -> ( ph <-> ps ) ) $.
    $( Implicit substitution inference for general classes.  (Contributed by
       NM, 26-Aug-2007.) $)
    cgsexg $p |- ( A e. V ->
                     ( E. x ( ch /\ ph ) <-> ps ) ) $=
      ( wcel wa wex biimpa exlimiv cv wceq elisset eximi syl biimprcd ancld
      eximdv syl5com impbid2 ) EFIZCAJZDKZBUEBDCABHLMUDCDKZBUFUDDNEOZDKUGDEFPUH
      CDGQRBCUEDBCACABHSTUAUBUC $.
  $}

  ${
    $d x y ps $.  $d x y A $.  $d x y B $.
    cgsex2g.1 $e |- ( ( x = A /\ y = B ) -> ch ) $.
    cgsex2g.2 $e |- ( ch -> ( ph <-> ps ) ) $.
    $( Implicit substitution inference for general classes.  (Contributed by
       NM, 26-Jul-1995.) $)
    cgsex2g $p |- ( ( A e. V /\ B e. W ) ->
                     ( E. x E. y ( ch /\ ph ) <-> ps ) ) $=
      ( wcel wa wex biimpa exlimivv cv wceq elisset anim12i eeanv sylibr 2eximi
      syl biimprcd ancld 2eximdv syl5com impbid2 ) FHLZGILZMZCAMZENDNZBUMBDECAB
      KOPULCENDNZBUNULDQFRZEQGRZMZENDNZUOULUPDNZUQENZMUSUJUTUKVADFHSEGISTUPUQDE
      UAUBURCDEJUCUDBCUMDEBCACABKUEUFUGUHUI $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d x y z w D $.
    $d x y z w ps $.
    cgsex4g.1 $e |- ( ( ( x = A /\ y = B ) /\ ( z = C /\ w = D ) ) -> ch ) $.
    cgsex4g.2 $e |- ( ch -> ( ph <-> ps ) ) $.
    $( An implicit substitution inference for 4 general classes.  (Contributed
       by NM, 5-Aug-1995.) $)
    cgsex4g $p |- ( ( ( A e. R /\ B e. S ) /\ ( C e. R /\ D e. S ) ) ->
                    ( E. x E. y E. z E. w ( ch /\ ph ) <-> ps ) ) $=
      ( wcel wa wex cv wceq biimpa exlimivv elisset anim12i eeanv sylibr ee4anv
      2eximi syl biimprcd ancld 2eximdv syl5com impbid2 ) HLPZIMPZQZJLPZKMPZQZQ
      ZCAQZGRFRZERDRZBVCBDEVBBFGCABOUAUBUBVACGRFRZERDRZBVDVADSHTZESITZQZFSJTZGS
      KTZQZQZGRFRZERDRZVFVAVIERDRZVLGRFRZQVOUQVPUTVQUQVGDRZVHERZQVPUOVRUPVSDHLU
      CEIMUCUDVGVHDEUEUFUTVJFRZVKGRZQVQURVTUSWAFJLUCGKMUCUDVJVKFGUEUFUDVIVLDEFG
      UGUFVNVEDEVMCFGNUHUHUIBVEVCDEBCVBFGBCACABOUJUKULULUMUN $.
  $}

  ${
    $d x A $.
    ceqsex.1 $e |- F/ x ps $.
    ceqsex.2 $e |- A e. _V $.
    ceqsex.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Elimination of an existential quantifier, using implicit substitution.
       (Contributed by NM, 2-Mar-1995.)  (Revised by Mario Carneiro,
       10-Oct-2016.) $)
    ceqsex $p |- ( E. x ( x = A /\ ph ) <-> ps ) $=
      ( cv wceq wa wex biimpa exlimi wal biimprcd alrimi isseti exintr mpisyl
      wi impbii ) CHDIZAJZCKZBUCBCEUBABGLMBUBATZCNUBCKUDBUECEUBABGOPCDFQUBACRSU
      A $.
  $}

  ${
    $d x A $.  $d x ps $.
    ceqsexv.1 $e |- A e. _V $.
    ceqsexv.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Elimination of an existential quantifier, using implicit substitution.
       (Contributed by NM, 2-Mar-1995.) $)
    ceqsexv $p |- ( E. x ( x = A /\ ph ) <-> ps ) $=
      ( nfv ceqsex ) ABCDBCGEFH $.
  $}

  ${
    $d x y A $.  $d x y B $.
    ceqsex2.1 $e |- F/ x ps $.
    ceqsex2.2 $e |- F/ y ch $.
    ceqsex2.3 $e |- A e. _V $.
    ceqsex2.4 $e |- B e. _V $.
    ceqsex2.5 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex2.6 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Elimination of two existential quantifiers, using implicit
       substitution.  (Contributed by Scott Fenton, 7-Jun-2006.) $)
    ceqsex2 $p |- ( E. x E. y ( x = A /\ y = B /\ ph ) <-> ch ) $=
      ( cv wceq w3a wex wa exbii ceqsex 3anass 19.42v nfan anbi2d exbidv 3bitri
      bitri nfv nfex ) DNFOZENGOZAPZEQZDQUJUKARZEQZRZDQUKBRZEQZCUMUPDUMUJUNRZEQ
      UPULUSEUJUKAUASUJUNEUBUGSUOURDFUQDEUKBDUKDUHHUCUIJUJUNUQEUJABUKLUDUETBCEG
      IKMTUF $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x ps $.  $d y ch $.
    ceqsex2v.1 $e |- A e. _V $.
    ceqsex2v.2 $e |- B e. _V $.
    ceqsex2v.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex2v.4 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Elimination of two existential quantifiers, using implicit
       substitution.  (Contributed by Scott Fenton, 7-Jun-2006.) $)
    ceqsex2v $p |- ( E. x E. y ( x = A /\ y = B /\ ph ) <-> ch ) $=
      ( nfv ceqsex2 ) ABCDEFGBDLCELHIJKM $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x ps $.  $d y ch $.
    $d z th $.
    ceqsex3v.1 $e |- A e. _V $.
    ceqsex3v.2 $e |- B e. _V $.
    ceqsex3v.3 $e |- C e. _V $.
    ceqsex3v.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex3v.5 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ceqsex3v.6 $e |- ( z = C -> ( ch <-> th ) ) $.
    $( Elimination of three existential quantifiers, using implicit
       substitution.  (Contributed by NM, 16-Aug-2011.) $)
    ceqsex3v $p |- ( E. x E. y E. z ( ( x = A /\ y = B /\ z = C ) /\ ph )
                 <-> th ) $=
      ( cv wceq wa wex anass 3anass anbi1i df-3an anbi2i 3bitr4i 2exbii 19.42vv
      w3a bitri exbii 3anbi3d 2exbidv ceqsexv ceqsex2v ) EQHRZFQIRZGQJRZUIZASZG
      TFTZETUPUQURAUIZGTFTZSZETZDVAVDEVAUPVBSZGTFTVDUTVFFGUPUQURSZSZASUPVGASZSU
      TVFUPVGAUAUSVHAUPUQURUBUCVBVIUPUQURAUDUEUFUGUPVBFGUHUJUKVEUQURBUIZGTFTZDV
      CVKEHKUPVBVJFGUPABUQURNULUMUNBCDFGIJLMOPUOUJUJ $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d x y z w D $.
    $d x ps $.  $d y ch $.  $d z th $.  $d w ta $.
    ceqsex4v.1 $e |- A e. _V $.
    ceqsex4v.2 $e |- B e. _V $.
    ceqsex4v.3 $e |- C e. _V $.
    ceqsex4v.4 $e |- D e. _V $.
    ceqsex4v.7 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex4v.8 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ceqsex4v.9 $e |- ( z = C -> ( ch <-> th ) ) $.
    ceqsex4v.10 $e |- ( w = D -> ( th <-> ta ) ) $.
    $( Elimination of four existential quantifiers, using implicit
       substitution.  (Contributed by NM, 23-Sep-2011.) $)
    ceqsex4v $p |- ( E. x E. y E. z E. w
          ( ( x = A /\ y = B ) /\ ( z = C /\ w = D ) /\ ph ) <-> ta ) $=
      ( wceq w3a wex 19.42vv 3anass df-3an anbi2i bitr4i 2exbii 3bitr4i 3anbi3d
      cv wa 2exbidv ceqsex2v 3bitri ) FUMJUBZGUMKUBZUNZHUMLUBZIUMMUBZUNZAUCZIUD
      HUDZGUDFUDURUSVAVBAUCZIUDHUDZUCZGUDFUDVAVBCUCZIUDHUDZEVEVHFGUTVFUNZIUDHUD
      UTVGUNVEVHUTVFHIUEVDVKHIVDUTVCAUNZUNVKUTVCAUFVFVLUTVAVBAUGUHUIUJURUSVGUGU
      KUJVGVAVBBUCZIUDHUDVJFGJKNOURVFVMHIURABVAVBRULUOUSVMVIHIUSBCVAVBSULUOUPCD
      EHILMPQTUAUPUQ $.
  $}

  ${
    $d x y z w v u A $.  $d x y z w v u B $.  $d x y z w v u C $.
    $d x y z w v u D $.  $d x y z w v u E $.  $d x y z w v u F $.  $d x ps $.
    $d y ch $.  $d z th $.  $d w ta $.  $d v et $.  $d u ze $.
    ceqsex6v.1 $e |- A e. _V $.
    ceqsex6v.2 $e |- B e. _V $.
    ceqsex6v.3 $e |- C e. _V $.
    ceqsex6v.4 $e |- D e. _V $.
    ceqsex6v.5 $e |- E e. _V $.
    ceqsex6v.6 $e |- F e. _V $.
    ceqsex6v.7 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex6v.8 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ceqsex6v.9 $e |- ( z = C -> ( ch <-> th ) ) $.
    ceqsex6v.10 $e |- ( w = D -> ( th <-> ta ) ) $.
    ceqsex6v.11 $e |- ( v = E -> ( ta <-> et ) ) $.
    ceqsex6v.12 $e |- ( u = F -> ( et <-> ze ) ) $.
    $( Elimination of six existential quantifiers, using implicit
       substitution.  (Contributed by NM, 21-Sep-2011.) $)
    ceqsex6v $p |- ( E. x E. y E. z E. w E. v E. u
          ( ( x = A /\ y = B /\ z = C ) /\ ( w = D /\ v = E /\ u = F ) /\ ph )
                 <-> ze ) $=
      ( cv wceq w3a wex wa 3anass 3exbii 19.42vvv bitri anbi2d 3exbidv ceqsex3v
      ) HULNUMZIULOUMZJULPUMZUNZKULQUMLULRUMMULSUMUNZAUNZMUOLUOKUOZJUOIUOHUOVGV
      HAUPZMUOLUOKUOZUPZJUOIUOHUOZGVJVMHIJVJVGVKUPZMUOLUOKUOVMVIVOKLMVGVHAUQURV
      GVKKLMUSUTURVNVHDUPZMUOLUOKUOZGVLVHBUPZMUOLUOKUOVHCUPZMUOLUOKUOVQHIJNOPTU
      AUBVDVKVRKLMVDABVHUFVAVBVEVRVSKLMVEBCVHUGVAVBVFVSVPKLMVFCDVHUHVAVBVCDEFGK
      LMQRSUCUDUEUIUJUKVCUTUT $.
  $}

  ${
    $d x y z w v u t s A $.  $d x y z w v u t s B $.  $d x y z w v u t s C $.
    $d x y z w v u t s D $.  $d x y z w v u t s E $.  $d x y z w v u t s F $.
    $d x y z w v u t s G $.  $d x y z w v u t s H $.  $d x ps $.  $d y ch $.
    $d z th $.  $d w ta $.  $d v et $.  $d u ze $.  $d t si $.  $d s rh $.
    ceqsex8v.1 $e |- A e. _V $.
    ceqsex8v.2 $e |- B e. _V $.
    ceqsex8v.3 $e |- C e. _V $.
    ceqsex8v.4 $e |- D e. _V $.
    ceqsex8v.5 $e |- E e. _V $.
    ceqsex8v.6 $e |- F e. _V $.
    ceqsex8v.7 $e |- G e. _V $.
    ceqsex8v.8 $e |- H e. _V $.
    ceqsex8v.9 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsex8v.10 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ceqsex8v.11 $e |- ( z = C -> ( ch <-> th ) ) $.
    ceqsex8v.12 $e |- ( w = D -> ( th <-> ta ) ) $.
    ceqsex8v.13 $e |- ( v = E -> ( ta <-> et ) ) $.
    ceqsex8v.14 $e |- ( u = F -> ( et <-> ze ) ) $.
    ceqsex8v.15 $e |- ( t = G -> ( ze <-> si ) ) $.
    ceqsex8v.16 $e |- ( s = H -> ( si <-> rh ) ) $.
    $( Elimination of eight existential quantifiers, using implicit
       substitution.  (Contributed by NM, 23-Sep-2011.) $)
    ceqsex8v $p |- ( E. x E. y E. z E. w E. v E. u E. t E. s
              ( ( ( x = A /\ y = B ) /\ ( z = C /\ w = D ) )
         /\ ( ( v = E /\ u = F ) /\ ( t = G /\ s = H ) ) /\ ph ) <-> rh ) $=
      ( cv wceq wa w3a 19.42vv 2exbii bitri 3anass df-3an anbi2i bitr4i 3bitr4i
      wex 3anbi3d 4exbidv ceqsex4v ) JVBQVCZKVBRVCZVDZLVBSVCZMVBTVCZVDZVDZNVBUA
      VCOVBUBVCVDZPVBUCVCUEVBUDVCVDZVDZAVEZUEVNPVNZOVNNVNZMVNLVNZKVNJVNVTWCWEWF
      AVEZUEVNPVNZOVNNVNZVEZMVNLVNZKVNJVNZIWKWPJKWJWOLMWDWLVDZUEVNPVNZOVNNVNZWD
      WNVDZWJWOWTWDWMVDZOVNNVNXAWSXBNOWDWLPUEVFVGWDWMNOVFVHWIWSNOWHWRPUEWHWDWGA
      VDZVDWRWDWGAVIWLXCWDWEWFAVJVKVLVGVGVTWCWNVJVMVGVGWQWEWFEVEZUEVNPVNOVNNVNZ
      IWNWEWFBVEZUEVNPVNOVNNVNWEWFCVEZUEVNPVNOVNNVNWEWFDVEZUEVNPVNOVNNVNXEJKLMQ
      RSTUFUGUHUIVRWLXFNOPUEVRABWEWFUNVOVPVSXFXGNOPUEVSBCWEWFUOVOVPWAXGXHNOPUEW
      ACDWEWFUPVOVPWBXHXDNOPUEWBDEWEWFUQVOVPVQEFGHINOPUEUAUBUCUDUJUKULUMURUSUTV
      AVQVHVH $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x th $.  $d y ch $.  $d y A $.
    gencbvex.1 $e |- A e. _V $.
    gencbvex.2 $e |- ( A = y -> ( ph <-> ps ) ) $.
    gencbvex.3 $e |- ( A = y -> ( ch <-> th ) ) $.
    gencbvex.4 $e |- ( th <-> E. x ( ch /\ A = y ) ) $.
    $( Change of bound variable using implicit substitution.  (Contributed by
       NM, 17-May-1996.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    gencbvex $p |- ( E. x ( ch /\ ph ) <-> E. y ( th /\ ps ) ) $=
      ( cv wceq wa wex excom wb anbi12d bicomd exbii eqcoms ceqsexv simpr eqcom
      19.41v biimpi adantl eximi sylbi adantr ancri impbii bitri 3bitr3i ) FLZG
      MZDBNZNZFOZEOUREOZFOCANZEOUQFOUREFPUSVAEUQVAFGHUQVAQGUOGUOMZVAUQVBCDABJIR
      SUAUBTUTUQFUTUPEOZUQNZUQUPUQEUEVDUQVCUQUCUQVCDVCBDCVBNZEOVCKVEUPEVBUPCVBU
      PGUOUDUFUGUHUIUJUKULUMTUN $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x th $.  $d y ch $.  $d y A $.
    gencbvex2.1 $e |- A e. _V $.
    gencbvex2.2 $e |- ( A = y -> ( ph <-> ps ) ) $.
    gencbvex2.3 $e |- ( A = y -> ( ch <-> th ) ) $.
    gencbvex2.4 $e |- ( th -> E. x ( ch /\ A = y ) ) $.
    $( Restatement of ~ gencbvex with weaker hypotheses.  (Contributed by Jeff
       Hankins, 6-Dec-2006.) $)
    gencbvex2 $p |- ( E. x ( ch /\ ph ) <-> E. y ( th /\ ps ) ) $=
      ( cv wceq wa wex biimpac exlimiv impbii gencbvex ) ABCDEFGHIJDCGFLMZNZEOK
      UADETCDJPQRS $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x th $.  $d y ch $.  $d y A $.
    gencbval.1 $e |- A e. _V $.
    gencbval.2 $e |- ( A = y -> ( ph <-> ps ) ) $.
    gencbval.3 $e |- ( A = y -> ( ch <-> th ) ) $.
    gencbval.4 $e |- ( th <-> E. x ( ch /\ A = y ) ) $.
    $( Change of bound variable using implicit substitution.  (Contributed by
       NM, 17-May-1996.) $)
    gencbval $p |- ( A. x ( ch -> ph ) <-> A. y ( th -> ps ) ) $=
      ( wi wal wn wa wex cv wceq notbid exanali gencbvex 3bitr3i con4bii ) CALE
      MZDBLFMZCANZOEPDBNZOFPUDNUENUFUGCDEFGHGFQRABISJKUACAETDBFTUBUC $.
  $}

  ${
    $d A x $.  $d x y $.
    sbhypf.1 $e |- F/ x ps $.
    sbhypf.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Introduce an explicit substitution into an implicit substitution
       hypothesis.  See also ~ csbhypf .  (Contributed by Raph Levien,
       10-Apr-2004.) $)
    sbhypf $p |- ( y = A -> ( [ y / x ] ph <-> ps ) ) $=
      ( cv wceq wa wex wsb wb vex eqeq1 ceqsexv nfs1v nfbi sbequ12 bicomd
      sylan9bb exlimi sylbir ) DHZEIZCHZUDIZUFEIZJZCKACDLZBMZUHUECUDDNUFUDEOPUI
      UKCUJBCACDQFRUGUJAUHBUGAUJACDSTGUAUBUC $.
  $}

  ${
    $d z A $.  $d x z $.
    $( Closed theorem form of ~ vtoclgf .  (Contributed by NM, 17-Feb-2013.)
       (Revised by Mario Carneiro, 12-Oct-2016.) $)
    vtoclgft $p |- ( ( ( F/_ x A /\ F/ x ps )
                  /\ ( A. x ( x = A -> ( ph <-> ps ) )
                     /\ A. x ph ) /\ A e. V ) -> ps ) $=
      ( vz wcel wnfc wnf wa cv wceq wb wi wal cvv elex w3a wex mpbid elisset id
      3ad2ant3 nfnfc1 nfcvd nfeqd eqeq1 a1i cbvexd 3adant3 bi1 imim2i com23 imp
      ad2antrr alanimi 3ad2ant2 simp1r 19.23t syl mpd syl3an3 ) DEGCDHZBCIZJZCK
      ZDLZABMZNZCOACOJZDPGZBDEQVEVJVKRZVGCSZBVLFKZDLZFSZVMVKVEVPVJFDPUAUCVEVJVP
      VMMZVKVCVQVDVJVCVOVGFCCDUDVCCVNDVCCVNUEVCUBUFVNVFLVOVGMNVCVNVFDUGUHUIUOUJ
      TVLVGBNZCOZVMBNZVJVEVSVKVIAVRCVIAVRVIVGABVHABNVGABUKULUMUNUPUQVLVDVSVTMVC
      VDVJVKURVGBCUSUTTVAVB $.
  $}

  ${
    vtocld.1 $e |- ( ph -> A e. V ) $.
    vtocld.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    vtocld.3 $e |- ( ph -> ps ) $.
    ${
      vtocldf.4 $e |- F/ x ph $.
      vtocldf.5 $e |- ( ph -> F/_ x A ) $.
      vtocldf.6 $e |- ( ph -> F/ x ch ) $.
      $( Implicit substitution of a class for a setvar variable.  (Contributed
         by Mario Carneiro, 15-Oct-2016.) $)
      vtocldf $p |- ( ph -> ch ) $=
        ( wnfc wnf cv wceq wb wi wal alrimi wcel ex vtoclgft syl221anc ) ADEMCD
        NDOEPZBCQZRZDSBDSEFUACKLAUGDJAUEUFHUBTABDJITGBCDEFUCUD $.
    $}

    $d x A $.  $d x ph $.  $d x ch $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       Mario Carneiro, 15-Oct-2016.) $)
    vtocld $p |- ( ph -> ch ) $=
      ( nfv nfcvd nfvd vtocldf ) ABCDEFGHIADJADEKACDLM $.
  $}

  ${
    $d x A $.
    vtoclf.1 $e |- F/ x ps $.
    vtoclf.2 $e |- A e. _V $.
    vtoclf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclf.4 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable.  This is a
       generalization of ~ chvar .  (Contributed by NM, 30-Aug-1993.) $)
    vtoclf $p |- ps $=
      ( cv wceq wi isseti biimpd eximii 19.36i mpg ) ABCABCECIDJZABKCCDFLQABGMN
      OHP $.
  $}

  ${
    $d x A $.  $d x ps $.
    vtocl.1 $e |- A e. _V $.
    vtocl.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl.3 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 30-Aug-1993.) $)
    vtocl $p |- ps $=
      ( nfv vtoclf ) ABCDBCHEFGI $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    vtocl2.1 $e |- A e. _V $.
    vtocl2.2 $e |- B e. _V $.
    vtocl2.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    vtocl2.4 $e |- ph $.
    $( Implicit substitution of classes for setvar variables.  (Contributed by
       NM, 26-Jul-1995.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    vtocl2 $p |- ps $=
      ( wal wi wex cv wceq isseti wa eeanv biimpd 2eximi sylbir 19.36v 19.36aiv
      mp2an exbii mpbi ax-gen mpg ) ADKZBCUIBCABLZDMZCMZUIBLZCMCNEOZCMZDNFOZDMZ
      ULCEGPDFHPUOUQQUNUPQZDMCMULUNUPCDRURUJCDURABISTUAUDUKUMCABDUBUEUFUCADJUGU
      H $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z ps $.
    vtocl3.1 $e |- A e. _V $.
    vtocl3.2 $e |- B e. _V $.
    vtocl3.3 $e |- C e. _V $.
    vtocl3.4 $e |- ( ( x = A /\ y = B /\ z = C ) -> ( ph <-> ps ) ) $.
    vtocl3.5 $e |- ph $.
    $( Implicit substitution of classes for setvar variables.  (Contributed by
       NM, 3-Jun-1995.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    vtocl3 $p |- ps $=
      ( wal wi wex cv wceq isseti w3a eeeanv biimpd 2eximi sylbir 19.36v 2exbii
      eximi mp3an mpbi exbii 19.36aiv gen2 mpg ) AENZDNZBCUOBCUNBOZDPZCPZUOBOZC
      PABOZEPZDPCPZURCQFRZCPZDQGRZDPZEQHRZEPZVBCFISDGJSEHKSVDVFVHTVCVEVGTZEPZDP
      CPVBVCVEVGCDEUAVJVACDVIUTEVIABLUBUGUCUDUHVAUPCDABEUEUFUIUQUSCUNBDUEUJUIUK
      ADEMULUM $.
  $}

  ${
    $d x A $.  $d x ch $.  $d x th $.
    vtoclb.1 $e |- A e. _V $.
    vtoclb.2 $e |- ( x = A -> ( ph <-> ch ) ) $.
    vtoclb.3 $e |- ( x = A -> ( ps <-> th ) ) $.
    vtoclb.4 $e |- ( ph <-> ps ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 23-Dec-1993.) $)
    vtoclb $p |- ( ch <-> th ) $=
      ( wb cv wceq bibi12d vtocl ) ABKCDKEFGELFMACBDHINJO $.
  $}

  ${
    vtoclgf.1 $e |- F/_ x A $.
    vtoclgf.2 $e |- F/ x ps $.
    vtoclgf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclgf.4 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable, with
       bound-variable hypotheses in place of disjoint variable restrictions.
       (Contributed by NM, 21-Sep-2003.)  (Proof shortened by Mario Carneiro,
       10-Oct-2016.) $)
    vtoclgf $p |- ( A e. V -> ps ) $=
      ( wcel cvv elex cv wceq wex issetf mpbii exlimi sylbi syl ) DEJDKJZBDELUA
      CMDNZCOBCDFPUBBCGUBABIHQRST $.
  $}

  ${
    $d x A $.
    vtoclg1f.nf $e |- F/ x ps $.
    vtoclg1f.maj $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclg1f.min $e |- ph $.
    $( Version of ~ vtoclgf with one non-freeness hypothesis replaced with a dv
       condition, thus avoiding dependency on ~ ax-11 and ~ ax-13 .
       (Contributed by BJ, 1-May-2019.) $)
    vtoclg1f $p |- ( A e. V -> ps ) $=
      ( wcel cvv elex cv wceq wex isset mpbii exlimi sylbi syl ) DEIDJIZBDEKTCL
      DMZCNBCDOUABCFUAABHGPQRS $.
  $}

  ${
    $d x A $.  $d x ps $.
    vtoclg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclg.2 $e |- ph $.
    $( Implicit substitution of a class expression for a setvar variable.
       (Contributed by NM, 17-Apr-1995.) $)
    vtoclg $p |- ( A e. V -> ps ) $=
      ( nfv vtoclg1f ) ABCDEBCHFGI $.
  $}

  ${
    $d x A $.  $d x ch $.  $d x th $.
    vtoclbg.1 $e |- ( x = A -> ( ph <-> ch ) ) $.
    vtoclbg.2 $e |- ( x = A -> ( ps <-> th ) ) $.
    vtoclbg.3 $e |- ( ph <-> ps ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 29-Apr-1994.) $)
    vtoclbg $p |- ( A e. V -> ( ch <-> th ) ) $=
      ( wb cv wceq bibi12d vtoclg ) ABKCDKEFGELFMACBDHINJO $.
  $}

  ${
    vtocl2gf.1 $e |- F/_ x A $.
    vtocl2gf.2 $e |- F/_ y A $.
    vtocl2gf.3 $e |- F/_ y B $.
    vtocl2gf.4 $e |- F/ x ps $.
    vtocl2gf.5 $e |- F/ y ch $.
    vtocl2gf.6 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl2gf.7 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl2gf.8 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 25-Apr-1995.) $)
    vtocl2gf $p |- ( ( A e. V /\ B e. W ) -> ch ) $=
      ( wcel cvv wi elex nfel1 nfim cv wceq imbi2d vtoclgf mpan9 ) FHRFSRZGIRCF
      HUAUIBTUICTEGILUICEEFSKUBNUCEUDGUEBCUIPUFABDFSJMOQUGUGUH $.
  $}

  ${
    vtocl3gf.a $e |- F/_ x A $.
    vtocl3gf.b $e |- F/_ y A $.
    vtocl3gf.c $e |- F/_ z A $.
    vtocl3gf.d $e |- F/_ y B $.
    vtocl3gf.e $e |- F/_ z B $.
    vtocl3gf.f $e |- F/_ z C $.
    vtocl3gf.1 $e |- F/ x ps $.
    vtocl3gf.2 $e |- F/ y ch $.
    vtocl3gf.3 $e |- F/ z th $.
    vtocl3gf.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl3gf.5 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl3gf.6 $e |- ( z = C -> ( ch <-> th ) ) $.
    vtocl3gf.7 $e |- ph $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 10-Aug-2013.)  (Revised by Mario Carneiro, 10-Oct-2016.) $)
    vtocl3gf $p |- ( ( A e. V /\ B e. W /\ C e. X ) -> th ) $=
      ( wcel cvv wa elex wi nfel1 nfim wceq imbi2d vtoclgf vtocl2gf mpan9 3impb
      cv ) HKUGZILUGZJMUGZDVAHUHUGZVBVCUIDHKUJVDBUKVDCUKVDDUKFGIJLMQRSVDCFFHUHO
      ULUAUMVDDGGHUHPULUBUMFUTIUNBCVDUDUOGUTJUNCDVDUEUOABEHUHNTUCUFUPUQURUS $.
  $}

  ${
    $d x A $.  $d y A $.  $d y B $.  $d x ps $.  $d y ch $.
    vtocl2g.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl2g.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl2g.3 $e |- ph $.
    $( Implicit substitution of 2 classes for 2 setvar variables.  (Contributed
       by NM, 25-Apr-1995.) $)
    vtocl2g $p |- ( ( A e. V /\ B e. W ) -> ch ) $=
      ( nfcv nfv vtocl2gf ) ABCDEFGHIDFMEFMEGMBDNCENJKLO $.
  $}

  ${
    $d x B $.
    vtoclgaf.1 $e |- F/_ x A $.
    vtoclgaf.2 $e |- F/ x ps $.
    vtoclgaf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclgaf.4 $e |- ( x e. B -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 17-Feb-2006.)  (Revised by Mario Carneiro, 10-Oct-2016.) $)
    vtoclgaf $p |- ( A e. B -> ps ) $=
      ( wcel cv wi nfel1 nfim wceq eleq1 imbi12d vtoclgf pm2.43i ) DEJZBCKZEJZA
      LTBLCDEFTBCCDEFMGNUADOUBTABUADEPHQIRS $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    vtoclga.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclga.2 $e |- ( x e. B -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 20-Aug-1995.) $)
    vtoclga $p |- ( A e. B -> ps ) $=
      ( nfcv nfv vtoclgaf ) ABCDECDHBCIFGJ $.
  $}

  ${
    $d x y C $.  $d x y D $.
    vtocl2gaf.a $e |- F/_ x A $.
    vtocl2gaf.b $e |- F/_ y A $.
    vtocl2gaf.c $e |- F/_ y B $.
    vtocl2gaf.1 $e |- F/ x ps $.
    vtocl2gaf.2 $e |- F/ y ch $.
    vtocl2gaf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl2gaf.4 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl2gaf.5 $e |- ( ( x e. C /\ y e. D ) -> ph ) $.
    $( Implicit substitution of 2 classes for 2 setvar variables.  (Contributed
       by NM, 10-Aug-2013.) $)
    vtocl2gaf $p |- ( ( A e. C /\ B e. D ) -> ch ) $=
      ( wcel wa wi cv nfel1 nfan nfim wceq eleq1 anbi1d imbi12d anbi2d vtocl2gf
      nfv pm2.43i ) FHRZGIRZSZCDUAZHRZEUAZIRZSZATUMUSSZBTUOCTDEFGHIJKLVABDUMUSD
      DFHJUBUSDUKUCMUDUOCEUMUNEEFHKUBEGILUBUCNUDUPFUEZUTVAABVBUQUMUSUPFHUFUGOUH
      URGUEZVAUOBCVCUSUNUMURGIUFUIPUHQUJUL $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x y D $.  $d x ps $.  $d y ch $.
    vtocl2ga.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl2ga.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl2ga.3 $e |- ( ( x e. C /\ y e. D ) -> ph ) $.
    $( Implicit substitution of 2 classes for 2 setvar variables.  (Contributed
       by NM, 20-Aug-1995.) $)
    vtocl2ga $p |- ( ( A e. C /\ B e. D ) -> ch ) $=
      ( nfcv nfv vtocl2gaf ) ABCDEFGHIDFMEFMEGMBDNCENJKLO $.
  $}

  ${
    $d x y z R $.  $d x y z S $.  $d x y z T $.
    vtocl3gaf.a $e |- F/_ x A $.
    vtocl3gaf.b $e |- F/_ y A $.
    vtocl3gaf.c $e |- F/_ z A $.
    vtocl3gaf.d $e |- F/_ y B $.
    vtocl3gaf.e $e |- F/_ z B $.
    vtocl3gaf.f $e |- F/_ z C $.
    vtocl3gaf.1 $e |- F/ x ps $.
    vtocl3gaf.2 $e |- F/ y ch $.
    vtocl3gaf.3 $e |- F/ z th $.
    vtocl3gaf.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl3gaf.5 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl3gaf.6 $e |- ( z = C -> ( ch <-> th ) ) $.
    vtocl3gaf.7 $e |- ( ( x e. R /\ y e. S /\ z e. T ) -> ph ) $.
    $( Implicit substitution of 3 classes for 3 setvar variables.  (Contributed
       by NM, 10-Aug-2013.)  (Revised by Mario Carneiro, 11-Oct-2016.) $)
    vtocl3gaf $p |- ( ( A e. R /\ B e. S /\ C e. T ) -> th ) $=
      ( wcel w3a cv nfel1 nf3an nfim wceq eleq1 3anbi1d imbi12d 3anbi2d 3anbi3d
      wi nfv vtocl3gf pm2.43i ) HKUGZILUGZJMUGZUHZDEUIZKUGZFUIZLUGZGUIZMUGZUHZA
      USVCVJVLUHZBUSVCVDVLUHZCUSVFDUSEFGHIJKLMNOPQRSVNBEVCVJVLEEHKNUJVJEUTVLEUT
      UKTULVOCFVCVDVLFFHKOUJFILQUJVLFUTUKUAULVFDGVCVDVEGGHKPUJGILRUJGJMSUJUKUBU
      LVGHUMZVMVNABVPVHVCVJVLVGHKUNUOUCUPVIIUMZVNVOBCVQVJVDVCVLVIILUNUQUDUPVKJU
      MZVOVFCDVRVLVEVCVDVKJMUNURUEUPUFVAVB $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d z C $.  $d x y z D $.  $d x y z R $.
    $d x y z S $.  $d x ps $.  $d y ch $.  $d z th $.
    vtocl3ga.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl3ga.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl3ga.3 $e |- ( z = C -> ( ch <-> th ) ) $.
    vtocl3ga.4 $e |- ( ( x e. D /\ y e. R /\ z e. S ) -> ph ) $.
    $( Implicit substitution of 3 classes for 3 setvar variables.  (Contributed
       by NM, 20-Aug-1995.) $)
    vtocl3ga $p |- ( ( A e. D /\ B e. R /\ C e. S ) -> th ) $=
      ( nfcv nfv vtocl3gaf ) ABCDEFGHIJKLMEHRFHRGHRFIRGIRGJRBESCFSDGSNOPQT $.
  $}

  ${
    $d w x y z A $.  $d w y z B $.  $d w z C $.  $d w D $.  $d w x y z R $.
    $d w x y z S $.  $d w x y z T $.  $d w x y z Q $.  $d x ps $.  $d z rh $.
    $d w th $.  $d y ch $.
    vtocl4ga.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtocl4ga.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    vtocl4ga.3 $e |- ( z = C -> ( ch <-> rh ) ) $.
    vtocl4ga.4 $e |- ( w = D -> ( rh <-> th ) ) $.
    ${
      vtocl4g.5 $e |- ph $.
      $( Implicit substitution of 4 classes for 4 setvar variables.
         (Contributed by AV, 22-Jan-2019.) $)
      vtocl4g $p |- ( ( ( A e. Q /\ B e. R )
                       /\ ( C e. S /\ D e. T ) ) -> th ) $=
        ( wcel wa wi cv wceq imbi2d vtocl2g impcom ) LPUCMQUCUDJNUCKOUCUDZDUKCU
        EUKEUEUKDUEHILMPQHUFLUGCEUKTUHIUFMUGEDUKUAUHABCFGJKNORSUBUIUIUJ $.
    $}

    vtocl4ga.5 $e |- ( ( ( x e. Q /\ y e. R )
                         /\ ( z e. S /\ w e. T ) ) -> ph ) $.
    $( Implicit substitution of 4 classes for 4 setvar variables.  (Contributed
       by AV, 22-Jan-2019.) $)
    vtocl4ga $p |- ( ( ( A e. Q /\ B e. R )
                       /\ ( C e. S /\ D e. T ) ) -> th ) $=
      ( wcel wa cv wi wceq eleq1 anbi1d imbi12d anbi2d vtocl4g pm2.43i ) JNUCZK
      OUCZUDZLPUCZMQUCZUDZUDZDFUEZNUCZGUEZOUCZUDZHUEZPUCZIUEZQUCZUDZUDZAUFUNVDU
      DZVJUDZBUFUPVJUDZCUFUTDUFUPUQVIUDZUDZEUFFGHIJKLMNOPQVAJUGZVKVMABVQVEVLVJV
      QVBUNVDVAJNUHUIUIRUJVCKUGZVMVNBCVRVLUPVJVRVDUOUNVCKOUHUKUISUJVFLUGZVNVPCE
      VSVJVOUPVSVGUQVIVFLPUHUIUKTUJVHMUGZVPUTEDVTVOUSUPVTVIURUQVHMQUHUKUKUAUJUB
      ULUM $.
  $}

  ${
    $d x A $.  $d x ph $.
    vtocleg.1 $e |- ( x = A -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 21-Jun-1993.) $)
    vtocleg $p |- ( A e. V -> ph ) $=
      ( wcel cv wceq wex elisset exlimiv syl ) CDFBGCHZBIABCDJMABEKL $.
  $}

  ${
    $d x A $.
    $( Implicit substitution of a class for a setvar variable.  (Closed theorem
       version of ~ vtoclef .)  (Contributed by NM, 7-Nov-2005.)  (Revised by
       Mario Carneiro, 11-Oct-2016.) $)
    vtoclegft $p |- ( ( A e. B /\ F/ x ph /\
                   A. x ( x = A -> ph ) ) -> ph ) $=
      ( wcel wnf cv wceq wi wal w3a wex elisset mpan9 3adant2 wb 19.9t 3ad2ant2
      exim mpbid ) CDEZABFZBGCHZAIBJZKABLZAUAUDUEUBUAUCBLUDUEBCDMUCABSNOUBUAUEA
      PUDABQRT $.
  $}

  ${
    $d x A $.
    vtoclef.1 $e |- F/ x ph $.
    vtoclef.2 $e |- A e. _V $.
    vtoclef.3 $e |- ( x = A -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 18-Aug-1993.) $)
    vtoclef $p |- ph $=
      ( cv wceq wex isseti exlimi ax-mp ) BGCHZBIABCEJMABDFKL $.
  $}

  ${
    $d x A $.  $d x ph $.
    vtocle.1 $e |- A e. _V $.
    vtocle.2 $e |- ( x = A -> ph ) $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 9-Sep-1993.) $)
    vtocle $p |- ph $=
      ( cvv wcel vtocleg ax-mp ) CFGADABCFEHI $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    vtoclri.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    vtoclri.2 $e |- A. x e. B ph $.
    $( Implicit substitution of a class for a setvar variable.  (Contributed by
       NM, 21-Nov-1994.) $)
    vtoclri $p |- ( A e. B -> ps ) $=
      ( rspec vtoclga ) ABCDEFACEGHI $.
  $}

  ${
    spcimgft.1 $e |- F/ x ps $.
    spcimgft.2 $e |- F/_ x A $.
    $( A closed version of ~ spcimgf .  (Contributed by Mario Carneiro,
       4-Jan-2017.) $)
    spcimgft $p |- ( A. x ( x = A -> ( ph -> ps ) ) -> ( A e. B ->
                      ( A. x ph -> ps ) ) ) $=
      ( wcel cvv cv wceq wi wal elex wex issetf exim syl5bi 19.36 syl6ib syl5 )
      DEHDIHZCJDKZABLZLCMZACMBLZDENUEUBUDCOZUFUBUCCOUEUGCDGPUCUDCQRABCFSTUA $.

    $( A closed version of ~ spcgf .  (Contributed by Andrew Salmon,
       6-Jun-2011.)  (Revised by Mario Carneiro, 4-Jan-2017.) $)
    spcgft $p |- ( A. x ( x = A -> ( ph <-> ps ) ) -> ( A e. B ->
                      ( A. x ph -> ps ) ) ) $=
      ( cv wceq wb wi wal wcel bi1 imim2i alimi spcimgft syl ) CHDIZABJZKZCLSAB
      KZKZCLDEMACLBKKUAUCCTUBSABNOPABCDEFGQR $.
  $}

  ${
    spcimgf.1 $e |- F/_ x A $.
    spcimgf.2 $e |- F/ x ps $.
    ${
      spcimgf.3 $e |- ( x = A -> ( ph -> ps ) ) $.
      $( Rule of specialization, using implicit substitution.  Compare Theorem
         7.3 of [Quine] p. 44.  (Contributed by Mario Carneiro, 4-Jan-2017.) $)
      spcimgf $p |- ( A e. V -> ( A. x ph -> ps ) ) $=
        ( cv wceq wi wcel wal spcimgft mpg ) CIDJABKKDELACMBKKCABCDEGFNHO $.
    $}

    spcimegf.3 $e |- ( x = A -> ( ps -> ph ) ) $.
    $( Existential specialization, using implicit substitution.  (Contributed
       by Mario Carneiro, 4-Jan-2017.) $)
    spcimegf $p |- ( A e. V -> ( ps -> E. x ph ) ) $=
      ( wcel wn wal wex nfn cv wceq con3d spcimgf con2d df-ex syl6ibr ) DEIZBAJ
      ZCKZJACLUAUCBUBBJCDEFBCGMCNDOBAHPQRACST $.
  $}

  ${
    spcgf.1 $e |- F/_ x A $.
    spcgf.2 $e |- F/ x ps $.
    spcgf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Rule of specialization, using implicit substitution.  Compare Theorem
       7.3 of [Quine] p. 44.  (Contributed by NM, 2-Feb-1997.)  (Revised by
       Andrew Salmon, 12-Aug-2011.) $)
    spcgf $p |- ( A e. V -> ( A. x ph -> ps ) ) $=
      ( cv wceq wb wi wcel wal spcgft mpg ) CIDJABKLDEMACNBLLCABCDEGFOHP $.

    $( Existential specialization, using implicit substitution.  (Contributed
       by NM, 2-Feb-1997.) $)
    spcegf $p |- ( A e. V -> ( ps -> E. x ph ) ) $=
      ( wcel wn wal wex nfn cv wceq notbid spcgf con2d df-ex syl6ibr ) DEIZBAJZ
      CKZJACLUAUCBUBBJCDEFBCGMCNDOABHPQRACST $.
  $}

  ${
    $d x A $.  $d x ph $.  $d x ch $.
    spcimdv.1 $e |- ( ph -> A e. B ) $.
    ${
      spcimdv.2 $e |- ( ( ph /\ x = A ) -> ( ps -> ch ) ) $.
      $( Restricted specialization, using implicit substitution.  (Contributed
         by Mario Carneiro, 4-Jan-2017.) $)
      spcimdv $p |- ( ph -> ( A. x ps -> ch ) ) $=
        ( cv wceq wi wal wcel ex alrimiv nfv nfcv spcimgft sylc ) ADIEJZBCKZKZD
        LEFMBDLCKAUBDATUAHNOGBCDEFCDPDEQRS $.
    $}

    ${
      spcdv.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
      $( Rule of specialization, using implicit substitution.  Analogous to
         ~ rspcdv .  (Contributed by David Moews, 1-May-2017.) $)
      spcdv $p |- ( ph -> ( A. x ps -> ch ) ) $=
        ( cv wceq wa biimpd spcimdv ) ABCDEFGADIEJKBCHLM $.
    $}

    spcimedv.2 $e |- ( ( ph /\ x = A ) -> ( ch -> ps ) ) $.
    $( Restricted existential specialization, using implicit substitution.
       (Contributed by Mario Carneiro, 4-Jan-2017.) $)
    spcimedv $p |- ( ph -> ( ch -> E. x ps ) ) $=
      ( wn wal wex cv wceq wa con3d spcimdv con2d df-ex syl6ibr ) ACBIZDJZIBDKA
      UACATCIDEFGADLEMNCBHOPQBDRS $.
  $}

  ${
    $d x ps $.  $d x A $.
    spcgv.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Rule of specialization, using implicit substitution.  Compare Theorem
       7.3 of [Quine] p. 44.  (Contributed by NM, 22-Jun-1994.) $)
    spcgv $p |- ( A e. V -> ( A. x ph -> ps ) ) $=
      ( nfcv nfv spcgf ) ABCDECDGBCHFI $.

    $( Existential specialization, using implicit substitution.  (Contributed
       by NM, 14-Aug-1994.) $)
    spcegv $p |- ( A e. V -> ( ps -> E. x ph ) ) $=
      ( nfcv nfv spcegf ) ABCDECDGBCHFI $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    spc2egv.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Existential specialization with 2 quantifiers, using implicit
       substitution.  (Contributed by NM, 3-Aug-1995.) $)
    spc2egv $p |- ( ( A e. V /\ B e. W ) -> ( ps -> E. x E. y ph ) ) $=
      ( wcel wa cv wceq wex elisset anim12i eeanv sylibr biimprcd 2eximdv
      syl5com ) EGJZFHJZKZCLEMZDLFMZKZDNCNZBADNCNUDUECNZUFDNZKUHUBUIUCUJCEGODFH
      OPUEUFCDQRBUGACDUGABISTUA $.

    $( Specialization with 2 quantifiers, using implicit substitution.
       (Contributed by NM, 27-Apr-2004.) $)
    spc2gv $p |- ( ( A e. V /\ B e. W ) -> ( A. x A. y ph -> ps ) ) $=
      ( wcel wa wal wn wex cv wceq notbid spc2egv 2nalexn syl6ibr con4d ) EGJFH
      JKZBADLCLZUBBMZAMZDNCNUCMUEUDCDEFGHCOEPDOFPKABIQRACDSTUA $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z ps $.
    spc3egv.1 $e |- ( ( x = A /\ y = B /\ z = C ) -> ( ph <-> ps ) ) $.
    $( Existential specialization with 3 quantifiers, using implicit
       substitution.  (Contributed by NM, 12-May-2008.) $)
    spc3egv $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
               ( ps -> E. x E. y E. z ph ) ) $=
      ( wcel w3a cv wceq wex elisset 3anim123i eeeanv biimprcd 2eximdv syl5com
      sylibr eximdv ) FIMZGJMZHKMZNZCOFPZDOGPZEOHPZNZEQZDQCQZBAEQZDQCQUIUJCQZUK
      DQZULEQZNUOUFUQUGURUHUSCFIRDGJREHKRSUJUKULCDETUDBUNUPCDBUMAEUMABLUAUEUBUC
      $.

    $( Specialization with 3 quantifiers, using implicit substitution.
       (Contributed by NM, 12-May-2008.) $)
    spc3gv $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
               ( A. x A. y A. z ph -> ps ) ) $=
      ( wcel w3a wal wn wex cv wceq exnal notbid spc3egv exbii bitr2i syl6ibr
      bitri con4d ) FIMGJMHKMNZBAEOZDOZCOZUHBPZAPZEQZDQZCQZUKPZUMULCDEFGHIJKCRF
      SDRGSERHSNABLUAUBUPUJPZCQUQUOURCUOUIPZDQURUNUSDAETUCUIDTUFUCUJCTUDUEUG $.
  $}

  ${
    $d x A $.  $d x ps $.
    spcv.1 $e |- A e. _V $.
    spcv.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Rule of specialization, using implicit substitution.  (Contributed by
       NM, 22-Jun-1994.) $)
    spcv $p |- ( A. x ph -> ps ) $=
      ( cvv wcel wal wi spcgv ax-mp ) DGHACIBJEABCDGFKL $.

    $( Existential specialization, using implicit substitution.  (Contributed
       by NM, 31-Dec-1993.)  (Proof shortened by Eric Schmidt, 22-Dec-2006.) $)
    spcev $p |- ( ps -> E. x ph ) $=
      ( cvv wcel wex wi spcegv ax-mp ) DGHBACIJEABCDGFKL $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    spc2ev.1 $e |- A e. _V $.
    spc2ev.2 $e |- B e. _V $.
    spc2ev.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Existential specialization, using implicit substitution.  (Contributed
       by NM, 3-Aug-1995.) $)
    spc2ev $p |- ( ps -> E. x E. y ph ) $=
      ( cvv wcel wex wi spc2egv mp2an ) EJKFJKBADLCLMGHABCDEFJJINO $.
  $}

  ${
    $d x A $.  $d x B $.
    rspct.1 $e |- F/ x ps $.
    $( A closed version of ~ rspc .  (Contributed by Andrew Salmon,
       6-Jun-2011.) $)
    rspct $p |- ( A. x ( x = A -> ( ph <-> ps ) ) -> ( A e. B ->
                   ( A. x e. B ph -> ps ) ) ) $=
      ( cv wceq wb wi wal wcel wral df-ral wa eleq1 adantr simpr imbi12d ex a2i
      alimi nfv nfim nfcv spcgft syl syl7bi com34 pm2.43d ) CGZDHZABIZJZCKZDELZ
      ACEMZBJUOUPUQUPBUQUKELZAJZCKZUOUPUPBJZACENUOULUSVAIZJZCKUPUTVAJJUNVCCULUM
      VBULUMVBULUMOURUPABULURUPIUMUKDEPQULUMRSTUAUBUSVACDEUPBCUPCUCFUDCDUEUFUGU
      HUIUJ $.
  $}

  ${
    $d x A $.  $d x B $.
    rspc.1 $e |- F/ x ps $.
    rspc.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 19-Apr-2005.)  (Revised by Mario Carneiro, 11-Oct-2016.) $)
    rspc $p |- ( A e. B -> ( A. x e. B ph -> ps ) ) $=
      ( wral cv wcel wi wal df-ral nfcv nfv nfim wceq eleq1 imbi12d spcgf
      pm2.43a syl5bi ) ACEHCIZEJZAKZCLZDEJZBACEMUFUGBUEUGBKCDECDNUGBCUGCOFPUCDQ
      UDUGABUCDERGSTUAUB $.

    $( Restricted existential specialization, using implicit substitution.
       (Contributed by NM, 26-May-1998.)  (Revised by Mario Carneiro,
       11-Oct-2016.) $)
    rspce $p |- ( ( A e. B /\ ps ) -> E. x e. B ph ) $=
      ( wcel wa cv wex wrex nfcv nfv nfan wceq eleq1 anbi12d spcegf anabsi5
      df-rex sylibr ) DEHZBIZCJZEHZAIZCKZACELUCBUHUGUDCDECDMUCBCUCCNFOUEDPUFUCA
      BUEDEQGRSTACEUAUB $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    rspcv.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 26-May-1998.) $)
    rspcv $p |- ( A e. B -> ( A. x e. B ph -> ps ) ) $=
      ( nfv rspc ) ABCDEBCGFH $.

    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 2-Feb-2006.) $)
    rspccv $p |- ( A. x e. B ph -> ( A e. B -> ps ) ) $=
      ( wcel wral rspcv com12 ) DEGACEHBABCDEFIJ $.

    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 13-Sep-2005.) $)
    rspcva $p |- ( ( A e. B /\ A. x e. B ph ) -> ps ) $=
      ( wcel wral rspcv imp ) DEGACEHBABCDEFIJ $.

    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 26-Jul-2006.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    rspccva $p |- ( ( A. x e. B ph /\ A e. B ) -> ps ) $=
      ( wcel wral rspcv impcom ) DEGACEHBABCDEFIJ $.

    $( Restricted existential specialization, using implicit substitution.
       (Contributed by NM, 26-May-1998.) $)
    rspcev $p |- ( ( A e. B /\ ps ) -> E. x e. B ph ) $=
      ( nfv rspce ) ABCDEBCGFH $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.  $d x ch $.
    rspcimdv.1 $e |- ( ph -> A e. B ) $.
    ${
      rspcimdv.2 $e |- ( ( ph /\ x = A ) -> ( ps -> ch ) ) $.
      $( Restricted specialization, using implicit substitution.  (Contributed
         by Mario Carneiro, 4-Jan-2017.) $)
      rspcimdv $p |- ( ph -> ( A. x e. B ps -> ch ) ) $=
        ( wral cv wcel wi wal df-ral wceq wa simpr eleq1d biimprd imim12d mpid
        spcimdv syl5bi ) BDFIDJZFKZBLZDMZACBDFNAUGEFKZCGAUFUHCLDEFGAUDEOZPZUHUE
        BCUJUEUHUJUDEFAUIQRSHTUBUAUC $.
    $}

    rspcimedv.2 $e |- ( ( ph /\ x = A ) -> ( ch -> ps ) ) $.
    $( Restricted existential specialization, using implicit substitution.
       (Contributed by Mario Carneiro, 4-Jan-2017.) $)
    rspcimedv $p |- ( ph -> ( ch -> E. x e. B ps ) ) $=
      ( wn wral wrex cv wceq wa con3d rspcimdv con2d dfrex2 syl6ibr ) ACBIZDFJZ
      IBDFKAUACATCIDEFGADLEMNCBHOPQBDFRS $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.  $d x ch $.
    rspcdv.1 $e |- ( ph -> A e. B ) $.
    rspcdv.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Restricted specialization, using implicit substitution.  (Contributed by
       NM, 17-Feb-2007.)  (Revised by Mario Carneiro, 4-Jan-2017.) $)
    rspcdv $p |- ( ph -> ( A. x e. B ps -> ch ) ) $=
      ( cv wceq wa biimpd rspcimdv ) ABCDEFGADIEJKBCHLM $.

    $( Restricted existential specialization, using implicit substitution.
       (Contributed by FL, 17-Apr-2007.)  (Revised by Mario Carneiro,
       4-Jan-2017.) $)
    rspcedv $p |- ( ph -> ( ch -> E. x e. B ps ) ) $=
      ( cv wceq wa biimprd rspcimedv ) ABCDEFGADIEJKBCHLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.  $d x ch $.
    rspcedvd.1 $e |- ( ph -> A e. B ) $.
    rspcedvd.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    rspcedvd.3 $e |- ( ph -> ch ) $.
    $( Restricted existential specialization, using implicit substitution.
       Variant of ~ rspcdv .  (Contributed by AV, 27-Nov-2019.) $)
    rspcedvd $p |- ( ph -> E. x e. B ps ) $=
      ( wrex rspcedv mpd ) ACBDFJIABCDEFGHKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    rspcedeqvd.1 $e |- ( ph -> A e. B ) $.
    rspcedeqvd.2 $e |- ( ( ph /\ x = A ) -> C = D ) $.
    ${
      $d x D $.
      $( Restricted existential specialization, using implicit substitution.
         Variant of ~ rspcedvd for equations, in which the left hand side
         depends on the quantified variable.  (Contributed by AV,
         24-Dec-2019.) $)
      rspcedeq1vd $p |- ( ph -> E. x e. B C = D ) $=
        ( wceq cv wa eqeq1d eqidd rspcedvd ) AEFIFFIBCDGABJCIKEFFHLAFMN $.
    $}

    $d x C $.
    $( Restricted existential specialization, using implicit substitution.
       Variant of ~ rspcedvd for equations, in which the right hand side
       depends on the quantified variable.  (Contributed by AV,
       24-Dec-2019.) $)
    rspcedeq2vd $p |- ( ph -> E. x e. B C = D ) $=
      ( wceq cv wa eqcomd eqeq2d eqidd rspcedvd ) AEFIEEIBCDGABJCIKZFEEPEFHLMAE
      NO $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x C $.  $d x y D $.
    rspc2.1 $e |- F/ x ch $.
    rspc2.2 $e |- F/ y ps $.
    rspc2.3 $e |- ( x = A -> ( ph <-> ch ) ) $.
    rspc2.4 $e |- ( y = B -> ( ch <-> ps ) ) $.
    $( 2-variable restricted specialization, using implicit substitution.
       (Contributed by NM, 9-Nov-2012.) $)
    rspc2 $p |- ( ( A e. C /\ B e. D ) -> ( A. x e. C A. y e. D ph ->
                  ps ) ) $=
      ( wcel wral nfcv nfral cv wceq rspc ralbidv sylan9 ) FHNAEIOZDHOCEIOZGINB
      UCUDDFHCDEIDIPJQDRFSACEILUATCBEGIKMTUB $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x C $.  $d x y D $.  $d x ch $.  $d y ps $.
    rspc2v.1 $e |- ( x = A -> ( ph <-> ch ) ) $.
    rspc2v.2 $e |- ( y = B -> ( ch <-> ps ) ) $.
    $( 2-variable restricted specialization, using implicit substitution.
       (Contributed by NM, 13-Sep-1999.) $)
    rspc2v $p |- ( ( A e. C /\ B e. D ) -> ( A. x e. C A. y e. D ph ->
                  ps ) ) $=
      ( nfv rspc2 ) ABCDEFGHICDLBELJKM $.

    $( 2-variable restricted specialization, using implicit substitution.
       (Contributed by NM, 18-Jun-2014.) $)
    rspc2va $p |- ( ( ( A e. C /\ B e. D ) /\ A. x e. C A. y e. D ph ) ->
                  ps ) $=
      ( wcel wa wral rspc2v imp ) FHLGILMAEINDHNBABCDEFGHIJKOP $.

    $( 2-variable restricted existential specialization, using implicit
       substitution.  (Contributed by NM, 16-Oct-1999.) $)
    rspc2ev $p |- ( ( A e. C /\ B e. D /\ ps ) -> E. x e. C E. y e. D ph ) $=
      ( wcel w3a wrex wa rspcev anim2i 3impb cv wceq rexbidv syl ) FHLZGILZBMUC
      CEINZOZAEINZDHNUCUDBUFUDBOUEUCCBEGIKPQRUGUEDFHDSFTACEIJUAPUB $.
  $}

  ${
    $d z ps $.  $d x ch $.  $d y th $.  $d x y z A $.  $d y z B $.  $d z C $.
    $d x R $.  $d x y S $.  $d x y z T $.
    rspc3v.1 $e |- ( x = A -> ( ph <-> ch ) ) $.
    rspc3v.2 $e |- ( y = B -> ( ch <-> th ) ) $.
    rspc3v.3 $e |- ( z = C -> ( th <-> ps ) ) $.
    $( 3-variable restricted specialization, using implicit substitution.
       (Contributed by NM, 10-May-2005.) $)
    rspc3v $p |- ( ( A e. R /\ B e. S /\ C e. T ) ->
                  ( A. x e. R A. y e. S A. z e. T ph -> ps ) ) $=
      ( wcel wral cv wceq wi wa ralbidv rspc2v rspcv sylan9 3impa ) HKQZILQZJMQ
      ZAGMRZFLREKRZBUAUHUIUBULDGMRZUJBUKUMCGMREFHIKLESHTACGMNUCFSITCDGMOUCUDDBG
      JMPUEUFUG $.

    $( 3-variable restricted existential specialization, using implicit
       substitution.  (Contributed by NM, 25-Jul-2012.) $)
    rspc3ev $p |- ( ( ( A e. R /\ B e. S /\ C e. T ) /\ ps ) ->
                  E. x e. R E. y e. S E. z e. T ph ) $=
      ( wcel wrex cv wceq w3a wa simpl1 simpl2 rspcev 3ad2antl3 rexbidv rspc2ev
      syl3anc ) HKQZILQZJMQZUABUBUJUKDGMRZAGMRZFLREKRUJUKULBUCUJUKULBUDULUJBUMU
      KDBGJMPUEUFUNUMCGMREFHIKLESHTACGMNUGFSITCDGMOUGUHUI $.
  $}

  ${
    $d ph x z $.  $d ph x y $.  $d ps y $.  $d ps z $.  $d A x $.  $d C x $.
    $d D x $.  $d ch x $.
    ralxpxfr2d.a $e |- A e. _V $.
    ralxpxfr2d.b $e |- ( ph -> ( x e. B <-> E. y e. C E. z e. D x = A ) ) $.
    ralxpxfr2d.c $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Transfer a universal quantifier between one variable with pair-like
       semantics and two.  (Contributed by Stefan O'Rear, 27-Feb-2015.) $)
    ralxpxfr2d $p |- ( ph -> ( A. x e. B ps <-> A. y e. C A. z e. D ch ) ) $=
      ( wral wi wal wrex albidv ralcom4 ralbii wceq df-ral imbi1d syl5bb bitr2i
      wcel r19.23v albii 3bitr4ri syl6bb pm5.74da biidd ceqsalv 2ralbidv bitrd
      cv ) ABDHNZDUPZGUAZBOZDPZFJNZEINZCFJNEINAUQUSFJQZEIQZBOZDPZVCUQURHUFZBOZD
      PAVGBDHUBAVIVFDAVHVEBLUCRUDUTFJNZDPZEINVJEINZDPVCVGVJEDISVBVKEIUTFDJSTVFV
      LDVLVDBOZEINVFVJVMEIUSBFJUGTVDBEIUGUEUHUIUJAVACEFIJAVAUSCOZDPCAUTVNDAUSBC
      MUKRCCDGKUSCULUMUJUNUO $.
  $}

  ${
    $d A x z $.  $d Y x z $.  $d ph x $.  $d ps z $.  $d th z $.
    rexraleqim.1 $e |- ( x = z -> ( ps <-> ph ) ) $.
    rexraleqim.2 $e |- ( z = Y -> ( ph <-> th ) ) $.
    $( Statement following from existence and generalization with equality.
       (Contributed by AV, 9-Feb-2019.) $)
    rexraleqim $p |- ( ( E. z e. A ph /\ A. x e. A ( ps -> x = Y ) ) -> th ) $=
      ( wrex cv wceq wi wral wcel wa weq eqeq1 imbi12d rspcva syli impancom imp
      biimpd rexlimiva ) AEFJBDKZGLZMZDFNZCAUICMEFEKZFOZUIACAUKUIPUJGLZCUHAULMD
      UJFDEQBAUGULHUFUJGRSTULACIUDUAUBUEUC $.
  $}

  ${
    $d x A y z $.  $d x B y z $.
    eqvinc.1 $e |- A e. _V $.
    $( A variable introduction law for class equality.  (Contributed by NM,
       14-Apr-1995.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    eqvinc $p |- ( A = B <-> E. x ( x = A /\ x = B ) ) $=
      ( wceq cv wa wex wi isseti ax-1 eqtr jca eximi pm3.43 mp2b 19.37aiv eqtr2
      ex exlimiv impbii ) BCEZAFZBEZUCCEZGZAHUBUFAUDAHUBUDIZUBUEIZGZAHUBUFIZAHA
      BDJUDUIAUDUGUHUDUBKUDUBUEUCBCLSMNUIUJAUBUDUEONPQUFUBAUCBCRTUA $.
  $}

  ${
    $d A y $.  $d B y $.  $d x y $.
    eqvincf.1 $e |- F/_ x A $.
    eqvincf.2 $e |- F/_ x B $.
    eqvincf.3 $e |- A e. _V $.
    $( A variable introduction law for class equality, using bound-variable
       hypotheses instead of distinct variable conditions.  (Contributed by NM,
       14-Sep-2003.) $)
    eqvincf $p |- ( A = B <-> E. x ( x = A /\ x = B ) ) $=
      ( vy wceq cv wa wex eqvinc nfeq2 nfan nfv eqeq1 anbi12d cbvex bitri ) BCH
      GIZBHZTCHZJZGKAIZBHZUDCHZJZAKGBCFLUCUGGAUAUBAATBDMATCEMNUGGOTUDHUAUEUBUFT
      UDBPTUDCPQRS $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( Two ways to express substitution of ` A ` for ` x ` in ` ph ` .  This is
       the analogue for classes of ~ sb56 .  (Contributed by NM, 2-Mar-1995.)
       (Revised by BJ, 27-Apr-2019.) $)
    alexeqg $p |- ( A e. V -> ( A. x ( x = A -> ph )
                                                <-> E. x ( x = A /\ ph ) ) ) $=
      ( vy wcel cv wceq wa wex wi wal eqeq2 anbi1d exbidv imbi1d albidv vtoclbg
      sb56 bicomd ) CDFBGZCHZAIZBJZUBAKZBLZUAEGZHZAIZBJUHAKZBLUDUFECDUGCHZUIUCB
      UKUHUBAUGCUAMZNOUKUJUEBUKUHUBAULPQABESRT $.
  $}

  ${
    $d x A y $.  $d ph y $.
    alexeq.1 $e |- A e. _V $.
    $( Two ways to express substitution of ` A ` for ` x ` in ` ph ` .
       Obsoleted by ~ alexeqg .  (Contributed by NM, 2-Mar-1995.)  Obsolete as
       of 1-May-2019.  (New usage is discouraged.) $)
    alexeq $p |- ( A. x ( x = A -> ph ) <-> E. x ( x = A /\ ph ) ) $=
      ( vy cv wceq wa wex wi wal anbi1d exbidv imbi1d albidv sb56 vtoclb bicomi
      eqeq2 ) BFZCGZAHZBIZUAAJZBKZTEFZGZAHZBIUGAJZBKUCUEECDUFCGZUHUBBUJUGUAAUFC
      TSZLMUJUIUDBUJUGUAAUKNOABEPQR $.
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Equality implies equivalence with substitution.  (Contributed by NM,
       2-Mar-1995.)  (Proof shortened by BJ, 1-May-2019.) $)
    ceqex $p |- ( x = A -> ( ph <-> E. x ( x = A /\ ph ) ) ) $=
      ( cv wceq wa wex 19.8a ex wi wal cvv wcel wb eqvisset alexeqg syl sylbird
      sp com12 impbid ) BDCEZAUBAFZBGZUBAUDUCBHIUBUDUBAJZBKZAUBCLMUFUDNBCOABCLP
      QUFUBAUEBSTRUA $.
  $}

  ${
    $d x y A $.
    ceqsexg.1 $e |- F/ x ps $.
    ceqsexg.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A representation of explicit substitution of a class for a variable,
       inferred from an implicit substitution hypothesis.  (Contributed by NM,
       11-Oct-2004.) $)
    ceqsexg $p |- ( A e. V -> ( E. x ( x = A /\ ph ) <-> ps ) ) $=
      ( wb cv wceq wa wex nfe1 nfbi ceqex bibi12d biid vtoclg1f ) AAHCIDJZAKZCL
      ZBHCDEUABCTCMFNSAUAABACDOGPAQR $.
  $}

  ${
    $d x y A $.  $d x ps $.
    ceqsexgv.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Elimination of an existential quantifier, using implicit substitution.
       (Contributed by NM, 29-Dec-1996.) $)
    ceqsexgv $p |- ( A e. V -> ( E. x ( x = A /\ ph ) <-> ps ) ) $=
      ( nfv ceqsexg ) ABCDEBCGFH $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    ceqsrexv.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Elimination of a restricted existential quantifier, using implicit
       substitution.  (Contributed by NM, 30-Apr-2004.) $)
    ceqsrexv $p |- ( A e. B -> ( E. x e. B ( x = A /\ ph ) <-> ps ) ) $=
      ( cv wceq wa wrex wcel wex df-rex an12 exbii bitr4i eleq1 anbi12d bianabs
      ceqsexgv syl5bb ) CGZDHZAIZCEJZUCUBEKZAIZIZCLZDEKZBUEUFUDIZCLUIUDCEMUHUKC
      UCUFANOPUJUIBUGUJBICDEUCUFUJABUBDEQFRTSUA $.

    $( Elimination of a restricted existential quantifier, using implicit
       substitution.  (Contributed by Mario Carneiro, 14-Mar-2014.) $)
    ceqsrexbv $p |- ( E. x e. B ( x = A /\ ph ) <-> ( A e. B /\ ps ) ) $=
      ( wcel cv wceq wa wrex r19.42v eleq1 adantr pm5.32ri bicomi baib ceqsrexv
      wb rexbiia pm5.32i 3bitr3i ) DEGZCHZDIZAJZJZCEKUCUFCEKZJUHUCBJUCUFCELUGUF
      CEUGUDEGZUFUIUFJUGUFUIUCUEUIUCSAUDDEMNOPQTUCUHBABCDEFRUAUB $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x C $.  $d x y D $.  $d x ps $.  $d y ch $.
    ceqsrex2v.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ceqsrex2v.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Elimination of a restricted existential quantifier, using implicit
       substitution.  (Contributed by NM, 29-Oct-2005.) $)
    ceqsrex2v $p |- ( ( A e. C /\ B e. D ) ->
      ( E. x e. C E. y e. D ( ( x = A /\ y = B ) /\ ph ) <-> ch ) ) $=
      ( wcel cv wceq wa wrex anass rexbii r19.42v ceqsrexv bitri anbi2d rexbidv
      syl5bb sylan9bb ) FHLZDMFNZEMGNZOAOZEIPZDHPZUHBOZEIPZGILCUKUGUHAOZEIPZOZD
      HPUFUMUJUPDHUJUGUNOZEIPUPUIUQEIUGUHAQRUGUNEISUARUOUMDFHUGUNULEIUGABUHJUBU
      CTUDBCEGIKTUE $.
  $}

  ${
    $d x A $.  $d x B $.
    clel2.1 $e |- A e. _V $.
    $( An alternate definition of class membership when the class is a set.
       (Contributed by NM, 18-Aug-1993.) $)
    clel2 $p |- ( A e. B <-> A. x ( x = A -> x e. B ) ) $=
      ( cv wceq wcel wi wal eleq1 ceqsalv bicomi ) AEZBFMCGZHAIBCGZNOABDMBCJKL
      $.
  $}

  ${
    $d x A $.  $d x B $.
    $( An alternate definition of class membership when the class is a set.
       (Contributed by NM, 13-Aug-2005.) $)
    clel3g $p |- ( B e. V -> ( A e. B <-> E. x ( x = B /\ A e. x ) ) ) $=
      ( wcel cv wceq wa wex eleq2 ceqsexgv bicomd ) CDEAFZCGBMEZHAIBCEZNOACDMCB
      JKL $.
  $}

  ${
    $d x A $.  $d x B $.
    clel3.1 $e |- B e. _V $.
    $( An alternate definition of class membership when the class is a set.
       (Contributed by NM, 18-Aug-1993.) $)
    clel3 $p |- ( A e. B <-> E. x ( x = B /\ A e. x ) ) $=
      ( cvv wcel cv wceq wa wex wb clel3g ax-mp ) CEFBCFAGZCHBNFIAJKDABCELM $.
  $}

  ${
    $d x A $.  $d x B $.
    clel4.1 $e |- B e. _V $.
    $( An alternate definition of class membership when the class is a set.
       (Contributed by NM, 18-Aug-1993.) $)
    clel4 $p |- ( A e. B <-> A. x ( x = B -> A e. x ) ) $=
      ( cv wceq wcel wi wal eleq2 ceqsalv bicomi ) AEZCFBMGZHAIBCGZNOACDMCBJKL
      $.
  $}

  ${
    $d y A z $.  $d y B z $.
    $( Compare theorem *13.183 in [WhiteheadRussell] p. 178.  Only ` A ` is
       required to be a set.  (Contributed by Andrew Salmon, 3-Jun-2011.) $)
    pm13.183 $p |- ( A e. V -> ( A = B <-> A. z ( z = A <-> z = B ) ) ) $=
      ( vy cv wceq wal eqeq1 eqeq2 bibi1d albidv alrimiv wsb stdpc4 sbbi bibi2i
      wb eqsb3 sylbi equsb1 bi1 mpi syl impbii vtoclbg ) EFZCGZAFZUGGZUICGZRZAH
      ZBCGUIBGZUKRZAHEBDUGBCIUGBGZULUOAUPUJUNUKUGBUIJKLUHUMUHULAUGCUIJMUMULAENZ
      UHULAEOUQUJAENZUKAENZRZUHUJUKAEPUTURUHRZUHUSUHUREACSQVAURUHAEUAURUHUBUCTT
      UDUEUF $.
  $}

  ${
    $d y A $.  $d x y $.  $d y ph $.
    $( Restricted quantifier version of Theorem 19.3 of [Margaris] p. 89.  We
       don't need the nonempty class condition of ~ r19.3rzv when there is an
       outer quantifier.  (Contributed by NM, 25-Oct-2012.) $)
    rr19.3v $p |- ( A. x e. A A. y e. A ph <-> A. x e. A ph ) $=
      ( wral cv weq biidd rspcv ralimia wcel ax-1 ralrimiv ralimi impbii ) ACDE
      ZBDEABDEPABDAACBFDCBGAHIJAPBDAACDACFDKLMNO $.

    $( Restricted quantifier version of Theorem 19.28 of [Margaris] p. 90.  We
       don't need the nonempty class condition of ~ r19.28zv when there is an
       outer quantifier.  (Contributed by NM, 29-Oct-2012.) $)
    rr19.28v $p |- ( A. x e. A A. y e. A ( ph /\ ps )
                      <-> A. x e. A ( ph /\ A. y e. A ps ) ) $=
      ( wa wral cv wcel simpl ralimi weq biidd rspcv syl5 wi simpr jcad ralimia
      a1i r19.28av impbii ) ABFZDEGZCEGABDEGZFZCEGUDUFCECHZEIZUDAUEUDADEGUHAUCA
      DEABJKAADUGEDCLAMNOUDUEPUHUCBDEABQKTRSUFUDCEABDEUAKUB $.
  $}

  ${
    $d x y A $.  $d y ph $.  $d x ps $.
    $( Membership in a class abstraction, using implicit substitution.  (Closed
       theorem version of ~ elabg .)  (Contributed by NM, 7-Nov-2005.)  (Proof
       shortened by Andrew Salmon, 8-Jun-2011.) $)
    elabgt $p |- ( ( A e. B /\ A. x ( x = A -> ( ph <-> ps ) ) ) ->
                 ( A e. { x | ph } <-> ps ) ) $=
      ( cv wceq wb wal wcel cab abid eleq1 syl5bbr bibi1d biimpd a2i alimi nfcv
      wi nfab1 nfel2 nfv nfbi pm5.5 spcgf imp sylan2 ) CFZDGZABHZTZCIDEJZUJDACK
      ZJZBHZTZCIZUPULUQCUJUKUPUJUKUPUJAUOBAUIUNJUJUOACLUIDUNMNOPQRUMURUPUQUPCDE
      CDSUOBCCDUNACUAUBBCUCUDUJUPUEUFUGUH $.
  $}

  ${
    elabgf.1 $e |- F/_ x A $.
    elabgf.2 $e |- F/ x ps $.
    elabgf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, using implicit substitution.  Compare
       Theorem 6.13 of [Quine] p. 44.  This version has bound-variable
       hypotheses in place of distinct variable restrictions.  (Contributed by
       NM, 21-Sep-2003.)  (Revised by Mario Carneiro, 12-Oct-2016.) $)
    elabgf $p |- ( A e. B -> ( A e. { x | ph } <-> ps ) ) $=
      ( cv cab wcel wb nfab1 nfel nfbi wceq eleq1 bibi12d abid vtoclgf ) CIZACJ
      ZKZALDUBKZBLCDEFUDBCCDUBFACMNGOUADPUCUDABUADUBQHRACST $.
  $}

  ${
    $d ps y $.  $d x A y $.  $d y ph $.
    elabf.1 $e |- F/ x ps $.
    elabf.2 $e |- A e. _V $.
    elabf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 1-Aug-1994.)  (Revised by Mario Carneiro,
       12-Oct-2016.) $)
    elabf $p |- ( A e. { x | ph } <-> ps ) $=
      ( cvv wcel cab wb nfcv elabgf ax-mp ) DHIDACJIBKFABCDHCDLEGMN $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab.1 $e |- A e. _V $.
    elab.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, using implicit substitution.  Compare
       Theorem 6.13 of [Quine] p. 44.  (Contributed by NM, 1-Aug-1994.) $)
    elab $p |- ( A e. { x | ph } <-> ps ) $=
      ( nfv elabf ) ABCDBCGEFH $.
  $}

  ${
    $d x ps $.  $d x y A $.
    elabg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, using implicit substitution.  Compare
       Theorem 6.13 of [Quine] p. 44.  (Contributed by NM, 14-Apr-1995.) $)
    elabg $p |- ( A e. V -> ( A e. { x | ph } <-> ps ) ) $=
      ( nfcv nfv elabgf ) ABCDECDGBCHFI $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab2g.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    elab2g.2 $e |- B = { x | ph } $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 13-Sep-1995.) $)
    elab2g $p |- ( A e. V -> ( A e. B <-> ps ) ) $=
      ( wcel cab eleq2i elabg syl5bb ) DEIDACJZIDFIBENDHKABCDFGLM $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab2.1 $e |- A e. _V $.
    elab2.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    elab2.3 $e |- B = { x | ph } $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 13-Sep-1995.) $)
    elab2 $p |- ( A e. B <-> ps ) $=
      ( cvv wcel wb elab2g ax-mp ) DIJDEJBKFABCDEIGHLM $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab4g.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    elab4g.2 $e |- B = { x | ph } $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 17-Oct-2012.) $)
    elab4g $p |- ( A e. B <-> ( A e. _V /\ ps ) ) $=
      ( wcel cvv elex elab2g biadan2 ) DEHDIHBDEJABCDEIFGKL $.
  $}

  ${
    $d y A $.
    elab3gf.1 $e |- F/_ x A $.
    elab3gf.2 $e |- F/ x ps $.
    elab3gf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, with a weaker antecedent than
       ~ elabgf .  (Contributed by NM, 6-Sep-2011.) $)
    elab3gf $p |- ( ( ps -> A e. B ) -> ( A e. { x | ph } <-> ps ) ) $=
      ( wcel cab wb wn elabgf ibi pm2.21 impbid2 ja ) BDEIDACJZIZBKBLSBSBABCDRF
      GHMNBSOPABCDEFGHMQ $.
  $}

  ${
    $d x ps $.  $d x y A $.
    elab3g.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction, with a weaker antecedent than
       ~ elabg .  (Contributed by NM, 29-Aug-2006.) $)
    elab3g $p |- ( ( ps -> A e. B ) -> ( A e. { x | ph } <-> ps ) ) $=
      ( nfcv nfv elab3gf ) ABCDECDGBCHFI $.
  $}

  ${
    $d x ps $.  $d x A $.
    elab3.1 $e |- ( ps -> A e. _V ) $.
    elab3.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction using implicit substitution.
       (Contributed by NM, 10-Nov-2000.) $)
    elab3 $p |- ( A e. { x | ph } <-> ps ) $=
      ( cvv wcel wi cab wb elab3g ax-mp ) BDGHIDACJHBKEABCDGFLM $.
  $}

  ${
    $d A x $.  $d V x $.
    $( Implication for the membership in a restricted class abstraction.
       (Contributed by Alexander van der Vekens, 31-Dec-2017.) $)
    elrabi $p |- ( A e. { x e. V | ph } -> A e. V ) $=
      ( wcel cv wa cab crab wceq wex clelab eleq1 anbi1d simprbda exlimiv sylbi
      df-rab eleq2s ) CDEZCBFZDEZAGZBHZABDICUDEUACJZUCGZBKTUCBCLUFTBUEUCTAUEUBT
      AUACDMNOPQABDRS $.
  $}

  ${
    elrabf.1 $e |- F/_ x A $.
    elrabf.2 $e |- F/_ x B $.
    elrabf.3 $e |- F/ x ps $.
    elrabf.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a restricted class abstraction, using implicit
       substitution.  This version has bound-variable hypotheses in place of
       distinct variable restrictions.  (Contributed by NM, 21-Sep-2003.) $)
    elrabf $p |- ( A e. { x e. B | ph } <-> ( A e. B /\ ps ) ) $=
      ( crab wcel cvv wa elex adantr cv cab df-rab eleq2i nfel nfan wceq elabgf
      eleq1 anbi12d syl5bb pm5.21nii ) DACEJZKZDLKZDEKZBMZDUHNUKUJBDENOUIDCPZEK
      ZAMZCQZKUJULUHUPDACERSUOULCDLFUKBCCDEFGTHUAUMDUBUNUKABUMDEUDIUEUCUFUG $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    $( Membership in a restricted class abstraction, using implicit
       substitution.  (Closed theorem version of ~ elrab3 .)  (Contributed by
       Thierry Arnoux, 31-Aug-2017.) $)
    elrab3t $p |- ( ( A. x ( x = A -> ( ph <-> ps ) ) /\ A e. B ) ->
                                           ( A e. { x e. B | ph } <-> ps ) ) $=
      ( crab wcel cv wa cab wceq wb wi wal df-rab eleq2i simpr nfa1 nfv nfan
      simpl eleq1 biimparc biantrurd bibi1d pm5.74da adantl mpbid alrimi elabgt
      19.21bi syl2anc syl5bb ) DACEFZGDCHZEGZAIZCJZGZUODKZABLZMZCNZDEGZIZBUNURD
      ACEOPVEVDUTUQBLZMZCNUSBLVCVDQVEVGCVCVDCVBCRVDCSTVEVBVGVEVBCVCVDUAUKVDVBVG
      LVCVDUTVAVFVDUTIZAUQBVHUPAUTUPVDUODEUBUCUDUEUFUGUHUIUQBCDEUJULUM $.
  $}

  ${
    $d x ps $.  $d x y A $.  $d x y B $.
    elrab.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a restricted class abstraction, using implicit
       substitution.  (Contributed by NM, 21-May-1999.) $)
    elrab $p |- ( A e. { x e. B | ph } <-> ( A e. B /\ ps ) ) $=
      ( nfcv nfv elrabf ) ABCDECDGCEGBCHFI $.

    $( Membership in a restricted class abstraction, using implicit
       substitution.  (Contributed by NM, 5-Oct-2006.) $)
    elrab3 $p |- ( A e. B -> ( A e. { x e. B | ph } <-> ps ) ) $=
      ( crab wcel elrab baib ) DACEGHDEHBABCDEFIJ $.
  $}

  ${
    $d x ps $.  $d x y A $.  $d x y B $.
    elrab2.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    elrab2.2 $e |- C = { x e. B | ph } $.
    $( Membership in a class abstraction, using implicit substitution.
       (Contributed by NM, 2-Nov-2006.) $)
    elrab2 $p |- ( A e. C <-> ( A e. B /\ ps ) ) $=
      ( wcel crab wa eleq2i elrab bitri ) DFIDACEJZIDEIBKFODHLABCDEGMN $.
  $}

  ${
    $d x y $.  $d y A $.  $d y ps $.
    ralab.1 $e |- ( y = x -> ( ph <-> ps ) ) $.
    $( Universal quantification over a class abstraction.  (Contributed by Jeff
       Madsen, 10-Jun-2010.) $)
    ralab $p |- ( A. x e. { y | ph } ch <-> A. x ( ps -> ch ) ) $=
      ( cab wral cv wcel wi wal df-ral vex elab imbi1i albii bitri ) CDAEGZHDIZ
      SJZCKZDLBCKZDLCDSMUBUCDUABCABETDNFOPQR $.

    $( Universal quantification over a restricted class abstraction.
       (Contributed by Jeff Madsen, 10-Jun-2010.) $)
    ralrab $p |- ( A. x e. { y e. A | ph } ch <-> A. x e. A ( ps -> ch ) ) $=
      ( wi crab cv wcel wa elrab imbi1i impexp bitri ralbii2 ) CBCHZDAEFIZFDJZS
      KZCHTFKZBLZCHUBRHUAUCCABETFGMNUBBCOPQ $.

    $( Existential quantification over a class abstraction.  (Contributed by
       Mario Carneiro, 23-Jan-2014.)  (Revised by Mario Carneiro,
       3-Sep-2015.) $)
    rexab $p |- ( E. x e. { y | ph } ch <-> E. x ( ps /\ ch ) ) $=
      ( cab wrex cv wcel wa wex df-rex vex elab anbi1i exbii bitri ) CDAEGZHDIZ
      SJZCKZDLBCKZDLCDSMUBUCDUABCABETDNFOPQR $.

    $( Existential quantification over a class abstraction.  (Contributed by
       Jeff Madsen, 17-Jun-2011.)  (Revised by Mario Carneiro, 3-Sep-2015.) $)
    rexrab $p |- ( E. x e. { y e. A | ph } ch <-> E. x e. A ( ps /\ ch ) ) $=
      ( wa crab cv wcel elrab anbi1i anass bitri rexbii2 ) CBCHZDAEFIZFDJZRKZCH
      SFKZBHZCHUAQHTUBCABESFGLMUABCNOP $.
  $}

  ${
    $d x y $.  $d x A $.  $d x ch $.  $d x ph $.  $d y ps $.
    ralab2.1 $e |- ( x = y -> ( ps <-> ch ) ) $.
    $( Universal quantification over a class abstraction.  (Contributed by
       Mario Carneiro, 3-Sep-2015.) $)
    ralab2 $p |- ( A. x e. { y | ph } ps <-> A. y ( ph -> ch ) ) $=
      ( cab wral cv wcel wi wal df-ral nfsab1 nfv nfim weq eleq1 abid syl6bb
      imbi12d cbval bitri ) BDAEGZHDIZUDJZBKZDLACKZELBDUDMUGUHDEUFBEAEDNBEOPUHD
      ODEQZUFABCUIUFEIZUDJAUEUJUDRAESTFUAUBUC $.

    $( Universal quantification over a restricted class abstraction.
       (Contributed by Mario Carneiro, 3-Sep-2015.) $)
    ralrab2 $p |- ( A. x e. { y e. A | ph } ps <-> A. y e. A ( ph -> ch ) ) $=
      ( crab wral cv wcel wa cab wi wal df-rab raleqi ralab2 impexp albii
      df-ral bitr4i 3bitri ) BDAEFHZIBDEJFKZALZEMZIUFCNZEOZACNZEFIZBDUDUGAEFPQU
      FBCDEGRUIUEUJNZEOUKUHULEUEACSTUJEFUAUBUC $.

    $( Existential quantification over a class abstraction.  (Contributed by
       Mario Carneiro, 3-Sep-2015.) $)
    rexab2 $p |- ( E. x e. { y | ph } ps <-> E. y ( ph /\ ch ) ) $=
      ( cab wrex cv wcel wa wex df-rex nfsab1 nfv nfan weq eleq1 abid syl6bb
      anbi12d cbvex bitri ) BDAEGZHDIZUDJZBKZDLACKZELBDUDMUGUHDEUFBEAEDNBEOPUHD
      ODEQZUFABCUIUFEIZUDJAUEUJUDRAESTFUAUBUC $.

    $( Existential quantification over a class abstraction.  (Contributed by
       Mario Carneiro, 3-Sep-2015.) $)
    rexrab2 $p |- ( E. x e. { y e. A | ph } ps <-> E. y e. A ( ph /\ ch ) ) $=
      ( crab wrex cv wcel wa cab wex df-rab rexeqi rexab2 anass exbii df-rex
      bitr4i 3bitri ) BDAEFHZIBDEJFKZALZEMZIUECLZENZACLZEFIZBDUCUFAEFOPUEBCDEGQ
      UHUDUILZENUJUGUKEUDACRSUIEFTUAUB $.
  $}

  ${
    $d w y A $.  $d w x z $.  $d x y $.  $d A z $.
    $( Identity used to create closed-form versions of bound-variable
       hypothesis builders for class expressions.  (Contributed by NM,
       10-Nov-2005.)  (Proof shortened by Mario Carneiro, 12-Oct-2016.) $)
    abidnf $p |- ( F/_ x A -> { z | A. x z e. A } = A ) $=
      ( wnfc cv wcel wal sp nfcr nfrd impbid2 abbi1dv ) ACDZBECFZAGZBCMONNAHMNA
      ABCIJKL $.
  $}

  ${
    $d y A $.  $d x z $.  $d x y $.  $d z A $.
    dedhb.1 $e |- ( A = { z | A. x z e. A } -> ( ph <-> ps ) ) $.
    dedhb.2 $e |- ps $.
    $( A deduction theorem for converting the inference ` |- F/_ x A ` =>
       ` |- ph ` into a closed theorem.  Use ~ nfa1 and ~ nfab to eliminate the
       hypothesis of the substitution instance ` ps ` of the inference.  For
       converting the inference form into a deduction form, ~ abidnf is
       useful.  (Contributed by NM, 8-Dec-2006.) $)
    dedhb $p |- ( F/_ x A -> ph ) $=
      ( wnfc cv wcel wal cab wceq wb abidnf eqcomd syl mpbiri ) CEHZABGSEDIEJCK
      DLZMABNSTECDEOPFQR $.
  $}

  ${
    $d y ph $.  $d x y ps $.  $d x y A $.
    eqeu.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A condition which implies existential uniqueness.  (Contributed by Jeff
       Hankins, 8-Sep-2009.) $)
    eqeu $p |- ( ( A e. B /\ ps /\ A. x ( ph -> x = A ) ) -> E! x ph ) $=
      ( vy wcel cv wceq wi wal w3a wex weq weu spcegv imp 3adant3 eqeq2 3adant2
      imbi2d albidv eu3v sylanbrc ) DEHZBACIZDJZKZCLZMACNZACGOZKZCLZGNZACPUFBUK
      UJUFBUKABCDEFQRSUFUJUOBUFUJUOUNUJGDEGIZDJZUMUICUQULUHAUPDUGTUBUCQRUAACGUD
      UE $.
  $}

  ${
    $d x y A $.
    $( Equality has existential uniqueness.  (Contributed by NM,
       25-Nov-1994.) $)
    eueq $p |- ( A e. _V <-> E! x x = A ) $=
      ( vy cv wceq wex wa wi wal cvv wcel weu eqtr3 biantru isset eqeq1 3bitr4i
      gen2 eu4 ) ADZBEZAFZUBUACDZBEZGTUCEHZCIAIZGBJKUAALUFUBUEACTUCBMRNABOUAUDA
      CTUCBPSQ $.
  $}

  ${
    $d x A $.
    eueq1.1 $e |- A e. _V $.
    $( Equality has existential uniqueness.  (Contributed by NM,
       5-Apr-1995.) $)
    eueq1 $p |- E! x x = A $=
      ( cvv wcel cv wceq weu eueq mpbi ) BDEAFBGAHCABIJ $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x B $.
    eueq2.1 $e |- A e. _V $.
    eueq2.2 $e |- B e. _V $.
    $( Equality has existential uniqueness (split into 2 cases).  (Contributed
       by NM, 5-Apr-1995.) $)
    eueq2 $p |- E! x ( ( ph /\ x = A ) \/ ( -. ph /\ x = B ) ) $=
      ( cv wceq wa wn weu eueq1 euanv biimpri mpan2 euorv bianfd eubidv mpbid
      wo notnot1 syl2anc orcom orbi2d syl5bb mpdan id orbi1d pm2.61i ) AABGZCHZ
      IZAJZUJDHZIZTZBKZAUMULTZBKZUQAUMJULBKZUSAUAZAUKBKZUTBCELUTAVBIAUKBMNOUMUL
      BPUBAURUPBURULUMTAUPUMULUCAUMUOULAUMUNVAQUDUERSUMAUOTZBKZUQUMUOBKZVDUMUNB
      KZVEBDFLVEUMVFIUMUNBMNOAUOBPUFUMVCUPBUMAULUOUMAUKUMUGQUHRSUI $.
  $}

  ${
    $d x ph $.  $d x ps $.  $d x A $.  $d x B $.  $d x C $.
    eueq3.1 $e |- A e. _V $.
    eueq3.2 $e |- B e. _V $.
    eueq3.3 $e |- C e. _V $.
    eueq3.4 $e |- -. ( ph /\ ps ) $.
    $( Equality has existential uniqueness (split into 3 cases).  (Contributed
       by NM, 5-Apr-1995.)  (Proof shortened by Mario Carneiro,
       28-Sep-2015.) $)
    eueq3 $p |- E! x ( ( ph /\ x = A ) \/ ( -. ( ph \/ ps ) /\ x = B )
                \/ ( ps /\ x = C ) ) $=
      ( wceq wa wo wn w3o weu eueq1 ibar wb con2i cv pm2.45 imnani jaoi orbi12d
      bianfd mtbid biorf bitrd 3orrot df-3or bitri syl6bbr eubidv adantr pm2.46
      syl mpbii simpl orim12i con3i 3orcomb ecase3 ) ABACUAZDKZLZABMZNZVDEKZLZB
      VDFKZLZOZCPZAVECPVNCDGQAVEVMCAVEVJVLMZVFMZVMAVEVFVPAVERAVONVFVPSAVHBMZVOV
      QAVHANBABUBZABABJUCZTUDTAVHVJBVLAVHVIVHAVRTUFABVKVSUFUEUGVOVFUHUQUIVMVJVL
      VFOVPVFVJVLUJVJVLVFUKULUMUNURBVKCPVNCFIQBVKVMCBVKVFVJMZVLMZVMBVKVLWABVKRB
      VTNVLWASVTBVFBNZVJAWBVEVSUOVHWBVIABUPUOUDTVTVLUHUQUIVFVJVLUKUMUNURVHVICPV
      NCEHQVHVIVMCVHVIVFVLMZVJMZVMVHVIVJWDVHVIRVHWCNVJWDSWCVGVFAVLBAVEUSBVKUSUT
      VAWCVJUHUQUIVMVFVLVJOWDVFVJVLVBVFVLVJUKULUMUNURVC $.
  $}

  ${
    $d x A $.
    $( There is at most one set equal to a class.  (Contributed by NM,
       8-Mar-1995.) $)
    moeq $p |- E* x x = A $=
      ( cv wceq wmo wex weu wi cvv wcel isset eueq bitr3i biimpi df-mo mpbir )
      ACBDZAEQAFZQAGZHRSRBIJSABKABLMNQAOP $.
  $}

  ${
    $d x y ph $.  $d x y ps $.  $d x y A $.  $d x y B $.  $d x y C $.
    moeq3.1 $e |- B e. _V $.
    moeq3.2 $e |- C e. _V $.
    moeq3.3 $e |- -. ( ph /\ ps ) $.
    $( ""At most one"" property of equality (split into 3 cases).  (The first 2
       hypotheses could be eliminated with longer proof.)  (Contributed by NM,
       23-Apr-1995.) $)
    moeq3 $p |- E* x ( ( ph /\ x = A ) \/ ( -. ( ph \/ ps ) /\ x = B )
                \/ ( ps /\ x = C ) ) $=
      ( vy cvv cv wceq wa wo wn w3o weu biidd 3orass wmo eqeq2 anbi2d 3orbi123d
      wcel eubidv vex vtoclg eumo syl wi wal eqvisset pm2.21 syl5 anim2d orim1d
      eueq3 3imtr4g alrimiv euimmo mpisyl pm2.61i ) DKUEZACLZDMZNZABOPVEEMNZBVE
      FMNZQZCUAZVDVJCRZVKAVEJLZMZNZVHVIQZCRZVLJDKVMDMZVPVJCVRVOVGVHVHVIVIVRVNVF
      AVMDVEUBUCVRVHSVRVISUDUFABCVMEFJUGGHIURZUHVJCUIUJVDPZVJVPUKZCULVQVKVTWACV
      TVGVHVIOZOVOWBOVJVPVTVGVOWBVTVFVNAVFVDVTVNCDUMVDVNUNUOUPUQVGVHVITVOVHVITU
      SUTVSVJVPCVAVBVC $.
  $}

  ${
    $d x y A $.
    mosub.1 $e |- E* x ph $.
    $( ""At most one"" remains true after substitution.  (Contributed by NM,
       9-Mar-1995.) $)
    mosub $p |- E* x E. y ( y = A /\ ph ) $=
      ( cv wceq wmo wal wa wex moeq ax-gen moexexv mp2an ) CFDGZCHABHZCIPAJCKBH
      CDLQCEMPACBNO $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( Theorem for inferring ""at most one.""  (Contributed by NM,
       17-Oct-1996.) $)
    mo2icl $p |- ( A. x ( ph -> x = A ) -> E* x ph ) $=
      ( vy cvv wcel cv wceq wi wal wmo weq eqeq2 imbi2d albidv imbi1d wex 19.8a
      mo2v wn sylibr vtoclg eqvisset imim2i con3rr3 alimdv alnex exmo ori sylbi
      syl6 pm2.61i ) CEFZABGZCHZIZBJZABKZIZABDLZIZBJZURIUSDCEDGZCHZVBUQURVDVAUP
      BVDUTUOAVCCUNMNOPVBVBDQURVBDRABDSUAUBUMTZUQATZBJZURVEUPVFBUPAUMUOUMABCUCU
      DUEUFVGABQZTURABUGVHURABUHUIUJUKUL $.
  $}

  ${
    $d x y A $.  $d y ph $.  $d x y ps $.
    moi2.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Consequence of ""at most one.""  (Contributed by NM, 2-Jan-2015.) $)
    mob2 $p |- ( ( A e. B /\ E* x ph /\ ph ) -> ( x = A <-> ps ) ) $=
      ( vy wcel wmo w3a cv wceq simp3 syl5ibcom wi wa wsb wal nfs1v sbequ12 nfv
      mo4f sylbi sbhypf anbi2d eqeq2 imbi12d spcgv syl5 imp expd 3impia impbid
      sp ) DEHZACIZAJZCKZDLZBUQAUSBUOUPAMFNUOUPABUSOUOUPPABUSUOUPABPZUSOZUPAACG
      QZPZURGKZLZOZGRZUOVAUPVGCRVGAVBCGACGSACGTUBVGCUNUCVFVAGDEVDDLZVCUTVEUSVHV
      BBAABCGDBCUAFUDUEVDDURUFUGUHUIUJUKULUM $.

    $( Consequence of ""at most one.""  (Contributed by NM, 29-Jun-2008.) $)
    moi2 $p |- ( ( ( A e. B /\ E* x ph ) /\ ( ph /\ ps ) ) -> x = A ) $=
      ( wcel wmo wa cv wceq wb mob2 3expa biimprd impr ) DEGZACHZIZABCJDKZSAITB
      QRATBLABCDEFMNOP $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ch $.  $d y ph $.  $d x y ps $.
    moi.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    moi.2 $e |- ( x = B -> ( ph <-> ch ) ) $.
    $( Equality implied by ""at most one.""  (Contributed by NM, 18-Feb-2006.) $)
    mob $p |- ( ( ( A e. C /\ B e. D ) /\ E* x ph /\ ps ) ->
                ( A = B <-> ch ) ) $=
      ( wcel wa wmo wceq wb wi cvv elex w3a nfv nfmo1 nf3an nfim 3anbi3d bibi1d
      cv eqeq1 imbi12d mob2 vtoclg1f com12 3expib syl com3r imp 3impib ) EGKZFH
      KZLADMZBEFNZCOZUQURUSBLZVAPURVBUQVAURFQKZVBUQVAPZPFHRVCUSBVDUQVCUSBSZVAVC
      USASZDUFZFNZCOZPVEVAPDEGVEVADVCUSBDVCDTADUABDTUBVADTUCVGENZVFVEVIVAVJABVC
      USIUDVJVHUTCVGEFUGUEUHACDFQJUIUJUKULUMUNUOUP $.

    $( Equality implied by ""at most one.""  (Contributed by NM, 18-Feb-2006.) $)
    moi $p |- ( ( ( A e. C /\ B e. D ) /\ E* x ph /\ ( ps /\ ch ) ) ->
              A = B ) $=
      ( wcel wa wmo wceq wi w3a mob biimprd 3expia impd 3impia ) EGKFHKLZADMZBC
      LEFNZUBUCLBCUDUBUCBCUDOUBUCBPUDCABCDEFGHIJQRSTUA $.
  $}

  ${
    $d B x y $.  $d A x y $.  $d ph y $.  $d ps x y $.
    morex.1 $e |- B e. _V $.
    morex.2 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( Derive membership from uniqueness.  (Contributed by Jeff Madsen,
       2-Sep-2009.) $)
    morex $p |- ( ( E. x e. A ph /\ E* x ph ) -> ( ps -> B e. A ) ) $=
      ( wmo wrex wcel wi cv wa wex df-rex exancom bitri wal nfmo1 nfe1 nfan syl
      mopick alrimi wceq eleq1 imbi12d spcv sylan2b ancoms ) ACHZACDIZBEDJZKZUL
      UKACLZDJZMZCNZUNULUPAMCNURACDOUPACPQUKURMZAUPKZCRUNUSUTCUKURCACSUQCTUAAUP
      CUCUDUTUNCEFUOEUEABUPUMGUOEDUFUGUHUBUIUJ $.
  $}

  ${
    $d x ph $.  $d x A $.
    euxfr2.1 $e |- A e. _V $.
    euxfr2.2 $e |- E* y x = A $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       14-Nov-2004.) $)
    euxfr2 $p |- ( E! x E. y ( x = A /\ ph ) <-> E! y ph ) $=
      ( cv wceq wa wex weu wmo wi 2euswap moani ancom mobii mpbi mpg moeq biidd
      impbii ceqsexv eubii bitri ) BGDHZAIZCJBKZUGBJZCKZACKUHUJUGCLZUHUJMBUGBCN
      AUFIZCLUKUFACFOULUGCAUFPZQRSUGBLZUJUHMCUGCBNULBLUNUFABBDTOULUGBUMQRSUBUIA
      CAABDEUFAUAUCUDUE $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x A $.
    euxfr.1 $e |- A e. _V $.
    euxfr.2 $e |- E! y x = A $.
    euxfr.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       14-Nov-2004.) $)
    euxfr $p |- ( E! x ph <-> E! y ps ) $=
      ( weu cv wceq wa wex euex ax-mp biantrur 19.41v pm5.32i exbii 3bitr2i
      eubii eumoi euxfr2 bitri ) ACICJEKZBLZDMZCIBDIAUGCAUEDMZALUEALZDMUGUHAUED
      IUHGUEDNOPUEADQUIUFDUEABHRSTUABCDEFUEDGUBUCUD $.
  $}

  ${
    $d y z w ph $.  $d x z ps $.  $d y z w A $.  $d x z B $.  $d x y w $.
    euind.1 $e |- B e. _V $.
    euind.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    euind.3 $e |- ( x = y -> A = B ) $.
    $( Existential uniqueness via an indirect equality.  (Contributed by NM,
       11-Oct-2010.) $)
    euind $p |- ( ( A. x A. y ( ( ph /\ ps ) -> A = B ) /\ E. x ph )
                 -> E! z A. x ( ph -> z = A ) ) $=
      ( vw wa wceq wi wal wex cv exbii bitri imim2i weu cbvexv biantrur 3bitr2i
      isseti 19.41v excom eqeq2 bi2 an31 imbi1i impexp 3bitr3i sylib syl 2alimi
      wb 19.23v albii 19.21v eximdv syl5bi imp pm4.24 biimpi prth eqtr3 alanimi
      syl56 com12 syl5 alrimivv adantl eqeq1 imbi2d albidv eu4 sylanbrc ) ABLZF
      GMZNZDOCOZACPZLAEQZFMZNZCOZEPZWGAKQZFMZNZCOZLZWDWIMZNZKOEOZWGEUAWBWCWHWCW
      DGMZBLZDPZEPZWBWHWCBDPZWTABCDIUBXAWQEPZBLZDPWREPZDPWTBXCDXBBEGHUEUCRXDXCD
      WQBEUFRWRDEUGUDSWBWSWGEWBWRWFNZDOZCOZWSWGNZWAXECDWAVSWEWQUQZNZXEVTXIVSFGW
      DUHTXJVSWQWENZNZXEXIXKVSWEWQUITVSWQLZWENWRALZWENXLXEXMXNWEABWQUJUKVSWQWEU
      LWRAWEULUMUNUOUPXGWSWFNZCOXHXFXOCWRWFDURUSWSWFCUTSUNVAVBVCWCWPWBWCWOEKWMA
      WNNZCOZWCWNWFWKXPCAAALZWFWKLWEWJLWNAXRAVDVEAWEAWJVFWDWIFVGVIVHXQWCWNXQWCW
      NNAWNCURVEVJVKVLVMWGWLEKWNWFWKCWNWEWJAWDWIFVNVOVPVQVR $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y ph $.  $d x ps $.
    $( A way to express restricted uniqueness.  (Contributed by NM,
       22-Nov-1994.) $)
    reu2 $p |- ( E! x e. A ph <-> ( E. x e. A ph /\
               A. x e. A A. y e. A ( ( ph /\ [ y / x ] ph ) -> x = y ) ) ) $=
      ( cv wcel wa weu wex wsb weq wi wal wreu wral df-ral impexp albii 3bitr4i
      nfv wrex eu2 df-reu df-rex 19.21v nfs1v nfan eleq1 sbequ12 anbi12d anbi2i
      sbie an4 bitri imbi1i 3bitri imbi2i bitr4i anbi12i ) BEZDFZAGZBHVBBIZVBVB
      BCJZGZBCKZLZCMZBMZGABDNABDUAZAABCJZGZVFLZCDOZBDOZGVBBCVBCTUBABDUCVJVCVOVI
      ABDUDVOVAVNLZBMVIVNBDPVHVPBVACEZDFZVMLZLZCMVAVSCMZLVHVPVAVSCUEVGVTCVGVAVR
      GZVLGZVFLWBVMLVTVEWCVFVEVBVRVKGZGWCVDWDVBVBWDBCVRVKBVRBTABCUFUGVFVAVRAVKU
      TVQDUHABCUIUJULUKVAAVRVKUMUNUOWBVLVFQVAVRVMQUPRVNWAVAVMCDPUQSRURUSS $.

    $( A way to express restricted uniqueness.  (Contributed by NM,
       20-Oct-2006.) $)
    reu6 $p |- ( E! x e. A ph <-> E. y e. A A. x e. A ( ph <-> x = y ) ) $=
      ( cv wcel wa weq wb wal wex wi bi1 bi2 adantr impbid imim2i imp 3bitr4i
      ex wreu weu wral wrex df-reu 19.28v eleq1 sbequ12 anbi12d equequ1 bibi12d
      wsb equid tbt simpl sylbir syl6bi spimv expdimp simpr syl6 sps axc4i impd
      adantl eleq1a com23 adantll alimi impbii df-ral anbi2i exbii df-eu df-rex
      jca jcai bitri ) ABDUABEZDFZAGZBUBZABCHZIZBDUCZCDUDZABDUEWAWCIZBJZCKCEZDF
      ZWEGZCKWBWFWHWKCWJVTWDLZGZBJZWJWLBJZGWHWKWJWLBUFWHWNWGWMBWHWJWLWGWJBCWCWG
      WJABCULZGZCCHZIZWJWCWAWQWCWRWCVTWJAWPVSWIDUGABCUHUIBCCUJUKWSWQWJWRWQCUMUN
      WJWPUOUPUQURWGWLBWGVTWDWGVTGAWCWGVTAWCWAWCMUSWGWCALZVTWGWCWAAWAWCNVTAUTVA
      OPTVBVPVCWMWGBWMWAWCWLWAWCLWJWLVTAWCWDAWCLVTAWCMQVDVEWMWCWAWMWCGVTAWMWCVT
      WJWCVTLWLWIDVSVFORWLWCVTALZWJWLWCXAWLVTWCAWDWTVTAWCNQVGRVHVQTPVIVJWEWOWJW
      DBDVKVLSVMWABCVNWECDVOSVR $.

    $( A way to express restricted uniqueness.  (Contributed by NM,
       24-Oct-2006.) $)
    reu3 $p |- ( E! x e. A ph <->
               ( E. x e. A ph /\ E. y e. A A. x e. A ( ph -> x = y ) ) ) $=
      ( wreu wrex weq wi wral wa reurex wb reu6 bi1 ralimi reximi sylbi jca wex
      wal rexex anim2i cv wcel weu eu3v df-reu df-rex df-ral impexp albii exbii
      bitr4i anbi12i 3bitr4i sylibr impbii ) ABDEZABDFZABCGZHZBDIZCDFZJZURUSVCA
      BDKURAUTLZBDIZCDFVCABCDMVFVBCDVEVABDAUTNOPQRVDUSVBCSZJZURVCVGUSVBCDUAUBBU
      CDUDZAJZBUEVJBSZVJUTHZBTZCSZJURVHVJBCUFABDUGUSVKVGVNABDUHVBVMCVBVIVAHZBTV
      MVABDUIVLVOBVIAUTUJUKUMULUNUOUPUQ $.

    $( A condition which implies existential uniqueness.  (Contributed by Mario
       Carneiro, 2-Oct-2015.) $)
    reu6i $p |- ( ( B e. A /\ A. x e. A ( ph <-> x = B ) ) -> E! x e. A ph ) $=
      ( vy wcel cv wceq wb wral wa wrex wreu eqeq2 bibi2d ralbidv rspcev sylibr
      reu6 ) DCFABGZDHZIZBCJZKATEGZHZIZBCJZECLABCMUGUCEDCUDDHZUFUBBCUHUEUAAUDDT
      NOPQABECSR $.

    eqreu.1 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( A condition which implies existential uniqueness.  (Contributed by Mario
       Carneiro, 2-Oct-2015.) $)
    eqreu $p |- ( ( B e. A /\ ps /\ A. x e. A ( ph -> x = B ) ) ->
      E! x e. A ph ) $=
      ( wcel cv wceq wi wral wreu wa wb ralbiim ceqsralv anbi2d syl5bb reu6i ex
      sylbird 3impib 3com23 ) EDGZACHEIZJCDKZBACDLZUDUFBUGUDUFBMZAUENCDKZUGUIUF
      UEAJCDKZMUDUHAUECDOUDUJBUFABCEDFPQRUDUIUGACDESTUAUBUC $.
  $}

  ${
    $d x y z A $.  $d y z ph $.  $d x z ps $.
    rmo4.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Restricted ""at most one"" using implicit substitution.  (Contributed by
       NM, 24-Oct-2006.)  (Revised by NM, 16-Jun-2017.) $)
    rmo4 $p |- ( E* x e. A ph <->
               A. x e. A A. y e. A ( ( ph /\ ps ) -> x = y ) ) $=
      ( wrmo cv wcel wa wmo weq wi wral df-rmo wal bitri impexp albii df-ral
      an4 ancom anbi1i imbi1i 3bitri r19.21v 3bitr2i eleq1 anbi12d mo4 3bitr4i
      ) ACEGCHZEIZAJZCKZABJZCDLZMZDENZCENZACEOUNDHZEIZBJZJZUQMZDPZCPUMUSMZCPUOU
      TVFVGCVFVBUMURMZMZDPVHDENVGVEVIDVEVBUMJZUPJZUQMVJURMVIVDVKUQVDUMVBJZUPJVK
      UMAVBBUAVLVJUPUMVBUBUCQUDVJUPUQRVBUMURRUESVHDETUMURDEUFUGSUNVCCDUQUMVBABU
      LVAEUHFUIUJUSCETUKQ $.

    $( Restricted uniqueness using implicit substitution.  (Contributed by NM,
       23-Nov-1994.) $)
    reu4 $p |- ( E! x e. A ph <-> ( E. x e. A ph /\
             A. x e. A A. y e. A ( ( ph /\ ps ) -> x = y ) ) ) $=
      ( wreu wrex wrmo wa weq wi wral reu5 rmo4 anbi2i bitri ) ACEGACEHZACEIZJR
      ABJCDKLDEMCEMZJACENSTRABCDEFOPQ $.

    $( Restricted uniqueness using implicit substitution.  (Contributed by NM,
       24-Oct-2006.) $)
    reu7 $p |- ( E! x e. A ph <-> ( E. x e. A ph /\
             E. x e. A A. y e. A ( ps -> x = y ) ) ) $=
      ( vz wreu wrex weq wi wral wa equequ1 equcom syl6bb imbi12d cbvralv bitri
      reu3 rexbii imbi2d ralbidv cbvrexv anbi2i ) ACEHACEIZACGJZKZCELZGEIZMUFBC
      DJZKZDELZCEIZMACGETUJUNUFUJBGDJZKZDELZGEIUNUIUQGEUHUPCDEUKABUGUOFUKUGDGJU
      OCDGNDGOPQRUAUQUMGCEGCJZUPULDEURUOUKBGCDNUBUCUDSUES $.

    $( Restricted uniqueness using implicit substitution.  (Contributed by NM,
       24-Oct-2006.) $)
    reu8 $p |- ( E! x e. A ph <-> E. x e. A ( ph /\
                A. y e. A ( ps -> x = y ) ) ) $=
      ( wreu weq wb wral wrex wi wa cbvreuv reu6 cv wcel ralbii wal syl5bb a1i
      dfbi2 ancom equcom imbi2i biimt df-ral bi2.04 albii eleq1 imbi12d equcoms
      vex bicomd ceqsalv 3bitrri syl6bb anbi12d r19.26 syl6rbbr rexbiia 3bitri
      ) ACEGBDEGBDCHZIZDEJZCEKABCDHZLZDEJZMZCEKABCDEFNBDCEOVEVICEVEBVCLZVCBLZMZ
      DEJZCPZEQZVIVDVLDEBVCUBRVOVIVJDEJZVKDEJZMZVMVIVHAMVOVRAVHUCVOVHVPAVQVHVPI
      VOVGVJDEVFVCBCDUDUERUAVOAVOALZVQVOAUFVQDPZEQZVKLZDSVCWABLZLZDSVSVKDEUGWBW
      DDWAVCBUHUIWCVSDVNCUMWCVSICDVFVSWCVFVOWAABVNVTEUJFUKUNULUOUPUQURTVJVKDEUS
      UTTVAVB $.
  $}

  ${
    $d A x y $.  $d B x y $.  $d C x y $.  $d ch x y $.  $d ps y $.
    $d th x y $.
    reu2eqd.1 $e |- ( x = B -> ( ps <-> ch ) ) $.
    reu2eqd.2 $e |- ( x = C -> ( ps <-> th ) ) $.
    reu2eqd.3 $e |- ( ph -> E! x e. A ps ) $.
    reu2eqd.4 $e |- ( ph -> B e. A ) $.
    reu2eqd.5 $e |- ( ph -> C e. A ) $.
    reu2eqd.6 $e |- ( ph -> ch ) $.
    reu2eqd.7 $e |- ( ph -> th ) $.
    $( Deduce equality from restricted uniqueness, deduction version.
       (Contributed by Thierry Arnoux, 27-Nov-2019.) $)
    reu2eqd $p |- ( ph -> B = C ) $=
      ( vy wceq wa wi nfv wsb cv wral wrex wreu reu2 sylib wcel nfs1v nfan nfim
      simprd anbi1d eqeq1 imbi12d sbhypf anbi2d eqeq2 rspc2 syl2anc mpd mp2and
      ) ACDGHQZNOABBEPUAZRZEUBZPUBZQZSZPFUCEFUCZCDRZVCSZABEFUDZVJABEFUEVMVJRKBE
      PFUFUGULAGFUHHFUHVJVLSLMVIVLCVDRZGVGQZSEPGHFFVNVOECVDECETBEPUIUJVOETUKVLP
      TVFGQZVEVNVHVOVPBCVDIUMVFGVGUNUOVGHQZVNVKVOVCVQVDDCBDEPHDETJUPUQVGHGURUOU
      SUTVAVB $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Equality has existential uniqueness.  (Contributed by Mario Carneiro,
       1-Sep-2015.) $)
    reueq $p |- ( B e. A <-> E! x e. A x = B ) $=
      ( wcel cv wceq wrex wreu risset wrmo wmo moeq mormo ax-mp mpbiran2 bitr4i
      reu5 ) CBDAECFZABGZRABHZACBITSRABJZRAKUAACLRABMNRABQOP $.
  $}

  $( Restricted ""at most one"" still holds when a conjunct is added.
     (Contributed by NM, 16-Jun-2017.) $)
  rmoan $p |- ( E* x e. A ph -> E* x e. A ( ps /\ ph ) ) $=
    ( cv wcel wa wmo wrmo moan an12 mobii sylib df-rmo 3imtr4i ) CEDFZAGZCHZPBA
    GZGZCHZACDISCDIRBQGZCHUAQBCJUBTCBPAKLMACDNSCDNO $.

  $( Restricted ""at most one"" is preserved through implication (note wff
     reversal).  (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
  rmoim $p |- ( A. x e. A ( ph -> ps )
        -> ( E* x e. A ps -> E* x e. A ph ) ) $=
    ( wi wral cv wcel wa wal wrmo df-ral imdistan albii wmo moim df-rmo 3imtr4g
    bitri sylbi ) ABEZCDFZCGDHZAIZUCBIZEZCJZBCDKZACDKZEUBUCUAEZCJUGUACDLUJUFCUC
    ABMNSUGUECOUDCOUHUIUDUECPBCDQACDQRT $.

  ${
    rmoimia.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Restricted ""at most one"" is preserved through implication (note wff
       reversal).  (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
    rmoimia $p |- ( E* x e. A ps -> E* x e. A ph ) $=
      ( wi wrmo rmoim mprg ) ABFBCDGACDGFCDABCDHEI $.
  $}

  ${
    rmoimi2.1 $e |- A. x ( ( x e. A /\ ph ) -> ( x e. B /\ ps ) ) $.
    $( Restricted ""at most one"" is preserved through implication (note wff
       reversal).  (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
    rmoimi2 $p |- ( E* x e. B ps -> E* x e. A ph ) $=
      ( cv wcel wa wmo wrmo wi wal moim ax-mp df-rmo 3imtr4i ) CGZEHBIZCJZRDHAI
      ZCJZBCEKACDKUASLCMTUBLFUASCNOBCEPACDPQ $.
  $}

  ${
    $d x y A $.  $d x B $.
    $( A condition allowing swap of uniqueness and existential quantifiers.
       (Contributed by Thierry Arnoux, 7-Apr-2017.)  (Revised by NM,
       16-Jun-2017.) $)
    2reuswap $p |- ( A. x e. A E* y e. B ph ->
                   ( E! x e. A E. y e. B ph -> E! y e. B E. x e. A ph ) ) $=
      ( wral cv wcel wa wmo wrex wreu wal wex weu df-reu r19.42v df-rex bitri
      wi wrmo df-rmo ralbii df-ral moanimv albii bitr4i bitr3i an12 exbii eubii
      2euswap 3imtr4g sylbi ) ACEUAZBDFCGEHZAIZCJZBDFZACEKZBDLZABDKZCELZTZUOURB
      DACEUBUCUSBGDHZUQIZCJZBMZVDUSVEURTZBMVHURBDUDVGVIBVEUQCUEUFUGVHVFCNZBOZVF
      BNZCOZVAVCVFBCULVAVEUTIZBOVKUTBDPVNVJBVNUPVEAIZIZCNZVJVNVOCEKVQVEACEQVOCE
      RUHVPVFCUPVEAUIUJSUKSVCUPVBIZCOVMVBCEPVRVLCVRUQBDKVLUPABDQUQBDRUHUKSUMUNU
      N $.
  $}

  ${
    $d w y z A $.  $d x z B $.  $d w x y z C $.  $d w y z ph $.  $d x z ps $.
    reuind.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    reuind.2 $e |- ( x = y -> A = B ) $.
    $( Existential uniqueness via an indirect equality.  (Contributed by NM,
       16-Oct-2010.) $)
    reuind $p |- ( ( A. x A. y ( ( ( A e. C /\ ph ) /\ ( B e. C /\ ps ) )
         -> A = B ) /\ E. x ( A e. C /\ ph ) )
                 -> E! z e. C A. x ( ( A e. C /\ ph ) -> z = A ) ) $=
      ( vw wcel wa wceq wi wal wex cv wrex bitri wral wreu eleq1d anbi12d exbii
      cbvexv r19.41v rexcom4 risset anbi1i 3bitr4ri wb eqeq2 imim2i an31 imbi1i
      bi2 impexp 3bitr3i sylib 2alimi 19.23v an12 adantr pm5.32ri bitr4i 19.42v
      syl eleq1 albii 19.21v expd reximdvai syl5bi imp pm4.24 biimpi prth eqtr3
      syl56 alanimi com12 syl5 a1d ralrimivv adantl imbi2d albidv reu4 sylanbrc
      eqeq1 ) FHLZAMZGHLZBMZMZFGNZOZDPCPZWMCQZMWMERZFNZOZCPZEHSZXDWMKRZFNZOZCPZ
      MZXAXFNZOZKHUAEHUAZXDEHUBWSWTXEWTXAGNZBMZDQZEHSZWSXEWTWODQZXQWMWOCDCRDRNZ
      WLWNABXSFGHJUCIUDUFXOEHSZDQXNEHSZBMZDQXQXRXTYBDXNBEHUGUEXOEDHUHWOYBDWNYAB
      EGHUIUJUEUKTWSXPXDEHWSXAHLZXPXDWSXNWOMZXCOZDPZCPZYCXPMZXDOZWRYECDWRWPXBXN
      ULZOZYEWQYJWPFGXAUMUNYKWPXNXBOZOZYEYJYLWPXBXNUQUNWPXNMZXBOYDWMMZXBOYMYEYN
      YOXBWMWOXNUOUPWPXNXBURYDWMXBURUSUTVHVAYGYHXCOZCPYIYFYPCYFYDDQZXCOYPYDXCDV
      BYQYHXCYQYCXOMZDQYHYDYRDYDWNXOMYRXNWNBVCXOYCWNXNYCWNULBXAGHVIVDVEVFUEYCXO
      DVGTUPTVJYHXCCVKTUTVLVMVNVOWTXMWSWTXLEKHHWTXLYCXFHLMXJWMXKOZCPZWTXKXCXHYS
      CWMWMWMMZXCXHMXBXGMXKWMUUAWMVPVQWMXBWMXGVRXAXFFVSVTWAYTWTXKYTWTXKOWMXKCVB
      VQWBWCWDWEWFXDXIEKHXKXCXHCXKXBXGWMXAXFFWKWGWHWIWJ $.
  $}

  ${
    $d y A $.  $d x B $.  $d x y $.
    $( Double restricted quantification with ""at most one,"" analogous to
       ~ 2moex .  (Contributed by Alexander van der Vekens, 17-Jun-2017.) $)
    2rmorex $p |- ( E* x e. A E. y e. B ph -> A. y e. B E* x e. A ph ) $=
      ( wrex wrmo nfcv nfre1 nfrmo cv wcel wi wral ex ralrimivw rmoim syl com12
      rspe ralrimi ) ACEFZBDGZABDGZCEUBCBDCDHACEIJCKELZUCUDUEAUBMZBDNUCUDMUEUFB
      DUEAUBACETOPAUBBDQRSUA $.

    $( Lemma for ~ 2reu5 .  Note that ` E! x e. A E! y e. B ph ` does not mean
       ""there is exactly one ` x ` in ` A ` and exactly one ` y ` in ` B ` such
       that ` ph ` holds;"" see comment for ~ 2eu5 .  (Contributed by Alexander
       van der Vekens, 17-Jun-2017.) $)
    2reu5lem1 $p |- ( E! x e. A E! y e. B ph <->
                   E! x E! y ( x e. A /\ y e. B /\ ph ) ) $=
      ( wreu cv wcel wa weu w3a df-reu reubii euanv bicomi 3anass eubii bitri )
      ACEFZBDFCGEHZAIZCJZBDFZBGDHZTAKZCJZBJZSUBBDACELMUCUDUBIZBJUGUBBDLUHUFBUHU
      DUAIZCJZUFUJUHUDUACNOUIUECUEUIUDTAPOQRQRR $.

    $( Lemma for ~ 2reu5 .  (Contributed by Alexander van der Vekens,
       17-Jun-2017.) $)
    2reu5lem2 $p |- ( A. x e. A E* y e. B ph <->
                   A. x E* y ( x e. A /\ y e. B /\ ph ) ) $=
      ( wrmo wral cv wcel wa wmo w3a wal df-rmo ralbii wi df-ral moanimv bicomi
      bitri 3anass mobii albii ) ACEFZBDGCHEIZAJZCKZBDGZBHDIZUEALZCKZBMZUDUGBDA
      CENOUHUIUGPZBMULUGBDQUMUKBUMUIUFJZCKZUKUOUMUIUFCRSUNUJCUJUNUIUEAUASUBTUCT
      T $.
  $}

  ${
    $d w y z A $.  $d w x z B $.  $d x y $.  $d ph w $.  $d ph z $.
    $( Lemma for ~ 2reu5 .  This lemma is interesting in its own right, showing
       that existential restriction in the last conjunct (the ""at most one""
       part) is optional; compare ~ rmo2 .  (Contributed by Alexander van der
       Vekens, 17-Jun-2017.) $)
    2reu5lem3 $p |- ( ( E! x e. A E! y e. B ph /\ A. x e. A E* y e. B ph )
                   <-> ( E. x e. A E. y e. B ph
                         /\ E. z E. w A. x e. A A. y e. B
                            ( ph -> ( x = z /\ y = w ) ) ) ) $=
      ( wreu wral wa cv wcel weu wal wex weq wi wrex exbii 3bitri w3a 2reu5lem1
      wrmo wmo 2reu5lem2 anbi12i 2eu5 3anass 19.42v df-rex bicomi anbi2i bitr4i
      3anan12 imbi1i impexp imbi2i albii df-ral r19.21v 3bitr2i ) ACGHBFHZACGUC
      BFIZJBKFLZCKGLZAUAZCMBMZVFCUDBNZJVFCOZBOZVFBDPCEPJZQZCNZBNZEOZDOZJACGRZBF
      RZAVKQZCGIZBFIZEOZDOZJVBVGVCVHABCFGUBABCFGUEUFVFBCDEUGVJVRVPWCVJVDVQJZBOV
      RVIWDBVIVDVEAJZJZCOVDWECOZJWDVFWFCVDVEAUHSVDWECUIWGVQVDVQWGACGUJUKULTSVQB
      FUJUMVOWBDVNWAEVNVDVTQZBNWAVMWHBVMVEVDVSQZQZCNWICGIWHVLWJCVLVEVDAJZJZVKQV
      EWKVKQZQWJVFWLVKVDVEAUNUOVEWKVKUPWMWIVEVDAVKUPUQTURWICGUSVDVSCGUTVAURVTBF
      USUMSSUFT $.

    $d x A $.  $d y B $.
    $( Double restricted existential uniqueness in terms of restricted
       existential quantification and restricted universal quantification,
       analogous to ~ 2eu5 and ~ reu3 .  (Contributed by Alexander van der
       Vekens, 17-Jun-2017.) $)
    2reu5 $p |- ( ( E! x e. A E! y e. B ph /\ A. x e. A E* y e. B ph )
                  <-> ( E. x e. A E. y e. B ph
                        /\ E. z e. A E. w e. B A. x e. A A. y e. B
                           ( ph -> ( x = z /\ y = w ) ) ) ) $=
      ( wrex weq wa wral wex cv wcel wreu r19.29r reximi eleq1 ex df-rex pm3.35
      wrmo bi2anan9 biimpac ancomd rexlimivv 4syl pm4.71rd anass syl6bb 2exbidv
      wi pm5.32i 2reu5lem3 r19.42v bitr3i exbii bitri anbi2i 3bitr4i ) ACGHZBFH
      ZABDIZCEIZJZULZCGKZBFKZELDLZJVBEMZGNZDMZFNZVHJZJZELZDLZJACGOBFOACGUBBFKJV
      BVHEGHZDFHZJVBVIVQVBVHVODEVBVHVKVMJZVHJVOVBVHVTVBVHVTVBVHJVAVGJZBFHAVFJZC
      GHZBFHVECGHZBFHVTVAVGBFPWAWCBFAVFCGPQWCWDBFWBVECGAVEUAQQVEVTBCFGBMZFNZCMZ
      GNZJZVEVTWIVEJVMVKVEWIVMVKJVCWFVMVDWHVKWEVLFRWGVJGRUCUDUESUFUGSUHVKVMVHUI
      UJUKUMABCDEFGUNVSVQVBVSVMVRJZDLVQVRDFTWJVPDWJVNEGHVPVMVHEGUOVNEGTUPUQURUS
      UT $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    nelrdva.1 $e |- ( ( ph /\ x e. A ) -> x =/= B ) $.
    $( Deduce negative membership from an implication.  (Contributed by Thierry
       Arnoux, 27-Nov-2017.) $)
    nelrdva $p |- ( ph -> -. B e. A ) $=
      ( wcel wceq wa eqidd wne cv wi eleq1 anbi2d imbi12d vtoclg anabsi7 neneqd
      neeq1 pm2.65da ) ADCFZDDGAUAHZDIUBDDAUADDJZABKZCFZHZUDDJZLUBUCLBDCUDDGZUF
      UBUGUCUHUEUAAUDDCMNUDDDSOEPQRT $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                    Conditional equality (experimental)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  This is a very useless definition, which ""abbreviates"" ` ( x = y -> ph ) ` as
  ` CondEq ( x = y -> ph ) ` . What this display hides, though, is that the
  first expression, even though it has a shorter constant string, is actually
  much more complicated in its parse tree: it is parsed as
  (wi (wceq (cv vx) (cv vy)) wph), while the ` CondEq ` version is parsed as
  (wcdeq vx vy wph).  It also allows us to give a name to the specific 3-ary
  operation ` ( x = y -> ph ) ` .

  This is all used as part of a metatheorem: we want to say that
  ` |- ( x = y -> ( ph ( x ) <-> ph ( y ) ) ) ` and
  ` |- ( x = y -> A ( x ) = A ( y ) ) ` are provable, for any expressions
  ` ph ( x ) ` or ` A ( x ) ` in the language.  The proof is by induction, so
  the base case is each of the primitives, which is why you will see a theorem
  for each of the set.mm primitive operations.

  The metatheorem comes with a disjoint variables assumption: every variable in
  ` ph ( x ) ` is assumed disjoint from ` x ` except ` x ` itself.  For such a
  proof by induction, we must consider each of the possible forms of
  ` ph ( x ) ` .  If it is a variable other than ` x ` , then we have
  ` CondEq ( x = y -> A = A ) ` or ` CondEq ( x = y -> ( ph <-> ph ) ) ` ,
  which is provable by ~ cdeqth and reflexivity.  Since we are only working
  with class and wff expressions, it can't be ` x ` itself in set.mm, but if it
  was we'd have to also prove ` CondEq ( x = y -> x = y ) ` (where _set_
  equality is being used on the right).

  Otherwise, it is a primitive operation applied to smaller expressions.  In
  these cases, for each setvar variable parameter to the operation, we must
  consider if it is equal to ` x ` or not, which yields 2^n proof obligations.
  Luckily, all primitive operations in set.mm have either zero or one set
  variable, so we only need to prove one statement for the non-set constructors
  (like implication) and two for the constructors taking a set (the forall and
  the class builder).

  In each of the primitive proofs, we are allowed to assume that ` y ` is
  disjoint from ` ph ( x ) ` and vice versa, because this is maintained through
  the induction.  This is how we satisfy the DV assumptions of ~ cdeqab1 and
  ~ cdeqab .

$)

  $c CondEq $. $( conditional equality $)

  $( Extend wff notation to include conditional equality.  This is a technical
     device used in the proof that ` F/ ` is the not-free predicate, and that
     definitions are conservative as a result. $)
  wcdeq $a wff CondEq ( x = y -> ph ) $.

  $( Indicate that the variables ""x"" and ""y"" are free in wcdeq. $)
  $( $j free_var 'wcdeq' with 'x' 'y'; $)

  $( Define conditional equality.  All the notation to the left of the ` <-> `
     is fake; the parentheses and arrows are all part of the notation, which
     could equally well be written ` CondEq x y ph ` .  On the right side is
     the actual implication arrow.  The reason for this definition is to
     ""flatten"" the structure on the right side (whose tree structure is
     something like (wi (wceq (cv vx) (cv vy)) wph) ) into just (wcdeq vx vy
     wph).  (Contributed by Mario Carneiro, 11-Aug-2016.) $)
  df-cdeq $a |- ( CondEq ( x = y -> ph ) <-> ( x = y -> ph ) ) $.

  ${
    cdeqi.1 $e |- ( x = y -> ph ) $.
    $( Deduce conditional equality.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    cdeqi $p |- CondEq ( x = y -> ph ) $=
      ( wcdeq weq wi df-cdeq mpbir ) ABCEBCFAGDABCHI $.
  $}

  ${
    cdeqri.1 $e |- CondEq ( x = y -> ph ) $.
    $( Property of conditional equality.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    cdeqri $p |- ( x = y -> ph ) $=
      ( wcdeq weq wi df-cdeq mpbi ) ABCEBCFAGDABCHI $.
  $}

  ${
    cdeqth.1 $e |- ph $.
    $( Deduce conditional equality from a theorem.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqth $p |- CondEq ( x = y -> ph ) $=
      ( weq a1i cdeqi ) ABCABCEDFG $.
  $}

  ${
    cdeqnot.1 $e |- CondEq ( x = y -> ( ph <-> ps ) ) $.
    $( Distribute conditional equality over negation.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqnot $p |- CondEq ( x = y -> ( -. ph <-> -. ps ) ) $=
      ( wn wb weq cdeqri notbid cdeqi ) AFBFGCDCDHABABGCDEIJK $.

    ${
      $d x z $.  $d y z $.
      $( Distribute conditional equality over quantification.  (Contributed by
         Mario Carneiro, 11-Aug-2016.) $)
      cdeqal $p |- CondEq ( x = y -> ( A. z ph <-> A. z ps ) ) $=
        ( wal wb weq cdeqri albidv cdeqi ) AEGBEGHCDCDIABEABHCDFJKL $.

      $( Distribute conditional equality over abstraction.  (Contributed by
         Mario Carneiro, 11-Aug-2016.) $)
      cdeqab $p |- CondEq ( x = y -> { z | ph } = { z | ps } ) $=
        ( cab wceq weq wb cdeqri abbidv cdeqi ) AEGBEGHCDCDIABEABJCDFKLM $.
    $}

    ${
      $d x ps $.  $d y ph $.
      $( Distribute conditional equality over quantification.  (Contributed by
         Mario Carneiro, 11-Aug-2016.) $)
      cdeqal1 $p |- CondEq ( x = y -> ( A. x ph <-> A. y ps ) ) $=
        ( wal wb cdeqri cbvalv cdeqth ) ACFBDFGCDABCDABGCDEHIJ $.

      $( Distribute conditional equality over abstraction.  (Contributed by
         Mario Carneiro, 11-Aug-2016.) $)
      cdeqab1 $p |- CondEq ( x = y -> { x | ph } = { y | ps } ) $=
        ( cab wceq wb cdeqri cbvabv cdeqth ) ACFBDFGCDABCDABHCDEIJK $.
    $}

    cdeqim.1 $e |- CondEq ( x = y -> ( ch <-> th ) ) $.
    $( Distribute conditional equality over implication.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqim $p |- CondEq ( x = y -> ( ( ph -> ch ) <-> ( ps -> th ) ) ) $=
      ( wi wb weq cdeqri imbi12d cdeqi ) ACIBDIJEFEFKABCDABJEFGLCDJEFHLMN $.
  $}

  $( Conditional equality for set-to-class promotion.  (Contributed by Mario
     Carneiro, 11-Aug-2016.) $)
  cdeqcv $p |- CondEq ( x = y -> x = y ) $=
    ( weq id cdeqi ) ABCZABFDE $.

  ${
    cdeqeq.1 $e |- CondEq ( x = y -> A = B ) $.
    cdeqeq.2 $e |- CondEq ( x = y -> C = D ) $.
    $( Distribute conditional equality over equality.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqeq $p |- CondEq ( x = y -> ( A = C <-> B = D ) ) $=
      ( wceq wb weq cdeqri eqeq12d cdeqi ) CEIDFIJABABKCDEFCDIABGLEFIABHLMN $.

    $( Distribute conditional equality over elementhood.  (Contributed by Mario
       Carneiro, 11-Aug-2016.) $)
    cdeqel $p |- CondEq ( x = y -> ( A e. C <-> B e. D ) ) $=
      ( wcel wb weq wceq cdeqri eleq12d cdeqi ) CEIDFIJABABKCDEFCDLABGMEFLABHMN
      O $.
  $}

  ${
    $d x ps $.  $d y ph $.
    nfcdeq.1 $e |- F/ x ph $.
    nfcdeq.2 $e |- CondEq ( x = y -> ( ph <-> ps ) ) $.
    $( If we have a conditional equality proof, where ` ph ` is ` ph ( x ) `
       and ` ps ` is ` ph ( y ) ` , and ` ph ( x ) ` in fact does not have
       ` x ` free in it according to ` F/ ` , then ` ph ( x ) <-> ph ( y ) `
       unconditionally.  This proves that ` F/ x ph ` is actually a not-free
       predicate.  (Contributed by Mario Carneiro, 11-Aug-2016.) $)
    nfcdeq $p |- ( ph <-> ps ) $=
      ( wsb sbf nfv wb cdeqri sbie bitr3i ) AACDGBACDEHABCDBCIABJCDFKLM $.
  $}

  ${
    $d x z B $.  $d y z A $.
    nfccdeq.1 $e |- F/_ x A $.
    nfccdeq.2 $e |- CondEq ( x = y -> A = B ) $.
    $( Variation of ~ nfcdeq for classes.  (Contributed by Mario Carneiro,
       11-Aug-2016.) $)
    nfccdeq $p |- A = B $=
      ( vz cv wcel nfcri weq equid cdeqth cdeqel nfcdeq eqriv ) GCDGHZCIQDIABAG
      CEJABQQCDGGKABGLMFNOP $.
  $}

  $( Let the computer know the theorems to look for to prove the metatheorem $)
  $( $j
    condequality 'wcdeq' from 'cdeqth';
    condcongruence 'cdeqnot' 'cdeqim' 'cdeqal1' 'cdeqal' 'cdeqcv' 'cdeqeq'
      'cdeqel' 'cdeqab1' 'cdeqab';
    notfree 'wnf' from 'nfcdeq';
    notfree 'wnfc' from 'nfccdeq';
  $)

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                    Russell's Paradox
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y $.
    $( Russell's Paradox.  Proposition 4.14 of [TakeutiZaring] p. 14.

       In the late 1800s, Frege's Axiom of (unrestricted) Comprehension,
       expressed in our notation as ` A e. _V ` , asserted that any collection
       of sets ` A ` is a set i.e. belongs to the universe ` _V ` of all sets.
       In particular, by substituting ` { x | x e/ x } ` (the ""Russell class"")
       for ` A ` , it asserted ` { x | x e/ x } e. _V ` , meaning that the
       ""collection of all sets which are not members of themselves"" is a set.
       However, here we prove ` { x | x e/ x } e/ _V ` .  This contradiction
       was discovered by Russell in 1901 (published in 1903), invalidating the
       Comprehension Axiom and leading to the collapse of Frege's system.

       In 1908, Zermelo rectified this fatal flaw by replacing Comprehension
       with a weaker Subset (or Separation) Axiom ~ ssex asserting that ` A `
       is a set only when it is smaller than some other set ` B ` .  However,
       Zermelo was then faced with a ""chicken and egg"" problem of how to show
       ` B ` is a set, leading him to introduce the set-building axioms of Null
       Set ~ 0ex , Pairing ~ prex , Union ~ uniex , Power Set ~ pwex , and
       Infinity ~ omex to give him some starting sets to work with (all of
       which, before Russell's Paradox, were immediate consequences of Frege's
       Comprehension).  In 1922 Fraenkel strengthened the Subset Axiom with our
       present Replacement Axiom ~ funimaex (whose modern formalization is due
       to Skolem, also in 1922).  Thus, in a very real sense Russell's Paradox
       spawned the invention of ZF set theory and completely revised the
       foundations of mathematics!

       Another mainstream formalization of set theory, devised by von Neumann,
       Bernays, and Goedel, uses class variables rather than setvar variables
       as its primitives.  The axiom system NBG in [Mendelson] p. 225 is
       suitable for a Metamath encoding.  NBG is a conservative extension of ZF
       in that it proves exactly the same theorems as ZF that are expressible
       in the language of ZF. An advantage of NBG is that it is finitely
       axiomatizable - the Axiom of Replacement can be broken down into a
       finite set of formulas that eliminate its wff metavariable.  Finite
       axiomatizability is required by some proof languages (although not by
       Metamath).  There is a stronger version of NBG called Morse-Kelley
       (axiom system MK in [Mendelson] p. 287).

       Russell himself continued in a different direction, avoiding the paradox
       with his ""theory of types.""  Quine extended Russell's ideas to formulate
       his New Foundations set theory (axiom system NF of [Quine] p. 331).  In
       NF, the collection of all sets is a set, contradicting ZF and NBG set
       theories, and it has other bizarre consequences: when sets become too
       huge (beyond the size of those used in standard mathematics), the Axiom
       of Choice ~ ac4 and Cantor's Theorem ~ canth are provably false!  (See
       ~ ncanth for some intuition behind the latter.)  Recent results (as of
       2014) seem to show that NF is equiconsistent to Z (ZF in which ~ ax-sep
       replaces ~ ax-rep ) with ~ ax-sep restricted to only bounded
       quantifiers.  NF is finitely axiomatizable and can be encoded in
       Metamath using the axioms from T. Hailperin, ""A set of axioms for
       logic,"" _J. Symb.  Logic_ 9:1-19 (1944).

       Under our ZF set theory, every set is a member of the Russell class by
       ~ elirrv (derived from the Axiom of Regularity), so for us the Russell
       class equals the universe ` _V ` (theorem ~ ruv ).  See ~ ruALT for an
       alternate proof of ~ ru derived from that fact.  (Contributed by NM,
       7-Aug-1994.) $)
    ru $p |- { x | x e/ x } e/ _V $=
      ( vy cv wnel cab cvv wcel wceq wex wel wb wal pm5.19 eleq1 df-nel eleq12d
      wn id notbid mtbir syl5bb bibi12d spv mto abeq2 nex isset nelir ) ACZUIDZ
      AEZFUKFGBCZUKHZBIUMBUMABJZUJKZALZUPBBJZUQQZKZUQMUOUSABUIULHZUNUQUJURUIULU
      LNUJAAJZQUTURUIUIOUTVAUQUTUIULUIULUTRZVBPSUAUBUCUDUJAULUETUFBUKUGTUH $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Proper substitution of classes for sets
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c [. $.
  $c ]. $.

  $( Extend wff notation to include the proper substitution of a class for a
     set.  Read this notation as ""the proper substitution of class ` A ` for
     setvar variable ` x ` in wff ` ph ` ."" $)
  wsbc $a wff [. A / x ]. ph $.

  $( Indicate that ""x"" is not bound in ""A"" in the definition of wsbc.
     This is similar to $d x A $. $)
  $( $j free_var_in 'wsbc' with 'A' 'x'; $)

  $( Define the proper substitution of a class for a set.

     When ` A ` is a proper class, our definition evaluates to false.  This is
     somewhat arbitrary: we could have, instead, chosen the conclusion of
     ~ sbc6 for our definition, which always evaluates to true for proper
     classes.

     Our definition also does not produce the same results as discussed in the
     proof of Theorem 6.6 of [Quine] p. 42 (although Theorem 6.6 itself does
     hold, as shown by ~ dfsbcq below).  For example, if ` A ` is a proper
     class, Quine's substitution of ` A ` for ` y ` in ` 0 e. y ` evaluates to
     ` 0 e. A ` rather than our falsehood.  (This can be seen by substituting
     ` A ` , ` y ` , and ` 0 ` for alpha, beta, and gamma in Subcase 1 of
     Quine's discussion on p. 42.)  Unfortunately, Quine's definition requires
     a recursive syntactical breakdown of ` ph ` , and it does not seem
     possible to express it with a single closed formula.

     If we did not want to commit to any specific proper class behavior, we
     could use this definition _only_ to prove theorem ~ dfsbcq , which holds
     for both our definition and Quine's, and from which we can derive a weaker
     version of ~ df-sbc in the form of ~ sbc8g .  However, the behavior of
     Quine's definition at proper classes is similarly arbitrary, and for
     practical reasons (to avoid having to prove sethood of ` A ` in every use
     of this definition) we allow direct reference to ~ df-sbc and assert that
     ` [. A / x ]. ph ` is always false when ` A ` is a proper class.

     The theorem ~ sbc2or shows the apparently ""strongest"" statement we can
     make regarding behavior at proper classes if we start from ~ dfsbcq .

     The related definition ~ df-csb defines proper substitution into a class
     variable (as opposed to a wff variable).  (Contributed by NM,
     14-Apr-1995.)  (Revised by NM, 25-Dec-2016.) $)
  df-sbc $a |- ( [. A / x ]. ph <-> A e. { x | ph } ) $.

  $( Proper substitution of a class for a set in a wff given equal classes.
     This is the essence of the sixth axiom of Frege, specifically Proposition
     52 of [Frege1879] p. 50.

     This theorem, which is similar to Theorem 6.7 of [Quine] p. 42 and holds
     under both our definition and Quine's, provides us with a weak definition
     of the proper substitution of a class for a set.  Since our ~ df-sbc does
     not result in the same behavior as Quine's for proper classes, if we
     wished to avoid conflict with Quine's definition we could start with this
     theorem and ~ dfsbcq2 instead of ~ df-sbc .  ( ~ dfsbcq2 is needed because
     unlike Quine we do not overload the ~ df-sb syntax.)  As a consequence of
     these theorems, we can derive ~ sbc8g , which is a weaker version of
     ~ df-sbc that leaves substitution undefined when ` A ` is a proper class.

     However, it is often a nuisance to have to prove the sethood hypothesis of
     ~ sbc8g , so we will allow direct use of ~ df-sbc after theorem ~ sbc2or
     below.  Proper substitution with a proper class is rarely needed, and when
     it is, we can simply use the expansion of Quine's definition.
     (Contributed by NM, 14-Apr-1995.) $)
  dfsbcq $p |- ( A = B -> ( [. A / x ]. ph <-> [. B / x ]. ph ) ) $=
    ( wceq cab wcel wsbc eleq1 df-sbc 3bitr4g ) CDECABFZGDLGABCHABDHCDLIABCJABD
    JK $.

  $( This theorem, which is similar to Theorem 6.7 of [Quine] p. 42 and holds
     under both our definition and Quine's, relates logic substitution ~ df-sb
     and substitution for class variables ~ df-sbc .  Unlike Quine, we use a
     different syntax for each in order to avoid overloading it.  See remarks
     in ~ dfsbcq .  (Contributed by NM, 31-Dec-2016.) $)
  dfsbcq2 $p |- ( y = A -> ( [ y / x ] ph <-> [. A / x ]. ph ) ) $=
    ( cv wceq cab wcel wsb wsbc eleq1 df-clab df-sbc bicomi 3bitr3g ) CEZDFPABG
    ZHDQHZABCIABDJZPDQKACBLSRABDMNO $.

  $( Show that ~ df-sb and ~ df-sbc are equivalent when the class term ` A ` in
     ~ df-sbc is a setvar variable.  This theorem lets us reuse theorems based
     on ~ df-sb for proofs involving ~ df-sbc .  (Contributed by NM,
     31-Dec-2016.)  (Proof modification is discouraged.) $)
  sbsbc $p |- ( [ y / x ] ph <-> [. y / x ]. ph ) $=
    ( weq wsb cv wsbc wb eqid dfsbcq2 ax-mp ) CCDABCEABCFZGHLIABCLJK $.

  ${
    sbceq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for class substitution.  (Contributed by Mario
       Carneiro, 9-Feb-2017.)  (Revised by NM, 30-Jun-2018.) $)
    sbceq1d $p |- ( ph -> ( [. A / x ]. ps <-> [. B / x ]. ps ) ) $=
      ( wceq wsbc wb dfsbcq syl ) ADEGBCDHBCEHIFBCDEJK $.

    sbceq1dd.2 $e |- ( ph -> [. A / x ]. ps ) $.
    $( Equality theorem for class substitution.  (Contributed by Mario
       Carneiro, 9-Feb-2017.)  (Revised by NM, 30-Jun-2018.) $)
    sbceq1dd $p |- ( ph -> [. B / x ]. ps ) $=
      ( wsbc sbceq1d mpbid ) ABCDHBCEHGABCDEFIJ $.
  $}

  ${
    $d x ph $.
    sbceqbid.1 $e |- ( ph -> A = B ) $.
    sbceqbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equality theorem for class substitution.  (Contributed by Thierry
       Arnoux, 4-Sep-2018.) $)
    sbceqbid $p |- ( ph -> ( [. A / x ]. ps <-> [. B / x ]. ch ) ) $=
      ( cab wcel wsbc abbidv eleq12d df-sbc 3bitr4g ) AEBDIZJFCDIZJBDEKCDFKAEFP
      QGABCDHLMBDENCDFNO $.
  $}

  ${
    $d y A $.  $d y ph $.  $d x y $.
    $( This is the closest we can get to ~ df-sbc if we start from ~ dfsbcq
       (see its comments) and ~ dfsbcq2 .  (Contributed by NM, 18-Nov-2008.)
       (Proof shortened by Andrew Salmon, 29-Jun-2011.)
       (Proof modification is discouraged.) $)
    sbc8g $p |- ( A e. V -> ( [. A / x ]. ph <-> A e. { x | ph } ) ) $=
      ( vy cv wsbc cab wcel dfsbcq eleq1 wsb df-clab weq wb equid dfsbcq2 ax-mp
      bitr2i vtoclbg ) ABEFZGZUAABHZIZABCGCUCIECDABUACJUACUCKUDABELZUBAEBMEENUE
      UBOEPABEUAQRST $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( The disjunction of two equivalences for class substitution does not
       require a class existence hypothesis.  This theorem tells us that there
       are only 2 possibilities for ` [ A / x ] ph ` behavior at proper
       classes, matching the ~ sbc5 (false) and ~ sbc6 (true) conclusions.
       This is interesting since ~ dfsbcq and ~ dfsbcq2 (from which it is
       derived) do not appear to say anything obvious about proper class
       behavior.  Note that this theorem doesn't tell us that it is always one
       or the other at proper classes; it could ""flip"" between false (the first
       disjunct) and true (the second disjunct) as a function of some other
       variable ` y ` that ` ph ` or ` A ` may contain.  (Contributed by NM,
       11-Oct-2004.)  (Proof modification is discouraged.) $)
    sbc2or $p |- ( ( [. A / x ]. ph <-> E. x ( x = A /\ ph ) ) \/
                  ( [. A / x ]. ph <-> A. x ( x = A -> ph ) ) ) $=
      ( vy cvv wcel wsbc cv wceq wa wex wb wi wal wo wsb weq wn mpbii con3i sb5
      dfsbcq2 eqeq2 anbi1d exbidv vtoclbg pm5.15 vex eleq1 adantr nexdv pm2.21d
      orcd alrimiv 2thd bibi2d orbi2d pm2.61i ) CEFZABCGZBHZCIZAJZBKZLZUTVBAMZB
      NZLZOZUSVEVHABDPBDQZAJZBKUTVDDCEABDCUBDHZCIZVKVCBVMVJVBAVLCVAUCUDUEABDUAU
      FUMUSRZVEUTVDRZLZOVIUTVDUGVNVPVHVEVNVOVGUTVNVOVGVNVCBVCUSVBUSAVBVAEFUSBUH
      VACEUISZUJTUKVNVFBVNVBAVBUSVQTULUNUOUPUQSUR $.
  $}

  $( Direct use of ~ df-sbc is allowed from here on. -NM $)

  $( By our definition of proper substitution, it can only be true if the
     substituted expression is a set.  (Contributed by Mario Carneiro,
     13-Oct-2016.) $)
  sbcex $p |- ( [. A / x ]. ph -> A e. _V ) $=
    ( wsbc cab wcel cvv df-sbc elex sylbi ) ABCDCABEZFCGFABCHCKIJ $.

  $( Equality theorem for class substitution.  Class version of ~ sbequ12 .
     (Contributed by NM, 26-Sep-2003.) $)
  sbceq1a $p |- ( x = A -> ( ph <-> [. A / x ]. ph ) ) $=
    ( wsb cv wceq wsbc sbid dfsbcq2 syl5bbr ) AABBDBECFABCGABHABBCIJ $.

  $( Equality theorem for class substitution.  Class version of ~ sbequ12r .
     (Contributed by NM, 4-Jan-2017.) $)
  sbceq2a $p |- ( A = x -> ( [. A / x ]. ph <-> ph ) ) $=
    ( cv wceq wsbc wb sbceq1a eqcoms bicomd ) CBDZEAABCFZALGKCABCHIJ $.

  ${
    $d ph y $.  $d A y $.  $d x y $.
    $( Specialization: if a formula is true for all sets, it is true for any
       class which is a set.  Similar to Theorem 6.11 of [Quine] p. 44.  This
       is Frege's ninth axiom per Proposition 58 of [Frege1879] p. 51.  See
       also ~ stdpc4 and ~ rspsbc .  (Contributed by NM, 16-Jan-2004.) $)
    spsbc $p |- ( A e. V -> ( A. x ph -> [. A / x ]. ph ) ) $=
      ( vy wal wsbc wi cv wceq wsb stdpc4 sbsbc sylib dfsbcq syl5ib vtocleg ) A
      BFZABCGZHECDRABEIZGZTCJSRABEKUAABELABEMNABTCOPQ $.

    spsbcd.1 $e |- ( ph -> A e. V ) $.
    spsbcd.2 $e |- ( ph -> A. x ps ) $.
    $( Specialization: if a formula is true for all sets, it is true for any
       class which is a set.  Similar to Theorem 6.11 of [Quine] p. 44.  See
       also ~ stdpc4 and ~ rspsbc .  (Contributed by Mario Carneiro,
       9-Feb-2017.) $)
    spsbcd $p |- ( ph -> [. A / x ]. ps ) $=
      ( wcel wal wsbc spsbc sylc ) ADEHBCIBCDJFGBCDEKL $.
  $}

  ${
    sbcth.1 $e |- ph $.
    $( A substitution into a theorem remains true (when ` A ` is a set).
       (Contributed by NM, 5-Nov-2005.) $)
    sbcth $p |- ( A e. V -> [. A / x ]. ph ) $=
      ( wcel wal wsbc ax-gen spsbc mpi ) CDFABGABCHABEIABCDJK $.
  $}

  ${
    $d x ph $.
    sbcthdv.1 $e |- ( ph -> ps ) $.
    $( Deduction version of ~ sbcth .  (Contributed by NM, 30-Nov-2005.)
       (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    sbcthdv $p |- ( ( ph /\ A e. V ) -> [. A / x ]. ps ) $=
      ( wal wcel wsbc alrimiv spsbc mpan9 ) ABCGDEHBCDIABCFJBCDEKL $.
  $}

  $( An identity theorem for substitution.  See ~ sbid .  (Contributed by Mario
     Carneiro, 18-Feb-2017.) $)
  sbcid $p |- ( [. x / x ]. ph <-> ph ) $=
    ( cv wsbc wsb sbsbc sbid bitr3i ) ABBCDABBEAABBFABGH $.

  ${
    nfsbc1d.2 $e |- ( ph -> F/_ x A ) $.
    $( Deduction version of ~ nfsbc1 .  (Contributed by NM, 23-May-2006.)
       (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfsbc1d $p |- ( ph -> F/ x [. A / x ]. ps ) $=
      ( wsbc cab wcel df-sbc wnfc nfab1 a1i nfeld nfxfrd ) BCDFDBCGZHACBCDIACDO
      ECOJABCKLMN $.
  $}

  ${
    nfsbc1.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for class substitution.  (Contributed
       by NM, 5-Aug-1993.)  (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfsbc1 $p |- F/ x [. A / x ]. ph $=
      ( wsbc wnf wtru wnfc a1i nfsbc1d trud ) ABCEBFGABCBCHGDIJK $.
  $}

  ${
    $d x A $.
    $( Bound-variable hypothesis builder for class substitution.  (Contributed
       by Mario Carneiro, 12-Oct-2016.) $)
    nfsbc1v $p |- F/ x [. A / x ]. ph $=
      ( nfcv nfsbc1 ) ABCBCDE $.
  $}

  ${
    nfsbcd.1 $e |- F/ y ph $.
    nfsbcd.2 $e |- ( ph -> F/_ x A ) $.
    nfsbcd.3 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfsbc .  (Contributed by NM, 23-Nov-2005.)
       (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfsbcd $p |- ( ph -> F/ x [. A / y ]. ps ) $=
      ( wsbc cab wcel df-sbc nfabd nfeld nfxfrd ) BDEIEBDJZKACBDELACEPGABCDFHMN
      O $.
  $}

  ${
    nfsbc.1 $e |- F/_ x A $.
    nfsbc.2 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for class substitution.  (Contributed
       by NM, 7-Sep-2014.)  (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfsbc $p |- F/ x [. A / y ]. ph $=
      ( wsbc wnf wtru nftru wnfc a1i nfsbcd trud ) ACDGBHIABCDCJBDKIELABHIFLMN
      $.
  $}

  ${
    $d x z $.  $d z A $.  $d y z ph $.
    $( A composition law for class substitution.  (Contributed by NM,
       26-Sep-2003.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    sbcco $p |- ( [. A / y ]. [. y / x ]. ph <-> [. A / x ]. ph ) $=
      ( vz cv wsbc cvv wcel sbcex dfsbcq wsb sbsbc sbbii sbco2 3bitr3ri vtoclbg
      nfv bitri pm5.21nii ) ABCFGZCDGZDHIABDGZUACDJABDJUACEFZGZABUDGZUBUCEDHUAC
      UDDKABUDDKUEABELZUFABCLZCELUACELUGUEUHUACEABCMNABECACROUACEMPABEMSQT $.
  $}

  ${
    $d x y $.  $d y ph $.  $d A y $.
    sbcco2.1 $e |- ( x = y -> A = B ) $.
    $( A composition law for class substitution.  Importantly, ` x ` may occur
       free in the class expression substituted for ` A ` .  (Contributed by
       NM, 5-Sep-2004.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    sbcco2 $p |- ( [. x / y ]. [. B / x ]. ph <-> [. A / x ]. ph ) $=
      ( wsbc cv wsb sbsbc nfv weq wceq wb equcoms dfsbcq bicomd syl sbie bitr3i
      ) ABEGZCBHGUACBIABDGZUACBJUAUBCBUBCKCBLDEMZUAUBNUCBCFOUCUBUAABDEPQRST $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( An equivalence for class substitution.  (Contributed by NM,
       23-Aug-1993.)  (Revised by Mario Carneiro, 12-Oct-2016.) $)
    sbc5 $p |- ( [. A / x ]. ph <-> E. x ( x = A /\ ph ) ) $=
      ( vy wsbc cvv wcel cv wceq wex sbcex exsimpl isset sylibr wsb weq dfsbcq2
      wa eqeq2 anbi1d exbidv sb5 vtoclbg pm5.21nii ) ABCEZCFGZBHZCIZARZBJZABCKU
      JUHBJUFUHABLBCMNABDOBDPZARZBJUEUJDCFABDCQDHZCIZULUIBUNUKUHAUMCUGSTUAABDUB
      UCUD $.
  $}

  ${
    $d x y A $.
    $( An equivalence for class substitution.  (Contributed by NM,
       11-Oct-2004.)  (Proof shortened by Andrew Salmon, 8-Jun-2011.) $)
    sbc6g $p |- ( A e. V -> ( [. A / x ]. ph <-> A. x ( x = A -> ph ) ) ) $=
      ( wcel cv wceq wi wal wa wex wsbc alexeqg sbc5 syl6rbbr ) CDEBFCGZAHBIPAJ
      BKABCLABCDMABCNO $.
  $}

  ${
    $d x A $.
    sbc6.1 $e |- A e. _V $.
    $( An equivalence for class substitution.  (Contributed by NM,
       23-Aug-1993.)  (Proof shortened by Eric Schmidt, 17-Jan-2007.) $)
    sbc6 $p |- ( [. A / x ]. ph <-> A. x ( x = A -> ph ) ) $=
      ( cvv wcel wsbc cv wceq wi wal wb sbc6g ax-mp ) CEFABCGBHCIAJBKLDABCEMN
      $.
  $}

  ${
    $d y A $.  $d y ph $.  $d x y $.
    $( An equivalence for class substitution in the spirit of ~ df-clab .  Note
       that ` x ` and ` A ` don't have to be distinct.  (Contributed by NM,
       18-Nov-2008.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    sbc7 $p |- ( [. A / x ]. ph <-> E. y ( y = A /\ [. y / x ]. ph ) ) $=
      ( wsbc cv wceq wa wex sbcco sbc5 bitr3i ) ABDEABCFZEZCDEMDGNHCIABCDJNCDKL
      $.
  $}

  ${
    cbvsbc.1 $e |- F/ y ph $.
    cbvsbc.2 $e |- F/ x ps $.
    cbvsbc.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change bound variables in a wff substitution.  (Contributed by Jeff
       Hankins, 19-Sep-2009.)  (Proof shortened by Andrew Salmon,
       8-Jun-2011.) $)
    cbvsbc $p |- ( [. A / x ]. ph <-> [. A / y ]. ps ) $=
      ( cab wcel wsbc cbvab eleq2i df-sbc 3bitr4i ) EACIZJEBDIZJACEKBDEKPQEABCD
      FGHLMACENBDENO $.
  $}

  ${
    $d y ph $.  $d x ps $.
    cbvsbcv.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change the bound variable of a class substitution using implicit
       substitution.  (Contributed by NM, 30-Sep-2008.)  (Revised by Mario
       Carneiro, 13-Oct-2016.) $)
    cbvsbcv $p |- ( [. A / x ]. ph <-> [. A / y ]. ps ) $=
      ( nfv cbvsbc ) ABCDEADGBCGFH $.
  $}

  ${
    $d x y A $.  $d y ps $.
    $( Conversion of implicit substitution to explicit class substitution,
       using a bound-variable hypothesis instead of distinct variables.
       (Closed theorem version of ~ sbciegf .)  (Contributed by NM,
       10-Nov-2005.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    sbciegft $p |- ( ( A e. V /\ F/ x ps /\
            A. x ( x = A -> ( ph <-> ps ) ) ) -> ( [. A / x ]. ph <-> ps ) ) $=
      ( wcel wnf cv wceq wb wi wal w3a wsbc imim2i alimi biimpa sylan2 3adant1
      wa wex sbc5 bi1 impd 19.23t syl5bi bi2 com23 19.21t sbc6g 3ad2ant1 impbid
      sylibrd ) DEFZBCGZCHDIZABJZKZCLZMZACDNZBVAUPATZCUAZUTBACDUBUOUSVCBKZUNUSU
      OVBBKZCLZVDURVECURUPABUQABKUPABUCOUDPUOVFVDVBBCUEQRSUFUTBUPAKZCLZVAUOUSBV
      HKZUNUSUOBVGKZCLZVIURVJCURUPBAUQBAKUPABUGOUHPUOVKVIBVGCUIQRSUNUOVAVHJUSAC
      DEUJUKUMUL $.
  $}

  ${
    $d x A $.
    sbciegf.1 $e |- F/ x ps $.
    sbciegf.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 14-Dec-2005.)  (Revised by Mario Carneiro,
       13-Oct-2016.) $)
    sbciegf $p |- ( A e. V -> ( [. A / x ]. ph <-> ps ) ) $=
      ( wcel wnf cv wceq wb wi wal wsbc ax-gen sbciegft mp3an23 ) DEHBCICJDKABL
      MZCNACDOBLFSCGPABCDEQR $.
  $}

  ${
    $d x A $.  $d x ps $.
    sbcieg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 10-Nov-2005.) $)
    sbcieg $p |- ( A e. V -> ( [. A / x ]. ph <-> ps ) ) $=
      ( nfv sbciegf ) ABCDEBCGFH $.
  $}

  ${
    $d x y $.  $d A y $.  $d ch y $.  $d ph y $.  $d ps x $.
    sbcie2g.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    sbcie2g.2 $e |- ( y = A -> ( ps <-> ch ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       This version of ~ sbcie avoids a disjointness condition on ` x , A ` by
       substituting twice.  (Contributed by Mario Carneiro, 15-Oct-2016.) $)
    sbcie2g $p |- ( A e. V -> ( [. A / x ]. ph <-> ch ) ) $=
      ( cv wsbc dfsbcq wsb sbsbc nfv sbie bitr3i vtoclbg ) ADEJZKZBADFKCEFGADSF
      LITADEMBADENABDEBDOHPQR $.
  $}

  ${
    $d x A $.  $d x ps $.
    sbcie.1 $e |- A e. _V $.
    sbcie.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 4-Sep-2004.) $)
    sbcie $p |- ( [. A / x ]. ph <-> ps ) $=
      ( cvv wcel wsbc wb sbcieg ax-mp ) DGHACDIBJEABCDGFKL $.
  $}

  ${
    $d x A $.
    sbcied.1 $e |- ( ph -> A e. V ) $.
    sbcied.2 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    ${
      sbciedf.3 $e |- F/ x ph $.
      sbciedf.4 $e |- ( ph -> F/ x ch ) $.
      $( Conversion of implicit substitution to explicit class substitution,
         deduction form.  (Contributed by NM, 29-Dec-2014.) $)
      sbciedf $p |- ( ph -> ( [. A / x ]. ps <-> ch ) ) $=
        ( wcel wnf cv wceq wb wi wal wsbc ex alrimi sbciegft syl3anc ) AEFKCDLD
        MENZBCOZPZDQBDERCOGJAUEDIAUCUDHSTBCDEFUAUB $.
    $}

    $d x ph $.  $d x ch $.
    $( Conversion of implicit substitution to explicit class substitution,
       deduction form.  (Contributed by NM, 13-Dec-2014.) $)
    sbcied $p |- ( ph -> ( [. A / x ]. ps <-> ch ) ) $=
      ( nfv nfvd sbciedf ) ABCDEFGHADIACDJK $.
  $}

  ${
    $d x A $.  $d x ph $.  $d x ch $.
    sbcied2.1 $e |- ( ph -> A e. V ) $.
    sbcied2.2 $e |- ( ph -> A = B ) $.
    sbcied2.3 $e |- ( ( ph /\ x = B ) -> ( ps <-> ch ) ) $.
    $( Conversion of implicit substitution to explicit class substitution,
       deduction form.  (Contributed by NM, 13-Dec-2014.) $)
    sbcied2 $p |- ( ph -> ( [. A / x ]. ps <-> ch ) ) $=
      ( cv wceq wb id sylan9eqr syldan sbcied ) ABCDEGHADKZELZRFLBCMSAREFSNIOJP
      Q $.
  $}

  ${
    $d y A $.  $d y B $.  $d y ph $.  $d x y $.
    elrabsf.1 $e |- F/_ x B $.
    $( Membership in a restricted class abstraction, expressed with explicit
       class substitution.  (The variation ~ elrabf has implicit
       substitution).  The hypothesis specifies that ` x ` must not be a free
       variable in ` B ` .  (Contributed by NM, 30-Sep-2003.)  (Proof shortened
       by Mario Carneiro, 13-Oct-2016.) $)
    elrabsf $p |- ( A e. { x e. B | ph }
          <-> ( A e. B /\ [. A / x ]. ph ) ) $=
      ( vy cv wsbc crab dfsbcq nfcv nfv nfsbc1v sbceq1a cbvrab elrab2 ) ABFGZHZ
      ABCHFCDABDIABQCJARBFDEFDKAFLABQMABQNOP $.
  $}

  ${
    $d x y B $.  $d y A $.
    $( Substitution applied to an atomic wff.  Set theory version of ~ eqsb3 .
       (Contributed by Andrew Salmon, 29-Jun-2011.) $)
    eqsbc3 $p |- ( A e. V -> ( [. A / x ]. x = B <-> A = B ) ) $=
      ( vy cv wceq wsbc dfsbcq eqeq1 wsb sbsbc eqsb3 bitr3i vtoclbg ) AFCGZAEFZ
      HZQCGZPABHBCGEBDPAQBIQBCJRPAEKSPAELEACMNO $.
  $}

  ${
    $d x y $.  $d y A $.  $d y ph $.  $d y ps $.
    $( Move negation in and out of class substitution.  (Contributed by NM,
       16-Jan-2004.) $)
    sbcng $p |- ( A e. V -> ( [. A / x ]. -. ph <-> -. [. A / x ]. ph ) ) $=
      ( vy wn wsb wsbc dfsbcq2 cv wceq notbid sbn vtoclbg ) AFZBEGABEGZFOBCHABC
      HZFECDOBECIEJCKPQABECILABEMN $.

    $( Distribution of class substitution over implication.  (Contributed by
       NM, 16-Jan-2004.) $)
    sbcimg $p |- ( A e. V ->
     ( [. A / x ]. ( ph -> ps ) <-> ( [. A / x ]. ph -> [. A / x ]. ps ) ) ) $=
      ( vy wi wsb wsbc dfsbcq2 cv wceq imbi12d sbim vtoclbg ) ABGZCFHACFHZBCFHZ
      GPCDIACDIZBCDIZGFDEPCFDJFKDLQSRTACFDJBCFDJMABCFNO $.

    $( Distribution of class substitution over conjunction.  (Contributed by
       NM, 31-Dec-2016.)  (Revised by NM, 17-Aug-2018.) $)
    sbcan $p |- ( [. A / x ]. ( ph /\ ps )
        <-> ( [. A / x ]. ph /\ [. A / x ]. ps ) ) $=
      ( vy wa wsbc cvv wcel sbcex adantl dfsbcq2 cv wceq anbi12d sban pm5.21nii
      wsb vtoclbg ) ABFZCDGZDHIZACDGZBCDGZFZTCDJUDUBUCBCDJKTCERACERZBCERZFUAUEE
      DHTCEDLEMDNUFUCUGUDACEDLBCEDLOABCEPSQ $.

    $( Distribution of class substitution over conjunction.  (Contributed by
       NM, 21-May-2004.)  Obsolete as of 17-Aug-2018.  Use ~ sbcan instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbcangOLD $p |- ( A e. V ->
     ( [. A / x ]. ( ph /\ ps ) <-> ( [. A / x ]. ph /\ [. A / x ]. ps ) ) ) $=
      ( vy wa wsb wsbc dfsbcq2 cv wceq anbi12d sban vtoclbg ) ABGZCFHACFHZBCFHZ
      GPCDIACDIZBCDIZGFDEPCFDJFKDLQSRTACFDJBCFDJMABCFNO $.

    $( Distribution of class substitution over disjunction.  (Contributed by
       NM, 31-Dec-2016.)  (Revised by NM, 17-Aug-2018.) $)
    sbcor $p |- ( [. A / x ]. ( ph \/ ps )
         <-> ( [. A / x ]. ph \/ [. A / x ]. ps ) ) $=
      ( vy wo wsbc cvv wcel sbcex jaoi wsb dfsbcq2 cv wceq orbi12d sbor vtoclbg
      pm5.21nii ) ABFZCDGZDHIZACDGZBCDGZFZTCDJUCUBUDACDJBCDJKTCELACELZBCELZFUAU
      EEDHTCEDMENDOUFUCUGUDACEDMBCEDMPABCEQRS $.

    $( Distribution of class substitution over disjunction.  (Contributed by
       NM, 21-May-2004.)  Obsolete as of 17-Aug-2018.  Use ~ sbcor instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbcorgOLD $p |- ( A e. V ->
     ( [. A / x ]. ( ph \/ ps ) <-> ( [. A / x ]. ph \/ [. A / x ]. ps ) ) ) $=
      ( vy wo wsb wsbc dfsbcq2 cv wceq orbi12d sbor vtoclbg ) ABGZCFHACFHZBCFHZ
      GPCDIACDIZBCDIZGFDEPCFDJFKDLQSRTACFDJBCFDJMABCFNO $.

    $( Distribution of class substitution over biconditional.  (Contributed by
       Raph Levien, 10-Apr-2004.) $)
    sbcbig $p |- ( A e. V ->
   ( [. A / x ]. ( ph <-> ps ) <-> ( [. A / x ]. ph <-> [. A / x ]. ps ) ) ) $=
      ( vy wb wsb wsbc dfsbcq2 cv wceq bibi12d sbbi vtoclbg ) ABGZCFHACFHZBCFHZ
      GPCDIACDIZBCDIZGFDEPCFDJFKDLQSRTACFDJBCFDJMABCFNO $.
  $}

  $( Move negation in and out of class substitution.  One direction of ~ sbcng
     that holds for proper classes.  (Contributed by NM, 17-Aug-2018.) $)
  sbcn1 $p |- ( [. A / x ]. -. ph -> -. [. A / x ]. ph ) $=
    ( cvv wcel wn wsbc sbcex sbcng biimpd mpcom ) CDEZAFZBCGZABCGFZMBCHLNOABCDI
    JK $.

  $( Distribution of class substitution over implication.  One direction of
     ~ sbcimg that holds for proper classes.  (Contributed by NM,
     17-Aug-2018.) $)
  sbcim1 $p |- ( [. A / x ]. ( ph -> ps )
          -> ( [. A / x ]. ph -> [. A / x ]. ps ) ) $=
    ( cvv wcel wi wsbc sbcex sbcimg biimpd mpcom ) DEFZABGZCDHZACDHBCDHGZNCDIMO
    PABCDEJKL $.

  $( Distribution of class substitution over biconditional.  One direction of
     ~ sbcbig that holds for proper classes.  (Contributed by NM,
     17-Aug-2018.) $)
  sbcbi1 $p |- ( [. A / x ]. ( ph <-> ps )
       -> ( [. A / x ]. ph <-> [. A / x ]. ps ) ) $=
    ( cvv wcel wb wsbc sbcex sbcbig biimpd mpcom ) DEFZABGZCDHZACDHBCDHGZNCDIMO
    PABCDEJKL $.

  $( Substituting into equivalent wff's gives equivalent results.  (Contributed
     by Giovanni Mascellani, 9-Apr-2018.) $)
  sbcbi2 $p |- ( A. x ( ph <-> ps ) ->
       ( [. A / x ]. ph <-> [. A / x ]. ps ) ) $=
    ( wb wal cab wcel wsbc wceq abbi eleq2 sylbi df-sbc 3bitr4g ) ABECFZDACGZHZ
    DBCGZHZACDIBCDIPQSJRTEABCKQSDLMACDNBCDNO $.

  ${
    $d x z A $.  $d x y z $.  $d z ph $.
    $( Move universal quantifier in and out of class substitution.
       (Contributed by NM, 31-Dec-2016.)  (Revised by NM, 18-Aug-2018.) $)
    sbcal $p |- ( [. A / y ]. A. x ph <-> A. x [. A / y ]. ph ) $=
      ( vz wal wsbc cvv wcel sbcex sps dfsbcq2 cv wceq albidv vtoclbg pm5.21nii
      wsb sbal ) ABFZCDGZDHIZACDGZBFZTCDJUCUBBACDJKTCERACERZBFUAUDEDHTCEDLEMDNU
      EUCBACEDLOABCESPQ $.

    $( Move universal quantifier in and out of class substitution.
       (Contributed by NM, 16-Jan-2004.)  Obsolete as of 17-Aug-2018.  Use
       ~ sbcal instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbcalgOLD $p |- ( A e. V
        -> ( [. A / y ]. A. x ph <-> A. x [. A / y ]. ph ) ) $=
      ( vz wal wsb wsbc dfsbcq2 cv wceq albidv sbal vtoclbg ) ABGZCFHACFHZBGPCD
      IACDIZBGFDEPCFDJFKDLQRBACFDJMABCFNO $.

    $( Move existential quantifier in and out of class substitution.
       (Contributed by NM, 21-May-2004.)  (Revised by NM, 18-Aug-2018.) $)
    sbcex2 $p |- ( [. A / y ]. E. x ph <-> E. x [. A / y ]. ph ) $=
      ( vz wex wsbc cvv wcel sbcex exlimiv wsb dfsbcq2 wceq exbidv sbex vtoclbg
      cv pm5.21nii ) ABFZCDGZDHIZACDGZBFZTCDJUCUBBACDJKTCELACELZBFUAUDEDHTCEDME
      RDNUEUCBACEDMOABCEPQS $.

    $( Move existential quantifier in and out of class substitution.
       (Contributed by NM, 21-May-2004.)  Obsolete as of 17-Aug-2018.  Use
       ~ sbcex instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbcexgOLD $p |- ( A e. V
         -> ( [. A / y ]. E. x ph <-> E. x [. A / y ]. ph ) ) $=
      ( vz wex wsb wsbc dfsbcq2 cv wceq exbidv sbex vtoclbg ) ABGZCFHACFHZBGPCD
      IACDIZBGFDEPCFDJFKDLQRBACFDJMABCFNO $.
  $}

  ${
    $d x B $.  $d x A $.
    $( Set theory version of ~ sbeqal1 .  (Contributed by Andrew Salmon,
       28-Jun-2011.) $)
    sbceqal $p |- ( A e. V -> ( A. x ( x = A -> x = B ) -> A = B ) ) $=
      ( wcel cv wceq wi wal wsbc spsbc sbcimg wb eqsbc3 mpbiri pm5.5 syl 3bitrd
      eqid sylibd ) BDEZAFZBGZUBCGZHZAIUEABJZBCGZUEABDKUAUFUCABJZUDABJZHZUIUGUC
      UDABDLUAUHUJUIMUAUHBBGBSABBDNOUHUIPQABCDNRT $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Theorem *14.121 in [WhiteheadRussell] p. 185.  (Contributed by Andrew
       Salmon, 28-Jun-2011.)  (Proof shortened by Wolf Lammen, 9-May-2013.) $)
    sbeqalb $p |- ( A e. V -> ( ( A. x ( ph <-> x = A ) /\ A. x ( ph <->
      x = B ) ) -> A = B ) ) $=
      ( cv wceq wb wal wa wi wcel bibi1 biimpa biimpd alanimi sbceqal syl5 ) AB
      FZCGZHZBIASDGZHZBIJTUBKZBICELCDGUAUCUDBUAUCJTUBUAUCTUBHATUBMNOPBCDEQR $.
  $}

  ${
    sbcbid.1 $e |- F/ x ph $.
    sbcbid.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building deduction rule for class substitution.  (Contributed by
       NM, 29-Dec-2014.) $)
    sbcbid $p |- ( ph -> ( [. A / x ]. ps <-> [. A / x ]. ch ) ) $=
      ( cab wcel wsbc abbid eleq2d df-sbc 3bitr4g ) AEBDHZIECDHZIBDEJCDEJAOPEAB
      CDFGKLBDEMCDEMN $.
  $}

  ${
    $d x ph $.
    sbcbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building deduction rule for class substitution.  (Contributed by
       NM, 29-Dec-2014.) $)
    sbcbidv $p |- ( ph -> ( [. A / x ]. ps <-> [. A / x ]. ch ) ) $=
      ( nfv sbcbid ) ABCDEADGFH $.
  $}

  ${
    sbcbii.1 $e |- ( ph <-> ps ) $.
    $( Formula-building inference rule for class substitution.  (Contributed by
       NM, 11-Nov-2005.) $)
    sbcbii $p |- ( [. A / x ]. ph <-> [. A / x ]. ps ) $=
      ( wsbc wb wtru a1i sbcbidv trud ) ACDFBCDFGHABCDABGHEIJK $.

    $( Formula-building inference rule for class substitution.  (Contributed by
       NM, 11-Nov-2005.)  Obsolete as of 17-Aug-2018.  Use ~ sbcbii instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbcbiiOLD $p |- ( A e. V -> ( [. A / x ]. ph <-> [. A / x ]. ps ) ) $=
      ( wsbc wb wcel sbcbii a1i ) ACDGBCDGHDEIABCDFJK $.
  $}

  ${
    $d x A $.  $d x B $.
    $( ~ eqsbc3 with setvar variable on right side of equals sign.  This proof
       was automatically generated from the virtual deduction proof ~ eqsbc3rVD
       using a translation program.  (Contributed by Alan Sare,
       24-Oct-2011.) $)
    eqsbc3r $p |- ( A e. V -> ( [. A / x ]. B = x <-> B = A ) ) $=
      ( wcel wceq wsbc eqcom sbcbii biimpi eqsbc3 syl5ib syl6ib syl6ibr sylibrd
      cv idd impbid ) BDEZCAPZFZABGZCBFZSUBBCFZUCUBTCFZABGZSUDUBUFUAUEABCTHIZJA
      BCDKZLBCHZMSUCUFUBSUCUDUFSUCUCUDSUCQUINUHOUGNR $.
  $}

  $( Distribution of class substitution over triple conjunction.  (Contributed
     by NM, 14-Dec-2006.)  (Revised by NM, 17-Aug-2018.) $)
  sbc3an $p |- ( [. A / x ]. ( ph /\ ps /\ ch ) <->
              ( [. A / x ]. ph /\ [. A / x ]. ps /\ [. A / x ]. ch ) ) $=
    ( w3a wsbc wa df-3an sbcbii sbcan anbi1i 3bitri bitr4i ) ABCFZDEGZADEGZBDEG
    ZHZCDEGZHZQRTFPABHZCHZDEGUBDEGZTHUAOUCDEABCIJUBCDEKUDSTABDEKLMQRTIN $.

  ${
    $d y ch $.  $d y ps $.  $d y ph $.  $d y A $.  $d x y $.
    $( Distribution of class substitution over triple conjunction.
       (Contributed by NM, 14-Dec-2006.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.)  Obsolete as of 17-Aug-2018.  Use ~ sbc3an instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbc3angOLD $p |- ( A e. V -> ( [. A / x ]. ( ph /\ ps /\ ch ) <->
                ( [. A / x ]. ph /\ [. A / x ]. ps /\ [. A / x ]. ch ) ) ) $=
      ( vy w3a wsb wsbc dfsbcq2 cv wceq 3anbi123d sb3an vtoclbg ) ABCHZDGIADGIZ
      BDGIZCDGIZHQDEJADEJZBDEJZCDEJZHGEFQDGEKGLEMRUASUBTUCADGEKBDGEKCDGEKNABCDG
      OP $.
  $}

  ${
    $d y z A $.  $d x y B $.
    $( Class substitution into a membership relation.  (Contributed by NM,
       17-Aug-2018.) $)
    sbcel1v $p |- ( [. A / x ]. x e. B <-> A e. B ) $=
      ( vy wcel wsbc cvv sbcex elex wsb dfsbcq2 eleq1 clelsb3 vtoclbg pm5.21nii
      cv ) APCEZABFZBGEBCEZQABHBCIQADJDPZCERSDBGQADBKTBCLDACMNO $.
  $}

  ${
    $d y z A $.  $d x y B $.
    $( Class substitution into a membership relation.  (Contributed by NM,
       17-Nov-2006.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.)
       Obsolete as of 17-Aug-2018.  Use ~ sbcel1v instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbcel1gvOLD $p |- ( A e. V -> ( [. A / x ]. x e. B <-> A e. B ) ) $=
      ( vy cv wcel wsb wsbc dfsbcq2 eleq1 clelsb3 vtoclbg ) AFCGZAEHEFZCGNABIBC
      GEBDNAEBJOBCKEACLM $.
  $}

  ${
    $d y z B $.  $d x y A $.
    $( Class substitution into a membership relation.  (Contributed by NM,
       17-Nov-2006.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    sbcel2gv $p |- ( B e. V -> ( [. B / x ]. A e. x <-> A e. B ) ) $=
      ( vy cv wcel eleq2 sbcie2g ) BAFZGBEFZGBCGAECDJKBHKCBHI $.

    $( Class substitution into a membership relation.  One direction of
       ~ sbcel2gv that holds for proper classes.  (Contributed by NM,
       17-Aug-2018.) $)
    sbcel21v $p |- ( [. B / x ]. A e. x -> A e. B ) $=
      ( cvv wcel cv wsbc sbcex sbcel2gv biimpd mpcom ) CDEZBAFEZACGZBCEZMACHLNO
      ABCDIJK $.
  $}

  ${
    $d x ph $.
    sbcimdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Substitution analog of Theorem 19.20 of [Margaris] p. 90 ( ~ alim ).
       (Contributed by NM, 11-Nov-2005.) $)
    sbcimdv $p |- ( ph -> ( [. A / x ]. ps -> [. A / x ]. ch ) ) $=
      ( cvv wcel wsbc wi wal alrimiv spsbc sbcim1 syl56 sbcex con3i pm2.21d a1d
      wn pm2.61i ) EGHZABDEIZCDEIZJZJABCJZDKUBUFDEIUEAUFDFLUFDEGMBCDENOUBTZUEAU
      GUCUDUCUBBDEPQRSUA $.

    $( Substitution analog of Theorem 19.20 of [Margaris] p. 90.  (Contributed
       by NM, 11-Nov-2005.)  Obsolete as of 17-Aug-2018.  Use ~ sbcimdv
       instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbcimdvOLD $p |- ( ( ph /\ A e. V ) ->
          ( [. A / x ]. ps -> [. A / x ]. ch ) ) $=
      ( wcel wsbc wi wal alrimiv spsbc syl5 sbcimg sylibd impcom ) EFHZABDEICDE
      IJZRABCJZDEIZSATDKRUAATDGLTDEFMNBCDEFOPQ $.
  $}

  ${
    $d x y $.  $d y A $.  $d y ph $.
    $( Substitution for a variable not free in a wff does not affect it.
       (Contributed by Mario Carneiro, 14-Oct-2016.) $)
    sbctt $p |- ( ( A e. V /\ F/ x ph ) -> ( [. A / x ]. ph <-> ph ) ) $=
      ( vy wcel wnf wsbc wb wsb wi wceq dfsbcq2 bibi1d imbi2d sbft vtoclg imp
      cv ) CDFABGZABCHZAIZTABEJZAIZKTUBKECDESCLZUDUBTUEUCUAAABECMNOABEPQR $.
  $}

  ${
    $d y A $.  $d y ph $.  $d x y $.
    sbcgf.1 $e |- F/ x ph $.
    $( Substitution for a variable not free in a wff does not affect it.
       (Contributed by NM, 11-Oct-2004.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    sbcgf $p |- ( A e. V -> ( [. A / x ]. ph <-> ph ) ) $=
      ( wcel wnf wsbc wb sbctt mpan2 ) CDFABGABCHAIEABCDJK $.

    $( Substitution for a variable not free in antecedent affects only the
       consequent.  (Contributed by NM, 11-Oct-2004.) $)
    sbc19.21g $p |- ( A e. V ->
            ( [. A / x ]. ( ph -> ps ) <-> ( ph -> [. A / x ]. ps ) ) ) $=
      ( wcel wi wsbc sbcimg sbcgf imbi1d bitrd ) DEGZABHCDIACDIZBCDIZHAPHABCDEJ
      NOAPACDEFKLM $.
  $}

  ${
    $d x ph $.
    $( Substitution for a variable not occurring in a wff does not affect it.
       Distinct variable form of ~ sbcgf .  (Contributed by Alan Sare,
       10-Nov-2012.) $)
    sbcg $p |- ( A e. V -> ( [. A / x ]. ph <-> ph ) ) $=
      ( nfv sbcgf ) ABCDABEF $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x V $.  $d y W $.
    sbc2iegf.1 $e |- F/ x ps $.
    sbc2iegf.2 $e |- F/ y ps $.
    sbc2iegf.3 $e |- F/ x B e. W $.
    sbc2iegf.4 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by Mario Carneiro, 19-Dec-2013.) $)
    sbc2iegf $p |- ( ( A e. V /\ B e. W ) ->
            ( [. A / x ]. [. B / y ]. ph <-> ps ) ) $=
      ( wcel wa simpl cv wceq wb adantll nfv wsbc wnf a1i sbciedf nfan ) EGMZFH
      MZNZADFUAZBCEGUFUGOUGCPEQZUIBRUFUGUJNZABDFHUGUJOUJDPFQABRUGLSUKDTBDUBUKJU
      CUDSUFUGCUFCTKUEBCUBUHIUCUD $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y ps $.
    sbc2ie.1 $e |- A e. _V $.
    sbc2ie.2 $e |- B e. _V $.
    sbc2ie.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 16-Dec-2008.)  (Revised by Mario Carneiro,
       19-Dec-2013.) $)
    sbc2ie $p |- ( [. A / x ]. [. B / y ]. ph <-> ps ) $=
      ( cvv wcel wsbc wb nfv nfth sbc2iegf mp2an ) EJKFJKZADFLCELBMGHABCDEFJJBC
      NBDNRCHOIPQ $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y ph $.  $d x y ch $.
    sbc2iedv.1 $e |- A e. _V $.
    sbc2iedv.2 $e |- B e. _V $.
    sbc2iedv.3 $e |- ( ph -> ( ( x = A /\ y = B ) -> ( ps <-> ch ) ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by NM, 16-Dec-2008.)  (Proof shortened by Mario Carneiro,
       18-Oct-2016.) $)
    sbc2iedv $p |- ( ph -> ( [. A / x ]. [. B / y ]. ps <-> ch ) ) $=
      ( wsbc cvv wcel a1i cv wceq wa wb impl sbcied ) ABEGKCDFLFLMAHNADOFPZQZBC
      EGLGLMUBINAUAEOGPBCRJSTT $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d z C $.  $d x y z ps $.
    sbc3ie.1 $e |- A e. _V $.
    sbc3ie.2 $e |- B e. _V $.
    sbc3ie.3 $e |- C e. _V $.
    sbc3ie.4 $e |- ( ( x = A /\ y = B /\ z = C ) -> ( ph <-> ps ) ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       (Contributed by Mario Carneiro, 19-Jun-2014.)  (Revised by Mario
       Carneiro, 29-Dec-2014.) $)
    sbc3ie $p |- ( [. A / x ]. [. B / y ]. [. C / z ]. ph <-> ps ) $=
      ( wsbc cv wceq wa cvv wcel a1i wb 3expa sbcied sbc2ie ) AEHMBCDFGIJCNFOZD
      NGOZPZABEHQHQRUFKSUDUEENHOABTLUAUBUC $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y V $.  $d x W $.
    $( Lemma for ~ sbccom .  (Contributed by NM, 14-Nov-2005.)  (Revised by
       Mario Carneiro, 18-Oct-2016.) $)
    sbccomlem $p |- ( [. A / x ]. [. B / y ]. ph
         <-> [. B / y ]. [. A / x ]. ph ) $=
      ( cv wceq wa wex wsbc excom exdistr an12 exbii bitri 3bitr3i sbc5 3bitr4i
      19.42v sbcbii ) CFEGZAHZCIZBDJZBFDGZAHZBIZCEJZACEJZBDJABDJZCEJUEUCHBIZUAU
      GHZCIZUDUHUEUBHZCIBIUNBIZCIUKUMUNBCKUEUBBCLUOULCUOUAUFHZBIULUNUPBUEUAAMNU
      AUFBSONPUCBDQUGCEQRUIUCBDACEQTUJUGCEABDQTR $.
  $}

  ${
    $d w y z A $.  $d w x z B $.  $d w z ph $.  $d x y $.
    $( Commutative law for double class substitution.  (Contributed by NM,
       15-Nov-2005.)  (Proof shortened by Mario Carneiro, 18-Oct-2016.) $)
    sbccom $p |- ( [. A / x ]. [. B / y ]. ph
          <-> [. B / y ]. [. A / x ]. ph ) $=
      ( vw vz cv wsbc sbccomlem sbcbii bitri 3bitr3i sbcco ) ACFHZIZFEIZBDIZABG
      HZIZGDIZCEIZACEIZBDIABDIZCEIQBSIZGDIZUACOIZFEIZRUBTCOIZFEIZGDIUIGDIZFEIUF
      UHUIGFDEJUJUEGDUJPBSIZFEIUEUIULFEACBOSJKPFBESJLKUKUGFETGCDOJKMQBGDNUACFEN
      MQUCBDACFENKUAUDCEABGDNKM $.
  $}

  ${
    $d x y z $.  $d A z $.  $d B x z $.  $d V z $.  $d ph z $.
    $( Interchange class substitution and restricted quantifier.  (Contributed
       by NM, 1-Mar-2008.)  (Revised by David Abernethy, 22-Feb-2010.) $)
    sbcralt $p |- ( ( A e. V /\ F/_ y A ) ->
           ( [. A / x ]. A. y e. B ph <-> A. y e. B [. A / x ]. ph ) ) $=
      ( vz wral wsbc cv wcel wnfc wa sbcco simpl wsb wceq sbsbc nfcv wb sbequ12
      nfs1v nfral weq ralbidv bitr3i nfnfc1 nfcvd id nfeqd nfan1 dfsbcq2 adantl
      sbie ralbid adantll syl5bb sbcied syl5bbr ) ACEHZBDIUTBGJZIZGDIDFKZCDLZMZ
      ABDIZCEHZUTBGDNVEVBVGGDFVCVDOVBABGPZCEHZVEVADQZMVGVBUTBGPVIUTBGRUTVIBGVHB
      CEBESABGUBUCBGUDAVHCEABGUAUEUNUFVDVJVIVGTVCVDVJMVHVFCEVDVJCCDUGVDCVADVDCV
      AUHVDUIUJUKVJVHVFTVDABGDULUMUOUPUQURUS $.

    $( Interchange class substitution and restricted existential quantifier.
       (Contributed by NM, 1-Mar-2008.)  (Proof shortened by Mario Carneiro,
       13-Oct-2016.)  Obsolete as of 18-Aug-2018.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbcrextOLD $p |- ( ( A e. V /\ F/_ y A ) ->
          ( [. A / x ]. E. y e. B ph <-> E. y e. B [. A / x ]. ph ) ) $=
      ( wcel cvv wnfc wrex wsbc wb elex wa wn wral sbcng adantr bitrd dfrex2 id
      sbcralt nfnfc1 nfcvd nfeld nfan1 adantl ralbid ancoms notbid sbcbii sylan
      3bitr4g ) DFGDHGZCDIZACEJZBDKZABDKZCEJZLDFMUNUONZAOZCEPZOZBDKZUROZCEPZOZU
      QUSUTVDVBBDKZOZVGUNVDVILUOVBBDHQRUTVHVFUTVHVABDKZCEPZVFVABCDEHUBUOUNVKVFL
      UOUNNVJVECEUOUNCCDUCUOCDHUOUAUOCHUDUEUFUNVJVELUOABDHQUGUHUISUJSUPVCBDACET
      UKURCETUMUL $.

    $( Interchange class substitution and restricted existential quantifier.
       (Contributed by NM, 1-Mar-2008.)  (Proof shortened by Mario Carneiro,
       13-Oct-2016.)  (Revised by NM, 18-Aug-2018.) $)
    sbcrext $p |- ( F/_ y A ->
          ( [. A / x ]. E. y e. B ph <-> E. y e. B [. A / x ]. ph ) ) $=
      ( cvv wcel wnfc wrex wsbc wb wa wn wral sbcng adantr sbcralt bitrd dfrex2
      sbcex nfnfc1 nfcvd nfeld nfan1 adantl ralbid ancoms notbid sbcbii 3bitr4g
      id con3i cv wi a1ii rexlimd2 con3rr3 imp 2falsed pm2.61ian ) DFGZCDHZACEI
      ZBDJZABDJZCEIZKVAVBLZAMZCENZMZBDJZVEMZCENZMZVDVFVGVKVIBDJZMZVNVAVKVPKVBVI
      BDFOPVGVOVMVGVOVHBDJZCENZVMVHBCDEFQVBVAVRVMKVBVALVQVLCEVBVACCDUAZVBCDFVBU
      KVBCFUBUCZUDVAVQVLKVBABDFOUEUFUGRUHRVCVJBDACESUIVECESUJVAMZVBLVDVFWAVDMVB
      VDVAVCBDTULPWAVBVFMVBVFVAVBVEVACEVSVTVBCUMEGVEVAUNABDTUOUPUQURUSUT $.
  $}

  ${
    $d y z A $.  $d x B $.  $d x y z $.  $d ph z $.  $d B z $.
    $( Interchange class substitution and restricted quantifier.  (Contributed
       by NM, 15-Nov-2005.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    sbcralg $p |- ( A e. V ->
                 ( [. A / x ]. A. y e. B ph <-> A. y e. B [. A / x ]. ph ) ) $=
      ( wcel wnfc wral wsbc wb nfcv sbcralt mpan2 ) DFGCDHACEIBDJABDJCEIKCDLABC
      DEFMN $.

    $( Interchange class substitution and restricted existential quantifier.
       (Contributed by NM, 15-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
    sbcrex $p |- ( [. A / x ]. E. y e. B ph <-> E. y e. B [. A / x ]. ph ) $=
      ( wnfc wrex wsbc wb nfcv sbcrext ax-mp ) CDFACEGBDHABDHCEGICDJABCDEKL $.

    $( Interchange class substitution and restricted existential quantifier.
       (Contributed by NM, 15-Nov-2005.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.)  Obsolete as of 18-Aug-2018.  Use ~ sbcrex instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbcrexgOLD $p |- ( A e. V ->
                 ( [. A / x ]. E. y e. B ph <-> E. y e. B [. A / x ]. ph ) ) $=
      ( vz wrex wsb wsbc dfsbcq2 wceq rexbidv nfcv nfs1v nfrex weq sbequ12 sbie
      cv vtoclbg ) ACEHZBGIABGIZCEHZUBBDJABDJZCEHGDFUBBGDKGTDLUCUECEABGDKMUBUDB
      GUCBCEBENABGOPBGQAUCCEABGRMSUA $.

    $( Interchange class substitution and restricted uniqueness quantifier.
       (Contributed by NM, 24-Feb-2013.)  (Revised by NM, 18-Aug-2018.) $)
    sbcreu $p |- ( [. A / x ]. E! y e. B ph <-> E! y e. B [. A / x ]. ph ) $=
      ( vz wreu wsbc cvv wcel sbcex reurex rexlimivw syl wsb dfsbcq2 cv reubidv
      wrex wceq nfcv nfs1v nfreu weq sbequ12 sbie vtoclbg pm5.21nii ) ACEGZBDHZ
      DIJZABDHZCEGZUIBDKUMULCESUKULCELULUKCEABDKMNUIBFOABFOZCEGZUJUMFDIUIBFDPFQ
      DTUNULCEABFDPRUIUOBFUNBCEBEUAABFUBUCBFUDAUNCEABFUERUFUGUH $.

    $( Interchange class substitution and restricted uniqueness quantifier.
       (Contributed by NM, 24-Feb-2013.)  Obsolete as of 18-Aug-2018.  Use
       ~ sbcreu instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbcreugOLD $p |- ( A e. V ->
                 ( [. A / x ]. E! y e. B ph <-> E! y e. B [. A / x ]. ph ) ) $=
      ( vz wreu wsb wsbc dfsbcq2 wceq reubidv nfcv nfs1v nfreu weq sbequ12 sbie
      cv vtoclbg ) ACEHZBGIABGIZCEHZUBBDJABDJZCEHGDFUBBGDKGTDLUCUECEABGDKMUBUDB
      GUCBCEBENABGOPBGQAUCCEABGRMSUA $.
  $}

  ${
    $d y w A $.  $d w z B $.  $d w ph $.  $d x y $.  $d w x z $.
    sbcabel.1 $e |- F/_ x B $.
    $( Interchange class substitution and class abstraction.  (Contributed by
       NM, 5-Nov-2005.) $)
    sbcabel $p |- ( A e. V -> ( [. A / x ]. { y | ph } e. B <->
                  { y | [. A / x ]. ph } e. B ) ) $=
      ( vw wcel cvv cab wsbc wb cv wceq wa wex wal syl5bb abeq2 elex sbcan sbcg
      sbcex2 sbcal sbcbig bibi1d bitrd albidv sbcbii 3bitr4g nfcri sbcgf exbidv
      anbi12d df-clel syl ) DFIDJIZACKZEIZBDLZABDLZCKZEIZMDFUAURHNZUSOZVEEIZPZH
      QZBDLZVEVCOZVGPZHQZVAVDVJVHBDLZHQURVMVHHBDUDURVNVLHVNVFBDLZVGBDLZPURVLVFV
      GBDUBURVOVKVPVGURCNVEIZAMZCRZBDLZVQVBMZCRZVOVKVTVRBDLZCRURWBVRCBDUEURWCWA
      CURWCVQBDLZVBMWAVQABDJUFURWDVQVBVQBDJUCUGUHUISVFVSBDACVETUJVBCVETUKVGBDJB
      HEGULUMUOSUNSUTVIBDHUSEUPUJHVCEUPUKUQ $.
  $}

  ${
    $d y A $.  $d x y B $.  $d y ph $.
    $( Restricted quantifier version of Axiom 4 of [Mendelson] p. 69.  This
       provides an axiom for a predicate calculus for a restricted domain.
       This theorem generalizes the unrestricted ~ stdpc4 and ~ spsbc .  See
       also ~ rspsbca and ~ rspcsbela .  (Contributed by NM, 17-Nov-2006.)
       (Proof shortened by Mario Carneiro, 13-Oct-2016.) $)
    rspsbc $p |- ( A e. B -> ( A. x e. B ph -> [. A / x ]. ph ) ) $=
      ( vy wral wsb wcel wsbc cbvralsv dfsbcq2 rspcv syl5bi ) ABDFABEGZEDFCDHAB
      CIZABEDJNOECDABECKLM $.

    $( Restricted quantifier version of Axiom 4 of [Mendelson] p. 69.
       (Contributed by NM, 14-Dec-2005.) $)
    rspsbca $p |- ( ( A e. B /\ A. x e. B ph ) -> [. A / x ]. ph ) $=
      ( wcel wral wsbc rspsbc imp ) CDEABDFABCGABCDHI $.

    $( Existence form of ~ rspsbca .  (Contributed by NM, 29-Feb-2008.)  (Proof
       shortened by Mario Carneiro, 13-Oct-2016.) $)
    rspesbca $p |- ( ( A e. B /\ [. A / x ]. ph ) -> E. x e. B ph ) $=
      ( vy wcel wsbc wa wsb wrex dfsbcq2 rspcev cbvrexsv sylibr ) CDFABCGZHABEI
      ZEDJABDJPOECDABECKLABEDMN $.

    $( Existence form of ~ spsbc .  (Contributed by Mario Carneiro,
       18-Nov-2016.) $)
    spesbc $p |- ( [. A / x ]. ph -> E. x ph ) $=
      ( wsbc cvv wrex wex wcel sbcex rspesbca mpancom rexv sylib ) ABCDZABEFZAB
      GCEHNOABCIABCEJKABLM $.

    spesbcd.1 $e |- ( ph -> [. A / x ]. ps ) $.
    $( form of ~ spsbc .  (Contributed by Mario Carneiro, 9-Feb-2017.) $)
    spesbcd $p |- ( ph -> E. x ps ) $=
      ( wsbc wex spesbc syl ) ABCDFBCGEBCDHI $.
  $}

  ${
    $d x B $.
    sbcth2.1 $e |- ( x e. B -> ph ) $.
    $( A substitution into a theorem.  (Contributed by NM, 1-Mar-2008.)  (Proof
       shortened by Mario Carneiro, 13-Oct-2016.) $)
    sbcth2 $p |- ( A e. B -> [. A / x ]. ph ) $=
      ( wcel wral wsbc rgen rspsbc mpi ) CDFABDGABCHABDEIABCDJK $.
  $}

  ${
    $d x ph $.
    $( Version of ~ ra4 with a dv condition, requiring fewer axioms.  This is
       ~ stdpc5v for a restricted domain.  (Contributed by BJ, 27-Mar-2020.) $)
    ra4v $p |- ( A. x e. A ( ph -> ps ) -> ( ph -> A. x e. A ps ) ) $=
      ( wi wral r19.21v biimpi ) ABECDFABCDFEABCDGH $.
  $}

  ${
    $d x ph $.
    $( Obsolete version of ~ ra4v as of 27-Mar-2020.  (Contributed by BJ,
       26-Mar-2020.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ra4vOLD $p |- ( A. x e. A ( ph -> ps ) -> ( ph -> A. x e. A ps ) ) $=
      ( wi wral cv wcel wal df-ral bi2.04 albii bitri stdpc5v sylbi syl6ibr ) A
      BEZCDFZACGDHZBEZCIZBCDFRATEZCIZAUAERSQEZCIUCQCDJUDUBCSABKLMATCNOBCDJP $.
  $}

  ${
    ra4.1 $e |- F/ x ph $.
    $( Restricted quantifier version of Axiom 5 of [Mendelson] p. 69.  This is
       the axiom ~ stdpc5 of standard predicate calculus for a restricted
       domain.  See ~ ra4v for a version requiring fewer axioms.  (Contributed
       by NM, 16-Jan-2004.)  (Proof shortened by BJ, 27-Mar-2020.) $)
    ra4 $p |- ( A. x e. A ( ph -> ps ) -> ( ph -> A. x e. A ps ) ) $=
      ( wi wral r19.21 biimpi ) ABFCDGABCDGFABCDEHI $.
  $}

  ${
    ra4OLD.1 $e |- F/ x ph $.
    $( Restricted quantifier version of Axiom 5 of [Mendelson] p. 69.  This is
       the axiom ~ stdpc5 of standard predicate calculus for a restricted
       domain.  See ~ ra4v for a version requiring fewer axioms.  (Contributed
       by NM, 16-Jan-2004.)  Obsolete version of ~ ra4 as of 25-Mar-2020.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    ra4OLD $p |- ( A. x e. A ( ph -> ps ) -> ( ph -> A. x e. A ps ) ) $=
      ( wi wral cv wcel wal df-ral bi2.04 albii bitri stdpc5 sylbi syl6ibr ) AB
      FZCDGZACHDIZBFZCJZBCDGSAUAFZCJZAUBFSTRFZCJUDRCDKUEUCCTABLMNAUACEOPBCDKQ
      $.
  $}

  ${
    $d x y A $.
    rmo2.1 $e |- F/ y ph $.
    $( Alternate definition of restricted ""at most one.""  Note that
       ` E* x e. A ph ` is not equivalent to
       ` E. y e. A A. x e. A ( ph -> x = y ) ` (in analogy to ~ reu6 ); to see
       this, let ` A ` be the empty set.  However, one direction of this
       pattern holds; see ~ rmo2i .  (Contributed by NM, 17-Jun-2017.) $)
    rmo2 $p |- ( E* x e. A ph <-> E. y A. x e. A ( ph -> x = y ) ) $=
      ( wrmo cv wcel wa wmo weq wi wal wex wral df-rmo nfv nfan mo2 impexp
      albii df-ral bitr4i exbii 3bitri ) ABDFBGDHZAIZBJUGBCKZLZBMZCNAUHLZBDOZCN
      ABDPUGBCUFACUFCQERSUJULCUJUFUKLZBMULUIUMBUFAUHTUAUKBDUBUCUDUE $.

    $( Condition implying restricted ""at most one.""  (Contributed by NM,
       17-Jun-2017.) $)
    rmo2i $p |- ( E. y e. A A. x e. A ( ph -> x = y ) -> E* x e. A ph ) $=
      ( weq wi wral wrex wex wrmo rexex rmo2 sylibr ) ABCFGBDHZCDIOCJABDKOCDLAB
      CDEMN $.

    $( Restricted ""at most one"" using explicit substitution.  (Contributed by
       NM, 4-Nov-2012.)  (Revised by NM, 16-Jun-2017.) $)
    rmo3 $p |- ( E* x e. A ph <->
               A. x e. A A. y e. A ( ( ph /\ [ y / x ] ph ) -> x = y ) ) $=
      ( wrmo cv wcel wa wmo wsb wi wral anbi1i bitri 3bitri impexp albii df-ral
      wal weq df-rmo sban clelsb3 anbi2i an4 ancom r19.21v 3bitr2i nfv nfan mo3
      imbi1i 3bitr4i ) ABDFBGDHZAIZBJZAABCKZIZBCUAZLZCDMZBDMZABDUBUPUPBCKZIZUTL
      ZCTZBTUOVBLZBTUQVCVGVHBVGCGDHZUOVALZLZCTVJCDMVHVFVKCVFVIUOIZUSIZUTLVLVALV
      KVEVMUTVEUPVIURIZIUOVIIZUSIVMVDVNUPVDUOBCKZURIVNUOABCUCVPVIURCBDUDNOUEUOA
      VIURUFVOVLUSUOVIUGNPUMVLUSUTQVIUOVAQPRVJCDSUOVACDUHUIRUPBCUOACUOCUJEUKULV
      BBDSUNO $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d y ph $.  $d x y ps $.  $d x ch $.
    rmoi.b $e |- ( x = B -> ( ph <-> ps ) ) $.
    rmoi.c $e |- ( x = C -> ( ph <-> ch ) ) $.
    $( Consequence of ""at most one"", using implicit substitution.  (Contributed
       by NM, 2-Jan-2015.)  (Revised by NM, 16-Jun-2017.) $)
    rmob $p |- ( ( E* x e. A ph /\ ( B e. A /\ ps ) ) ->
        ( B = C <-> ( C e. A /\ ch ) ) ) $=
      ( wrmo cv wcel wa wmo wceq wb df-rmo simprl eleq1 anbi12d syl5ibcom simpl
      wi a1i simplrl simpr simpll simplrr mob syl212anc ex pm5.21ndd sylanb ) A
      DEJDKZELZAMZDNZFELZBMZFGOZGELZCMZPZADEQUQUSMZVAUTVBVDURUTVAUQURBRFGESUAVB
      VAUCVDVACUBUDVDVAVCVDVAMURVAUQURBVCUQURBVAUEZVDVAUFUQUSVAUGVEUQURBVAUHUPU
      SVBDFGEEUNFOUOURABUNFESHTUNGOUOVAACUNGESITUIUJUKULUM $.

    $( Consequence of ""at most one"", using implicit substitution.  (Contributed
       by NM, 4-Nov-2012.)  (Revised by NM, 16-Jun-2017.) $)
    rmoi $p |- ( ( E* x e. A ph
          /\ ( B e. A /\ ps ) /\ ( C e. A /\ ch ) ) -> B = C ) $=
      ( wrmo wcel wa wceq rmob biimp3ar ) ADEJFEKBLFGMGEKCLABCDEFGHINO $.
  $}

  ${
    $d A x $.  $d B x $.  $d ch x $.
    rmoi2.1 $e |- ( x = B -> ( ps <-> ch ) ) $.
    rmoi2.2 $e |- ( ph -> B e. A ) $.
    rmoi2.3 $e |- ( ph -> E* x e. A ps ) $.
    rmoi2.4 $e |- ( ph -> x e. A ) $.
    rmoi2.5 $e |- ( ph -> ps ) $.
    $( Consequence of ""restricted at most one.""  (Contributed by Thierry
       Arnoux, 9-Dec-2019.) $)
    rmob2 $p |- ( ph -> ( x = B <-> ch ) ) $=
      ( cv wceq wcel wa wmo wb wrmo df-rmo sylib eleq1 mob2 syl112anc biantrurd
      anbi12d bitr4d ) ADLZFMZFENZCOZCAUIUGENZBOZDPZUKBUHUJQHABDERUMIBDESTJKULU
      JDFEUHUKUIBCUGFEUAGUEUBUCAUICHUDUF $.

    rmoi2.6 $e |- ( ph -> ch ) $.
    $( Consequence of ""restricted at most one.""  (Contributed by Thierry
       Arnoux, 9-Dec-2019.) $)
    rmoi2 $p |- ( ph -> x = B ) $=
      ( cv wceq rmob2 mpbird ) ADMFNCLABCDEFGHIJKOP $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Proper substitution of classes for sets into classes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c [_ $.  $( Underlined left bracket $)
  $c ]_ $.  $( Underlined right bracket $)

  $( Extend class notation to include the proper substitution of a class for a
     set into another class. $)
  csb $a class [_ A / x ]_ B $.

  $( Indicate that ""x"" is not bound in ""A"" in the definition of csb.
     This is similar to $d x A $. $)
  $( $j free_var_in 'csb' with 'A' 'x'; $)

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( Define the proper substitution of a class for a set into another class.
       The underlined brackets distinguish it from the substitution into a wff,
       ~ wsbc , to prevent ambiguity.  Theorem ~ sbcel1g shows an example of
       how ambiguity could arise if we didn't use distinguished brackets.
       Theorem ~ sbccsb recreates substitution into a wff from this
       definition.  (Contributed by NM, 10-Nov-2005.) $)
    df-csb $a |- [_ A / x ]_ B = { y | [. A / x ]. y e. B } $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y $.
    $( Alternate expression for the proper substitution into a class, without
       referencing substitution into a wff.  Note that ` x ` can be free in
       ` B ` but cannot occur in ` A ` .  (Contributed by NM, 2-Dec-2013.) $)
    csb2 $p |- [_ A / x ]_ B = { y | E. x ( x = A /\ y e. B ) } $=
      ( csb cv wcel wsbc cab wceq wa wex df-csb sbc5 abbii eqtri ) ACDEBFDGZACH
      ZBIAFCJQKALZBIABCDMRSBQACNOP $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( Analog of ~ dfsbcq for proper substitution into a class.  (Contributed
       by NM, 10-Nov-2005.) $)
    csbeq1 $p |- ( A = B -> [_ A / x ]_ C = [_ B / x ]_ C ) $=
      ( vy wceq cv wcel wsbc cab csb dfsbcq abbidv df-csb 3eqtr4g ) BCFZEGDHZAB
      IZEJQACIZEJABDKACDKPRSEQABCLMAEBDNAECDNO $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( Substituting into equivalent classes gives equivalent results.
       (Contributed by Giovanni Mascellani, 9-Apr-2018.) $)
    csbeq2 $p |- ( A. x B = C -> [_ A / x ]_ B = [_ A / x ]_ C ) $=
      ( vy wceq wal cv wcel cab csb wb eleq2 alimi sbcbi2 abbidv df-csb 3eqtr4g
      wsbc syl ) CDFZAGZEHZCIZABSZEJUCDIZABSZEJABCKABDKUBUEUGEUBUDUFLZAGUEUGLUA
      UHACDUCMNUDUFABOTPAEBCQAEBDQR $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z C $.  $d z D $.
    cbvcsb.1 $e |- F/_ y C $.
    cbvcsb.2 $e |- F/_ x D $.
    cbvcsb.3 $e |- ( x = y -> C = D ) $.
    $( Change bound variables in a class substitution.  Interestingly, this
       does not require any bound variable conditions on ` A ` .  (Contributed
       by Jeff Hankins, 13-Sep-2009.)  (Revised by Mario Carneiro,
       11-Dec-2016.) $)
    cbvcsb $p |- [_ A / x ]_ C = [_ A / y ]_ D $=
      ( vz cv wcel wsbc cab csb nfcri weq eleq2d cbvsbc abbii df-csb 3eqtr4i )
      IJZDKZACLZIMUBEKZBCLZIMACDNBCENUDUFIUCUEABCBIDFOAIEGOABPDEUBHQRSAICDTBICE
      TUA $.
  $}

  ${
    $d x y $.  $d z A $.  $d y z B $.  $d x z C $.
    cbvcsbv.1 $e |- ( x = y -> B = C ) $.
    $( Change the bound variable of a proper substitution into a class using
       implicit substitution.  (Contributed by NM, 30-Sep-2008.)  (Revised by
       Mario Carneiro, 13-Oct-2016.) $)
    cbvcsbv $p |- [_ A / x ]_ B = [_ A / y ]_ C $=
      ( nfcv cbvcsb ) ABCDEBDGAEGFH $.
  $}

  ${
    csbeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for proper substitution into a class.  (Contributed
       by NM, 3-Dec-2005.) $)
    csbeq1d $p |- ( ph -> [_ A / x ]_ C = [_ B / x ]_ C ) $=
      ( wceq csb csbeq1 syl ) ACDGBCEHBDEHGFBCDEIJ $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Analog of ~ sbid for proper substitution into a class.  (Contributed by
       NM, 10-Nov-2005.) $)
    csbid $p |- [_ x / x ]_ A = A $=
      ( vy cv csb wcel wsbc cab df-csb sbcid abbii abid2 3eqtri ) AADZBECDBFZAN
      GZCHOCHBACNBIPOCOAJKCBLM $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( Equality theorem for proper substitution into a class.  (Contributed by
       NM, 10-Nov-2005.) $)
    csbeq1a $p |- ( x = A -> B = [_ A / x ]_ B ) $=
      ( cv wceq csb csbid csbeq1 syl5eqr ) ADZBECAJCFABCFACGAJBCHI $.
  $}

  ${
    $d z A $.  $d y z B $.  $d z V $.  $d x z $.
    $( Composition law for chained substitutions into a class.  (Contributed by
       NM, 10-Nov-2005.) $)
    csbco $p |- [_ A / y ]_ [_ y / x ]_ B = [_ A / x ]_ B $=
      ( vz cv csb wcel wsbc cab df-csb abeq2i sbcbii sbcco bitri abbii 3eqtr4i
      ) EFZABFZDGZHZBCIZEJRDHZACIZEJBCTGACDGUBUDEUBUCASIZBCIUDUAUEBCUEETAESDKLM
      UCABCNOPBECTKAECDKQ $.
  $}

  ${
    $d y A $.  $d y B $.  $d y V $.  $d x y $.
    $( Substitution doesn't affect a constant ` B ` (in which ` x ` is not
       free).  (Contributed by Mario Carneiro, 14-Oct-2016.) $)
    csbtt $p |- ( ( A e. V /\ F/_ x B ) -> [_ A / x ]_ B = B ) $=
      ( vy wcel wnfc wa csb cv wsbc cab df-csb wnf wb nfcr sbctt sylan2 abbi1dv
      syl5eq ) BDFZACGZHZABCIEJCFZABKZELCAEBCMUCUEECUBUAUDANUEUDOAECPUDABDQRST
      $.
  $}

  ${
    csbconstgf.1 $e |- F/_ x B $.
    $( Substitution doesn't affect a constant ` B ` (in which ` x ` is not
       free).  (Contributed by NM, 10-Nov-2005.) $)
    csbconstgf $p |- ( A e. V -> [_ A / x ]_ B = B ) $=
      ( wcel wnfc csb wceq csbtt mpan2 ) BDFACGABCHCIEABCDJK $.
  $}

  ${
    $d A y $.  $d B x y $.  $d V y $.
    $( Substitution doesn't affect a constant ` B ` (in which ` x ` does not
       occur). ~ csbconstgf with distinct variable requirement.  (Contributed
       by Alan Sare, 22-Jul-2012.) $)
    csbconstg $p |- ( A e. V -> [_ A / x ]_ B = B ) $=
      ( nfcv csbconstgf ) ABCDACEF $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y ph $.
    nfcsb1d.1 $e |- ( ph -> F/_ x A ) $.
    $( Bound-variable hypothesis builder for substitution into a class.
       (Contributed by Mario Carneiro, 12-Oct-2016.) $)
    nfcsb1d $p |- ( ph -> F/_ x [_ A / x ]_ B ) $=
      ( vy csb cv wcel wsbc cab df-csb nfv nfsbc1d nfabd nfcxfrd ) ABBCDGFHDIZB
      CJZFKBFCDLARBFAFMAQBCENOP $.
  $}

  ${
    $d y z A $.  $d z B $.  $d x y z $.
    nfcsb1.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for substitution into a class.
       (Contributed by Mario Carneiro, 12-Oct-2016.) $)
    nfcsb1 $p |- F/_ x [_ A / x ]_ B $=
      ( csb wnfc wtru a1i nfcsb1d trud ) AABCEFGABCABFGDHIJ $.
  $}

  ${
    $d x y A $.
    $( Bound-variable hypothesis builder for substitution into a class.
       (Contributed by NM, 17-Aug-2006.)  (Revised by Mario Carneiro,
       12-Oct-2016.) $)
    nfcsb1v $p |- F/_ x [_ A / x ]_ B $=
      ( nfcv nfcsb1 ) ABCABDE $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z B $.  $d z ph $.
    nfcsbd.1 $e |- F/ y ph $.
    nfcsbd.2 $e |- ( ph -> F/_ x A ) $.
    nfcsbd.3 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of ~ nfcsb .  (Contributed by NM, 21-Nov-2005.)
       (Revised by Mario Carneiro, 12-Oct-2016.) $)
    nfcsbd $p |- ( ph -> F/_ x [_ A / y ]_ B ) $=
      ( vz csb cv wcel wsbc cab df-csb nfv nfcrd nfsbcd nfabd nfcxfrd ) ABCDEJI
      KELZCDMZINCIDEOAUBBIAIPAUABCDFGABIEHQRST $.
  $}

  ${
    nfcsb.1 $e |- F/_ x A $.
    nfcsb.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for substitution into a class.
       (Contributed by Mario Carneiro, 12-Oct-2016.) $)
    nfcsb $p |- F/_ x [_ A / y ]_ B $=
      ( csb wnfc wtru nftru a1i nfcsbd trud ) ABCDGHIABCDBJACHIEKADHIFKLM $.
  $}

  ${
    $d x y $.
    csbhypf.1 $e |- F/_ x A $.
    csbhypf.2 $e |- F/_ x C $.
    csbhypf.3 $e |- ( x = A -> B = C ) $.
    $( Introduce an explicit substitution into an implicit substitution
       hypothesis.  See ~ sbhypf for class substitution version.  (Contributed
       by NM, 19-Dec-2008.) $)
    csbhypf $p |- ( y = A -> [_ y / x ]_ B = C ) $=
      ( cv wceq wi csb nfeq2 nfcsb1v nfeq nfim eqeq1 csbeq1a eqeq1d imbi12d
      chvar ) AIZCJZDEJZKBIZCJZAUEDLZEJZKABUFUHAAUECFMAUGEAUEDNGOPUBUEJZUCUFUDU
      HUBUECQUIDUGEAUEDRSTHUA $.
  $}

  ${
    $d x A $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Closed theorem version of ~ csbiegf .)  (Contributed by NM,
       11-Nov-2005.) $)
    csbiebt $p |- ( ( A e. V /\ F/_ x C ) ->
                 ( A. x ( x = A -> B = C ) <-> [_ A / x ]_ B = C ) ) $=
      ( wcel cvv wnfc cv wceq wi wal csb wb elex wa wsbc adantl a1i nfeqd spsbc
      adantr simpl biimt csbeq1a eqeq1d bitr3d nfv nfnfc1 nfcsb1v simpr sbciedf
      nfan sylibd id nfan1 biimprcd alrimi ex impbid sylan ) BEFBGFZADHZAIBJZCD
      JZKZALZABCMZDJZNBEOVBVCPZVGVIVJVGVFABQZVIVBVGVKKVCVFABGUAUBVJVFVIABGVBVCU
      CVDVFVINVJVDVEVFVIVDVEUDVDCVHDABCUEUFZUGRVBVCAVBAUHADUIZUMVJAVHDAVHHZVJAB
      CUJZSVBVCUKTULUNVCVIVGKVBVCVIVGVCVIPVFAVCVIAVMVCAVHDVNVCVOSVCUOTUPVIVFVCV
      DVEVIVLUQRURUSRUTVA $.

    csbiedf.1 $e |- F/ x ph $.
    csbiedf.2 $e |- ( ph -> F/_ x C ) $.
    csbiedf.3 $e |- ( ph -> A e. V ) $.
    csbiedf.4 $e |- ( ( ph /\ x = A ) -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by Mario Carneiro, 13-Oct-2016.) $)
    csbiedf $p |- ( ph -> [_ A / x ]_ B = C ) $=
      ( cv wceq wi wal csb ex alrimi wcel wnfc wb csbiebt syl2anc mpbid ) ABKCL
      ZDELZMZBNZBCDOELZAUFBGAUDUEJPQACFRBESUGUHTIHBCDEFUAUBUC $.
  $}

  ${
    $d x z A $.  $d z B $.  $d y C $.  $d x y $.
    csbieb.1 $e |- A e. _V $.
    csbieb.2 $e |- F/_ x C $.
    $( Bidirectional conversion between an implicit class substitution
       hypothesis ` x = A -> B = C ` and its explicit substitution equivalent.
       (Contributed by NM, 2-Mar-2008.) $)
    csbieb $p |- ( A. x ( x = A -> B = C ) <-> [_ A / x ]_ B = C ) $=
      ( cvv wcel wnfc cv wceq wi wal csb wb csbiebt mp2an ) BGHADIAJBKCDKLAMABC
      NDKOEFABCDGPQ $.
  $}

  ${
    $d a x A $.  $d a B $.  $d a y C $.  $d x y $.
    csbiebg.2 $e |- F/_ x C $.
    $( Bidirectional conversion between an implicit class substitution
       hypothesis ` x = A -> B = C ` and its explicit substitution equivalent.
       (Contributed by NM, 24-Mar-2013.)  (Revised by Mario Carneiro,
       11-Dec-2016.) $)
    csbiebg $p |- ( A e. V ->
          ( A. x ( x = A -> B = C ) <-> [_ A / x ]_ B = C ) ) $=
      ( va cv wceq wal csb eqeq2 imbi1d albidv csbeq1 eqeq1d vex csbieb vtoclbg
      wi ) AHZGHZIZCDIZTZAJAUBCKZDIUABIZUDTZAJABCKZDIGBEUBBIZUEUHAUJUCUGUDUBBUA
      LMNUJUFUIDAUBBCOPAUBCDGQFRS $.
  $}

  ${
    $d x y A $.  $d y C $.  $d x y V $.
    csbiegf.1 $e |- ( A e. V -> F/_ x C ) $.
    csbiegf.2 $e |- ( x = A -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by NM, 11-Nov-2005.)  (Revised by Mario Carneiro,
       13-Oct-2016.) $)
    csbiegf $p |- ( A e. V -> [_ A / x ]_ B = C ) $=
      ( wcel cv wceq wi wal csb ax-gen wnfc wb csbiebt mpdan mpbii ) BEHZAIBJCD
      JKZALZABCMDJZUAAGNTADOUBUCPFABCDEQRS $.
  $}

  ${
    $d x A $.  $d y C $.  $d x y $.
    csbief.1 $e |- A e. _V $.
    csbief.2 $e |- F/_ x C $.
    csbief.3 $e |- ( x = A -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by NM, 26-Nov-2005.)  (Revised by Mario Carneiro,
       13-Oct-2016.) $)
    csbief $p |- [_ A / x ]_ B = C $=
      ( cvv wcel csb wceq wnfc a1i csbiegf ax-mp ) BHIZABCJDKEABCDHADLPFMGNO $.
  $}

  ${
    $d x A $.  $d x C $.
    csbie.1 $e |- A e. _V $.
    csbie.2 $e |- ( x = A -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by AV, 2-Dec-2019.) $)
    csbie $p |- [_ A / x ]_ B = C $=
      ( nfcv csbief ) ABCDEADGFH $.
  $}

  ${
    $d x A $.  $d x y C $.  $d x y ph $.
    csbied.1 $e |- ( ph -> A e. V ) $.
    csbied.2 $e |- ( ( ph /\ x = A ) -> B = C ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by Mario Carneiro, 2-Dec-2014.)  (Revised by Mario
       Carneiro, 13-Oct-2016.) $)
    csbied $p |- ( ph -> [_ A / x ]_ B = C ) $=
      ( nfv nfcvd csbiedf ) ABCDEFABIABEJGHK $.
  $}

  ${
    $d x A $.  $d x ph $.  $d x D $.
    csbied2.1 $e |- ( ph -> A e. V ) $.
    csbied2.2 $e |- ( ph -> A = B ) $.
    csbied2.3 $e |- ( ( ph /\ x = B ) -> C = D ) $.
    $( Conversion of implicit substitution to explicit class substitution,
       deduction form.  (Contributed by Mario Carneiro, 2-Jan-2017.) $)
    csbied2 $p |- ( ph -> [_ A / x ]_ C = D ) $=
      ( cv wceq id sylan9eqr syldan csbied ) ABCEFGHABKZCLZQDLEFLRAQCDRMINJOP
      $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d z C $.  $d x y z D $.
    csbie2t.1 $e |- A e. _V $.
    csbie2t.2 $e |- B e. _V $.
    $( Conversion of implicit substitution to explicit substitution into a
       class (closed form of ~ csbie2 ).  (Contributed by NM, 3-Sep-2007.)
       (Revised by Mario Carneiro, 13-Oct-2016.) $)
    csbie2t $p |- ( A. x A. y ( ( x = A /\ y = B ) -> C = D ) ->
                  [_ A / x ]_ [_ B / y ]_ C = D ) $=
      ( cv wceq wa wi wal csb cvv nfa1 nfcvd wcel a1i csbiedf nfa2 nfv nfan 2sp
      impl ) AICJZBIDJZKEFJZLZBMZAMZACBDENFOUJAPUKAFQCORUKGSUKUFKZBDEFOUKUFBUIB
      AUAUFBUBUCULBFQDORULHSUKUFUGUHUIABUDUETT $.

    csbie2.3 $e |- ( ( x = A /\ y = B ) -> C = D ) $.
    $( Conversion of implicit substitution to explicit substitution into a
       class.  (Contributed by NM, 27-Aug-2007.) $)
    csbie2 $p |- [_ A / x ]_ [_ B / y ]_ C = D $=
      ( cv wceq wa wi wal csb gen2 csbie2t ax-mp ) AJCKBJDKLEFKMZBNANACBDEOOFKS
      ABIPABCDEFGHQR $.
  $}

  ${
    $d x y z $.  $d A y z $.  $d B y z $.  $d C x $.  $d D y z $.  $d V z $.
    csbie2g.1 $e |- ( x = y -> B = C ) $.
    csbie2g.2 $e |- ( y = A -> C = D ) $.
    $( Conversion of implicit substitution to explicit class substitution.
       This version of ~ csbie avoids a disjointness condition on ` x , A ` and
       ` x , D ` by substituting twice.  (Contributed by Mario Carneiro,
       11-Nov-2016.) $)
    csbie2g $p |- ( A e. V -> [_ A / x ]_ B = D ) $=
      ( vz wcel csb cv wsbc cab df-csb wceq eleq2d sbcie2g abbi1dv syl5eq ) CGK
      ZACDLJMZDKZACNZJOFAJCDPUBUEJFUDUCEKUCFKABCGAMBMZQDEUCHRUFCQEFUCIRSTUA $.
  $}

  ${
    $d x v z $.  $d y v z $.  $d A w v z $.  $d B w v z $.  $d ph v z $.
    $d ps v z $.
    cbvralcsf.1 $e |- F/_ y A $.
    cbvralcsf.2 $e |- F/_ x B $.
    cbvralcsf.3 $e |- F/ y ph $.
    cbvralcsf.4 $e |- F/ x ps $.
    cbvralcsf.5 $e |- ( x = y -> A = B ) $.
    cbvralcsf.6 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( A more general version of ~ cbvralf that doesn't require ` A ` and ` B `
       to be distinct from ` x ` or ` y ` .  Changes bound variables using
       implicit substitution.  (Contributed by Andrew Salmon, 13-Jul-2011.) $)
    cbvralcsf $p |- ( A. x e. A ph <-> A. y e. B ps ) $=
      ( vz vv cv wcel wi wal wsbc nfcri wral csb nfv nfcsb1v nfsbc1v id csbeq1a
      nfim weq eleq12d sbceq1a imbi12d cbval nfcv nfcsb nfsbc csbeq1 cab df-csb
      eleq2d sbie sbsbc bitr3i abbi2i eqtr4i syl6eq dfsbcq syl6bb bitri 3bitr4i
      wsb df-ral ) COZEPZAQZCRZDOZFPZBQZDRZACEUABDFUAVPMOZCWAEUBZPZACWASZQZMRVT
      VOWECMVOMUCWCWDCCMWBCWAEUDTACWAUEUHCMUIZVNWCAWDWFVMWAEWBWFUFCWAEUGUJACWAU
      KULUMWEVSMDWCWDDDMWBDCWAEDWAUNZGUOTADCWAWGIUPUHVSMUCMDUIZWCVRWDBWHWAVQWBF
      WHUFWHWBCVQEUBZFCWAVQEUQWINOZEPZCVQSZNURFCNVQEUSWLNFWJFPZWKCDVKWLWKWMCDCN
      FHTCDUIEFWJKUTVAWKCDVBVCVDVEVFUJWHWDACVQSZBACWAVQVGWNACDVKBACDVBABCDJLVAV
      CVHULUMVIACEVLBDFVLVJ $.

    $( A more general version of ~ cbvrexf that has no distinct variable
       restrictions.  Changes bound variables using implicit substitution.
       (Contributed by Andrew Salmon, 13-Jul-2011.)  (Proof shortened by Mario
       Carneiro, 7-Dec-2014.) $)
    cbvrexcsf $p |- ( E. x e. A ph <-> E. y e. B ps ) $=
      ( wn wral wrex nfn weq notbid cbvralcsf dfrex2 notbii 3bitr4i ) AMZCENZMB
      MZDFNZMACEOBDFOUDUFUCUECDEFGHADIPBCJPKCDQABLRSUAACETBDFTUB $.

    $( A more general version of ~ cbvreuv that has no distinct variable
       restrictions.  Changes bound variables using implicit substitution.
       (Contributed by Andrew Salmon, 13-Jul-2011.) $)
    cbvreucsf $p |- ( E! x e. A ph <-> E! y e. B ps ) $=
      ( vz vv cv wcel wa weu wsb nfcri wreu csb nfv nfcsb1v nfan weq id csbeq1a
      nfs1v eleq12d sbequ12 anbi12d cbveu nfcv nfcsb nfsb csbeq1 cab wsbc sbsbc
      abbii eleq2d sbie bicomi abbi2i df-csb 3eqtr4ri syl6eq sbequ syl6bb bitri
      df-reu 3bitr4i ) COZEPZAQZCRZDOZFPZBQZDRZACEUABDFUAVQMOZCWBEUBZPZACMSZQZM
      RWAVPWFCMVPMUCWDWECCMWCCWBEUDTACMUIUECMUFZVOWDAWEWGVNWBEWCWGUGCWBEUHUJACM
      UKULUMWFVTMDWDWEDDMWCDCWBEDWBUNGUOTACMDIUPUEVTMUCMDUFZWDVSWEBWHWBVRWCFWHU
      GWHWCCVREUBZFCWBVREUQNOZEPZCDSZNURWKCVRUSZNURFWIWLWMNWKCDUTVAWLNFWLWJFPZW
      KWNCDCNFHTCDUFEFWJKVBVCVDVECNVREVFVGVHUJWHWEACDSBAMDCVIABCDJLVCVJULUMVKAC
      EVLBDFVLVM $.

    $( A more general version of ~ cbvrab with no distinct variable
       restrictions.  (Contributed by Andrew Salmon, 13-Jul-2011.) $)
    cbvrabcsf $p |- { x e. A | ph } = { y e. B | ps } $=
      ( vz vv cv wcel wa cab wsb nfcri crab csb nfv nfcsb1v nfan weq id csbeq1a
      nfs1v eleq12d sbequ12 anbi12d cbvab nfcv nfcsb csbeq1 df-csb eleq2d sbsbc
      nfsb wsbc bitr3i abbi2i eqtr4i syl6eq sbequ syl6bb eqtri df-rab 3eqtr4i
      sbie ) COZEPZAQZCRZDOZFPZBQZDRZACEUABDFUAVOMOZCVTEUBZPZACMSZQZMRVSVNWDCMV
      NMUCWBWCCCMWACVTEUDTACMUIUECMUFZVMWBAWCWEVLVTEWAWEUGCVTEUHUJACMUKULUMWDVR
      MDWBWCDDMWADCVTEDVTUNGUOTACMDIUTUEVRMUCMDUFZWBVQWCBWFVTVPWAFWFUGWFWACVPEU
      BZFCVTVPEUPWGNOZEPZCVPVAZNRFCNVPEUQWJNFWHFPZWICDSWJWIWKCDCNFHTCDUFEFWHKUR
      VKWICDUSVBVCVDVEUJWFWCACDSBAMDCVFABCDJLVKVGULUMVHACEVIBDFVIVJ $.
  $}

  ${
    $d A y $.  $d ps y $.  $d B x $.  $d ch x $.
    cbvralv2.1 $e |- ( x = y -> ( ps <-> ch ) ) $.
    cbvralv2.2 $e |- ( x = y -> A = B ) $.
    $( Rule used to change the bound variable in a restricted universal
       quantifier with implicit substitution which also changes the quantifier
       domain.  (Contributed by David Moews, 1-May-2017.) $)
    cbvralv2 $p |- ( A. x e. A ps <-> A. y e. B ch ) $=
      ( nfcv nfv cbvralcsf ) ABCDEFDEICFIADJBCJHGK $.

    $( Rule used to change the bound variable in a restricted existential
       quantifier with implicit substitution which also changes the quantifier
       domain.  (Contributed by David Moews, 1-May-2017.) $)
    cbvrexv2 $p |- ( E. x e. A ps <-> E. y e. B ch ) $=
      ( nfcv nfv cbvrexcsf ) ABCDEFDEICFIADJBCJHGK $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Define basic set operations and relations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new symbols. $)
  $c \ $. $( Backslash (difference) $)
  $c u. $. $( Cup (union) $)
  $c i^i $. $( Cap (intersection) $)
  $c C_ $. $( Subclass or subset symbol $)
  $c C. $. $( Proper subclass or subset symbol $)

  $( Extend class notation to include class difference (read:  "" ` A ` minus
     ` B ` ""). $)
  cdif $a class ( A \ B ) $.

  $( Extend class notation to include union of two classes (read:  "" ` A `
     union ` B ` ""). $)
  cun $a class ( A u. B ) $.

  $( Extend class notation to include the intersection of two classes
     (read:  "" ` A ` intersect ` B ` ""). $)
  cin $a class ( A i^i B ) $.

  $( Extend wff notation to include the subclass relation.  This is
     read "" ` A ` is a subclass of ` B ` "" or "" ` B ` includes ` A ` .""  When
     ` A ` exists as a set, it is also read "" ` A ` is a subset of ` B ` ."" $)
  wss $a wff A C_ B $.

  $( Extend wff notation with proper subclass relation. $)
  wpss $a wff A C. B $.

  ${
    $d x A $.  $d x B $.  $d y A $.  $d y B $.  $d z x $.  $d z y $.  $d z A $.
    $d z B $.
    $( Soundness justification theorem for ~ df-dif .  (Contributed by Rodolfo
       Medina, 27-Apr-2010.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    difjust $p |- { x | ( x e. A /\ -. x e. B ) }
                  = { y | ( y e. A /\ -. y e. B ) } $=
      ( vz cv wcel wn wa cab weq eleq1 notbid anbi12d cbvabv eqtri ) AFZCGZQDGZ
      HZIZAJEFZCGZUBDGZHZIZEJBFZCGZUGDGZHZIZBJUAUFAEAEKZRUCTUEQUBCLULSUDQUBDLMN
      OUFUKEBEBKZUCUHUEUJUBUGCLUMUDUIUBUGDLMNOP $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Define class difference, also called relative complement.  Definition
       5.12 of [TakeutiZaring] p. 20.  For example,
       ` ( { 1 , 3 } \ { 1 , 8 } ) = { 3 } ` ( ~ ex-dif ).  Contrast this
       operation with union ` ( A u. B ) ` ( ~ df-un ) and intersection
       ` ( A i^i B ) ` ( ~ df-in ).  Several notations are used in the
       literature; we chose the ` \ ` convention used in Definition 5.3 of
       [Eisenberg] p. 67 instead of the more common minus sign to reserve the
       latter for later use in, e.g., arithmetic.  We will use the
       terminology "" ` A ` excludes ` B ` "" to mean ` A \ B ` .  We will
       use "" ` B ` is removed from ` A ` "" to mean ` A \ { B } ` i.e. the
       removal of an element or equivalently the exclusion of a singleton.
       (Contributed by NM, 29-Apr-1994.) $)
    df-dif $a |- ( A \ B ) = { x | ( x e. A /\ -. x e. B ) } $.
  $}

  ${
    $d x A $.  $d x B $.  $d y A $.  $d y B $.  $d z x $.  $d z y $.  $d z A $.
    $d z B $.
    $( Soundness justification theorem for ~ df-un .  (Contributed by Rodolfo
       Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    unjust $p |- { x | ( x e. A \/ x e. B ) } = { y | ( y e. A \/ y e. B ) } $=
      ( vz cv wcel wo cab weq eleq1 orbi12d cbvabv eqtri ) AFZCGZODGZHZAIEFZCGZ
      SDGZHZEIBFZCGZUCDGZHZBIRUBAEAEJPTQUAOSCKOSDKLMUBUFEBEBJTUDUAUESUCCKSUCDKL
      MN $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Define the union of two classes.  Definition 5.6 of [TakeutiZaring]
       p. 16.  For example, ` ( { 1 , 3 } u. { 1 , 8 } ) = { 1 , 3 , 8 } `
       ( ~ ex-un ).  Contrast this operation with difference ` ( A \ B ) `
       ( ~ df-dif ) and intersection ` ( A i^i B ) ` ( ~ df-in ).  For an
       alternate definition in terms of class difference, requiring no dummy
       variables, see ~ dfun2 .  For union defined in terms of intersection,
       see ~ dfun3 .  (Contributed by NM, 23-Aug-1993.) $)
    df-un $a |- ( A u. B ) = { x | ( x e. A \/ x e. B ) } $.
  $}

  ${
    $d x A $.  $d x B $.  $d y A $.  $d y B $.  $d z x $.  $d z y $.  $d z A $.
    $d z B $.
    $( Soundness justification theorem for ~ df-in .  (Contributed by Rodolfo
       Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    injust $p |- { x | ( x e. A /\ x e. B ) }
                  = { y | ( y e. A /\ y e. B ) } $=
      ( vz cv wcel wa cab weq eleq1 anbi12d cbvabv eqtri ) AFZCGZODGZHZAIEFZCGZ
      SDGZHZEIBFZCGZUCDGZHZBIRUBAEAEJPTQUAOSCKOSDKLMUBUFEBEBJTUDUAUESUCCKSUCDKL
      MN $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Define the intersection of two classes.  Definition 5.6 of
       [TakeutiZaring] p. 16.  For example,
       ` ( { 1 , 3 } i^i { 1 , 8 } ) = { 1 } ` ( ~ ex-in ).  Contrast this
       operation with union ` ( A u. B ) ` ( ~ df-un ) and difference
       ` ( A \ B ) ` ( ~ df-dif ).  For alternate definitions in terms of class
       difference, requiring no dummy variables, see ~ dfin2 and ~ dfin4 .  For
       intersection defined in terms of union, see ~ dfin3 .  (Contributed by
       NM, 29-Apr-1994.) $)
    df-in $a |- ( A i^i B ) = { x | ( x e. A /\ x e. B ) } $.

    $( Alternate definition for the intersection of two classes.  (Contributed
       by NM, 6-Jul-2005.) $)
    dfin5 $p |- ( A i^i B ) = { x e. A | x e. B } $=
      ( cin cv wcel wa cab crab df-in df-rab eqtr4i ) BCDAEZBFMCFZGAHNABIABCJNA
      BKL $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Alternate definition of class difference.  (Contributed by NM,
       25-Mar-2004.) $)
    dfdif2 $p |- ( A \ B ) = { x e. A | -. x e. B } $=
      ( cdif cv wcel wn wa cab crab df-dif df-rab eqtr4i ) BCDAEZBFNCFGZHAIOABJ
      ABCKOABLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Expansion of membership in a class difference.  (Contributed by NM,
       29-Apr-1994.) $)
    eldif $p |- ( A e. ( B \ C ) <-> ( A e. B /\ -. A e. C ) ) $=
      ( vx cdif wcel cvv wn wa elex adantr cv wceq notbid anbi12d df-dif elab2g
      eleq1 pm5.21nii ) ABCEZFAGFZABFZACFZHZIZATJUBUAUDABJKDLZBFZUFCFZHZIUEDATG
      UFAMZUGUBUIUDUFABRUJUHUCUFACRNODBCPQS $.
  $}

  ${
    eldifd.1 $e |- ( ph -> A e. B ) $.
    eldifd.2 $e |- ( ph -> -. A e. C ) $.
    $( If a class is in one class and not another, it is also in their
       difference.  One-way deduction form of ~ eldif .  (Contributed by David
       Moews, 1-May-2017.) $)
    eldifd $p |- ( ph -> A e. ( B \ C ) ) $=
      ( wcel wn cdif eldif sylanbrc ) ABCGBDGHBCDIGEFBCDJK $.
  $}

  ${
    eldifad.1 $e |- ( ph -> A e. ( B \ C ) ) $.
    $( If a class is in the difference of two classes, it is also in the
       minuend.  One-way deduction form of ~ eldif .  (Contributed by David
       Moews, 1-May-2017.) $)
    eldifad $p |- ( ph -> A e. B ) $=
      ( wcel wn cdif wa eldif sylib simpld ) ABCFZBDFGZABCDHFMNIEBCDJKL $.
  $}

  ${
    eldifbd.1 $e |- ( ph -> A e. ( B \ C ) ) $.
    $( If a class is in the difference of two classes, it is not in the
       subtrahend.  One-way deduction form of ~ eldif .  (Contributed by David
       Moews, 1-May-2017.) $)
    eldifbd $p |- ( ph -> -. A e. C ) $=
      ( wcel wn cdif wa eldif sylib simprd ) ABCFZBDFGZABCDHFMNIEBCDJKL $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Subclasses and subsets
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)
  $( Define the subclass relationship.  Exercise 9 of [TakeutiZaring] p. 18.
     For example, ` { 1 , 2 } C_ { 1 , 2 , 3 } ` ( ~ ex-ss ).  Note that
     ` A C_ A ` (proved in ~ ssid ).  Contrast this relationship with the
     relationship ` A C. B ` (as will be defined in ~ df-pss ).  For a more
     traditional definition, but requiring a dummy variable, see ~ dfss2 .
     Other possible definitions are given by ~ dfss3 , ~ dfss4 , ~ sspss ,
     ~ ssequn1 , ~ ssequn2 , ~ sseqin2 , and ~ ssdif0 .  (Contributed by NM,
     27-Apr-1994.) $)
  df-ss $a |- ( A C_ B <-> ( A i^i B ) = A ) $.

  $( Variant of subclass definition ~ df-ss .  (Contributed by NM,
     21-Jun-1993.) $)
  dfss $p |- ( A C_ B <-> A = ( A i^i B ) ) $=
    ( wss cin wceq df-ss eqcom bitri ) ABCABDZAEAIEABFIAGH $.

  $( Define proper subclass relationship between two classes.  Definition 5.9
     of [TakeutiZaring] p. 17.  For example, ` { 1 , 2 } C. { 1 , 2 , 3 } `
     ( ~ ex-pss ).  Note that ` -. A C. A ` (proved in ~ pssirr ).  Contrast
     this relationship with the relationship ` A C_ B ` (as defined in
     ~ df-ss ).  Other possible definitions are given by ~ dfpss2 and
     ~ dfpss3 .  (Contributed by NM, 7-Feb-1996.) $)
  df-pss $a |- ( A C. B <-> ( A C_ B /\ A =/= B ) ) $.

  ${
    $d x A $.  $d x B $.
    $( Alternate definition of the subclass relationship between two classes.
       Definition 5.9 of [TakeutiZaring] p. 17.  (Contributed by NM,
       8-Jan-2002.) $)
    dfss2 $p |- ( A C_ B <-> A. x ( x e. A -> x e. B ) ) $=
      ( wss cv wcel wa wb wal wi cin wceq dfss df-in eqeq2i abeq2 3bitri pm4.71
      cab albii bitr4i ) BCDZAEZBFZUDUCCFZGZHZAIZUDUEJZAIUBBBCKZLBUFASZLUHBCMUJ
      UKBABCNOUFABPQUIUGAUDUERTUA $.

    $( Alternate definition of subclass relationship.  (Contributed by NM,
       14-Oct-1999.) $)
    dfss3 $p |- ( A C_ B <-> A. x e. A x e. B ) $=
      ( wss cv wcel wi wal wral dfss2 df-ral bitr4i ) BCDAEZBFMCFZGAHNABIABCJNA
      BKL $.
  $}

  ${
    $d z y A $.  $d z y B $.  $d x z $.
    dfss2f.1 $e |- F/_ x A $.
    dfss2f.2 $e |- F/_ x B $.
    $( Equivalence for subclass relation, using bound-variable hypotheses
       instead of distinct variable conditions.  (Contributed by NM,
       3-Jul-1994.)  (Revised by Andrew Salmon, 27-Aug-2011.) $)
    dfss2f $p |- ( A C_ B <-> A. x ( x e. A -> x e. B ) ) $=
      ( vz wss cv wcel wal dfss2 nfcri nfim nfv weq eleq1 imbi12d cbval bitri
      wi ) BCGFHZBIZUACIZTZFJAHZBIZUECIZTZAJFBCKUDUHFAUBUCAAFBDLAFCELMUHFNFAOUB
      UFUCUGUAUEBPUAUECPQRS $.

    $d y A $.  $d y B $.
    $( Equivalence for subclass relation, using bound-variable hypotheses
       instead of distinct variable conditions.  (Contributed by NM,
       20-Mar-2004.) $)
    dfss3f $p |- ( A C_ B <-> A. x e. A x e. B ) $=
      ( wss cv wcel wi wal wral dfss2f df-ral bitr4i ) BCFAGZBHOCHZIAJPABKABCDE
      LPABMN $.

    $( If ` x ` is not free in ` A ` and ` B ` , it is not free in
       ` A C_ B ` .  (Contributed by NM, 27-Dec-1996.) $)
    nfss $p |- F/ x A C_ B $=
      ( wss cv wcel wral dfss3f nfra1 nfxfr ) BCFAGCHZABIAABCDEJMABKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Membership relationships follow from a subclass relationship.
       (Contributed by NM, 5-Aug-1993.) $)
    ssel $p |- ( A C_ B -> ( C e. A -> C e. B ) ) $=
      ( vx wss cv wceq wa wex wi wal dfss2 biimpi 19.21bi anim2d eximdv df-clel
      wcel 3imtr4g ) ABEZDFZCGZUAARZHZDIUBUABRZHZDICARCBRTUDUFDTUCUEUBTUCUEJZDT
      UGDKDABLMNOPDCAQDCBQS $.
  $}

  $( Membership relationships follow from a subclass relationship.
     (Contributed by NM, 7-Jun-2004.) $)
  ssel2 $p |- ( ( A C_ B /\ C e. A ) -> C e. B ) $=
    ( wss wcel ssel imp ) ABDCAECBEABCFG $.

  ${
    sseli.1 $e |- A C_ B $.
    $( Membership inference from subclass relationship.  (Contributed by NM,
       5-Aug-1993.) $)
    sseli $p |- ( C e. A -> C e. B ) $=
      ( wss wcel wi ssel ax-mp ) ABECAFCBFGDABCHI $.

    ${
      sselii.2 $e |- C e. A $.
      $( Membership inference from subclass relationship.  (Contributed by NM,
         31-May-1999.) $)
      sselii $p |- C e. B $=
        ( wcel sseli ax-mp ) CAFCBFEABCDGH $.
    $}

    ${
      sseldi.2 $e |- ( ph -> C e. A ) $.
      $( Membership inference from subclass relationship.  (Contributed by NM,
         25-Jun-2014.) $)
      sseldi $p |- ( ph -> C e. B ) $=
        ( wcel sseli syl ) ADBGDCGFBCDEHI $.
    $}
  $}

  ${
    sseld.1 $e |- ( ph -> A C_ B ) $.
    $( Membership deduction from subclass relationship.  (Contributed by NM,
       15-Nov-1995.) $)
    sseld $p |- ( ph -> ( C e. A -> C e. B ) ) $=
      ( wss wcel wi ssel syl ) ABCFDBGDCGHEBCDIJ $.

    $( Membership deduction from subclass relationship.  (Contributed by NM,
       26-Jun-2014.) $)
    sselda $p |- ( ( ph /\ C e. A ) -> C e. B ) $=
      ( wcel sseld imp ) ADBFDCFABCDEGH $.

    ${
      sseldd.2 $e |- ( ph -> C e. A ) $.
      $( Membership inference from subclass relationship.  (Contributed by NM,
         14-Dec-2004.) $)
      sseldd $p |- ( ph -> C e. B ) $=
        ( wcel sseld mpd ) ADBGDCGFABCDEHI $.
    $}
  $}

  ${
    ssneld.1 $e |- ( ph -> A C_ B ) $.
    $( If a class is not in another class, it is also not in a subclass of that
       class.  Deduction form.  (Contributed by David Moews, 1-May-2017.) $)
    ssneld $p |- ( ph -> ( -. C e. B -> -. C e. A ) ) $=
      ( wcel sseld con3d ) ADBFDCFABCDEGH $.

    ssneldd.2 $e |- ( ph -> -. C e. B ) $.
    $( If an element is not in a class, it is also not in a subclass of that
       class.  Deduction form.  (Contributed by David Moews, 1-May-2017.) $)
    ssneldd $p |- ( ph -> -. C e. A ) $=
      ( wcel wn ssneld mpd ) ADCGHDBGHFABCDEIJ $.
  $}

  ${
    $d x A $.  $d x B $.
    ssriv.1 $e |- ( x e. A -> x e. B ) $.
    $( Inference rule based on subclass definition.  (Contributed by NM,
       21-Jun-1993.) $)
    ssriv $p |- A C_ B $=
      ( wss cv wcel wi dfss2 mpgbir ) BCEAFZBGKCGHAABCIDJ $.
  $}

  ${
    ssrd.0 $e |- F/ x ph $.
    ssrd.1 $e |- F/_ x A $.
    ssrd.2 $e |- F/_ x B $.
    ssrd.3 $e |- ( ph -> ( x e. A -> x e. B ) ) $.
    $( Deduction rule based on subclass definition.  (Contributed by Thierry
       Arnoux, 8-Mar-2017.) $)
    ssrd $p |- ( ph -> A C_ B ) $=
      ( cv wcel wi wal wss alrimi dfss2f sylibr ) ABIZCJQDJKZBLCDMARBEHNBCDFGOP
      $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    ssrdv.1 $e |- ( ph -> ( x e. A -> x e. B ) ) $.
    $( Deduction rule based on subclass definition.  (Contributed by NM,
       15-Nov-1995.) $)
    ssrdv $p |- ( ph -> A C_ B ) $=
      ( cv wcel wi wal wss alrimiv dfss2 sylibr ) ABFZCGNDGHZBICDJAOBEKBCDLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Transitivity of subclasses.  Exercise 5 of [TakeutiZaring] p. 17.
       (Contributed by NM, 24-Jun-1993.)  (Proof shortened by Andrew Salmon,
       14-Jun-2011.) $)
    sstr2 $p |- ( A C_ B -> ( B C_ C -> A C_ C ) ) $=
      ( vx wss cv wcel wi wal ssel imim1d alimdv dfss2 3imtr4g ) ABEZDFZBGZPCGZ
      HZDIPAGZRHZDIBCEACEOSUADOTQRABPJKLDBCMDACMN $.
  $}

  $( Transitivity of subclasses.  Theorem 6 of [Suppes] p. 23.  (Contributed by
     NM, 5-Sep-2003.) $)
  sstr $p |- ( ( A C_ B /\ B C_ C ) -> A C_ C ) $=
    ( wss sstr2 imp ) ABDBCDACDABCEF $.

  ${
    sstri.1 $e |- A C_ B $.
    sstri.2 $e |- B C_ C $.
    $( Subclass transitivity inference.  (Contributed by NM, 5-May-2000.) $)
    sstri $p |- A C_ C $=
      ( wss sstr2 mp2 ) ABFBCFACFDEABCGH $.
  $}

  ${
    sstrd.1 $e |- ( ph -> A C_ B ) $.
    sstrd.2 $e |- ( ph -> B C_ C ) $.
    $( Subclass transitivity deduction.  (Contributed by NM, 2-Jun-2004.) $)
    sstrd $p |- ( ph -> A C_ C ) $=
      ( wss sstr syl2anc ) ABCGCDGBDGEFBCDHI $.
  $}

  ${
    syl5ss.1 $e |- A C_ B $.
    syl5ss.2 $e |- ( ph -> B C_ C ) $.
    $( Subclass transitivity deduction.  (Contributed by NM, 6-Feb-2014.) $)
    syl5ss $p |- ( ph -> A C_ C ) $=
      ( wss a1i sstrd ) ABCDBCGAEHFI $.
  $}

  ${
    syl6ss.1 $e |- ( ph -> A C_ B ) $.
    syl6ss.2 $e |- B C_ C $.
    $( Subclass transitivity deduction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) $)
    syl6ss $p |- ( ph -> A C_ C ) $=
      ( wss a1i sstrd ) ABCDECDGAFHI $.
  $}

  ${
    sylan9ss.1 $e |- ( ph -> A C_ B ) $.
    sylan9ss.2 $e |- ( ps -> B C_ C ) $.
    $( A subclass transitivity deduction.  (Contributed by NM, 27-Sep-2004.)
       (Proof shortened by Andrew Salmon, 14-Jun-2011.) $)
    sylan9ss $p |- ( ( ph /\ ps ) -> A C_ C ) $=
      ( wss sstr syl2an ) ACDHDEHCEHBFGCDEIJ $.
  $}

  ${
    sylan9ssr.1 $e |- ( ph -> A C_ B ) $.
    sylan9ssr.2 $e |- ( ps -> B C_ C ) $.
    $( A subclass transitivity deduction.  (Contributed by NM, 27-Sep-2004.) $)
    sylan9ssr $p |- ( ( ps /\ ph ) -> A C_ C ) $=
      ( wss sylan9ss ancoms ) ABCEHABCDEFGIJ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( The subclass relationship is antisymmetric.  Compare Theorem 4 of
       [Suppes] p. 22.  (Contributed by NM, 21-May-1993.) $)
    eqss $p |- ( A = B <-> ( A C_ B /\ B C_ A ) ) $=
      ( vx cv wcel wb wal wi wa wceq wss albiim dfcleq dfss2 anbi12i 3bitr4i )
      CDZAEZQBEZFCGRSHCGZSRHCGZIABJABKZBAKZIRSCLCABMUBTUCUACABNCBANOP $.
  $}

  ${
    eqssi.1 $e |- A C_ B $.
    eqssi.2 $e |- B C_ A $.
    $( Infer equality from two subclass relationships.  Compare Theorem 4 of
       [Suppes] p. 22.  (Contributed by NM, 9-Sep-1993.) $)
    eqssi $p |- A = B $=
      ( wceq wss eqss mpbir2an ) ABEABFBAFCDABGH $.
  $}

  ${
    eqssd.1 $e |- ( ph -> A C_ B ) $.
    eqssd.2 $e |- ( ph -> B C_ A ) $.
    $( Equality deduction from two subclass relationships.  Compare Theorem 4
       of [Suppes] p. 22.  (Contributed by NM, 27-Jun-2004.) $)
    eqssd $p |- ( ph -> A = B ) $=
      ( wss wceq eqss sylanbrc ) ABCFCBFBCGDEBCHI $.
  $}

  ${
    eqrd.0 $e |- F/ x ph $.
    eqrd.1 $e |- F/_ x A $.
    eqrd.2 $e |- F/_ x B $.
    eqrd.3 $e |- ( ph -> ( x e. A <-> x e. B ) ) $.
    $( Deduce equality of classes from equivalence of membership.  (Contributed
       by Thierry Arnoux, 21-Mar-2017.) $)
    eqrd $p |- ( ph -> A = B ) $=
      ( cv wcel biimpd ssrd biimprd eqssd ) ACDABCDEFGABIZCJZODJZHKLABDCEGFAPQH
      MLN $.
  $}

  ${
    $d A x $.
    $( Any class is a subclass of itself.  Exercise 10 of [TakeutiZaring]
       p. 18.  (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Andrew
       Salmon, 14-Jun-2011.) $)
    ssid $p |- A C_ A $=
      ( vx cv wcel id ssriv ) BAABCADEF $.
  $}

  ${
    $d A x $.
    $( Any class is a subclass of the universal class.  (Contributed by NM,
       31-Oct-1995.) $)
    ssv $p |- A C_ _V $=
      ( vx cvv cv elex ssriv ) BACBDAEF $.
  $}

  $( Equality theorem for subclasses.  (Contributed by NM, 24-Jun-1993.)
     (Proof shortened by Andrew Salmon, 21-Jun-2011.) $)
  sseq1 $p |- ( A = B -> ( A C_ C <-> B C_ C ) ) $=
    ( wceq wss wa wb eqss wi sstr2 adantl adantr impbid sylbi ) ABDABEZBAEZFZAC
    EZBCEZGABHQRSPRSIOBACJKOSRIPABCJLMN $.

  $( Equality theorem for the subclass relationship.  (Contributed by NM,
     25-Jun-1998.) $)
  sseq2 $p |- ( A = B -> ( C C_ A <-> C C_ B ) ) $=
    ( wss wa wi wceq wb sstr2 com12 anim12i eqss dfbi2 3imtr4i ) ABDZBADZECADZC
    BDZFZRQFZEABGQRHOSPTQORCABIJRPQCBAIJKABLQRMN $.

  $( Equality theorem for the subclass relationship.  (Contributed by NM,
     31-May-1999.) $)
  sseq12 $p |- ( ( A = B /\ C = D ) -> ( A C_ C <-> B C_ D ) ) $=
    ( wceq wss sseq1 sseq2 sylan9bb ) ABEACFBCFCDEBDFABCGCDBHI $.

  ${
    sseq1i.1 $e |- A = B $.
    $( An equality inference for the subclass relationship.  (Contributed by
       NM, 18-Aug-1993.) $)
    sseq1i $p |- ( A C_ C <-> B C_ C ) $=
      ( wceq wss wb sseq1 ax-mp ) ABEACFBCFGDABCHI $.

    $( An equality inference for the subclass relationship.  (Contributed by
       NM, 30-Aug-1993.) $)
    sseq2i $p |- ( C C_ A <-> C C_ B ) $=
      ( wceq wss wb sseq2 ax-mp ) ABECAFCBFGDABCHI $.

    ${
      sseq12i.2 $e |- C = D $.
      $( An equality inference for the subclass relationship.  (Contributed by
         NM, 31-May-1999.)  (Proof shortened by Eric Schmidt, 26-Jan-2007.) $)
      sseq12i $p |- ( A C_ C <-> B C_ D ) $=
        ( wceq wss wb sseq12 mp2an ) ABGCDGACHBDHIEFABCDJK $.
    $}
  $}

  ${
    sseq1d.1 $e |- ( ph -> A = B ) $.
    $( An equality deduction for the subclass relationship.  (Contributed by
       NM, 14-Aug-1994.) $)
    sseq1d $p |- ( ph -> ( A C_ C <-> B C_ C ) ) $=
      ( wceq wss wb sseq1 syl ) ABCFBDGCDGHEBCDIJ $.

    $( An equality deduction for the subclass relationship.  (Contributed by
       NM, 14-Aug-1994.) $)
    sseq2d $p |- ( ph -> ( C C_ A <-> C C_ B ) ) $=
      ( wceq wss wb sseq2 syl ) ABCFDBGDCGHEBCDIJ $.

    ${
      sseq12d.2 $e |- ( ph -> C = D ) $.
      $( An equality deduction for the subclass relationship.  (Contributed by
         NM, 31-May-1999.) $)
      sseq12d $p |- ( ph -> ( A C_ C <-> B C_ D ) ) $=
        ( wss sseq1d sseq2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.
    $}
  $}

  ${
    eqsstr.1 $e |- A = B $.
    eqsstr.2 $e |- B C_ C $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 16-Jul-1995.) $)
    eqsstri $p |- A C_ C $=
      ( wss sseq1i mpbir ) ACFBCFEABCDGH $.
  $}

  ${
    eqsstr3.1 $e |- B = A $.
    eqsstr3.2 $e |- B C_ C $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 19-Oct-1999.) $)
    eqsstr3i $p |- A C_ C $=
      ( eqcomi eqsstri ) ABCBADFEG $.
  $}

  ${
    sseqtr.1 $e |- A C_ B $.
    sseqtr.2 $e |- B = C $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 28-Jul-1995.) $)
    sseqtri $p |- A C_ C $=
      ( wss sseq2i mpbi ) ABFACFDBCAEGH $.
  $}

  ${
    sseqtr4.1 $e |- A C_ B $.
    sseqtr4.2 $e |- C = B $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 4-Apr-1995.) $)
    sseqtr4i $p |- A C_ C $=
      ( eqcomi sseqtri ) ABCDCBEFG $.
  $}

  ${
    eqsstrd.1 $e |- ( ph -> A = B ) $.
    eqsstrd.2 $e |- ( ph -> B C_ C ) $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) $)
    eqsstrd $p |- ( ph -> A C_ C ) $=
      ( wss sseq1d mpbird ) ABDGCDGFABCDEHI $.
  $}

  ${
    eqsstr3d.1 $e |- ( ph -> B = A ) $.
    eqsstr3d.2 $e |- ( ph -> B C_ C ) $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) $)
    eqsstr3d $p |- ( ph -> A C_ C ) $=
      ( eqcomd eqsstrd ) ABCDACBEGFH $.
  $}

  ${
    sseqtrd.1 $e |- ( ph -> A C_ B ) $.
    sseqtrd.2 $e |- ( ph -> B = C ) $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) $)
    sseqtrd $p |- ( ph -> A C_ C ) $=
      ( wss sseq2d mpbid ) ABCGBDGEACDBFHI $.
  $}

  ${
    sseqtr4d.1 $e |- ( ph -> A C_ B ) $.
    sseqtr4d.2 $e |- ( ph -> C = B ) $.
    $( Substitution of equality into a subclass relationship.  (Contributed by
       NM, 25-Apr-2004.) $)
    sseqtr4d $p |- ( ph -> A C_ C ) $=
      ( eqcomd sseqtrd ) ABCDEADCFGH $.
  $}

  ${
    3sstr3.1 $e |- A C_ B $.
    3sstr3.2 $e |- A = C $.
    3sstr3.3 $e |- B = D $.
    $( Substitution of equality in both sides of a subclass relationship.
       (Contributed by NM, 13-Jan-1996.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) $)
    3sstr3i $p |- C C_ D $=
      ( wss sseq12i mpbi ) ABHCDHEACBDFGIJ $.
  $}

  ${
    3sstr4.1 $e |- A C_ B $.
    3sstr4.2 $e |- C = A $.
    3sstr4.3 $e |- D = B $.
    $( Substitution of equality in both sides of a subclass relationship.
       (Contributed by NM, 13-Jan-1996.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) $)
    3sstr4i $p |- C C_ D $=
      ( wss sseq12i mpbir ) CDHABHECADBFGIJ $.
  $}

  ${
    3sstr3g.1 $e |- ( ph -> A C_ B ) $.
    3sstr3g.2 $e |- A = C $.
    3sstr3g.3 $e |- B = D $.
    $( Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 1-Oct-2000.) $)
    3sstr3g $p |- ( ph -> C C_ D ) $=
      ( wss sseq12i sylib ) ABCIDEIFBDCEGHJK $.
  $}

  ${
    3sstr4g.1 $e |- ( ph -> A C_ B ) $.
    3sstr4g.2 $e |- C = A $.
    3sstr4g.3 $e |- D = B $.
    $( Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 16-Aug-1994.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) $)
    3sstr4g $p |- ( ph -> C C_ D ) $=
      ( wss sseq12i sylibr ) ABCIDEIFDBECGHJK $.
  $}

  ${
    3sstr3d.1 $e |- ( ph -> A C_ B ) $.
    3sstr3d.2 $e |- ( ph -> A = C ) $.
    3sstr3d.3 $e |- ( ph -> B = D ) $.
    $( Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 1-Oct-2000.) $)
    3sstr3d $p |- ( ph -> C C_ D ) $=
      ( wss sseq12d mpbid ) ABCIDEIFABDCEGHJK $.
  $}

  ${
    3sstr4d.1 $e |- ( ph -> A C_ B ) $.
    3sstr4d.2 $e |- ( ph -> C = A ) $.
    3sstr4d.3 $e |- ( ph -> D = B ) $.
    $( Substitution of equality into both sides of a subclass relationship.
       (Contributed by NM, 30-Nov-1995.)  (Proof shortened by Eric Schmidt,
       26-Jan-2007.) $)
    3sstr4d $p |- ( ph -> C C_ D ) $=
      ( wss sseq12d mpbird ) ADEIBCIFADBECGHJK $.
  $}

  ${
    syl5eqss.1 $e |- A = B $.
    syl5eqss.2 $e |- ( ph -> B C_ C ) $.
    $( A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) $)
    syl5eqss $p |- ( ph -> A C_ C ) $=
      ( wss sseq1i sylibr ) ACDGBDGFBCDEHI $.
  $}

  ${
    syl5eqssr.1 $e |- B = A $.
    syl5eqssr.2 $e |- ( ph -> B C_ C ) $.
    $( A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) $)
    syl5eqssr $p |- ( ph -> A C_ C ) $=
      ( eqcomi syl5eqss ) ABCDCBEGFH $.
  $}

  ${
    syl6sseq.1 $e |- ( ph -> A C_ B ) $.
    syl6sseq.2 $e |- B = C $.
    $( A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) $)
    syl6sseq $p |- ( ph -> A C_ C ) $=
      ( wss sseq2i sylib ) ABCGBDGECDBFHI $.
  $}

  ${
    syl6ssr.1 $e |- ( ph -> A C_ B ) $.
    syl6ssr.2 $e |- C = B $.
    $( A chained subclass and equality deduction.  (Contributed by NM,
       25-Apr-2004.) $)
    syl6sseqr $p |- ( ph -> A C_ C ) $=
      ( eqcomi syl6sseq ) ABCDEDCFGH $.
  $}

  ${
    syl5sseq.1 $e |- B C_ A $.
    syl5sseq.2 $e |- ( ph -> A = C ) $.
    $( Subclass transitivity deduction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) $)
    syl5sseq $p |- ( ph -> B C_ C ) $=
      ( wceq wss sseq2 biimpa sylancl ) ABDGZCBHZCDHZFELMNBDCIJK $.
  $}

  ${
    syl5sseqr.1 $e |- B C_ A $.
    syl5sseqr.2 $e |- ( ph -> C = A ) $.
    $( Subclass transitivity deduction.  (Contributed by Jonathan Ben-Naim,
       3-Jun-2011.) $)
    syl5sseqr $p |- ( ph -> B C_ C ) $=
      ( wss a1i sseqtr4d ) ACBDCBGAEHFI $.
  $}

  ${
    syl6eqss.1 $e |- ( ph -> A = B ) $.
    syl6eqss.2 $e |- B C_ C $.
    $( A chained subclass and equality deduction.  (Contributed by Mario
       Carneiro, 2-Jan-2017.) $)
    syl6eqss $p |- ( ph -> A C_ C ) $=
      ( wss a1i eqsstrd ) ABCDECDGAFHI $.
  $}

  ${
    syl6eqssr.1 $e |- ( ph -> B = A ) $.
    syl6eqssr.2 $e |- B C_ C $.
    $( A chained subclass and equality deduction.  (Contributed by Mario
       Carneiro, 2-Jan-2017.) $)
    syl6eqssr $p |- ( ph -> A C_ C ) $=
      ( eqcomd syl6eqss ) ABCDACBEGFH $.
  $}

  $( Equality implies the subclass relation.  (Contributed by NM,
     21-Jun-1993.)  (Proof shortened by Andrew Salmon, 21-Jun-2011.) $)
  eqimss $p |- ( A = B -> A C_ B ) $=
    ( wceq wss eqss simplbi ) ABCABDBADABEF $.

  $( Equality implies the subclass relation.  (Contributed by NM,
     23-Nov-2003.) $)
  eqimss2 $p |- ( B = A -> A C_ B ) $=
    ( wss eqimss eqcoms ) ABCABABDE $.

  ${
    eqimssi.1 $e |- A = B $.
    $( Infer subclass relationship from equality.  (Contributed by NM,
       6-Jan-2007.) $)
    eqimssi $p |- A C_ B $=
      ( ssid sseqtri ) AABADCE $.

    $( Infer subclass relationship from equality.  (Contributed by NM,
       7-Jan-2007.) $)
    eqimss2i $p |- B C_ A $=
      ( ssid sseqtr4i ) BBABDCE $.
  $}

  $( Two classes are different if they don't include the same class.
     (Contributed by NM, 23-Apr-2015.) $)
  nssne1 $p |- ( ( A C_ B /\ -. A C_ C ) -> B =/= C ) $=
    ( wss wn wne wceq sseq2 biimpcd necon3bd imp ) ABDZACDZEBCFLMBCBCGLMBCAHIJK
    $.

  $( Two classes are different if they are not subclasses of the same class.
     (Contributed by NM, 23-Apr-2015.) $)
  nssne2 $p |- ( ( A C_ C /\ -. B C_ C ) -> A =/= B ) $=
    ( wss wn wne wceq sseq1 biimpcd necon3bd imp ) ACDZBCDZEABFLMABABGLMABCHIJK
    $.

  ${
    $d x A $.  $d x B $.
    $( Negation of subclass relationship.  Exercise 13 of [TakeutiZaring]
       p. 18.  (Contributed by NM, 25-Feb-1996.)  (Proof shortened by Andrew
       Salmon, 21-Jun-2011.) $)
    nss $p |- ( -. A C_ B <-> E. x ( x e. A /\ -. x e. B ) ) $=
      ( cv wcel wn wa wex wss wi wal exanali dfss2 xchbinxr bicomi ) ADZBEZPCEZ
      FGAHZBCIZFSQRJAKTQRALABCMNO $.
  $}

  $( Demonstrate by witnesses that two classes lack a subclass relation.
     (Contributed by Stefan O'Rear, 5-Feb-2015.) $)
  nelss $p |- ( ( A e. B /\ -. A e. C ) -> -. B C_ C ) $=
    ( wcel wss ssel com12 con3dimp ) ABDZBCEZACDZJIKBCAFGH $.

  ${
    $d x A $.  $d x B $.
    $( Quantification restricted to a subclass.  (Contributed by NM,
       11-Mar-2006.) $)
    ssralv $p |- ( A C_ B -> ( A. x e. B ph -> A. x e. A ph ) ) $=
      ( wss cv wcel ssel imim1d ralimdv2 ) CDEZAABDCKBFZCGLDGACDLHIJ $.

    $( Existential quantification restricted to a subclass.  (Contributed by
       NM, 11-Jan-2007.) $)
    ssrexv $p |- ( A C_ B -> ( E. x e. A ph -> E. x e. B ph ) ) $=
      ( wss cv wcel ssel anim1d reximdv2 ) CDEZAABCDKBFZCGLDGACDLHIJ $.
  $}

  ${
    $d A x $.  $d B x $.
    $( Restricted universal quantification on a subset in terms of superset.
       (Contributed by Stefan O'Rear, 3-Apr-2015.) $)
    ralss $p |- ( A C_ B -> ( A. x e. A ph <->
          A. x e. B ( x e. A -> ph ) ) ) $=
      ( wss cv wcel wi wa ssel pm4.71rd imbi1d impexp syl6bb ralbidv2 ) CDEZABF
      ZCGZAHZBCDPSQDGZRIZAHTSHPRUAAPRTCDQJKLTRAMNO $.

    $( Restricted existential quantification on a subset in terms of superset.
       (Contributed by Stefan O'Rear, 3-Apr-2015.) $)
    rexss $p |- ( A C_ B -> ( E. x e. A ph <->
          E. x e. B ( x e. A /\ ph ) ) ) $=
      ( wss cv wcel wa ssel pm4.71rd anbi1d anass syl6bb rexbidv2 ) CDEZABFZCGZ
      AHZBCDORPDGZQHZAHSRHOQTAOQSCDPIJKSQALMN $.
  $}

  ${
    $d ph y $.  $d ps y $.  $d x y $.
    $( Class abstractions in a subclass relationship.  (Contributed by NM,
       3-Jul-1994.) $)
    ss2ab $p |- ( { x | ph } C_ { x | ps } <-> A. x ( ph -> ps ) ) $=
      ( cab wss cv wcel wi wal nfab1 dfss2f abid imbi12i albii bitri ) ACDZBCDZ
      ECFZPGZRQGZHZCIABHZCICPQACJBCJKUAUBCSATBACLBCLMNO $.
  $}

  ${
    $d x A $.
    $( Class abstraction in a subclass relationship.  (Contributed by NM,
       16-Aug-2006.) $)
    abss $p |- ( { x | ph } C_ A <-> A. x ( ph -> x e. A ) ) $=
      ( cab wss cv wcel wi wal abid2 sseq2i ss2ab bitr3i ) ABDZCENBFCGZBDZEAOHB
      IPCNBCJKAOBLM $.

    $( Subclass of a class abstraction.  (Contributed by NM, 16-Aug-2006.) $)
    ssab $p |- ( A C_ { x | ph } <-> A. x ( x e. A -> ph ) ) $=
      ( cab wss cv wcel wi wal abid2 sseq1i ss2ab bitr3i ) CABDZEBFCGZBDZNEOAHB
      IPCNBCJKOABLM $.

    $( The relation for a subclass of a class abstraction is equivalent to
       restricted quantification.  (Contributed by NM, 6-Sep-2006.) $)
    ssabral $p |- ( A C_ { x | ph } <-> A. x e. A ph ) $=
      ( cab wss cv wcel wi wal wral ssab df-ral bitr4i ) CABDEBFCGAHBIABCJABCKA
      BCLM $.
  $}

  ${
    ss2abi.1 $e |- ( ph -> ps ) $.
    $( Inference of abstraction subclass from implication.  (Contributed by NM,
       31-Mar-1995.) $)
    ss2abi $p |- { x | ph } C_ { x | ps } $=
      ( cab wss wi ss2ab mpgbir ) ACEBCEFABGCABCHDI $.
  $}

  ${
    $d x ph $.
    ss2abdv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Deduction of abstraction subclass from implication.  (Contributed by NM,
       29-Jul-2011.) $)
    ss2abdv $p |- ( ph -> { x | ps } C_ { x | ch } ) $=
      ( wi wal cab wss alrimiv ss2ab sylibr ) ABCFZDGBDHCDHIAMDEJBCDKL $.
  $}

  ${
    $d x ph $.  $d x A $.
    abssdv.1 $e |- ( ph -> ( ps -> x e. A ) ) $.
    $( Deduction of abstraction subclass from implication.  (Contributed by NM,
       20-Jan-2006.) $)
    abssdv $p |- ( ph -> { x | ps } C_ A ) $=
      ( cv wcel wi wal cab wss alrimiv abss sylibr ) ABCFDGHZCIBCJDKAOCELBCDMN
      $.
  $}

  ${
    $d x A $.
    abssi.1 $e |- ( ph -> x e. A ) $.
    $( Inference of abstraction subclass from implication.  (Contributed by NM,
       20-Jan-2006.) $)
    abssi $p |- { x | ph } C_ A $=
      ( cab cv wcel ss2abi abid2 sseqtri ) ABEBFCGZBECAKBDHBCIJ $.
  $}

  $( Restricted abstraction classes in a subclass relationship.  (Contributed
     by NM, 30-May-1999.) $)
  ss2rab $p |- ( { x e. A | ph } C_ { x e. A | ps } <->
               A. x e. A ( ph -> ps ) ) $=
    ( crab wss cv wcel wa cab wi wal df-rab sseq12i ss2ab df-ral imdistan albii
    wral bitr2i 3bitri ) ACDEZBCDEZFCGDHZAIZCJZUDBIZCJZFUEUGKZCLZABKZCDSZUBUFUC
    UHACDMBCDMNUEUGCOULUDUKKZCLUJUKCDPUMUICUDABQRTUA $.

  ${
    $d x B $.
    $( Restricted class abstraction in a subclass relationship.  (Contributed
       by NM, 16-Aug-2006.) $)
    rabss $p |- ( { x e. A | ph } C_ B <-> A. x e. A ( ph -> x e. B ) ) $=
      ( crab wss cv wcel wa cab wal wral df-rab sseq1i abss impexp albii df-ral
      wi bitr4i 3bitri ) ABCEZDFBGZCHZAIZBJZDFUEUCDHZSZBKZAUGSZBCLZUBUFDABCMNUE
      BDOUIUDUJSZBKUKUHULBUDAUGPQUJBCRTUA $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass of a restricted class abstraction.  (Contributed by NM,
       16-Aug-2006.) $)
    ssrab $p |- ( B C_ { x e. A | ph } <-> ( B C_ A /\ A. x e. B ph ) ) $=
      ( crab wss cv wcel wa cab wal wral df-rab sseq2i ssab dfss3 anbi1i r19.26
      wi df-ral 3bitr2ri 3bitri ) DABCEZFDBGZCHZAIZBJZFUDDHUFSBKZDCFZABDLZIZUCU
      GDABCMNUFBDOUKUEBDLZUJIUFBDLUHUIULUJBDCPQUEABDRUFBDTUAUB $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    ssrabdv.1 $e |- ( ph -> B C_ A ) $.
    ssrabdv.2 $e |- ( ( ph /\ x e. B ) -> ps ) $.
    $( Subclass of a restricted class abstraction (deduction rule).
       (Contributed by NM, 31-Aug-2006.) $)
    ssrabdv $p |- ( ph -> B C_ { x e. A | ps } ) $=
      ( wss wral crab ralrimiva ssrab sylanbrc ) AEDHBCEIEBCDJHFABCEGKBCDELM $.
  $}

  ${
    $d x B $.  $d x ph $.
    rabssdv.1 $e |- ( ( ph /\ x e. A /\ ps ) -> x e. B ) $.
    $( Subclass of a restricted class abstraction (deduction rule).
       (Contributed by NM, 2-Feb-2015.) $)
    rabssdv $p |- ( ph -> { x e. A | ps } C_ B ) $=
      ( cv wcel wi wral crab wss 3exp ralrimiv rabss sylibr ) ABCGZEHZIZCDJBCDK
      ELASCDAQDHBRFMNBCDEOP $.
  $}

  ${
    $d x ph $.
    ss2rabdv.1 $e |- ( ( ph /\ x e. A ) -> ( ps -> ch ) ) $.
    $( Deduction of restricted abstraction subclass from implication.
       (Contributed by NM, 30-May-2006.) $)
    ss2rabdv $p |- ( ph -> { x e. A | ps } C_ { x e. A | ch } ) $=
      ( wi wral crab wss ralrimiva ss2rab sylibr ) ABCGZDEHBDEICDEIJANDEFKBCDEL
      M $.
  $}

  ${
    ss2rabi.1 $e |- ( x e. A -> ( ph -> ps ) ) $.
    $( Inference of restricted abstraction subclass from implication.
       (Contributed by NM, 14-Oct-1999.) $)
    ss2rabi $p |- { x e. A | ph } C_ { x e. A | ps } $=
      ( crab wss wi ss2rab mprgbir ) ACDFBCDFGABHCDABCDIEJ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass law for restricted abstraction.  (Contributed by NM,
       18-Dec-2004.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    rabss2 $p |- ( A C_ B -> { x e. A | ph } C_ { x e. B | ph } ) $=
      ( wss cv wcel wa cab crab wi wal pm3.45 alimi dfss2 ss2ab 3imtr4i 3sstr4g
      df-rab ) CDEZBFZCGZAHZBIZUADGZAHZBIZABCJABDJUBUEKZBLUCUFKZBLTUDUGEUHUIBUB
      UEAMNBCDOUCUFBPQABCSABDSR $.

    $( Subclass relation for the restriction of a class abstraction.
       (Contributed by NM, 31-Mar-1995.) $)
    ssab2 $p |- { x | ( x e. A /\ ph ) } C_ A $=
      ( cv wcel wa simpl abssi ) BDCEZAFBCIAGH $.

    $( Subclass relation for a restricted class.  (Contributed by NM,
       19-Mar-1997.) $)
    ssrab2 $p |- { x e. A | ph } C_ A $=
      ( crab cv wcel wa cab df-rab ssab2 eqsstri ) ABCDBECFAGBHCABCIABCJK $.
  $}

  ${
    $d V x $.
    $( If the restricting class of a restricted class abstraction is a subset
       of this restricted class abstraction, it is equal to this restricted
       class abstraction.  (Contributed by Alexander van der Vekens,
       31-Dec-2017.) $)
    ssrabeq $p |- ( V C_ { x e. V | ph } <-> V = { x e. V | ph } ) $=
      ( crab wss wa wceq ssrab2 biantru eqss bitr4i ) CABCDZEZMLCEZFCLGNMABCHIC
      LJK $.
  $}

  $( A restricted class is a subclass of the corresponding unrestricted class.
     (Contributed by Mario Carneiro, 23-Dec-2016.) $)
  rabssab $p |- { x e. A | ph } C_ { x | ph } $=
    ( crab cv wcel wa cab df-rab simpr ss2abi eqsstri ) ABCDBECFZAGZBHABHABCINA
    BMAJKL $.

  ${
    $d x y $.  $d y z A $.  $d y z B $.  $d x z C $.
    $( A subset relationship useful for converting union to indexed union using
       ~ dfiun2 or ~ dfiun2g and intersection to indexed intersection using
       ~ dfiin2 .  (Contributed by NM, 5-Oct-2006.)  (Proof shortened by Mario
       Carneiro, 26-Sep-2015.) $)
    uniiunlem $p |- ( A. x e. A B e. D ->
                     ( A. x e. A B e. C <-> { y | E. x e. A y = B } C_ C ) ) $=
      ( vz cv wceq wrex cab wss wcel wi wal wral eqeq1 rexbidv cbvabv wb sseq1i
      r19.23v albii ralcom4 abss 3bitr4i bitr4i nfv eleq1 ceqsalg ralbi syl5rbb
      ralimi syl ) BHZDIZACJZBKZELZGHZDIZUTEMZNZGOZACPZDFMZACPZDEMZACPZUSVAACJZ
      GKZELZVEURVKEUQVJBGUOUTIUPVAACUOUTDQRSUAVCACPZGOVJVBNZGOVEVLVMVNGVAVBACUB
      UCVCAGCUDVJGEUEUFUGVGVDVHTZACPVEVITVFVOACVBVHGDFVHGUHUTDEUIUJUMVDVHACUKUN
      UL $.
  $}

  $( Alternate definition of proper subclass.  (Contributed by NM,
     7-Feb-1996.) $)
  dfpss2 $p |- ( A C. B <-> ( A C_ B /\ -. A = B ) ) $=
    ( wpss wss wne wa wceq wn df-pss df-ne anbi2i bitri ) ABCABDZABEZFMABGHZFAB
    INOMABJKL $.

  $( Alternate definition of proper subclass.  (Contributed by NM,
     7-Feb-1996.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  dfpss3 $p |- ( A C. B <-> ( A C_ B /\ -. B C_ A ) ) $=
    ( wpss wss wceq wn wa dfpss2 eqss baib notbid pm5.32i bitri ) ABCABDZABEZFZ
    GNBADZFZGABHNPRNOQONQABIJKLM $.

  $( Equality theorem for proper subclass.  (Contributed by NM, 7-Feb-1996.) $)
  psseq1 $p |- ( A = B -> ( A C. C <-> B C. C ) ) $=
    ( wceq wss wne wa wpss sseq1 neeq1 anbi12d df-pss 3bitr4g ) ABDZACEZACFZGBC
    EZBCFZGACHBCHNOQPRABCIABCJKACLBCLM $.

  $( Equality theorem for proper subclass.  (Contributed by NM, 7-Feb-1996.) $)
  psseq2 $p |- ( A = B -> ( C C. A <-> C C. B ) ) $=
    ( wceq wss wne wa wpss sseq2 neeq2 anbi12d df-pss 3bitr4g ) ABDZCAEZCAFZGCB
    EZCBFZGCAHCBHNOQPRABCIABCJKCALCBLM $.

  ${
    psseq1i.1 $e |- A = B $.
    $( An equality inference for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) $)
    psseq1i $p |- ( A C. C <-> B C. C ) $=
      ( wceq wpss wb psseq1 ax-mp ) ABEACFBCFGDABCHI $.

    $( An equality inference for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) $)
    psseq2i $p |- ( C C. A <-> C C. B ) $=
      ( wceq wpss wb psseq2 ax-mp ) ABECAFCBFGDABCHI $.

    ${
      psseq12i.2 $e |- C = D $.
      $( An equality inference for the proper subclass relationship.
         (Contributed by NM, 9-Jun-2004.) $)
      psseq12i $p |- ( A C. C <-> B C. D ) $=
        ( wpss psseq1i psseq2i bitri ) ACGBCGBDGABCEHCDBFIJ $.
    $}
  $}

  ${
    psseq1d.1 $e |- ( ph -> A = B ) $.
    $( An equality deduction for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) $)
    psseq1d $p |- ( ph -> ( A C. C <-> B C. C ) ) $=
      ( wceq wpss wb psseq1 syl ) ABCFBDGCDGHEBCDIJ $.

    $( An equality deduction for the proper subclass relationship.
       (Contributed by NM, 9-Jun-2004.) $)
    psseq2d $p |- ( ph -> ( C C. A <-> C C. B ) ) $=
      ( wceq wpss wb psseq2 syl ) ABCFDBGDCGHEBCDIJ $.

    ${
      psseq12d.2 $e |- ( ph -> C = D ) $.
      $( An equality deduction for the proper subclass relationship.
         (Contributed by NM, 9-Jun-2004.) $)
      psseq12d $p |- ( ph -> ( A C. C <-> B C. D ) ) $=
        ( wpss psseq1d psseq2d bitrd ) ABDHCDHCEHABCDFIADECGJK $.
    $}
  $}

  $( A proper subclass is a subclass.  Theorem 10 of [Suppes] p. 23.
     (Contributed by NM, 7-Feb-1996.) $)
  pssss $p |- ( A C. B -> A C_ B ) $=
    ( wpss wss wne df-pss simplbi ) ABCABDABEABFG $.

  $( Two classes in a proper subclass relationship are not equal.  (Contributed
     by NM, 16-Feb-2015.) $)
  pssne $p |- ( A C. B -> A =/= B ) $=
    ( wpss wss wne df-pss simprbi ) ABCABDABEABFG $.

  ${
    pssssd.1 $e |- ( ph -> A C. B ) $.
    $( Deduce subclass from proper subclass.  (Contributed by NM,
       29-Feb-1996.) $)
    pssssd $p |- ( ph -> A C_ B ) $=
      ( wpss wss pssss syl ) ABCEBCFDBCGH $.

    $( Proper subclasses are unequal.  Deduction form of ~ pssne .
       (Contributed by David Moews, 1-May-2017.) $)
    pssned $p |- ( ph -> A =/= B ) $=
      ( wpss wne pssne syl ) ABCEBCFDBCGH $.
  $}

  $( Subclass in terms of proper subclass.  (Contributed by NM,
     25-Feb-1996.) $)
  sspss $p |- ( A C_ B <-> ( A C. B \/ A = B ) ) $=
    ( wss wpss wceq wo wn dfpss2 simplbi2 con1d orrd pssss eqimss jaoi impbii )
    ABCZABDZABEZFPQRPRQQPRGABHIJKQPRABLABMNO $.

  $( Proper subclass is irreflexive.  Theorem 7 of [Suppes] p. 23.
     (Contributed by NM, 7-Feb-1996.) $)
  pssirr $p |- -. A C. A $=
    ( wpss wss wn wa pm3.24 dfpss3 mtbir ) AABAACZIDEIFAAGH $.

  $( Proper subclass has no 2-cycle loops.  Compare Theorem 8 of [Suppes]
     p. 23.  (Contributed by NM, 7-Feb-1996.)  (Proof shortened by Andrew
     Salmon, 26-Jun-2011.) $)
  pssn2lp $p |- -. ( A C. B /\ B C. A ) $=
    ( wpss wn wi wa wss dfpss3 simprbi pssss nsyl imnan mpbi ) ABCZBACZDENOFDNB
    AGZONABGPDABHIBAJKNOLM $.

  $( Two ways of stating trichotomy with respect to inclusion.  (Contributed by
     NM, 12-Aug-2004.) $)
  sspsstri $p |- ( ( A C_ B \/ B C_ A ) <-> ( A C. B \/ A = B \/ B C. A ) ) $=
    ( wpss wo wceq wss w3o or32 sspss eqcom orbi2i bitri orbi12i orordir bitr4i
    df-3or 3bitr4i ) ABCZBACZDABEZDZRTDZSDABFZBAFZDZRTSGRSTHUEUBSTDZDUAUCUBUDUF
    ABIUDSBAEZDUFBAIUGTSBAJKLMRSTNORTSPQ $.

  $( Partial trichotomy law for subclasses.  (Contributed by NM, 16-May-1996.)
     (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  ssnpss $p |- ( A C_ B -> -. B C. A ) $=
    ( wpss wss wn dfpss3 simprbi con2i ) BACZABDZIBADJEBAFGH $.

  $( Transitive law for proper subclass.  Theorem 9 of [Suppes] p. 23.
     (Contributed by NM, 7-Feb-1996.) $)
  psstr $p |- ( ( A C. B /\ B C. C ) -> A C. C ) $=
    ( wpss wa wss wceq pssss sylan9ss pssn2lp psseq1 anbi1d mtbiri con2i dfpss2
    wn sylanbrc ) ABDZBCDZEZACFACGZPACDRSABCABHBCHIUATUATCBDZSECBJUARUBSACBKLMN
    ACOQ $.

  $( Transitive law for subclass and proper subclass.  (Contributed by NM,
     3-Apr-1996.) $)
  sspsstr $p |- ( ( A C_ B /\ B C. C ) -> A C. C ) $=
    ( wss wpss wceq wo sspss wi psstr ex psseq1 biimprd jaoi imp sylanb ) ABDAB
    EZABFZGZBCEZACEZABHSTUAQTUAIRQTUAABCJKRUATABCLMNOP $.

  $( Transitive law for subclass and proper subclass.  (Contributed by NM,
     3-Apr-1996.) $)
  psssstr $p |- ( ( A C. B /\ B C_ C ) -> A C. C ) $=
    ( wss wpss wceq wo sspss psstr ex psseq2 biimpcd jaod imp sylan2b ) BCDABEZ
    BCEZBCFZGZACEZBCHPSTPQTRPQTABCIJRPTBCAKLMNO $.

  ${
    psstrd.1 $e |- ( ph -> A C. B ) $.
    psstrd.2 $e |- ( ph -> B C. C ) $.
    $( Proper subclass inclusion is transitive.  Deduction form of ~ psstr .
       (Contributed by David Moews, 1-May-2017.) $)
    psstrd $p |- ( ph -> A C. C ) $=
      ( wpss psstr syl2anc ) ABCGCDGBDGEFBCDHI $.
  $}

  ${
    sspsstrd.1 $e |- ( ph -> A C_ B ) $.
    sspsstrd.2 $e |- ( ph -> B C. C ) $.
    $( Transitivity involving subclass and proper subclass inclusion.
       Deduction form of ~ sspsstr .  (Contributed by David Moews,
       1-May-2017.) $)
    sspsstrd $p |- ( ph -> A C. C ) $=
      ( wss wpss sspsstr syl2anc ) ABCGCDHBDHEFBCDIJ $.
  $}

  ${
    psssstrd.1 $e |- ( ph -> A C. B ) $.
    psssstrd.2 $e |- ( ph -> B C_ C ) $.
    $( Transitivity involving subclass and proper subclass inclusion.
       Deduction form of ~ psssstr .  (Contributed by David Moews,
       1-May-2017.) $)
    psssstrd $p |- ( ph -> A C. C ) $=
      ( wpss wss psssstr syl2anc ) ABCGCDHBDGEFBCDIJ $.
  $}

  $( A class is not a proper subclass of another iff it satisfies a
     one-directional form of ~ eqss .  (Contributed by Mario Carneiro,
     15-May-2015.) $)
  npss $p |- ( -. A C. B <-> ( A C_ B -> A = B ) ) $=
    ( wss wceq wi wpss wn wa pm4.61 dfpss2 bitr4i con1bii ) ABCZABDZEZABFZOGMNG
    HPMNIABJKL $.

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        The difference, union, and intersection of two classes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
      The difference of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Equality theorem for class difference.  (Contributed by NM,
       10-Feb-1997.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    difeq1 $p |- ( A = B -> ( A \ C ) = ( B \ C ) ) $=
      ( vx wceq cv wcel wn crab cdif rabeq dfdif2 3eqtr4g ) ABEDFCGHZDAINDBIACJ
      BCJNDABKDACLDBCLM $.

    $( Equality theorem for class difference.  (Contributed by NM,
       10-Feb-1997.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    difeq2 $p |- ( A = B -> ( C \ A ) = ( C \ B ) ) $=
      ( vx wceq cv wcel wn crab cdif eleq2 notbid rabbidv dfdif2 3eqtr4g ) ABEZ
      DFZAGZHZDCIQBGZHZDCICAJCBJPSUADCPRTABQKLMDCANDCBNO $.
  $}

  $( Equality theorem for class difference.  (Contributed by FL,
     31-Aug-2009.) $)
  difeq12 $p |- ( ( A = B /\ C = D ) -> ( A \ C ) = ( B \ D ) ) $=
    ( wceq cdif difeq1 difeq2 sylan9eq ) ABECDEACFBCFBDFABCGCDBHI $.

  ${
    difeq1i.1 $e |- A = B $.
    $( Inference adding difference to the right in a class equality.
       (Contributed by NM, 15-Nov-2002.) $)
    difeq1i $p |- ( A \ C ) = ( B \ C ) $=
      ( wceq cdif difeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Inference adding difference to the left in a class equality.
       (Contributed by NM, 15-Nov-2002.) $)
    difeq2i $p |- ( C \ A ) = ( C \ B ) $=
      ( wceq cdif difeq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      difeq12i.2 $e |- C = D $.
      $( Equality inference for class difference.  (Contributed by NM,
         29-Aug-2004.) $)
      difeq12i $p |- ( A \ C ) = ( B \ D ) $=
        ( cdif difeq1i difeq2i eqtri ) ACGBCGBDGABCEHCDBFIJ $.
    $}
  $}

  ${
    difeq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction adding difference to the right in a class equality.
       (Contributed by NM, 15-Nov-2002.) $)
    difeq1d $p |- ( ph -> ( A \ C ) = ( B \ C ) ) $=
      ( wceq cdif difeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Deduction adding difference to the left in a class equality.
       (Contributed by NM, 15-Nov-2002.) $)
    difeq2d $p |- ( ph -> ( C \ A ) = ( C \ B ) ) $=
      ( wceq cdif difeq2 syl ) ABCFDBGDCGFEBCDHI $.
  $}

  ${
    difeq12d.1 $e |- ( ph -> A = B ) $.
    difeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for class difference.  (Contributed by FL,
       29-May-2014.) $)
    difeq12d $p |- ( ph -> ( A \ C ) = ( B \ D ) ) $=
      ( cdif difeq1d difeq2d eqtrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    difeqri.1 $e |- ( ( x e. A /\ -. x e. B ) <-> x e. C ) $.
    $( Inference from membership to difference.  (Contributed by NM,
       17-May-1998.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    difeqri $p |- ( A \ B ) = C $=
      ( cdif cv wcel wn wa eldif bitri eqriv ) ABCFZDAGZNHOBHOCHIJODHOBCKELM $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    nfdif.1 $e |- F/_ x A $.
    nfdif.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for class difference.  (Contributed by
       NM, 3-Dec-2003.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    nfdif $p |- F/_ x ( A \ B ) $=
      ( vy cdif cv wcel wn crab dfdif2 nfcri nfn nfrab nfcxfr ) ABCGFHCIZJZFBKF
      BCLRAFBQAAFCEMNDOP $.
  $}

  $( Implication of membership in a class difference.  (Contributed by NM,
     29-Apr-1994.) $)
  eldifi $p |- ( A e. ( B \ C ) -> A e. B ) $=
    ( cdif wcel wn eldif simplbi ) ABCDEABEACEFABCGH $.

  $( Implication of membership in a class difference.  (Contributed by NM,
     3-May-1994.) $)
  eldifn $p |- ( A e. ( B \ C ) -> -. A e. C ) $=
    ( cdif wcel wn eldif simprbi ) ABCDEABEACEFABCGH $.

  $( A set does not belong to a class excluding it.  (Contributed by NM,
     27-Jun-1994.) $)
  elndif $p |- ( A e. B -> -. A e. ( C \ B ) ) $=
    ( cdif wcel eldifn con2i ) ACBDEABEACBFG $.

  $( Implication of membership in a class difference.  (Contributed by NM,
     28-Jun-1994.) $)
  neldif $p |- ( ( A e. B /\ -. A e. ( B \ C ) ) -> A e. C ) $=
    ( wcel cdif wn eldif simplbi2 con1d imp ) ABDZABCEDZFACDZKMLLKMFABCGHIJ $.

  ${
    $d x A $.  $d x B $.
    $( Double class difference.  Exercise 11 of [TakeutiZaring] p. 22.
       (Contributed by NM, 17-May-1998.) $)
    difdif $p |- ( A \ ( B \ A ) ) = A $=
      ( vx cdif cv wcel wi wa wn pm4.45im eldif xchbinxr anbi2i bitr2i difeqri
      iman ) CABADZACEZAFZSRBFZSGZHSRQFZIZHSTJUAUCSUATSIHUBTSPRBAKLMNO $.

    $( Subclass relationship for class difference.  Exercise 14 of
       [TakeutiZaring] p. 22.  (Contributed by NM, 29-Apr-1994.) $)
    difss $p |- ( A \ B ) C_ A $=
      ( vx cdif cv eldifi ssriv ) CABDACEABFG $.
  $}

  $( A difference of two classes is contained in the minuend.  Deduction form
     of ~ difss .  (Contributed by David Moews, 1-May-2017.) $)
  difssd $p |- ( ph -> ( A \ B ) C_ A ) $=
    ( cdif wss difss a1i ) BCDBEABCFG $.

  $( If a class is contained in a difference, it is contained in the minuend.
     (Contributed by David Moews, 1-May-2017.) $)
  difss2 $p |- ( A C_ ( B \ C ) -> A C_ B ) $=
    ( cdif wss id difss syl6ss ) ABCDZEZAIBJFBCGH $.

  ${
    difss2d.1 $e |- ( ph -> A C_ ( B \ C ) ) $.
    $( If a class is contained in a difference, it is contained in the
       minuend.  Deduction form of ~ difss2 .  (Contributed by David Moews,
       1-May-2017.) $)
    difss2d $p |- ( ph -> A C_ B ) $=
      ( cdif wss difss2 syl ) ABCDFGBCGEBCDHI $.
  $}

  $( Preservation of a subclass relationship by class difference.  (Contributed
     by NM, 15-Feb-2007.) $)
  ssdifss $p |- ( A C_ B -> ( A \ C ) C_ B ) $=
    ( cdif wss difss sstr mpan ) ACDZAEABEIBEACFIABGH $.

  ${
    $d x A $.
    $( Double complement under universal class.  Exercise 4.10(s) of
       [Mendelson] p. 231.  (Contributed by NM, 8-Jan-2002.) $)
    ddif $p |- ( _V \ ( _V \ A ) ) = A $=
      ( vx cvv cdif cv wcel wn wa eldif mpbiran con2bii biantrur bitr2i difeqri
      vex ) BCCADZABEZAFZQPFZGZQCFZTHSRSUARGBOZQCAIJKUATUBLMN $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Contraposition law for subsets.  (Contributed by NM, 22-Mar-1998.) $)
    ssconb $p |- ( ( A C_ C /\ B C_ C ) ->
                  ( A C_ ( C \ B ) <-> B C_ ( C \ A ) ) ) $=
      ( vx wss wa cv wcel cdif wi wal wn wb ssel pm5.1 jcab 3bitr4g eldif dfss2
      imbi2i syl2an con2b a1i anbi12d albidv ) ACEZBCEZFZDGZAHZUICBIZHZJZDKUIBH
      ZUICAIZHZJZDKAUKEBUOEUHUMUQDUHUJUICHZUNLZFZJZUNURUJLZFZJZUMUQUHUJURJZUJUS
      JZFUNURJZUNVBJZFVAVDUHVEVGVFVHUFVEVGVEVGMUGACUINBCUINVEVGOUAVFVHMUHUJUNUB
      UCUDUJURUSPUNURVBPQULUTUJUICBRTUPVCUNUICARTQUEDAUKSDBUOSQ $.

    $( Contraposition law for subsets.  Exercise 15 of [TakeutiZaring] p. 22.
       (Contributed by NM, 22-Mar-1998.) $)
    sscon $p |- ( A C_ B -> ( C \ B ) C_ ( C \ A ) ) $=
      ( vx wss cdif cv wcel wn wa ssel con3d anim2d eldif 3imtr4g ssrdv ) ABEZD
      CBFZCAFZQDGZCHZTBHZIZJUATAHZIZJTRHTSHQUCUEUAQUDUBABTKLMTCBNTCANOP $.

    $( Difference law for subsets.  (Contributed by NM, 28-May-1998.) $)
    ssdif $p |- ( A C_ B -> ( A \ C ) C_ ( B \ C ) ) $=
      ( vx wss cdif cv wcel wn wa ssel anim1d eldif 3imtr4g ssrdv ) ABEZDACFZBC
      FZPDGZAHZSCHIZJSBHZUAJSQHSRHPTUBUAABSKLSACMSBCMNO $.
  $}

  ${
    ssdifd.1 $e |- ( ph -> A C_ B ) $.
    $( If ` A ` is contained in ` B ` , then ` ( A \ C ) ` is contained in
       ` ( B \ C ) ` .  Deduction form of ~ ssdif .  (Contributed by David
       Moews, 1-May-2017.) $)
    ssdifd $p |- ( ph -> ( A \ C ) C_ ( B \ C ) ) $=
      ( wss cdif ssdif syl ) ABCFBDGCDGFEBCDHI $.

    $( If ` A ` is contained in ` B ` , then ` ( C \ B ) ` is contained in
       ` ( C \ A ) ` .  Deduction form of ~ sscon .  (Contributed by David
       Moews, 1-May-2017.) $)
    sscond $p |- ( ph -> ( C \ B ) C_ ( C \ A ) ) $=
      ( wss cdif sscon syl ) ABCFDCGDBGFEBCDHI $.

    $( If ` A ` is contained in ` B ` , then ` ( A \ C ) ` is also contained in
       ` B ` .  Deduction form of ~ ssdifss .  (Contributed by David Moews,
       1-May-2017.) $)
    ssdifssd $p |- ( ph -> ( A \ C ) C_ B ) $=
      ( wss cdif ssdifss syl ) ABCFBDGCFEBCDHI $.

    ssdif2d.2 $e |- ( ph -> C C_ D ) $.
    $( If ` A ` is contained in ` B ` and ` C ` is contained in ` D ` , then
       ` ( A \ D ) ` is contained in ` ( B \ C ) ` .  Deduction form.
       (Contributed by David Moews, 1-May-2017.) $)
    ssdif2d $p |- ( ph -> ( A \ D ) C_ ( B \ C ) ) $=
      ( cdif sscond ssdifd sstrd ) ABEHBDHCDHADEBGIABCDFJK $.
  $}

  $( Restricted universal quantification on a class difference in terms of an
     implication.  (Contributed by Alexander van der Vekens, 3-Jan-2018.) $)
  raldifb $p |- ( A. x e. A ( x e/ B -> ph ) <-> A. x e. ( A \ B ) ph ) $=
    ( cv wnel wi cdif wcel wa impexp bicomi wn df-nel anbi2i eldif bitri imbi1i
    ralbii2 ) BEZDFZAGZABCCDHZTCIZUBGZUDUAJZAGZTUCIZAGUGUEUDUAAKLUFUHAUFUDTDIMZ
    JZUHUAUIUDTDNOUHUJTCDPLQRQS $.

$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
      The union of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Expansion of membership in class union.  Theorem 12 of [Suppes] p. 25.
       (Contributed by NM, 7-Aug-1994.) $)
    elun $p |- ( A e. ( B u. C ) <-> ( A e. B \/ A e. C ) ) $=
      ( vx cun wcel cvv wo elex jaoi wceq eleq1 orbi12d df-un elab2g pm5.21nii
      cv ) ABCEZFAGFZABFZACFZHZARITSUAABIACIJDQZBFZUCCFZHUBDARGUCAKUDTUEUAUCABL
      UCACLMDBCNOP $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    uneqri.1 $e |- ( ( x e. A \/ x e. B ) <-> x e. C ) $.
    $( Inference from membership to union.  (Contributed by NM,
       21-Jun-1993.) $)
    uneqri $p |- ( A u. B ) = C $=
      ( cun cv wcel wo elun bitri eqriv ) ABCFZDAGZMHNBHNCHINDHNBCJEKL $.
  $}

  ${
    $d x A $.
    $( Idempotent law for union of classes.  Theorem 23 of [Suppes] p. 27.
       (Contributed by NM, 21-Jun-1993.) $)
    unidm $p |- ( A u. A ) = A $=
      ( vx cv wcel oridm uneqri ) BAAABCADEF $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Commutative law for union of classes.  Exercise 6 of [TakeutiZaring]
       p. 17.  (Contributed by NM, 25-Jun-1998.)  (Proof shortened by Andrew
       Salmon, 26-Jun-2011.) $)
    uncom $p |- ( A u. B ) = ( B u. A ) $=
      ( vx cun cv wcel wo orcom elun bitr4i uneqri ) CABBADZCEZAFZMBFZGONGMLFNO
      HMBAIJK $.
  $}

  ${
    $( If a class equals the union of two other classes, then it equals the
       union of those two classes commuted. ~ equncom was automatically derived
       from ~ equncomVD using the tools program
       translate_without_overwriting.cmd and minimizing.  (Contributed by Alan
       Sare, 18-Feb-2012.) $)
    equncom $p |- ( A = ( B u. C ) <-> A = ( C u. B ) ) $=
      ( cun uncom eqeq2i ) BCDCBDABCEF $.
  $}

  ${
    equncomi.1 $e |- A = ( B u. C ) $.
    $( Inference form of ~ equncom . ~ equncomi was automatically derived from
       ~ equncomiVD using the tools program translate_without_overwriting.cmd
       and minimizing.  (Contributed by Alan Sare, 18-Feb-2012.) $)
    equncomi $p |- A = ( C u. B ) $=
      ( cun wceq equncom mpbi ) ABCEFACBEFDABCGH $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Equality theorem for union of two classes.  (Contributed by NM,
       15-Jul-1993.) $)
    uneq1 $p |- ( A = B -> ( A u. C ) = ( B u. C ) ) $=
      ( vx wceq cun cv wcel wo eleq2 orbi1d elun 3bitr4g eqrdv ) ABEZDACFZBCFZO
      DGZAHZRCHZIRBHZTIRPHRQHOSUATABRJKRACLRBCLMN $.
  $}

  $( Equality theorem for the union of two classes.  (Contributed by NM,
     5-Aug-1993.) $)
  uneq2 $p |- ( A = B -> ( C u. A ) = ( C u. B ) ) $=
    ( wceq cun uneq1 uncom 3eqtr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  $( Equality theorem for union of two classes.  (Contributed by NM,
     29-Mar-1998.) $)
  uneq12 $p |- ( ( A = B /\ C = D ) -> ( A u. C ) = ( B u. D ) ) $=
    ( wceq cun uneq1 uneq2 sylan9eq ) ABECDEACFBCFBDFABCGCDBHI $.

  ${
    uneq1i.1 $e |- A = B $.
    $( Inference adding union to the right in a class equality.  (Contributed
       by NM, 30-Aug-1993.) $)
    uneq1i $p |- ( A u. C ) = ( B u. C ) $=
      ( wceq cun uneq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Inference adding union to the left in a class equality.  (Contributed by
       NM, 30-Aug-1993.) $)
    uneq2i $p |- ( C u. A ) = ( C u. B ) $=
      ( wceq cun uneq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      uneq12i.2 $e |- C = D $.
      $( Equality inference for union of two classes.  (Contributed by NM,
         12-Aug-2004.)  (Proof shortened by Eric Schmidt, 26-Jan-2007.) $)
      uneq12i $p |- ( A u. C ) = ( B u. D ) $=
        ( wceq cun uneq12 mp2an ) ABGCDGACHBDHGEFABCDIJ $.
    $}
  $}

  ${
    uneq1d.1 $e |- ( ph -> A = B ) $.
    $( Deduction adding union to the right in a class equality.  (Contributed
       by NM, 29-Mar-1998.) $)
    uneq1d $p |- ( ph -> ( A u. C ) = ( B u. C ) ) $=
      ( wceq cun uneq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Deduction adding union to the left in a class equality.  (Contributed by
       NM, 29-Mar-1998.) $)
    uneq2d $p |- ( ph -> ( C u. A ) = ( C u. B ) ) $=
      ( wceq cun uneq2 syl ) ABCFDBGDCGFEBCDHI $.

    ${
      uneq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for union of two classes.  (Contributed by NM,
         29-Sep-2004.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
      uneq12d $p |- ( ph -> ( A u. C ) = ( B u. D ) ) $=
        ( wceq cun uneq12 syl2anc ) ABCHDEHBDICEIHFGBCDEJK $.
    $}
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    nfun.1 $e |- F/_ x A $.
    nfun.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for the union of classes.
       (Contributed by NM, 15-Sep-2003.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfun $p |- F/_ x ( A u. B ) $=
      ( vy cun cv wcel wo cab df-un nfcri nfor nfab nfcxfr ) ABCGFHZBIZQCIZJZFK
      FBCLTAFRSAAFBDMAFCEMNOP $.
  $}

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( Associative law for union of classes.  Exercise 8 of [TakeutiZaring]
       p. 17.  (Contributed by NM, 3-May-1994.)  (Proof shortened by Andrew
       Salmon, 26-Jun-2011.) $)
    unass $p |- ( ( A u. B ) u. C ) = ( A u. ( B u. C ) ) $=
      ( vx cun cv wcel wo elun orbi2i orbi1i orass bitr2i 3bitrri uneqri ) DABE
      ZCABCEZEZDFZRGSAGZSQGZHTSBGZSCGZHZHZSPGZUCHZSAQIUAUDTSBCIJUGTUBHZUCHUEUFU
      HUCSABIKTUBUCLMNO $.
  $}

  $( A rearrangement of union.  (Contributed by NM, 12-Aug-2004.) $)
  un12 $p |- ( A u. ( B u. C ) ) = ( B u. ( A u. C ) ) $=
    ( cun uncom uneq1i unass 3eqtr3i ) ABDZCDBADZCDABCDDBACDDIJCABEFABCGBACGH
    $.

  $( A rearrangement of union.  (Contributed by NM, 12-Aug-2004.)  (Proof
     shortened by Andrew Salmon, 26-Jun-2011.) $)
  un23 $p |- ( ( A u. B ) u. C ) = ( ( A u. C ) u. B ) $=
    ( cun unass un12 uncom 3eqtri ) ABDCDABCDDBACDZDIBDABCEABCFBIGH $.

  $( A rearrangement of the union of 4 classes.  (Contributed by NM,
     12-Aug-2004.) $)
  un4 $p |- ( ( A u. B ) u. ( C u. D ) ) =
            ( ( A u. C ) u. ( B u. D ) ) $=
    ( cun un12 uneq2i unass 3eqtr4i ) ABCDEZEZEACBDEZEZEABEJEACELEKMABCDFGABJHA
    CLHI $.

  $( Union distributes over itself.  (Contributed by NM, 17-Aug-2004.) $)
  unundi $p |- ( A u. ( B u. C ) ) = ( ( A u. B ) u. ( A u. C ) ) $=
    ( cun unidm uneq1i un4 eqtr3i ) AADZBCDZDAJDABDACDDIAJAEFAABCGH $.

  $( Union distributes over itself.  (Contributed by NM, 17-Aug-2004.) $)
  unundir $p |- ( ( A u. B ) u. C ) = ( ( A u. C ) u. ( B u. C ) ) $=
    ( cun unidm uneq2i un4 eqtr3i ) ABDZCCDZDICDACDBCDDJCICEFABCCGH $.

  ${
    $d x A $.  $d x B $.
    $( Subclass relationship for union of classes.  Theorem 25 of [Suppes]
       p. 27.  (Contributed by NM, 5-Aug-1993.) $)
    ssun1 $p |- A C_ ( A u. B ) $=
      ( vx cun cv wcel wo orc elun sylibr ssriv ) CAABDZCEZAFZNMBFZGMLFNOHMABIJ
      K $.
  $}

  $( Subclass relationship for union of classes.  (Contributed by NM,
     30-Aug-1993.) $)
  ssun2 $p |- A C_ ( B u. A ) $=
    ( cun ssun1 uncom sseqtri ) AABCBACABDABEF $.

  $( Subclass law for union of classes.  (Contributed by NM, 5-Aug-1993.) $)
  ssun3 $p |- ( A C_ B -> A C_ ( B u. C ) ) $=
    ( wss cun ssun1 sstr2 mpi ) ABDBBCEZDAIDBCFABIGH $.

  $( Subclass law for union of classes.  (Contributed by NM, 14-Aug-1994.) $)
  ssun4 $p |- ( A C_ B -> A C_ ( C u. B ) ) $=
    ( wss cun ssun2 sstr2 mpi ) ABDBCBEZDAIDBCFABIGH $.

  $( Membership law for union of classes.  (Contributed by NM, 5-Aug-1993.) $)
  elun1 $p |- ( A e. B -> A e. ( B u. C ) ) $=
    ( cun ssun1 sseli ) BBCDABCEF $.

  $( Membership law for union of classes.  (Contributed by NM, 30-Aug-1993.) $)
  elun2 $p |- ( A e. B -> A e. ( C u. B ) ) $=
    ( cun ssun2 sseli ) BCBDABCEF $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Subclass law for union of classes.  (Contributed by NM, 14-Oct-1999.)
       (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    unss1 $p |- ( A C_ B -> ( A u. C ) C_ ( B u. C ) ) $=
      ( vx wss cun cv wcel wo ssel orim1d elun 3imtr4g ssrdv ) ABEZDACFZBCFZODG
      ZAHZRCHZIRBHZTIRPHRQHOSUATABRJKRACLRBCLMN $.

    $( A relationship between subclass and union.  Theorem 26 of [Suppes]
       p. 27.  (Contributed by NM, 30-Aug-1993.)  (Proof shortened by Andrew
       Salmon, 26-Jun-2011.) $)
    ssequn1 $p |- ( A C_ B <-> ( A u. B ) = B ) $=
      ( vx cv wcel wi wal cun wb wceq wo bicom pm4.72 elun bibi1i 3bitr4i albii
      wss dfss2 dfcleq ) CDZAEZUABEZFZCGUAABHZEZUCIZCGABRUEBJUDUGCUCUBUCKZIUHUC
      IUDUGUCUHLUBUCMUFUHUCUAABNOPQCABSCUEBTP $.
  $}

  $( Subclass law for union of classes.  Exercise 7 of [TakeutiZaring] p. 18.
     (Contributed by NM, 14-Oct-1999.) $)
  unss2 $p |- ( A C_ B -> ( C u. A ) C_ ( C u. B ) ) $=
    ( wss cun unss1 uncom 3sstr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  $( Subclass law for union of classes.  (Contributed by NM, 2-Jun-2004.) $)
  unss12 $p |- ( ( A C_ B /\ C C_ D ) -> ( A u. C ) C_ ( B u. D ) ) $=
    ( wss cun unss1 unss2 sylan9ss ) ABECDEACFBCFBDFABCGCDBHI $.

  $( A relationship between subclass and union.  (Contributed by NM,
     13-Jun-1994.) $)
  ssequn2 $p |- ( A C_ B <-> ( B u. A ) = B ) $=
    ( wss cun wceq ssequn1 uncom eqeq1i bitri ) ABCABDZBEBADZBEABFJKBABGHI $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( The union of two subclasses is a subclass.  Theorem 27 of [Suppes] p. 27
       and its converse.  (Contributed by NM, 11-Jun-2004.) $)
    unss $p |- ( ( A C_ C /\ B C_ C ) <-> ( A u. B ) C_ C ) $=
      ( vx cun wss cv wcel wi wal wa dfss2 19.26 elun imbi1i jaob bitri anbi12i
      wo albii 3bitr4i bitr2i ) ABEZCFDGZUCHZUDCHZIZDJZACFZBCFZKZDUCCLUDAHZUFIZ
      UDBHZUFIZKZDJUMDJZUODJZKUHUKUMUODMUGUPDUGULUNSZUFIUPUEUSUFUDABNOULUFUNPQT
      UIUQUJURDACLDBCLRUAUB $.
  $}

  ${
    unssi.1 $e |- A C_ C $.
    unssi.2 $e |- B C_ C $.
    $( An inference showing the union of two subclasses is a subclass.
       (Contributed by Raph Levien, 10-Dec-2002.) $)
    unssi $p |- ( A u. B ) C_ C $=
      ( wss wa cun pm3.2i unss mpbi ) ACFZBCFZGABHCFLMDEIABCJK $.
  $}

  ${
    unssd.1 $e |- ( ph -> A C_ C ) $.
    unssd.2 $e |- ( ph -> B C_ C ) $.
    $( A deduction showing the union of two subclasses is a subclass.
       (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    unssd $p |- ( ph -> ( A u. B ) C_ C ) $=
      ( wss cun wa unss biimpi syl2anc ) ABDGZCDGZBCHDGZEFMNIOBCDJKL $.
  $}

  ${
    unssad.1 $e |- ( ph -> ( A u. B ) C_ C ) $.
    $( If ` ( A u. B ) ` is contained in ` C ` , so is ` A ` .  One-way
       deduction form of ~ unss .  Partial converse of ~ unssd .  (Contributed
       by David Moews, 1-May-2017.) $)
    unssad $p |- ( ph -> A C_ C ) $=
      ( wss cun wa unss sylibr simpld ) ABDFZCDFZABCGDFLMHEBCDIJK $.

    $( If ` ( A u. B ) ` is contained in ` C ` , so is ` B ` .  One-way
       deduction form of ~ unss .  Partial converse of ~ unssd .  (Contributed
       by David Moews, 1-May-2017.) $)
    unssbd $p |- ( ph -> B C_ C ) $=
      ( wss cun wa unss sylibr simprd ) ABDFZCDFZABCGDFLMHEBCDIJK $.
  $}

  $( A condition that implies inclusion in the union of two classes.
     (Contributed by NM, 23-Nov-2003.) $)
  ssun $p |- ( ( A C_ B \/ A C_ C ) -> A C_ ( B u. C ) ) $=
    ( wss cun ssun3 ssun4 jaoi ) ABDABCEDACDABCFACBGH $.

  $( Restricted existential quantification over union.  (Contributed by Jeff
     Madsen, 5-Jan-2011.) $)
  rexun $p |- ( E. x e. ( A u. B ) ph <->
                          ( E. x e. A ph \/ E. x e. B ph ) ) $=
    ( cun wrex cv wcel wa wo df-rex 19.43 elun anbi1i andir bitri exbii orbi12i
    wex 3bitr4i ) ABCDEZFBGZUAHZAIZBSZABCFZABDFZJZABUAKUBCHZAIZUBDHZAIZJZBSUJBS
    ZULBSZJUEUHUJULBLUDUMBUDUIUKJZAIUMUCUPAUBCDMNUIUKAOPQUFUNUGUOABCKABDKRTP $.

  $( Restricted quantification over a union.  (Contributed by Scott Fenton,
     12-Apr-2011.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
  ralunb $p |- ( A. x e. ( A u. B ) ph <->
                 ( A. x e. A ph /\ A. x e. B ph ) ) $=
    ( cv cun wcel wi wal wa wral wo elun imbi1i jaob bitri albii df-ral anbi12i
    19.26 3bitr4i ) BEZCDFZGZAHZBIZUBCGZAHZBIZUBDGZAHZBIZJZABUCKABCKZABDKZJUFUH
    UKJZBIUMUEUPBUEUGUJLZAHUPUDUQAUBCDMNUGAUJOPQUHUKBTPABUCRUNUIUOULABCRABDRSUA
    $.

  $( Restricted quantification over union.  (Contributed by Jeff Madsen,
     2-Sep-2009.) $)
  ralun $p |- ( ( A. x e. A ph /\ A. x e. B ph ) -> A. x e. ( A u. B ) ph ) $=
    ( cun wral wa ralunb biimpri ) ABCDEFABCFABDFGABCDHI $.

$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
      The intersection of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Expansion of membership in an intersection of two classes.  Theorem 12
       of [Suppes] p. 25.  (Contributed by NM, 29-Apr-1994.) $)
    elin $p |- ( A e. ( B i^i C ) <-> ( A e. B /\ A e. C ) ) $=
      ( vx cin wcel wa elex adantl cv wceq eleq1 anbi12d df-in elab2g pm5.21nii
      cvv ) ABCEZFAQFZABFZACFZGZARHUASTACHIDJZBFZUCCFZGUBDARQUCAKUDTUEUAUCABLUC
      ACLMDBCNOP $.
  $}

  ${
    elind.1 $e |- ( ph -> X e. A ) $.
    elind.2 $e |- ( ph -> X e. B ) $.
    $( Deduce membership in an intersection of two classes.  (Contributed by
       Jonathan Ben-Naim, 3-Jun-2011.) $)
    elind $p |- ( ph -> X e. ( A i^i B ) ) $=
      ( wcel cin elin sylanbrc ) ADBGDCGDBCHGEFDBCIJ $.
  $}

  ${
    elin2.x $e |- X = ( B i^i C ) $.
    $( Membership in a class defined as an intersection.  (Contributed by
       Stefan O'Rear, 29-Mar-2015.) $)
    elin2 $p |- ( A e. X <-> ( A e. B /\ A e. C ) ) $=
      ( wcel cin wa eleq2i elin bitri ) ADFABCGZFABFACFHDLAEIABCJK $.
  $}

  ${
    elin3.x $e |- X = ( ( B i^i C ) i^i D ) $.
    $( Membership in a class defined as a ternary intersection.  (Contributed
       by Stefan O'Rear, 29-Mar-2015.) $)
    elin3 $p |- ( A e. X <-> ( A e. B /\ A e. C /\ A e. D ) ) $=
      ( cin wcel wa w3a elin anbi1i elin2 df-3an 3bitr4i ) ABCGZHZADHZIABHZACHZ
      IZRIAEHSTRJQUARABCKLAPDEFMSTRNO $.
  $}

  ${
    $d A x $.  $d B x $.
    $( Commutative law for intersection of classes.  Exercise 7 of
       [TakeutiZaring] p. 17.  (Contributed by NM, 21-Jun-1993.) $)
    incom $p |- ( A i^i B ) = ( B i^i A ) $=
      ( vx cin cv wcel wa ancom elin 3bitr4i eqriv ) CABDZBADZCEZAFZNBFZGPOGNLF
      NMFOPHNABINBAIJK $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    ineqri.1 $e |- ( ( x e. A /\ x e. B ) <-> x e. C ) $.
    $( Inference from membership to intersection.  (Contributed by NM,
       21-Jun-1993.) $)
    ineqri $p |- ( A i^i B ) = C $=
      ( cin cv wcel wa elin bitri eqriv ) ABCFZDAGZMHNBHNCHINDHNBCJEKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Equality theorem for intersection of two classes.  (Contributed by NM,
       14-Dec-1993.) $)
    ineq1 $p |- ( A = B -> ( A i^i C ) = ( B i^i C ) ) $=
      ( vx wceq cin cv wcel wa eleq2 anbi1d elin 3bitr4g eqrdv ) ABEZDACFZBCFZO
      DGZAHZRCHZIRBHZTIRPHRQHOSUATABRJKRACLRBCLMN $.
  $}

  $( Equality theorem for intersection of two classes.  (Contributed by NM,
     26-Dec-1993.) $)
  ineq2 $p |- ( A = B -> ( C i^i A ) = ( C i^i B ) ) $=
    ( wceq cin ineq1 incom 3eqtr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  $( Equality theorem for intersection of two classes.  (Contributed by NM,
     8-May-1994.) $)
  ineq12 $p |- ( ( A = B /\ C = D ) -> ( A i^i C ) = ( B i^i D ) ) $=
    ( wceq cin ineq1 ineq2 sylan9eq ) ABECDEACFBCFBDFABCGCDBHI $.

  ${
    ineq1i.1 $e |- A = B $.
    $( Equality inference for intersection of two classes.  (Contributed by NM,
       26-Dec-1993.) $)
    ineq1i $p |- ( A i^i C ) = ( B i^i C ) $=
      ( wceq cin ineq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for intersection of two classes.  (Contributed by NM,
       26-Dec-1993.) $)
    ineq2i $p |- ( C i^i A ) = ( C i^i B ) $=
      ( wceq cin ineq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      ineq12i.2 $e |- C = D $.
      $( Equality inference for intersection of two classes.  (Contributed by
         NM, 24-Jun-2004.)  (Proof shortened by Eric Schmidt, 26-Jan-2007.) $)
      ineq12i $p |- ( A i^i C ) = ( B i^i D ) $=
        ( wceq cin ineq12 mp2an ) ABGCDGACHBDHGEFABCDIJ $.
    $}
  $}

  ${
    ineq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for intersection of two classes.  (Contributed by NM,
       10-Apr-1994.) $)
    ineq1d $p |- ( ph -> ( A i^i C ) = ( B i^i C ) ) $=
      ( wceq cin ineq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for intersection of two classes.  (Contributed by NM,
       10-Apr-1994.) $)
    ineq2d $p |- ( ph -> ( C i^i A ) = ( C i^i B ) ) $=
      ( wceq cin ineq2 syl ) ABCFDBGDCGFEBCDHI $.

    ${
      ineq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for intersection of two classes.  (Contributed by
         NM, 24-Jun-2004.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
      ineq12d $p |- ( ph -> ( A i^i C ) = ( B i^i D ) ) $=
        ( wceq cin ineq12 syl2anc ) ABCHDEHBDICEIHFGBCDEJK $.
    $}

    ${
      ineqan12d.2 $e |- ( ps -> C = D ) $.
      $( Equality deduction for intersection of two classes.  (Contributed by
         NM, 7-Feb-2007.) $)
      ineqan12d $p |- ( ( ph /\ ps ) -> ( A i^i C ) = ( B i^i D ) ) $=
        ( wceq cin ineq12 syl2an ) ACDIEFICEJDFJIBGHCDEFKL $.
    $}
  $}

  $( A frequently-used variant of subclass definition ~ df-ss .  (Contributed
     by NM, 10-Jan-2015.) $)
  dfss1 $p |- ( A C_ B <-> ( B i^i A ) = A ) $=
    ( wss cin wceq df-ss incom eqeq1i bitri ) ABCABDZAEBADZAEABFJKAABGHI $.

  $( Another definition of subclasshood.  Similar to ~ df-ss , ~ dfss , and
     ~ dfss1 .  (Contributed by David Moews, 1-May-2017.) $)
  dfss5 $p |- ( A C_ B <-> A = ( B i^i A ) ) $=
    ( wss cin wceq dfss1 eqcom bitri ) ABCBADZAEAIEABFIAGH $.

  ${
    $d x y $.  $d y A $.  $d y B $.
    nfin.1 $e |- F/_ x A $.
    nfin.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for the intersection of classes.
       (Contributed by NM, 15-Sep-2003.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfin $p |- F/_ x ( A i^i B ) $=
      ( vy cin cv wcel crab dfin5 nfcri nfrab nfcxfr ) ABCGFHCIZFBJFBCKOAFBAFCE
      LDMN $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x B $.
    rabbi2dva.1 $e |- ( ( ph /\ x e. A ) -> ( x e. B <-> ps ) ) $.
    $( Deduction from a wff to a restricted class abstraction.  (Contributed by
       NM, 14-Jan-2014.) $)
    rabbi2dva $p |- ( ph -> ( A i^i B ) = { x e. A | ps } ) $=
      ( cin cv wcel crab dfin5 rabbidva syl5eq ) ADEGCHEIZCDJBCDJCDEKANBCDFLM
      $.
  $}

  ${
    $d x A $.
    $( Idempotent law for intersection of classes.  Theorem 15 of [Suppes]
       p. 26.  (Contributed by NM, 5-Aug-1993.) $)
    inidm $p |- ( A i^i A ) = A $=
      ( vx cv wcel anidm ineqri ) BAAABCADEF $.
  $}

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( Associative law for intersection of classes.  Exercise 9 of
       [TakeutiZaring] p. 17.  (Contributed by NM, 3-May-1994.) $)
    inass $p |- ( ( A i^i B ) i^i C ) = ( A i^i ( B i^i C ) ) $=
      ( vx cin cv wcel wa anass elin anbi2i bitr4i anbi1i 3bitr4i ineqri ) DABE
      ZCABCEZEZDFZAGZSBGZHZSCGZHZTSQGZHZSPGZUCHSRGUDTUAUCHZHUFTUAUCIUEUHTSBCJKL
      UGUBUCSABJMSAQJNO $.
  $}

  $( A rearrangement of intersection.  (Contributed by NM, 21-Apr-2001.) $)
  in12 $p |- ( A i^i ( B i^i C ) ) = ( B i^i ( A i^i C ) ) $=
    ( cin incom ineq1i inass 3eqtr3i ) ABDZCDBADZCDABCDDBACDDIJCABEFABCGBACGH
    $.

  $( A rearrangement of intersection.  (Contributed by NM, 21-Apr-2001.)
     (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  in32 $p |- ( ( A i^i B ) i^i C ) = ( ( A i^i C ) i^i B ) $=
    ( cin inass in12 incom 3eqtri ) ABDCDABCDDBACDZDIBDABCEABCFBIGH $.

  $( A rearrangement of intersection.  (Contributed by NM, 27-Aug-2012.) $)
  in13 $p |- ( A i^i ( B i^i C ) ) = ( C i^i ( B i^i A ) ) $=
    ( cin in32 incom 3eqtr4i ) BCDZADBADZCDAHDCIDBCAEAHFCIFG $.

  $( A rearrangement of intersection.  (Contributed by NM, 27-Aug-2012.) $)
  in31 $p |- ( ( A i^i B ) i^i C ) = ( ( C i^i B ) i^i A ) $=
    ( cin in12 incom 3eqtr4i ) CABDZDACBDZDHCDIADCABEHCFIAFG $.

  $( Rotate the intersection of 3 classes.  (Contributed by NM,
     27-Aug-2012.) $)
  inrot $p |- ( ( A i^i B ) i^i C ) = ( ( C i^i A ) i^i B ) $=
    ( cin in31 in32 eqtri ) ABDCDCBDADCADBDABCECBAFG $.

  $( Rearrangement of intersection of 4 classes.  (Contributed by NM,
     21-Apr-2001.) $)
  in4 $p |- ( ( A i^i B ) i^i ( C i^i D ) ) =
            ( ( A i^i C ) i^i ( B i^i D ) ) $=
    ( cin in12 ineq2i inass 3eqtr4i ) ABCDEZEZEACBDEZEZEABEJEACELEKMABCDFGABJHA
    CLHI $.

  $( Intersection distributes over itself.  (Contributed by NM, 6-May-1994.) $)
  inindi $p |- ( A i^i ( B i^i C ) ) = ( ( A i^i B ) i^i ( A i^i C ) ) $=
    ( cin inidm ineq1i in4 eqtr3i ) AADZBCDZDAJDABDACDDIAJAEFAABCGH $.

  $( Intersection distributes over itself.  (Contributed by NM,
     17-Aug-2004.) $)
  inindir $p |- ( ( A i^i B ) i^i C ) = ( ( A i^i C ) i^i ( B i^i C ) ) $=
    ( cin inidm ineq2i in4 eqtr3i ) ABDZCCDZDICDACDBCDDJCICEFABCCGH $.

  $( A relationship between subclass and intersection.  Similar to Exercise 9
     of [TakeutiZaring] p. 18.  (Contributed by NM, 17-May-1994.) $)
  sseqin2 $p |- ( A C_ B <-> ( B i^i A ) = A ) $=
    ( dfss1 ) ABC $.

  ${
    $d x A $.  $d x B $.
    $( The intersection of two classes is a subset of one of them.  Part of
       Exercise 12 of [TakeutiZaring] p. 18.  (Contributed by NM,
       27-Apr-1994.) $)
    inss1 $p |- ( A i^i B ) C_ A $=
      ( vx cin cv wcel elin simplbi ssriv ) CABDZACEZJFKAFKBFKABGHI $.
  $}

  $( The intersection of two classes is a subset of one of them.  Part of
     Exercise 12 of [TakeutiZaring] p. 18.  (Contributed by NM,
     27-Apr-1994.) $)
  inss2 $p |- ( A i^i B ) C_ B $=
    ( cin incom inss1 eqsstr3i ) ABCBACBBADBAEF $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Subclass of intersection.  Theorem 2.8(vii) of [Monk1] p. 26.
       (Contributed by NM, 15-Jun-2004.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    ssin $p |- ( ( A C_ B /\ A C_ C ) <-> A C_ ( B i^i C ) ) $=
      ( vx cv wcel wi wal wa cin wss elin imbi2i albii jcab 19.26 3bitrri dfss2
      anbi12i 3bitr4i ) DEZAFZUABFZGZDHZUBUACFZGZDHZIZUBUABCJZFZGZDHZABKZACKZIA
      UJKUMUBUCUFIZGZDHUDUGIZDHUIULUQDUKUPUBUABCLMNUQURDUBUCUFONUDUGDPQUNUEUOUH
      DABRDACRSDAUJRT $.
  $}

  ${
    ssini.1 $e |- A C_ B $.
    ssini.2 $e |- A C_ C $.
    $( An inference showing that a subclass of two classes is a subclass of
       their intersection.  (Contributed by NM, 24-Nov-2003.) $)
    ssini $p |- A C_ ( B i^i C ) $=
      ( wss wa cin pm3.2i ssin mpbi ) ABFZACFZGABCHFLMDEIABCJK $.
  $}

  ${
    ssind.1 $e |- ( ph -> A C_ B ) $.
    ssind.2 $e |- ( ph -> A C_ C ) $.
    $( A deduction showing that a subclass of two classes is a subclass of
       their intersection.  (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    ssind $p |- ( ph -> A C_ ( B i^i C ) ) $=
      ( wss cin wa ssin biimpi syl2anc ) ABCGZBDGZBCDHGZEFMNIOBCDJKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Add right intersection to subclass relation.  (Contributed by NM,
       16-Aug-1994.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    ssrin $p |- ( A C_ B -> ( A i^i C ) C_ ( B i^i C ) ) $=
      ( vx wss cin cv wcel wa ssel anim1d elin 3imtr4g ssrdv ) ABEZDACFZBCFZODG
      ZAHZRCHZIRBHZTIRPHRQHOSUATABRJKRACLRBCLMN $.

    $( Add left intersection to subclass relation.  (Contributed by NM,
       19-Oct-1999.) $)
    sslin $p |- ( A C_ B -> ( C i^i A ) C_ ( C i^i B ) ) $=
      ( wss cin ssrin incom 3sstr4g ) ABDACEBCECAECBEABCFCAGCBGH $.
  $}

  $( Intersection of subclasses.  (Contributed by NM, 5-May-2000.) $)
  ss2in $p |- ( ( A C_ B /\ C C_ D ) -> ( A i^i C ) C_ ( B i^i D ) ) $=
    ( wss cin ssrin sslin sylan9ss ) ABECDEACFBCFBDFABCGCDBHI $.

  $( Intersection preserves subclass relationship.  (Contributed by NM,
     14-Sep-1999.) $)
  ssinss1 $p |- ( A C_ C -> ( A i^i B ) C_ C ) $=
    ( cin wss wi inss1 sstr2 ax-mp ) ABDZAEACEJCEFABGJACHI $.

  $( Inclusion of an intersection of two classes.  (Contributed by NM,
     30-Oct-2014.) $)
  inss $p |- ( ( A C_ C \/ B C_ C ) -> ( A i^i B ) C_ C ) $=
    ( wss cin ssinss1 incom syl5eqss jaoi ) ACDABEZCDBCDZABCFKJBAECABGBACFHI $.

$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
      Combinations of difference, union, and intersection of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  $( Absorption law for union.  (Contributed by NM, 16-Apr-2006.) $)
  unabs $p |- ( A u. ( A i^i B ) ) = A $=
    ( cin wss cun wceq inss1 ssequn2 mpbi ) ABCZADAJEAFABGJAHI $.

  $( Absorption law for intersection.  (Contributed by NM, 16-Apr-2006.) $)
  inabs $p |- ( A i^i ( A u. B ) ) = A $=
    ( cun wss cin wceq ssun1 df-ss mpbi ) AABCZDAJEAFABGAJHI $.

  $( Negation of subclass expressed in terms of intersection and proper
     subclass.  (Contributed by NM, 30-Jun-2004.)  (Proof shortened by Andrew
     Salmon, 26-Jun-2011.) $)
  nssinpss $p |- ( -. A C_ B <-> ( A i^i B ) C. A ) $=
    ( cin wne wss wa wn wpss inss1 biantrur df-ss necon3bbii df-pss 3bitr4i ) A
    BCZADZOAEZPFABEZGOAHQPABIJROAABKLOAMN $.

  $( Negation of subclass expressed in terms of proper subclass and union.
     (Contributed by NM, 15-Sep-2004.) $)
  nsspssun $p |- ( -. A C_ B <-> B C. ( A u. B ) ) $=
    ( wss wn cun wa wpss ssun2 biantrur ssid biantru unss bitri xchnxbir dfpss3
    bitr4i ) ABCZDBABEZCZRBCZDZFZBRGTUBQSUABAHIQQBBCZFTUCQBJKABBLMNBROP $.

  ${
    $d x A $.  $d x B $.
    $( Subclass defined in terms of class difference.  See comments under
       ~ dfun2 .  (Contributed by NM, 22-Mar-1998.)  (Proof shortened by Andrew
       Salmon, 26-Jun-2011.) $)
    dfss4 $p |- ( A C_ B <-> ( B \ ( B \ A ) ) = A ) $=
      ( vx wss wceq cdif sseqin2 cv wcel wn wa eldif notbii anbi2i wi elin abai
      cin iman bitr4i 3bitri difeqri eqeq1i ) ABDBARZAEBBAFZFZAEABGUFUDACBUEUDC
      HZBIZUGUEIZJZKUHUHUGAIZJKZJZKZUGUDIZUJUMUHUIULUGBALMNUOUHUKKUHUHUKOZKUNUG
      BAPUHUKQUPUMUHUHUKSNUATUBUCT $.

    $( An alternate definition of the union of two classes in terms of class
       difference, requiring no dummy variables.  Along with ~ dfin2 and
       ~ dfss4 it shows we can express union, intersection, and subset directly
       in terms of the single ""primitive"" operation ` \ ` (class difference).
       (Contributed by NM, 10-Jun-2004.) $)
    dfun2 $p |- ( A u. B ) = ( _V \ ( ( _V \ A ) \ B ) ) $=
      ( vx cvv cdif cv wcel wo wn wa eldif mpbiran anbi1i ioran 3bitr4i con2bii
      vex bitr4i uneqri ) CABDDAEZBEZEZCFZAGZUCBGZHZUCUAGZIZUCUBGZUGUFUCTGZUEIZ
      JUDIZUKJUGUFIUJULUKUJUCDGZULCQZUCDAKLMUCTBKUDUENOPUIUMUHUNUCDUAKLRS $.

    $( An alternate definition of the intersection of two classes in terms of
       class difference, requiring no dummy variables.  See comments under
       ~ dfun2 .  Another version is given by ~ dfin4 .  (Contributed by NM,
       10-Jun-2004.) $)
    dfin2 $p |- ( A i^i B ) = ( A \ ( _V \ B ) ) $=
      ( vx cvv cdif cv wcel wa vex eldif mpbiran con2bii anbi2i bitr4i ineqri
      wn ) CABADBEZEZCFZAGZSBGZHTSQGZPZHSRGUAUCTUBUAUBSDGUAPCISDBJKLMSAQJNO $.

    $( Difference with intersection.  Theorem 33 of [Suppes] p. 29.
       (Contributed by NM, 31-Mar-1998.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    difin $p |- ( A \ ( A i^i B ) ) = ( A \ B ) $=
      ( vx cin cdif cv wcel wi wn pm4.61 anclb elin imbi2i iman 3bitr2i con2bii
      wa eldif 3bitr4i difeqri ) CAABDZABEZCFZAGZUCBGZHZIUDUEIQUDUCUAGZIQZUCUBG
      UDUEJUFUHUFUDUDUEQZHUDUGHUHIUDUEKUGUIUDUCABLMUDUGNOPUCABRST $.
  $}

  $( Union defined in terms of intersection (De Morgan's law).  Definition of
     union in [Mendelson] p. 231.  (Contributed by NM, 8-Jan-2002.) $)
  dfun3 $p |- ( A u. B ) = ( _V \ ( ( _V \ A ) i^i ( _V \ B ) ) ) $=
    ( cun cvv cdif cin dfun2 dfin2 ddif difeq2i eqtr2i eqtri ) ABCDDAEZBEZEDMDB
    EZFZEABGNPDPMDOEZENMOHQBMBIJKJL $.

  $( Intersection defined in terms of union (De Morgan's law).  Similar to
     Exercise 4.10(n) of [Mendelson] p. 231.  (Contributed by NM,
     8-Jan-2002.) $)
  dfin3 $p |- ( A i^i B ) = ( _V \ ( ( _V \ A ) u. ( _V \ B ) ) ) $=
    ( cvv cdif cun cin ddif dfun2 difeq1i difeq2i eqtri dfin2 3eqtr4ri ) CCACBD
    ZDZDZDOCCADZNEZDABFOGRPCRCCQDZNDZDPQNHTOCSANAGIJKJABLM $.

  $( Alternate definition of the intersection of two classes.  Exercise 4.10(q)
     of [Mendelson] p. 231.  (Contributed by NM, 25-Nov-2003.) $)
  dfin4 $p |- ( A i^i B ) = ( A \ ( A \ B ) ) $=
    ( cin cdif wss wceq inss1 dfss4 mpbi difin difeq2i eqtr3i ) AAABCZDZDZMAABD
    ZDMAEOMFABGMAHINPAABJKL $.

  $( Intersection with universal complement.  Remark in [Stoll] p. 20.
     (Contributed by NM, 17-Aug-2004.) $)
  invdif $p |- ( A i^i ( _V \ B ) ) = ( A \ B ) $=
    ( cvv cdif cin dfin2 ddif difeq2i eqtri ) ACBDZEACJDZDABDAJFKBABGHI $.

  $( Intersection with class difference.  Theorem 34 of [Suppes] p. 29.
     (Contributed by NM, 17-Aug-2004.) $)
  indif $p |- ( A i^i ( A \ B ) ) = ( A \ B ) $=
    ( cdif cin dfin4 difeq2i difin 3eqtr2i ) AABCZDAAICZCAABDZCIAIEKJAABEFABGH
    $.

  $( Bring an intersection in and out of a class difference.  (Contributed by
     Jeff Hankins, 15-Jul-2009.) $)
  indif2 $p |- ( A i^i ( B \ C ) ) = ( ( A i^i B ) \ C ) $=
    ( cin cvv cdif inass invdif ineq2i 3eqtr3ri ) ABDZECFZDABLDZDKCFABCFZDABLGK
    CHMNABCHIJ $.

  $( Bring an intersection in and out of a class difference.  (Contributed by
     Mario Carneiro, 15-May-2015.) $)
  indif1 $p |- ( ( A \ C ) i^i B ) = ( ( A i^i B ) \ C ) $=
    ( cdif cin indif2 incom difeq1i 3eqtr3i ) BACDZEBAEZCDJBEABEZCDBACFBJGKLCBA
    GHI $.

  $( Commutation law for intersection and difference.  (Contributed by Scott
     Fenton, 18-Feb-2013.) $)
  indifcom $p |- ( A i^i ( B \ C ) ) = ( B i^i ( A \ C ) ) $=
    ( cin cdif incom difeq1i indif2 3eqtr4i ) ABDZCEBADZCEABCEDBACEDJKCABFGABCH
    BACHI $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Distributive law for intersection over union.  Exercise 10 of
       [TakeutiZaring] p. 17.  (Contributed by NM, 30-Sep-2002.)  (Proof
       shortened by Andrew Salmon, 26-Jun-2011.) $)
    indi $p |- ( A i^i ( B u. C ) ) = ( ( A i^i B ) u. ( A i^i C ) ) $=
      ( vx cun cin cv wcel wo wa andi elin orbi12i bitr4i anbi2i 3bitr4i ineqri
      elun ) DABCEZABFZACFZEZDGZAHZUCBHZUCCHZIZJZUCTHZUCUAHZIZUDUCSHZJUCUBHUHUD
      UEJZUDUFJZIUKUDUEUFKUIUMUJUNUCABLUCACLMNULUGUDUCBCROUCTUARPQ $.

    $( Distributive law for union over intersection.  Exercise 11 of
       [TakeutiZaring] p. 17.  (Contributed by NM, 30-Sep-2002.)  (Proof
       shortened by Andrew Salmon, 26-Jun-2011.) $)
    undi $p |- ( A u. ( B i^i C ) ) = ( ( A u. B ) i^i ( A u. C ) ) $=
      ( vx cin cv wcel wo wa elin orbi2i ordi elun anbi12i bitr2i 3bitri uneqri
      cun ) DABCEZABRZACRZEZDFZAGZUCSGZHUDUCBGZUCCGZIZHUDUFHZUDUGHZIZUCUBGZUEUH
      UDUCBCJKUDUFUGLULUCTGZUCUAGZIUKUCTUAJUMUIUNUJUCABMUCACMNOPQ $.
  $}

  $( Distributive law for intersection over union.  Theorem 28 of [Suppes]
     p. 27.  (Contributed by NM, 30-Sep-2002.) $)
  indir $p |- ( ( A u. B ) i^i C ) = ( ( A i^i C ) u. ( B i^i C ) ) $=
    ( cun cin indi incom uneq12i 3eqtr4i ) CABDZECAEZCBEZDJCEACEZBCEZDCABFJCGMK
    NLACGBCGHI $.

  $( Distributive law for union over intersection.  Theorem 29 of [Suppes]
     p. 27.  (Contributed by NM, 30-Sep-2002.) $)
  undir $p |- ( ( A i^i B ) u. C ) = ( ( A u. C ) i^i ( B u. C ) ) $=
    ( cin cun undi uncom ineq12i 3eqtr4i ) CABDZECAEZCBEZDJCEACEZBCEZDCABFJCGMK
    NLACGBCGHI $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Infer equality from equalities of union and intersection.  Exercise 20
       of [Enderton] p. 32 and its converse.  (Contributed by NM,
       10-Aug-2004.) $)
    unineq $p |- ( ( ( A u. C ) = ( B u. C ) /\ ( A i^i C ) = ( B i^i C ) )
                 <-> A = B ) $=
      ( vx cun wceq cin wa wcel wb eleq2 elin 3bitr3g iba bibi12d syl5ibr uncom
      wo elun biorf cv wi adantld eqeq12i sylbi adantrd pm2.61i eqrdv uneq1 jca
      wn ineq1 impbii ) ACEZBCEZFZACGZBCGZFZHZABFZUTDABDUAZCIZUTVBAIZVBBIZJZUBV
      CUSVFUPUSVFVCVDVCHZVEVCHZJUSVBUQIVBURIVGVHUQURVBKVBACLVBBCLMVCVDVGVEVHVCV
      DNVCVENOPUCVCUKZUPVFUSUPVFVIVCVDRZVCVERZJUPVBCAEZIZVBCBEZIZVJVKUPVLVNFVMV
      OJUNVLUOVNACQBCQUDVLVNVBKUEVBCASVBCBSMVIVDVJVEVKVCVDTVCVETOPUFUGUHVAUPUSA
      BCUIABCULUJUM $.
  $}

  $( Equality of union and intersection implies equality of their arguments.
     (Contributed by NM, 16-Apr-2006.)  (Proof shortened by Andrew Salmon,
     26-Jun-2011.) $)
  uneqin $p |- ( ( A u. B ) = ( A i^i B ) <-> A = B ) $=
    ( cun cin wceq wss wa eqimss unss ssin sstr sylbir simpl anim12i syl sylibr
    eqss unidm inidm eqtr4i uneq2 ineq2 3eqtr3a impbii ) ABCZABDZEZABEZUGABFZBA
    FZGZUHUGUEUFFZUKUEUFHULAUFFZBUFFZGUKABUFIUMUIUNUJUMAAFUIGUIAABJAABKLUNUJBBF
    ZGUJBABJUJUOMLNLOABQPUHAACZAADZUEUFUPAUQARASTABAUAABAUBUCUD $.

  $( Distributive law for class difference.  Theorem 39 of [Suppes] p. 29.
     (Contributed by NM, 17-Aug-2004.) $)
  difundi $p |- ( A \ ( B u. C ) ) = ( ( A \ B ) i^i ( A \ C ) ) $=
    ( cun cdif cvv cin dfun3 difeq2i inindi dfin2 invdif ineq12i 3eqtr3i eqtri
    ) ABCDZEAFFBEZFCEZGZEZEZABEZACEZGZPTABCHIASGAQGZARGZGUAUDAQRJASKUEUBUFUCABL
    ACLMNO $.

  $( Distributive law for class difference.  (Contributed by NM,
     17-Aug-2004.) $)
  difundir $p |- ( ( A u. B ) \ C ) = ( ( A \ C ) u. ( B \ C ) ) $=
    ( cun cvv cdif cin indir invdif uneq12i 3eqtr3i ) ABDZECFZGAMGZBMGZDLCFACFZ
    BCFZDABMHLCINPOQACIBCIJK $.

  $( Distributive law for class difference.  Theorem 40 of [Suppes] p. 29.
     (Contributed by NM, 17-Aug-2004.) $)
  difindi $p |- ( A \ ( B i^i C ) ) = ( ( A \ B ) u. ( A \ C ) ) $=
    ( cin cdif cvv cun dfin3 difeq2i indi dfin2 invdif uneq12i 3eqtr3i eqtri )
    ABCDZEAFFBEZFCEZGZEZEZABEZACEZGZPTABCHIASDAQDZARDZGUAUDAQRJASKUEUBUFUCABLAC
    LMNO $.

  $( Distributive law for class difference.  (Contributed by NM,
     17-Aug-2004.) $)
  difindir $p |- ( ( A i^i B ) \ C ) = ( ( A \ C ) i^i ( B \ C ) ) $=
    ( cin cvv cdif inindir invdif ineq12i 3eqtr3i ) ABDZECFZDALDZBLDZDKCFACFZBC
    FZDABLGKCHMONPACHBCHIJ $.

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( Distribute intersection over difference.  (Contributed by Scott Fenton,
       14-Apr-2011.) $)
    indifdir $p |- ( ( A \ B ) i^i C ) = ( ( A i^i C ) \ ( B i^i C ) ) $=
      ( vx cdif cin cv wcel wn wa pm3.24 intnan anass mtbir biorfi 3bitr4i elin
      wo eldif bitri an32 andi ianor anbi2i bitr4i anbi1i notbii anbi12i eqriv
      ) DABEZCFZACFZBCFZEZDGZAHZUOBHZIZJZUOCHZJZUPUTJZUQUTJZIZJZUOUKHZUOUNHZVAV
      BURUTIZRZJZVEVBURJZVKVBVHJZRVAVJVLVKVLUPUTVHJZJVMUPUTKLUPUTVHMNOUPURUTUAV
      BURVHUBPVDVIVBUQUTUCUDUEVFUOUJHZUTJVAUOUJCQVNUSUTUOABSUFTVGUOULHZUOUMHZIZ
      JVEUOULUMSVOVBVQVDUOACQVPVCUOBCQUGUHTPUI $.
  $}

  $( Set difference with a set difference.  (Contributed by Thierry Arnoux,
     18-Dec-2017.) $)
  difdif2 $p |- ( A \ ( B \ C ) ) = ( ( A \ B ) u. ( A i^i C ) ) $=
    ( cvv cdif cin cun difindi invdif eqcomi difeq2i dfin2 uneq2i 3eqtr4i ) ABD
    CEZFZEABEZAOEZGABCEZEQACFZGABOHSPAPSBCIJKTRQACLMN $.

  $( De Morgan's law for union.  Theorem 5.2(13) of [Stoll] p. 19.
     (Contributed by NM, 18-Aug-2004.) $)
  undm $p |- ( _V \ ( A u. B ) ) = ( ( _V \ A ) i^i ( _V \ B ) ) $=
    ( cvv difundi ) CABD $.

  $( De Morgan's law for intersection.  Theorem 5.2(13') of [Stoll] p. 19.
     (Contributed by NM, 18-Aug-2004.) $)
  indm $p |- ( _V \ ( A i^i B ) ) = ( ( _V \ A ) u. ( _V \ B ) ) $=
    ( cvv difindi ) CABD $.

  $( A relationship involving double difference and union.  (Contributed by NM,
     29-Aug-2004.) $)
  difun1 $p |- ( A \ ( B u. C ) ) = ( ( A \ B ) \ C ) $=
    ( cvv cdif cin cun inass invdif eqtr3i undm ineq2i difeq1i ) ADBEZFZCEZABCG
    ZEZABEZCEANDCEZFZFZPROTFUBPANTHOCIJADQEZFUBRUCUAABCKLAQIJJOSCABIMJ $.

  ${
    $d A x $.  $d B x $.  $d C x $.
    $( An equality involving class union and class difference.  The first
       equality of Exercise 13 of [TakeutiZaring] p. 22.  (Contributed by Alan
       Sare, 17-Apr-2012.) $)
    undif3 $p |- ( A u. ( B \ C ) ) = ( ( A u. B ) \ ( C \ A ) ) $=
      ( vx cdif cun cv wcel wn wa elun pm4.53 eldif xchnxbir anbi12i orbi2i orc
      wo olc jca anim12i simpl adantr adantl ccase impbii 3bitri 3bitr4ri eqriv
      jaoi orcd ) DABCEZFZABFZCAEZEZDGZUNHZUQUOHZIZJUQAHZUQBHZRZUQCHZIZVARZJZUQ
      UPHUQUMHZURVCUTVFUQABKVDVAIJVFUSVDVALUQCAMNOUQUNUOMVHVAUQULHZRVAVBVEJZRZV
      GUQAULKVIVJVAUQBCMPVKVGVAVGVJVAVCVFVAVBQVAVESTVBVCVEVFVBVASVEVAQUAUJVAVEV
      BVAVKVAVEJVAVJVAVEUBUKVJVASVAVKVAVAVJQZUCVAVKVBVLUDUEUFUGUHUI $.

    $( Represent a set difference as an intersection with a larger difference.
       (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    difin2 $p |- ( A C_ C -> ( A \ B ) = ( ( C \ B ) i^i A ) ) $=
      ( vx wss cdif cin cv wcel wn ssel pm4.71d anbi1d eldif anbi1i ancom anass
      wa elin bitr4i 3bitri 3bitr4g eqrdv ) ACEZDABFZCBFZAGZUDDHZAIZUHBIJZRUIUH
      CIZRZUJRZUHUEIUHUGIZUDUIULUJUDUIUKACUHKLMUHABNUNUHUFIZUIRUKUJRZUIRZUMUHUF
      ASUOUPUIUHCBNOUQUIUPRUMUPUIPUIUKUJQTUAUBUC $.
  $}

  $( Swap second and third argument of double difference.  (Contributed by NM,
     18-Aug-2004.) $)
  dif32 $p |- ( ( A \ B ) \ C ) = ( ( A \ C ) \ B ) $=
    ( cun cdif uncom difeq2i difun1 3eqtr3i ) ABCDZEACBDZEABECEACEBEJKABCFGABCH
    ACBHI $.

  $( Absorption-like law for class difference: you can remove a class only
     once.  (Contributed by FL, 2-Aug-2009.) $)
  difabs $p |- ( ( A \ B ) \ B ) = ( A \ B ) $=
    ( cun cdif difun1 unidm difeq2i eqtr3i ) ABBCZDABDZBDJABBEIBABFGH $.

  $( Two ways to express symmetric difference.  This theorem shows the
     equivalence of the definition of symmetric difference in [Stoll] p. 13 and
     the restated definition in Example 4.1 of [Stoll] p. 262.  (Contributed by
     NM, 17-Aug-2004.) $)
  symdif1 $p |- ( ( A \ B ) u. ( B \ A ) ) = ( ( A u. B ) \ ( A i^i B ) ) $=
    ( cun cin cdif difundir difin incom difeq2i eqtri uneq12i eqtr2i ) ABCABDZE
    AMEZBMEZCABEZBAEZCABMFNPOQABGOBBADZEQMRBABHIBAGJKL $.

$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
    Class abstractions with difference, union, and intersection of two classes
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)
  ${
    $d x A $.  $d x B $.
    $( Two ways to express symmetric difference.  (Contributed by NM,
       17-Aug-2004.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    symdif2 $p |- ( ( A \ B ) u. ( B \ A ) ) =
                  { x | -. ( x e. A <-> x e. B ) } $=
      ( cv wcel wb wn cdif cun wo wa eldif orbi12i elun xor 3bitr4i abbi2i ) AD
      ZBEZRCEZFGZABCHZCBHZIZRUBEZRUCEZJSTGKZTSGKZJRUDEUAUEUGUFUHRBCLRCBLMRUBUCN
      STOPQ $.
  $}

  ${
    $d x y $.  $d ph y $.  $d ps y $.
    $( Union of two class abstractions.  (Contributed by NM, 29-Sep-2002.)
       (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    unab $p |- ( { x | ph } u. { x | ps } ) = { x | ( ph \/ ps ) } $=
      ( vy cab wo wsb cv wcel sbor df-clab orbi12i 3bitr4ri uneqri ) DACEZBCEZA
      BFZCEZQCDGACDGZBCDGZFDHZRIUAOIZUAPIZFABCDJQDCKUBSUCTADCKBDCKLMN $.

    $( Intersection of two class abstractions.  (Contributed by NM,
       29-Sep-2002.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    inab $p |- ( { x | ph } i^i { x | ps } ) = { x | ( ph /\ ps ) } $=
      ( vy cab wa wsb cv wcel sban df-clab anbi12i 3bitr4ri ineqri ) DACEZBCEZA
      BFZCEZQCDGACDGZBCDGZFDHZRIUAOIZUAPIZFABCDJQDCKUBSUCTADCKBDCKLMN $.

    $( Difference of two class abstractions.  (Contributed by NM,
       23-Oct-2004.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    difab $p |- ( { x | ph } \ { x | ps } ) = { x | ( ph /\ -. ps ) } $=
      ( vy cab wn wcel wsb df-clab sban bicomi xchbinxr anbi12i 3bitrri difeqri
      wa cv sbn ) DACEZBCEZABFZPZCEZDQZUCGUBCDHACDHZUACDHZPUDSGZUDTGZFZPUBDCIAU
      ACDJUEUGUFUIUGUEADCIKUFBCDHUHBCDRBDCILMNO $.
  $}

  $( A class builder defined by a negation.  (Contributed by FL,
     18-Sep-2010.) $)
  notab $p |- { x | -. ph } = ( _V \ { x | ph } ) $=
    ( cv cvv wcel wn wa cab cdif crab df-rab rabab eqtr3i difab abid2 difeq1i )
    BCDEZAFZGBHZRBHZDABHZIZRBDJSTRBDKRBLMQBHZUAISUBQABNUCDUABDOPMM $.

  $( Union of two restricted class abstractions.  (Contributed by NM,
     25-Mar-2004.) $)
  unrab $p |- ( { x e. A | ph } u. { x e. A | ps } ) =
              { x e. A | ( ph \/ ps ) } $=
    ( crab cun cv wcel wa cab wo df-rab uneq12i unab andi abbii eqtr4i ) ACDEZB
    CDEZFCGDHZAIZCJZTBIZCJZFZABKZCDEZRUBSUDACDLBCDLMUGTUFIZCJZUEUFCDLUEUAUCKZCJ
    UIUAUCCNUHUJCTABOPQQQ $.

  $( Intersection of two restricted class abstractions.  (Contributed by NM,
     1-Sep-2006.) $)
  inrab $p |- ( { x e. A | ph } i^i { x e. A | ps } ) =
              { x e. A | ( ph /\ ps ) } $=
    ( crab cin cv wcel wa cab df-rab ineq12i inab anandi abbii eqtr4i ) ACDEZBC
    DEZFCGDHZAIZCJZSBIZCJZFZABIZCDEZQUARUCACDKBCDKLUFSUEIZCJZUDUECDKUDTUBIZCJUH
    TUBCMUGUICSABNOPPP $.

  ${
    $d x B $.
    $( Intersection with a restricted class abstraction.  (Contributed by NM,
       19-Nov-2007.) $)
    inrab2 $p |- ( { x e. A | ph } i^i B ) = { x e. ( A i^i B ) | ph } $=
      ( crab cin cv wcel cab df-rab abid2 eqcomi ineq12i inab elin anbi1i bitri
      wa an32 eqtr4i abbii ) ABCEZDFBGZCHZARZBIZUCDHZBIZFZABCDFZEZUBUFDUHABCJUH
      DBDKLMUKUCUJHZARZBIZUIABUJJUIUEUGRZBIUNUEUGBNUMUOBUMUDUGRZARUOULUPAUCCDOP
      UDUGASQUATTT $.
  $}

  $( Difference of two restricted class abstractions.  (Contributed by NM,
     23-Oct-2004.) $)
  difrab $p |- ( { x e. A | ph } \ { x e. A | ps } ) =
              { x e. A | ( ph /\ -. ps ) } $=
    ( crab cdif cv wcel wa wn df-rab difeq12i difab anass simpr con3i anim2i wi
    cab eqtr4i pm3.2 adantr con3d imdistani impbii bitr3i abbii ) ACDEZBCDEZFCG
    DHZAIZCSZUJBIZCSZFZABJZIZCDEZUHULUIUNACDKBCDKLURUJUQIZCSZUOUQCDKUOUKUMJZIZC
    SUTUKUMCMUSVBCUSUKUPIZVBUJAUPNVCVBUPVAUKUMBUJBOPQUKVAUPUKBUMUJBUMRAUJBUAUBU
    CUDUEUFUGTTT $.

  ${
    $d x A $.  $d x B $.

    $( Alternate definition of restricted class abstraction.  (Contributed by
       Mario Carneiro, 8-Sep-2013.) $)
    dfrab3 $p |- { x e. A | ph } = ( A i^i { x | ph } ) $=
      ( crab cv wcel wa cab cin df-rab inab abid2 ineq1i 3eqtr2i ) ABCDBECFZAGB
      HOBHZABHZICQIABCJOABKPCQBCLMN $.

    $( Alternate definition of restricted class abstraction.  (Contributed by
       NM, 20-Sep-2003.)  (Proof shortened by BJ, 22-Apr-2019.) $)
    dfrab2 $p |- { x e. A | ph } = ( { x | ph } i^i A ) $=
      ( crab cab cin dfrab3 incom eqtri ) ABCDCABEZFJCFABCGCJHI $.

    $( Complementation of restricted class abstractions.  (Contributed by Mario
       Carneiro, 3-Sep-2015.) $)
    notrab $p |- ( A \ { x e. A | ph } ) = { x e. A | -. ph } $=
      ( cv wcel cab cdif wn crab difab cin difin dfrab3 difeq2i difeq1i 3eqtr4i
      wa abid2 df-rab ) BDCEZBFZABFZGZTAHZQBFCABCIZGZUDBCITABJCCUBKZGCUBGUFUCCU
      BLUEUGCABCMNUACUBBCROPUDBCSP $.

    $( Restricted class abstraction with a common superset.  (Contributed by
       Stefan O'Rear, 12-Sep-2015.)  (Proof shortened by Mario Carneiro,
       8-Nov-2015.) $)
    dfrab3ss $p |- ( A C_ B -> { x e. A | ph } = ( A i^i { x e. B | ph } ) ) $=
      ( wss cab crab wceq df-ss ineq1 eqcomd sylbi dfrab3 ineq2i eqtr4i 3eqtr4g
      cin inass ) CDEZCABFZQZCDQZTQZABCGCABDGZQZSUBCHZUAUCHCDIUFUCUAUBCTJKLABCM
      UECDTQZQUCUDUGCABDMNCDTROP $.
  $}

  $( Abstraction restricted to a union.  (Contributed by Stefan O'Rear,
     5-Feb-2015.) $)
  rabun2 $p |- { x e. ( A u. B ) | ph } =
      ( { x e. A | ph } u. { x e. B | ph } ) $=
    ( cun crab cv wcel wa cab df-rab uneq12i elun anbi1i andir bitri abbii unab
    wo eqtr4i ) ABCDEZFBGZUAHZAIZBJZABCFZABDFZEZABUAKUHUBCHZAIZBJZUBDHZAIZBJZEZ
    UEUFUKUGUNABCKABDKLUEUJUMSZBJUOUDUPBUDUIULSZAIUPUCUQAUBCDMNUIULAOPQUJUMBRTT
    T $.

$(
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
    Restricted uniqueness with difference, union, and intersection
-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-
$)

  ${
    $d x A $.  $d x B $.
    $( Transfer uniqueness to a smaller subclass.  (Contributed by NM,
       20-Oct-2005.) $)
    reuss2 $p |- ( ( ( A C_ B /\ A. x e. A ( ph -> ps ) ) /\
                 ( E. x e. A ph /\ E! x e. B ps ) ) -> E! x e. A ph ) $=
      ( wrex wreu wa wss wi wral wcel wex weu df-rex df-reu anbi12i wal sylan2b
      cv wmo df-ral ssel prth sylan exp4b com23 a2d imp4a alimdv imp euimmo syl
      eu5 simplbi2 syl9 imp32 sylibr ) ACDFZBCEGZHDEIZABJZCDKZHZCTZDLZAHZCMZVEE
      LZBHZCNZHZACDGZUSVHUTVKACDOBCEPQVDVLHVGCNZVMVDVHVKVNVDVKVGCUAZVHVNVDVGVJJ
      ZCRZVKVOJVCVAVFVBJZCRZVQVBCDUBVAVSVQVAVRVPCVAVRVFAVJVAVFVBAVJJZVAVBVFVTVA
      VBVFAVJVAVFVIJVBVPDEVEUCVFVIABUDUEUFUGUHUIUJUKSVGVJCULUMVNVHVOVGCUNUOUPUQ
      ACDPURS $.

    $( Transfer uniqueness to a smaller subclass.  (Contributed by NM,
       21-Aug-1999.) $)
    reuss $p |- ( ( A C_ B /\ E. x e. A ph /\ E! x e. B ph ) ->
                E! x e. A ph ) $=
      ( wss wrex wreu wi wral wa cv wcel idd rgen reuss2 mpanl2 3impb ) CDEZABC
      FZABDGZABCGZRAAHZBCISTJUAUBBCBKCLAMNAABCDOPQ $.

    $( Transfer uniqueness to a smaller class.  (Contributed by NM,
       21-Oct-2005.) $)
    reuun1 $p |- ( ( E. x e. A ph /\ E! x e. ( A u. B ) ( ph \/ ps ) )
                 -> E! x e. A ph ) $=
      ( cun wss wo wi wral wrex wreu wa ssun1 orc rgenw reuss2 mpanl12 ) DDEFZG
      AABHZIZCDJACDKTCSLMACDLDENUACDABOPATCDSQR $.

    $( Transfer uniqueness to a smaller or larger class.  (Contributed by NM,
       21-Oct-2005.) $)
    reuun2 $p |- ( -. E. x e. B ph ->
             ( E! x e. ( A u. B ) ph <-> E! x e. A ph ) ) $=
      ( wrex wn cv wcel wa wo weu cun wreu wex df-rex euor2 sylnbi df-reu bitri
      wb elun anbi1i andir orcom eubii 3bitr4g ) ABDEZFBGZDHZAIZUHCHZAIZJZBKZUL
      BKZABCDLZMZABCMUGUJBNUNUOTABDOUJULBPQUQUHUPHZAIZBKUNABUPRUSUMBUSUKUIJZAIZ
      UMURUTAUHCDUAUBVAULUJJUMUKUIAUCULUJUDSSUESABCRUF $.

    $( Restricted uniqueness ""picks"" a member of a subclass.  (Contributed by
       NM, 21-Aug-1999.) $)
    reupick $p |- ( ( ( A C_ B /\ ( E. x e. A ph /\ E! x e. B ph ) ) /\ ph ) ->
                  ( x e. A <-> x e. B ) ) $=
      ( wss wrex wreu wa cv wcel wi ssel ad2antrr wex weu df-rex df-reu anbi12i
      ancrd anim1d an32 syl6ib eximdv eupick ex com23 imp32 sylan2b expcomd imp
      syl9 impbid ) CDEZABCFZABDGZHZHZAHBIZCJZURDJZUMUSUTKUPACDURLZMUQAUTUSKUQU
      TAUSUPUMUSAHZBNZUTAHZBOZHVDUSKZUNVCUOVEABCPABDQRUMVCVEVFUMVEVCVFUMVCVDUSH
      ZBNZVEVFUMVBVGBUMVBUTUSHZAHVGUMUSVIAUMUSUTVASTUTUSAUAUBUCVEVHVFVDUSBUDUEU
      KUFUGUHUIUJUL $.

    $( Restricted uniqueness ""picks"" a member of a subclass.  (Contributed by
       Mario Carneiro, 19-Nov-2016.) $)
    reupick3 $p |- ( ( E! x e. A ph /\ E. x e. A ( ph /\ ps ) /\ x e. A ) ->
       ( ph -> ps ) ) $=
      ( wreu wa wrex cv wcel wi weu wex df-reu df-rex anass exbii bitr4i eupick
      syl2anb expd 3impia ) ACDEZABFZCDGZCHDIZABJUBUDFUEABUBUEAFZCKUFBFZCLZUFBJ
      UDACDMUDUEUCFZCLUHUCCDNUGUICUEABOPQUFBCRSTUA $.

    $( Restricted uniqueness ""picks"" a member of a subclass.  (Contributed by
       Mario Carneiro, 15-Dec-2013.)  (Proof shortened by Mario Carneiro,
       19-Nov-2016.) $)
    reupick2 $p |- ( ( ( A. x e. A ( ps -> ph ) /\ E. x e. A ps /\
                       E! x e. A ph ) /\ x e. A ) -> ( ph <-> ps ) ) $=
      ( wi wral wrex wreu w3a cv wcel ancr ralimi rexim syl reupick3 3exp com12
      wa syl6 3imp1 rsp 3ad2ant1 imp impbid ) BAEZCDFZBCDGZACDHZIZCJDKZSABUGUHU
      IUKABEZUGUHABSZCDGZUIUKULEZEUGBUMEZCDFUHUNEUFUPCDBALMBUMCDNOUIUNUOUIUNUKU
      LABCDPQRTUAUJUKUFUGUHUKUFEUIUFCDUBUCUDUE $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
           The empty set
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare the symbol for the empty or null set. $)
  $c (/) $. $( null set $)

  $( Extend class notation to include the empty set. $)
  c0 $a class (/) $.

  $( Define the empty set.  Special case of Exercise 4.10(o) of [Mendelson]
     p. 231.  For a more traditional definition, but requiring a dummy
     variable, see ~ dfnul2 .  (Contributed by NM, 17-Jun-1993.) $)
  df-nul $a |- (/) = ( _V \ _V ) $.

  $( Alternate definition of the empty set.  Definition 5.14 of [TakeutiZaring]
     p. 20.  (Contributed by NM, 26-Dec-1996.) $)
  dfnul2 $p |- (/) = { x | -. x = x } $=
    ( cv wceq wn c0 wcel cvv cdif wa df-nul eleq2i eldif eqid pm3.24 2th 3bitri
    con2bii abbi2i ) ABZSCZDZAESEFSGGHZFSGFZUCDIZUAEUBSJKSGGLTUDTUDDSMUCNOQPR
    $.

  $( Alternate definition of the empty set.  (Contributed by NM,
     25-Mar-2004.) $)
  dfnul3 $p |- (/) = { x e. A | -. x e. A } $=
    ( weq wn cab cv wcel wa crab pm3.24 equid 2th con1bii dfnul2 df-rab 3eqtr4i
    c0 abbii ) AACZDZAEAFBGZUADZHZAEQUBABITUCAUCSUCDSUAJAKLMRANUBABOP $.

  $( The empty set has no elements.  Theorem 6.14 of [Quine] p. 44.
     (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Mario Carneiro,
     1-Sep-2015.) $)
  noel $p |- -. A e. (/) $=
    ( c0 wcel cvv cdif eldifi eldifn pm2.65i df-nul eleq2i mtbir ) ABCADDEZCZMA
    DCADDFADDGHBLAIJK $.

  $( If a set has elements, then it is not empty.  (Contributed by NM,
     31-Dec-1993.) $)
  n0i $p |- ( B e. A -> -. A = (/) ) $=
    ( c0 wceq wcel noel eleq2 mtbiri con2i ) ACDZBAEZJKBCEBFACBGHI $.

  $( If a set has elements, then it is not empty.  (Contributed by NM,
     31-Dec-1993.) $)
  ne0i $p |- ( B e. A -> A =/= (/) ) $=
    ( wcel c0 n0i neqned ) BACADABEF $.

  ${
    ne0ii.1 $e |- A e. B $.
    $( If a set has elements, then it is not empty.  Inference associated with
       ~ ne0i .  (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
    ne0ii $p |- B =/= (/) $=
      ( wcel c0 wne ne0i ax-mp ) ABDBEFCBAGH $.
  $}

  $( The universal class is not equal to the empty set.  (Contributed by NM,
     11-Sep-2008.) $)
  vn0 $p |- _V =/= (/) $=
    ( vx cv cvv vex ne0ii ) ABCADE $.

  ${
    $d x y $.  $d y A $.
    n0f.1 $e |- F/_ x A $.
    $( A nonempty class has at least one element.  Proposition 5.17(1) of
       [TakeutiZaring] p. 20.  This version of ~ n0 requires only that ` x `
       not be free in, rather than not occur in, ` A ` .  (Contributed by NM,
       17-Oct-2003.) $)
    n0f $p |- ( A =/= (/) <-> E. x x e. A ) $=
      ( c0 wne cv wcel wn wal wex wceq wb nfcv cleqf noel nbn bitr4i necon3abii
      albii df-ex ) BDEAFZBGZHZAIZHUBAJUDBDBDKUBUADGZLZAIUDABDCADMNUCUFAUEUBUAO
      PSQRUBATQ $.
  $}

  ${
    $d x y A $.
    $( A nonempty class has at least one element.  Proposition 5.17(1) of
       [TakeutiZaring] p. 20.  (Contributed by NM, 29-Sep-2006.) $)
    n0 $p |- ( A =/= (/) <-> E. x x e. A ) $=
      ( nfcv n0f ) ABABCD $.

    $( A nonempty class has at least one element.  Proposition 5.17(1) of
       [TakeutiZaring] p. 20.  (Contributed by NM, 21-Jun-1993.) $)
    neq0 $p |- ( -. A = (/) <-> E. x x e. A ) $=
      ( c0 wceq wn wne cv wcel wex df-ne n0 bitr3i ) BCDEBCFAGBHAIBCJABKL $.
  $}

  ${
    $d x A $.  $d x ph $.
    reximdva0.1 $e |- ( ( ph /\ x e. A ) -> ps ) $.
    $( Restricted existence deduced from nonempty class.  (Contributed by NM,
       1-Feb-2012.) $)
    reximdva0 $p |- ( ( ph /\ A =/= (/) ) -> E. x e. A ps ) $=
      ( c0 wne wa cv wcel wex wrex n0 ex ancld eximdv imp sylan2b df-rex sylibr
      ) ADFGZHCIDJZBHZCKZBCDLUAAUBCKZUDCDMAUEUDAUBUCCAUBBAUBBENOPQRBCDST $.
  $}

  ${
    $d A x $.  $d ph x $.
    $( Specialization for restricted generalization with a nonempty set.
       (Contributed by Alexander van der Vekens, 6-Sep-2018.) $)
    rspn0 $p |- ( A =/= (/) -> ( A. x e. A ph -> ph ) ) $=
      ( c0 wne cv wcel wex wral wi n0 nfra1 nfv nfim rsp com12 exlimi sylbi ) C
      DEBFCGZBHABCIZAJZBCKSUABTABABCLABMNTSAABCOPQR $.
  $}

  ${
    $d A x $.
    $( A case of equivalence of ""at most one"" and ""only one"".  (Contributed by
       FL, 6-Dec-2010.) $)
    n0moeu $p |- ( A =/= (/) -> ( E* x x e. A <-> E! x x e. A ) ) $=
      ( c0 wne cv wcel wmo wex wa weu n0 biimpi biantrurd eu5 syl6bbr ) BCDZAEB
      FZAGZQAHZRIQAJPSRPSABKLMQANO $.
  $}

  $( Vacuous existential quantification is false.  (Contributed by NM,
     15-Oct-2003.) $)
  rex0 $p |- -. E. x e. (/) ph $=
    ( c0 cv wcel wn noel pm2.21i nrex ) ABCBDZCEAFJGHI $.

  ${
    $d x A $.
    $( The empty set has no elements.  Theorem 2 of [Suppes] p. 22.
       (Contributed by NM, 29-Aug-1993.) $)
    eq0 $p |- ( A = (/) <-> A. x -. x e. A ) $=
      ( c0 wceq cv wcel wn wal wex neq0 df-ex bitri con4bii ) BCDZAEBFZGAHZNGOA
      IPGABJOAKLM $.

    $( The universe contains every set.  (Contributed by NM, 11-Sep-2006.) $)
    eqv $p |- ( A = _V <-> A. x x e. A ) $=
      ( cvv wceq cv wcel wb wal dfcleq vex tbt albii bitr4i ) BCDAEZBFZNCFZGZAH
      OAHABCIOQAPOAJKLM $.
  $}

  ${
    $d x A $.  $d x y $.
    $( Membership of the empty set in another class.  (Contributed by NM,
       29-Jun-2004.) $)
    0el $p |- ( (/) e. A <-> E. x e. A A. y -. y e. x ) $=
      ( c0 wcel cv wceq wrex wn wal risset eq0 rexbii bitri ) DCEAFZDGZACHBFOEI
      BJZACHADCKPQACBOLMN $.
  $}

  ${
    $d x ph $.
    $( The class builder of a wff not containing the abstraction variable is
       either the universal class or the empty set.  (Contributed by Mario
       Carneiro, 29-Aug-2013.) $)
    abvor0 $p |- ( { x | ph } = _V \/ { x | ph } = (/) ) $=
      ( cab cvv wceq c0 wn cv wcel vex a1i 2thd abbi1dv con3i noel 2falsed orri
      id syl ) ABCZDEZTFEZUAGAGZUBAUAAABDAABHZDIZARUEABJKLMNUCABFUCAUDFIZUCRUFG
      UCUDOKPMSQ $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( Nonempty class abstraction.  (Contributed by NM, 26-Dec-1996.)  (Proof
       shortened by Mario Carneiro, 11-Nov-2016.) $)
    abn0 $p |- ( { x | ph } =/= (/) <-> E. x ph ) $=
      ( cab c0 wne cv wcel wex nfab1 n0f abid exbii bitri ) ABCZDEBFNGZBHABHBNA
      BIJOABABKLM $.
  $}

  $( Nonempty restricted class abstraction.  (Contributed by NM,
     29-Aug-1999.) $)
  rabn0 $p |- ( { x e. A | ph } =/= (/) <-> E. x e. A ph ) $=
    ( cv wcel wa cab c0 wne wex crab wrex abn0 df-rab neeq1i df-rex 3bitr4i ) B
    DCEAFZBGZHIRBJABCKZHIABCLRBMTSHABCNOABCPQ $.

  $( Any restricted class abstraction restricted to the empty set is empty.
     (Contributed by NM, 15-Oct-2003.)  (Proof shortened by Andrew Salmon,
     26-Jun-2011.) $)
  rab0 $p |- { x e. (/) | ph } = (/) $=
    ( cv c0 wcel wa cab weq wn crab equid noel intnanr 2th con2bii abbii df-rab
    dfnul2 3eqtr4i ) BCZDEZAFZBGBBHZIZBGABDJDUBUDBUCUBUCUBIBKUAATLMNOPABDQBRS
    $.

  $( Condition for a restricted class abstraction to be empty.  (Contributed by
     Jeff Madsen, 7-Jun-2010.) $)
  rabeq0 $p |- ( { x e. A | ph } = (/) <-> A. x e. A -. ph ) $=
    ( wn wral wrex crab c0 wceq ralnex rabn0 necon1bbii bitr2i ) ADBCEABCFZDABC
    GZHIABCJNOHABCKLM $.

  ${
    $d A x $.
    $( Law of excluded middle, in terms of restricted class abstractions.
       (Contributed by Jeff Madsen, 20-Jun-2011.) $)
    rabxm $p |- A = ( { x e. A | ph } u. { x e. A | -. ph } ) $=
      ( wn wo crab cun wceq rabid2 cv wcel exmidd mprgbir unrab eqtr4i ) CAADZE
      ZBCFZABCFPBCFGCRHQBCQBCIBJCKALMAPBCNO $.

    $( Law of noncontradiction, in terms of restricted class abstractions.
       (Contributed by Jeff Madsen, 20-Jun-2011.) $)
    rabnc $p |- ( { x e. A | ph } i^i { x e. A | -. ph } ) = (/) $=
      ( crab wn cin wa c0 inrab wceq rabeq0 cv wcel pm3.24 a1i mprgbir eqtri )
      ABCDAEZBCDFARGZBCDZHARBCITHJSEZBCSBCKUABLCMANOPQ $.
  $}

  ${
    $d x A $.
    $( The union of a class with the empty set is itself.  Theorem 24 of
       [Suppes] p. 27.  (Contributed by NM, 15-Jul-1993.) $)
    un0 $p |- ( A u. (/) ) = A $=
      ( vx c0 cv wcel wo noel biorfi bicomi uneqri ) BACABDZAEZLKCEZFMLKGHIJ $.

    $( The intersection of a class with the empty set is the empty set.
       Theorem 16 of [Suppes] p. 26.  (Contributed by NM, 21-Jun-1993.) $)
    in0 $p |- ( A i^i (/) ) = (/) $=
      ( vx c0 cv wcel wa noel bianfi bicomi ineqri ) BACCBDZCEZKAEZLFLMKGHIJ $.
  $}

  $( The intersection of a class with the universal class is itself.  Exercise
     4.10(k) of [Mendelson] p. 231.  (Contributed by NM, 17-May-1998.) $)
  inv1 $p |- ( A i^i _V ) = A $=
    ( cvv cin inss1 ssid ssv ssini eqssi ) ABCAABDAABAEAFGH $.

  $( The union of a class with the universal class is the universal class.
     Exercise 4.10(l) of [Mendelson] p. 231.  (Contributed by NM,
     17-May-1998.) $)
  unv $p |- ( A u. _V ) = _V $=
    ( cvv cun ssv ssun2 eqssi ) ABCZBGDBAEF $.

  ${
    $d A x $.
    $( The null set is a subset of any class.  Part of Exercise 1 of
       [TakeutiZaring] p. 22.  (Contributed by NM, 21-Jun-1993.) $)
    0ss $p |- (/) C_ A $=
      ( vx c0 cv wcel noel pm2.21i ssriv ) BCABDZCEIAEIFGH $.
  $}

  $( Any subset of the empty set is empty.  Theorem 5 of [Suppes] p. 23 and its
     converse.  (Contributed by NM, 17-Sep-2003.) $)
  ss0b $p |- ( A C_ (/) <-> A = (/) ) $=
    ( c0 wceq wss 0ss eqss mpbiran2 bicomi ) ABCZABDZIJBADAEABFGH $.

  $( Any subset of the empty set is empty.  Theorem 5 of [Suppes] p. 23.
     (Contributed by NM, 13-Aug-1994.) $)
  ss0 $p |- ( A C_ (/) -> A = (/) ) $=
    ( c0 wss wceq ss0b biimpi ) ABCABDAEF $.

  $( A subclass of an empty class is empty.  (Contributed by NM, 7-Mar-2007.)
     (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  sseq0 $p |- ( ( A C_ B /\ B = (/) ) -> A = (/) ) $=
    ( c0 wceq wss sseq2 ss0 syl6bi impcom ) BCDZABEZACDZJKACELBCAFAGHI $.

  $( A class with a nonempty subclass is nonempty.  (Contributed by NM,
     17-Feb-2007.) $)
  ssn0 $p |- ( ( A C_ B /\ A =/= (/) ) -> B =/= (/) ) $=
    ( wss c0 wne wceq sseq0 ex necon3d imp ) ABCZADEBDEKBDADKBDFADFABGHIJ $.

  ${
    abf.1 $e |- -. ph $.
    $( A class builder with a false argument is empty.  (Contributed by NM,
       20-Jan-2012.) $)
    abf $p |- { x | ph } = (/) $=
      ( cab c0 wss wceq cv wcel pm2.21i abssi ss0 ax-mp ) ABDZEFNEGABEABHEICJKN
      LM $.
  $}

  ${
    $d x A $.  $d x ph $.
    eq0rdv.1 $e |- ( ph -> -. x e. A ) $.
    $( Deduction rule for equality to the empty set.  (Contributed by NM,
       11-Jul-2014.) $)
    eq0rdv $p |- ( ph -> A = (/) ) $=
      ( c0 wss wceq cv wcel pm2.21d ssrdv ss0 syl ) ACEFCEGABCEABHZCINEIDJKCLM
      $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( The proper substitution of a proper class for a set into a class results
       in the empty set.  (Contributed by NM, 17-Aug-2018.) $)
    csbprc $p |- ( -. A e. _V -> [_ A / x ]_ B = (/) ) $=
      ( vy cvv wcel wn csb cv wsbc cab c0 df-csb wfal sbcex con3i pm2.21d falim
      impbid1 abbidv fal abf syl6eq syl5eq ) BEFZGZABCHDICFZABJZDKZLADBCMUFUIND
      KLUFUHNDUFUHNUFUHNUHUEUGABOPQUHRSTNDUAUBUCUD $.
  $}

  $( The proper substitution of a class into the empty set is empty.
     (Contributed by NM, 18-Aug-2018.) $)
  csb0 $p |- [_ A / x ]_ (/) = (/) $=
    ( cvv wcel c0 csb wceq csbconstg csbprc pm2.61i ) BCDABEFEGABECHABEIJ $.

  ${
    $d w x y z $.  $d w y z A $.  $d w y z B $.  $d w y z C $.
    $( Distribute proper substitution through a membership relation.
       (Contributed by NM, 10-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
    sbcel12 $p |- ( [. A / x ]. B e. C <-> [_ A / x ]_ B e. [_ A / x ]_ C ) $=
      ( vy vz cvv wcel wsbc csb cv cab dfsbcq2 abbidv eleq12d nfs1v nfab df-csb
      wsb sbab wb wceq nfel sbie vtoclbg eleq12i syl6bbr wn sbcex con3i c0 noel
      weq csbprc eleq2d mtbiri 2falsed pm2.61i ) BGHZCDHZABIZABCJZABDJZHZUAUSVA
      EKZCHZABIZELZVEDHZABIZELZHZVDUTAFSVFAFSZELZVIAFSZELZHZVAVLFBGUTAFBMFKBUBZ
      VNVHVPVKVRVMVGEVFAFBMNVRVOVJEVIAFBMNOUTVQAFAVNVPVMAEVFAFPQVOAEVIAFPQUCAFU
      MCVNDVPAFECTAFEDTOUDUEVBVHVCVKAEBCRAEBDRUFUGUSUHZVAVDVAUSUTABUIUJVSVDVBUK
      HVBULVSVCUKVBABDUNUOUPUQUR $.

    $( Distribute proper substitution through a membership relation.
       (Contributed by NM, 10-Nov-2005.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.)  Obsolete as of 18-Aug-2018.  Use ~ sbcel12 instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbcel12gOLD $p |- ( A e. V -> ( [. A / x ]. B e. C <->
                   [_ A / x ]_ B e. [_ A / x ]_ C ) ) $=
      ( vy vz wcel wsbc cv cab csb wsb dfsbcq2 abbidv eleq12d nfs1v nfab df-csb
      sbab wceq nfel weq sbie vtoclbg eleq12i syl6bbr ) BEHCDHZABIZFJZCHZABIZFK
      ZUJDHZABIZFKZHZABCLZABDLZHUHAGMUKAGMZFKZUNAGMZFKZHZUIUQGBEUHAGBNGJBUAZVAU
      MVCUPVEUTULFUKAGBNOVEVBUOFUNAGBNOPUHVDAGAVAVCUTAFUKAGQRVBAFUNAGQRUBAGUCCV
      ADVCAGFCTAGFDTPUDUEURUMUSUPAFBCSAFBDSUFUG $.

    $( Distribute proper substitution through an equality relation.
       (Contributed by NM, 10-Nov-2005.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    sbceqg $p |- ( A e. V -> ( [. A / x ]. B = C <->
                   [_ A / x ]_ B = [_ A / x ]_ C ) ) $=
      ( vy vz wcel wceq wsbc cab csb wsb dfsbcq2 abbidv eqeq12d nfs1v nfab sbab
      cv nfeq weq sbie vtoclbg df-csb eqeq12i syl6bbr ) BEHCDIZABJZFTZCHZABJZFK
      ZUJDHZABJZFKZIZABCLZABDLZIUHAGMUKAGMZFKZUNAGMZFKZIZUIUQGBEUHAGBNGTBIZVAUM
      VCUPVEUTULFUKAGBNOVEVBUOFUNAGBNOPUHVDAGAVAVCUTAFUKAGQRVBAFUNAGQRUAAGUBCVA
      DVCAGFCSAGFDSPUCUDURUMUSUPAFBCUEAFBDUEUFUG $.
  $}

  $( Distribute proper substitution through negated membership.  (Contributed
     by Andrew Salmon, 18-Jun-2011.) $)
  sbcnel12g $p |- ( A e. V
        -> ( [. A / x ]. B e/ C <-> [_ A / x ]_ B e/ [_ A / x ]_ C ) ) $=
    ( wcel wn wsbc wnel csb sbcng df-nel sbcbii sbcel12 xchbinxr 3bitr4g ) BEFC
    DFZGZABHQABHZGCDIZABHABCJZABDJZIZQABEKTRABCDLMUCUAUBFSUAUBLABCDNOP $.

  $( Distribute proper substitution through an inequality.  (Contributed by
     Andrew Salmon, 18-Jun-2011.)  (Revised by NM, 18-Aug-2018.) $)
  sbcne12 $p |- ( [. A / x ]. B =/= C <-> [_ A / x ]_ B =/= [_ A / x ]_ C ) $=
    ( cvv wcel wne wsbc csb wb wceq nne sbcbii a1i sbcng sbceqg syl6bbr 3bitr3d
    wn csbprc con4bid sbcex con3i c0 eqtr4d sylibr 2falsed pm2.61i ) BEFZCDGZAB
    HZABCIZABDIZGZJUIUKUNUIUJSZABHZCDKZABHZUKSUNSZUPURJUIUOUQABCDLMNUJABEOUIURU
    LUMKZUSABCDEPULUMLZQRUAUISZUKUNUKUIUJABUBUCVBUTUSVBULUDUMABCTABDTUEVAUFUGUH
    $.

  $( Distribute proper substitution through an inequality.  (Contributed by
     Andrew Salmon, 18-Jun-2011.)  Obsolete as of 18-Aug-2018.  Use ~ sbcne12
     instead.  (New usage is discouraged.)
     (Proof modification is discouraged.) $)
  sbcne12gOLD $p |- ( A e. V -> ( [. A / x ]. B =/= C <-> [_ A / x ]_ B =/=
                   [_ A / x ]_ C ) ) $=
    ( wcel wne wsbc csb wn wceq wb nne sbcbii a1i sbcng syl6bbr 3bitr3d con4bid
    sbceqg ) BEFZCDGZABHZABCIZABDIZGZUAUBJZABHZCDKZABHZUCJUFJZUHUJLUAUGUIABCDMN
    OUBABEPUAUJUDUEKUKABCDETUDUEMQRS $.

  ${
    $d y A $.  $d x y C $.  $d y V $.
    $( Move proper substitution in and out of a membership relation.  Note that
       the scope of ` [. A / x ]. ` is the wff ` B e. C ` , whereas the scope
       of ` [_ A / x ]_ ` is the class ` B ` .  (Contributed by NM,
       10-Nov-2005.) $)
    sbcel1g $p |- ( A e. V -> ( [. A / x ]. B e. C <->
                    [_ A / x ]_ B e. C ) ) $=
      ( wcel wsbc csb sbcel12 csbconstg eleq2d syl5bb ) CDFABGABCHZABDHZFBEFZMD
      FABCDIONDMABDEJKL $.

    $( Move proper substitution to first argument of an equality.  (Contributed
       by NM, 30-Nov-2005.) $)
    sbceq1g $p |- ( A e. V -> ( [. A / x ]. B = C <->
                    [_ A / x ]_ B = C ) ) $=
      ( wcel wceq wsbc csb sbceqg csbconstg eqeq2d bitrd ) BEFZCDGABHABCIZABDIZ
      GODGABCDEJNPDOABDEKLM $.
  $}

  ${
    $d y A $.  $d x y B $.  $d y V $.
    $( Move proper substitution in and out of a membership relation.
       (Contributed by NM, 14-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
    sbcel2 $p |- ( [. A / x ]. B e. C <-> B e. [_ A / x ]_ C ) $=
      ( cvv wcel wsbc wb sbcel12 csbconstg eleq1d syl5bb wn sbcex con3i c0 noel
      csb csbprc eleq2d mtbiri 2falsed pm2.61i ) BEFZCDFZABGZCABDRZFZHUFABCRZUG
      FUDUHABCDIUDUICUGABCEJKLUDMZUFUHUFUDUEABNOUJUHCPFCQUJUGPCABDSTUAUBUC $.

    $( Move proper substitution in and out of a membership relation.
       (Contributed by NM, 14-Nov-2005.)  Obsolete as of 18-Aug-2018.  Use
       ~ sbcel2 instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbcel2gOLD $p |- ( A e. V -> ( [. A / x ]. B e. C <->
                    B e. [_ A / x ]_ C ) ) $=
      ( wcel wsbc csb sbcel12gOLD csbconstg eleq1d bitrd ) BEFZCDFABGABCHZABDHZ
      FCOFABCDEIMNCOABCEJKL $.

    $( Move proper substitution to second argument of an equality.
       (Contributed by NM, 30-Nov-2005.) $)
    sbceq2g $p |- ( A e. V -> ( [. A / x ]. B = C <->
                    B = [_ A / x ]_ C ) ) $=
      ( wcel wceq wsbc csb sbceqg csbconstg eqeq1d bitrd ) BEFZCDGABHABCIZABDIZ
      GCPGABCDEJNOCPABCEKLM $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.  $d y ph $.
    csbeq2d.1 $e |- F/ x ph $.
    csbeq2d.2 $e |- ( ph -> B = C ) $.
    $( Formula-building deduction rule for class substitution.  (Contributed by
       NM, 22-Nov-2005.)  (Revised by Mario Carneiro, 1-Sep-2015.) $)
    csbeq2d $p |- ( ph -> [_ A / x ]_ B = [_ A / x ]_ C ) $=
      ( vy cv wcel wsbc cab csb eleq2d sbcbid abbidv df-csb 3eqtr4g ) AHIZDJZBC
      KZHLSEJZBCKZHLBCDMBCEMAUAUCHATUBBCFADESGNOPBHCDQBHCEQR $.
  $}

  ${
    $d x ph $.
    csbeq2dv.1 $e |- ( ph -> B = C ) $.
    $( Formula-building deduction rule for class substitution.  (Contributed by
       NM, 10-Nov-2005.)  (Revised by Mario Carneiro, 1-Sep-2015.) $)
    csbeq2dv $p |- ( ph -> [_ A / x ]_ B = [_ A / x ]_ C ) $=
      ( nfv csbeq2d ) ABCDEABGFH $.
  $}

  ${
    csbeq2i.1 $e |- B = C $.
    $( Formula-building inference rule for class substitution.  (Contributed by
       NM, 10-Nov-2005.)  (Revised by Mario Carneiro, 1-Sep-2015.) $)
    csbeq2i $p |- [_ A / x ]_ B = [_ A / x ]_ C $=
      ( csb wceq wtru a1i csbeq2dv trud ) ABCFABDFGHABCDCDGHEIJK $.
  $}

  ${
    $d y z A $.  $d x z B $.  $d z C $.  $d x y $.
    $( Commutative law for double substitution into a class.  (Contributed by
       NM, 14-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
    csbcom $p |- [_ A / x ]_ [_ B / y ]_ C = [_ B / y ]_ [_ A / x ]_ C $=
      ( vz csb cv wcel wsbc sbccom sbcel2 sbcbii 3bitr3i eqriv ) FACBDEGZGZBDAC
      EGZGZFHZPIZACJZTRIZBDJZTQITSITEIZBDJZACJUEACJZBDJUBUDUEABCDKUFUAACBDTELMU
      GUCBDACTELMNACTPLBDTRLNO $.

    $( Commutative law for double substitution into a class.  (Contributed by
       NM, 14-Nov-2005.)  Obsolete as of 18-Aug-2018.  Use ~ csbcom instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbcomgOLD $p |- ( ( A e. V /\ B e. W ) ->
                 [_ A / x ]_ [_ B / y ]_ C = [_ B / y ]_ [_ A / x ]_ C ) $=
      ( vz wcel cvv csb wceq elex wsbc sbcel2gOLD sbcbidv adantl adantr 3bitr3d
      wb wa cv sbccom a1i eqrdv syl2an ) CFICJIZDJIZACBDEKZKZBDACEKZKZLDGICFMDG
      MUGUHUAZHUJULUMHUBZUIIZACNZUNUKIZBDNZUNUJIZUNULIZUMUNEIZBDNZACNZVAACNZBDN
      ZUPURVCVETUMVAABCDUCUDUHVCUPTUGUHVBUOACBDUNEJOPQUGVEURTUHUGVDUQBDACUNEJOP
      RSUGUPUSTUHACUNUIJORUHURUTTUGBDUNUKJOQSUEUF $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z B $.  $d z C $.  $d z ph $.
    $( Nest the composition of two substitutions.  (Contributed by Mario
       Carneiro, 11-Nov-2016.) $)
    sbcnestgf $p |- ( ( A e. V /\ A. y F/ x ph ) ->
         ( [. A / x ]. [. B / y ]. ph <-> [. [_ A / x ]_ B / y ]. ph ) ) $=
      ( vz wcel wnf wal wsbc csb wb cv wi wceq dfsbcq sbceq1d cvv a1i vex nfnf1
      csbeq1 bibi12d imbi2d csbeq1a adantl nfal nfa1 wnfc nfcsb1v nfsbcd vtoclg
      sp sbciedf imp ) DFHABIZCJZACEKZBDKZACBDELZKZMZURUSBGNZKZACBVDELZKZMZOURV
      COGDFVDDPZVHVCURVIVEUTVGVBUSBVDDQVIACVFVABVDDEUCRUDUEURUSVGBVDSVDSHURGUAT
      BNVDPZUSVGMURVJACEVFBVDEUFRUGUQBCABUBUHURABCVFUQCUIBVFUJURBVDEUKTUQCUNULU
      OUMUP $.

    $( Nest the composition of two substitutions.  (Contributed by NM,
       23-Nov-2005.)  (Proof shortened by Mario Carneiro, 10-Nov-2016.) $)
    csbnestgf $p |- ( ( A e. V /\ A. y F/_ x C ) ->
         [_ A / x ]_ [_ B / y ]_ C = [_ [_ A / x ]_ B / y ]_ C ) $=
      ( vz wcel wnfc wal wa cv csb wsbc cab cvv wceq elex df-csb abeq2i wb nfcr
      sbcbii wnf alimi sbcnestgf sylan2 syl5bb abbidv sylan 3eqtr4g ) CFHZAEIZB
      JZKGLZBDEMZHZACNZGOZUOEHZBACDMZNZGOZACUPMBVAEMULCPHZUNUSVCQCFRVDUNKZURVBG
      URUTBDNZACNZVEVBUQVFACVFGUPBGDESTUCUNVDUTAUDZBJVGVBUAUMVHBAGEUBUEUTABCDPU
      FUGUHUIUJAGCUPSBGVAESUK $.

    $d x ph $.
    $( Nest the composition of two substitutions.  (Contributed by NM,
       27-Nov-2005.)  (Proof shortened by Mario Carneiro, 11-Nov-2016.) $)
    sbcnestg $p |- ( A e. V ->
          ( [. A / x ]. [. B / y ]. ph <-> [. [_ A / x ]_ B / y ]. ph ) ) $=
      ( wcel wnf wal wsbc csb wb nfv ax-gen sbcnestgf mpan2 ) DFGABHZCIACEJBDJA
      CBDEKJLQCABMNABCDEFOP $.

    $d x C $.
    $( Nest the composition of two substitutions.  (Contributed by NM,
       23-Nov-2005.)  (Proof shortened by Mario Carneiro, 10-Nov-2016.) $)
    csbnestg $p |- ( A e. V ->
          [_ A / x ]_ [_ B / y ]_ C = [_ [_ A / x ]_ B / y ]_ C ) $=
      ( wcel wnfc wal csb wceq nfcv ax-gen csbnestgf mpan2 ) CFGAEHZBIACBDEJJBA
      CDJEJKPBAELMABCDEFNO $.
  $}

  ${
    $d x A $.  $d x ph $.  $d x C $.  $d x D $.
    sbcco3g.1 $e |- ( x = A -> B = C ) $.
    $( Composition of two substitutions.  (Contributed by NM, 27-Nov-2005.)
       (Revised by Mario Carneiro, 11-Nov-2016.) $)
    sbcco3g $p |- ( A e. V ->
         ( [. A / x ]. [. B / y ]. ph <-> [. C / y ]. ph ) ) $=
      ( wcel wsbc csb sbcnestg cvv wceq wb elex nfcvd csbiegf dfsbcq 3syl bitrd
      ) DGIZACEJBDJACBDEKZJZACFJZABCDEGLUBDMIZUCFNUDUEODGPBDEFMUFBFQHRACUCFSTUA
      $.

    $( Composition of two class substitutions.  (Contributed by NM,
       27-Nov-2005.)  (Revised by Mario Carneiro, 11-Nov-2016.) $)
    csbco3g $p |- ( A e. V ->
                 [_ A / x ]_ [_ B / y ]_ D = [_ C / y ]_ D ) $=
      ( wcel csb csbnestg cvv wceq elex nfcvd csbiegf syl csbeq1d eqtrd ) CGIZA
      CBDFJJBACDJZFJBEFJABCDFGKTBUAEFTCLIZUAEMCGNACDELUBAEOHPQRS $.
  $}

  ${
    $d x y $.  $d y C $.
    $( Nest the composition of two substitutions.  (Contributed by NM,
       23-May-2006.)  (Proof shortened by Mario Carneiro, 11-Nov-2016.) $)
    csbnest1g $p |- ( A e. V ->
         [_ A / x ]_ [_ B / x ]_ C = [_ [_ A / x ]_ B / x ]_ C ) $=
      ( vy wcel cv csb wnfc wceq nfcsb1v ax-gen csbnestgf mpan2 csbeq2i 3eqtr3g
      wal csbco ) BEGZABFCAFHZDIZIZIZFABCIZUBIZABACDIZIAUEDITAUBJZFRUDUFKUHFAUA
      DLMAFBCUBENOABUCUGAFCDSPAFUEDSQ $.
  $}

  ${
    $d x A $.
    $( Idempotent law for class substitutions.  (Contributed by NM,
       1-Mar-2008.)  (Revised by NM, 18-Aug-2018.) $)
    csbidm $p |- [_ A / x ]_ [_ A / x ]_ B = [_ A / x ]_ B $=
      ( cvv wcel csb wceq csbnest1g csbconstg csbeq1d eqtrd wn c0 csbprc eqtr4d
      pm2.61i ) BDEZABABCFZFZRGQSAABBFZCFRABBCDHQATBCABBDIJKQLSMRABRNABCNOP $.

    $( Idempotent law for class substitutions.  (Contributed by NM,
       1-Mar-2008.)  Obsolete as of 18-Aug-2018.  Use ~ csbidm instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbidmgOLD $p |- ( A e. V -> [_ A / x ]_ [_ A / x ]_ B = [_ A / x ]_ B ) $=
      ( wcel cvv csb wceq elex csbnest1g csbconstg csbeq1d eqtrd syl ) BDEBFEZA
      BABCGZGZPHBDIOQAABBGZCGPABBCFJOARBCABBFKLMN $.
  $}

  ${
    $d y z A $.  $d x y z $.
    $( The proper substitution of a class for setvar variable results in the
       class (if the class exists).  (Contributed by NM, 10-Nov-2005.) $)
    csbvarg $p |- ( A e. V -> [_ A / x ]_ x = A ) $=
      ( vz vy wcel cvv cv csb wceq elex wsbc cab df-csb sbcel2gv abbi1dv syl5eq
      vex ax-mp csbeq2i csbco 3eqtr3i syl ) BCFBGFZABAHZIZBJBCKUDUFDHZEHZFEBLZD
      MZBEBAUHUEIZIEBUHIUFUJEBUKUHUHGFZUKUHJERULUKUGUEFAUHLZDMUHADUHUENULUMDUHA
      UGUHGOPQSTAEBUEUAEDBUHNUBUDUIDBEUGBGOPQUC $.
  $}

  ${
    $d x y $.
    $( Substitution into a wff expressed in terms of substitution into a
       class.  (Contributed by NM, 15-Aug-2007.)  (Revised by NM,
       18-Aug-2018.) $)
    sbccsb $p |- ( [. A / x ]. ph <-> y e. [_ A / x ]_ { y | ph } ) $=
      ( wsbc cv cab wcel csb abid sbcbii sbcel2 bitr3i ) ABDECFZACGZHZBDENBDOIH
      PABDACJKBDNOLM $.

    $( Substitution into a wff expressed in terms of substitution into a
       class.  (Contributed by NM, 15-Aug-2007.)  Obsolete as of 18-Aug-2018.
       Use ~ sbccsb instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    sbccsbgOLD $p |- ( A e. V ->
                 ( [. A / x ]. ph <-> y e. [_ A / x ]_ { y | ph } ) ) $=
      ( wsbc cv cab wcel csb abid sbcbii sbcel2gOLD syl5bbr ) ABDFCGZACHZIZBDFD
      EIOBDPJIQABDACKLBDOPEMN $.
  $}

  $( Substitution into a wff expressed in using substitution into a class.
     (Contributed by NM, 27-Nov-2005.)  (Revised by NM, 18-Aug-2018.) $)
  sbccsb2 $p |- ( [. A / x ]. ph <-> A e. [_ A / x ]_ { x | ph } ) $=
    ( wsbc cvv wcel cab sbcex elex cv abid sbcbii sbcel12 csbvarg eleq1d syl5bb
    csb syl5bbr pm5.21nii ) ABCDZCEFZCBCABGZQZFZABCHCUCITBJZUBFZBCDZUAUDUFABCAB
    KLUGBCUEQZUCFUAUDBCUEUBMUAUHCUCBCENOPRS $.

  $( Substitution into a wff expressed in using substitution into a class.
     (Contributed by NM, 27-Nov-2005.)  Obsolete as of 18-Aug-2018.  Use
     ~ sbccsb2 instead.  (New usage is discouraged.)
     (Proof modification is discouraged.) $)
  sbccsb2gOLD $p |- ( A e. V ->
               ( [. A / x ]. ph <-> A e. [_ A / x ]_ { x | ph } ) ) $=
    ( wsbc cv cab wcel csb abid sbcbii sbcel12gOLD csbvarg eleq1d bitrd syl5bbr
    ) ABCEBFZABGZHZBCEZCDHZCBCRIZHZSABCABJKUATBCQIZUBHUCBCQRDLUAUDCUBBCDMNOP $.

  ${
    $d x B $.  $d x D $.
    $( Special case related to ~ rspsbc .  (Contributed by NM, 10-Dec-2005.)
       (Proof shortened by Eric Schmidt, 17-Jan-2007.) $)
    rspcsbela $p |- ( ( A e. B /\ A. x e. B C e. D ) -> [_ A / x ]_ C e. D ) $=
      ( wcel wral csb wsbc rspsbc sbcel1g sylibd imp ) BCFZDEFZACGZABDHEFZNPOAB
      IQOABCJABDECKLM $.
  $}

  ${
    $d w x y z $.  $d w y z A $.
    $( Two ways of expressing "" ` x ` is (effectively) not free in ` A ` .""
       (Contributed by Mario Carneiro, 14-Oct-2016.) $)
    sbnfc2 $p |- ( F/_ x A <-> A. y A. z [_ y / x ]_ A = [_ z / x ]_ A ) $=
      ( vw wnfc cv csb wceq wal cvv wcel vex csbtt mpan wsbc sbsbc sbcel2 bitri
      wsb eqtr4d alrimivv nfv wnf eleq2 3bitr4g 2alimi sbnf2 sylibr nfcd impbii
      wb ) ADFZABGZDHZACGZDHZIZCJBJZUMURBCUMUODUQUNKLUMUODIBMAUNDKNOUPKLUMUQDIC
      MAUPDKNOUAUBUSAEDUSEUCUSEGZDLZABTZVAACTZULZCJBJVAAUDURVDBCURUTUOLZUTUQLZV
      BVCUOUQUTUEVBVAAUNPVEVAABQAUNUTDRSVCVAAUPPVFVAACQAUPUTDRSUFUGVAABCUHUIUJU
      K $.
  $}

  ${
    $d y z A $.  $d z ph $.  $d x y z $.  $d V z $.
    $( Move substitution into a class abstraction.  (Contributed by NM,
       13-Dec-2005.)  (Revised by NM, 19-Aug-2018.) $)
    csbab $p |- [_ A / x ]_ { y | ph } = { y | [. A / x ]. ph } $=
      ( vz cab csb wsbc cv wcel df-clab sbsbc bitri sbccom sbcbii bitr4i sbcel2
      wsb 3bitrri eqriv ) EBDACFZGZABDHZCFZEIZUDJZUCCUEHZUEUAJZBDHZUEUBJUFUCCER
      UGUCECKUCCELMUGACUEHZBDHUIACBUEDNUHUJBDUHACERUJAECKACELMOPBDUEUAQST $.
  $}

  ${
    $d y z A $.  $d z ph $.  $d x y z $.  $d V z $.
    $( Move substitution into a class abstraction.  (Contributed by NM,
       13-Dec-2005.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.)  Obsolete
       as of 19-Aug-2018.  Use ~ csbab instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    csbabgOLD $p |- ( A e. V ->
                 [_ A / x ]_ { y | ph } = { y | [. A / x ]. ph } ) $=
      ( vz wcel cab csb wsbc sbccom wsb df-clab sbsbc sbcbii 3bitr4i sbcel2gOLD
      cv bitri syl5rbb eqrdv ) DEGZFBDACHZIZABDJZCHZFRZUFGZUGUCGZBDJZUBUGUDGUEC
      UGJZACUGJZBDJUHUJACBUGDKUHUECFLUKUEFCMUECFNSUIULBDUIACFLULAFCMACFNSOPBDUG
      UCEQTUA $.
  $}

  ${
    $d A y $.  $d B y $.  $d C y $.  $d x y $.
    $( Distribution of class substitution over union of two classes, inference
       version.  (Contributed by Drahflow, 23-Sep-2015.)  (Revised by Mario
       Carneiro, 11-Dec-2016.)  (Revised by NM, 13-Sep-2018.) $)
    csbun $p |- [_ A / x ]_ ( B u. C ) = ( [_ A / x ]_ B u. [_ A / x ]_ C ) $=
      ( vy cvv wcel cun csb wceq cv csbeq1 uneq12d eqeq12d nfcsb1v nfun csbeq1a
      vex c0 csbprc weq csbief vtoclg wn un0 a1i 3eqtr4rd pm2.61i ) BFGZABCDHZI
      ZABCIZABDIZHZJZAEKZUJIZAUPCIZAUPDIZHZJUOEBFUPBJZUQUKUTUNAUPBUJLVAURULUSUM
      AUPBCLAUPBDLMNAUPUJUTERAURUSAUPCOAUPDOPAEUACURDUSAUPCQAUPDQMUBUCUIUDZSSHZ
      SUNUKVCSJVBSUEUFVBULSUMSABCTABDTMABUJTUGUH $.
  $}

  ${
    $d x y z A $.  $d y z C $.  $d y z D $.
    $( Distribution of class substitution over union of two classes.
       (Contributed by Drahflow, 23-Sep-2015.)  (Revised by Mario Carneiro,
       11-Dec-2016.)  Obsolete as of 13-Sep-2018.  Use ~ csbun instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbungOLD $p |- ( A e. _V -> [_ A / x ]_ ( C u. D ) =
              ( [_ A / x ]_ C u. [_ A / x ]_ D ) ) $=
      ( cun csb cvv wnfc wcel nfcsb1v nfun a1i cv wceq csbeq1a uneq12d csbiegf
      ) ABCDEABCFZABDFZEZGATHBGIARSABCJABDJKLAMBNCRDSABCOABDOPQ $.

    ${
      csbun.1 $e |- A e. _V $.
      $( Distribution of class substitution over union of two classes,
         inference version.  (Contributed by Drahflow, 23-Sep-2015.)  Obsolete
         as of 13-Sep-2018.  Use ~ csbun instead.  (New usage is discouraged.)
         (Proof modification is discouraged.) $)
      csbuni2OLD $p |- [_ A / x ]_ ( C u. D ) =
                 ( [_ A / x ]_ C u. [_ A / x ]_ D ) $=
        ( cvv wcel cun csb wceq csbungOLD ax-mp ) BFGABCDHIABCIABDIHJEABCDKL $.
    $}
  $}

  ${
    $d A y $.  $d B y $.  $d C y $.  $d x y $.
    $( Distribute proper substitution into a class through an intersection
       relation.  (Contributed by Alan Sare, 22-Jul-2012.)  (Revised by NM,
       18-Aug-2018.) $)
    csbin $p |- [_ A / x ]_ ( B i^i C )
                 = ( [_ A / x ]_ B i^i [_ A / x ]_ C ) $=
      ( vy cvv wcel cin csb wceq cv csbeq1 ineq12d eqeq12d nfcsb1v nfin csbeq1a
      vex c0 csbprc weq csbief vtoclg wn in0 syl6req eqtrd pm2.61i ) BFGZABCDHZ
      IZABCIZABDIZHZJZAEKZUJIZAUPCIZAUPDIZHZJUOEBFUPBJZUQUKUTUNAUPBUJLVAURULUSU
      MAUPBCLAUPBDLMNAUPUJUTERAURUSAUPCOAUPDOPAEUACURDUSAUPCQAUPDQMUBUCUIUDZUKS
      UNABUJTVBUNSSHSVBULSUMSABCTABDTMSUEUFUGUH $.
  $}

  ${
    $d A y $.  $d C y $.  $d D y $.  $d x y $.
    $( Distribute proper substitution through an intersection relation.
       (Contributed by Alan Sare, 22-Jul-2012.)  Obsolete as of 18-Aug-2018.
       Use ~ csbin instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    csbingOLD $p |- ( A e. B -> [_ A / x ]_ ( C i^i D ) =
                  ( [_ A / x ]_ C i^i [_ A / x ]_ D ) ) $=
      ( vy cv cin csb wceq csbeq1 ineq12d eqeq12d nfcsb1v csbeq1a csbief vtoclg
      vex nfin ) AFGZDEHZIZATDIZATEIZHZJABUAIZABDIZABEIZHZJFBCTBJZUBUFUEUIATBUA
      KUJUCUGUDUHATBDKATBEKLMATUAUEFRAUCUDATDNATENSAGTJDUCEUDATDOATEOLPQ $.
  $}

  $( Two classes are empty iff their union is empty.  (Contributed by NM,
     11-Aug-2004.) $)
  un00 $p |- ( ( A = (/) /\ B = (/) ) <-> ( A u. B ) = (/) ) $=
    ( c0 wceq wa cun uneq12 un0 syl6eq wss ssun1 sseq2 mpbii sylib ssun2 impbii
    ss0b jca ) ACDZBCDZEZABFZCDZUAUBCCFCACBCGCHIUCSTUCACJZSUCAUBJUDABKUBCALMAQN
    UCBCJZTUCBUBJUEBAOUBCBLMBQNRP $.

  $( Only the universal class has the universal class as a subclass.
     (Contributed by NM, 17-Sep-2003.)  (Proof shortened by Andrew Salmon,
     26-Jun-2011.) $)
  vss $p |- ( _V C_ A <-> A = _V ) $=
    ( cvv wss wa wceq ssv biantrur eqss bitr4i ) BACZABCZJDABEKJAFGABHI $.

  $( The null set is a proper subset of any nonempty set.  (Contributed by NM,
     27-Feb-1996.) $)
  0pss $p |- ( (/) C. A <-> A =/= (/) ) $=
    ( c0 wpss wne wss 0ss df-pss mpbiran necom bitri ) BACZBADZABDKBAELAFBAGHBA
    IJ $.

  $( No set is a proper subset of the empty set.  (Contributed by NM,
     17-Jun-1998.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  npss0 $p |- -. A C. (/) $=
    ( c0 wpss wss wn wa wi 0ss a1i iman mpbi dfpss3 mtbir ) ABCABDZBADZEFZNOGPE
    ONAHINOJKABLM $.

  $( Any non-universal class is a proper subclass of the universal class.
     (Contributed by NM, 17-May-1998.) $)
  pssv $p |- ( A C. _V <-> -. A = _V ) $=
    ( cvv wpss wss wceq wn ssv dfpss2 mpbiran ) ABCABDABEFAGABHI $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Two ways of saying that two classes are disjoint (have no members in
       common).  (Contributed by NM, 17-Feb-2004.) $)
    disj $p |- ( ( A i^i B ) = (/) <-> A. x e. A -. x e. B ) $=
      ( cin c0 wceq cv wcel wn wi wal wral wa cab df-in eqeq1i abeq1 imnan noel
      wb nbn bitr2i albii 3bitri df-ral bitr4i ) BCDZEFZAGZBHZUICHZIZJZAKZULABL
      UHUJUKMZANZEFUOUIEHZTZAKUNUGUPEABCOPUOAEQURUMAUMUOIURUJUKRUQUOUISUAUBUCUD
      ULABUEUF $.

    $( Two ways of saying that two classes are disjoint.  (Contributed by Jeff
       Madsen, 19-Jun-2011.) $)
    disjr $p |- ( ( A i^i B ) = (/) <-> A. x e. B -. x e. A ) $=
      ( cin c0 wceq cv wcel wn wral incom eqeq1i disj bitri ) BCDZEFCBDZEFAGBHI
      ACJOPEBCKLACBMN $.

    $( Two ways of saying that two classes are disjoint (have no members in
       common).  (Contributed by NM, 19-Aug-1993.) $)
    disj1 $p |- ( ( A i^i B ) = (/) <-> A. x ( x e. A -> -. x e. B ) ) $=
      ( cin c0 wceq cv wcel wn wral wi wal disj df-ral bitri ) BCDEFAGZCHIZABJP
      BHQKALABCMQABNO $.

    $( Two ways of saying that two classes are disjoint, using the complement
       of ` B ` relative to a universe ` C ` .  (Contributed by NM,
       15-Feb-2007.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    reldisj $p |- ( A C_ C -> ( ( A i^i B ) = (/) <-> A C_ ( C \ B ) ) ) $=
      ( vx wss cv wcel wn wi wal cdif cin c0 wceq wb dfss2 pm5.44 eldif imbi2i
      wa syl6bbr sps sylbi albidv disj1 3bitr4g ) ACEZDFZAGZUHBGHZIZDJUIUHCBKZG
      ZIZDJABLMNAULEUGUKUNDUGUIUHCGZIZDJUKUNOZDACPUPUQDUPUKUIUOUJTZIUNUIUOUJQUM
      URUIUHCBRSUAUBUCUDDABUEDAULPUF $.

    $( Two ways of saying that two classes are disjoint.  (Contributed by NM,
       19-May-1998.) $)
    disj3 $p |- ( ( A i^i B ) = (/) <-> A = ( A \ B ) ) $=
      ( vx cv wcel wn wi wal cdif wb cin c0 wa pm4.71 eldif bibi2i bitr4i albii
      wceq disj1 dfcleq 3bitr4i ) CDZAEZUCBEFZGZCHUDUCABIZEZJZCHABKLSAUGSUFUICU
      FUDUDUEMZJUIUDUENUHUJUDUCABOPQRCABTCAUGUAUB $.

    $( Members of disjoint sets are not equal.  (Contributed by NM,
       28-Mar-2007.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    disjne $p |- ( ( ( A i^i B ) = (/) /\ C e. A /\ D e. B ) -> C =/= D ) $=
      ( vx cin c0 wceq wcel wne cv wn wral wi disj eleq1 notbid rspccva eleq1a
      wa necon3bd syl5com sylanb 3impia ) ABFGHZCAIZDBIZCDJZUEEKZBIZLZEAMZUFUGU
      HNEABOULUFTCBIZLZUGUHUKUNECAUICHUJUMUICBPQRUGUMCDDBCSUAUBUCUD $.
  $}

  $( A set can't belong to both members of disjoint classes.  (Contributed by
     NM, 28-Feb-2015.) $)
  disjel $p |- ( ( ( A i^i B ) = (/) /\ C e. A ) -> -. C e. B ) $=
    ( cin c0 wceq wcel wn cdif wi disj3 eleq2 eldifn syl6bi sylbi imp ) ABDEFZC
    AGZCBGHZQAABIZFZRSJABKUARCTGSATCLCABMNOP $.

  $( Two ways of saying that two classes are disjoint.  (Contributed by NM,
     17-May-1998.) $)
  disj2 $p |- ( ( A i^i B ) = (/) <-> A C_ ( _V \ B ) ) $=
    ( cvv wss cin c0 wceq cdif wb ssv reldisj ax-mp ) ACDABEFGACBHDIAJABCKL $.

  $( Two ways of saying that two classes are disjoint.  (Contributed by NM,
     21-Mar-2004.) $)
  disj4 $p |- ( ( A i^i B ) = (/) <-> -. ( A \ B ) C. A ) $=
    ( cin c0 wceq cdif wpss disj3 eqcom wss difss dfpss2 mpbiran con2bii 3bitri
    wn ) ABCDEAABFZEQAEZQAGZPABHAQISRSQAJRPABKQALMNO $.

  $( Intersection with a subclass of a disjoint class.  (Contributed by FL,
     24-Jan-2007.) $)
  ssdisj $p |- ( ( A C_ B /\ ( B i^i C ) = (/) ) -> ( A i^i C ) = (/) ) $=
    ( wss cin c0 wceq wa ss0b wi ssrin sstr2 syl syl5bir imp ss0 ) ABDZBCEZFGZH
    ACEZFDZTFGQSUASRFDZQUARIQTRDUBUAJABCKTRFLMNOTPM $.

  $( A class is a proper subset of its union with a disjoint nonempty class.
     (Contributed by NM, 15-Sep-2004.) $)
  disjpss $p |- ( ( ( A i^i B ) = (/) /\ B =/= (/) ) -> A C. ( A u. B ) ) $=
    ( cin c0 wceq wne wa wss wn cun wpss ssid biantru bitri sseq2 syl5bb syl6bi
    ssin ss0 necon3ad imp nsspssun uncom psseq2i sylib ) ABCZDEZBDFZGBAHZIZAABJ
    ZKZUGUHUJUGUIBDUGUIBDHZBDEUIBUFHZUGUMUIUIBBHZGUNUOUIBLMBABRNUFDBOPBSQTUAUJA
    BAJZKULBAUBUPUKABAUCUDNUE $.

  $( The union of disjoint classes is disjoint.  (Contributed by NM,
     26-Sep-2004.) $)
  undisj1 $p |- ( ( ( A i^i C ) = (/) /\ ( B i^i C ) = (/) ) <->
               ( ( A u. B ) i^i C ) = (/) ) $=
    ( cin c0 wceq wa cun un00 indir eqeq1i bitr4i ) ACDZEFBCDZEFGMNHZEFABHCDZEF
    MNIPOEABCJKL $.

  $( The union of disjoint classes is disjoint.  (Contributed by NM,
     13-Sep-2004.) $)
  undisj2 $p |- ( ( ( A i^i B ) = (/) /\ ( A i^i C ) = (/) ) <->
               ( A i^i ( B u. C ) ) = (/) ) $=
    ( cin c0 wceq wa cun un00 indi eqeq1i bitr4i ) ABDZEFACDZEFGMNHZEFABCHDZEFM
    NIPOEABCJKL $.

  $( Subclass expressed in terms of intersection with difference from the
     universal class.  (Contributed by NM, 17-Sep-2003.) $)
  ssindif0 $p |- ( A C_ B <-> ( A i^i ( _V \ B ) ) = (/) ) $=
    ( cvv cdif cin c0 wceq wss disj2 ddif sseq2i bitr2i ) ACBDZEFGACMDZHABHAMIN
    BABJKL $.

  $( The intersection of classes with a common member is nonempty.
     (Contributed by NM, 7-Apr-1994.) $)
  inelcm $p |- ( ( A e. B /\ A e. C ) -> ( B i^i C ) =/= (/) ) $=
    ( wcel wa cin c0 wne elin ne0i sylbir ) ABDACDEABCFZDLGHABCILAJK $.

  $( A minimum element of a class has no elements in common with the class.
     (Contributed by NM, 22-Jun-1994.) $)
  minel $p |- ( ( A e. B /\ ( C i^i B ) = (/) ) -> -. A e. C ) $=
    ( cin c0 wceq wcel wn wa wi inelcm necon2bi imnan sylibr con2d impcom ) CBD
    ZEFZABGZACGZHRTSRTSIZHTSHJUAQEACBKLTSMNOP $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Distribute union over difference.  (Contributed by NM, 17-May-1998.)
       (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    undif4 $p |- ( ( A i^i C ) = (/) ->
                 ( A u. ( B \ C ) ) = ( ( A u. B ) \ C ) ) $=
      ( vx cv wcel wn wi wal cdif cun wb cin c0 wceq wo wa eldif elun 3bitr4g
      pm2.621 olc impbid1 anbi2d orbi2i bitri anbi1i alimi disj1 dfcleq 3imtr4i
      ordi ) DEZAFZUMCFGZHZDIUMABCJZKZFZUMABKZCJZFZLZDIACMNOURVAOUPVCDUPUNUMUQF
      ZPZUMUTFZUOQZUSVBUPUNUMBFZPZUNUOPZQZVIUOQVEVGUPVJUOVIUPVJUOUNUOUAUOUNUBUC
      UDVEUNVHUOQZPVKVDVLUNUMBCRUEUNVHUOULUFVFVIUOUMABSUGTUMAUQSUMUTCRTUHDACUID
      URVAUJUK $.

    $( Subset relation for disjoint classes.  (Contributed by NM,
       25-Oct-2005.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    disjssun $p |- ( ( A i^i B ) = (/) -> ( A C_ ( B u. C ) <-> A C_ C ) ) $=
      ( cin c0 wceq cun wss indi equncomi uneq2 un0 syl6eq syl5eq df-ss 3bitr4g
      eqeq1d ) ABDZEFZABCGZDZAFACDZAFATHACHSUAUBASUAUBRGZUBUARUBABCIJSUCUBEGUBR
      EUBKUBLMNQATOACOP $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass expressed in terms of difference.  Exercise 7 of
       [TakeutiZaring] p. 22.  (Contributed by NM, 29-Apr-1994.) $)
    ssdif0 $p |- ( A C_ B <-> ( A \ B ) = (/) ) $=
      ( vx cv wcel wi wal cdif wn wss c0 wceq wa eldif xchbinxr albii dfss2 eq0
      iman 3bitr4i ) CDZAEZUABEZFZCGUAABHZEZIZCGABJUEKLUDUGCUDUBUCIMUFUBUCSUAAB
      NOPCABQCUERT $.
  $}

  $( Universal class equality in terms of empty difference.  (Contributed by
     NM, 17-Sep-2003.) $)
  vdif0 $p |- ( A = _V <-> ( _V \ A ) = (/) ) $=
    ( cvv wceq wss cdif c0 vss ssdif0 bitr3i ) ABCBADBAEFCAGBAHI $.

  ${
    $d V x $.
    $( If the difference between the restricting class of a restricted class
       abstraction and the restricted class abstraction is empty, the
       restricting class is equal to this restricted class abstraction.
       (Contributed by Alexander van der Vekens, 31-Dec-2017.) $)
    difrab0eq $p |- ( ( V \ { x e. V | ph } ) = (/)
                      <-> V = { x e. V | ph } ) $=
      ( crab cdif c0 wceq wss ssdif0 ssrabeq bitr3i ) CABCDZEFGCLHCLGCLIABCJK
      $.
  $}

  $( A proper subclass has a nonempty difference.  (Contributed by NM,
     3-May-1994.) $)
  pssdifn0 $p |- ( ( A C_ B /\ A =/= B ) -> ( B \ A ) =/= (/) ) $=
    ( wss wne cdif c0 wceq ssdif0 eqss simplbi2 syl5bir necon3d imp ) ABCZABDBA
    EZFDNOFABOFGBACZNABGZBAHQNPABIJKLM $.

  $( A proper subclass has a nonempty difference.  (Contributed by Mario
     Carneiro, 27-Apr-2016.) $)
  pssdif $p |- ( A C. B -> ( B \ A ) =/= (/) ) $=
    ( wpss wss wne wa cdif c0 df-pss pssdifn0 sylbi ) ABCABDABEFBAGHEABIABJK $.

  $( A subclass missing a member is a proper subclass.  (Contributed by NM,
     12-Jan-2002.) $)
  ssnelpss $p |- ( A C_ B -> ( ( C e. B /\ -. C e. A ) -> A C. B ) ) $=
    ( wcel wn wa wceq wss wpss nelneq2 eqcom sylnib dfpss2 baibr syl5ib ) CBDCA
    DEFZABGZEZABHZABIZPBAGQCBAJBAKLTSRABMNO $.

  ${
    ssnelpssd.1 $e |- ( ph -> A C_ B ) $.
    ssnelpssd.2 $e |- ( ph -> C e. B ) $.
    ssnelpssd.3 $e |- ( ph -> -. C e. A ) $.
    $( Subclass inclusion with one element of the superclass missing is proper
       subclass inclusion.  Deduction form of ~ ssnelpss .  (Contributed by
       David Moews, 1-May-2017.) $)
    ssnelpssd $p |- ( ph -> A C. B ) $=
      ( wcel wn wpss wss wa wi ssnelpss syl mp2and ) ADCHZDBHIZBCJZFGABCKQRLSME
      BCDNOP $.
  $}

  ${
    $d A x $.  $d B x $.
    $( If there is an element of a class which is not contained in a subclass,
       the subclass is a proper subclass.  (Contributed by AV, 29-Jan-2020.) $)
    ssexnelpss $p |- ( ( A C_ B /\ E. x e. B x e/ A ) -> A C. B ) $=
      ( wss cv wnel wrex wpss wcel df-nel ssnelpss expdimp syl5bi rexlimdva imp
      wn wa ) BCDZAEZBFZACGBCHZRTUAACTSBIPZRSCIZQUASBJRUCUBUABCSKLMNO $.
  $}

  ${
    $d x A $.  $d x B $.
    $( A proper subclass has a member in one argument that's not in both.
       (Contributed by NM, 29-Feb-1996.) $)
    pssnel $p |- ( A C. B -> E. x ( x e. B /\ -. x e. A ) ) $=
      ( wpss cv cdif wcel wex wn wa c0 wne pssdif n0 sylib eldif exbii ) BCDZAE
      ZCBFZGZAHZSCGSBGIJZAHRTKLUBBCMATNOUAUCASCBPQO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Difference, intersection, and subclass relationship.  (Contributed by
       NM, 30-Apr-1994.)  (Proof shortened by Wolf Lammen, 30-Sep-2014.) $)
    difin0ss $p |- ( ( ( A \ B ) i^i C ) = (/) -> ( C C_ A -> C C_ B ) ) $=
      ( vx cdif cin c0 wceq cv wcel wn wal wss wi eq0 wa iman elin eldif dfss2
      anbi1i bitri ancom annim anbi2i 3bitr2i xchbinxr ax-2 sylbir al2imi sylbi
      3imtr4g ) ABEZCFZGHDIZUNJZKZDLZCAMZCBMZNDUNOURUOCJZUOAJZNZDLVAUOBJZNZDLUS
      UTUQVCVEDUQVAVBVDNZNZVCVENVGVAVFKZPZUPVAVFQUPVBVDKPZVAPZVAVJPVIUPUOUMJZVA
      PVKUOUMCRVLVJVAUOABSUAUBVAVJUCVJVHVAVBVDUDUEUFUGVAVBVDUHUIUJDCATDCBTULUK
      $.

    $( Intersection, subclass, and difference relationship.  (Contributed by
       NM, 27-Oct-1996.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.)
       (Proof shortened by Wolf Lammen, 30-Sep-2014.) $)
    inssdif0 $p |- ( ( A i^i B ) C_ C <-> ( A i^i ( B \ C ) ) = (/) ) $=
      ( vx cv cin wcel wi wal cdif wn wss c0 wceq elin imbi1i iman bitri eldif
      wa anbi2i anass 3bitr4ri xchbinx albii dfss2 eq0 3bitr4i ) DEZABFZGZUICGZ
      HZDIUIABCJZFZGZKZDIUJCLUOMNUMUQDUMUIAGZUIBGZTZULKZTZUPUMUTULHVBKUKUTULUIA
      BOPUTULQRURUIUNGZTURUSVATZTUPVBVCVDURUIBCSUAUIAUNOURUSVAUBUCUDUEDUJCUFDUO
      UGUH $.
  $}

  $( The difference between a class and itself is the empty set.  Proposition
     5.15 of [TakeutiZaring] p. 20.  Also Theorem 32 of [Suppes] p. 28.
     (Contributed by NM, 22-Apr-2004.) $)
  difid $p |- ( A \ A ) = (/) $=
    ( wss cdif c0 wceq ssid ssdif0 mpbi ) AABAACDEAFAAGH $.

  ${
    $d x A $.
    $( Alternate proof of ~ difid .  (Contributed by David Abernethy,
       17-Jun-2012.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    difidALT $p |- ( A \ A ) = (/) $=
      ( vx cdif cv wcel wn crab c0 dfdif2 dfnul3 eqtr4i ) AACBDAEFBAGHBAAIBAJK
      $.
  $}

  $( The difference between a class and the empty set.  Part of Exercise 4.4 of
     [Stoll] p. 16.  (Contributed by NM, 17-Aug-2004.) $)
  dif0 $p |- ( A \ (/) ) = A $=
    ( cdif c0 difid difeq2i difdif eqtr3i ) AAABZBACBAHCAADEAAFG $.

  $( The difference between the empty set and a class.  Part of Exercise 4.4 of
     [Stoll] p. 16.  (Contributed by NM, 17-Aug-2004.) $)
  0dif $p |- ( (/) \ A ) = (/) $=
    ( c0 cdif wss wceq difss ss0 ax-mp ) BACZBDIBEBAFIGH $.

  $( A class and its relative complement are disjoint.  Theorem 38 of [Suppes]
     p. 29.  (Contributed by NM, 24-Mar-1998.) $)
  disjdif $p |- ( A i^i ( B \ A ) ) = (/) $=
    ( cin wss cdif c0 wceq inss1 inssdif0 mpbi ) ABCADABAECFGABHABAIJ $.

  $( The difference of a class from its intersection is empty.  Theorem 37 of
     [Suppes] p. 29.  (Contributed by NM, 17-Aug-2004.)  (Proof shortened by
     Andrew Salmon, 26-Jun-2011.) $)
  difin0 $p |- ( ( A i^i B ) \ B ) = (/) $=
    ( cin wss cdif c0 wceq inss2 ssdif0 mpbi ) ABCZBDKBEFGABHKBIJ $.

  $( The union of a class and its complement is the universe.  Theorem 5.1(5)
     of [Stoll] p. 17.  (Contributed by NM, 17-Aug-2004.) $)
  unvdif $p |- ( A u. ( _V \ A ) ) = _V $=
    ( cvv cdif cun cin c0 dfun3 disjdif difeq2i dif0 3eqtri ) ABACZDBLBLCEZCBFC
    BALGMFBLBHIBJK $.

  $( Absorption of difference by union.  This decomposes a union into two
     disjoint classes (see ~ disjdif ).  Theorem 35 of [Suppes] p. 29.
     (Contributed by NM, 19-May-1998.) $)
  undif1 $p |- ( ( A \ B ) u. B ) = ( A u. B ) $=
    ( cvv cdif cin undir invdif uneq1i uncom unvdif eqtri ineq2i inv1 3eqtr3i
    cun ) ACBDZEZBOABOZPBOZEZABDZBORAPBFQUABABGHTRCERSCRSBPOCPBIBJKLRMKN $.

  $( Absorption of difference by union.  This decomposes a union into two
     disjoint classes (see ~ disjdif ).  Part of proof of Corollary 6K of
     [Enderton] p. 144.  (Contributed by NM, 19-May-1998.) $)
  undif2 $p |- ( A u. ( B \ A ) ) = ( A u. B ) $=
    ( cdif cun uncom undif1 3eqtri ) ABACZDHADBADABDAHEBAFBAEG $.

  $( Absorption of difference by union.  (Contributed by NM, 18-Aug-2013.) $)
  undifabs $p |- ( A u. ( A \ B ) ) = A $=
    ( cdif cun undif3 unidm difeq1i difdif 3eqtri ) AABCDAADZBACZCAKCAAABEJAKAF
    GABHI $.

  ${
    $d x A $.  $d x B $.
    $( The intersection and class difference of a class with another class
       unite to give the original class.  (Contributed by Paul Chapman,
       5-Jun-2009.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    inundif $p |- ( ( A i^i B ) u. ( A \ B ) ) = A $=
      ( vx cin cdif cv wcel wo wa wn elin eldif orbi12i pm4.42 bitr4i uneqri )
      CABDZABEZACFZQGZSRGZHSAGZSBGZIZUBUCJIZHUBTUDUAUESABKSABLMUBUCNOP $.
  $}

  $( Absorption of union by difference.  Theorem 36 of [Suppes] p. 29.
     (Contributed by NM, 19-May-1998.) $)
  difun2 $p |- ( ( A u. B ) \ B ) = ( A \ B ) $=
    ( cun cdif c0 difundir difid uneq2i un0 3eqtri ) ABCBDABDZBBDZCKECKABBFLEKB
    GHKIJ $.

  $( Union of complementary parts into whole.  (Contributed by NM,
     22-Mar-1998.) $)
  undif $p |- ( A C_ B <-> ( A u. ( B \ A ) ) = B ) $=
    ( wss cun wceq cdif ssequn1 undif2 eqeq1i bitr4i ) ABCABDZBEABAFDZBEABGLKBA
    BHIJ $.

  $( A subset of a difference does not intersect the subtrahend.  (Contributed
     by Jeff Hankins, 1-Sep-2013.)  (Proof shortened by Mario Carneiro,
     24-Aug-2015.) $)
  ssdifin0 $p |- ( A C_ ( B \ C ) -> ( A i^i C ) = (/) ) $=
    ( cdif wss cin c0 wceq ssrin incom disjdif eqtri sseq0 sylancl ) ABCDZEACFZ
    OCFZEQGHPGHAOCIQCOFGOCJCBKLPQMN $.

  $( A class is a subclass of itself subtracted from another iff it is the
     empty set.  (Contributed by Steve Rodriguez, 20-Nov-2015.) $)
  ssdifeq0 $p |- ( A C_ ( B \ A ) <-> A = (/) ) $=
    ( cdif wss wceq cin inidm ssdifin0 syl5eqr 0ss difeq2 sseq12d mpbiri impbii
    c0 id ) ABACZDZAOEZRAAAFOAGABAHISROBOCZDTJSAOQTSPAOBKLMN $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( A condition equivalent to inclusion in the union of two classes.
       (Contributed by NM, 26-Mar-2007.) $)
    ssundif $p |- ( A C_ ( B u. C ) <-> ( A \ B ) C_ C ) $=
      ( vx cv wcel cun wi wal cdif wss wn wa wo pm5.6 eldif imbi1i imbi2i dfss2
      elun 3bitr4ri albii 3bitr4i ) DEZAFZUDBCGZFZHZDIUDABJZFZUDCFZHZDIAUFKUICK
      UHULDUEUDBFZLMZUKHUEUMUKNZHULUHUEUMUKOUJUNUKUDABPQUGUOUEUDBCTRUAUBDAUFSDU
      ICSUC $.
  $}

  $( Swap the arguments of a class difference.  (Contributed by NM,
     29-Mar-2007.) $)
  difcom $p |- ( ( A \ B ) C_ C <-> ( A \ C ) C_ B ) $=
    ( cun wss cdif uncom sseq2i ssundif 3bitr3i ) ABCDZEACBDZEABFCEACFBEKLABCGH
    ABCIACBIJ $.

  $( Two ways to express overlapping subsets.  (Contributed by Stefan O'Rear,
     31-Oct-2014.) $)
  pssdifcom1 $p |- ( ( A C_ C /\ B C_ C ) ->
    ( ( C \ A ) C. B <-> ( C \ B ) C. A ) ) $=
    ( wss wa cdif wn wpss wb difcom ssconb ancoms notbid anbi12d dfpss3 3bitr4g
    a1i ) ACDZBCDZEZCAFZBDZBUADZGZECBFZADZAUEDZGZEUABHUEAHTUBUFUDUHUBUFITCABJQT
    UCUGSRUCUGIBACKLMNUABOUEAOP $.

  $( Two ways to express non-covering pairs of subsets.  (Contributed by Stefan
     O'Rear, 31-Oct-2014.) $)
  pssdifcom2 $p |- ( ( A C_ C /\ B C_ C ) ->
    ( B C. ( C \ A ) <-> A C. ( C \ B ) ) ) $=
    ( wss wa cdif wn wpss wb ssconb ancoms difcom notbid anbi12d dfpss3 3bitr4g
    a1i ) ACDZBCDZEZBCAFZDZUABDZGZEACBFZDZUEADZGZEBUAHAUEHTUBUFUDUHSRUBUFIBACJK
    TUCUGUCUGITCABLQMNBUAOAUEOP $.

  $( Distributive law for class difference.  Exercise 4.8 of [Stoll] p. 16.
     (Contributed by NM, 18-Aug-2004.) $)
  difdifdir $p |- ( ( A \ B ) \ C ) = ( ( A \ C ) \ ( B \ C ) ) $=
    ( cdif cvv cun cin dif32 invdif eqtr4i un0 indi disjdif incom eqtr3i uneq2i
    c0 ddif indm difeq2i ineq2i 3eqtri ) ABDCDZACDZEBDZCFZGZUDEBCDZDZGUDUHDUCUD
    UEGZQFZUGUCUJUKUCUDBDUJABCHUDBIJUJKJUGUJUDCGZFUKUDUECLQULUJCUDGQULCAMCUDNOP
    JJUFUIUDUEEECDZDZFZUFUIUNCUECRPEBUMGZDUOUIBUMSUPUHEBCITOOUAUDUHIUB $.

  $( Two ways to say that ` A ` and ` B ` partition ` C ` (when ` A ` and ` B `
     don't overlap and ` A ` is a part of ` C ` ).  (Contributed by FL,
     17-Nov-2008.) $)
  uneqdifeq $p |- ( ( A C_ C /\ ( A i^i B ) = (/) )
     -> ( ( A u. B ) = C <-> ( C \ A ) = B ) ) $=
    ( wss cin c0 wceq wa cun cdif uncom eqcomd difeq1 difun2 incom expcom com12
    wi eqtr adantl eqeq1i disj3 bitri eqcoms sylbi syl5com syl mpan difss sseq1
    sylancl biimpi syl6bi mpi adantr imp eqimss ssundif sylibr adantlr eqssd ex
    unss impbid ) ACDZABEZFGZHZABIZCGZCAJZBGZVGVJVLRVEVJVGVLBAIZVIGZVJVGVLRZBAK
    VNVJHZCVMGZVOVPVMCVMVICSLVQVKVMAJZGZVRBAJZGZVOCVMAMBANVSWAHVKVTGZVGVLVKVRVT
    SVGBVTGZWBVLRZVGBAEZFGWCVFWEFABOUABAUBUCWDVTBWBVTBGVLVKVTBSPUDUEUFUKUGUHQTV
    HVLVJVHVLHVICVHVLVICDZVEVLWFRVGVLVEWFVLVKCDZVEWFRZCAUIVLWGBCDZWHVKBCUJVEWIW
    FVEWIHWFABCVCULPUMUNQUOUPVEVLCVIDZVGVEVLHVKBDZWJVLWKVEVKBUQTCABURUSUTVAVBVD
    $.

  ${
    $d A x $.  $d B x $.
    raldifeq.1 $e |- ( ph -> A C_ B ) $.
    raldifeq.2 $e |- ( ph -> A. x e. ( B \ A ) ps ) $.
    $( Equality theorem for restricted universal quantifier.  (Contributed by
       Thierry Arnoux, 6-Jul-2019.) $)
    raldifeq $p |- ( ph -> ( A. x e. A ps <-> A. x e. B ps ) ) $=
      ( wral cdif cun wa biantrud ralunb syl6bbr wceq undif sylib raleqdv bitrd
      wss ) ABCDHZBCDEDIZJZHZBCEHAUAUABCUBHZKUDAUEUAGLBCDUBMNABCUCEADETUCEOFDEP
      QRS $.
  $}

  ${
    $d x A $.
    $( Theorem 19.2 of [Margaris] p. 89 with restricted quantifiers (compare
       ~ 19.2 ).  The restricted version is valid only when the domain of
       quantification is not empty.  (Contributed by NM, 15-Nov-2003.) $)
    r19.2z $p |- ( ( A =/= (/) /\ A. x e. A ph ) -> E. x e. A ph ) $=
      ( wral c0 wne wrex cv wex wa wi wal df-ral exintr sylbi n0 df-rex 3imtr4g
      wcel impcom ) ABCDZCEFZABCGZUABHCSZBIZUDAJBIZUBUCUAUDAKBLUEUFKABCMUDABNOB
      CPABCQRT $.

    $( A response to the notion that the condition ` A =/= (/) ` can be removed
       in ~ r19.2z .  Interestingly enough, ` ph ` does not figure in the
       left-hand side.  (Contributed by Jeff Hankins, 24-Aug-2009.) $)
    r19.2zb $p |- ( A =/= (/) <-> ( A. x e. A ph -> E. x e. A ph ) ) $=
      ( c0 wral wrex wi r19.2z ex wceq cv wcel noel pm2.21i rgen raleq necon3bi
      wne mpbiri wex wa exsimpl df-rex n0 3imtr4i ja impbii ) CDRZABCEZABCFZGUH
      UIUJABCHIUIUJUHUICDCDJUIABDEABDBKZDLAUKMNOABCDPSQUKCLZAUABTULBTUJUHULABUB
      ABCUCBCUDUEUFUG $.
  $}

  ${
    $d x A $.
    r19.3rz.1 $e |- F/ x ph $.
    $( Restricted quantification of wff not containing quantified variable.
       (Contributed by FL, 3-Jan-2008.) $)
    r19.3rz $p |- ( A =/= (/) -> ( ph <-> A. x e. A ph ) ) $=
      ( c0 wne cv wcel wex wi wral wb n0 biimt sylbi df-ral 19.23 bitri syl6bbr
      wal ) CEFZABGCHZBIZAJZABCKZUAUCAUDLBCMUCANOUEUBAJBTUDABCPUBABDQRS $.

    $( Restricted quantifier version of Theorem 19.28 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 26-Oct-2010.) $)
    r19.28z $p |- ( A =/= (/) ->
                   ( A. x e. A ( ph /\ ps ) <-> ( ph /\ A. x e. A ps ) ) ) $=
      ( c0 wne wral wa r19.3rz anbi1d r19.26 syl6rbbr ) DFGZABCDHZIACDHZOIABICD
      HNAPOACDEJKABCDLM $.
  $}

  ${
    $d x A $.  $d x ph $.
    $( Restricted quantification of wff not containing quantified variable.
       (Contributed by NM, 10-Mar-1997.) $)
    r19.3rzv $p |- ( A =/= (/) -> ( ph <-> A. x e. A ph ) ) $=
      ( c0 wne cv wcel wex wi wb n0 biimt sylbi wal df-ral 19.23v bitri syl6bbr
      wral ) CDEZABFCGZBHZAIZABCSZTUBAUCJBCKUBALMUDUAAIBNUCABCOUAABPQR $.

    $( Restricted quantification of wff not containing quantified variable.
       (Contributed by NM, 27-May-1998.) $)
    r19.9rzv $p |- ( A =/= (/) -> ( ph <-> E. x e. A ph ) ) $=
      ( c0 wne wn wral wrex r19.3rzv bicomd con2bid dfrex2 syl6bbr ) CDEZAAFZBC
      GZFABCHNPANOPOBCIJKABCLM $.

    $( Restricted quantifier version of Theorem 19.28 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 19-Aug-2004.) $)
    r19.28zv $p |- ( A =/= (/) ->
                   ( A. x e. A ( ph /\ ps ) <-> ( ph /\ A. x e. A ps ) ) ) $=
      ( c0 wne wral wa r19.3rzv anbi1d r19.26 syl6rbbr ) DEFZABCDGZHACDGZNHABHC
      DGMAONACDIJABCDKL $.

    $( Restricted quantifier version of Theorem 19.37 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by Paul Chapman, 8-Oct-2007.) $)
    r19.37zv $p |- ( A =/= (/) ->
                   ( E. x e. A ( ph -> ps ) <-> ( ph -> E. x e. A ps ) ) ) $=
      ( c0 wne wrex wi wral r19.3rzv imbi1d r19.35 syl6rbbr ) DEFZABCDGZHACDIZO
      HABHCDGNAPOACDJKABCDLM $.

    $( Restricted version of Theorem 19.45 of [Margaris] p. 90.  (Contributed
       by NM, 27-May-1998.) $)
    r19.45zv $p |- ( A =/= (/) ->
                   ( E. x e. A ( ph \/ ps ) <-> ( ph \/ E. x e. A ps ) ) ) $=
      ( c0 wne wrex wo r19.9rzv orbi1d r19.43 syl6rbbr ) DEFZABCDGZHACDGZNHABHC
      DGMAONACDIJABCDKL $.
  $}

  ${
    $d x A $.
    r19.27z.1 $e |- F/ x ps $.
    $( Restricted quantifier version of Theorem 19.27 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 26-Oct-2010.) $)
    r19.27z $p |- ( A =/= (/) ->
                   ( A. x e. A ( ph /\ ps ) <-> ( A. x e. A ph /\ ps ) ) ) $=
      ( c0 wne wral wa r19.3rz anbi2d r19.26 syl6rbbr ) DFGZACDHZBIOBCDHZIABICD
      HNBPOBCDEJKABCDLM $.
  $}

  ${
    $d x A $.  $d x ps $.
    $( Restricted quantifier version of Theorem 19.27 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 19-Aug-2004.) $)
    r19.27zv $p |- ( A =/= (/) ->
                   ( A. x e. A ( ph /\ ps ) <-> ( A. x e. A ph /\ ps ) ) ) $=
      ( c0 wne wral wa r19.3rzv anbi2d r19.26 syl6rbbr ) DEFZACDGZBHNBCDGZHABHC
      DGMBONBCDIJABCDKL $.

    $( Restricted quantifier version of Theorem 19.36 of [Margaris] p. 90.  It
       is valid only when the domain of quantification is not empty.
       (Contributed by NM, 20-Sep-2003.) $)
    r19.36zv $p |- ( A =/= (/) ->
                   ( E. x e. A ( ph -> ps ) <-> ( A. x e. A ph -> ps ) ) ) $=
      ( c0 wne wral wi wrex r19.9rzv imbi2d r19.35 syl6rbbr ) DEFZACDGZBHOBCDIZ
      HABHCDINBPOBCDJKABCDLM $.
  $}

  ${
    $d x A $.
    $( Vacuous quantification is always true.  (Contributed by NM,
       11-Mar-1997.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
    rzal $p |- ( A = (/) -> A. x e. A ph ) $=
      ( c0 wceq cv wcel ne0i necon2bi pm2.21d ralrimiv ) CDEZABCLBFZCGZANCDCMHI
      JK $.

    $( Restricted existential quantification implies its restriction is
       nonempty.  (Contributed by Szymon Jaroszewicz, 3-Apr-2007.) $)
    rexn0 $p |- ( E. x e. A ph -> A =/= (/) ) $=
      ( c0 wne cv wcel ne0i a1d rexlimiv ) ACDEZBCBFZCGKACLHIJ $.

    $( Idempotent law for restricted quantifier.  (Contributed by NM,
       28-Mar-1997.) $)
    ralidm $p |- ( A. x e. A A. x e. A ph <-> A. x e. A ph ) $=
      ( c0 wceq wral wb rzal 2thd wn cv wcel wex neq0 wi biimt wal df-ral nfra1
      19.23 bitri syl6rbbr sylbi pm2.61i ) CDEZABCFZBCFZUFGZUEUGUFUFBCHABCHIUEJ
      BKCLZBMZUHBCNUJUFUJUFOZUGUJUFPUGUIUFOBQUKUFBCRUIUFBABCSTUAUBUCUD $.
  $}

  $( Vacuous universal quantification is always true.  (Contributed by NM,
     20-Oct-2005.) $)
  ral0 $p |- A. x e. (/) ph $=
    ( c0 cv wcel noel pm2.21i rgen ) ABCBDZCEAIFGH $.

  ${
    $d x A $.
    rgenz.1 $e |- ( ( A =/= (/) /\ x e. A ) -> ph ) $.
    $( Generalization rule that eliminates a non-zero class requirement.
       (Contributed by NM, 8-Dec-2012.) $)
    rgenz $p |- A. x e. A ph $=
      ( wral c0 rzal wne ralrimiva pm2.61ine ) ABCECFABCGCFHABCDIJ $.
  $}

  ${
    $d x A $.
    ralf0.1 $e |- -. ph $.
    $( The quantification of a falsehood is vacuous when true.  (Contributed by
       NM, 26-Nov-2005.) $)
    ralf0 $p |- ( A. x e. A ph <-> A = (/) ) $=
      ( wral c0 wceq cv wcel wi wal wn con3 mpi alimi df-ral eq0 3imtr4i impbii
      rzal ) ABCEZCFGZBHCIZAJZBKUCLZBKUAUBUDUEBUDALUEDUCAMNOABCPBCQRABCTS $.
  $}

  $( TODO - shorten r19.3zv, r19.27zv, r19.28zv, raaanv w/ non-v $)
  ${
    $d x y A $.
    raaan.1 $e |- F/ y ph $.
    raaan.2 $e |- F/ x ps $.
    $( Rearrange restricted quantifiers.  (Contributed by NM, 26-Oct-2010.) $)
    raaan $p |- ( A. x e. A A. y e. A ( ph /\ ps ) <->
                  ( A. x e. A ph /\ A. y e. A ps ) ) $=
      ( wa wral wb c0 wceq rzal pm5.1 syl12anc wne r19.28z ralbidv nfcv nfral
      r19.27z bitrd pm2.61ine ) ABHDEIZCEIZACEIZBDEIZHZJZEKEKLUEUFUGUIUDCEMACEM
      BDEMUEUHNOEKPZUEAUGHZCEIUHUJUDUKCEABDEFQRAUGCEBCDECESGTUAUBUC $.
  $}

  ${
    $d y ph $.  $d x ps $.  $d x y A $.
    $( Rearrange restricted quantifiers.  (Contributed by NM, 11-Mar-1997.) $)
    raaanv $p |- ( A. x e. A A. y e. A ( ph /\ ps ) <->
                  ( A. x e. A ph /\ A. y e. A ps ) ) $=
      ( wa wral wb wceq rzal pm5.1 syl12anc wne r19.28zv ralbidv r19.27zv bitrd
      c0 pm2.61ine ) ABFDEGZCEGZACEGZBDEGZFZHZERERIUAUBUCUETCEJACEJBDEJUAUDKLER
      MZUAAUCFZCEGUDUFTUGCEABDENOAUCCEPQS $.
  $}

  ${
    $d z y $.  $d z x A $.
    $( Set substitution into the first argument of a subset relation.
       (Contributed by Rodolfo Medina, 7-Jul-2010.)  (Proof shortened by Mario
       Carneiro, 14-Nov-2016.) $)
    sbss $p |- ( [ y / x ] x C_ A <-> y C_ A ) $=
      ( vz cv wss wsb vex sbequ sseq1 nfv sbie vtoclb ) AEZCFZADGDEZCFZOABGBEZC
      FDRBHODBAIPRCJOQADQAKNPCJLM $.
  $}

  ${
    $d A y $.  $d B y $.  $d C y $.  $d V y $.  $d x y $.
    $( Distribute proper substitution through a subclass relation.
       (Contributed by Alan Sare, 22-Jul-2012.)  (Proof shortened by Alexander
       van der Vekens, 23-Jul-2017.) $)
    sbcssg $p |- ( A e. V -> ( [. A / x ]. B C_ C <->
      [_ A / x ]_ B C_ [_ A / x ]_ C ) ) $=
      ( vy wcel cv wi wal wsbc csb wss sbcal sbcimg sbcel2 imbi12i syl6bb dfss2
      albidv syl5bb sbcbii 3bitr4g ) BEGZFHZCGZUEDGZIZFJZABKZUEABCLZGZUEABDLZGZ
      IZFJZCDMZABKUKUMMUJUHABKZFJUDUPUHFABNUDURUOFUDURUFABKZUGABKZIUOUFUGABEOUS
      ULUTUNABUECPABUEDPQRTUAUQUIABFCDSUBFUKUMSUC $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
           ""Weak deduction theorem"" for set theory
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=

  In a Hilbert system of logic (which consists of a set of axioms, modus
  ponens, and the generalization rule), converting a deduction to a proof using
  the Deduction Theorem (taught in introductory logic books) involves an
  exponential increase of the number of steps as hypotheses are successively
  eliminated.  Here is a trick that is not as general as the Deduction Theorem
  but requires only a linear increase in the number of steps.

  The general problem:  We want to convert a deduction
    P |- Q
  into a proof of the theorem
    |- P -> Q
  i.e. we want to eliminate the hypothesis P.  Normally this is done using the
  Deduction (meta)Theorem, which looks at the microscopic steps of the
  deduction and usually doubles or triples the number of these microscopic
  steps for each hypothesis that is eliminated.  We will look at a special case
  of this problem, without appealing to the Deduction Theorem.

  We assume ZF with class notation.  A and B are arbitrary (possibly
  proper) classes.  P, Q, R, S and T are wffs.

  We define the conditional operator, if(P, A, B), as follows:
    if(P, A, B) =def= { x | (x \in A & P) v (x \in B & -. P) }
  (where x does not occur in A, B, or P).

  Lemma 1.
    A = if(P, A, B) -> (P <-> R), B = if(P, A, B) -> (S <-> R), S |- R
  Proof:  Logic and Axiom of Extensionality.

  Lemma 2.
    A = if(P, A, B) -> (Q <-> T), T |- P -> Q
  Proof:  Logic and Axiom of Extensionality.

  Here's a simple example that illustrates how it works.  Suppose we have
  a deduction
    Ord A |- Tr A
  which means, ""Assume A is an ordinal class.  Then A is a transitive class.""
  Note that A is a class variable that may be substituted with any class
  expression, so this is really a deduction scheme.

  We want to convert this to a proof of the theorem (scheme)
    |- Ord A -> Tr A.

  The catch is that we must be able to prove ""Ord A"" for at least one
  object A (and this is what makes it weaker than the ordinary Deduction
  Theorem).  However, it is easy to prove |- Ord 0 (the empty set is
  ordinal).  (For a typical textbook ""theorem,"" i.e. deduction, there is
  usually at least one object satisfying each hypothesis, otherwise the
  theorem would not be very useful.  We can always go back to the standard
  Deduction Theorem for those hypotheses where this is not the case.)
  Continuing with the example:

  Equality axioms (and Extensionality) yield
    |- A = if(Ord A, A, 0) -> (Ord A <-> Ord if(Ord A, A, 0))  (1)
    |- 0 = if(Ord A, A, 0) -> (Ord 0 <-> Ord if(Ord A, A, 0))  (2)
  From (1), (2) and |- Ord 0, Lemma 1 yields
    |- Ord if(Ord A, A, 0)                                       (3)
  From (3) and substituting if(Ord A, A, 0) for
  A in the original deduction,
    |- Tr if(Ord A, A, 0)                                        (4)
  Equality axioms (and Extensionality) yield
    |- A = if(Ord A, A, 0) -> (Tr A <-> Tr if(Ord A, A, 0))    (5)
  From (4) and (5), Lemma 2 yields
    |- Ord A -> Tr A                                               (Q.E.D.)

$)

  $( These lemmas are used to convert hypotheses into antecedents,
     when there is at least one class making the hypothesis true. $)

  $( Declare new constant symbols. $)
  $c if $.  $( Conditional operator (was ""ded"" for ""deduction class""). $)

  $( Extend class notation to include the conditional operator.  See ~ df-if
     for a description.  (In older databases this was denoted ""ded"".) $)
  cif $a class if ( ph , A , B ) $.

  ${
    $d x ph $.  $d x A $.  $d x B $.
    $( Define the conditional operator.  Read ` if ( ph , A , B ) ` as ""if
       ` ph ` then ` A ` else ` B ` .""  See ~ iftrue and ~ iffalse for its
       values.  In mathematical literature, this operator is rarely defined
       formally but is implicit in informal definitions such as ""let f(x)=0 if
       x=0 and 1/x otherwise.""  (In older versions of this database, this
       operator was denoted ""ded"" and called the ""deduction class."")

       An important use for us is in conjunction with the weak deduction
       theorem, which converts a hypothesis into an antecedent.  In that role,
       ` A ` is a class variable in the hypothesis and ` B ` is a class
       (usually a constant) that makes the hypothesis true when it is
       substituted for ` A ` .  See ~ dedth for the main part of the weak
       deduction theorem, ~ elimhyp to eliminate a hypothesis, and ~ keephyp to
       keep a hypothesis.  See the Deduction Theorem link on the Metamath Proof
       Explorer Home Page for a description of the weak deduction theorem.
       (Contributed by NM, 15-May-1999.) $)
    df-if $a |- if ( ph , A , B ) =
                 { x | ( ( x e. A /\ ph ) \/ ( x e. B /\ -. ph ) ) } $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x B $.  $d x C $.
    $( An alternate definition of the conditional operator ~ df-if with one
       fewer connectives (but probably less intuitive to understand).
       (Contributed by NM, 30-Jan-2006.) $)
    dfif2 $p |- if ( ph , A , B ) =
                 { x | ( ( x e. B -> ph ) -> ( x e. A /\ ph ) ) } $=
      ( cif cv wcel wa wn wo cab wi df-if df-or orcom iman imbi1i 3bitr4i abbii
      eqtri ) ACDEBFZCGAHZUADGZAIHZJZBKUCALZUBLZBKABCDMUEUGBUDUBJUDIZUBLUEUGUDU
      BNUBUDOUFUHUBUCAPQRST $.

    $( An alternate definition of the conditional operator ~ df-if as a simple
       class abstraction.  (Contributed by Mario Carneiro, 8-Sep-2013.) $)
    dfif6 $p |- if ( ph , A , B ) =
                 ( { x e. A | ph } u. { x e. B | -. ph } ) $=
      ( cv wcel wa cab wn cun wo crab cif unab df-rab uneq12i df-if 3eqtr4ri )
      BEZCFAGZBHZSDFAIZGZBHZJTUCKBHABCLZUBBDLZJACDMTUCBNUEUAUFUDABCOUBBDOPABCDQ
      R $.

    $( Equality theorem for conditional operator.  (Contributed by NM,
       1-Sep-2004.)  (Revised by Mario Carneiro, 8-Sep-2013.) $)
    ifeq1 $p |- ( A = B -> if ( ph , A , C ) = if ( ph , B , C ) ) $=
      ( vx wceq crab wn cun cif rabeq uneq1d dfif6 3eqtr4g ) BCFZAEBGZAHEDGZIAE
      CGZQIABDJACDJOPRQAEBCKLAEBDMAECDMN $.

    $( Equality theorem for conditional operator.  (Contributed by NM,
       1-Sep-2004.)  (Revised by Mario Carneiro, 8-Sep-2013.) $)
    ifeq2 $p |- ( A = B -> if ( ph , C , A ) = if ( ph , C , B ) ) $=
      ( vx wceq crab wn cun cif rabeq uneq2d dfif6 3eqtr4g ) BCFZAEDGZAHZEBGZIP
      QECGZIADBJADCJORSPQEBCKLAEDBMAEDCMN $.

    $( Value of the conditional operator when its first argument is true.
       (Contributed by NM, 15-May-1999.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    iftrue $p |- ( ph -> if ( ph , A , B ) = A ) $=
      ( vx cv wcel wi wa cab cif dedlem0a abbi2dv dfif2 syl6reqr ) ABDEZCFZAGOB
      FZAHGZDIABCJARDBAQPKLADBCMN $.
  $}

  ${
    iftruei.1 $e |- ph $.
    $( Inference associated with ~ iftrue .  (Contributed by BJ,
       7-Oct-2018.) $)
    iftruei $p |- if ( ph , A , B ) = A $=
      ( cif wceq iftrue ax-mp ) AABCEBFDABCGH $.
  $}

  ${
    iftrued.1 $e |- ( ph -> ch ) $.
    $( Value of the conditional operator when its first argument is true.
       (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
    iftrued $p |- ( ph -> if ( ch , A , B ) = A ) $=
      ( cif wceq iftrue syl ) ABBCDFCGEBCDHI $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x B $.
    $( Value of the conditional operator when its first argument is false.
       (Contributed by NM, 14-Aug-1999.) $)
    iffalse $p |- ( -. ph -> if ( ph , A , B ) = B ) $=
      ( vx wn cv wcel wa wo cab cif dedlemb abbi2dv df-if syl6reqr ) AEZCDFZBGZ
      AHQCGZPHIZDJABCKPTDCARSLMADBCNO $.
  $}

  ${
    iffalsei.1 $e |- -. ph $.
    $( Inference associated with ~ iffalse .  (Contributed by BJ,
       7-Oct-2018.) $)
    iffalsei $p |- if ( ph , A , B ) = B $=
      ( wn cif wceq iffalse ax-mp ) AEABCFCGDABCHI $.
  $}

  ${
    iffalsed.1 $e |- ( ph -> -. ch ) $.
    $( Value of the conditional operator when its first argument is false.
       (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
    iffalsed $p |- ( ph -> if ( ch , A , B ) = B ) $=
      ( wn cif wceq iffalse syl ) ABFBCDGDHEBCDIJ $.
  $}

  $( When values are unequal, but an ""if"" condition checks if they are equal,
     then the ""false"" branch results.  This is a simple utility to provide a
     slight shortening and simplification of proofs vs. applying ~ iffalse
     directly in this case.  It happens, e.g., in ~ oevn0 .  (Contributed by
     David A. Wheeler, 15-May-2015.) $)
  ifnefalse $p |- ( A =/= B -> if ( A = B , C , D ) = D ) $=
    ( wne wceq wn cif df-ne iffalse sylbi ) ABEABFZGLCDHDFABILCDJK $.

  ${
    $d A x y $.  $d B x y $.  $d C y $.
    ifsb.1 $e |- ( if ( ph , A , B ) = A -> C = D ) $.
    ifsb.2 $e |- ( if ( ph , A , B ) = B -> C = E ) $.
    $( Distribute a function over an if-clause.  (Contributed by Mario
       Carneiro, 14-Aug-2013.) $)
    ifsb $p |- C = if ( ph , D , E ) $=
      ( cif wceq iftrue syl eqtr4d wn iffalse pm2.61i ) ADAEFIZJADEQAABCIZBJDEJ
      ABCKGLAEFKMANZDFQSRCJDFJABCOHLAEFOMP $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y ph $.
    dfif3.1 $e |- C = { x | ph } $.
    $( Alternate definition of the conditional operator ~ df-if .  Note that
       ` ph ` is independent of ` x ` i.e. a constant true or false.
       (Contributed by NM, 25-Aug-2013.)  (Revised by Mario Carneiro,
       8-Sep-2013.) $)
    dfif3 $p |- if ( ph , A , B )
                  = ( ( A i^i C ) u. ( B i^i ( _V \ C ) ) ) $=
      ( vy cif crab wn cun cin cvv cdif dfif6 cab weq ineq2i dfrab3 eqtr4i
      biidd cbvabv eqtri notab difeq2i eqtr2i uneq12i ) ACDHAGCIZAJZGDIZKCELZDM
      ENZLZKAGCDOUKUHUMUJUKCAGPZLUHEUNCEABPUNFAABGBGQAUAUBUCZRAGCSTUJDUIGPZLUMU
      IGDSUPULDUPMUNNULAGUDEUNMUOUETRUFUGT $.

    $( Alternate definition of the conditional operator ~ df-if .  Note that
       ` ph ` is independent of ` x ` i.e. a constant true or false.
       (Contributed by NM, 25-Aug-2013.) $)
    dfif4 $p |- if ( ph , A , B )
        = ( ( A u. B ) i^i ( ( A u. ( _V \ C ) ) i^i ( B u. C ) ) ) $=
      ( cif cin cvv cdif cun dfif3 undir undi uncom unvdif ineq12i 3eqtri inass
      inv1 eqtri ) ACDGCEHDIEJZHZKCUCKZEUCKZHZCDKZCUBKZDEKZHHZABCDEFLCEUCMUFUGU
      HHZUIHUJUDUKUEUICDUBNUEEDKZEUBKZHUIIHUIEDUBNULUIUMIEDOEPQUITRQUGUHUISUAR
      $.

    $( Alternate definition of the conditional operator ~ df-if .  Note that
       ` ph ` is independent of ` x ` i.e. a constant true or false (see also
       ~ abvor0 ).  (Contributed by G&eacute;rard Lang, 18-Aug-2013.) $)
    dfif5 $p |- if ( ph , A , B ) = ( ( A i^i B )
          u. ( ( ( A \ B ) i^i C ) u. ( ( B \ A ) i^i ( _V \ C ) ) ) ) $=
      ( cun cdif undir unidm unass undi 3eqtr3ri undifabs ineq1i undif2 3eqtr4i
      cin inabs eqtr4i cvv cif inindi dfif4 uneq1i 3eqtri uneq12i uncom 3eqtrri
      unundi uneq2i ineq2i ineq12i ) CDGZCUAEHZGZDEGZRRUNUPRZUNUQRZRZACDUBCDRCD
      HZERZDCHZUORZGZGZUNUPUQUCABCDEFUDVFCVEGZDVEGZRUTCDVEIURVGUSVHURCVBGZCVDGZ
      GZVGURCCDUORZGZGZVKCCGZVLGVMVNURVOCVLCJUECCVLKCDUOLZMVICVJVMVICVAGZCEGZRC
      VRRCCVAELVQCVRCDNOCESUFCVCGZUPRURVJVMVSUNUPCDPOCVCUOLVPQUGTCVBVDUJTCERZDG
      ZDVBGZDVDGZGZUSVHWADGVTDDGZGWDWAVTDDKWAWBDWCWADVAGZUQRZWBDVTGDCGZUQRWAWGD
      CELVTDUHWFWHUQDCPOQDVAELTWCDVCGZDUOGZRDWJRDDVCUOLWIDWJDCNODUOSUIUGWEDVTDJ
      UKMUSUNEDGZRWAUQWKUNDEUHULCEDITDVBVDUJQUMTQ $.
  $}

  $( Equality theorem for conditional operators.  (Contributed by NM,
     1-Sep-2004.) $)
  ifeq12 $p |- ( ( A = B /\ C = D ) ->
                if ( ph , A , C ) = if ( ph , B , D ) ) $=
    ( wceq cif ifeq1 ifeq2 sylan9eq ) BCFDEFABDGACDGACEGABCDHADECIJ $.

  ${
    ifeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for conditional operator.  (Contributed by NM,
       16-Feb-2005.) $)
    ifeq1d $p |- ( ph -> if ( ps , A , C ) = if ( ps , B , C ) ) $=
      ( wceq cif ifeq1 syl ) ACDGBCEHBDEHGFBCDEIJ $.

    $( Equality deduction for conditional operator.  (Contributed by NM,
       16-Feb-2005.) $)
    ifeq2d $p |- ( ph -> if ( ps , C , A ) = if ( ps , C , B ) ) $=
      ( wceq cif ifeq2 syl ) ACDGBECHBEDHGFBCDEIJ $.

    ifeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for conditional operator.  (Contributed by NM,
       24-Mar-2015.) $)
    ifeq12d $p |- ( ph -> if ( ps , A , C ) = if ( ps , B , D ) ) $=
      ( cif ifeq1d ifeq2d eqtrd ) ABCEIBDEIBDFIABCDEGJABEFDHKL $.
  $}

  $( Equivalence theorem for conditional operators.  (Contributed by Raph
     Levien, 15-Jan-2004.) $)
  ifbi $p |- ( ( ph <-> ps ) -> if ( ph , A , B ) = if ( ps , A , B ) ) $=
    ( wb wa wn wo cif wceq dfbi3 iftrue eqcomd sylan9eq iffalse jaoi sylbi ) AB
    EABFZAGZBGZFZHACDIZBCDIZJZABKRUDUAABUBCUCACDLBUCCBCDLMNSTUBDUCACDOTUCDBCDOM
    NPQ $.

  ${
    ifbid.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalence deduction for conditional operators.  (Contributed by NM,
       18-Apr-2005.) $)
    ifbid $p |- ( ph -> if ( ps , A , B ) = if ( ch , A , B ) ) $=
      ( wb cif wceq ifbi syl ) ABCGBDEHCDEHIFBCDEJK $.
  $}

  ${
    ifbieq1d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    ifbieq1d.2 $e |- ( ph -> A = B ) $.
    $( Equivalence/equality deduction for conditional operators.  (Contributed
       by JJ, 25-Sep-2018.) $)
    ifbieq1d $p |- ( ph -> if ( ps , A , C ) = if ( ch , B , C ) ) $=
      ( cif ifbid ifeq1d eqtrd ) ABDFICDFICEFIABCDFGJACDEFHKL $.
  $}

  ${
    ifbieq2i.1 $e |- ( ph <-> ps ) $.
    ifbieq2i.2 $e |- A = B $.
    $( Equivalence/equality inference for conditional operators.  (Contributed
       by Paul Chapman, 22-Jun-2011.) $)
    ifbieq2i $p |- if ( ph , C , A ) = if ( ps , C , B ) $=
      ( cif wb wceq ifbi ax-mp ifeq2 eqtri ) AECHZBECHZBEDHZABIOPJFABECKLCDJPQJ
      GBCDEMLN $.
  $}

  ${
    ifbieq2d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    ifbieq2d.2 $e |- ( ph -> A = B ) $.
    $( Equivalence/equality deduction for conditional operators.  (Contributed
       by Paul Chapman, 22-Jun-2011.) $)
    ifbieq2d $p |- ( ph -> if ( ps , C , A ) = if ( ch , C , B ) ) $=
      ( cif ifbid ifeq2d eqtrd ) ABFDICFDICFEIABCFDGJACDEFHKL $.
  $}

  ${
    ifbieq12i.1 $e |- ( ph <-> ps ) $.
    ifbieq12i.2 $e |- A = C $.
    ifbieq12i.3 $e |- B = D $.
    $( Equivalence deduction for conditional operators.  (Contributed by NM,
       18-Mar-2013.) $)
    ifbieq12i $p |- if ( ph , A , B ) = if ( ps , C , D ) $=
      ( cif wceq ifeq1 ax-mp ifbieq2i eqtri ) ACDJZAEDJZBEFJCEKPQKHACEDLMABDFEG
      INO $.
  $}

  ${
    ifbieq12d.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    ifbieq12d.2 $e |- ( ph -> A = C ) $.
    ifbieq12d.3 $e |- ( ph -> B = D ) $.
    $( Equivalence deduction for conditional operators.  (Contributed by Jeff
       Madsen, 2-Sep-2009.) $)
    ifbieq12d $p |- ( ph -> if ( ps , A , B ) = if ( ch , C , D ) ) $=
      ( cif ifbid ifeq12d eqtrd ) ABDEKCDEKCFGKABCDEHLACDFEGIJMN $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y ph $.  $d y ps $.
    nfifd.2 $e |- ( ph -> F/ x ps ) $.
    nfifd.3 $e |- ( ph -> F/_ x A ) $.
    nfifd.4 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of ~ nfif .  (Contributed by NM, 15-Feb-2013.)
       (Revised by Mario Carneiro, 13-Oct-2016.) $)
    nfifd $p |- ( ph -> F/_ x if ( ps , A , B ) ) $=
      ( vy cif cv wcel wi wa cab dfif2 nfv nfcrd nfimd nfand nfabd nfcxfrd ) AC
      BDEJIKZELZBMZUCDLZBNZMZIOBIDEPAUHCIAIQAUEUGCAUDBCACIEHRFSAUFBCACIDGRFTSUA
      UB $.
  $}

  ${
    $d x y z $.  $d y z A $.  $d y z B $.  $d z ph $.
    nfif.1 $e |- F/ x ph $.
    nfif.2 $e |- F/_ x A $.
    nfif.3 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for a conditional operator.
       (Contributed by NM, 16-Feb-2005.)  (Proof shortened by Andrew Salmon,
       26-Jun-2011.) $)
    nfif $p |- F/_ x if ( ph , A , B ) $=
      ( cif wnfc wtru wnf a1i nfifd trud ) BACDHIJABCDABKJELBCIJFLBDIJGLMN $.
  $}

  ${
    ifeq1da.1 $e |- ( ( ph /\ ps ) -> A = B ) $.
    $( Conditional equality.  (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    ifeq1da $p |- ( ph -> if ( ps , A , C ) = if ( ps , B , C ) ) $=
      ( cif wceq wa ifeq1d wn iffalse eqtr4d adantl pm2.61dan ) ABBCEGZBDEGZHZA
      BIBCDEFJBKZRASPEQBCELBDELMNO $.
  $}

  ${
    ifeq2da.1 $e |- ( ( ph /\ -. ps ) -> A = B ) $.
    $( Conditional equality.  (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    ifeq2da $p |- ( ph -> if ( ps , C , A ) = if ( ps , C , B ) ) $=
      ( cif wceq iftrue eqtr4d adantl wn wa ifeq2d pm2.61dan ) ABBECGZBEDGZHZBR
      ABPEQBECIBEDIJKABLMBCDEFNO $.
  $}

  ${
    ifclda.1 $e |- ( ( ph /\ ps ) -> A e. C ) $.
    ifclda.2 $e |- ( ( ph /\ -. ps ) -> B e. C ) $.
    $( Conditional closure.  (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    ifclda $p |- ( ph -> if ( ps , A , B ) e. C ) $=
      ( cif wcel wa wceq iftrue adantl eqeltrd wn iffalse pm2.61dan ) ABBCDHZEI
      ABJRCEBRCKABCDLMFNABOZJRDESRDKABCDPMGNQ $.
  $}

  ${
    ifeqda.1 $e |- ( ( ph /\ ps ) -> A = C ) $.
    ifeqda.2 $e |- ( ( ph /\ -. ps ) -> B = C ) $.
    $( Separation of the values of the conditional operator.  (Contributed by
       Alexander van der Vekens, 13-Apr-2018.) $)
    ifeqda $p |- ( ph -> if ( ps , A , B ) = C ) $=
      ( cif wceq wa iftrue adantl eqtrd wn iffalse pm2.61dan ) ABBCDHZEIABJQCEB
      QCIABCDKLFMABNZJQDERQDIABCDOLGMP $.
  $}

  ${
    elimif.1 $e |- ( if ( ph , A , B ) = A -> ( ps <-> ch ) ) $.
    elimif.2 $e |- ( if ( ph , A , B ) = B -> ( ps <-> th ) ) $.
    $( Elimination of a conditional operator contained in a wff ` ps ` .
       (Contributed by NM, 15-Feb-2005.)  (Proof shortened by NM,
       25-Apr-2019.) $)
    elimif $p |- ( ps <-> ( ( ph /\ ch ) \/ ( -. ph /\ th ) ) ) $=
      ( cif wceq wb iftrue syl wn iffalse cases ) ABCDAAEFIZEJBCKAEFLGMANQFJBDK
      AEFOHMP $.
  $}

  ${
    ifboth.1 $e |- ( A = if ( ph , A , B ) -> ( ps <-> th ) ) $.
    ifboth.2 $e |- ( B = if ( ph , A , B ) -> ( ch <-> th ) ) $.
    ${
      ifbothda.3 $e |- ( ( et /\ ph ) -> ps ) $.
      ifbothda.4 $e |- ( ( et /\ -. ph ) -> ch ) $.
      $( A wff ` th ` containing a conditional operator is true when both of
         its cases are true.  (Contributed by NM, 15-Feb-2015.) $)
      ifbothda $p |- ( et -> th ) $=
        ( wa wb cif wceq iftrue eqcomd syl adantl mpbid wn iffalse pm2.61dan )
        EADEALBDJABDMZEAFAFGNZOUDAUEFAFGPQHRSTEAUAZLCDKUFCDMZEUFGUEOUGUFUEGAFGU
        BQIRSTUC $.
    $}

    $( A wff ` th ` containing a conditional operator is true when both of its
       cases are true.  (Contributed by NM, 3-Sep-2006.)  (Revised by Mario
       Carneiro, 15-Feb-2015.) $)
    ifboth $p |- ( ( ps /\ ch ) -> th ) $=
      ( wa simpll wn simplr ifbothda ) ABCDBCIEFGHBCAJBCAKLM $.
  $}

  $( Identical true and false arguments in the conditional operator.
     (Contributed by NM, 18-Apr-2005.) $)
  ifid $p |- if ( ph , A , A ) = A $=
    ( cif wceq iftrue iffalse pm2.61i ) AABBCBDABBEABBFG $.

  $( Expansion of an equality with a conditional operator.  (Contributed by NM,
     14-Feb-2005.) $)
  eqif $p |- ( A = if ( ph , B , C ) <->
             ( ( ph /\ A = B ) \/ ( -. ph /\ A = C ) ) ) $=
    ( cif wceq eqeq2 elimif ) ABACDEZFBCFBDFCDICBGIDBGH $.

  $( Another expression of the value of the ` if ` predicate, analogous to
     ~ eqif .  See also the more specialized ~ iftrue and ~ iffalse .
     (Contributed by BJ, 6-Apr-2019.) $)
  ifval $p |- ( A = if ( ph , B , C )
                             <-> ( ( ph -> A = B ) /\ ( -. ph -> A = C ) ) ) $=
    ( cif wceq wa wn wo wi eqif cases2 bitri ) BACDEFABCFZGAHZBDFZGIANJOPJGABCD
    KANPLM $.

  $( Membership in a conditional operator.  (Contributed by NM,
     14-Feb-2005.) $)
  elif $p |- ( A e. if ( ph , B , C ) <->
             ( ( ph /\ A e. B ) \/ ( -. ph /\ A e. C ) ) ) $=
    ( cif wcel eleq2 elimif ) ABACDEZFBCFBDFCDICBGIDBGH $.

  $( Membership of a conditional operator.  (Contributed by NM,
     10-Sep-2005.) $)
  ifel $p |- ( if ( ph , A , B ) e. C <->
             ( ( ph /\ A e. C ) \/ ( -. ph /\ B e. C ) ) ) $=
    ( cif wcel eleq1 elimif ) AABCEZDFBDFCDFBCIBDGICDGH $.

  $( Membership (closure) of a conditional operator.  (Contributed by NM,
     4-Apr-2005.) $)
  ifcl $p |- ( ( A e. C /\ B e. C ) -> if ( ph , A , B ) e. C ) $=
    ( wcel cif eleq1 ifboth ) ABDECDEABCFZDEBCBIDGCIDGH $.

  ${
    ifcld.a $e |- ( ph -> A e. C ) $.
    ifcld.b $e |- ( ph -> B e. C ) $.
    $( Membership (closure) of a conditional operator, deduction form.
       (Contributed by SO, 16-Jul-2018.) $)
    ifcld $p |- ( ph -> if ( ps , A , B ) e. C ) $=
      ( wcel cif ifcl syl2anc ) ACEHDEHBCDIEHFGBCDEJK $.
  $}

  $( The possible values of a conditional operator.  (Contributed by NM,
     17-Jun-2007.)  (Proof shortened by Andrew Salmon, 26-Jun-2011.) $)
  ifeqor $p |- ( if ( ph , A , B ) = A \/ if ( ph , A , B ) = B ) $=
    ( cif wceq wn iftrue con3i iffalsed orri ) ABCDZBEZKCELFABCALABCGHIJ $.

  $( Negating the first argument swaps the last two arguments of a conditional
     operator.  (Contributed by NM, 21-Jun-2007.) $)
  ifnot $p |- if ( -. ph , A , B ) = if ( ph , B , A ) $=
    ( wn cif wceq notnot1 iffalsed iftrue eqtr4d iffalse pm2.61i ) AADZBCEZACBE
    ZFANCOAMBCAGHACBIJMNBOMBCIACBKJL $.

  $( Rewrite a conjunction in an if statement as two nested conditionals.
     (Contributed by Mario Carneiro, 28-Jul-2014.) $)
  ifan $p |- if ( ( ph /\ ps ) , A , B ) = if ( ph , if ( ps , A , B ) , B ) $=
    ( wa cif wceq iftrue ibar ifbid eqtr2d simpl con3i iffalsed iffalse pm2.61i
    wn eqtr4d ) AABEZCDFZABCDFZDFZGAUBUATAUADHABSCDABIJKAQZTDUBUCSCDSAABLMNAUAD
    ORP $.

  $( Rewrite a disjunction in an if statement as two nested conditionals.
     (Contributed by Mario Carneiro, 28-Jul-2014.) $)
  ifor $p |- if ( ( ph \/ ps ) , A , B ) = if ( ph , A , if ( ps , A , B ) ) $=
    ( wo cif wceq iftrue orcs eqtr4d wn iffalse biorf ifbid eqtr2d pm2.61i ) AA
    BEZCDFZACBCDFZFZGARCTABRCGQCDHIACSHJAKZTSRACSLUABQCDABMNOP $.

  ${
    2if2.1 $e |- ( ( ph /\ ps ) -> D = A ) $.
    2if2.2 $e |- ( ( ph /\ -. ps /\ th ) -> D = B ) $.
    2if2.3 $e |- ( ( ph /\ -. ps /\ -. th ) -> D = C ) $.
    $( Resolve two nested conditionals.  (Contributed by Alexander van der
       Vekens, 27-Mar-2018.) $)
    2if2 $p |- ( ph -> D = if ( ps , A , if ( th , B , C ) ) ) $=
      ( cif wceq wa iftrue adantl eqtr4d wn 3expa iffalse pm2.61dan eqcomd
      eqtrd ) ABGBDCEFKZKZLABMGDUDHBUDDLABDUCNOPABQZMZGUCUDUFCGUCLUFCMGEUCAUECG
      ELIRCUCELUFCEFNOPUFCQZMGFUCAUEUGGFLJRUGFUCLUFUGUCFCEFSUAOUBTUEUDUCLABDUCS
      OPT $.
  $}

  $( Commute the conditions in two nested conditionals if both conditions are
     not simultaneously true.  (Contributed by SO, 15-Jul-2018.) $)
  ifcomnan $p |- ( -. ( ph /\ ps ) -> if ( ph , A , if ( ps , B , C ) ) =
      if ( ps , B , if ( ph , A , C ) ) ) $=
    ( wa wn wo cif wceq pm3.13 iffalse ifeq2d eqtr4d jaoi syl ) ABFGAGZBGZHACBD
    EIZIZBDACEIZIZJZABKQUCRQTSUBACSLQBUAEDACELMNRTUAUBRASECBDELMBDUALNOP $.

  ${
    $d y A $.  $d y z B $.  $d y z C $.  $d y z ph $.  $d x y z $.
    $( Distribute proper substitution through the conditional operator.
       (Contributed by NM, 24-Feb-2013.)  (Revised by NM, 19-Aug-2018.) $)
    csbif $p |- [_ A / x ]_ if ( ph , B , C )
          = if ( [. A / x ]. ph , [_ A / x ]_ B , [_ A / x ]_ C ) $=
      ( vy cvv wcel cif csb wsbc cv wsb csbeq1 ifbieq12d nfcsb1v csbeq1a csbprc
      wceq c0 dfsbcq2 eqeq12d vex nfs1v nfif sbequ12 csbief vtoclg ifeq12d ifid
      weq wn syl6req eqtrd pm2.61i ) CGHZBCADEIZJZABCKZBCDJZBCEJZIZSZBFLZUQJZAB
      FMZBVDDJZBVDEJZIZSVCFCGVDCSZVEURVIVBBVDCUQNVJVFUSVGVHUTVAABFCUABVDCDNBVDC
      ENOUBBVDUQVIFUCVFBVGVHABFUDBVDDPBVDEPUEBFUKAVFDEVGVHABFUFBVDDQBVDEQOUGUHU
      PULZURTVBBCUQRVKVBUSTTITVKUSUTTVATBCDRBCERUIUSTUJUMUNUO $.

    $( Distribute proper substitution through the conditional operator.
       (Contributed by NM, 24-Feb-2013.)  (Revised by Mario Carneiro,
       14-Nov-2016.)  Obsolete as of 19-Aug-2018.  Use ~ csbif instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbifgOLD $p |- ( A e. V -> [_ A / x ]_ if ( ph , B , C )
          = if ( [. A / x ]. ph , [_ A / x ]_ B , [_ A / x ]_ C ) ) $=
      ( vy cv cif csb wsb wceq csbeq1 dfsbcq2 ifbieq12d eqeq12d nfcsb1v csbeq1a
      wsbc vex nfs1v nfif weq sbequ12 csbief vtoclg ) BGHZADEIZJZABGKZBUGDJZBUG
      EJZIZLBCUHJZABCSZBCDJZBCEJZIZLGCFUGCLZUIUNUMURBUGCUHMUSUJUOUKULUPUQABGCNB
      UGCDMBUGCEMOPBUGUHUMGTUJBUKULABGUABUGDQBUGEQUBBGUCAUJDEUKULABGUDBUGDRBUGE
      ROUEUF $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    dedth.1 $e |- ( A = if ( ph , A , B ) -> ( ps <-> ch ) ) $.
    dedth.2 $e |- ch $.
    $( Weak deduction theorem that eliminates a hypothesis ` ph ` , making it
       become an antecedent.  We assume that a proof exists for ` ph ` when the
       class variable ` A ` is replaced with a specific class ` B ` .  The
       hypothesis ` ch ` should be assigned to the inference, and the
       inference's hypothesis eliminated with ~ elimhyp .  If the inference has
       other hypotheses with class variable ` A ` , these can be kept by
       assigning ~ keephyp to them.  For more information, see the Deduction
       Theorem ~ http://us.metamath.org/mpeuni/mmdeduction.html .  (Contributed
       by NM, 15-May-1999.) $)
    dedth $p |- ( ph -> ps ) $=
      ( cif wceq wb iftrue eqcomd syl mpbiri ) ABCGADADEHZIBCJAODADEKLFMN $.
  $}

  ${
    dedth2h.1 $e |- ( A = if ( ph , A , C ) -> ( ch <-> th ) ) $.
    dedth2h.2 $e |- ( B = if ( ps , B , D ) -> ( th <-> ta ) ) $.
    dedth2h.3 $e |- ta $.
    $( Weak deduction theorem eliminating two hypotheses.  This theorem is
       simpler to use than ~ dedth2v but requires that each hypothesis has
       exactly one class variable.  See also comments in ~ dedth .
       (Contributed by NM, 15-May-1999.) $)
    dedth2h $p |- ( ( ph /\ ps ) -> ch ) $=
      ( wi cif wceq imbi2d dedth imp ) ABCABCMBDMFHFAFHNOCDBJPBDEGIKLQQR $.
  $}

  ${
    dedth3h.1 $e |- ( A = if ( ph , A , D ) -> ( th <-> ta ) ) $.
    dedth3h.2 $e |- ( B = if ( ps , B , R ) -> ( ta <-> et ) ) $.
    dedth3h.3 $e |- ( C = if ( ch , C , S ) -> ( et <-> ze ) ) $.
    dedth3h.4 $e |- ze $.
    $( Weak deduction theorem eliminating three hypotheses.  See comments in
       ~ dedth2h .  (Contributed by NM, 15-May-1999.) $)
    dedth3h $p |- ( ( ph /\ ps /\ ch ) -> th ) $=
      ( wa wi cif wceq imbi2d dedth2h dedth 3impib ) ABCDABCRZDSUFESHKHAHKTUADE
      UFNUBBCEFGIJLMOPQUCUDUE $.
  $}

  ${
    dedth4h.1 $e |- ( A = if ( ph , A , R ) -> ( ta <-> et ) ) $.
    dedth4h.2 $e |- ( B = if ( ps , B , S ) -> ( et <-> ze ) ) $.
    dedth4h.3 $e |- ( C = if ( ch , C , F ) -> ( ze <-> si ) ) $.
    dedth4h.4 $e |- ( D = if ( th , D , G ) -> ( si <-> rh ) ) $.
    dedth4h.5 $e |- rh $.
    $( Weak deduction theorem eliminating four hypotheses.  See comments in
       ~ dedth2h .  (Contributed by NM, 16-May-1999.) $)
    dedth4h $p |- ( ( ( ph /\ ps ) /\ ( ch /\ th ) ) -> ta ) $=
      ( wa wi cif wceq imbi2d dedth2h imp ) ABUCCDUCZEABUJEUDUJFUDUJGUDJKNOJAJN
      UEUFEFUJRUGKBKOUEUFFGUJSUGCDGHILMPQTUAUBUHUHUI $.
  $}

  ${
    dedth2v.1 $e |- ( A = if ( ph , A , C ) -> ( ps <-> ch ) ) $.
    dedth2v.2 $e |- ( B = if ( ph , B , D ) -> ( ch <-> th ) ) $.
    dedth2v.3 $e |- th $.
    $( Weak deduction theorem for eliminating a hypothesis with 2 class
       variables.  Note: if the hypothesis can be separated into two
       hypotheses, each with one class variable, then ~ dedth2h is simpler to
       use.  See also comments in ~ dedth .  (Contributed by NM, 13-Aug-1999.)
       (Proof shortened by Eric Schmidt, 28-Jul-2009.) $)
    dedth2v $p |- ( ph -> ps ) $=
      ( dedth2h anidms ) ABAABCDEFGHIJKLM $.
  $}

  ${
    dedth3v.1 $e |- ( A = if ( ph , A , D ) -> ( ps <-> ch ) ) $.
    dedth3v.2 $e |- ( B = if ( ph , B , R ) -> ( ch <-> th ) ) $.
    dedth3v.3 $e |- ( C = if ( ph , C , S ) -> ( th <-> ta ) ) $.
    dedth3v.4 $e |- ta $.
    $( Weak deduction theorem for eliminating a hypothesis with 3 class
       variables.  See comments in ~ dedth2v .  (Contributed by NM,
       13-Aug-1999.)  (Proof shortened by Eric Schmidt, 28-Jul-2009.) $)
    dedth3v $p |- ( ph -> ps ) $=
      ( dedth3h 3anidm12 anidms ) ABAABAAABCDEFGHIJKLMNOPQR $.
  $}

  ${
    dedth4v.1 $e |- ( A = if ( ph , A , R ) -> ( ps <-> ch ) ) $.
    dedth4v.2 $e |- ( B = if ( ph , B , S ) -> ( ch <-> th ) ) $.
    dedth4v.3 $e |- ( C = if ( ph , C , T ) -> ( th <-> ta ) ) $.
    dedth4v.4 $e |- ( D = if ( ph , D , U ) -> ( ta <-> et ) ) $.
    dedth4v.5 $e |- et $.
    $( Weak deduction theorem for eliminating a hypothesis with 4 class
       variables.  See comments in ~ dedth2v .  (Contributed by NM,
       21-Apr-2007.)  (Proof shortened by Eric Schmidt, 28-Jul-2009.) $)
    dedth4v $p |- ( ph -> ps ) $=
      ( anidms wa dedth4h ) ABAAUABAAAABCDEFGHIJKLMNOPQRSUBTT $.
  $}

  ${
    elimhyp.1 $e |- ( A = if ( ph , A , B ) -> ( ph <-> ps ) ) $.
    elimhyp.2 $e |- ( B = if ( ph , A , B ) -> ( ch <-> ps ) ) $.
    elimhyp.3 $e |- ch $.
    $( Eliminate a hypothesis containing class variable ` A ` when it is known
       for a specific class ` B ` .  For more information, see comments in
       ~ dedth .  (Contributed by NM, 15-May-1999.) $)
    elimhyp $p |- ps $=
      ( cif wceq wb iftrue eqcomd syl ibi wn iffalse mpbii pm2.61i ) ABABADADEI
      ZJABKATDADELMFNOAPZCBHUAETJCBKUATEADEQMGNRS $.
  $}

  ${
    elimhyp2v.1 $e |- ( A = if ( ph , A , C ) -> ( ph <-> ch ) ) $.
    elimhyp2v.2 $e |- ( B = if ( ph , B , D ) -> ( ch <-> th ) ) $.
    elimhyp2v.3 $e |- ( C = if ( ph , A , C ) -> ( ta <-> et ) ) $.
    elimhyp2v.4 $e |- ( D = if ( ph , B , D ) -> ( et <-> th ) ) $.
    elimhyp2v.5 $e |- ta $.
    $( Eliminate a hypothesis containing 2 class variables.  (Contributed by
       NM, 14-Aug-1999.) $)
    elimhyp2v $p |- th $=
      ( cif wceq wb iftrue eqcomd syl bitrd ibi wn iffalse mpbii pm2.61i ) ACAC
      AABCAFAFHOZPABQAUGFAFHRSJTAGAGIOZPBCQAUHGAGIRSKTUAUBAUCZDCNUIDECUIHUGPDEQ
      UIUGHAFHUDSLTUIIUHPECQUIUHIAGIUDSMTUAUEUF $.
  $}

  ${
    elimhyp3v.1 $e |- ( A = if ( ph , A , D ) -> ( ph <-> ch ) ) $.
    elimhyp3v.2 $e |- ( B = if ( ph , B , R ) -> ( ch <-> th ) ) $.
    elimhyp3v.3 $e |- ( C = if ( ph , C , S ) -> ( th <-> ta ) ) $.
    elimhyp3v.4 $e |- ( D = if ( ph , A , D ) -> ( et <-> ze ) ) $.
    elimhyp3v.5 $e |- ( R = if ( ph , B , R ) -> ( ze <-> si ) ) $.
    elimhyp3v.6 $e |- ( S = if ( ph , C , S ) -> ( si <-> ta ) ) $.
    elimhyp3v.7 $e |- et $.
    $( Eliminate a hypothesis containing 3 class variables.  (Contributed by
       NM, 14-Aug-1999.) $)
    elimhyp3v $p |- ta $=
      ( cif wceq wb iftrue eqcomd syl 3bitrd ibi wn iffalse mpbii pm2.61i ) ADA
      DAABCDAHAHKUAZUBABUCAUMHAHKUDUENUFAIAILUAZUBBCUCAUNIAILUDUEOUFAJAJMUAZUBC
      DUCAUOJAJMUDUEPUFUGUHAUIZEDTUPEFGDUPKUMUBEFUCUPUMKAHKUJUEQUFUPLUNUBFGUCUP
      UNLAILUJUERUFUPMUOUBGDUCUPUOMAJMUJUESUFUGUKUL $.
  $}

  ${
    elimhyp4v.1 $e |- ( A = if ( ph , A , D ) -> ( ph <-> ch ) ) $.
    elimhyp4v.2 $e |- ( B = if ( ph , B , R ) -> ( ch <-> th ) ) $.
    elimhyp4v.3 $e |- ( C = if ( ph , C , S ) -> ( th <-> ta ) ) $.
    elimhyp4v.4 $e |- ( F = if ( ph , F , G ) -> ( ta <-> ps ) ) $.
    elimhyp4v.5 $e |- ( D = if ( ph , A , D ) -> ( et <-> ze ) ) $.
    elimhyp4v.6 $e |- ( R = if ( ph , B , R ) -> ( ze <-> si ) ) $.
    elimhyp4v.7 $e |- ( S = if ( ph , C , S ) -> ( si <-> rh ) ) $.
    elimhyp4v.8 $e |- ( G = if ( ph , F , G ) -> ( rh <-> ps ) ) $.
    elimhyp4v.9 $e |- et $.
    $( Eliminate a hypothesis containing 4 class variables (for use with the
       weak deduction theorem ~ dedth ).  (Contributed by NM, 16-Apr-2005.) $)
    elimhyp4v $p |- ps $=
      ( cif wceq wb iftrue eqcomd syl bitrd 3bitrd ibi wn iffalse mpbii pm2.61i
      ) ABABAADEBAACDAJAJMUGZUHACUIAUTJAJMUJUKRULAKAKNUGZUHCDUIAVAKAKNUJUKSULUM
      ALALOUGZUHDEUIAVBLALOUJUKTULAPAPQUGZUHEBUIAVCPAPQUJUKUAULUNUOAUPZFBUFVDFH
      IBVDFGHVDMUTUHFGUIVDUTMAJMUQUKUBULVDNVAUHGHUIVDVANAKNUQUKUCULUMVDOVBUHHIU
      IVDVBOALOUQUKUDULVDQVCUHIBUIVDVCQAPQUQUKUEULUNURUS $.
  $}

  ${
    elimel.1 $e |- B e. C $.
    $( Eliminate a membership hypothesis for weak deduction theorem, when
       special case ` B e. C ` is provable.  (Contributed by NM,
       15-May-1999.) $)
    elimel $p |- if ( A e. C , A , B ) e. C $=
      ( wcel cif eleq1 elimhyp ) ACEZIABFZCEBCEABAJCGBJCGDH $.
  $}

  ${
    elimdhyp.1 $e |- ( ph -> ps ) $.
    elimdhyp.2 $e |- ( A = if ( ph , A , B ) -> ( ps <-> ch ) ) $.
    elimdhyp.3 $e |- ( B = if ( ph , A , B ) -> ( th <-> ch ) ) $.
    elimdhyp.4 $e |- th $.
    $( Version of ~ elimhyp where the hypothesis is deduced from the final
       antecedent.  See ~ ghomgrplem for an example of its use.  (Contributed
       by Paul Chapman, 25-Mar-2008.) $)
    elimdhyp $p |- ch $=
      ( cif wceq wb iftrue eqcomd syl mpbid wn iffalse mpbii pm2.61i ) ACABCGAE
      AEFKZLBCMAUBEAEFNOHPQARZDCJUCFUBLDCMUCUBFAEFSOIPTUA $.
  $}

  ${
    keephyp.1 $e |- ( A = if ( ph , A , B ) -> ( ps <-> th ) ) $.
    keephyp.2 $e |- ( B = if ( ph , A , B ) -> ( ch <-> th ) ) $.
    keephyp.3 $e |- ps $.
    keephyp.4 $e |- ch $.
    $( Transform a hypothesis ` ps ` that we want to keep (but contains the
       same class variable ` A ` used in the eliminated hypothesis) for use
       with the weak deduction theorem.  (Contributed by NM, 15-May-1999.) $)
    keephyp $p |- th $=
      ( ifboth mp2an ) BCDIJABCDEFGHKL $.
  $}

  ${
    keephyp2v.1 $e |- ( A = if ( ph , A , C ) -> ( ps <-> ch ) ) $.
    keephyp2v.2 $e |- ( B = if ( ph , B , D ) -> ( ch <-> th ) ) $.
    keephyp2v.3 $e |- ( C = if ( ph , A , C ) -> ( ta <-> et ) ) $.
    keephyp2v.4 $e |- ( D = if ( ph , B , D ) -> ( et <-> th ) ) $.
    keephyp2v.5 $e |- ps $.
    keephyp2v.6 $e |- ta $.
    $( Keep a hypothesis containing 2 class variables (for use with the weak
       deduction theorem ~ dedth ).  (Contributed by NM, 16-Apr-2005.) $)
    keephyp2v $p |- th $=
      ( wceq wb eqcomd syl cif iftrue bitrd mpbii wn iffalse pm2.61i ) ADABDOAB
      CDAGAGIUAZQBCRAUHGAGIUBSKTAHAHJUAZQCDRAUIHAHJUBSLTUCUDAUEZEDPUJEFDUJIUHQE
      FRUJUHIAGIUFSMTUJJUIQFDRUJUIJAHJUFSNTUCUDUG $.
  $}

  ${
    keephyp3v.1 $e |- ( A = if ( ph , A , D ) -> ( rh <-> ch ) ) $.
    keephyp3v.2 $e |- ( B = if ( ph , B , R ) -> ( ch <-> th ) ) $.
    keephyp3v.3 $e |- ( C = if ( ph , C , S ) -> ( th <-> ta ) ) $.
    keephyp3v.4 $e |- ( D = if ( ph , A , D ) -> ( et <-> ze ) ) $.
    keephyp3v.5 $e |- ( R = if ( ph , B , R ) -> ( ze <-> si ) ) $.
    keephyp3v.6 $e |- ( S = if ( ph , C , S ) -> ( si <-> ta ) ) $.
    keephyp3v.7 $e |- rh $.
    keephyp3v.8 $e |- et $.
    $( Keep a hypothesis containing 3 class variables.  (Contributed by NM,
       27-Sep-1999.) $)
    keephyp3v $p |- ta $=
      ( cif wceq wb iftrue eqcomd syl 3bitrd mpbii wn iffalse pm2.61i ) ADAHDUA
      AHBCDAIAILUCZUDHBUEAUNIAILUFUGOUHAJAJMUCZUDBCUEAUOJAJMUFUGPUHAKAKNUCZUDCD
      UEAUPKAKNUFUGQUHUIUJAUKZEDUBUQEFGDUQLUNUDEFUEUQUNLAILULUGRUHUQMUOUDFGUEUQ
      UOMAJMULUGSUHUQNUPUDGDUEUQUPNAKNULUGTUHUIUJUM $.
  $}

  ${
    keepel.1 $e |- A e. C $.
    keepel.2 $e |- B e. C $.
    $( Keep a membership hypothesis for weak deduction theorem, when special
       case ` B e. C ` is provable.  (Contributed by NM, 14-Aug-1999.) $)
    keepel $p |- if ( ph , A , B ) e. C $=
      ( wcel cif eleq1 keephyp ) ABDGCDGABCHZDGBCBKDICKDIEFJ $.
  $}

  ${
    dedex.1 $e |- A e. _V $.
    dedex.2 $e |- B e. _V $.
    $( Conditional operator existence.  (Contributed by NM, 2-Sep-2004.) $)
    ifex $p |- if ( ph , A , B ) e. _V $=
      ( cvv keepel ) ABCFDEG $.
  $}

  ${
    $d A x y $.  $d B y $.  $d ph x y $.
    $( Conditional operator existence.  (Contributed by NM, 21-Mar-2011.) $)
    ifexg $p |- ( ( A e. V /\ B e. W ) -> if ( ph , A , B ) e. _V ) $=
      ( vx vy cv cif cvv wcel wceq ifeq1 eleq1d ifeq2 vex ifex vtocl2g ) AFHZGH
      ZIZJKABTIZJKABCIZJKFGBCDESBLUAUBJASBTMNTCLUBUCJATCBONASTFPGPQR $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                          Power classes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare the symbol for power class. $)
  $c ~P $.  $( Calligraphic P $)

  $( Extend class notation to include power class.  (The tilde in the Metamath
     token is meant to suggest the calligraphic font of the P.) $)
  cpw $a class ~P A $.

  ${
    $d x A $.  $d y A $.  $d w x $.  $d w y $.  $d w A $.  $d w z $.  $d z x $.
    $d z y $.  $d z A $.
    $( Soundness justification theorem for ~ df-pw .  (Contributed by Rodolfo
       Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    pwjust $p |- { x | x C_ A } = { y | y C_ A } $=
      ( vz cv wss cab sseq1 cbvabv eqtri ) AEZCFZAGDEZCFZDGBEZCFZBGLNADKMCHINPD
      BMOCHIJ $.
  $}

  ${
    $d x A $.
    $( Define power class.  Definition 5.10 of [TakeutiZaring] p. 17, but we
       also let it apply to proper classes, i.e. those that are not members of
       ` _V ` .  When applied to a set, this produces its power set.  A power
       set of S is the set of all subsets of S, including the empty set and S
       itself.  For example, if ` A = { 3 , 5 , 7 } ` , then
       ` ~P A = { (/) , { 3 } , { 5 } , { 7 } , { 3 , 5 } , `
       ` { 3 , 7 } , { 5 , 7 } , { 3 , 5 , 7 } } ` ( ~ ex-pw ).  We will later
       introduce the Axiom of Power Sets ~ ax-pow , which can be expressed in
       class notation per ~ pwexg .  Still later we will prove, in ~ hashpw ,
       that the size of the power set of a finite set is 2 raised to the power
       of the size of the set.  (Contributed by NM, 24-Jun-1993.) $)
    df-pw $a |- ~P A = { x | x C_ A } $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Equality theorem for power class.  (Contributed by NM, 21-Jun-1993.) $)
    pweq $p |- ( A = B -> ~P A = ~P B ) $=
      ( vx wceq cv wss cab cpw sseq2 abbidv df-pw 3eqtr4g ) ABDZCEZAFZCGNBFZCGA
      HBHMOPCABNIJCAKCBKL $.
  $}

  ${
    pweqi.1 $e |- A = B $.
    $( Equality inference for power class.  (Contributed by NM,
       27-Nov-2013.) $)
    pweqi $p |- ~P A = ~P B $=
      ( wceq cpw pweq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    pweqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for power class.  (Contributed by NM,
       27-Nov-2013.) $)
    pweqd $p |- ( ph -> ~P A = ~P B ) $=
      ( wceq cpw pweq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d A x $.  $d B x $.
    ${
      elpw.1 $e |- A e. _V $.
      $( Membership in a power class.  Theorem 86 of [Suppes] p. 47.
         (Contributed by NM, 31-Dec-1993.) $)
      elpw $p |- ( A e. ~P B <-> A C_ B ) $=
        ( vx cv wss cpw sseq1 df-pw elab2 ) DEZBFABFDABGCKABHDBIJ $.
    $}

    $( Setvar variable membership in a power class (common case).  See
       ~ elpw .  (Contributed by David A. Wheeler, 8-Dec-2018.) $)
    selpw $p |- ( x e. ~P A <-> x C_ A ) $=
      ( cv vex elpw ) ACBADE $.

    $( Membership in a power class.  Theorem 86 of [Suppes] p. 47.  See also
       ~ elpw2g .  (Contributed by NM, 6-Aug-2000.) $)
    elpwg $p |- ( A e. V -> ( A e. ~P B <-> A C_ B ) ) $=
      ( vx cv cpw wcel wss eleq1 sseq1 selpw vtoclbg ) DEZBFZGMBHANGABHDACMANIM
      ABJDBKL $.
  $}

  $( Subset relation implied by membership in a power class.  (Contributed by
     NM, 17-Feb-2007.) $)
  elpwi $p |- ( A e. ~P B -> A C_ B ) $=
    ( cpw wcel wss elpwg ibi ) ABCZDABEABHFG $.

  ${
    elpwid.1 $e |- ( ph -> A e. ~P B ) $.
    $( An element of a power class is a subclass.  Deduction form of ~ elpwi .
       (Contributed by David Moews, 1-May-2017.) $)
    elpwid $p |- ( ph -> A C_ B ) $=
      ( cpw wcel wss elpwi syl ) ABCEFBCGDBCHI $.
  $}

  $( If ` A ` belongs to a part of ` C ` then ` A ` belongs to ` C ` .
     (Contributed by FL, 3-Aug-2009.) $)
  elelpwi $p |- ( ( A e. B /\ B e. ~P C ) -> A e. C ) $=
    ( cpw wcel elpwi sseld impcom ) BCDEZABEACEIBCABCFGH $.

  ${
    $d y z A $.  $d x y z $.
    nfpw.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for power class.  (Contributed by NM,
       28-Oct-2003.)  (Revised by Mario Carneiro, 13-Oct-2016.) $)
    nfpw $p |- F/_ x ~P A $=
      ( vy cpw cv wss cab df-pw nfcv nfss nfab nfcxfr ) ABEDFZBGZDHDBIOADANBANJ
      CKLM $.
  $}

  $( Membership of the original in a power set.  (Contributed by Stefan O'Rear,
     1-Feb-2015.) $)
  pwidg $p |- ( A e. V -> A e. ~P A ) $=
    ( wcel cpw wss ssid elpwg mpbiri ) ABCAADCAAEAFAABGH $.

  ${
    pwid.1 $e |- A e. _V $.
    $( A set is a member of its power class.  Theorem 87 of [Suppes] p. 47.
       (Contributed by NM, 5-Aug-1993.) $)
    pwid $p |- A e. ~P A $=
      ( cvv wcel cpw pwidg ax-mp ) ACDAAEDBACFG $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass relationship for power class.  (Contributed by NM,
       21-Jun-2009.) $)
    pwss $p |- ( ~P A C_ B <-> A. x ( x C_ A -> x e. B ) ) $=
      ( cpw wss cv wcel wi wal dfss2 selpw imbi1i albii bitri ) BDZCEAFZOGZPCGZ
      HZAIPBEZRHZAIAOCJSUAAQTRABKLMN $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
          Unordered and ordered pairs
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new symbols needed. $)
  $c <. $.  $( Bracket (the period distinguishes it from 'less than') $)
  $c >. $.  $( Bracket (the period distinguishes it from 'greater than') $)

  ${
    $d x A $.  $d y A $.  $d z x $.  $d z y $.  $d z A $.
    $( Soundness justification theorem for ~ df-sn .  (Contributed by Rodolfo
       Medina, 28-Apr-2010.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    snjust $p |- { x | x = A } = { y | y = A } $=
      ( vz cv wceq cab eqeq1 cbvabv eqtri ) AEZCFZAGDEZCFZDGBEZCFZBGLNADKMCHINP
      DBMOCHIJ $.
  $}

  $( Extend class notation to include singleton. $)
  csn $a class { A } $.

  ${
    $d x A $.
    $( Define the singleton of a class.  Definition 7.1 of [Quine] p. 48.  For
       convenience, it is well-defined for proper classes, i.e., those that are
       not elements of ` _V ` , although it is not very meaningful in this
       case.  For an alternate definition see ~ dfsn2 .  (Contributed by NM,
       21-Jun-1993.) $)
    df-sn $a |- { A } = { x | x = A } $.
  $}

  $( Extend class notation to include unordered pair. $)
  cpr $a class { A , B } $.

  $( Define unordered pair of classes.  Definition 7.1 of [Quine] p. 48.  For
     example, ` A e. { 1 , -u 1 } -> ( A ^ 2 ) = 1 ` ( ~ ex-pr ).  They are
     unordered, so ` { A , B } = { B , A } ` as proven by ~ prcom .  For a more
     traditional definition, but requiring a dummy variable, see ~ dfpr2 .
     (Contributed by NM, 21-Jun-1993.) $)
  df-pr $a |- { A , B } = ( { A } u. { B } ) $.

  $( Extend class notation to include unordered triplet. $)
  ctp $a class { A , B , C } $.

  $( Define unordered triple of classes.  Definition of [Enderton] p. 19.
     (Contributed by NM, 9-Apr-1994.) $)
  df-tp $a |- { A , B , C } = ( { A , B } u. { C } ) $.

  $( Extend class notation to include ordered pair. $)
  cop $a class <. A , B >. $.

  ${
    $d x A $.  $d x B $.
    $( Definition of an ordered pair, equivalent to Kuratowski's definition
       ` { { A } , { A , B } } ` when the arguments are sets.  Since the
       behavior of Kuratowski definition is not very useful for proper classes,
       we define it to be empty in this case (see ~ opprc1 , ~ opprc2 , and
       ~ 0nelop ).  For Kuratowski's actual definition when the arguments are
       sets, see ~ dfop .  For the justifying theorem (for sets) see ~ opth .
       See ~ dfopif for an equivalent formulation using the ` if ` operation.

       Definition 9.1 of [Quine] p. 58 defines an ordered pair unconditionally
       as ` <. A , B >. = { { A } , { A , B } } ` , which has different
       behavior from our ~ df-op when the arguments are proper classes.
       Ordinarily this difference is not important, since neither definition is
       meaningful in that case.  Our ~ df-op was chosen because it often makes
       proofs shorter by eliminating unnecessary sethood hypotheses.

       There are other ways to define ordered pairs.  The basic requirement is
       that two ordered pairs are equal iff their respective members are
       equal.  In 1914 Norbert Wiener gave the first successful definition
       ` <. A , B >. ` _2 ` = { { { A } , (/) } , { { B } } } ` , justified by
       ~ opthwiener .  This was simplified by Kazimierz Kuratowski in 1921 to
       our present definition.  An even simpler definition ` <. A , B >. ` _3
       ` = { A , { A , B } } ` is justified by ~ opthreg , but it requires the
       Axiom of Regularity for its justification and is not commonly used.  A
       definition that also works for proper classes is ` <. A , B >. ` _4
       ` = ( ( A X. { (/) } ) u. ( B X. { { (/) } } ) ) ` , justified by
       ~ opthprc .  If we restrict our sets to nonnegative integers, an ordered
       pair definition that involves only elementary arithmetic is provided by
       ~ nn0opthi .  An ordered pair of real numbers can also be represented by
       a complex number as shown by ~ cru .  Kuratowski's ordered pair
       definition is standard for ZFC set theory, but it is very inconvenient
       to use in New Foundations theory because it is not type-level; a common
       alternative definition in New Foundations is the Definition from
       [Rosser] p. 281.

       Since there are other ways to define ordered pairs, we discourage direct
       use of this definition so that most theorems won't depend on this
       particular construction; theorems will instead rely on ~ dfopif .
       (Contributed by NM, 28-May-1995.)  (Revised by Mario Carneiro,
       26-Apr-2015.)  (Avoid depending on this detail.) $)
    df-op $a |- <. A , B >. = { x |
      ( A e. _V /\ B e. _V /\ x e. { { A } , { A , B } } ) } $.
  $}

  $( Extend class notation to include ordered triple. $)
  cotp $a class <. A , B , C >. $.

  $( Define ordered triple of classes.  Definition of ordered triple in [Stoll]
     p. 25.  (Contributed by NM, 3-Apr-2015.) $)
  df-ot $a |- <. A , B , C >. = <. <. A , B >. , C >. $.

  ${
    $d x A $.  $d x B $.
    $( Equality theorem for singletons.  Part of Exercise 4 of [TakeutiZaring]
       p. 15.  (Contributed by NM, 21-Jun-1993.) $)
    sneq $p |- ( A = B -> { A } = { B } ) $=
      ( vx wceq cv cab csn eqeq2 abbidv df-sn 3eqtr4g ) ABDZCEZADZCFMBDZCFAGBGL
      NOCABMHICAJCBJK $.
  $}

  ${
    sneqi.1 $e |- A = B $.
    $( Equality inference for singletons.  (Contributed by NM, 22-Jan-2004.) $)
    sneqi $p |- { A } = { B } $=
      ( wceq csn sneq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    sneqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for singletons.  (Contributed by NM, 22-Jan-2004.) $)
    sneqd $p |- ( ph -> { A } = { B } ) $=
      ( wceq csn sneq syl ) ABCEBFCFEDBCGH $.
  $}

  $( Alternate definition of singleton.  Definition 5.1 of [TakeutiZaring]
     p. 15.  (Contributed by NM, 24-Apr-1994.) $)
  dfsn2 $p |- { A } = { A , A } $=
    ( cpr csn cun df-pr unidm eqtr2i ) AABACZHDHAAEHFG $.

  ${
    $d x A $.
    $( There is only one element in a singleton.  Exercise 2 of [TakeutiZaring]
       p. 15.  (Contributed by NM, 21-Jun-1993.) $)
    elsn $p |- ( x e. { A } <-> x = A ) $=
      ( cv wceq csn df-sn abeq2i ) ACBDABEABFG $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Alternate definition of unordered pair.  Definition 5.1 of
       [TakeutiZaring] p. 15.  (Contributed by NM, 24-Apr-1994.) $)
    dfpr2 $p |- { A , B } = { x | ( x = A \/ x = B ) } $=
      ( cpr csn cun cv wceq cab df-pr wcel elun elsn orbi12i bitri abbi2i eqtri
      wo ) BCDBEZCEZFZAGZBHZUBCHZRZAIBCJUEAUAUBUAKUBSKZUBTKZRUEUBSTLUFUCUGUDABM
      ACMNOPQ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( A member of an unordered pair of classes is one or the other of them.
       Exercise 1 of [TakeutiZaring] p. 15, generalized.  (Contributed by NM,
       13-Sep-1995.) $)
    elprg $p |- ( A e. V -> ( A e. { B , C } <-> ( A = B \/ A = C ) ) ) $=
      ( vx cv wceq wo cpr eqeq1 orbi12d dfpr2 elab2g ) EFZBGZNCGZHABGZACGZHEABC
      IDNAGOQPRNABJNACJKEBCLM $.
  $}

  $( Membership in a set with two elements removed.  Similar to ~ eldifsn and
     ~ eldiftp .  (Contributed by Mario Carneiro, 18-Jul-2017.) $)
  eldifpr $p |- ( A e. ( B \ { C , D } ) <->
                ( A e. B /\ A =/= C /\ A =/= D ) ) $=
    ( wcel cpr wn wa wne cdif w3a wo elprg notbid neanior syl6bbr pm5.32i eldif
    wceq 3anass 3bitr4i ) ABEZACDFZEZGZHUBACIZADIZHZHABUCJEUBUFUGKUBUEUHUBUEACS
    ADSLZGUHUBUDUIACDBMNACADOPQABUCRUBUFUGTUA $.

  ${
    elpr.1 $e |- A e. _V $.
    $( A member of an unordered pair of classes is one or the other of them.
       Exercise 1 of [TakeutiZaring] p. 15.  (Contributed by NM,
       13-Sep-1995.) $)
    elpr $p |- ( A e. { B , C } <-> ( A = B \/ A = C ) ) $=
      ( cvv wcel cpr wceq wo wb elprg ax-mp ) AEFABCGFABHACHIJDABCEKL $.
  $}

  ${
    elpr2.1 $e |- B e. _V $.
    elpr2.2 $e |- C e. _V $.
    $( A member of an unordered pair of classes is one or the other of them.
       Exercise 1 of [TakeutiZaring] p. 15.  (Contributed by NM,
       14-Oct-2005.) $)
    elpr2 $p |- ( A e. { B , C } <-> ( A = B \/ A = C ) ) $=
      ( cpr wcel wceq wo elprg ibi cvv wb eleq1 mpbiri jaoi syl ibir impbii ) A
      BCFZGZABHZACHZIZUAUDABCTJKUDUAUDALGZUAUDMUBUEUCUBUEBLGDABLNOUCUECLGEACLNO
      PABCLJQRS $.
  $}

  $( If a class is an element of a pair, then it is one of the two paired
     elements.  (Contributed by Scott Fenton, 1-Apr-2011.) $)
  elpri $p |- ( A e. { B , C } -> ( A = B \/ A = C ) ) $=
    ( cpr wcel wceq wo elprg ibi ) ABCDZEABFACFGABCJHI $.

  ${
    nelpri.1 $e |- A =/= B $.
    nelpri.2 $e |- A =/= C $.
    $( If an element doesn't match the items in an unordered pair, it is not in
       the unordered pair.  (Contributed by David A. Wheeler, 10-May-2015.) $)
    nelpri $p |- -. A e. { B , C } $=
      ( wne cpr wcel wn wa wceq wo neanior elpri con3i sylbi mp2an ) ABFZACFZAB
      CGHZIZDERSJABKACKLZIUAABACMTUBABCNOPQ $.
  $}

  ${
    nelprd.1 $e |- ( ph -> A =/= B ) $.
    nelprd.2 $e |- ( ph -> A =/= C ) $.
    $( If an element doesn't match the items in an unordered pair, it is not in
       the unordered pair, deduction version.  (Contributed by Alexander van
       der Vekens, 25-Jan-2018.) $)
    nelprd $p |- ( ph -> -. A e. { B , C } ) $=
      ( wne cpr wcel wn wa wceq wo neanior elpri con3i sylbi syl2anc ) ABCGZBDG
      ZBCDHIZJZEFSTKBCLBDLMZJUBBCBDNUAUCBCDOPQR $.
  $}

  ${
    $d A x $.  $d B x $.
    $( There is only one element in a singleton.  Exercise 2 of [TakeutiZaring]
       p. 15 (generalized).  (Contributed by NM, 13-Sep-1995.)  (Proof
       shortened by Andrew Salmon, 29-Jun-2011.) $)
    elsncg $p |- ( A e. V -> ( A e. { B } <-> A = B ) ) $=
      ( vx cv wceq csn eqeq1 df-sn elab2g ) DEZBFABFDABGCKABHDBIJ $.
  $}

  ${
    elsnc.1 $e |- A e. _V $.
    $( There is only one element in a singleton.  Exercise 2 of [TakeutiZaring]
       p. 15.  (Contributed by NM, 13-Sep-1995.) $)
    elsnc $p |- ( A e. { B } <-> A = B ) $=
      ( cvv wcel csn wceq wb elsncg ax-mp ) ADEABFEABGHCABDIJ $.
  $}

  $( There is only one element in a singleton.  (Contributed by NM,
     5-Jun-1994.) $)
  elsni $p |- ( A e. { B } -> A = B ) $=
    ( csn wcel wceq elsncg ibi ) ABCZDABEABHFG $.

  $( A set is a member of its singleton.  Part of Theorem 7.6 of [Quine]
     p. 49.  (Contributed by NM, 28-Oct-2003.) $)
  snidg $p |- ( A e. V -> A e. { A } ) $=
    ( wcel csn wceq eqid elsncg mpbiri ) ABCAADCAAEAFAABGH $.

  $( A class is a set iff it is a member of its singleton.  (Contributed by NM,
     5-Apr-2004.) $)
  snidb $p |- ( A e. _V <-> A e. { A } ) $=
    ( cvv wcel csn snidg elex impbii ) ABCAADZCABEAHFG $.

  ${
    snid.1 $e |- A e. _V $.
    $( A set is a member of its singleton.  Part of Theorem 7.6 of [Quine]
       p. 49.  (Contributed by NM, 31-Dec-1993.) $)
    snid $p |- A e. { A } $=
      ( cvv wcel csn snidb mpbi ) ACDAAEDBAFG $.
  $}

  $( A setvar variable is a member of its singleton (common case).
     (Contributed by David A. Wheeler, 8-Dec-2018.) $)
  ssnid $p |- x e. { x } $=
    ( cv vex snid ) ABACD $.

  $( There is only one element in a singleton.  Exercise 2 of [TakeutiZaring]
     p. 15.  This variation requires only that ` B ` , rather than ` A ` , be a
     set.  (Contributed by NM, 28-Oct-2003.) $)
  elsnc2g $p |- ( B e. V -> ( A e. { B } <-> A = B ) ) $=
    ( wcel csn wceq elsni snidg eleq1 syl5ibrcom impbid2 ) BCDZABEZDZABFZABGLNO
    BMDBCHABMIJK $.

  ${
    elsnc2.1 $e |- B e. _V $.
    $( There is only one element in a singleton.  Exercise 2 of [TakeutiZaring]
       p. 15.  This variation requires only that ` B ` , rather than ` A ` , be
       a set.  (Contributed by NM, 12-Jun-1994.) $)
    elsnc2 $p |- ( A e. { B } <-> A = B ) $=
      ( cvv wcel csn wceq wb elsnc2g ax-mp ) BDEABFEABGHCABDIJ $.
  $}

  ${
    $d A x $.  $d ps x $.
    $( Substitution expressed in terms of quantification over a singleton.
       (Contributed by Mario Carneiro, 23-Apr-2015.) $)
    ralsnsg $p |- ( A e. V -> ( A. x e. { A } ph <-> [. A / x ]. ph ) ) $=
      ( wcel wsbc cv wceq wal csn wral sbc6g df-ral imbi1i albii bitri syl6rbbr
      wi elsn ) CDEABCFBGZCHZARZBIZABCJZKZABCDLUETUDEZARZBIUCABUDMUGUBBUFUAABCS
      NOPQ $.

    $( Restricted existential quantification over a singleton.  (Contributed by
       Mario Carneiro, 23-Apr-2015.)  (Revised by NM, 22-Aug-2018.) $)
    rexsns $p |- ( E. x e. { A } ph <-> [. A / x ]. ph ) $=
      ( cv csn wcel wa wex wceq wrex wsbc elsn anbi1i exbii df-rex sbc5 3bitr4i
      ) BDZCEZFZAGZBHRCIZAGZBHABSJABCKUAUCBTUBABCLMNABSOABCPQ $.

    $( Restricted existential quantification over a singleton.  (Contributed by
       Mario Carneiro, 23-Apr-2015.)  Obsolete as of 22-Aug-2018.  Use ~ rexsns
       instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rexsnsOLD $p |- ( A e. V -> ( E. x e. { A } ph <-> [. A / x ]. ph ) ) $=
      ( wcel wsbc cv wceq wa wex csn wrex wb sbc5 a1i df-rex anbi1i exbii bitri
      elsn syl6rbbr ) CDEZABCFZBGZCHZAIZBJZABCKZLZUCUGMUBABCNOUIUDUHEZAIZBJUGAB
      UHPUKUFBUJUEABCTQRSUA $.

    ralsng.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Substitution expressed in terms of quantification over a singleton.
       (Contributed by NM, 14-Dec-2005.)  (Revised by Mario Carneiro,
       23-Apr-2015.) $)
    ralsng $p |- ( A e. V -> ( A. x e. { A } ph <-> ps ) ) $=
      ( wcel csn wral wsbc ralsnsg sbcieg bitrd ) DEGACDHIACDJBACDEKABCDEFLM $.

    $( Restricted existential quantification over a singleton.  (Contributed by
       NM, 29-Jan-2012.) $)
    rexsng $p |- ( A e. V -> ( E. x e. { A } ph <-> ps ) ) $=
      ( csn wrex wsbc wcel rexsns sbcieg syl5bb ) ACDGHACDIDEJBACDKABCDEFLM $.

    $d A y $.  $d B x y $.  $d ch y $.
    2ralsng.1 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Substitution expressed in terms of two quantifications over singletons.
       (Contributed by AV, 22-Dec-2019.) $)
    2ralsng $p |- ( ( A e. V /\ B e. W )
                    -> ( A. x e. { A } A. y e. { B } ph <-> ch ) ) $=
      ( wcel csn wral cv wceq ralbidv ralsng sylan9bb ) FHLAEGMZNZDFMNBETNZGILC
      UAUBDFHDOFPABETJQRBCEGIKRS $.
  $}

  $( There is a set being the element of a singleton if and only if there is an
     element of the singleton.  (Contributed by Alexander van der Vekens,
     1-Jan-2018.) $)
  exsnrex $p |- ( E. x M = { x } <-> E. x e. M M = { x } ) $=
    ( cv csn wceq wex wcel wrex ssnid eleq2 mpbiri pm4.71ri exbii df-rex bitr4i
    wa ) BACZDZEZAFQBGZSPZAFSABHSUAASTSTQRGAIBRQJKLMSABNO $.

  ${
    $d A x $.  $d ps x $.
    ralsn.1 $e |- A e. _V $.
    ralsn.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Convert a quantification over a singleton to a substitution.
       (Contributed by NM, 27-Apr-2009.) $)
    ralsn $p |- ( A. x e. { A } ph <-> ps ) $=
      ( cvv wcel csn wral wb ralsng ax-mp ) DGHACDIJBKEABCDGFLM $.

    $( Restricted existential quantification over a singleton.  (Contributed by
       Jeff Madsen, 5-Jan-2011.) $)
    rexsn $p |- ( E. x e. { A } ph <-> ps ) $=
      ( cvv wcel csn wrex wb rexsng ax-mp ) DGHACDIJBKEABCDGFLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Membership in an extension of a power class.  (Contributed by NM,
       26-Mar-2007.) $)
    elpwunsn $p |- ( A e. ( ~P ( B u. { C } ) \ ~P B ) -> C e. A ) $=
      ( vx csn cun cpw cdif wcel wn wa eldif cv wrex wral wss elpwg dfss3 sylbi
      wi syl6bb notbid biimpa rexnal sylibr wceq elpwi ssel wo elsni orim2i ord
      elun imim2i impd 3syl eleq1 biimpd syl6 com4r pm2.43b rexlimdv imp syldan
      expd ) ABCEZFZGZBGZHIAVHIZAVIIZJZKZCAIZAVHVILVJVLDMZBIZJZDANZVNVMVPDAOZJZ
      VRVJVLVTVJVKVSVJVKABPVSABVHQDABRUAUBUCVPDAUDUEVJVRVNVJVQVNDAVJVOAIZVQVNTV
      JWAVQWAVNVJWAVQWAVNTZVJWAVQKZVOCUFZWBVJAVGPWAVOVGIZTZWCWDTAVGUGAVGVOUHWFW
      AVQWDWEVQWDTZWAWEVPVOVFIZUIZWGVOBVFUMWIVPWDWHWDVPVOCUJUKULSUNUOUPWDWAVNVO
      CAUQURUSVEUTVAVBVCVDS $.
  $}

  ${
    $( Members of an unordered triple of classes.  (Contributed by FL,
       2-Feb-2014.)  (Proof shortened by Mario Carneiro, 11-Feb-2015.) $)
    eltpg $p |- ( A e. V -> ( A e. { B , C , D } <->
       ( A = B \/ A = C \/ A = D ) ) ) $=
      ( wcel cpr csn wo wceq ctp w3o elprg elsncg orbi12d cun df-tp eleq2i elun
      bitri df-3or 3bitr4g ) AEFZABCGZFZADHZFZIZABJZACJZIZADJZIABCDKZFZUIUJULLU
      CUEUKUGULABCEMADENOUNAUDUFPZFUHUMUOABCDQRAUDUFSTUIUJULUAUB $.
  $}

  $( Membership in a set with three elements removed.  Similar to ~ eldifsn and
     ~ eldifpr .  (Contributed by David A. Wheeler, 22-Jul-2017.) $)
  eldiftp $p |- ( A e. ( B \ { C , D , E } ) <->
                ( A e. B /\ ( A =/= C /\ A =/= D /\ A =/= E ) ) ) $=
    ( ctp cdif wcel wn wa wne w3a eldif wceq w3o eltpg ne3anior syl6bbr pm5.32i
    notbid bitri ) ABCDEFZGHABHZAUBHZIZJUCACKADKAEKLZJABUBMUCUEUFUCUEACNADNAENO
    ZIUFUCUDUGACDEBPTACADAEQRSUA $.

  ${
    $( A member of an unordered triple of classes is one of them.  (Contributed
       by Mario Carneiro, 11-Feb-2015.) $)
    eltpi $p |- ( A e. { B , C , D } -> ( A = B \/ A = C \/ A = D ) ) $=
      ( ctp wcel wceq w3o eltpg ibi ) ABCDEZFABGACGADGHABCDKIJ $.
  $}

  ${
    eltp.1 $e |- A e. _V $.
    $( A member of an unordered triple of classes is one of them.  Special case
       of Exercise 1 of [TakeutiZaring] p. 17.  (Contributed by NM,
       8-Apr-1994.)  (Revised by Mario Carneiro, 11-Feb-2015.) $)
    eltp $p |- ( A e. { B , C , D } <-> ( A = B \/ A = C \/ A = D ) ) $=
      ( cvv wcel ctp wceq w3o wb eltpg ax-mp ) AFGABCDHGABIACIADIJKEABCDFLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Alternate definition of unordered triple of classes.  Special case of
       Definition 5.3 of [TakeutiZaring] p. 16.  (Contributed by NM,
       8-Apr-1994.) $)
    dftp2 $p |- { A , B , C } = { x | ( x = A \/ x = B \/ x = C ) } $=
      ( cv wceq w3o ctp vex eltp abbi2i ) AEZBFLCFLDFGABCDHLBCDAIJK $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    nfpr.1 $e |- F/_ x A $.
    nfpr.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for unordered pairs.  (Contributed by
       NM, 14-Nov-1995.) $)
    nfpr $p |- F/_ x { A , B } $=
      ( vy cpr cv wceq wo cab dfpr2 nfeq2 nfor nfab nfcxfr ) ABCGFHZBIZQCIZJZFK
      FBCLTAFRSAAQBDMAQCEMNOP $.
  $}

  $( Membership of a conditional operator in an unordered pair.  (Contributed
     by NM, 17-Jun-2007.) $)
  ifpr $p |- ( ( A e. C /\ B e. D ) -> if ( ph , A , B ) e. { A , B } ) $=
    ( wcel cvv cif cpr elex wa ifcl wceq wo ifeqor elprg mpbiri syl syl2an ) BD
    FBGFZCGFZABCHZBCIFZCEFBDJCEJTUAKUBGFZUCABCGLUDUCUBBMUBCMNABCOUBBCGPQRS $.

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ps $.  $d x ch $.  $d x th $.
    ralprg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ralprg.2 $e |- ( x = B -> ( ph <-> ch ) ) $.
    $( Convert a quantification over a pair to a conjunction.  (Contributed by
       NM, 17-Sep-2011.)  (Revised by Mario Carneiro, 23-Apr-2015.) $)
    ralprg $p |- ( ( A e. V /\ B e. W ) ->
      ( A. x e. { A , B } ph <-> ( ps /\ ch ) ) ) $=
      ( cpr wral csn wa wcel cun df-pr raleqi ralunb ralsng bi2anan9 syl5bb
      bitri ) ADEFKZLZADEMZLZADFMZLZNZEGOZFHOZNBCNUEADUFUHPZLUJADUDUMEFQRADUFUH
      SUCUKUGBULUICABDEGITACDFHJTUAUB $.

    $( Convert a quantification over a pair to a disjunction.  (Contributed by
       NM, 17-Sep-2011.)  (Revised by Mario Carneiro, 23-Apr-2015.) $)
    rexprg $p |- ( ( A e. V /\ B e. W ) ->
      ( E. x e. { A , B } ph <-> ( ps \/ ch ) ) ) $=
      ( cpr wrex csn wo wcel wa cun df-pr rexeqi rexsng orbi1d orbi2d sylan9bb
      rexun bitri syl5bb ) ADEFKZLZADEMZLZADFMZLZNZEGOZFHOZPBCNZUHADUIUKQZLUMAD
      UGUQEFRSADUIUKUDUEUNUMBULNUOUPUNUJBULABDEGITUAUOULCBACDFHJTUBUCUF $.

    raltpg.3 $e |- ( x = C -> ( ph <-> th ) ) $.
    $( Convert a quantification over a triple to a conjunction.  (Contributed
       by NM, 17-Sep-2011.)  (Revised by Mario Carneiro, 23-Apr-2015.) $)
    raltpg $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
      ( A. x e. { A , B , C } ph <-> ( ps /\ ch /\ th ) ) ) $=
      ( wcel w3a cpr wral csn wa ctp wb ralprg ralsng bi2anan9 3impa cun raleqi
      df-tp ralunb bitri df-3an 3bitr4g ) FIOZGJOZHKOZPAEFGQZRZAEHSZRZTZBCTZDTZ
      AEFGHUAZRZBCDPUNUOUPVAVCUBUNUOTURVBUPUTDABCEFGIJLMUCADEHKNUDUEUFVEAEUQUSU
      GZRVAAEVDVFFGHUIUHAEUQUSUJUKBCDULUM $.

    $( Convert a quantification over a triple to a disjunction.  (Contributed
       by Mario Carneiro, 23-Apr-2015.) $)
    rextpg $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
      ( E. x e. { A , B , C } ph <-> ( ps \/ ch \/ th ) ) ) $=
      ( wcel w3a cpr wrex csn wo ctp wb wa rexprg orbi1d rexsng orbi2d sylan9bb
      w3o 3impa cun df-tp rexeqi rexun bitri df-3or 3bitr4g ) FIOZGJOZHKOZPAEFG
      QZRZAEHSZRZTZBCTZDTZAEFGHUAZRZBCDUIURUSUTVEVGUBURUSUCZVEVFVDTUTVGVJVBVFVD
      ABCEFGIJLMUDUEUTVDDVFADEHKNUFUGUHUJVIAEVAVCUKZRVEAEVHVKFGHULUMAEVAVCUNUOB
      CDUPUQ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.  $d x ch $.
    ralpr.1 $e |- A e. _V $.
    ralpr.2 $e |- B e. _V $.
    ralpr.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ralpr.4 $e |- ( x = B -> ( ph <-> ch ) ) $.
    $( Convert a quantification over a pair to a conjunction.  (Contributed by
       NM, 3-Jun-2007.)  (Revised by Mario Carneiro, 23-Apr-2015.) $)
    ralpr $p |- ( A. x e. { A , B } ph <-> ( ps /\ ch ) ) $=
      ( cvv wcel cpr wral wa wb ralprg mp2an ) EKLFKLADEFMNBCOPGHABCDEFKKIJQR
      $.

    $( Convert an existential quantification over a pair to a disjunction.
       (Contributed by NM, 3-Jun-2007.)  (Revised by Mario Carneiro,
       23-Apr-2015.) $)
    rexpr $p |- ( E. x e. { A , B } ph <-> ( ps \/ ch ) ) $=
      ( cvv wcel cpr wrex wo wb rexprg mp2an ) EKLFKLADEFMNBCOPGHABCDEFKKIJQR
      $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ps $.  $d x ch $.  $d x th $.
    raltp.1 $e |- A e. _V $.
    raltp.2 $e |- B e. _V $.
    raltp.3 $e |- C e. _V $.
    raltp.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    raltp.5 $e |- ( x = B -> ( ph <-> ch ) ) $.
    raltp.6 $e |- ( x = C -> ( ph <-> th ) ) $.
    $( Convert a quantification over a triple to a conjunction.  (Contributed
       by NM, 13-Sep-2011.)  (Revised by Mario Carneiro, 23-Apr-2015.) $)
    raltp $p |- ( A. x e. { A , B , C } ph <-> ( ps /\ ch /\ th ) ) $=
      ( cvv wcel ctp wral w3a wb raltpg mp3an ) FOPGOPHOPAEFGHQRBCDSTIJKABCDEFG
      HOOOLMNUAUB $.

    $( Convert a quantification over a triple to a disjunction.  (Contributed
       by Mario Carneiro, 23-Apr-2015.) $)
    rextp $p |- ( E. x e. { A , B , C } ph <-> ( ps \/ ch \/ th ) ) $=
      ( cvv wcel ctp wrex w3o wb rextpg mp3an ) FOPGOPHOPAEFGHQRBCDSTIJKABCDEFG
      HOOOLMNUAUB $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( Substitution expressed in terms of quantification over a singleton.
       (Contributed by NM, 14-Dec-2005.)  (Revised by Mario Carneiro,
       23-Apr-2015.)  Obsolete as of 22-Aug-2018.  Use ~ ralsng instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbcsngOLD $p |- ( A e. V -> ( [. A / x ]. ph <-> A. x e. { A } ph ) ) $=
      ( wcel csn wral wsbc ralsnsg bicomd ) CDEABCFGABCHABCDIJ $.
  $}

  ${
    nfsn.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for singletons.  (Contributed by NM,
       14-Nov-1995.) $)
    nfsn $p |- F/_ x { A } $=
      ( csn cpr dfsn2 nfpr nfcxfr ) ABDBBEBFABBCCGH $.
  $}

  ${
    $d A y $.  $d B y $.  $d V y $.  $d x y $.
    $( Distribute proper substitution through the singleton of a class.
       ~ csbsng is derived from the virtual deduction proof ~ csbsngVD .
       (Contributed by Alan Sare, 10-Nov-2012.) $)
    csbsng $p |- ( A e. V -> [_ A / x ]_ { B } = { [_ A / x ]_ B } ) $=
      ( vy wcel wceq cab csb csn wsbc csbab sbceq2g abbidv syl5eq df-sn csbeq2i
      cv 3eqtr4g ) BDFZABERZCGZEHZIZUAABCIZGZEHZABCJZIUEJTUDUBABKZEHUGUBAEBLTUI
      UFEABUACDMNOABUHUCECPQEUEPS $.
  $}

  $( Distribute proper substitution through a pair of classes.  (Contributed by
     Alexander van der Vekens, 4-Sep-2018.) $)
  csbprg $p |- ( C e. V
            -> [_ C / x ]_ { A , B } = { [_ C / x ]_ A , [_ C / x ]_ B } ) $=
    ( wcel csn cun csb cpr csbun csbsng uneq12d syl5eq df-pr csbeq2i 3eqtr4g )
    DEFZADBGZCGZHZIZADBIZGZADCIZGZHZADBCJZIUCUEJRUBADSIZADTIZHUGADSTKRUIUDUJUFA
    DBELADCELMNADUHUABCOPUCUEOQ $.

  ${
    $d x A $.  $d x B $.
    $( Intersection with the singleton of a non-member is disjoint.
       (Contributed by NM, 22-May-1998.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.)  (Proof shortened by Wolf Lammen, 30-Sep-2014.) $)
    disjsn $p |- ( ( A i^i { B } ) = (/) <-> -. B e. A ) $=
      ( vx csn cin c0 wceq cv wcel wn wi wal wa disj1 con2b imbi1i imnan 3bitri
      elsn albii wex alnex df-clel xchbinxr ) ABDZEFGCHZAIZUFUEIZJKZCLUFBGZUGMZ
      JZCLZBAIZJCAUENUIULCUIUHUGJZKUJUOKULUGUHOUHUJUOCBSPUJUGQRTUMUKCUAUNUKCUBC
      BAUCUDR $.
  $}

  $( Intersection of distinct singletons is disjoint.  (Contributed by NM,
     25-May-1998.) $)
  disjsn2 $p |- ( A =/= B -> ( { A } i^i { B } ) = (/) ) $=
    ( wne csn wcel wn cin c0 wceq elsni eqcomd necon3ai disjsn sylibr ) ABCBADZ
    EZFOBDGHIPABPBABAJKLOBMN $.

  $( The intersection of distinct unordered pairs is disjoint.  (Contributed by
     Alexander van der Vekens, 11-Nov-2017.) $)
  disjpr2 $p |- ( ( ( A =/= C /\ B =/= C ) /\ ( A =/= D /\ B =/= D ) )
                  -> ( { A , B } i^i { C , D } ) = (/) ) $=
    ( wne wa cpr cin csn c0 wceq df-pr ineq1i indir eqtri disjsn2 adantr adantl
    cun syl5eq a1i ineq2d indi jca un00 sylib uneq12d un0 syl6eq eqtrd ) ACEZBC
    EZFZADEZBDEZFZFZABGZCDGZHURCIZDIZSZHZJUQUSVBURUSVBKUQCDLUAUBUQVCURUTHZURVAH
    ZSZJURUTVAUCUQVFJJSJUQVDJVEJUQVDAIZUTHZBIZUTHZSZJVDVGVISZUTHVKURVLUTABLZMVG
    VIUTNOUQVHJKZVJJKZFVKJKUQVNVOUMVNUPUKVNULACPQQUMVOUPULVOUKBCPRQUDVHVJUEUFTU
    QVEVGVAHZVIVAHZSZJVEVLVAHVRURVLVAVMMVGVIVANOUQVPJKZVQJKZFVRJKUQVSVTUPVSUMUN
    VSUOADPQRUPVTUMUOVTUNBDPRRUDVPVQUEUFTUGJUHUITUJ $.

  ${
    $d x A $.
    $( The singleton of a proper class (one that doesn't exist) is the empty
       set.  Theorem 7.2 of [Quine] p. 48.  (Contributed by NM,
       21-Jun-1993.) $)
    snprc $p |- ( -. A e. _V <-> { A } = (/) ) $=
      ( vx csn c0 wceq cvv wcel cv wex wn elsn exbii neq0 isset 3bitr4i con1bii
      ) ACZDEZAFGZBHZQGZBITAEZBIRJSUAUBBBAKLBQMBANOP $.
  $}

  ${
    $( A singleton is nonempty iff its argument is a set.  (Contributed by
       Scott Fenton, 8-May-2018.) $)
    snnzb $p |- ( A e. _V <-> { A } =/= (/) ) $=
      ( cvv wcel csn c0 wne wn wceq snprc df-ne con2bii bitri con4bii ) ABCZADZ
      EFZNGOEHZPGAIPQOEJKLM $.
  $}

  ${
    $d x y A $.  $d x B $.
    $( Special case of ~ r19.12 where its converse holds.  (Contributed by NM,
       19-May-2008.)  (Revised by Mario Carneiro, 23-Apr-2015.)  (Revised by
       BJ, 18-Mar-2020.) $)
    r19.12sn $p |- ( A e. V -> ( E. x e. { A } A. y e. B ph
                                         <-> A. y e. B E. x e. { A } ph ) ) $=
      ( wcel wral wsbc csn wrex sbcralg rexsns ralbii 3bitr4g ) DFGACEHZBDIABDI
      ZCEHPBDJZKABRKZCEHABCDEFLPBDMSQCEABDMNO $.
  $}

  ${
    $d x y A $.  $d x B $.
    r19.12sn.1 $e |- A e. _V $.
    $( Older form of ~ r19.12sn .  Obsolete as of 18-Mar-2020.  (Contributed by
       NM, 19-May-2008.)  (Revised by Mario Carneiro, 23-Apr-2015.)
       (New usage is discouraged.) $)
    r19.12snOLD $p |- ( E. x e. { A } A. y e. B ph
                <-> A. y e. B E. x e. { A } ph ) $=
      ( cvv wcel wral csn wrex wb wsbc sbcralg rexsnsOLD ralbidv 3bitr4d ax-mp
      ) DGHZACEIZBDJZKZABUAKZCEIZLFSTBDMABDMZCEIUBUDABCDEGNTBDGOSUCUECEABDGOPQR
      $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Condition where a restricted class abstraction is a singleton.
       (Contributed by NM, 28-May-2006.) $)
    rabsn $p |- ( B e. A -> { x e. A | x = B } = { B } ) $=
      ( wcel cv wceq wa cab crab csn eleq1 pm5.32ri abbidv df-rab df-sn 3eqtr4g
      baib ) CBDZAEZBDZSCFZGZAHUAAHUAABICJRUBUAAUBRUAUATRSCBKLQMUAABNACOP $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( A restricted class abstraction restricted to a singleton is either the
       empty set or the singleton itself.  (Contributed by AV, 21-Jul-2019.) $)
    rabsnifsb $p |- { x e. { A } | ph }
                    = if ( [. A / x ]. ph , { A } , (/) ) $=
      ( vy cv csn wcel wa cab wsbc c0 wn wo biimpd syl imdistani nfv nfan eleq1
      anbi1d crab wceq wi elsni sbceq1a orcd wb bicomd noel pm2.21i adantr jaoi
      cif impbii abbii nfsbc1v nfn weq orbi12d cbvab eqtri df-rab df-if 3eqtr4i
      nfor ) BEZCFZGZAHZBIZDEZVGGZABCJZHZVKKGZVMLZHZMZDIZABVGUAVMVGKUMVJVHVMHZV
      FKGZVPHZMZBIVSVIWCBVIWCVIVTWBVHAVMVHVFCUBZAVMUCVFCUDZWDAVMABCUEZNOPUFVTVI
      WBVHVMAVHVMAVHWDVMAUGWEWDAVMWFUHONPWAVIVPWAVIVFUIUJUKULUNUOWCVRBDWCDQVNVQ
      BVLVMBVLBQABCUPZRVOVPBVOBQVMBWGUQRVEBDURZVTVNWBVQWHVHVLVMVFVKVGSTWHWAVOVP
      VFVKKSTUSUTVAABVGVBVMDVGKVCVD $.
  $}

  ${
    $d x A $.  $d x ps $.
    rabsnif.f $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( A restricted class abstraction restricted to a singleton is either the
       empty set or the singleton itself.  (Contributed by AV, 12-Apr-2019.)
       (Proof shortened by AV, 21-Jul-2019.) $)
    rabsnif $p |- { x e. { A } | ph } = if ( ps , { A } , (/) ) $=
      ( cvv wcel csn crab cif wceq wsbc rabsnifsb sbcieg ifbid syl5eq rab0 ifid
      c0 wn eqtr4i snprc biimpi rabeq syl ifeq1d 3eqtr4a pm2.61i ) DFGZACDHZIZB
      UJSJZKUIUKACDLZUJSJULACDMUIUMBUJSABCDFENOPUITZACSIZBSSJZUKULUOSUPACQBSRUA
      UNUJSKZUKUOKUNUQDUBUCZACUJSUDUEUNBUJSSURUFUGUH $.
  $}

  ${
    $d x A $.
    $( A restricted class abstraction restricted to a singleton is either the
       empty set or the singleton itself.  (Contributed by Alexander van der
       Vekens, 22-Dec-2017.)  (Proof shortened by AV, 21-Jul-2019.) $)
    rabrsn $p |- ( M = { x e. { A } | ph } -> ( M = (/) \/ M = { A } ) ) $=
      ( csn crab wceq wsbc c0 cif wo rabsnifsb eqeq2i orcom mpbir eqeq1 orbi12d
      ifeqor mpbiri sylbi ) DABCEZFZGDABCHZUAIJZGZDIGZDUAGZKZUBUDDABCLMUEUHUDIG
      ZUDUAGZKZUKUJUIKUCUAIRUIUJNOUEUFUIUGUJDUDIPDUDUAPQST $.
  $}

  ${
    $d x y $.  $d y ph $.  $d y A $.
    $( Another way to express existential uniqueness of a wff: its class
       abstraction is a singleton.  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    euabsn2 $p |- ( E! x ph <-> E. y { x | ph } = { y } ) $=
      ( weu cv wceq wb wal wex cab csn df-eu wcel abeq1 elsn bibi2i albii bitri
      exbii bitr4i ) ABDABEZCEZFZGZBHZCIABJUBKZFZCIABCLUGUECUGAUAUFMZGZBHUEABUF
      NUIUDBUHUCABUBOPQRST $.

    $( Another way to express existential uniqueness of a wff: its class
       abstraction is a singleton.  (Contributed by NM, 22-Feb-2004.) $)
    euabsn $p |- ( E! x ph <-> E. x { x | ph } = { x } ) $=
      ( vy weu cab cv csn wceq wex euabsn2 nfab1 nfeq1 sneq eqeq2d cbvex bitr4i
      nfv ) ABDABEZCFZGZHZCIRBFZGZHZBIABCJUDUABCUDCQBRTABKLUBSHUCTRUBSMNOP $.

    $( A way to express restricted existential uniqueness of a wff: its
       restricted class abstraction is a singleton.  (Contributed by NM,
       30-May-2006.)  (Proof shortened by Mario Carneiro, 14-Nov-2016.) $)
    reusn $p |- ( E! x e. A ph <-> E. y { x e. A | ph } = { y } ) $=
      ( cv wcel wa weu cab csn wceq wex wreu euabsn2 df-reu df-rab eqeq1i exbii
      crab 3bitr4i ) BEDFAGZBHUABIZCEJZKZCLABDMABDSZUCKZCLUABCNABDOUFUDCUEUBUCA
      BDPQRT $.

    $( Restricted existential uniqueness determined by a singleton.
       (Contributed by NM, 29-May-2006.) $)
    absneu $p |- ( ( A e. V /\ { x | ph } = { A } ) -> E! x ph ) $=
      ( vy wcel cab csn wceq wa wex weu sneq eqeq2d spcegv imp euabsn2 sylibr
      cv ) CDFZABGZCHZIZJUAESZHZIZEKZABLTUCUGUFUCECDUDCIUEUBUAUDCMNOPABEQR $.

    $( Restricted existential uniqueness determined by a singleton.
       (Contributed by NM, 29-May-2006.)  (Revised by Mario Carneiro,
       23-Dec-2016.) $)
    rabsneu $p |- ( ( A e. V /\ { x e. B | ph } = { A } ) -> E! x e. B ph ) $=
      ( wcel crab csn wceq wa cv weu df-rab eqeq1i absneu sylan2b df-reu sylibr
      wreu cab ) CEFZABDGZCHZIZJBKDFAJZBLZABDSUDUAUEBTZUCIUFUBUGUCABDMNUEBCEOPA
      BDQR $.
  $}

  ${
    $d x A $.
    $( Two ways to express "" ` A ` is a singleton.""  (Contributed by NM,
       30-Oct-2010.) $)
    eusn $p |- ( E! x x e. A <-> E. x A = { x } ) $=
      ( cv wcel weu cab csn wceq wex euabsn abid2 eqeq1i exbii bitri ) ACZBDZAE
      PAFZOGZHZAIBRHZAIPAJSTAQBRABKLMN $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    rabsnt.1 $e |- B e. _V $.
    rabsnt.2 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( Truth implied by equality of a restricted class abstraction and a
       singleton.  (Contributed by NM, 29-May-2006.)  (Proof shortened by Mario
       Carneiro, 23-Dec-2016.) $)
    rabsnt $p |- ( { x e. A | ph } = { B } -> ps ) $=
      ( crab csn wceq wcel snid id syl5eleqr elrab simprbi syl ) ACDHZEIZJZERKZ
      BTESREFLTMNUAEDKBABCEDGOPQ $.
  $}

  $( Commutative law for unordered pairs.  (Contributed by NM, 15-Jul-1993.) $)
  prcom $p |- { A , B } = { B , A } $=
    ( csn cun cpr uncom df-pr 3eqtr4i ) ACZBCZDJIDABEBAEIJFABGBAGH $.

  $( Equality theorem for unordered pairs.  (Contributed by NM,
     29-Mar-1998.) $)
  preq1 $p |- ( A = B -> { A , C } = { B , C } ) $=
    ( wceq csn cun cpr sneq uneq1d df-pr 3eqtr4g ) ABDZAEZCEZFBEZNFACGBCGLMONAB
    HIACJBCJK $.

  $( Equality theorem for unordered pairs.  (Contributed by NM,
     15-Jul-1993.) $)
  preq2 $p |- ( A = B -> { C , A } = { C , B } ) $=
    ( wceq cpr preq1 prcom 3eqtr4g ) ABDACEBCECAECBEABCFCAGCBGH $.

  $( Equality theorem for unordered pairs.  (Contributed by NM,
     19-Oct-2012.) $)
  preq12 $p |- ( ( A = C /\ B = D ) -> { A , B } = { C , D } ) $=
    ( wceq cpr preq1 preq2 sylan9eq ) ACEBDEABFCBFCDFACBGBDCHI $.

  ${
    preq1i.1 $e |- A = B $.
    $( Equality inference for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq1i $p |- { A , C } = { B , C } $=
      ( wceq cpr preq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq2i $p |- { C , A } = { C , B } $=
      ( wceq cpr preq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      preq12i.2 $e |- C = D $.
      $( Equality inference for unordered pairs.  (Contributed by NM,
         19-Oct-2012.) $)
      preq12i $p |- { A , C } = { B , D } $=
        ( wceq cpr preq12 mp2an ) ABGCDGACHBDHGEFACBDIJ $.
    $}
  $}

  ${
    preq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq1d $p |- ( ph -> { A , C } = { B , C } ) $=
      ( wceq cpr preq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq2d $p |- ( ph -> { C , A } = { C , B } ) $=
      ( wceq cpr preq2 syl ) ABCFDBGDCGFEBCDHI $.

    preq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for unordered pairs.  (Contributed by NM,
       19-Oct-2012.) $)
    preq12d $p |- ( ph -> { A , C } = { B , D } ) $=
      ( wceq cpr preq12 syl2anc ) ABCHDEHBDICEIHFGBDCEJK $.
  $}

  $( Equality theorem for unordered triples.  (Contributed by NM,
     13-Sep-2011.) $)
  tpeq1 $p |- ( A = B -> { A , C , D } = { B , C , D } ) $=
    ( wceq cpr csn cun ctp preq1 uneq1d df-tp 3eqtr4g ) ABEZACFZDGZHBCFZPHACDIB
    CDINOQPABCJKACDLBCDLM $.

  $( Equality theorem for unordered triples.  (Contributed by NM,
     13-Sep-2011.) $)
  tpeq2 $p |- ( A = B -> { C , A , D } = { C , B , D } ) $=
    ( wceq cpr csn cun ctp preq2 uneq1d df-tp 3eqtr4g ) ABEZCAFZDGZHCBFZPHCADIC
    BDINOQPABCJKCADLCBDLM $.

  $( Equality theorem for unordered triples.  (Contributed by NM,
     13-Sep-2011.) $)
  tpeq3 $p |- ( A = B -> { C , D , A } = { C , D , B } ) $=
    ( wceq cpr csn cun ctp sneq uneq2d df-tp 3eqtr4g ) ABEZCDFZAGZHOBGZHCDAICDB
    INPQOABJKCDALCDBLM $.

  ${
    tpeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for unordered triples.  (Contributed by NM,
       22-Jun-2014.) $)
    tpeq1d $p |- ( ph -> { A , C , D } = { B , C , D } ) $=
      ( wceq ctp tpeq1 syl ) ABCGBDEHCDEHGFBCDEIJ $.

    $( Equality theorem for unordered triples.  (Contributed by NM,
       22-Jun-2014.) $)
    tpeq2d $p |- ( ph -> { C , A , D } = { C , B , D } ) $=
      ( wceq ctp tpeq2 syl ) ABCGDBEHDCEHGFBCDEIJ $.

    $( Equality theorem for unordered triples.  (Contributed by NM,
       22-Jun-2014.) $)
    tpeq3d $p |- ( ph -> { C , D , A } = { C , D , B } ) $=
      ( wceq ctp tpeq3 syl ) ABCGDEBHDECHGFBCDEIJ $.

    tpeq123d.2 $e |- ( ph -> C = D ) $.
    tpeq123d.3 $e |- ( ph -> E = F ) $.
    $( Equality theorem for unordered triples.  (Contributed by NM,
       22-Jun-2014.) $)
    tpeq123d $p |- ( ph -> { A , C , E } = { B , D , F } ) $=
      ( ctp tpeq1d tpeq2d tpeq3d 3eqtrd ) ABDFKCDFKCEFKCEGKABCDFHLADECFIMAFGCEJ
      NO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Rotation of the elements of an unordered triple.  (Contributed by Alan
       Sare, 24-Oct-2011.) $)
    tprot $p |- { A , B , C } = { B , C , A } $=
      ( vx cv wceq w3o cab ctp 3orrot abbii dftp2 3eqtr4i ) DEZAFZNBFZNCFZGZDHP
      QOGZDHABCIBCAIRSDOPQJKDABCLDBCALM $.
  $}

  $( Swap 1st and 2nd members of an unordered triple.  (Contributed by NM,
     22-May-2015.) $)
  tpcoma $p |- { A , B , C } = { B , A , C } $=
    ( cpr csn cun ctp prcom uneq1i df-tp 3eqtr4i ) ABDZCEZFBADZMFABCGBACGLNMABH
    IABCJBACJK $.

  $( Swap 2nd and 3rd members of an unordered triple.  (Contributed by NM,
     22-May-2015.) $)
  tpcomb $p |- { A , B , C } = { A , C , B } $=
    ( ctp tpcoma tprot 3eqtr4i ) BCADCBADABCDACBDBCAEABCFACBFG $.

  $( Split off the first element of an unordered triple.  (Contributed by Mario
     Carneiro, 5-Jan-2016.) $)
  tpass $p |- { A , B , C } = ( { A } u. { B , C } ) $=
    ( ctp cpr csn cun df-tp tprot uncom 3eqtr4i ) BCADBCEZAFZGABCDMLGBCAHABCIML
    JK $.

  $( Two ways to write an unordered quadruple.  (Contributed by Mario Carneiro,
     5-Jan-2016.) $)
  qdass $p |- ( { A , B } u. { C , D } ) = ( { A , B , C } u. { D } ) $=
    ( cpr csn cun ctp unass df-tp uneq1i df-pr uneq2i 3eqtr4ri ) ABEZCFZGZDFZGO
    PRGZGABCHZRGOCDEZGOPRITQRABCJKUASOCDLMN $.

  $( Two ways to write an unordered quadruple.  (Contributed by Mario Carneiro,
     5-Jan-2016.) $)
  qdassr $p |- ( { A , B } u. { C , D } ) = ( { A } u. { B , C , D } ) $=
    ( csn cun cpr ctp unass df-pr uneq1i tpass uneq2i 3eqtr4i ) AEZBEZFZCDGZFOP
    RFZFABGZRFOBCDHZFOPRITQRABJKUASOBCDLMN $.

  $( Unordered triple ` { A , A , B } ` is just an overlong way to write
     ` { A , B } ` .  (Contributed by David A. Wheeler, 10-May-2015.) $)
  tpidm12 $p |- { A , A , B } = { A , B } $=
    ( csn cun cpr ctp dfsn2 uneq1i df-pr df-tp 3eqtr4ri ) ACZBCZDAAEZMDABEAABFL
    NMAGHABIAABJK $.

  $( Unordered triple ` { A , B , A } ` is just an overlong way to write
     ` { A , B } ` .  (Contributed by David A. Wheeler, 10-May-2015.) $)
  tpidm13 $p |- { A , B , A } = { A , B } $=
    ( ctp cpr tprot tpidm12 eqtr3i ) AABCABACABDAABEABFG $.

  $( Unordered triple ` { A , B , B } ` is just an overlong way to write
     ` { A , B } ` .  (Contributed by David A. Wheeler, 10-May-2015.) $)
  tpidm23 $p |- { A , B , B } = { A , B } $=
    ( ctp cpr tprot tpidm12 prcom 3eqtri ) ABBCBBACBADABDABBEBAFBAGH $.

  $( Unordered triple ` { A , A , A } ` is just an overlong way to write
     ` { A } ` .  (Contributed by David A. Wheeler, 10-May-2015.) $)
  tpidm $p |- { A , A , A } = { A } $=
    ( ctp cpr csn tpidm12 dfsn2 eqtr4i ) AAABAACADAAEAFG $.

  $( An unordered triple is an unordered pair if one of its elements is
     identical with another element.  (Contributed by Alexander van der Vekens,
     6-Oct-2017.) $)
  tppreq3 $p |- ( B = C -> { A , B , C } = { A , B } ) $=
    ( wceq ctp cpr tpeq3 eqcoms tpidm23 syl6eq ) BCDABCEZABBEZABFKLDCBCBABGHABI
    J $.

  $( An unordered pair contains its first member.  Part of Theorem 7.6 of
     [Quine] p. 49.  (Contributed by Stefan Allan, 8-Nov-2008.) $)
  prid1g $p |- ( A e. V -> A e. { A , B } ) $=
    ( wcel cpr wceq wo eqid orci elprg mpbiri ) ACDAABEDAAFZABFZGLMAHIAABCJK $.

  $( An unordered pair contains its second member.  Part of Theorem 7.6 of
     [Quine] p. 49.  (Contributed by Stefan Allan, 8-Nov-2008.) $)
  prid2g $p |- ( B e. V -> B e. { A , B } ) $=
    ( wcel cpr prid1g prcom syl6eleq ) BCDBBAEABEBACFBAGH $.

  ${
    prid1.1 $e |- A e. _V $.
    $( An unordered pair contains its first member.  Part of Theorem 7.6 of
       [Quine] p. 49.  (Contributed by NM, 24-Jun-1993.) $)
    prid1 $p |- A e. { A , B } $=
      ( cvv wcel cpr prid1g ax-mp ) ADEAABFECABDGH $.
  $}

  ${
    prid2.1 $e |- B e. _V $.
    $( An unordered pair contains its second member.  Part of Theorem 7.6 of
       [Quine] p. 49.  (Contributed by NM, 5-Aug-1993.) $)
    prid2 $p |- B e. { A , B } $=
      ( cpr prid1 prcom eleqtri ) BBADABDBACEBAFG $.
  $}

  $( A proper class vanishes in an unordered pair.  (Contributed by NM,
     15-Jul-1993.) $)
  prprc1 $p |- ( -. A e. _V -> { A , B } = { B } ) $=
    ( cvv wcel wn csn c0 wceq cpr snprc cun uneq1 df-pr uncom un0 3eqtr4g sylbi
    eqtr2i ) ACDEAFZGHZABIZBFZHAJTSUBKGUBKZUAUBSGUBLABMUCUBGKUBGUBNUBORPQ $.

  $( A proper class vanishes in an unordered pair.  (Contributed by NM,
     22-Mar-2006.) $)
  prprc2 $p |- ( -. B e. _V -> { A , B } = { A } ) $=
    ( cvv wcel wn cpr csn prcom prprc1 syl5eq ) BCDEABFBAFAGABHBAIJ $.

  $( An unordered pair containing two proper classes is the empty set.
     (Contributed by NM, 22-Mar-2006.) $)
  prprc $p |- ( ( -. A e. _V /\ -. B e. _V ) -> { A , B } = (/) ) $=
    ( cvv wcel wn cpr csn c0 prprc1 wceq snprc biimpi sylan9eq ) ACDEBCDEZABFBG
    ZHABINOHJBKLM $.

  ${
    tpid1.1 $e |- A e. _V $.
    $( One of the three elements of an unordered triple.  (Contributed by NM,
       7-Apr-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    tpid1 $p |- A e. { A , B , C } $=
      ( ctp wcel wceq w3o eqid 3mix1i eltp mpbir ) AABCEFAAGZABGZACGZHMNOAIJAAB
      CDKL $.
  $}

  ${
    tpid2.1 $e |- B e. _V $.
    $( One of the three elements of an unordered triple.  (Contributed by NM,
       7-Apr-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    tpid2 $p |- B e. { A , B , C } $=
      ( ctp wcel wceq w3o eqid 3mix2i eltp mpbir ) BABCEFBAGZBBGZBCGZHNMOBIJBAB
      CDKL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x D $.  $d x ps $.
    $( Closed theorem form of ~ tpid3 .  This proof was automatically generated
       from the virtual deduction proof ~ tpid3gVD using a translation
       program.  (Contributed by Alan Sare, 24-Oct-2011.) $)
    tpid3g $p |- ( A e. B -> A e. { C , D , A } ) $=
      ( vx wcel cv wceq wex ctp elisset w3o cab wi 3mix3 a1i abid syl6ibr dftp2
      eleq2i eleq1 mpbidi exlimdv mpd ) ABFZEGZAHZEIACDAJZFZEABKUEUGUIEUGUFUHFZ
      UIUEUEUGUFUFCHZUFDHZUGLZEMZFZUJUEUGUMUOUGUMNUEUGUKULOPUMEQRUHUNUFECDASTRU
      FAUHUAUBUCUD $.
  $}

  ${
    tpid3.1 $e |- C e. _V $.
    $( One of the three elements of an unordered triple.  (Contributed by NM,
       7-Apr-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    tpid3 $p |- C e. { A , B , C } $=
      ( ctp wcel wceq w3o eqid 3mix3i eltp mpbir ) CABCEFCAGZCBGZCCGZHOMNCIJCAB
      CDKL $.
  $}

  $( The singleton of a set is not empty.  (Contributed by NM, 14-Dec-2008.) $)
  snnzg $p |- ( A e. V -> { A } =/= (/) ) $=
    ( wcel csn c0 wne snidg ne0i syl ) ABCAADZCJEFABGJAHI $.

  ${
    snnz.1 $e |- A e. _V $.
    $( The singleton of a set is not empty.  (Contributed by NM,
       10-Apr-1994.) $)
    snnz $p |- { A } =/= (/) $=
      ( cvv wcel csn c0 wne snnzg ax-mp ) ACDAEFGBACHI $.
  $}

  ${
    prnz.1 $e |- A e. _V $.
    $( A pair containing a set is not empty.  (Contributed by NM,
       9-Apr-1994.) $)
    prnz $p |- { A , B } =/= (/) $=
      ( cpr prid1 ne0ii ) AABDABCEF $.
  $}

  ${
    $d x A $.  $d x B $.
    $( A pair containing a set is not empty.  (Contributed by FL,
       19-Sep-2011.) $)
    prnzg $p |- ( A e. V -> { A , B } =/= (/) ) $=
      ( vx cv cpr c0 wne wceq preq1 neeq1d vex prnz vtoclg ) DEZBFZGHABFZGHDACO
      AIPQGOABJKOBDLMN $.
  $}

  ${
    tpnz.1 $e |- A e. _V $.
    $( A triplet containing a set is not empty.  (Contributed by NM,
       10-Apr-1994.) $)
    tpnz $p |- { A , B , C } =/= (/) $=
      ( ctp tpid1 ne0ii ) AABCEABCDFG $.
  $}

  ${
    tpnzd.1 $e |- ( ph -> A e. V ) $.
    $( A triplet containing a set is not empty.  (Contributed by Thierry
       Arnoux, 8-Apr-2019.) $)
    tpnzd $p |- ( ph -> { A , B , C } =/= (/) ) $=
      ( wcel ctp c0 wne tpid3g tprot syl6eleqr ne0i 3syl ) ABEGZBBCDHZGQIJFPBCD
      BHQBECDKBCDLMQBNO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ph $.  $d x ch $.  $d x th $.
    $d x ta $.
    ralprd.1 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    ralprd.2 $e |- ( ( ph /\ x = B ) -> ( ps <-> th ) ) $.
    raltpd.3 $e |- ( ( ph /\ x = C ) -> ( ps <-> ta ) ) $.
    ralprd.a $e |- ( ph -> A e. V ) $.
    ralprd.b $e |- ( ph -> B e. W ) $.
    raltpd.c $e |- ( ph -> C e. X ) $.
    $( Convert a quantification over a triple to a conjunction.  (Contributed
       by Thierry Arnoux, 8-Apr-2019.) $)
    raltpd $p |- ( ph -> ( A. x e. { A , B , C } ps <-> ( ch /\ th /\ ta ) ) )
      $=
      ( wa wb ctp wral w3a an3andi a1i wcel cv expcom pm5.32d raltpg syl3anc c0
      wceq wne tpnzd r19.28zv syl 3bitr2d bianabs bicomd ) ABFGHIUAZUBZCDEUCZAA
      VCSZVBAVDVBAVDACSZADSZAESZUCZABSZFVAUBZAVBSZVDVHTAACDEUDUEAGJUFHKUFILUFVJ
      VHTPQRVIVEVFVGFGHIJKLFUGZGUMZABCAVMBCTMUHUIVLHUMZABDAVNBDTNUHUIVLIUMZABEA
      VOBETOUHUIUJUKAVAULUNVJVKTAGHIJPUOABFVAUPUQURUSUTUS $.
  $}

  ${
    $d A x $.  $d B x $.
    snss.1 $e |- A e. _V $.
    $( The singleton of an element of a class is a subset of the class.
       Theorem 7.4 of [Quine] p. 49.  (Contributed by NM, 21-Jun-1993.) $)
    snss $p |- ( A e. B <-> { A } C_ B ) $=
      ( vx cv csn wcel wi wal wceq wss elsn imbi1i albii dfss2 clel2 3bitr4ri )
      DEZAFZGZRBGZHZDIRAJZUAHZDISBKABGUBUDDTUCUADALMNDSBODABCPQ $.
  $}

  $( Membership in a set with an element removed.  (Contributed by NM,
     10-Oct-2007.) $)
  eldifsn $p |- ( A e. ( B \ { C } ) <-> ( A e. B /\ A =/= C ) ) $=
    ( csn cdif wcel wn wa wne eldif elsncg necon3bbid pm5.32i bitri ) ABCDZEFAB
    FZAOFZGZHPACIZHABOJPRSPQACACBKLMN $.

  $( Membership in a set with an element removed.  (Contributed by NM,
     10-Mar-2015.) $)
  eldifsni $p |- ( A e. ( B \ { C } ) -> A =/= C ) $=
    ( csn cdif wcel wne eldifsn simprbi ) ABCDEFABFACGABCHI $.

  $( ` A ` is not in ` ( B \ { A } ) ` .  (Contributed by David Moews,
     1-May-2017.) $)
  neldifsn $p |- -. A e. ( B \ { A } ) $=
    ( csn cdif wcel wne neirr eldifsni mto ) ABACDEAAFAGABAHI $.

  $( ` A ` is not in ` ( B \ { A } ) ` .  Deduction form.  (Contributed by
     David Moews, 1-May-2017.) $)
  neldifsnd $p |- ( ph -> -. A e. ( B \ { A } ) ) $=
    ( csn cdif wcel wn neldifsn a1i ) BCBDEFGABCHI $.

  $( Restricted existential quantification over a set with an element removed.
     (Contributed by NM, 4-Feb-2015.) $)
  rexdifsn $p |- ( E. x e. ( A \ { B } ) ph
      <-> E. x e. A ( x =/= B /\ ph ) ) $=
    ( cv wne wa csn cdif wcel eldifsn anbi1i anass bitri rexbii2 ) ABEZDFZAGZBC
    DHIZCPSJZAGPCJZQGZAGUARGTUBAPCDKLUAQAMNO $.

  $( Rearrangement of a property of a singleton difference.  (Contributed by
     Stefan O'Rear, 27-Feb-2015.) $)
  raldifsni $p |- ( A. x e. ( A \ { B } ) -. ph <->
      A. x e. A ( ph -> x = B ) ) $=
    ( wn cv wceq wi csn cdif wcel wne eldifsn imbi1i impexp df-ne con34b bitr4i
    wa imbi2i 3bitri ralbii2 ) AEZABFZDGZHZBCDIJZCUDUGKZUCHUDCKZUDDLZSZUCHUIUJU
    CHZHUIUFHUHUKUCUDCDMNUIUJUCOULUFUIULUEEZUCHUFUJUMUCUDDPNAUEQRTUAUB $.

  ${
    $d x Y $.
    $( Restricted universal quantification on a class difference with a
       singleton in terms of an implication.  (Contributed by Alexander van der
       Vekens, 26-Jan-2018.) $)
    raldifsnb $p |- ( A. x e. A ( x =/= Y -> ph )
                      <-> A. x e. ( A \ { Y } ) ph ) $=
      ( cv wne wi wral csn wnel cdif wcel wceq wn elsn nnel nne 3bitr4ri imbi1i
      con4bii ralbii raldifb bitri ) BEZDFZAGZBCHUDDIZJZAGZBCHABCUGKHUFUIBCUEUH
      AUEUHUDUGLUDDMUHNUENBDOUDUGPUDDQRTSUAABCUGUBUC $.
  $}

  $( A set is an element of the universal class excluding a singleton iff it is
     not the singleton element.  (Contributed by AV, 7-Apr-2019.) $)
  eldifvsn $p |- ( A e. V -> ( A e. ( _V \ { B } ) <-> A =/= B ) ) $=
    ( wcel wne cvv wa csn cdif elex biantrurd eldifsn syl6rbbr ) ACDZABEZAFDZOG
    AFBHIDNPOACJKAFBLM $.

  ${
    $d A x $.  $d B x $.
    $( The singleton of an element of a class is a subset of the class.
       Theorem 7.4 of [Quine] p. 49.  (Contributed by NM, 22-Jul-2001.) $)
    snssg $p |- ( A e. V -> ( A e. B <-> { A } C_ B ) ) $=
      ( vx cv wcel csn wss eleq1 wceq sneq sseq1d vex snss vtoclbg ) DEZBFPGZBH
      ABFAGZBHDACPABIPAJQRBPAKLPBDMNO $.

    $( An element not in a set can be removed without affecting the set.
       (Contributed by NM, 16-Mar-2006.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    difsn $p |- ( -. A e. B -> ( B \ { A } ) = B ) $=
      ( vx wcel wn csn cdif cv wne wa eldifsn simpl wceq eleq1 biimpcd necon3bd
      com12 ancld impbid2 syl5bb eqrdv ) ABDZEZCBAFGZBCHZUDDUEBDZUEAIZJZUCUFUEB
      AKUCUHUFUFUGLUCUFUGUFUCUGUFUBUEAUEAMUFUBUEABNOPQRSTUA $.

    $( Removal of a singleton from an unordered pair.  (Contributed by NM,
       16-Mar-2006.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    difprsnss $p |- ( { A , B } \ { A } ) C_ { B } $=
      ( vx cpr csn cdif cv wcel wn wa wceq wo elpr elsn notbii biimparc syl2anb
      vex biorf eldif 3imtr4i ssriv ) CABDZAEZFZBEZCGZUCHZUGUDHZIZJUGBKZUGUEHUG
      UFHUHUGAKZUKLZULIZUKUJUGABCRMUIULCANOUNUKUMULUKSPQUGUCUDTCBNUAUB $.
  $}

  $( Removal of a singleton from an unordered pair.  (Contributed by Thierry
     Arnoux, 4-Feb-2017.) $)
  difprsn1 $p |- ( A =/= B -> ( { A , B } \ { A } ) = { B } ) $=
    ( wne cpr csn cdif wceq necom cin c0 disjsn2 disj3 sylib cun df-pr equncomi
    difeq1i difun2 eqtri syl6reqr sylbir ) ABCBACZABDZAEZFZBEZGBAHUBUFUFUDFZUEU
    BUFUDIJGUFUGGBAKUFUDLMUEUFUDNZUDFUGUCUHUDUCUDUFABOPQUFUDRSTUA $.

  $( Removal of a singleton from an unordered pair.  (Contributed by Alexander
     van der Vekens, 5-Oct-2017.) $)
  difprsn2 $p |- ( A =/= B -> ( { A , B } \ { B } ) = { A } ) $=
    ( wne cpr csn cdif prcom difeq1i wceq necom difprsn1 sylbi syl5eq ) ABCZABD
    ZBEZFBADZPFZAEZOQPABGHNBACRSIABJBAKLM $.

  $( Removal of a singleton from an unordered triple.  (Contributed by
     Alexander van der Vekens, 5-Oct-2017.) $)
  diftpsn3 $p |- ( ( A =/= C /\ B =/= C )
                    -> ( { A , B , C } \ { C } ) = { A , B } ) $=
    ( wne wa ctp csn cdif cpr cun a1i c0 cin necom disjsn2 sylbi uneq12d syl6eq
    wceq 3eqtrd df-tp difeq1d df-pr ineq1d incom indi eqtri adantr adantl unidm
    difundir disj3 sylib eqcomd difid un0 ) ACDZBCDZEZABCFZCGZHABIZVAJZVAHZVBVA
    HZVAVAHZJZVBUSUTVCVAUTVCSUSABCUAKUBVDVGSUSVBVAVAUKKUSVGVBLJVBUSVEVBVFLUSVBV
    EUSVBVAMZLSVBVESUSVHAGZBGZJZVAMZVAVIMZVAVJMZJZLUSVBVKVAVBVKSUSABUCKUDVLVOSU
    SVLVAVKMVOVKVAUEVAVIVJUFUGKUSVOLLJLUSVMLVNLUQVMLSZURUQCADVPACNCAOPUHURVNLSZ
    UQURCBDVQBCNCBOPUIQLUJRTVBVAULUMUNVFLSUSVAUOKQVBUPRT $.

  $( Removing two elements as pair of elements corresponds to removing each of
     the two elements as singletons.  (Contributed by Alexander van der Vekens,
     13-Jul-2018.) $)
  difpr $p |- ( A \ { B , C } ) = ( ( A \ { B } ) \ { C } ) $=
    ( cpr cdif csn cun df-pr difeq2i difun1 eqtri ) ABCDZEABFZCFZGZEAMENELOABCH
    IAMNJK $.

  $( An unordered triple is an unordered pair if one of its elements is a
     proper class or is identical with another element.  (Contributed by
     Alexander van der Vekens, 6-Oct-2017.) $)
  tpprceq3 $p |- ( -. ( C e. _V /\ C =/= B ) -> { A , B , C } = { A , B } ) $=
    ( cvv wcel wne wa wn wo ctp cpr wceq ianor tprot csn cun df-tp prprc2 sylbi
    syl5eq uneq1d df-pr prcom eqtr3i syl6eq nne tppreq3 eqcoms jaoi ) CDEZCBFZG
    HUJHZUKHZIABCJZABKZLZUJUKMULUPUMULUNBCAJZUOABCNULUQBCKZAOZPZUOBCAQULUTBOZUS
    PZUOULURVAUSBCRUABAKVBUOBAUBBAUCUDUETTUMCBLUPCBUFUPBCABCUGUHSUIS $.

  $( An unordered triple is an unordered pair if and only if one of its
     elements is a proper class or is identical with one of the another
     elements.  (Contributed by Alexander van der Vekens, 15-Jan-2018.) $)
  tppreqb $p |- ( -. ( C e. _V /\ C =/= A /\ C =/= B )
                     <-> { A , B , C } = { A , B } ) $=
    ( cvv wcel wne w3a wn ctp cpr wceq wo w3o wa ianor tpprceq3 sylbir jaoi nne
    sylbi 3ianor df-3or bitri orass tpcoma prcom 3eqtr3g orcom bitr4i csn df-tp
    cun eqeq1i wss ssequn2 wi snssg elpri 3mix2 3mix3 syl syl6bir 3mix1 pm2.61i
    orcs a1d sylibr impbii ) CDEZCAFZCBFZGHZABCIZABJZKZVLVIHZVJHZLZVKHZLZVOVLVP
    VQVSMZVTVIVJVKUAZVPVQVSUBUCVTVPVOVTVPLVRVSVPLZLVOVRVSVPUDVRVOWCVRBACIZBAJZV
    MVNVRVIVJNHWDWEKVIVJOBACPQBACUEBAUFUGWCVIVKNHZVOWCVPVSLWFVSVPUHVIVKOUIABCPT
    RTVETVOVNCUJZULZVNKZVLVMWHVNABCUKUMWIWGVNUNZVLWGVNUOWJWAVLVIWJWAUPVIWJCVNEZ
    WACVNDUQWKCAKZCBKZLWACABURWLWAWMWLVQWACASVQVPVSUSQWMVSWACBSVSVPVQUTQRVAVBVP
    WAWJVPVQVSVCVFVDWBVGQTVH $.

  $( ` ( B \ { A } ) ` equals ` B ` if and only if ` A ` is not a member of
     ` B ` .  Generalization of ~ difsn .  (Contributed by David Moews,
     1-May-2017.) $)
  difsnb $p |- ( -. A e. B <-> ( B \ { A } ) = B ) $=
    ( wcel wn csn cdif wceq difsn neldifsnd nelne1 mpdan necomd necon2bi impbii
    wne ) ABCZDBAEFZBGABHPQBPBQPAQCDBQOPABIABQJKLMN $.

  $( ` ( B \ { A } ) ` is a proper subclass of ` B ` if and only if ` A ` is a
     member of ` B ` .  (Contributed by David Moews, 1-May-2017.) $)
  difsnpss $p |- ( A e. B <-> ( B \ { A } ) C. B ) $=
    ( wcel wn csn cdif wpss notnot wne wss wa biantrur difsnb necon3bbii df-pss
    difss 3bitr4i bitri ) ABCZSDZDZBAEZFZBGZSHUCBIZUCBJZUEKUAUDUFUEBUBPLTUCBABM
    NUCBOQR $.

  $( The singleton of an element of a class is a subset of the class.
     (Contributed by NM, 6-Jun-1994.) $)
  snssi $p |- ( A e. B -> { A } C_ B ) $=
    ( wcel csn wss snssg ibi ) ABCADBEABBFG $.

  ${
    snssd.1 $e |- ( ph -> A e. B ) $.
    $( The singleton of an element of a class is a subset of the class
       (deduction rule).  (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    snssd $p |- ( ph -> { A } C_ B ) $=
      ( wcel csn wss wb snssg syl mpbid ) ABCEZBFCGZDALLMHDBCCIJK $.
  $}

  $( If we remove a single element from a class then put it back in, we end up
     with the original class.  (Contributed by NM, 2-Oct-2006.) $)
  difsnid $p |- ( B e. A -> ( ( A \ { B } ) u. { B } ) = A ) $=
    ( wcel csn cdif cun uncom wss wceq snssi undif sylib syl5eq ) BACZABDZEZOFO
    PFZAPOGNOAHQAIBAJOAKLM $.

  $( Compute the power set of the empty set.  Theorem 89 of [Suppes] p. 47.
     (Contributed by NM, 5-Aug-1993.)  (Proof shortened by Andrew Salmon,
     29-Jun-2011.) $)
  pw0 $p |- ~P (/) = { (/) } $=
    ( vx cv c0 wss cab wceq cpw csn ss0b abbii df-pw df-sn 3eqtr4i ) ABZCDZAENC
    FZAECGCHOPANIJACKACLM $.

  ${
    $d x y $.
    $( Compute the power set of the power set of the empty set.  (See ~ pw0 for
       the power set of the empty set.)  Theorem 90 of [Suppes] p. 48.
       Although this theorem is a special case of ~ pwsn , we have chosen to
       show a direct elementary proof.  (Contributed by NM, 7-Aug-1994.) $)
    pwpw0 $p |- ~P { (/) } = { (/) , { (/) } } $=
      ( vx vy cv c0 csn wss cab wceq wo cpw cpr wn wa wcel wal dfss2 elsn sylbi
      wi wex imbi2i albii bitri neq0 exintr syl5bi exancom df-clel bitr4i snssi
      syl6 anc2li eqss syl6ibr orrd sseq1 mpbiri eqimss jaoi impbii abbii df-pw
      0ss dfpr2 3eqtr4i ) ACZDEZFZAGVFDHZVFVGHZIZAGVGJDVGKVHVKAVHVKVHVIVJVHVILZ
      VHVGVFFZMVJVHVLVMVHBCZVFNZVNDHZSZBOZVLVMSVHVOVNVGNZSZBOVRBVFVGPVTVQBVSVPV
      OBDQUAUBUCVRVLVOVPMBTZVMVLVOBTVRWABVFUDVOVPBUEUFWADVFNZVMWAVPVOMBTWBVOVPB
      UGBDVFUHUIDVFUJRUKRULVFVGUMUNUOVIVHVJVIVHDVGFVGVCVFDVGUPUQVFVGURUSUTVAAVG
      VBADVGVDVE $.
  $}

  $( A singleton is a subset of an unordered pair containing its member.
     (Contributed by NM, 27-Aug-2004.) $)
  snsspr1 $p |- { A } C_ { A , B } $=
    ( csn cun cpr ssun1 df-pr sseqtr4i ) ACZIBCZDABEIJFABGH $.

  $( A singleton is a subset of an unordered pair containing its member.
     (Contributed by NM, 2-May-2009.) $)
  snsspr2 $p |- { B } C_ { A , B } $=
    ( csn cun cpr ssun2 df-pr sseqtr4i ) BCZACZIDABEIJFABGH $.

  $( A singleton is a subset of an unordered triple containing its member.
     (Contributed by NM, 9-Oct-2013.) $)
  snsstp1 $p |- { A } C_ { A , B , C } $=
    ( csn cpr cun ctp snsspr1 ssun1 sstri df-tp sseqtr4i ) ADZABEZCDZFZABCGMNPA
    BHNOIJABCKL $.

  $( A singleton is a subset of an unordered triple containing its member.
     (Contributed by NM, 9-Oct-2013.) $)
  snsstp2 $p |- { B } C_ { A , B , C } $=
    ( csn cpr cun ctp snsspr2 ssun1 sstri df-tp sseqtr4i ) BDZABEZCDZFZABCGMNPA
    BHNOIJABCKL $.

  $( A singleton is a subset of an unordered triple containing its member.
     (Contributed by NM, 9-Oct-2013.) $)
  snsstp3 $p |- { C } C_ { A , B , C } $=
    ( csn cpr cun ctp ssun2 df-tp sseqtr4i ) CDZABEZKFABCGKLHABCIJ $.

  ${
    $d A x $.  $d B x $.  $d C x $.
    prss.1 $e |- A e. _V $.
    prss.2 $e |- B e. _V $.
    $( A pair of elements of a class is a subset of the class.  Theorem 7.5 of
       [Quine] p. 49.  (Contributed by NM, 30-May-1994.)  (Proof shortened by
       Andrew Salmon, 29-Jun-2011.) $)
    prss $p |- ( ( A e. C /\ B e. C ) <-> { A , B } C_ C ) $=
      ( csn wss wa cun wcel cpr unss snss anbi12i df-pr sseq1i 3bitr4i ) AFZCGZ
      BFZCGZHRTIZCGACJZBCJZHABKZCGRTCLUCSUDUAACDMBCEMNUEUBCABOPQ $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.
    $( A pair of elements of a class is a subset of the class.  Theorem 7.5 of
       [Quine] p. 49.  (Contributed by NM, 22-Mar-2006.)  (Proof shortened by
       Andrew Salmon, 29-Jun-2011.) $)
    prssg $p |- ( ( A e. V /\ B e. W )
                -> ( ( A e. C /\ B e. C ) <-> { A , B } C_ C ) ) $=
      ( wcel wa csn wss cpr snssg bi2anan9 cun unss df-pr sseq1i bitr4i syl6bb
      ) ADFZBEFZGACFZBCFZGAHZCIZBHZCIZGZABJZCIZSUAUDTUBUFACDKBCEKLUGUCUEMZCIUIU
      CUECNUHUJCABOPQR $.
  $}

  $( A pair of elements of a class is a subset of the class.  (Contributed by
     NM, 16-Jan-2015.) $)
  prssi $p |- ( ( A e. C /\ B e. C ) -> { A , B } C_ C ) $=
    ( wcel wa cpr wss prssg ibi ) ACDBCDEABFCGABCCCHI $.

  $( An unordered pair belongs to the power class of a class iff each member
     belongs to the class.  (Contributed by Thierry Arnoux, 3-Oct-2016.)
     (Revised by NM, 18-Jan-2018.) $)
  prsspwg $p |- ( ( A e. V /\ B e. W ) -> ( { A , B } C_ ~P C
      <-> ( A C_ C /\ B C_ C ) ) ) $=
    ( wcel wa cpw cpr wss prssg elpwg bi2anan9 bitr3d ) ADFZBEFZGACHZFZBQFZGABI
    QJACJZBCJZGABQDEKORTPSUAACDLBCELMN $.

  ${
    $d x A $.  $d x B $.
    $( The subsets of a singleton.  (Contributed by NM, 24-Apr-2004.) $)
    sssn $p |- ( A C_ { B } <-> ( A = (/) \/ A = { B } ) ) $=
      ( vx csn wss c0 wceq wo wn wa wcel cv wex neq0 ssel elsni syl6 eleq1 ibd
      wb exlimdv syl5bi snssi anc2li eqss syl6ibr orrd sseq1 mpbiri eqimss jaoi
      0ss impbii ) ABDZEZAFGZAUNGZHUOUPUQUOUPIZUOUNAEZJUQUOURUSUOURBAKZUSURCLZA
      KZCMUOUTCANUOVBUTCUOVBUTUOVBVABGZVBUTTUOVBVAUNKVCAUNVAOVABPQVABARQSUAUBBA
      UCQUDAUNUEUFUGUPUOUQUPUOFUNEUNULAFUNUHUIAUNUJUKUM $.

    $( The property of being sandwiched between two sets naturally splits under
       union with a singleton.  This is the induction hypothesis for the
       determination of large powersets such as ~ pwtp .  (Contributed by Mario
       Carneiro, 2-Jul-2016.) $)
    ssunsn2 $p |- ( ( B C_ A /\ A C_ ( C u. { D } ) )
                    <-> ( ( B C_ A /\ A C_ C ) \/
                      ( ( B u. { D } ) C_ A /\ A C_ ( C u. { D } ) ) ) ) $=
      ( wcel wss csn cun wa wo wb syl wi anim12d pm4.72 sylib bitrd wceq bitr3i
      a1i snssi unss bicomi rbaibr anbi1d biimpi expcom ssun3 wn cdif c0 disjsn
      cin disj3 sseq1 sylbi uncom sseq2i ssundif syl6rbbr anbi2d simplbi biimpd
      orcom syl6bb pm2.61i ) DAEZBAFZACDGZHZFZIZVHACFZIZBVIHAFZVKIZJZKVGVLVPVQV
      GVHVOVKVGVIAFZVHVOKDAUAZVOVHVRVHVRIZVOBVIAUBZUCZUDLUEVGVNVPMVPVQKVGVHVOVM
      VKVGVRVHVOMVSVHVRVOVTVOWAUFUGLVMVKMVGACVIUHTNVNVPOPQVGUIZVLVNVQWCVKVMVHWC
      VMAVIUJZCFZVKWCAWDRZVMWEKWCAVIUMUKRWFADULAVIUNSAWDCUOUPVKAVICHZFWEWGVJAVI
      CUQURAVICUSSUTZVAWCVNVPVNJZVQWCVPVNMVNWIKWCVOVHVKVMVOVHMWCVOVHVRWBVBTWCVK
      VMWHVCNVPVNOPVPVNVDVEQVF $.

    $( Possible values for a set sandwiched between another set and it plus a
       singleton.  (Contributed by Mario Carneiro, 2-Jul-2016.) $)
    ssunsn $p |- ( ( B C_ A /\ A C_ ( B u. { C } ) )
        <-> ( A = B \/ A = ( B u. { C } ) ) ) $=
      ( wss csn cun wa wo wceq ssunsn2 ancom eqss bitr4i orbi12i bitri ) BADZAB
      CEFZDZGPABDZGZQADZRGZHABIZAQIZHABBCJTUCUBUDTSPGUCPSKABLMUBRUAGUDUARKAQLMN
      O $.

    $( Two ways to express that a nonempty set equals a singleton.
       (Contributed by NM, 15-Dec-2007.) $)
    eqsn $p |- ( A =/= (/) -> ( A = { B } <-> A. x e. A x = B ) ) $=
      ( c0 wne csn wceq wss cv wral eqimss wn df-ne wo sssn biimpi syl5bi com12
      ord impbid2 wcel dfss3 elsn ralbii bitri syl6bb ) BDEZBCFZGZBUHHZAIZCGZAB
      JZUGUIUJBUHKUJUGUIUGBDGZLUJUIBDMUJUNUIUJUNUINBCOPSQRTUJUKUHUAZABJUMABUHUB
      UOULABACUCUDUEUF $.
  $}

  ${
    $( Possible values for a set sandwiched between another set and it plus a
       singleton.  (Contributed by Mario Carneiro, 2-Jul-2016.) $)
    ssunpr $p |- ( ( B C_ A /\ A C_ ( B u. { C , D } ) )
        <-> ( ( A = B \/ A = ( B u. { C } ) ) \/
          ( A = ( B u. { D } ) \/ A = ( B u. { C , D } ) ) ) ) $=
      ( wss cpr cun wa csn wceq df-pr uneq2i unass eqtr4i sseq2i anbi2i ssunsn2
      wo ssunsn 3bitri un23 eqtr2i eqeq2i orbi2i orbi12i ) BAEZABCDFZGZEZHUFABC
      IZGZDIZGZEZHUFAUKEHZBULGZAEZUNHZRABJAUKJRZAUPJZAUHJZRZRUIUNUFUHUMAUHBUJUL
      GZGUMUGVCBCDKLBUJULMNZOPABUKDQUOUSURVBABCSURUQAUPUJGZEZHUTAVEJZRVBUNVFUQU
      MVEABUJULUAZOPAUPCSVGVAUTVEUHAUHUMVEVDVHUBUCUDTUET $.

    $( The subsets of a pair.  (Contributed by NM, 16-Mar-2006.)  (Proof
       shortened by Mario Carneiro, 2-Jul-2016.) $)
    sspr $p |- ( A C_ { B , C }
        <-> ( ( A = (/) \/ A = { B } ) \/ ( A = { C } \/ A = { B , C } ) ) ) $=
      ( cpr wss c0 cun wa wceq csn wo uncom eqtri sseq2i biantrur bitr3i eqeq2i
      un0 0ss orbi12i ssunpr orbi2i 3bitri ) ABCDZEZFAEZAFUDGZEZHZAFIZAFBJZGZIZ
      KZAFCJZGZIZAUGIZKZKUJAUKIZKZAUOIZAUDIZKZKUEUHUIUGUDAUGUDFGUDFUDLUDRMZNUFU
      HASOPAFBCUAUNVAUSVDUMUTUJULUKAULUKFGUKFUKLUKRMQUBUQVBURVCUPUOAUPUOFGUOFUO
      LUORMQUGUDAVEQTTUC $.

    $( The subsets of a triple.  (Contributed by Mario Carneiro,
       2-Jul-2016.) $)
    sstp $p |- ( A C_ { B , C , D }
        <-> ( ( ( A = (/) \/ A = { B } ) \/ ( A = { C } \/ A = { B , C } ) ) \/
          ( ( A = { D } \/ A = { B , D } ) \/
            ( A = { C , D } \/ A = { B , C , D } ) ) ) ) $=
      ( wss cpr csn cun c0 wa wceq wo sseq2i biantrur uncom df-pr eqtr4i eqeq2i
      orbi12i 3bitri ctp df-tp 0ss ssunsn2 sspr bitr3i un0 eqtri sseq1i anbi12i
      ssunpr orbi2i eqtr2i bitri ) ABCDUAZEABCFZDGZHZEZIAEZUSJZAIKABGZKLACGZKAU
      PKLLZAUQKZABDFZKZLZACDFZKZAUOKZLZLZLZUOURABCDUBZMUTUSAUCZNVAUTAUPEZJZIUQH
      ZAEZUSJZLVNAIUPDUDVRVDWAVMVRVQVDUTVQVPNABCUEUFWAUQAEZAUQUPHZEZJVEAUQVBHZK
      ZLZAUQVCHZKZAWCKZLZLVMVTWBUSWDVSUQAVSUQIHUQIUQOUQUGUHUIURWCAUPUQOZMUJAUQB
      CUKWGVHWKVLWFVGVEWEVFAWEVBUQHVFUQVBOBDPQRULWIVJWJVKWHVIAWHVCUQHVIUQVCOCDP
      QRWCUOAUOURWCVOWLUMRSSTSUNT $.
  $}

  ${
    $d A x $.  $d B x $.  $d C x $.  $d D x $.
    tpss.1 $e |- A e. _V $.
    tpss.2 $e |- B e. _V $.
    tpss.3 $e |- C e. _V $.
    $( A triplet of elements of a class is a subset of the class.  (Contributed
       by NM, 9-Apr-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    tpss $p |- ( ( A e. D /\ B e. D /\ C e. D ) <-> { A , B , C } C_ D ) $=
      ( cpr wss csn wa cun wcel w3a ctp unss df-3an prss snss anbi12i 3bitr4i
      bitri df-tp sseq1i ) ABHZDIZCJZDIZKZUEUGLZDIADMZBDMZCDMZNZABCOZDIUEUGDPUN
      UKULKZUMKUIUKULUMQUPUFUMUHABDEFRCDGSTUBUOUJDABCUCUDUA $.
  $}

  $( A triple of elements of a class is a subset of the class.  (Contributed by
     Alexander van der Vekens, 1-Feb-2018.) $)
  tpssi $p |- ( ( A e. D /\ B e. D /\ C e. D ) -> { A , B , C } C_ D ) $=
    ( w3a ctp cpr csn cun df-tp wss prssi 3adant3 snssi 3ad2ant3 unssd syl5eqss
    wcel ) ADRZBDRZCDRZEZABCFABGZCHZIDABCJUBUCUDDSTUCDKUAABDLMUASUDDKTCDNOPQ $.

  ${
    sneqr.1 $e |- A e. _V $.
    $( If the singletons of two sets are equal, the two sets are equal.  Part
       of Exercise 4 of [TakeutiZaring] p. 15.  (Contributed by NM,
       27-Aug-1993.) $)
    sneqr $p |- ( { A } = { B } -> A = B ) $=
      ( csn wceq wcel snid eleq2 mpbii elsnc sylib ) ADZBDZEZAMFZABENALFOACGLMA
      HIABCJK $.

    $( If a singleton is a subset of another, their members are equal.
       (Contributed by NM, 28-May-2006.) $)
    snsssn $p |- ( { A } C_ { B } -> A = B ) $=
      ( csn wss c0 wceq wo sssn snnz neii pm2.21i sneqr jaoi sylbi ) ADZBDZEPFG
      ZPQGZHABGZPBIRTSRTPFACJKLABCMNO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Closed form of ~ sneqr .  (Contributed by Scott Fenton, 1-Apr-2011.) $)
    sneqrg $p |- ( A e. V -> ( { A } = { B } -> A = B ) ) $=
      ( vx cv csn wceq wi sneq eqeq1d eqeq1 imbi12d vex sneqr vtoclg ) DEZFZBFZ
      GZPBGZHAFZRGZABGZHDACPAGZSUBTUCUDQUARPAIJPABKLPBDMNO $.
  $}

  $( Two singletons of sets are equal iff their elements are equal.
     (Contributed by Scott Fenton, 16-Apr-2012.) $)
  sneqbg $p |- ( A e. V -> ( { A } = { B } <-> A = B ) ) $=
    ( wcel csn wceq sneqrg sneq impbid1 ) ACDAEBEFABFABCGABHI $.

  ${
    $d x A $.
    $( The singleton of a class is a subset of its power class.  (Contributed
       by NM, 21-Jun-1993.) $)
    snsspw $p |- { A } C_ ~P A $=
      ( vx csn cpw cv wceq wss wcel eqimss elsn selpw 3imtr4i ssriv ) BACZADZBE
      ZAFPAGPNHPOHPAIBAJBAKLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    prsspw.1 $e |- A e. _V $.
    prsspw.2 $e |- B e. _V $.
    $( An unordered pair belongs to the power class of a class iff each member
       belongs to the class.  (Contributed by NM, 10-Dec-2003.)  (Proof
       shortened by OpenAI, 25-Mar-2020.) $)
    prsspw $p |- ( { A , B } C_ ~P C <-> ( A C_ C /\ B C_ C ) ) $=
      ( cvv wcel cpr cpw wss wa wb prsspwg mp2an ) AFGBFGABHCIJACJBCJKLDEABCFFM
      N $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    prsspwOLD.1 $e |- A e. _V $.
    prsspwOLD.2 $e |- B e. _V $.
    $( An unordered pair belongs to the power class of a class iff each member
       belongs to the class.  (Contributed by NM, 10-Dec-2003.)  (Proof
       shortened by Andrew Salmon, 26-Jun-2011.)  Obsolete version of ~ prsspw
       as of 25-Mar-2020.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    prsspwOLD $p |- ( { A , B } C_ ~P C <-> ( A C_ C /\ B C_ C ) ) $=
      ( cpr cpw wss wcel wa prss elpw anbi12i bitr3i ) ABFCGZHAOIZBOIZJACHZBCHZ
      JABODEKPRQSACDLBCELMN $.
  $}

  ${
    preqr1.1 $e |- A e. _V $.
    preqr1.2 $e |- B e. _V $.
    $( Reverse equality lemma for unordered pairs.  If two unordered pairs have
       the same second element, the first elements are equal.  (Contributed by
       NM, 18-Oct-1995.) $)
    preqr1 $p |- ( { A , C } = { B , C } -> A = B ) $=
      ( cpr wceq wcel wo prid1 eleq2 mpbii elpr sylib mpbiri eqcom eqeq2 oplem1
      ) ACFZBCFZGZABGZACGZBAGZBCGZUAATHZUBUCIUAASHUFACDJSTAKLABCDMNUABSHZUDUEIU
      AUGBTHBCEJSTBKOBACEMNABPACBQR $.
  $}

  ${
    preqr2.1 $e |- A e. _V $.
    preqr2.2 $e |- B e. _V $.
    $( Reverse equality lemma for unordered pairs.  If two unordered pairs have
       the same first element, the second elements are equal.  (Contributed by
       NM, 15-Jul-1993.) $)
    preqr2 $p |- ( { C , A } = { C , B } -> A = B ) $=
      ( cpr wceq prcom eqeq12i preqr1 sylbi ) CAFZCBFZGACFZBCFZGABGLNMOCAHCBHIA
      BCDEJK $.
  $}

  ${
    preq12b.1 $e |- A e. _V $.
    preq12b.2 $e |- B e. _V $.
    preq12b.3 $e |- C e. _V $.
    preq12b.4 $e |- D e. _V $.
    $( Equality relationship for two unordered pairs.  (Contributed by NM,
       17-Oct-1996.) $)
    preq12b $p |- ( { A , B } = { C , D } <->
                   ( ( A = C /\ B = D ) \/ ( A = D /\ B = C ) ) ) $=
      ( cpr wceq wa wo wcel preq1 eqeq1d preqr2 syl6bi com12 ancld prcom eqeq2i
      prid1 eleq2 mpbii elpr sylib wi sylbi orim12d preq12 syl6eq sylan9eq jaoi
      mpd impbii ) ABIZCDIZJZACJZBDJZKZADJZBCJZKZLZURUSVBLZVEURAUQMZVFURAUPMVGA
      BEUBUPUQAUCUDACDEUEUFURUSVAVBVDURUSUTUSURUTUSURCBIZUQJUTUSUPVHUQACBNOBDCF
      HPQRSURVBVCURUPDCIZJZVBVCUGUQVIUPCDTUAVBVJVCVBVJDBIZVIJVCVBUPVKVIADBNZOBC
      DFGPQRUHSUIUNVAURVDABCDUJVBVCUPBDIZUQVBUPVKVMVLDBTUKBCDNULUMUO $.

    $( Equality of two unordered pairs.  (Contributed by NM, 17-Oct-1996.) $)
    prel12 $p |- ( -. A = B -> ( { A , B } = { C , D } <->
                   ( A e. { C , D } /\ B e. { C , D } ) ) ) $=
      ( wceq wn cpr wcel wa eleq2 mpbii wo wi elpr eqeq2 notbid prid1 prid2 jca
      orel2 syl6bi com3l imp ancrd orel1 orim12d orcom bitri preq12b 3imtr4g ex
      syl5bi impd impbid2 ) ABIZJZABKZCDKZIZAVBLZBVBLZMVCVDVEVCAVALVDABEUAVAVBA
      NOVCBVALVEABFUBVAVBBNOUCUTVDVEVCVDACIZADIZPZUTVEVCQZACDERUTVHVIUTVHMZBDIZ
      BCIZPZVFVKMZVGVLMZPVEVCVJVKVNVLVOVJVKVFUTVHVKVFQVKUTVHVFVKUTVGJVHVFQVKUSV
      GBDASTVGVFUDUEUFUGUHVJVLVGUTVHVLVGQVLUTVHVGVLUTVFJVHVGQVLUSVFBCASTVFVGUIU
      EUFUGUHUJVEVLVKPVMBCDFRVLVKUKULABCDEFGHUMUNUOUPUQUR $.

    $( A way to represent ordered pairs using unordered pairs with distinct
       members.  (Contributed by NM, 27-Mar-2007.) $)
    opthpr $p |- ( A =/= D ->
                 ( { A , B } = { C , D } <-> ( A = C /\ B = D ) ) ) $=
      ( cpr wceq wa wo wne preq12b idd wn wi df-ne pm2.21 sylbi impd orc syl5bb
      jaod impbid1 ) ABICDIJACJBDJKZADJZBCJZKZLZADMZUFABCDEFGHNUKUJUFUKUFUFUIUK
      UFOUKUGUHUFUKUGPUGUHUFQZQADRUGULSTUAUDUFUIUBUEUC $.
  $}

  ${
    $d A x y z w $.  $d B x y z w $.  $d C x y z w $.  $d D x y z w $.
    $d V x y z w $.  $d W x y z w $.  $d X x y z w $.  $d Y x y z w $.
    $( Closed form of ~ preq12b .  (Contributed by Scott Fenton,
       28-Mar-2014.) $)
    preq12bg $p |- ( ( ( A e. V /\ B e. W ) /\ ( C e. X /\ D e. Y ) ) ->
       ( { A , B } = { C , D } <->
         ( ( A = C /\ B = D ) \/ ( A = D /\ B = C ) ) ) ) $=
      ( vx vy vz vw wcel wa cpr wceq wo wb wi cv weq preq1 eqeq1d eqeq1 orbi12d
      anbi1d bibi12d imbi2d preq2 anbi2d eqeq2 w3a vex preq12b vtoclbg vtocl3ga
      eqeq2d a1i 3expa impr ) AEMZBFMZNCGMZDHMZABOZCDOZPZACPZBDPZNZADPZBCPZNZQZ
      RZVAVBVCVDVOSZVDITZJTZOZKTZDOZPZIKUAZVRDPZNZVQDPZJKUAZNZQZRZSZVDAVROZWAPZ
      AVTPZWDNZVKWGNZQZRZSVDVEWAPZWNVINZVKBVTPZNZQZRZSVPIJKABCEFGVQAPZWJWRVDXEW
      BWMWIWQXEVSWLWAVQAVRUBUCXEWEWOWHWPXEWCWNWDVQAVTUDUFXEWFVKWGVQADUDUFUEUGUH
      VRBPZWRXDVDXFWMWSWQXCXFWLVEWAVRBAUIUCXFWOWTWPXBXFWDVIWNVRBDUDUJXFWGXAVKVR
      BVTUDUJUEUGUHVTCPZXDVOVDXGWSVGXCVNXGWAVFVEVTCDUBUQXGWTVJXBVMXGWNVHVIVTCAU
      KUFXGXAVLVKVTCBUKUJUEUGUHWKVQEMVRFMVTGMULVSVTLTZOZPWCJLUAZNZILUAZWGNZQWBW
      ILDHXHDPZXIWAVSXHDVTUIUQXNXKWEXMWHXNXJWDWCXHDVRUKUJXNXLWFWGXHDVQUKUFUEVQV
      RVTXHIUMJUMKUMLUMUNUOURUPUSUT $.

    $( Closed form of ~ prel12 .  (Contributed by AV, 9-Dec-2018.) $)
    prel12g $p |- ( ( ( A e. V /\ B e. W ) /\ ( C e. X /\ D e. Y ) ) ->
       ( -. A = B -> ( { A , B } = { C , D } <->
                   ( A e. { C , D } /\ B e. { C , D } ) ) ) ) $=
      ( vx vy wcel wa wceq cpr wb wi cv bibi12d imbi2d eleq2d vz vw eqeq1 preq1
      wn weq notbid eqeq1d eleq1 anbi1d imbi12d eqeq2 anbi2d eqeq2d anbi12d w3a
      preq2 vex prel12 vtoclg a1i vtocl3ga 3expa impr ) AEKZBFKZLCGKZDHKZABMZUE
      ZABNZCDNZMZAVLKZBVLKZLZOZPZVEVFVGVHVRPZVHIJUFZUEZIQZJQZNZUAQZDNZMZWBWFKZW
      CWFKZLZOZPZPZVHAWCMZUEZAWCNZWFMZAWFKZWILZOZPZPVHVJVKWFMZWRBWFKZLZOZPZPVSI
      JUAABCEFGWBAMZWLXAVHXGWAWOWKWTXGVTWNWBAWCUCUGXGWGWQWJWSXGWDWPWFWBAWCUDUHX
      GWHWRWIWBAWFUIUJRUKSWCBMZXAXFVHXHWOVJWTXEXHWNVIWCBAULUGXHWQXBWSXDXHWPVKWF
      WCBAUQUHXHWIXCWRWCBWFUIUMRUKSWECMZXFVRVHXIXEVQVJXIXBVMXDVPXIWFVLVKWECDUDZ
      UNXIWRVNXCVOXIWFVLAXJTXIWFVLBXJTUORSSWMWBEKWCFKWEGKUPWAWDWEUBQZNZMZWBXLKZ
      WCXLKZLZOZPWLUBDHXKDMZXQWKWAXRXMWGXPWJXRXLWFWDXKDWEUQZUNXRXNWHXOWIXRXLWFW
      BXSTXRXLWFWCXSTUORSWBWCWEXKIURJURUAURUBURUSUTVAVBVCVD $.
  $}

  $( Two pairs are not equal if at least one element of the first pair is not
     contained in the second pair.  (Contributed by Alexander van der Vekens,
     13-Aug-2017.) $)
  prneimg $p |- ( ( ( A e. U /\ B e. V ) /\ ( C e. X /\ D e. Y ) )
                  -> ( ( ( A =/= C /\ A =/= D ) \/ ( B =/= C /\ B =/= D ) )
                       -> { A , B } =/= { C , D } ) ) $=
    ( wcel wa wne wo cpr wceq wn ianor nne orbi12i bitr2i syl6ib preq12bg orddi
    simpll pm1.4 ad2antll jca sylbi syl6bi anbi12i pm4.56 necon2ad ) AEIBFIJCGI
    DHIJJZACKZADKZJZBCKZBDKZJZLZABMZCDMZULUTVANZUOOZUROZJZUSOULVBACNZADNZLZBCNZ
    BDNZLZJZVEULVBVFVJJVGVIJLZVLABCDEFGHUAVMVHVFVILZJZVJVGLZVJVILZJZJZVLVFVJVGV
    IUBVSVHVKVHVNVRUCVQVKVOVPVJVIUDUEUFUGUHVHVCVKVDVCUMOZUNOZLVHUMUNPVTVFWAVGAC
    QADQRSVDUPOZUQOZLVKUPUQPWBVIWCVJBCQBDQRSUITUOURUJTUK $.

  $( A (proper) pair is not equal to another (maybe inproper) pair if and only
     if an element of the first pair is not contained in the second pair.
     (Contributed by Alexander van der Vekens, 16-Jan-2018.) $)
  prnebg $p |- ( ( ( A e. U /\ B e. V ) /\ ( C e. X /\ D e. Y ) /\ A =/= B )
                  -> ( ( ( A =/= C /\ A =/= D ) \/ ( B =/= C /\ B =/= D ) )
                       <-> { A , B } =/= { C , D } ) ) $=
    ( wcel wa wne wo cpr wi wn wceq ianor nne bitri jaoi prneimg ioran eqneqall
    w3a 3adant3 orbi12i anbi12i anddi eqtr3 syl preq12 a1d prcom com12 3ad2ant3
    syl6eq syl5bi necon1ad impbid ) AEIBFIJZCGIDHIJZABKZUDZACKZADKZJZBCKZBDKZJZ
    LZABMZCDMZKZUTVAVJVMNVBABCDEFGHUAUEVCVJVKVLVJOZACPZADPZLZBCPZBDPZLZJZVCVKVL
    PZVNVFOZVIOZJWAVFVIUBWCVQWDVTWCVDOZVEOZLVQVDVEQWEVOWFVPACRADRUFSWDVGOZVHOZL
    VTVGVHQWGVRWHVSBCRBDRUFSUGSWAVOVRJZVOVSJZLZVPVRJZVPVSJZLZLZVCWBVOVPVRVSUHVB
    UTWOWBNVAWOVBWBWKVBWBNZWNWIWPWJWIABPZWPABCUIWBABUCZUJWJWBVBABCDUKULTWLWPWMW
    LWBVBWLVKDCMVLABDCUKDCUMUPULWMWQWPABDUIWRUJTTUNUOUQUQURUS $.

  ${
    preqsn.1 $e |- A e. _V $.
    preqsn.2 $e |- B e. _V $.
    preqsn.3 $e |- C e. _V $.
    $( Equivalence for a pair equal to a singleton.  (Contributed by NM,
       3-Jun-2008.) $)
    preqsn $p |- ( { A , B } = { C } <-> ( A = B /\ B = C ) ) $=
      ( cpr csn wceq wa dfsn2 eqeq2i preq12b oridm eqtr3 simpr jca eqtr bitri
      wo impbii ) ABGZCHZIUBCCGZIZABIZBCIZJZUCUDUBCKLUEACIZUGJZUJTZUHABCCDEFFMU
      KUJUHUJNUJUHUJUFUGABCOUIUGPQUHUIUGABCRUFUGPQUASSS $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Rewrite ~ df-op using ` if ` .  When both arguments are sets, it reduces
       to the standard Kuratowski definition; otherwise, it is defined to be
       the empty set.  Avoid directly depending on this detail so that theorems
       will not depend on the Kuratowski construction.  (Contributed by Mario
       Carneiro, 26-Apr-2015.)  (Avoid depending on this detail.) $)
    dfopif $p |- <. A , B >. =
      if ( ( A e. _V /\ B e. _V ) , { { A } , { A , B } } , (/) ) $=
      ( vx cop cvv wcel cv csn cpr w3a cab wa c0 df-op df-3an abbii wceq iftrue
      cif ibar abbi2dv eqtr2d wss pm2.21 adantrd abssdv ss0 syl iffalse pm2.61i
      wn eqtr4d 3eqtri ) ABDAEFZBEFZCGZAHABIIZFZJZCKUNUOLZURLZCKZUTUQMSZCABNUSV
      ACUNUOUROPUTVBVCQUTVCUQVBUTUQMRUTVACUQUTURTUAUBUTUKZVBMVCVDVBMUCVBMQVDVAC
      MVDUTUPMFZURUTVEUDUEUFVBUGUHUTUQMUIULUJUM $.
  $}

  $( Value of the ordered pair when the arguments are sets.  (Contributed by
     Mario Carneiro, 26-Apr-2015.)  (Avoid depending on this detail.) $)
  dfopg $p |- ( ( A e. V /\ B e. W ) ->
    <. A , B >. = { { A } , { A , B } } ) $=
    ( wcel cvv cop csn cpr wceq elex wa c0 cif dfopif iftrue syl5eq syl2an ) AC
    EAFEZBFEZABGZAHABIIZJBDEACKBDKSTLZUAUCUBMNUBABOUCUBMPQR $.

  ${
    dfop.1 $e |- A e. _V $.
    dfop.2 $e |- B e. _V $.
    $( Value of an ordered pair when the arguments are sets, with the
       conclusion corresponding to Kuratowski's original definition.
       (Contributed by NM, 25-Jun-1998.)  (Avoid depending on this detail.) $)
    dfop $p |- <. A , B >. = { { A } , { A , B } } $=
      ( cvv wcel cop csn cpr wceq dfopg mp2an ) AEFBEFABGAHABIIJCDABEEKL $.
  $}

  $( Equality theorem for ordered pairs.  (Contributed by NM, 25-Jun-1998.)
     (Revised by Mario Carneiro, 26-Apr-2015.) $)
  opeq1 $p |- ( A = B -> <. A , C >. = <. B , C >. ) $=
    ( wceq cvv wcel wa csn cpr cif cop eleq1 anbi1d sneq preq1 preq12d ifbieq1d
    c0 dfopif 3eqtr4g ) ABDZAEFZCEFZGZAHZACIZIZRJBEFZUCGZBHZBCIZIZRJACKBCKUAUDU
    IUGULRUAUBUHUCABELMUAUEUJUFUKABNABCOPQACSBCST $.

  $( Equality theorem for ordered pairs.  (Contributed by NM, 25-Jun-1998.)
     (Revised by Mario Carneiro, 26-Apr-2015.) $)
  opeq2 $p |- ( A = B -> <. C , A >. = <. C , B >. ) $=
    ( wceq cvv wcel wa csn cpr c0 cif eleq1 anbi2d preq2 preq2d ifbieq1d dfopif
    cop 3eqtr4g ) ABDZCEFZAEFZGZCHZCAIZIZJKUABEFZGZUDCBIZIZJKCARCBRTUCUHUFUJJTU
    BUGUAABELMTUEUIUDABCNOPCAQCBQS $.

  $( Equality theorem for ordered pairs.  (Contributed by NM, 28-May-1995.) $)
  opeq12 $p |- ( ( A = C /\ B = D ) -> <. A , B >. = <. C , D >. ) $=
    ( wceq cop opeq1 opeq2 sylan9eq ) ACEBDEABFCBFCDFACBGBDCHI $.

  ${
    opeq1i.1 $e |- A = B $.
    $( Equality inference for ordered pairs.  (Contributed by NM,
       16-Dec-2006.) $)
    opeq1i $p |- <. A , C >. = <. B , C >. $=
      ( wceq cop opeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for ordered pairs.  (Contributed by NM,
       16-Dec-2006.) $)
    opeq2i $p |- <. C , A >. = <. C , B >. $=
      ( wceq cop opeq2 ax-mp ) ABECAFCBFEDABCGH $.

    ${
      opeq12i.2 $e |- C = D $.
      $( Equality inference for ordered pairs.  (Contributed by NM,
         16-Dec-2006.)  (Proof shortened by Eric Schmidt, 4-Apr-2007.) $)
      opeq12i $p |- <. A , C >. = <. B , D >. $=
        ( wceq cop opeq12 mp2an ) ABGCDGACHBDHGEFACBDIJ $.
    $}
  $}

  ${
    opeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for ordered pairs.  (Contributed by NM,
       16-Dec-2006.) $)
    opeq1d $p |- ( ph -> <. A , C >. = <. B , C >. ) $=
      ( wceq cop opeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for ordered pairs.  (Contributed by NM,
       16-Dec-2006.) $)
    opeq2d $p |- ( ph -> <. C , A >. = <. C , B >. ) $=
      ( wceq cop opeq2 syl ) ABCFDBGDCGFEBCDHI $.

    opeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for ordered pairs.  (Contributed by NM,
       16-Dec-2006.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    opeq12d $p |- ( ph -> <. A , C >. = <. B , D >. ) $=
      ( wceq cop opeq12 syl2anc ) ABCHDEHBDICEIHFGBDCEJK $.
  $}

  $( Equality theorem for ordered triples.  (Contributed by NM, 3-Apr-2015.) $)
  oteq1 $p |- ( A = B -> <. A , C , D >. = <. B , C , D >. ) $=
    ( wceq cop cotp opeq1 opeq1d df-ot 3eqtr4g ) ABEZACFZDFBCFZDFACDGBCDGLMNDAB
    CHIACDJBCDJK $.

  $( Equality theorem for ordered triples.  (Contributed by NM, 3-Apr-2015.) $)
  oteq2 $p |- ( A = B -> <. C , A , D >. = <. C , B , D >. ) $=
    ( wceq cop cotp opeq2 opeq1d df-ot 3eqtr4g ) ABEZCAFZDFCBFZDFCADGCBDGLMNDAB
    CHICADJCBDJK $.

  $( Equality theorem for ordered triples.  (Contributed by NM, 3-Apr-2015.) $)
  oteq3 $p |- ( A = B -> <. C , D , A >. = <. C , D , B >. ) $=
    ( wceq cop cotp opeq2 df-ot 3eqtr4g ) ABECDFZAFKBFCDAGCDBGABKHCDAICDBIJ $.

  ${
    oteq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for ordered triples.  (Contributed by Mario Carneiro,
       11-Jan-2017.) $)
    oteq1d $p |- ( ph -> <. A , C , D >. = <. B , C , D >. ) $=
      ( wceq cotp oteq1 syl ) ABCGBDEHCDEHGFBCDEIJ $.

    $( Equality deduction for ordered triples.  (Contributed by Mario Carneiro,
       11-Jan-2017.) $)
    oteq2d $p |- ( ph -> <. C , A , D >. = <. C , B , D >. ) $=
      ( wceq cotp oteq2 syl ) ABCGDBEHDCEHGFBCDEIJ $.

    $( Equality deduction for ordered triples.  (Contributed by Mario Carneiro,
       11-Jan-2017.) $)
    oteq3d $p |- ( ph -> <. C , D , A >. = <. C , D , B >. ) $=
      ( wceq cotp oteq3 syl ) ABCGDEBHDECHGFBCDEIJ $.

    oteq123d.2 $e |- ( ph -> C = D ) $.
    oteq123d.3 $e |- ( ph -> E = F ) $.
    $( Equality deduction for ordered triples.  (Contributed by Mario Carneiro,
       11-Jan-2017.) $)
    oteq123d $p |- ( ph -> <. A , C , E >. = <. B , D , F >. ) $=
      ( cotp oteq1d oteq2d oteq3d 3eqtrd ) ABDFKCDFKCEFKCEGKABCDFHLADECFIMAFGCE
      JNO $.
  $}

  ${
    nfop.1 $e |- F/_ x A $.
    nfop.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for ordered pairs.  (Contributed by
       NM, 14-Nov-1995.) $)
    nfop $p |- F/_ x <. A , B >. $=
      ( cop cvv wcel wa csn cpr c0 cif dfopif nfel1 nfan nfsn nfpr nfcv nfif
      nfcxfr ) ABCFBGHZCGHZIZBJZBCKZKZLMBCNUDAUGLUBUCAABGDOACGEOPAUEUFABDQABCDE
      RRALSTUA $.
  $}

  ${
    $d z B $.  $d z A $.  $d x z $.
    nfopd.2 $e |- ( ph -> F/_ x A ) $.
    nfopd.3 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of bound-variable hypothesis builder ~ nfop .  This
       shows how the deduction version of a not-free theorem such as ~ nfop can
       be created from the corresponding not-free inference theorem.
       (Contributed by NM, 4-Feb-2008.) $)
    nfopd $p |- ( ph -> F/_ x <. A , B >. ) $=
      ( vz cv wcel wal cab cop wnfc nfaba1 nfop wb wa nfnfc1 wceq abidnf adantr
      nfan adantl opeq12d nfceqdf syl2anc mpbii ) ABGHZCIZBJGKZUHDIZBJGKZLZMZBC
      DLZMZBUJULUIBGNUKBGNOABCMZBDMZUNUPPEFUQURQZBUMUOUQURBBCRBDRUBUSUJCULDUQUJ
      CSURBGCTUAURULDSUQBGDTUCUDUEUFUG $.
  $}

  ${
    $d x A $.
    $( Distribution of class substitution over ordered pairs.  (Contributed by
       Drahflow, 25-Sep-2015.)  (Revised by Mario Carneiro, 29-Oct-2015.) $)
    csbopg $p |- ( A e. _V -> [_ A / x ]_ <. C , D >. =
                           <. [_ A / x ]_ C , [_ A / x ]_ D >. ) $=
      ( cop csb cvv wnfc wcel nfcsb1v nfop a1i cv wceq csbeq1a opeq12d csbiegf
      ) ABCDEABCFZABDFZEZGATHBGIARSABCJABDJKLAMBNCRDSABCOABDOPQ $.
  $}

  ${
    opid.1 $e |- A e. _V $.
    $( The ordered pair ` <. A , A >. ` in Kuratowski's representation.
       (Contributed by FL, 28-Dec-2011.)  (Avoid depending on this detail.) $)
    opid $p |- <. A , A >. = { { A } } $=
      ( csn cpr cop dfsn2 eqcomi preq2i dfop 3eqtr4i ) ACZAADZDKKDAAEKCLKKKLAFG
      HAABBIKFJ $.
  $}

  ${
    $d B x $.  $d ps x $.
    ralunsn.1 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( Restricted quantification over the union of a set and a singleton, using
       implicit substitution.  (Contributed by Paul Chapman, 17-Nov-2012.)
       (Revised by Mario Carneiro, 23-Apr-2015.) $)
    ralunsn $p |- ( B e. C -> ( A. x e. ( A u. { B } ) ph <->
                                ( A. x e. A ph /\ ps ) ) ) $=
      ( csn cun wral wa wcel ralunb ralsng anbi2d syl5bb ) ACDEHZIJACDJZACQJZKE
      FLZRBKACDQMTSBRABCEFGNOP $.
  $}

  ${
    $d A x $.  $d B x y $.  $d C x $.  $d ch x $.  $d ps y $.  $d th x $.
    2ralunsn.1 $e |- ( x = B -> ( ph <-> ch ) ) $.
    2ralunsn.2 $e |- ( y = B -> ( ph <-> ps ) ) $.
    2ralunsn.3 $e |- ( x = B -> ( ps <-> th ) ) $.
    $( Double restricted quantification over the union of a set and a
       singleton, using implicit substitution.  (Contributed by Paul Chapman,
       17-Nov-2012.) $)
    2ralunsn $p |- ( B e. C ->
                     ( A. x e. ( A u. { B } ) A. y e. ( A u. { B } ) ph <->
                       ( ( A. x e. A A. y e. A ph /\ A. x e. A ps ) /\
                         ( A. y e. A ch /\ th ) ) ) ) $=
      ( wcel csn cun wral wa ralunsn ralbidv cv wceq r19.26 anbi1i syl6bb bitrd
      anbi12d ) HIMZAFGHNOZPZEUHPAFGPZBQZEUHPZUJEGPBEGPQZCFGPZDQZQZUGUIUKEUHABF
      GHIKRSUGULUKEGPZUOQUPUKUOEGHIETHUAZUJUNBDURACFGJSLUFRUQUMUOUJBEGUBUCUDUE
      $.
  $}

  $( Expansion of an ordered pair when either member is a proper class.
     (Contributed by Mario Carneiro, 26-Apr-2015.) $)
  opprc $p |- ( -. ( A e. _V /\ B e. _V ) -> <. A , B >. = (/) ) $=
    ( cvv wcel wa wn cop csn cpr c0 cif dfopif iffalse syl5eq ) ACDBCDEZFABGOAH
    ABIIZJKJABLOPJMN $.

  $( Expansion of an ordered pair when the first member is a proper class.  See
     also ~ opprc .  (Contributed by NM, 10-Apr-2004.)  (Revised by Mario
     Carneiro, 26-Apr-2015.) $)
  opprc1 $p |- ( -. A e. _V -> <. A , B >. = (/) ) $=
    ( cvv wcel wn wa cop c0 wceq simpl con3i opprc syl ) ACDZENBCDZFZEABGHIPNNO
    JKABLM $.

  $( Expansion of an ordered pair when the second member is a proper class.
     See also ~ opprc .  (Contributed by NM, 15-Nov-1994.)  (Revised by Mario
     Carneiro, 26-Apr-2015.) $)
  opprc2 $p |- ( -. B e. _V -> <. A , B >. = (/) ) $=
    ( cvv wcel wn wa cop c0 wceq simpr con3i opprc syl ) BCDZEACDZNFZEABGHIPNON
    JKABLM $.

  $( If an ordered pair has an element, then its arguments are sets.
     (Contributed by Mario Carneiro, 26-Apr-2015.) $)
  oprcl $p |- ( C e. <. A , B >. -> ( A e. _V /\ B e. _V ) ) $=
    ( cop wcel c0 wceq cvv wa n0i opprc nsyl2 ) CABDZEMFGAHEBHEIMCJABKL $.

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( The power set of a singleton.  (Contributed by NM, 5-Jun-2006.) $)
    pwsn $p |- ~P { A } = { (/) , { A } } $=
      ( vx cv csn wss cab c0 wceq wo cpw cpr sssn abbii df-pw dfpr2 3eqtr4i ) B
      CZADZEZBFQGHQRHIZBFRJGRKSTBQALMBRNBGROP $.

    $d x y $.  $d y A $.
    $( Alternate proof of ~ pwsn , more direct.  (Contributed by NM,
       5-Jun-2006.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    pwsnALT $p |- ~P { A } = { (/) , { A } } $=
      ( vx vy cv csn wss cab c0 wceq wo cpw cpr wn wa wcel wal dfss2 wex sylbi
      wi elsn imbi2i albii bitri neq0 exintr syl5bi df-clel exancom bitr2i syl6
      snssi anc2li eqss syl6ibr orrd 0ss sseq1 mpbiri eqimss impbii abbii df-pw
      jaoi dfpr2 3eqtr4i ) BDZAEZFZBGVGHIZVGVHIZJZBGVHKHVHLVIVLBVIVLVIVJVKVIVJM
      ZVIVHVGFZNVKVIVMVNVICDZVGOZVOAIZTZCPZVMVNTVIVPVOVHOZTZCPVSCVGVHQWAVRCVTVQ
      VPCAUAUBUCUDVSVMVPVQNCRZVNVMVPCRVSWBCVGUEVPVQCUFUGWBAVGOZVNWCVQVPNCRWBCAV
      GUHVQVPCUIUJAVGULSUKSUMVGVHUNUOUPVJVIVKVJVIHVHFVHUQVGHVHURUSVGVHUTVDVAVBB
      VHVCBHVHVEVF $.

    $( The power set of an unordered pair.  (Contributed by NM, 1-May-2009.) $)
    pwpr $p |- ~P { A , B } = ( { (/) , { A } } u. { { B } , { A , B } } ) $=
      ( vx cpr cpw c0 csn cun cv wss wcel wo wceq sspr vex orbi12i bitr4i selpw
      elpr elun 3bitr4i eqriv ) CABDZEZFAGZDZBGZUCDZHZCIZUCJZUJUFKZUJUHKZLZUJUD
      KUJUIKUKUJFMUJUEMLZUJUGMUJUCMLZLUNUJABNULUOUMUPUJFUECOZSUJUGUCUQSPQCUCRUJ
      UFUHTUAUB $.

    $( The power set of an unordered triple.  (Contributed by Mario Carneiro,
       2-Jul-2016.) $)
    pwtp $p |- ~P { A , B , C } =
      ( ( { (/) , { A } } u. { { B } , { A , B } } ) u.
        ( { { C } , { A , C } } u. { { B , C } , { A , B , C } } ) ) $=
      ( vx ctp cpw c0 csn cpr cun cv wcel selpw wo wceq elun elpr orbi12i bitri
      wss vex sstp 3bitr4ri eqriv ) DABCEZFZGAHZIZBHZABIZIZJZCHZACIZIZBCIZUEIZJ
      ZJZDKZUFLUTUETZUTUSLZDUEMUTULLZUTURLZNUTGOUTUGONZUTUIOUTUJONZNZUTUMOUTUNO
      NZUTUPOUTUEONZNZNVBVAVCVGVDVJVCUTUHLZUTUKLZNVGUTUHUKPVKVEVLVFUTGUGDUAZQUT
      UIUJVMQRSVDUTUOLZUTUQLZNVJUTUOUQPVNVHVOVIUTUMUNVMQUTUPUEVMQRSRUTULURPUTAB
      CUBUCSUD $.
  $}

  ${
    $d x y $.
    $( Compute the power set of the power set of the power set of the empty
       set.  (See also ~ pw0 and ~ pwpw0 .)  (Contributed by NM,
       2-May-2009.) $)
    pwpwpw0 $p |- ~P { (/) , { (/) } } =
                ( { (/) , { (/) } } u. { { { (/) } } , { (/) , { (/) } } } ) $=
      ( c0 csn pwpr ) AABC $.
  $}

  $( The power class of the universe is the universe.  Exercise 4.12(d) of
     [Mendelson] p. 235.  (Contributed by NM, 14-Sep-2003.) $)
  pwv $p |- ~P _V = _V $=
    ( vx cvv cpw cv wcel wss ssv selpw mpbir vex 2th eqriv ) ABCZBADZMEZNBEONBF
    NGABHIAJKL $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                       The union of a class
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare class union symbol. $)
  $c U. $. $( Big cup $)

  $( Extend class notation to include the union of a class (read:  'union
     ` A ` ') $)
  cuni $a class U. A $.

  ${
    $d x y A $.
    $( Define the union of a class i.e. the collection of all members of the
       members of the class.  Definition 5.5 of [TakeutiZaring] p. 16.  For
       example, ` U. { { 1 , 3 } , { 1 , 8 } } = { 1 , 3 , 8 } ` ( ~ ex-uni ).
       This is similar to the union of two classes ~ df-un .  (Contributed by
       NM, 23-Aug-1993.) $)
    df-uni $a |- U. A = { x | E. y ( x e. y /\ y e. A ) } $.
  $}

  ${
    $d x y A $.
    $( Alternate definition of class union.  (Contributed by NM,
       28-Jun-1998.) $)
    dfuni2 $p |- U. A = { x | E. y e. A x e. y } $=
      ( cuni cv wcel wa wex cab wrex df-uni exancom df-rex bitr4i abbii eqtri )
      CDAEBEZFZQCFZGBHZAIRBCJZAIABCKTUAATSRGBHUARSBLRBCMNOP $.
  $}

  ${
    $d x A y $.  $d x B y $.
    $( Membership in class union.  (Contributed by NM, 22-May-1994.) $)
    eluni $p |- ( A e. U. B <-> E. x ( A e. x /\ x e. B ) ) $=
      ( vy cuni wcel cvv cv wa wex elex adantr exlimiv wceq eleq1 anbi1d exbidv
      df-uni elab2g pm5.21nii ) BCEZFBGFZBAHZFZUCCFZIZAJZBUAKUFUBAUDUBUEBUCKLMD
      HZUCFZUEIZAJUGDBUAGUHBNZUJUFAUKUIUDUEUHBUCOPQDACRST $.

    $( Membership in class union.  Restricted quantifier version.  (Contributed
       by NM, 31-Aug-1999.) $)
    eluni2 $p |- ( A e. U. B <-> E. x e. B A e. x ) $=
      ( cv wcel wa wex cuni wrex exancom eluni df-rex 3bitr4i ) BADZEZNCEZFAGPO
      FAGBCHEOACIOPAJABCKOACLM $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( Membership in class union.  (Contributed by NM, 24-Mar-1995.) $)
    elunii $p |- ( ( A e. B /\ B e. C ) -> A e. U. C ) $=
      ( vx wcel wa cv cuni wceq eleq2 eleq1 anbi12d spcegv anabsi7 eluni sylibr
      wex ) ABEZBCEZFZADGZEZUACEZFZDQZACHERSUEUDTDBCUABIUBRUCSUABAJUABCKLMNDACO
      P $.
  $}

  ${
    $d y z A $.  $d x y z $.
    nfuni.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for union.  (Contributed by NM,
       30-Dec-1996.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    nfuni $p |- F/_ x U. A $=
      ( vy vz cuni wel wrex cab dfuni2 nfv nfrex nfab nfcxfr ) ABFDEGZEBHZDIDEB
      JPADOAEBCOAKLMN $.
  $}

  ${
    $d y z A $.  $d x y z $.  $d y z ph $.
    nfunid.3 $e |- ( ph -> F/_ x A ) $.
    $( Deduction version of ~ nfuni .  (Contributed by NM, 18-Feb-2013.) $)
    nfunid $p |- ( ph -> F/_ x U. A ) $=
      ( vy vz cuni wel wrex cab dfuni2 nfv nfvd nfrexd nfabd nfcxfrd ) ABCGEFHZ
      FCIZEJEFCKARBEAELAQBFCAFLDAQBMNOP $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Equality theorem for class union.  Exercise 15 of [TakeutiZaring]
       p. 18.  (Contributed by NM, 10-Aug-1993.)  (Proof shortened by Andrew
       Salmon, 29-Jun-2011.) $)
    unieq $p |- ( A = B -> U. A = U. B ) $=
      ( vy vx wceq wel wrex cab cuni rexeq abbidv dfuni2 3eqtr4g ) ABEZCDFZDAGZ
      CHODBGZCHAIBINPQCODABJKCDALCDBLM $.
  $}

  ${
    unieqi.1 $e |- A = B $.
    $( Inference of equality of two class unions.  (Contributed by NM,
       30-Aug-1993.) $)
    unieqi $p |- U. A = U. B $=
      ( wceq cuni unieq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    unieqd.1 $e |- ( ph -> A = B ) $.
    $( Deduction of equality of two class unions.  (Contributed by NM,
       21-Apr-1995.) $)
    unieqd $p |- ( ph -> U. A = U. B ) $=
      ( wceq cuni unieq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d x A y $.  $d ph y $.
    $( Membership in union of a class abstraction.  (Contributed by NM,
       11-Aug-1994.)  (Revised by Mario Carneiro, 14-Nov-2016.) $)
    eluniab $p |- ( A e. U. { x | ph } <-> E. x ( A e. x /\ ph ) ) $=
      ( vy cab cuni wcel cv wa wex eluni nfv nfsab1 nfan weq eleq2 eleq1 syl6bb
      abid anbi12d cbvex bitri ) CABEZFGCDHZGZUDUCGZIZDJCBHZGZAIZBJDCUCKUGUJDBU
      EUFBUEBLABDMNUJDLDBOZUEUIUFAUDUHCPUKUFUHUCGAUDUHUCQABSRTUAUB $.

    $( Membership in union of a class abstraction.  (Contributed by NM,
       4-Oct-2006.) $)
    elunirab $p |- ( A e. U. { x e. B | ph } <->
                   E. x e. B ( A e. x /\ ph ) ) $=
      ( cv wcel cab cuni wex crab wrex eluniab df-rab unieqi eleq2i df-rex an12
      wa exbii bitri 3bitr4i ) CBEZDFZARZBGZHZFCUBFZUDRZBIZCABDJZHZFUGARZBDKZUD
      BCLUKUFCUJUEABDMNOUMUCULRZBIUIULBDPUNUHBUCUGAQSTUA $.
  $}

  ${
    $d x y A $.  $d x y B $.
    unipr.1 $e |- A e. _V $.
    unipr.2 $e |- B e. _V $.
    $( The union of a pair is the union of its members.  Proposition 5.7 of
       [TakeutiZaring] p. 16.  (Contributed by NM, 23-Aug-1993.) $)
    unipr $p |- U. { A , B } = ( A u. B ) $=
      ( vx vy cv wcel wo cab cpr wa wex cun cuni wceq 19.43 bitri clel3 exancom
      vex elpr anbi2i andi exbii orbi12i 3bitr4ri abbii df-un df-uni 3eqtr4ri )
      EGZAHZULBHZIZEJULFGZHZUPABKZHZLZFMZEJABNUROUOVAEUQUPAPZLZUQUPBPZLZIZFMVCF
      MZVEFMZIVAUOVCVEFQUTVFFUTUQVBVDIZLVFUSVIUQUPABFUAUBUCUQVBVDUDRUEUMVGUNVHU
      MVBUQLFMVGFULACSVBUQFTRUNVDUQLFMVHFULBDSVDUQFTRUFUGUHEABUIEFURUJUK $.
  $}

  ${
    $d x y A $.  $d y B $.
    $( The union of a pair is the union of its members.  Proposition 5.7 of
       [TakeutiZaring] p. 16.  (Contributed by NM, 25-Aug-2006.) $)
    uniprg $p |- ( ( A e. V /\ B e. W ) -> U. { A , B } = ( A u. B ) ) $=
      ( vx vy cv cpr cuni cun wceq preq1 unieqd uneq1 eqeq12d preq2 uneq2 unipr
      vex vtocl2g ) EGZFGZHZIZUAUBJZKAUBHZIZAUBJZKABHZIZABJZKEFABCDUAAKZUDUGUEU
      HULUCUFUAAUBLMUAAUBNOUBBKZUGUJUHUKUMUFUIUBBAPMUBBAQOUAUBESFSRT $.
  $}

  ${
    unisn.1 $e |- A e. _V $.
    $( A set equals the union of its singleton.  Theorem 8.2 of [Quine] p. 53.
       (Contributed by NM, 30-Aug-1993.) $)
    unisn $p |- U. { A } = A $=
      ( csn cuni cpr cun dfsn2 unieqi unipr unidm 3eqtri ) ACZDAAEZDAAFALMAGHAA
      BBIAJK $.
  $}

  ${
    $d x A $.
    $( A set equals the union of its singleton.  Theorem 8.2 of [Quine] p. 53.
       (Contributed by NM, 13-Aug-2002.) $)
    unisng $p |- ( A e. V -> U. { A } = A ) $=
      ( vx cv csn cuni wceq sneq unieqd id eqeq12d vex unisn vtoclg ) CDZEZFZOG
      AEZFZAGCABOAGZQSOATPROAHITJKOCLMN $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Union of a singleton in the form of a restricted class abstraction.
       (Contributed by NM, 3-Jul-2008.) $)
    unisn3 $p |- ( A e. B -> U. { x e. B | x = A } = A ) $=
      ( wcel cv wceq crab cuni csn rabsn unieqd unisng eqtrd ) BCDZAEBFACGZHBIZ
      HBNOPACBJKBCLM $.
  $}

  ${
    $d x y $.  $d y A $.
    $( An alternative statement of the effective freeness of a class ` A ` ,
       when it is a set.  (Contributed by Mario Carneiro, 14-Oct-2016.) $)
    dfnfc2 $p |- ( A. x A e. V -> ( F/_ x A <-> A. y F/ x y = A ) ) $=
      ( wcel wal wnfc cv wceq wnf nfcvd id nfeqd alrimiv wa csn cuni simpr elsn
      df-nfc nfbii albii bitri sylibr nfunid nfa1 nfnf1 nfal nfan unisng adantr
      sps nfceqdf mpbid ex impbid2 ) CDEZAFZACGZBHZCIZAJZBFZUSVBBUSAUTCUSAUTKUS
      LMNURVCUSURVCOZACPZQZGUSVDAVEVDVCAVEGZURVCRVGUTVEEZAJZBFVCABVETVIVBBVHVAA
      BCSUAUBUCUDUEVDAVFCURVCAUQAUFVBABVAAUGUHUIURVFCIZVCUQVJACDUJULUKUMUNUOUP
      $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The class union of the union of two classes.  Theorem 8.3 of [Quine]
       p. 53.  (Contributed by NM, 20-Aug-1993.) $)
    uniun $p |- U. ( A u. B ) = ( U. A u. U. B ) $=
      ( vx vy cun cuni cv wcel wa wo 19.43 elun anbi2i andi bitri exbii orbi12i
      wex eluni 3bitr4i eqriv ) CABEZFZAFZBFZEZCGZDGZHZUHUBHZIZDRZUGUDHZUGUEHZJ
      ZUGUCHUGUFHUIUHAHZIZUIUHBHZIZJZDRUQDRZUSDRZJULUOUQUSDKUKUTDUKUIUPURJZIUTU
      JVCUIUHABLMUIUPURNOPUMVAUNVBDUGASDUGBSQTDUGUBSUGUDUELTUA $.

    $( The class union of the intersection of two classes.  Exercise 4.12(n) of
       [Mendelson] p. 235.  See ~ uniinqs for a condition where equality
       holds.  (Contributed by NM, 4-Dec-2003.)  (Proof shortened by Andrew
       Salmon, 29-Jun-2011.) $)
    uniin $p |- U. ( A i^i B ) C_ ( U. A i^i U. B ) $=
      ( vx vy cin cuni cv wcel wex 19.40 elin anbi2i anandi bitri exbii anbi12i
      wa eluni 3imtr4i ssriv ) CABEZFZAFZBFZEZCGZDGZHZUGUAHZQZDIZUFUCHZUFUDHZQZ
      UFUBHUFUEHUHUGAHZQZUHUGBHZQZQZDIUPDIZURDIZQUKUNUPURDJUJUSDUJUHUOUQQZQUSUI
      VBUHUGABKLUHUOUQMNOULUTUMVADUFARDUFBRPSDUFUARUFUCUDKST $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Subclass relationship for class union.  Theorem 61 of [Suppes] p. 39.
       (Contributed by NM, 22-Mar-1998.)  (Proof shortened by Andrew Salmon,
       29-Jun-2011.) $)
    uniss $p |- ( A C_ B -> U. A C_ U. B ) $=
      ( vx vy wss cuni cv wcel wa wex ssel anim2d eximdv eluni 3imtr4g ssrdv )
      ABEZCAFZBFZQCGZDGZHZUAAHZIZDJUBUABHZIZDJTRHTSHQUDUFDQUCUEUBABUAKLMDTANDTB
      NOP $.

    $( Subclass relationship for class union.  (Contributed by NM,
       24-May-1994.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.) $)
    ssuni $p |- ( ( A C_ B /\ B e. C ) -> A C_ U. C ) $=
      ( vy vx wcel wss cuni cv wi wal eleq2 imbi1d elunii expcom vtoclga imim2d
      wceq alimdv dfss2 3imtr4g impcom ) BCFZABGZACHZGZUCDIZAFZUGBFZJZDKUHUGUEF
      ZJZDKUDUFUCUJULDUCUIUKUHUGEIZFZUKJUIUKJEBCUMBRUNUIUKUMBUGLMUNUMCFUKUGUMCN
      OPQSDABTDAUETUAUB $.
  $}

  ${
    unissi.1 $e |- A C_ B $.
    $( Subclass relationship for subclass union.  Inference form of ~ uniss .
       (Contributed by David Moews, 1-May-2017.) $)
    unissi $p |- U. A C_ U. B $=
      ( wss cuni uniss ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    unissd.1 $e |- ( ph -> A C_ B ) $.
    $( Subclass relationship for subclass union.  Deduction form of ~ uniss .
       (Contributed by David Moews, 1-May-2017.) $)
    unissd $p |- ( ph -> U. A C_ U. B ) $=
      ( wss cuni uniss syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d x y A $.
    $( The union of a set is empty iff the set is included in the singleton of
       the empty set.  (Contributed by NM, 12-Sep-2004.) $)
    uni0b $p |- ( U. A = (/) <-> A C_ { (/) } ) $=
      ( vx vy cv c0 csn wcel wral wceq wss cuni elsn ralbii dfss3 wex wrex neq0
      wn rexcom4 3bitr4ri rexbii eluni2 exbii rexnal 3bitri con4bii ) BDZEFZGZB
      AHUGEIZBAHZAUHJAKZEIZUIUJBABELMBAUHNUMUKUMRCDZULGZCOZUJRZBAPZUKRCULQUNUGG
      ZCOZBAPUSBAPZCOURUPUSBCASUQUTBACUGQUAUOVACBUNAUBUCTUJBAUDUEUFT $.

    $( The union of a set is empty iff all of its members are empty.
       (Contributed by NM, 16-Aug-2006.) $)
    uni0c $p |- ( U. A = (/) <-> A. x e. A x = (/) ) $=
      ( cuni c0 wceq csn wss cv wcel wral uni0b dfss3 elsn ralbii 3bitri ) BCDE
      BDFZGAHZPIZABJQDEZABJBKABPLRSABADMNO $.
  $}

  $( The union of the empty set is the empty set.  Theorem 8.7 of [Quine]
     p. 54.  (Reproved without relying on ~ ax-nul by Eric Schmidt.)
     (Contributed by NM, 16-Sep-1993.)  (Revised by Eric Schmidt,
     4-Apr-2007.) $)
  uni0 $p |- U. (/) = (/) $=
    ( c0 cuni wceq csn wss 0ss uni0b mpbir ) ABACAADZEIFAGH $.

  ${
    $d A y z $.  $d B y z $.  $d V y z $.  $d x y z $.
    $( Distribute proper substitution through the union of a class.
       (Contributed by Alan Sare, 10-Nov-2012.)  (Revised by NM,
       22-Aug-2018.) $)
    csbuni $p |- [_ A / x ]_ U. B = U. [_ A / x ]_ B $=
      ( vz vy cvv wcel cuni csb wceq wel cv wa wex wsbc syl5bb df-uni c0 csbprc
      cab csbab sbcex2 anbi1d sbcel2 anbi2i syl6bb exbidv abbidv syl5eq csbeq2i
      sbcan sbcg 3eqtr4g wn unieqd uni0 syl6req eqtrd pm2.61i ) BFGZABCHZIZABCI
      ZHZJUTABDEKZELZCGZMZENZDTZIZVEVFVCGZMZENZDTZVBVDUTVKVIABOZDTVOVIADBUAUTVP
      VNDVPVHABOZENUTVNVHEABUBUTVQVMEVQVEABOZVGABOZMZUTVMVEVGABUKUTVTVEVSMVMUTV
      RVEVSVEABFULUCVSVLVEABVFCUDUEUFPUGPUHUIABVAVJDECQUJDEVCQUMUTUNZVBRVDABVAS
      WAVDRHRWAVCRABCSUOUPUQURUS $.
  $}

  ${
    $d A y z $.  $d B y z $.  $d V y z $.  $d x y z $.
    $( Distribute proper substitution through the union of a class.
       (Contributed by Alan Sare, 10-Nov-2012.)  Obsolete as of 22-Aug-2018.
       Use ~ csbuni instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    csbunigOLD $p |- ( A e. V -> [_ A / x ]_ U. B = U. [_ A / x ]_ B ) $=
      ( vz vy wcel cv wex cab csb cuni wsbc csbabgOLD sbcexgOLD sbcangOLD bitrd
      wa sbcg df-uni sbcel2gOLD anbi12d exbidv abbidv eqtrd csbeq2i 3eqtr4g ) B
      DGZABEHFHZGZUICGZRZFIZEJZKZUJUIABCKZGZRZFIZEJZABCLZKUPLUHUOUMABMZEJUTUMAE
      BDNUHVBUSEUHVBULABMZFIUSULFABDOUHVCURFUHVCUJABMZUKABMZRURUJUKABDPUHVDUJVE
      UQUJABDSABUICDUAUBQUCQUDUEABVAUNEFCTUFEFUPTUG $.
  $}

  $( An element of a class is a subclass of its union.  Theorem 8.6 of [Quine]
     p. 54.  Also the basis for Proposition 7.20 of [TakeutiZaring] p. 40.
     (Contributed by NM, 6-Jun-1994.) $)
  elssuni $p |- ( A e. B -> A C_ U. B ) $=
    ( wss wcel cuni ssid ssuni mpan ) AACABDABECAFAABGH $.

  $( Condition turning a subclass relationship for union into an equality.
     (Contributed by NM, 18-Jul-2006.) $)
  unissel $p |- ( ( U. A C_ B /\ B e. A ) -> U. A = B ) $=
    ( cuni wss wcel wa simpl elssuni adantl eqssd ) ACZBDZBAEZFKBLMGMBKDLBAHIJ
    $.

  ${
    $d x y A $.  $d x y B $.
    $( Relationship involving membership, subset, and union.  Exercise 5 of
       [Enderton] p. 26 and its converse.  (Contributed by NM, 20-Sep-2003.) $)
    unissb $p |- ( U. A C_ B <-> A. x e. A x C_ B ) $=
      ( vy cv cuni wcel wi wal wss wa wex eluni imbi1i 19.23v albii bitri dfss2
      wral 3bitr4i bitr4i alcom 19.21v impexp bi2.04 imbi2i df-ral ) DEZBFZGZUH
      CGZHZDIZAEZBGZUNCJZHZAIZUICJUPABSUMUHUNGZUOKZUKHZAIZDIZURULVBDULUTALZUKHV
      BUJVDUKAUHBMNUTUKAOUAPVCVADIZAIURVADAUBVEUQAUOUSUKHZHZDIUOVFDIZHVEUQUOVFD
      UCVAVGDVAUSUOUKHHVGUSUOUKUDUSUOUKUEQPUPVHUODUNCRUFTPQQDUICRUPABUGT $.
  $}

  ${
    $d x A $.  $d x y B $.
    $( A subclass condition on the members of two classes that implies a
       subclass relation on their unions.  Proposition 8.6 of [TakeutiZaring]
       p. 59.  See ~ iunss2 for a generalization to indexed unions.
       (Contributed by NM, 22-Mar-2004.) $)
    uniss2 $p |- ( A. x e. A E. y e. B x C_ y -> U. A C_ U. B ) $=
      ( cv wss wrex wral cuni wcel ssuni expcom rexlimiv ralimi unissb sylibr )
      AEZBEZFZBDGZACHQDIZFZACHCIUAFTUBACSUBBDSRDJUBQRDKLMNACUAOP $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( If the difference ` A \ B ` contains the largest members of ` A ` , then
       the union of the difference is the union of ` A ` .  (Contributed by NM,
       22-Mar-2004.) $)
    unidif $p |- ( A. x e. A E. y e. ( A \ B ) x C_ y ->
               U. ( A \ B ) = U. A ) $=
      ( cv wss cdif wrex wral cuni wceq uniss2 difss unissi jctil eqss sylibr
      wa ) AEBEFBCDGZHACIZSJZCJZFZUBUAFZRUAUBKTUDUCABCSLSCCDMNOUAUBPQ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Relationship implying union.  (Contributed by NM, 10-Nov-1999.) $)
    ssunieq $p |- ( ( A e. B /\ A. x e. B x C_ A ) -> A = U. B ) $=
      ( wcel cv wss wral cuni wceq elssuni unissb biimpri anim12i eqss sylibr
      wa ) BCDZAEBFACGZPBCHZFZSBFZPBSIQTRUABCJUARACBKLMBSNO $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Any member of a class is the largest of those members that it includes.
       (Contributed by NM, 13-Aug-2002.) $)
    unimax $p |- ( A e. B -> U. { x e. B | x C_ A } = A ) $=
      ( vy wcel cv wss crab wral cuni wceq ssid sseq1 elrab3 elrab simprbi rgen
      mpbiri wa ssunieq eqcomd sylancl ) BCEZBAFZBGZACHZEZDFZBGZDUFIZUFJZBKUCUG
      BBGZBLUEULABCUDBBMNRUIDUFUHUFEUHCEUIUEUIAUHCUDUHBMOPQUGUJSBUKDBUFTUAUB $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        The intersection of a class
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare class intersection symbol. $)
  $c |^| $. $( Big cap $)

  $( Extend class notation to include the intersection of a class (read:
     'intersect ` A ` '). $)
  cint $a class |^| A $.

  ${
    $d x y A $.
    $( Define the intersection of a class.  Definition 7.35 of [TakeutiZaring]
       p. 44.  For example, ` |^| { { 1 , 3 } , { 1 , 8 } } = { 1 } ` .
       Compare this with the intersection of two classes, ~ df-in .
       (Contributed by NM, 18-Aug-1993.) $)
    df-int $a |- |^| A = { x | A. y ( y e. A -> x e. y ) } $.
  $}

  ${
    $d x y A $.
    $( Alternate definition of class intersection.  (Contributed by NM,
       28-Jun-1998.) $)
    dfint2 $p |- |^| A = { x | A. y e. A x e. y } $=
      ( cint cv wcel wi wal cab wral df-int df-ral abbii eqtr4i ) CDBEZCFAEOFZG
      BHZAIPBCJZAIABCKRQAPBCLMN $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Equality law for intersection.  (Contributed by NM, 13-Sep-1999.) $)
    inteq $p |- ( A = B -> |^| A = |^| B ) $=
      ( vx vy wceq wel wral cab cint raleq abbidv dfint2 3eqtr4g ) ABEZCDFZDAGZ
      CHODBGZCHAIBINPQCODABJKCDALCDBLM $.
  $}

  ${
    inteqi.1 $e |- A = B $.
    $( Equality inference for class intersection.  (Contributed by NM,
       2-Sep-2003.) $)
    inteqi $p |- |^| A = |^| B $=
      ( wceq cint inteq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    inteqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for class intersection.  (Contributed by NM,
       2-Sep-2003.) $)
    inteqd $p |- ( ph -> |^| A = |^| B ) $=
      ( wceq cint inteq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d x A y $.  $d x B y $.
    elint.1 $e |- A e. _V $.
    $( Membership in class intersection.  (Contributed by NM, 21-May-1994.) $)
    elint $p |- ( A e. |^| B <-> A. x ( x e. B -> A e. x ) ) $=
      ( vy cv wcel wi wal cint wceq eleq1 imbi2d albidv df-int elab2 ) AFZCGZEF
      ZQGZHZAIRBQGZHZAIEBCJDSBKZUAUCAUDTUBRSBQLMNEACOP $.
  $}

  ${
    $d x A $.  $d x B $.
    elint2.1 $e |- A e. _V $.
    $( Membership in class intersection.  (Contributed by NM, 14-Oct-1999.) $)
    elint2 $p |- ( A e. |^| B <-> A. x e. B A e. x ) $=
      ( cint wcel cv wi wal wral elint df-ral bitr4i ) BCEFAGZCFBNFZHAIOACJABCD
      KOACLM $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Membership in class intersection, with the sethood requirement expressed
       as an antecedent.  (Contributed by NM, 20-Nov-2003.) $)
    elintg $p |- ( A e. V -> ( A e. |^| B <-> A. x e. B A e. x ) ) $=
      ( vy cv cint wcel wral eleq1 wceq ralbidv vex elint2 vtoclbg ) EFZCGZHPAF
      ZHZACIBQHBRHZACIEBDPBQJPBKSTACPBRJLAPCEMNO $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Membership in class intersection.  (Contributed by NM, 14-Oct-1999.)
       (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
    elinti $p |- ( A e. |^| B -> ( C e. B -> A e. C ) ) $=
      ( vx cint wcel wi cv wral elintg eleq2 rspccv syl6bi pm2.43i ) ABEZFZCBFA
      CFZGZPPADHZFZDBIRDABOJTQDCBSCAKLMN $.
  $}

  ${
    $d y z A $.  $d x y z $.
    nfint.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for intersection.  (Contributed by NM,
       2-Feb-1997.)  (Proof shortened by Andrew Salmon, 12-Aug-2011.) $)
    nfint $p |- F/_ x |^| A $=
      ( vy vz cint wel wral cab dfint2 nfv nfral nfab nfcxfr ) ABFDEGZEBHZDIDEB
      JPADOAEBCOAKLMN $.
  $}

  ${
    $d A x y $.  $d ph y $.
    inteqab.1 $e |- A e. _V $.
    $( Membership in the intersection of a class abstraction.  (Contributed by
       NM, 30-Aug-1993.) $)
    elintab $p |- ( A e. |^| { x | ph } <-> A. x ( ph -> A e. x ) ) $=
      ( vy cab cint wcel cv wi wal elint nfsab1 nfv nfim weq eleq1 syl6bb eleq2
      abid imbi12d cbval bitri ) CABFZGHEIZUDHZCUEHZJZEKACBIZHZJZBKECUDDLUHUKEB
      UFUGBABEMUGBNOUKENEBPZUFAUGUJULUFUIUDHAUEUIUDQABTRUEUICSUAUBUC $.

    $( Membership in the intersection of a class abstraction.  (Contributed by
       NM, 17-Oct-1999.) $)
    elintrab $p |- ( A e. |^| { x e. B | ph } <->
                 A. x e. B ( ph -> A e. x ) ) $=
      ( cv wcel wa cab cint wi wal crab wral elintab impexp albii df-rab inteqi
      bitri eleq2i df-ral 3bitr4i ) CBFZDGZAHZBIZJZGZUEACUDGZKZKZBLZCABDMZJZGUK
      BDNUIUFUJKZBLUMUFBCEOUPULBUEAUJPQTUOUHCUNUGABDRSUAUKBDUBUC $.
  $}

  ${
    $d x y A $.  $d y B $.  $d y ph $.
    $( Membership in the intersection of a class abstraction.  (Contributed by
       NM, 17-Feb-2007.) $)
    elintrabg $p |- ( A e. V -> ( A e. |^| { x e. B | ph } <->
                 A. x e. B ( ph -> A e. x ) ) ) $=
      ( vy cv crab cint wcel wi wral eleq1 wceq imbi2d ralbidv elintrab vtoclbg
      vex ) FGZABDHIZJATBGZJZKZBDLCUAJACUBJZKZBDLFCETCUAMTCNZUDUFBDUGUCUEATCUBM
      OPABTDFSQR $.
  $}

  ${
    $d x y $.
    $( The intersection of the empty set is the universal class.  Exercise 2 of
       [TakeutiZaring] p. 44.  (Contributed by NM, 18-Aug-1993.) $)
    int0 $p |- |^| (/) = _V $=
      ( vy vx cv c0 wcel wi wal cab weq cint cvv pm2.21i ax-gen equid 2th abbii
      noel df-int df-v 3eqtr4i ) ACZDEZBCUAEZFZAGZBHBBIZBHDJKUEUFBUEUFUDAUBUCUA
      QLMBNOPBADRBST $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y ph $.
    $( An element of a class includes the intersection of the class.  Exercise
       4 of [TakeutiZaring] p. 44 (with correction), generalized to classes.
       (Contributed by NM, 18-Nov-1995.) $)
    intss1 $p |- ( A e. B -> |^| B C_ A ) $=
      ( vx vy wcel cint cv wal vex elint wceq eleq1 eleq2 imbi12d spcgv pm2.43a
      wi syl5bi ssrdv ) ABEZCBFZACGZUAEDGZBEZUBUCEZQZDHZTUBAEZDUBBCIJUGTUHUFTUH
      QDABUCAKUDTUEUHUCABLUCAUBMNOPRS $.

    $( Subclass of a class intersection.  Theorem 5.11(viii) of [Monk1] p. 52
       and its converse.  (Contributed by NM, 14-Oct-1999.) $)
    ssint $p |- ( A C_ |^| B <-> A. x e. B A C_ x ) $=
      ( vy cint wss cv wcel wral dfss3 vex elint2 ralbii ralcom bitr4i 3bitri )
      BCEZFDGZQHZDBIRAGZHZACIZDBIZBTFZACIZDBQJSUBDBARCDKLMUCUADBIZACIUEUADABCNU
      DUFACDBTJMOP $.

    $( Subclass of the intersection of a class abstraction.  (Contributed by
       NM, 31-Jul-2006.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
    ssintab $p |- ( A C_ |^| { x | ph } <-> A. x ( ph -> A C_ x ) ) $=
      ( vy cab cint wss cv wral wi wal ssint sseq2 ralab2 bitri ) CABEZFGCDHZGZ
      DPIACBHZGZJBKDCPLARTDBQSCMNO $.

    $( Subclass of the least upper bound.  (Contributed by NM, 8-Aug-2000.) $)
    ssintub $p |- A C_ |^| { x e. B | A C_ x } $=
      ( vy cv wss crab cint ssint wcel sseq2 elrab simprbi mprgbir ) BBAEZFZACG
      ZHFBDEZFZDQDBQIRQJRCJSPSARCORBKLMN $.

    $( Subclass of the minimum value of class of supersets.  (Contributed by
       NM, 10-Aug-2006.) $)
    ssmin $p |- A C_ |^| { x | ( A C_ x /\ ph ) } $=
      ( cv wss wa cab cint wi ssintab simpl mpgbir ) CCBDEZAFZBGHENMIBNBCJMAKL
      $.

    $( Any member of a class is the smallest of those members that include it.
       (Contributed by NM, 13-Aug-2002.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    intmin $p |- ( A e. B -> |^| { x e. B | A C_ x } = A ) $=
      ( vy wcel cv wss crab cint wi wral elintrab ssid wceq sseq2 eleq2 imbi12d
      vex rspcv mpii syl5bi ssrdv ssintub a1i eqssd ) BCEZBAFZGZACHIZBUFDUIBDFZ
      UIEUHUJUGEZJZACKZUFUJBEZUHAUJCDRLUFUMBBGZUNBMULUOUNJABCUGBNUHUOUKUNUGBBOU
      GBUJPQSTUAUBBUIGUFABCUCUDUE $.

    $( Intersection of subclasses.  (Contributed by NM, 14-Oct-1999.)  (Proof
       shortened by OpenAI, 25-Mar-2020.) $)
    intss $p |- ( A C_ B -> |^| B C_ |^| A ) $=
      ( vy vx wss cv wcel wral cab cint ssralv ss2abdv dfint2 3sstr4g ) ABEZCFD
      FGZDBHZCIPDAHZCIBJAJOQRCPDABKLCDBMCDAMN $.

    $( Intersection of subclasses.  (Contributed by NM, 14-Oct-1999.)  Obsolete
       version of ~ intss as of 25-Mar-2020.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    intssOLD $p |- ( A C_ B -> |^| B C_ |^| A ) $=
      ( vy vx cv wcel wal cint wss imim1 al2imi vex elint 3imtr4g alrimiv dfss2
      wi 3imtr4i ) CEZAFZSBFZQZCGZDEZBHZFZUDAHZFZQZDGABIUEUGIUCUIDUCUAUDSFZQZCG
      TUJQZCGUFUHUBUKULCTUAUJJKCUDBDLZMCUDAUMMNOCABPDUEUGPR $.

    $( The intersection of a nonempty set is a subclass of its union.
       (Contributed by NM, 29-Jul-2006.) $)
    intssuni $p |- ( A =/= (/) -> |^| A C_ U. A ) $=
      ( vx vy c0 wne cint cuni cv wcel wral r19.2z ex vex elint2 eluni2 3imtr4g
      wrex ssrdv ) ADEZBAFZAGZSBHZCHIZCAJZUCCAQZUBTIUBUAISUDUEUCCAKLCUBABMNCUBA
      OPR $.
  $}

  ${
    $d x A $.
    $( Subclass of the intersection of a restricted class builder.
       (Contributed by NM, 30-Jan-2015.) $)
    ssintrab $p |- ( A C_ |^| { x e. B | ph }
           <-> A. x e. B ( ph -> A C_ x ) ) $=
      ( crab cint wss cv wcel wa cab wral df-rab inteqi sseq2i wal impexp albii
      wi ssintab df-ral 3bitr4i bitri ) CABDEZFZGCBHZDIZAJZBKZFZGZACUFGZSZBDLZU
      EUJCUDUIABDMNOUHULSZBPUGUMSZBPUKUNUOUPBUGAULQRUHBCTUMBDUAUBUC $.
  $}

  $( If the union of a class is included in its intersection, the class is
     either the empty set or a singleton ( ~ uniintsn ).  (Contributed by NM,
     30-Oct-2010.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  unissint $p |- ( U. A C_ |^| A <-> ( A = (/) \/ U. A = |^| A ) ) $=
    ( cuni cint wss c0 wo wn wa simpl wne df-ne intssuni sylbir adantl eqssd ex
    wceq orrd cvv ssv int0 sseqtr4i inteq syl5sseqr eqimss jaoi impbii ) ABZACZ
    DZAEQZUHUIQZFUJUKULUJUKGZULUJUMHUHUIUJUMIUMUIUHDZUJUMAEJUNAEKALMNOPRUKUJULU
    KECZUHUIUHSUOUHTUAUBAEUCUDUHUIUEUFUG $.

  $( Subclass relationship for intersection and union.  (Contributed by NM,
     29-Jul-2006.) $)
  intssuni2 $p |- ( ( A C_ B /\ A =/= (/) ) -> |^| A C_ U. B ) $=
    ( c0 wne wss cint cuni intssuni uniss sylan9ssr ) ACDABEAFAGBGAHABIJ $.

  ${
    $d x A $.  $d x B $.  $d x ps $.
    intminss.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Under subset ordering, the intersection of a restricted class
       abstraction is less than or equal to any of its members.  (Contributed
       by NM, 7-Sep-2013.) $)
    intminss $p |- ( ( A e. B /\ ps ) -> |^| { x e. B | ph } C_ A ) $=
      ( wcel wa crab cint wss elrab intss1 sylbir ) DEGBHDACEIZGOJDKABCDEFLDOMN
      $.
  $}

  ${
    $d x A $.
    intmin2.1 $e |- A e. _V $.
    $( Any set is the smallest of all sets that include it.  (Contributed by
       NM, 20-Sep-2003.) $)
    intmin2 $p |- |^| { x | A C_ x } = A $=
      ( cv wss cvv crab cint cab rabab inteqi wcel wceq intmin ax-mp eqtr3i ) B
      ADEZAFGZHZQAIZHBRTQAJKBFLSBMCABFNOP $.
  $}

  ${
    $d x A $.  $d x ps $.
    intmin3.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    intmin3.3 $e |- ps $.
    $( Under subset ordering, the intersection of a class abstraction is less
       than or equal to any of its members.  (Contributed by NM,
       3-Jul-2005.) $)
    intmin3 $p |- ( A e. V -> |^| { x | ph } C_ A ) $=
      ( wcel cab cint wss elabg mpbiri intss1 syl ) DEHZDACIZHZQJDKPRBGABCDEFLM
      DQNO $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( Elimination of a conjunct in a class intersection.  (Contributed by NM,
       31-Jul-2006.) $)
    intmin4 $p |- ( A C_ |^| { x | ph } ->
                  |^| { x | ( A C_ x /\ ph ) } = |^| { x | ph } ) $=
      ( vy cab cint wss cv wa wcel wi wal wb ssintab simpr impbid2 imbi1d alimi
      ancr elintab albi syl sylbi vex 3bitr4g eqrdv ) CABEFZGZDCBHZGZAIZBEFZUGU
      HUKDHZUIJZKZBLZAUNKZBLZUMULJUMUGJUHAUJKZBLZUPURMZABCNUTUOUQMZBLVAUSVBBUSU
      KAUNUSUKAUJAOAUJSPQRUOUQBUAUBUCUKBUMDUDZTABUMVCTUEUF $.
  $}

  ${
    $d x z A $.  $d x z ph $.  $d x y z $.
    intab.1 $e |- A e. _V $.
    intab.2 $e |- { x | E. y ( ph /\ x = A ) } e. _V $.
    $( The intersection of a special case of a class abstraction. ` y ` may be
       free in ` ph ` and ` A ` , which can be thought of a ` ph ( y ) ` and
       ` A ( y ) ` .  Typically, ~ abrexex2 or ~ abexssex can be used to
       satisfy the second hypothesis.  (Contributed by NM, 28-Jul-2006.)
       (Proof shortened by Mario Carneiro, 14-Nov-2016.) $)
    intab $p |- |^| { x | A. y ( ph -> A e. x ) } =
                { x | E. y ( ph /\ x = A ) } $=
      ( vz cv wcel wi wal cab cint wceq wa wex wss ex alrimiv sylibr cvv anbi2d
      eqeq1 exbidv cbvabv eqeltri nfe1 nfab nfeq2 eleq2 imbi2d albid elab 19.8a
      wsbc sbc6 df-sbc sylib mpgbir intss1 19.29r simplr pm3.35 adantlr eqeltrd
      ax-mp exlimiv syl vex elintab abssi eqssi eqtri ) ADBHZIZJZCKZBLZMZAGHZDN
      ZOZCPZGLZAVNDNZOZCPZBLZVSWDWDVRIZVSWDQWIADWDIZJZCVQWKCKBWDWDWHUAWCWGGBVTV
      NNZWBWFCWLWAWEAVTVNDUCUBUDUEZFUFVNWDNZVPWKCCVNWDWCCGWBCUGUHUIWNVOWJAVNWDD
      UJUKULUMAWCGDUOZWJAWAWCJZGKWOAWPGAWAWCWBCUNRSWCGDEUPTWCGDUQURUSWDVRUTVFWC
      GVSWCVQVTVNIZJZBKVTVSIWCWRBWCVQWQWCVQOWBVPOZCPWQWBVPCVAWSWQCWSVTDVNAWAVPV
      BAVPVOWAAVOVCVDVEVGVHRSVQBVTGVIVJTVKVLWMVM $.
  $}

  $( The intersection of a class containing the empty set is empty.
     (Contributed by NM, 24-Apr-2004.) $)
  int0el $p |- ( (/) e. A -> |^| A = (/) ) $=
    ( c0 wcel cint intss1 wss 0ss a1i eqssd ) BACZADZBBAEBKFJKGHI $.

  ${
    $d x y A $.  $d x y B $.
    $( The class intersection of the union of two classes.  Theorem 78 of
       [Suppes] p. 42.  (Contributed by NM, 22-Sep-2002.) $)
    intun $p |- |^| ( A u. B ) = ( |^| A i^i |^| B ) $=
      ( vx vy cun cint cin cv wcel wi wal wa 19.26 elun imbi1i jaob bitri elint
      wo 3bitr4i albii vex anbi12i elin eqriv ) CABEZFZAFZBFZGZDHZUFIZCHZUKIZJZ
      DKZUMUHIZUMUIIZLZUMUGIUMUJIUKAIZUNJZUKBIZUNJZLZDKVADKZVCDKZLUPUSVAVCDMUOV
      DDUOUTVBSZUNJVDULVGUNUKABNOUTUNVBPQUAUQVEURVFDUMACUBZRDUMBVHRUCTDUMUFVHRU
      MUHUIUDTUE $.
  $}

  ${
    $d x y A $.  $d x y B $.
    intpr.1 $e |- A e. _V $.
    intpr.2 $e |- B e. _V $.
    $( The intersection of a pair is the intersection of its members.  Theorem
       71 of [Suppes] p. 42.  (Contributed by NM, 14-Oct-1999.) $)
    intpr $p |- |^| { A , B } = ( A i^i B ) $=
      ( vx vy cpr cint cin cv wcel wi wal wa wceq 19.26 wo vex clel4 3bitr4i
      elpr imbi1i jaob bitri albii anbi12i elint elin eqriv ) EABGZHZABIZFJZUJK
      ZEJZUMKZLZFMZUOAKZUOBKZNZUOUKKUOULKUMAOZUPLZUMBOZUPLZNZFMVCFMZVEFMZNURVAV
      CVEFPUQVFFUQVBVDQZUPLVFUNVIUPUMABFRUAUBVBUPVDUCUDUEUSVGUTVHFUOACSFUOBDSUF
      TFUOUJERUGUOABUHTUI $.
  $}

  ${
    $d x y A $.  $d y B $.
    $( The intersection of a pair is the intersection of its members.  Closed
       form of ~ intpr .  Theorem 71 of [Suppes] p. 42.  (Contributed by FL,
       27-Apr-2008.) $)
    intprg $p |- ( ( A e. V /\ B e. W ) -> |^| { A , B } = ( A i^i B ) ) $=
      ( vx vy cv cpr cint cin wceq preq1 inteqd ineq1 eqeq12d preq2 ineq2 intpr
      vex vtocl2g ) EGZFGZHZIZUAUBJZKAUBHZIZAUBJZKABHZIZABJZKEFABCDUAAKZUDUGUEU
      HULUCUFUAAUBLMUAAUBNOUBBKZUGUJUHUKUMUFUIUBBAPMUBBAQOUAUBESFSRT $.
  $}

  $( Intersection of a singleton.  (Contributed by Stefan O'Rear,
     22-Feb-2015.) $)
  intsng $p |- ( A e. V -> |^| { A } = A ) $=
    ( wcel csn cint cpr dfsn2 inteqi cin wceq intprg anidms inidm syl6eq syl5eq
    ) ABCZADZEAAFZEZAQRAGHPSAAIZAPSTJAABBKLAMNO $.

  ${
    intsn.1 $e |- A e. _V $.
    $( The intersection of a singleton is its member.  Theorem 70 of [Suppes]
       p. 41.  (Contributed by NM, 29-Sep-2002.) $)
    intsn $p |- |^| { A } = A $=
      ( cvv wcel csn cint wceq intsng ax-mp ) ACDAEFAGBACHI $.
  $}

  ${
    $d x y A $.  $d y ph $.
    $( Two ways to express "" ` A ` is a singleton.""  See also ~ en1 , ~ en1b ,
       ~ card1 , and ~ eusn .  (Contributed by NM, 2-Aug-2010.) $)
    uniintsn $p |- ( U. A = |^| A <-> E. x A = { x } ) $=
      ( vy cuni cint wceq cv wex wcel wa wal c0 inteq syl6eq adantl unieq sylib
      wne cvv wss csn wi vn0 int0 eqeq1 syl5ib imp eqtr3d ex necon3d mpi n0 cpr
      uni0 vex prss cun cin uniss simpl sseqtrd intss sstrd unipr intpr 3sstr3g
      inss1 ssun1 sstri jctir eqss uneqin bitr3i syl5bi alrimivv jca weu euabsn
      cab eleq1 abid2 eqeq1i exbii 3bitr3i unisn intsn 3eqtr4a exlimiv impbii
      eu4 ) BDZBEZFZBAGZUAZFZAHZWMWNBIZAHZWRCGZBIZJZWNWTFZUBZCKAKZJZWQWMWSXEWMB
      LRZWSWMSLRXGUCWMBLSLWMBLFZSLFWMXHJWLSLXHWLSFWMXHWLLESBLMUDNOWMXHWLLFZXHWK
      LFWMXIXHWKLDLBLPUNNWKWLLUEUFUGUHUIUJUKABULQWMXDACXBWNWTUMZBTZWMXCWNWTBAUO
      ZCUOZUPWMXKXCWMXKJZWNWTUQZWNWTURZTZXPXOTZJZXCXNXQXRXNXJDZXJEZXOXPXNXTWLYA
      XNXTWKWLXKXTWKTWMXJBUSOWMXKUTVAXKWLYATWMXJBVBOVCWNWTXLXMVDWNWTXLXMVEVFXPW
      NXOWNWTVGWNWTVHVIVJXSXOXPFXCXOXPVKWNWTVLVMQUIVNVOVPWRAVQWRAVSZWOFZAHXFWQW
      RAVRWRXAACWNWTBVTWJYCWPAYBBWOABWAWBWCWDQWPWMAWPWODWNWKWLWNXLWEBWOPWPWLWOE
      WNBWOMWNXLWFNWGWHWI $.

    $( The union and the intersection of a class abstraction are equal exactly
       when there is a unique satisfying value of ` ph ( x ) ` .  (Contributed
       by Mario Carneiro, 24-Dec-2016.) $)
    uniintab $p |- ( E! x ph <-> U. { x | ph } = |^| { x | ph } ) $=
      ( vy weu cab cv csn wceq wex cuni cint euabsn2 uniintsn bitr4i ) ABDABEZC
      FGHCIOJOKHABCLCOMN $.
  $}

  ${
    intunsn.1 $e |- B e. _V $.
    $( Theorem joining a singleton to an intersection.  (Contributed by NM,
       29-Sep-2002.) $)
    intunsn $p |- |^| ( A u. { B } ) = ( |^| A i^i B ) $=
      ( csn cun cint cin intun intsn ineq2i eqtri ) ABDZEFAFZLFZGMBGALHNBMBCIJK
      $.
  $}

  $( Relative intersection of an empty set.  (Contributed by Stefan O'Rear,
     3-Apr-2015.) $)
  rint0 $p |- ( X = (/) -> ( A i^i |^| X ) = A ) $=
    ( c0 wceq cint cin inteq ineq2d cvv int0 ineq2i inv1 eqtri syl6eq ) BCDZABE
    ZFACEZFZAOPQABCGHRAIFAQIAJKALMN $.

  ${
    $d B y $.  $d X y $.
    $( Membership in a restricted intersection.  (Contributed by Stefan O'Rear,
       3-Apr-2015.) $)
    elrint $p |- ( X e. ( A i^i |^| B ) <-> ( X e. A /\ A. y e. B X e. y ) ) $=
      ( cint cin wcel wa cv wral elin elintg pm5.32i bitri ) DBCEZFGDBGZDOGZHPD
      AIGACJZHDBOKPQRADCBLMN $.

    $( Membership in a restricted intersection.  (Contributed by Stefan O'Rear,
       3-Apr-2015.) $)
    elrint2 $p |- ( X e. A -> ( X e. ( A i^i |^| B ) <->
          A. y e. B X e. y ) ) $=
      ( cint cin wcel cv wral elrint baib ) DBCEFGDBGDAHGACIABCDJK $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Indexed union and intersection
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c U_ $. $( Underlined big cup. $)
  $c |^|_ $. $( Underlined big cap. $)

  $( Extend class notation to include indexed union.  Note:  Historically
     (prior to 21-Oct-2005), set.mm used the notation ` U. x e. A B ` , with
     the same union symbol as ~ cuni .  While that syntax was unambiguous, it
     did not allow for LALR parsing of the syntax constructions in set.mm.  The
     new syntax uses a distinguished symbol ` U_ ` instead of ` U. ` and does
     allow LALR parsing.  Thanks to Peter Backes for suggesting this change. $)
  ciun $a class U_ x e. A B $.

  $( Extend class notation to include indexed intersection.  Note:
     Historically (prior to 21-Oct-2005), set.mm used the notation
     ` |^| x e. A B ` , with the same intersection symbol as ~ cint .  Although
     that syntax was unambiguous, it did not allow for LALR parsing of the
     syntax constructions in set.mm.  The new syntax uses a distinguished
     symbol ` |^|_ ` instead of ` |^| ` and does allow LALR parsing.  Thanks to
     Peter Backes for suggesting this change. $)
  ciin $a class |^|_ x e. A B $.

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( Define indexed union.  Definition indexed union in [Stoll] p. 45.  In
       most applications, ` A ` is independent of ` x ` (although this is not
       required by the definition), and ` B ` depends on ` x ` i.e. can be read
       informally as ` B ( x ) ` .  We call ` x ` the index, ` A ` the index
       set, and ` B ` the indexed set.  In most books, ` x e. A ` is written as
       a subscript or underneath a union symbol ` U. ` .  We use a special
       union symbol ` U_ ` to make it easier to distinguish from plain class
       union.  In many theorems, you will see that ` x ` and ` A ` are in the
       same distinct variable group (meaning ` A ` cannot depend on ` x ` ) and
       that ` B ` and ` x ` do not share a distinct variable group (meaning
       that can be thought of as ` B ( x ) ` i.e. can be substituted with a
       class expression containing ` x ` ).  An alternate definition tying
       indexed union to ordinary union is ~ dfiun2 .  Theorem ~ uniiun provides
       a definition of ordinary union in terms of indexed union.  Theorems
       ~ fniunfv and ~ funiunfv are useful when ` B ` is a function.
       (Contributed by NM, 27-Jun-1998.) $)
    df-iun $a |- U_ x e. A B = { y | E. x e. A y e. B } $.

    $( Define indexed intersection.  Definition of [Stoll] p. 45.  See the
       remarks for its sibling operation of indexed union ~ df-iun .  An
       alternate definition tying indexed intersection to ordinary intersection
       is ~ dfiin2 .  Theorem ~ intiin provides a definition of ordinary
       intersection in terms of indexed intersection.  (Contributed by NM,
       27-Jun-1998.) $)
    df-iin $a |- |^|_ x e. A B = { y | A. x e. A y e. B } $.
  $}

  ${
    $d X x y z $.  $d Y x y z $.  $d ph z $.
    $( A class abstraction with a restricted existential quantification
       expressed as indexed union.  (Contributed by Alexander van der Vekens,
       29-Jul-2018.) $)
    rabasiun $p |- { x e. X | E. y e. Y ph } = U_ y e. Y { x e. X | ph } $=
      ( vz cv wcel wrex wa cab crab ciun wsb nfcv nfcri nfv nfan nfs1v nfrex
      weq eleq1 sbequ12 rexbidv anbi12d cbvab elrabf bicomi rexbii bitr3i abbii
      r19.42v eqtri df-rab df-iun 3eqtr4i ) BGZDHZACEIZJZBKZFGZABDLZHZCEIZFKZUS
      BDLCEVCMVAVBDHZABFNZCEIZJZFKVFUTVJBFURUSFFBDFDOPUSFQRVGVIBBFDBDOZPVHBCEBE
      OABFSZTRBFUAZURVGUSVIUQVBDUBVMAVHCEABFUCZUDUEUFVJVEFVJVGVHJZCEIVEVGVHCEUL
      VOVDCEVDVOAVHBVBDBVBOVKVLVNUGUHUIUJUKUMUSBDUNCFEVCUOUP $.
  $}

  ${
    $d x y A $.  $d y B $.  $d y C $.
    $( Membership in indexed union.  (Contributed by NM, 3-Sep-2003.) $)
    eliun $p |- ( A e. U_ x e. B C <-> E. x e. B A e. C ) $=
      ( vy ciun wcel wrex elex rexlimivw cv wceq eleq1 rexbidv df-iun pm5.21nii
      cvv elab2g ) BACDFZGBQGZBDGZACHZBSIUATACBDIJEKZDGZACHUBEBSQUCBLUDUAACUCBD
      MNAECDORP $.

    $( Membership in indexed intersection.  (Contributed by NM, 3-Sep-2003.) $)
    eliin $p |- ( A e. V -> ( A e. |^|_ x e. B C <-> A. x e. B A e. C ) ) $=
      ( vy cv wcel wral ciin wceq eleq1 ralbidv df-iin elab2g ) FGZDHZACIBDHZAC
      IFBACDJEPBKQRACPBDLMAFCDNO $.
  $}

  ${
    $d y z A $.  $d x z B $.  $d z C $.  $d x y $.
    $( Commutation of indexed unions.  (Contributed by NM, 18-Dec-2008.) $)
    iuncom $p |- U_ x e. A U_ y e. B C = U_ y e. B U_ x e. A C $=
      ( vz ciun cv wcel wrex rexcom eliun rexbii 3bitr4i eqriv ) FACBDEGZGZBDAC
      EGZGZFHZPIZACJZTRIZBDJZTQITSITEIZBDJZACJUEACJZBDJUBUDUEABCDKUAUFACBTDELMU
      CUGBDATCELMNATCPLBTDRLNO $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d x y z $.
    $( Commutation of union with indexed union.  (Contributed by Mario
       Carneiro, 18-Jan-2014.) $)
    iuncom4 $p |- U_ x e. A U. B = U. U_ x e. A B $=
      ( vy vz cuni ciun cv wcel wa wex df-rex rexbii rexcom4 bitri exbii eluni2
      wrex eliun 3bitr4i r19.41v anbi1i eqriv ) DABCFZGZABCGZFZDHZUDIZABRZUHEHZ
      IZEUFRZUHUEIUHUGIULECRZABRZUKCIZABRZULJZEKZUJUMUOUPULJZABRZEKZUSUOUTEKZAB
      RVBUNVCABULECLMUTAEBNOVAUREUPULABUAPOUIUNABEUHCQMUMUKUFIZULJZEKUSULEUFLVE
      UREVDUQULAUKBCSUBPOTAUHBUDSEUHUFQTUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Indexed union of a constant class, i.e. where ` B ` does not depend on
       ` x ` .  (Contributed by NM, 5-Sep-2004.)  (Proof shortened by Andrew
       Salmon, 25-Jul-2011.) $)
    iunconst $p |- ( A =/= (/) -> U_ x e. A B = B ) $=
      ( vy c0 wne ciun cv wcel wrex r19.9rzv eliun syl6rbbr eqrdv ) BEFZDABCGZC
      ODHZCIZRABJQPIRABKAQBCLMN $.

    $( Indexed intersection of a constant class, i.e. where ` B ` does not
       depend on ` x ` .  (Contributed by Mario Carneiro, 6-Feb-2015.) $)
    iinconst $p |- ( A =/= (/) -> |^|_ x e. A B = B ) $=
      ( vy c0 wne ciin cv wcel wral r19.3rzv cvv vex eliin ax-mp syl6rbbr eqrdv
      wb ) BEFZDABCGZCSDHZCIZUBABJZUATIZUBABKUALIUDUCRDMAUABCLNOPQ $.
  $}

  ${
    $d x y $.  $d y z A $.  $d x z B $.  $d z C $.
    $( Law combining indexed union with indexed intersection.  Eq. 14 in
       [KuratowskiMostowski] p. 109.  This theorem also appears as the last
       example at ~ http://en.wikipedia.org/wiki/Union%5F%28set%5Ftheory%29 .
       (Contributed by NM, 17-Aug-2004.)  (Proof shortened by Andrew Salmon,
       25-Jul-2011.) $)
    iuniin $p |- U_ x e. A |^|_ y e. B C C_ |^|_ y e. B U_ x e. A C $=
      ( vz ciin ciun cv wcel wrex wral r19.12 cvv vex eliin ax-mp eliun 3imtr4i
      wb rexbii ralbii ssriv ) FACBDEGZHZBDACEHZGZFIZUDJZACKZUHUFJZBDLZUHUEJUHU
      GJZUHEJZBDLZACKUNACKZBDLUJULUNABCDMUIUOACUHNJZUIUOTFOZBUHDENPQUAUKUPBDAUH
      CERUBSAUHCUDRUQUMULTURBUHDUFNPQSUC $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( Subclass theorem for indexed union.  (Contributed by NM, 10-Dec-2004.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iunss1 $p |- ( A C_ B -> U_ x e. A C C_ U_ x e. B C ) $=
      ( vy wss ciun cv wcel wrex ssrexv eliun 3imtr4g ssrdv ) BCFZEABDGZACDGZOE
      HZDIZABJSACJRPIRQISABCKARBDLARCDLMN $.

    $( Subclass theorem for indexed intersection.  (Contributed by NM,
       24-Jan-2012.) $)
    iinss1 $p |- ( A C_ B -> |^|_ x e. B C C_ |^|_ x e. A C ) $=
      ( vy wss ciin cv wcel wral ssralv cvv wb vex eliin ax-mp 3imtr4g ssrdv )
      BCFZEACDGZABDGZSEHZDIZACJZUCABJZUBTIZUBUAIZUCABCKUBLIZUFUDMENZAUBCDLOPUHU
      GUEMUIAUBBDLOPQR $.

    $( Equality theorem for indexed union.  (Contributed by NM,
       27-Jun-1998.) $)
    iuneq1 $p |- ( A = B -> U_ x e. A C = U_ x e. B C ) $=
      ( wss wa ciun wceq iunss1 anim12i eqss 3imtr4i ) BCEZCBEZFABDGZACDGZEZPOE
      ZFBCHOPHMQNRABCDIACBDIJBCKOPKL $.

    $( Equality theorem for indexed intersection.  (Contributed by NM,
       27-Jun-1998.) $)
    iineq1 $p |- ( A = B -> |^|_ x e. A C = |^|_ x e. B C ) $=
      ( vy wceq cv wcel wral cab ciin raleq abbidv df-iin 3eqtr4g ) BCFZEGDHZAB
      IZEJQACIZEJABDKACDKPRSEQABCLMAEBDNAECDNO $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( Subclass theorem for indexed union.  (Contributed by NM, 26-Nov-2003.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    ss2iun $p |- ( A. x e. A B C_ C -> U_ x e. A B C_ U_ x e. A C ) $=
      ( vy wss wral ciun cv wcel wrex ssel ralimi rexim syl eliun 3imtr4g ssrdv
      wi ) CDFZABGZEABCHZABDHZUAEIZCJZABKZUDDJZABKZUDUBJUDUCJUAUEUGSZABGUFUHSTU
      IABCDUDLMUEUGABNOAUDBCPAUDBDPQR $.

    $( Equality theorem for indexed union.  (Contributed by NM,
       22-Oct-2003.) $)
    iuneq2 $p |- ( A. x e. A B = C -> U_ x e. A B = U_ x e. A C ) $=
      ( wss wral wa ciun wceq ss2iun anim12i eqss ralbii r19.26 bitri 3imtr4i )
      CDEZABFZDCEZABFZGZABCHZABDHZEZUCUBEZGCDIZABFZUBUCIRUDTUEABCDJABDCJKUGQSGZ
      ABFUAUFUHABCDLMQSABNOUBUCLP $.

    $( Equality theorem for indexed intersection.  (Contributed by NM,
       22-Oct-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iineq2 $p |- ( A. x e. A B = C -> |^|_ x e. A B = |^|_ x e. A C ) $=
      ( vy wceq wral cv wcel cab ciin wb eleq2 ralimi syl abbidv df-iin 3eqtr4g
      ralbi ) CDFZABGZEHZCIZABGZEJUBDIZABGZEJABCKABDKUAUDUFEUAUCUELZABGUDUFLTUG
      ABCDUBMNUCUEABSOPAEBCQAEBDQR $.
  $}

  ${
    iuneq2i.1 $e |- ( x e. A -> B = C ) $.
    $( Equality inference for indexed union.  (Contributed by NM,
       22-Oct-2003.) $)
    iuneq2i $p |- U_ x e. A B = U_ x e. A C $=
      ( wceq ciun iuneq2 mprg ) CDFABCGABDGFABABCDHEI $.

    $( Equality inference for indexed intersection.  (Contributed by NM,
       22-Oct-2003.) $)
    iineq2i $p |- |^|_ x e. A B = |^|_ x e. A C $=
      ( wceq ciin iineq2 mprg ) CDFABCGABDGFABABCDHEI $.
  $}

  ${
    iineq2d.1 $e |- F/ x ph $.
    iineq2d.2 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Equality deduction for indexed intersection.  (Contributed by NM,
       7-Dec-2011.) $)
    iineq2d $p |- ( ph -> |^|_ x e. A B = |^|_ x e. A C ) $=
      ( wceq wral ciin cv wcel ex ralrimi iineq2 syl ) ADEHZBCIBCDJBCEJHAQBCFAB
      KCLQGMNBCDEOP $.
  $}

  ${
    $d x ph $.
    iuneq2dv.1 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Equality deduction for indexed union.  (Contributed by NM,
       3-Aug-2004.) $)
    iuneq2dv $p |- ( ph -> U_ x e. A B = U_ x e. A C ) $=
      ( wceq wral ciun ralrimiva iuneq2 syl ) ADEGZBCHBCDIBCEIGAMBCFJBCDEKL $.

    $( Equality deduction for indexed intersection.  (Contributed by NM,
       3-Aug-2004.) $)
    iineq2dv $p |- ( ph -> |^|_ x e. A B = |^|_ x e. A C ) $=
      ( nfv iineq2d ) ABCDEABGFH $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.  $d y D $.  $d y ph $.
    iuneq12df.1 $e |- F/ x ph $.
    iuneq12df.2 $e |- F/_ x A $.
    iuneq12df.3 $e |- F/_ x B $.
    iuneq12df.4 $e |- ( ph -> A = B ) $.
    iuneq12df.5 $e |- ( ph -> C = D ) $.
    $( Equality deduction for indexed union, deduction version.  (Contributed
       by Thierry Arnoux, 31-Dec-2016.) $)
    iuneq12df $p |- ( ph -> U_ x e. A C = U_ x e. B D ) $=
      ( vy cv wcel wrex wb ciun wceq cab df-iun eleq2d rexeqbid alrimiv eqeq12i
      wal abbi bitr4i sylib ) ALMZENZBCOZUIFNZBDOZPZLUEZBCEQZBDFQZRZAUNLAUJULBC
      DGHIJAEFUIKUAUBUCUOUKLSZUMLSZRURUKUMLUFUPUSUQUTBLCETBLDFTUDUGUH $.
  $}

  ${
    $d x A $.  $d x B $.
    iuneq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for indexed union, deduction version.  (Contributed by
       Drahflow, 22-Oct-2015.) $)
    iuneq1d $p |- ( ph -> U_ x e. A C = U_ x e. B C ) $=
      ( wceq ciun iuneq1 syl ) ACDGBCEHBDEHGFBCDEIJ $.

    ${
      $d x ph $.
      iuneq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for indexed union, deduction version.  (Contributed
         by Drahflow, 22-Oct-2015.) $)
      iuneq12d $p |- ( ph -> U_ x e. A C = U_ x e. B D ) $=
        ( ciun iuneq1d wceq cv wcel adantr iuneq2dv eqtrd ) ABCEIBDEIBDFIABCDEG
        JABDEFAEFKBLDMHNOP $.
    $}
  $}

  ${
    $d x ph $.  $d x A $.
    iuneq2d.2 $e |- ( ph -> B = C ) $.
    $( Equality deduction for indexed union.  (Contributed by Drahflow,
       22-Oct-2015.) $)
    iuneq2d $p |- ( ph -> U_ x e. A B = U_ x e. A C ) $=
      ( wceq cv wcel adantr iuneq2dv ) ABCDEADEGBHCIFJK $.
  $}

  ${
    $d z A $.  $d z B $.  $d x z $.  $d y z $.
    nfiun.1 $e |- F/_ y A $.
    nfiun.2 $e |- F/_ y B $.
    $( Bound-variable hypothesis builder for indexed union.  (Contributed by
       Mario Carneiro, 25-Jan-2014.) $)
    nfiun $p |- F/_ y U_ x e. A B $=
      ( vz ciun cv wcel wrex cab df-iun nfcri nfrex nfab nfcxfr ) BACDHGIDJZACK
      ZGLAGCDMSBGRBACEBGDFNOPQ $.

    $( Bound-variable hypothesis builder for indexed intersection.
       (Contributed by Mario Carneiro, 25-Jan-2014.) $)
    nfiin $p |- F/_ y |^|_ x e. A B $=
      ( vz ciin cv wcel wral cab df-iin nfcri nfral nfab nfcxfr ) BACDHGIDJZACK
      ZGLAGCDMSBGRBACEBGDFNOPQ $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( Bound-variable hypothesis builder for indexed union.  (Contributed by
       NM, 12-Oct-2003.) $)
    nfiu1 $p |- F/_ x U_ x e. A B $=
      ( vy ciun cv wcel wrex cab df-iun nfre1 nfab nfcxfr ) AABCEDFCGZABHZDIADB
      CJOADNABKLM $.

    $( Bound-variable hypothesis builder for indexed intersection.
       (Contributed by NM, 15-Oct-2003.) $)
    nfii1 $p |- F/_ x |^|_ x e. A B $=
      ( vy ciin cv wcel wral cab df-iin nfra1 nfab nfcxfr ) AABCEDFCGZABHZDIADB
      CJOADNABKLM $.
  $}

  ${
    $d y z w A $.  $d y z w B $.  $d w C z $.  $d w x y z $.
    $( Alternate definition of indexed union when ` B ` is a set.  Definition
       15(a) of [Suppes] p. 44.  (Contributed by NM, 23-Mar-2006.)  (Proof
       shortened by Andrew Salmon, 25-Jul-2011.) $)
    dfiun2g $p |- ( A. x e. A B e. C ->
                  U_ x e. A B = U. { y | E. x e. A y = B } ) $=
      ( vz wcel wral ciun cv wceq wrex cab cuni wa wex nfra1 wb rsp syl6bb syl6
      clel3g rexbida rexcom4 r19.41v exbii exancom bitri eliun eluniab 3bitr4g
      imp eqrdv ) DEGZACHZFACDIZBJZDKZACLZBMNZUOFJZDGZACLZVAUQGZUSOBPZVAUPGVAUT
      GUOVCURVDOZACLZBPZVEUOVCVFBPZACLVHUOVBVIACUNACQUOAJCGZVBVIRZUOVJUNVKUNACS
      BVADEUBUAULUCVFABCUDTVHUSVDOZBPVEVGVLBURVDACUEUFUSVDBUGUHTAVACDUIUSBVAUJU
      KUM $.

    $( Alternate definition of indexed intersection when ` B ` is a set.
       (Contributed by Jeff Hankins, 27-Aug-2009.) $)
    dfiin2g $p |- ( A. x e. A B e. C
               -> |^|_ x e. A B = |^| { y | E. x e. A y = B } ) $=
      ( vw vz wcel wral cv cab wceq wrex wi wal df-ral wb eqeq1 albii bitr4i
      ciin cint eleq2 biimprcd alrimiv eqid imbi12d mpii impbid2 imim2i pm5.74d
      spcgv alimi albi syl sylbi alcom r19.23v vex rexbidv elab imbi1i 3bitr3ri
      19.21v syl6bb syl5bb abbidv df-iin df-int 3eqtr4g ) DEHZACIZFJZDHZACIZFKG
      JZBJZDLZACMZBKZHZVMVPHZNZGOZFKACDUAVTUBVLVOWDFVOAJCHZVNNZAOZVLWDVNACPVLWG
      WEVPDLZWBNZGOZNZAOZWDVLWEVKNZAOZWGWLQZVKACPWNWFWKQZAOWOWMWPAWMWEVNWJVKVNW
      JQWEVKVNWJVNWIGWHWBVNVPDVMUCZUDUEVKWJDDLZVNDUFWIWRVNNGDEWHWHWRWBVNVPDDRWQ
      UGULUHUIUJUKUMWFWKAUNUOUPWIACIZGOZWEWINZGOZAOZWDWLWTXAAOZGOXCWSXDGWIACPSX
      AAGUQTWSWCGWSWHACMZWBNWCWHWBACURWAXEWBVSXEBVPGUSVQVPLVRWHACVQVPDRUTVAVBTS
      XBWKAWEWIGVDSVCVEVFVGAFCDVHFGVTVIVJ $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    dfiun2.1 $e |- B e. _V $.
    $( Alternate definition of indexed union when ` B ` is a set.  Definition
       15(a) of [Suppes] p. 44.  (Contributed by NM, 27-Jun-1998.)  (Revised by
       David Abernethy, 19-Jun-2012.) $)
    dfiun2 $p |- U_ x e. A B = U. { y | E. x e. A y = B } $=
      ( cvv wcel ciun cv wceq wrex cab cuni dfiun2g a1i mprg ) DFGZACDHBIDJACKB
      LMJACABCDFNQAICGEOP $.

    $( Alternate definition of indexed intersection when ` B ` is a set.
       Definition 15(b) of [Suppes] p. 44.  (Contributed by NM, 28-Jun-1998.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    dfiin2 $p |- |^|_ x e. A B = |^| { y | E. x e. A y = B } $=
      ( cvv wcel ciin cv wceq wrex cab cint dfiin2g a1i mprg ) DFGZACDHBIDJACKB
      LMJACABCDFNQAICGEOP $.
  $}

  ${
    $d x z $.  $d y z w $.  $d z A $.  $d z w B $.  $d z w C $.
    $( Define double indexed union.  (Contributed by FL, 6-Nov-2013.) $)
    dfiunv2 $p |- U_ x e. A U_ y e. B C =
      { z | E. x e. A E. y e. B z e. C } $=
      ( vw ciun cv wcel wrex cab wceq df-iun a1i iuneq2i vex weq eleq1 rexbidv
      elab rexbii abbii 3eqtri ) ADBEFHZHADGIZFJZBEKZGLZHCIZUIJZADKZCLUJFJZBEKZ
      ADKZCLADUEUIUEUIMAIDJBGEFNOPACDUINULUOCUKUNADUHUNGUJCQGCRUGUMBEUFUJFSTUAU
      BUCUD $.
  $}

  ${
    $d z y A $.  $d z x A $.  $d z B $.  $d z C $.
    cbviun.1 $e |- F/_ y B $.
    cbviun.2 $e |- F/_ x C $.
    cbviun.3 $e |- ( x = y -> B = C ) $.
    $( Rule used to change the bound variables in an indexed union, with the
       substitution specified implicitly by the hypothesis.  (Contributed by
       NM, 26-Mar-2006.)  (Revised by Andrew Salmon, 25-Jul-2011.) $)
    cbviun $p |- U_ x e. A B = U_ y e. A C $=
      ( vz cv wcel wrex cab ciun nfcri weq eleq2d cbvrex abbii df-iun 3eqtr4i )
      IJZDKZACLZIMUBEKZBCLZIMACDNBCENUDUFIUCUEABCBIDFOAIEGOABPDEUBHQRSAICDTBICE
      TUA $.

    $( Change bound variables in an indexed intersection.  (Contributed by Jeff
       Hankins, 26-Aug-2009.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    cbviin $p |- |^|_ x e. A B = |^|_ y e. A C $=
      ( vz cv wcel wral cab ciin nfcri weq eleq2d cbvral abbii df-iin 3eqtr4i )
      IJZDKZACLZIMUBEKZBCLZIMACDNBCENUDUFIUCUEABCBIDFOAIEGOABPDEUBHQRSAICDTBICE
      TUA $.
  $}

  ${
    $d x A $.  $d y A $.  $d y z B $.  $d x z C $.
    cbviunv.1 $e |- ( x = y -> B = C ) $.
    $( Rule used to change the bound variables in an indexed union, with the
       substitution specified implicitly by the hypothesis.  (Contributed by
       NM, 15-Sep-2003.) $)
    cbviunv $p |- U_ x e. A B = U_ y e. A C $=
      ( nfcv cbviun ) ABCDEBDGAEGFH $.

    $( Change bound variables in an indexed intersection.  (Contributed by Jeff
       Hankins, 26-Aug-2009.) $)
    cbviinv $p |- |^|_ x e. A B = |^|_ y e. A C $=
      ( nfcv cbviin ) ABCDEBDGAEGFH $.
  $}

  ${
    $d x y C $.  $d y A $.  $d y B $.
    $( Subset theorem for an indexed union.  (Contributed by NM, 13-Sep-2003.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iunss $p |- ( U_ x e. A B C_ C <-> A. x e. A B C_ C ) $=
      ( vy ciun wss cv wcel wrex cab wal wral df-iun sseq1i abss ralbii ralcom4
      wi dfss2 r19.23v albii 3bitrri 3bitri ) ABCFZDGEHZCIZABJZEKZDGUHUFDIZSZEL
      ZCDGZABMZUEUIDAEBCNOUHEDPUNUGUJSZELZABMUOABMZELULUMUPABECDTQUOAEBRUQUKEUG
      UJABUAUBUCUD $.
  $}

  ${
    $d x y C $.  $d y A $.  $d y B $.
    $( Subset implication for an indexed union.  (Contributed by NM,
       3-Sep-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    ssiun $p |- ( E. x e. A C C_ B -> C C_ U_ x e. A B ) $=
      ( vy wss wrex ciun cv wcel ssel reximi r19.37av syl eliun syl6ibr ssrdv
      wi ) DCFZABGZEDABCHZTEIZDJZUBCJZABGZUBUAJTUCUDRZABGUCUERSUFABDCUBKLUCUDAB
      MNAUBBCOPQ $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( Identity law for subset of an indexed union.  (Contributed by NM,
       12-Oct-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    ssiun2 $p |- ( x e. A -> B C_ U_ x e. A B ) $=
      ( vy cv wcel ciun wrex rspe ex eliun syl6ibr ssrdv ) AEBFZDCABCGZNDEZCFZQ
      ABHZPOFNQRQABIJAPBCKLM $.
  $}

  ${
    $d x A $.  $d x C $.  $d x D $.
    ssiun2s.1 $e |- ( x = C -> B = D ) $.
    $( Subset relationship for an indexed union.  (Contributed by NM,
       26-Oct-2003.) $)
    ssiun2s $p |- ( C e. A -> D C_ U_ x e. A B ) $=
      ( ciun wss nfcv nfiu1 nfss cv wceq sseq1d ssiun2 vtoclgaf ) CABCGZHEQHADB
      ADIAEQAEIABCJKALDMCEQFNABCOP $.
  $}

  ${
    $d x y $.  $d x B $.  $d y C $.  $d x D $.
    $( A subclass condition on the members of two indexed classes ` C ( x ) `
       and ` D ( y ) ` that implies a subclass relation on their indexed
       unions.  Generalization of Proposition 8.6 of [TakeutiZaring] p. 59.
       Compare ~ uniss2 .  (Contributed by NM, 9-Dec-2004.) $)
    iunss2 $p |- ( A. x e. A E. y e. B C C_ D ->
                 U_ x e. A C C_ U_ y e. B D ) $=
      ( wss wrex wral ciun ssiun ralimi iunss sylibr ) EFGBDHZACIEBDFJZGZACIACE
      JPGOQACBDFEKLACEPMN $.
  $}

  ${
    $d y A $.  $d x y $.  $d x B $.
    $( The indexed union of a class abstraction.  (Contributed by NM,
       27-Dec-2004.) $)
    iunab $p |- U_ x e. A { y | ph } = { y | E. x e. A ph } $=
      ( cab ciun wrex wceq cv wcel wb nfcv nfab1 nfiun cleqf abid eliun 3bitr4i
      rexbii mpgbir ) BDACEZFZABDGZCEZHCIZUBJZUEUDJZKCCUBUDBCDUACDLACMNUCCMOUEU
      AJZBDGUCUFUGUHABDACPSBUEDUAQUCCPRT $.

    $( The indexed union of a restricted class abstraction.  (Contributed by
       NM, 3-Jan-2004.)  (Proof shortened by Mario Carneiro, 14-Nov-2016.) $)
    iunrab $p |- U_ x e. A { y e. B | ph } = { y e. B | E. x e. A ph } $=
      ( cv wcel cab ciun wrex crab iunab wceq df-rab a1i iuneq2i r19.42v eqtr4i
      wa abbii 3eqtr4i ) BDCFEGZASZCHZIUCBDJZCHZBDACEKZIABDJZCEKZUCBCDLBDUGUDUG
      UDMBFDGACENOPUIUBUHSZCHUFUHCENUEUJCUBABDQTRUA $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.  $d x D $.
    iunxdif2.1 $e |- ( x = y -> C = D ) $.
    $( Indexed union with a class difference as its index.  (Contributed by NM,
       10-Dec-2004.) $)
    iunxdif2 $p |- ( A. x e. A E. y e. ( A \ B ) C C_ D ->
                 U_ y e. ( A \ B ) D = U_ x e. A C ) $=
      ( wss cdif wrex wral ciun wceq iunss2 difss iunss1 ax-mp cbviunv sseqtr4i
      wa jctil eqss sylibr ) EFHBCDIZJACKZBUDFLZACELZHZUGUFHZTUFUGMUEUIUHABCUDE
      FNUFBCFLZUGUDCHUFUJHCDOBUDCFPQABCEFGRSUAUFUGUBUC $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d y z C $.  $d x y z $.
    ssiinf.1 $e |- F/_ x C $.
    $( Subset theorem for an indexed intersection.  (Contributed by FL,
       15-Oct-2012.)  (Proof shortened by Mario Carneiro, 14-Oct-2016.) $)
    ssiinf $p |- ( C C_ |^|_ x e. A B <-> A. x e. A C C_ B ) $=
      ( vy cv ciin wcel wral wss cvv vex eliin ax-mp ralbii nfcv ralcomf dfss3
      wb bitri 3bitr4i ) FGZABCHZIZFDJZUCCIZFDJZABJZDUDKDCKZABJUFUGABJZFDJUIUEU
      KFDUCLIUEUKTFMAUCBCLNOPUGFADBEFBQRUAFDUDSUJUHABFDCSPUB $.
  $}

  ${
    $d x C $.
    $( Subset theorem for an indexed intersection.  (Contributed by NM,
       15-Oct-2003.) $)
    ssiin $p |- ( C C_ |^|_ x e. A B <-> A. x e. A C C_ B ) $=
      ( nfcv ssiinf ) ABCDADEF $.
  $}

  ${
    $d x y C $.  $d y A $.  $d y B $.
    $( Subset implication for an indexed intersection.  (Contributed by NM,
       15-Oct-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iinss $p |- ( E. x e. A B C_ C -> |^|_ x e. A B C_ C ) $=
      ( vy wss wrex ciin cv wcel wral cvv wb vex eliin ax-mp wi reximi r19.36av
      ssel syl syl5bi ssrdv ) CDFZABGZEABCHZDEIZUFJZUGCJZABKZUEUGDJZUGLJUHUJMEN
      AUGBCLOPUEUIUKQZABGUJUKQUDULABCDUGTRUIUKABSUAUBUC $.
  $}

  ${
    $d A y $.  $d B y $.  $d x y $.
    $( An indexed intersection is included in any of its members.  (Contributed
       by FL, 15-Oct-2012.) $)
    iinss2 $p |- ( x e. A -> |^|_ x e. A B C_ B ) $=
      ( vy cv wcel ciin wral wi cvv wb vex eliin ax-mp rsp sylbi com12 ssrdv )
      AEBFZDABCGZCDEZTFZSUACFZUBUCABHZSUCIUAJFUBUDKDLAUABCJMNUCABOPQR $.
  $}

  ${
    $d x y A $.
    $( Class union in terms of indexed union.  Definition in [Stoll] p. 43.
       (Contributed by NM, 28-Jun-1998.) $)
    uniiun $p |- U. A = U_ x e. A x $=
      ( vy cuni wel wrex cab cv ciun dfuni2 df-iun eqtr4i ) BDCAEABFCGABAHZICAB
      JACBMKL $.

    $( Class intersection in terms of indexed intersection.  Definition in
       [Stoll] p. 44.  (Contributed by NM, 28-Jun-1998.) $)
    intiin $p |- |^| A = |^|_ x e. A x $=
      ( vy cint wel wral cab cv ciin dfint2 df-iin eqtr4i ) BDCAEABFCGABAHZICAB
      JACBMKL $.

    $( An indexed union of singletons recovers the index set.  (Contributed by
       NM, 6-Sep-2005.) $)
    iunid $p |- U_ x e. A { x } = A $=
      ( vy cv csn ciun wceq cab wcel df-sn equcom abbii eqtri a1i iuneq2i iunab
      wrex risset abid2 3eqtr2i ) ABADZEZFABUACDZGZCHZFZBABUBUEUBUEGUABIUBUCUAG
      ZCHUECUAJUGUDCCAKLMNOUFUDABQZCHUCBIZCHBUDACBPUIUHCAUCBRLCBSTM $.
  $}

  ${
    $d x y $.  $d y A $.
    $( An indexed union of the empty set is empty.  (Contributed by NM,
       26-Mar-2003.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iun0 $p |- U_ x e. A (/) = (/) $=
      ( vy c0 ciun cv wcel wrex wn noel a1i nrex eliun mtbir 2false eqriv ) CAB
      DEZDCFZQGZRDGZSTABHTABTIAFBGRJZKLARBDMNUAOP $.

    $( An empty indexed union is empty.  (Contributed by NM, 4-Dec-2004.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    0iun $p |- U_ x e. (/) A = (/) $=
      ( vy c0 ciun cv wcel wrex rex0 eliun mtbir noel 2false eqriv ) CADBEZDCFZ
      OGZPDGQPBGZADHRAIAPDBJKPLMN $.

    $( An empty indexed intersection is the universal class.  (Contributed by
       NM, 20-Oct-2005.) $)
    0iin $p |- |^|_ x e. (/) A = _V $=
      ( vy c0 ciin cv wcel wral cab cvv df-iin vex ral0 2th abbi2i eqtr4i ) ADB
      ECFZBGZADHZCIJACDBKSCJQJGSCLRAMNOP $.

    $( Indexed intersection with a universal index class.  When ` A ` doesn't
       depend on ` x ` , this evaluates to ` A ` by ~ 19.3 and ~ abid2 .  When
       ` A = x ` , this evaluates to ` (/) ` by ~ intiin and ~ intv .
       (Contributed by NM, 11-Sep-2008.) $)
    viin $p |- |^|_ x e. _V A = { y | A. x y e. A } $=
      ( cvv ciin cv wcel wral cab wal df-iin ralv abbii eqtri ) ADCEBFCGZADHZBI
      OAJZBIABDCKPQBOALMN $.
  $}

  ${
    $d x y A $.  $d y B $.
    $( There is a nonempty class in an indexed collection ` B ( x ) ` iff the
       indexed union of them is nonempty.  (Contributed by NM, 15-Oct-2003.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    iunn0 $p |- ( E. x e. A B =/= (/) <-> U_ x e. A B =/= (/) ) $=
      ( vy cv wcel wex wrex c0 wne rexcom4 eliun exbii bitr4i n0 rexbii 3bitr4i
      ciun ) DEZCFZDGZABHZSABCRZFZDGZCIJZABHUCIJUBTABHZDGUETADBKUDUGDASBCLMNUFU
      AABDCOPDUCOQ $.
  $}

  ${
    $d y A $.  $d x y $.
    $( Indexed intersection of a class builder.  (Contributed by NM,
       6-Dec-2011.) $)
    iinab $p |- |^|_ x e. A { y | ph } = { y | A. x e. A ph } $=
      ( cab ciin wral wceq cv wcel nfcv nfab1 nfiin cleqf abid ralbii cvv eliin
      wb vex ax-mp 3bitr4i mpgbir ) BDACEZFZABDGZCEZHCIZUEJZUHUGJZSCCUEUGBCDUDC
      DKACLMUFCLNUHUDJZBDGZUFUIUJUKABDACOPUHQJUIULSCTBUHDUDQRUAUFCOUBUC $.

    $d x A $.  $d x B $.
    $( Indexed intersection of a restricted class builder.  (Contributed by NM,
       6-Dec-2011.) $)
    iinrab $p |- ( A =/= (/)
          -> |^|_ x e. A { y e. B | ph } = { y e. B | A. x e. A ph } ) $=
      ( c0 wne cv wcel wa wral cab crab ciin r19.28zv abbidv df-rab a1i iineq2i
      wceq iinab eqtri 3eqtr4g ) DFGZCHEIZAJZBDKZCLZUEABDKZJZCLBDACEMZNZUICEMUD
      UGUJCUEABDOPULBDUFCLZNUHBDUKUMUKUMTBHDIACEQRSUFBCDUAUBUICEQUC $.

    $d y B $.
    $( Indexed intersection of a restricted class builder.  (Contributed by NM,
       6-Dec-2011.) $)
    iinrab2 $p |- ( |^|_ x e. A { y e. B | ph } i^i B )
                      = { y e. B | A. x e. A ph } $=
      ( crab ciin cin wral wceq c0 cvv iineq1 0iin syl6eq incom inv1 eqtri rzal
      ineq1d rabid2 ralcom bitr2i sylib wne iinrab wss ssrab2 dfss mpbi syl6eqr
      eqtrd pm2.61ine ) BDACEFZGZEHZABDIZCEFZJDKDKJZUPEURUSUPLEHZEUSUOLEUSUOBKU
      NGLBDKUNMBUNNOTUTELHELEPEQROUSACEIZBDIZEURJZVABDSVCUQCEIVBUQCEUAACBEDUBUC
      UDULDKUEZUPUREHZURVDUOUREABCDEUFTUREUGURVEJUQCEUHUREUIUJUKUM $.
  $}

  ${
    $d y A $.  $d x y B $.  $d y C $.
    $( Indexed union of intersection.  Generalization of half of theorem
       ""Distributive laws"" in [Enderton] p. 30.  Use ~ uniiun to recover
       Enderton's theorem.  (Contributed by NM, 26-Mar-2004.) $)
    iunin2 $p |- U_ x e. A ( B i^i C ) = ( B i^i U_ x e. A C ) $=
      ( vy cin ciun cv wcel wrex r19.42v elin rexbii eliun anbi2i 3bitr4i eqriv
      wa ) EABCDFZGZCABDGZFZEHZSIZABJZUCCIZUCUAIZRZUCTIUCUBIUFUCDIZRZABJUFUIABJ
      ZRUEUHUFUIABKUDUJABUCCDLMUGUKUFAUCBDNOPAUCBSNUCCUALPQ $.

    $( Indexed union of intersection.  Generalization of half of theorem
       ""Distributive laws"" in [Enderton] p. 30.  Use ~ uniiun to recover
       Enderton's theorem.  (Contributed by Mario Carneiro, 30-Aug-2015.) $)
    iunin1 $p |- U_ x e. A ( C i^i B ) = ( U_ x e. A C i^i B ) $=
      ( cin ciun iunin2 wceq cv wcel incom a1i iuneq2i 3eqtr4i ) ABCDEZFCABDFZE
      ABDCEZFPCEABCDGABQOQOHAIBJDCKLMPCKN $.

    $( Indexed intersection of union.  Generalization of half of theorem
       ""Distributive laws"" in [Enderton] p. 30.  Use ~ intiin to recover
       Enderton's theorem.  (Contributed by NM, 19-Aug-2004.) $)
    iinun2 $p |- |^|_ x e. A ( B u. C ) = ( B u. |^|_ x e. A C ) $=
      ( vy cun ciin cv wcel wral wo r19.32v elun ralbii cvv eliin ax-mp 3bitr4i
      wb vex orbi2i eqriv ) EABCDFZGZCABDGZFZEHZUCIZABJZUGCIZUGUEIZKZUGUDIZUGUF
      IUJUGDIZKZABJUJUNABJZKUIULUJUNABLUHUOABUGCDMNUKUPUJUGOIZUKUPSETZAUGBDOPQU
      ARUQUMUISURAUGBUCOPQUGCUEMRUB $.

    $( Indexed union of class difference.  Generalization of half of theorem
       ""De Morgan's laws"" in [Enderton] p. 31.  Use ~ intiin to recover
       Enderton's theorem.  (Contributed by NM, 19-Aug-2004.) $)
    iundif2 $p |- U_ x e. A ( B \ C ) = ( B \ |^|_ x e. A C ) $=
      ( vy cdif ciun ciin cv wcel wrex wn wa eldif rexbii r19.42v rexnal cvv wb
      wral vex eliin ax-mp xchbinxr anbi2i 3bitri eliun 3bitr4i eqriv ) EABCDFZ
      GZCABDHZFZEIZUJJZABKZUNCJZUNULJZLZMZUNUKJUNUMJUPUQUNDJZLZMZABKUQVBABKZMUT
      UOVCABUNCDNOUQVBABPVDUSUQVDVAABTZURVAABQUNRJURVESEUAAUNBDRUBUCUDUEUFAUNBU
      JUGUNCULNUHUI $.
  $}

  ${
    $d x B $.  $d y C $.  $d x D $.  $d x y $.
    $( Rearrange indexed unions over intersection.  (Contributed by NM,
       18-Dec-2008.) $)
    2iunin $p |- U_ x e. A U_ y e. B ( C i^i D )
        = ( U_ x e. A C i^i U_ y e. B D ) $=
      ( cin ciun wceq cv wcel iunin2 a1i iuneq2i iunin1 eqtri ) ACBDEFGHZHACEBD
      FHZGZHACEHRGACQSQSIAJCKBDEFLMNACREOP $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( Indexed intersection of class difference.  Generalization of half of
       theorem ""De Morgan's laws"" in [Enderton] p. 31.  Use ~ uniiun to recover
       Enderton's theorem.  (Contributed by NM, 5-Oct-2006.) $)
    iindif2 $p |- ( A =/= (/) ->
                 |^|_ x e. A ( B \ C ) = ( B \ U_ x e. A C ) ) $=
      ( vy c0 wne cdif ciin ciun cv wcel wn wa r19.28zv eldif bicomi ralbii cvv
      wral wrex ralnex eliun xchbinxr anbi2i 3bitr3g wb vex eliin ax-mp 3bitr4g
      eqrdv ) BFGZEABCDHZIZCABDJZHZUMEKZUNLZABTZURCLZURUPLZMZNZURUOLZURUQLUMVAU
      RDLZMZNZABTVAVGABTZNUTVDVAVGABOVHUSABUSVHURCDPQRVIVCVAVIVFABUAVBVFABUBAUR
      BDUCUDUEUFURSLVEUTUGEUHAURBUNSUIUJURCUPPUKUL $.

    $( Indexed intersection of intersection.  Generalization of half of theorem
       ""Distributive laws"" in [Enderton] p. 30.  Use ~ intiin to recover
       Enderton's theorem.  (Contributed by Mario Carneiro, 19-Mar-2015.) $)
    iinin2 $p |- ( A =/= (/) ->
      |^|_ x e. A ( B i^i C ) = ( B i^i |^|_ x e. A C ) ) $=
      ( vy c0 wne cin ciin cv wcel wral wa r19.28zv elin wb eliin ax-mp 3bitr4g
      cvv ralbii vex anbi2i eqrdv ) BFGZEABCDHZIZCABDIZHZUEEJZUFKZABLZUJCKZUJUH
      KZMZUJUGKZUJUIKUEUMUJDKZMZABLUMUQABLZMULUOUMUQABNUKURABUJCDOUAUNUSUMUJTKZ
      UNUSPEUBZAUJBDTQRUCSUTUPULPVAAUJBUFTQRUJCUHOSUD $.

    $( Indexed intersection of intersection.  Generalization of half of theorem
       ""Distributive laws"" in [Enderton] p. 30.  Use ~ intiin to recover
       Enderton's theorem.  (Contributed by Mario Carneiro, 19-Mar-2015.) $)
    iinin1 $p |- ( A =/= (/) ->
      |^|_ x e. A ( C i^i B ) = ( |^|_ x e. A C i^i B ) ) $=
      ( c0 wne cin ciin iinin2 wceq cv wcel incom a1i iineq2i 3eqtr4g ) BEFABCD
      GZHCABDHZGABDCGZHRCGABCDIABSQSQJAKBLDCMNORCMP $.
  $}

  ${
    $d x A $.
    $( The indexed intersection of a complement.  (Contributed by G&eacute;rard
       Lang, 5-Aug-2018.) $)
    iinvdif $p |- |^|_ x e. A ( _V \ B ) = ( _V \ U_ x e. A B ) $=
      ( cvv cdif ciin ciun wceq c0 dif0 0iun difeq2i 0iin iineq1 iuneq1 difeq2d
      3eqtr4ri 3eqtr4a iindif2 pm2.61ine ) ABDCEZFZDABCGZEZHBIBIHZAIUAFZDAICGZE
      ZUBUDDIEDUHUFDJUGIDACKLAUAMQABIUANUEUCUGDABICOPRABDCST $.
  $}

  ${
    $d A x y $.  $d X x y $.  $d B x $.
    $( Elementhood in a relative intersection.  (Contributed by Mario Carneiro,
       30-Dec-2016.) $)
    elriin $p |- ( B e. ( A i^i |^|_ x e. X S ) <->
      ( B e. A /\ A. x e. X B e. S ) ) $=
      ( ciin cin wcel wa wral elin eliin pm5.32i bitri ) CBAEDFZGHCBHZCOHZIPCDH
      AEJZICBOKPQRACEDBLMN $.

    $( Relative intersection of an empty family.  (Contributed by Stefan
       O'Rear, 3-Apr-2015.) $)
    riin0 $p |- ( X = (/) -> ( A i^i |^|_ x e. X S ) = A ) $=
      ( c0 wceq ciin cin iineq1 ineq2d cvv 0iin ineq2i inv1 eqtri syl6eq ) DEFZ
      BADCGZHBAECGZHZBQRSBADECIJTBKHBSKBACLMBNOP $.

    $( Relative intersection of a nonempty family.  (Contributed by Stefan
       O'Rear, 3-Apr-2015.) $)
    riinn0 $p |- ( ( A. x e. X S C_ A /\ X =/= (/) ) ->
        ( A i^i |^|_ x e. X S ) = |^|_ x e. X S ) $=
      ( wss wral c0 wne wa ciin incom wceq wrex r19.2z ancoms iinss df-ss sylib
      cin syl syl5eq ) CBEZADFZDGHZIZBADCJZSUFBSZUFBUFKUEUFBEZUGUFLUEUBADMZUHUD
      UCUIUBADNOADCBPTUFBQRUA $.

    $( Relative intersection of a relative abstraction.  (Contributed by Stefan
       O'Rear, 3-Apr-2015.) $)
    riinrab $p |- ( A i^i |^|_ x e. X { y e. A | ph } ) =
        { y e. A | A. x e. X ph } $=
      ( crab ciin cin wral wceq c0 riin0 rzal ralrimivw rabid2 sylibr eqtrd wne
      wss ssrab2 rgenw riinn0 mpan iinrab pm2.61ine ) DBEACDFZGZHZABEIZCDFZJEKE
      KJZUHDUJBDUFELUKUICDIDUJJUKUICDABEMNUICDOPQEKRZUHUGUJUFDSZBEIULUHUGJUMBEA
      CDTUABDUFEUBUCABCEDUDQUE $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d y V $.
    iinxsng.1 $e |- ( x = A -> B = C ) $.
    $( A singleton index picks out an instance of an indexed intersection's
       argument.  (Contributed by NM, 15-Jan-2012.)  (Proof shortened by Mario
       Carneiro, 17-Nov-2016.) $)
    iinxsng $p |- ( A e. V -> |^|_ x e. { A } B = C ) $=
      ( vy wcel csn ciin cv wral cab df-iin wceq eleq2d ralsng abbi1dv syl5eq )
      BEHZABIZCJGKZCHZAUALZGMDAGUACNTUDGDUCUBDHABEAKBOCDUBFPQRS $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.  $d x y D $.  $d x y E $.  $d y V $.
    $d y W $.
    iinxprg.1 $e |- ( x = A -> C = D ) $.
    iinxprg.2 $e |- ( x = B -> C = E ) $.
    $( Indexed intersection with an unordered pair index.  (Contributed by NM,
       25-Jan-2012.) $)
    iinxprg $p |- ( ( A e. V /\ B e. W )
        -> |^|_ x e. { A , B } C = ( D i^i E ) ) $=
      ( vy wcel wa cv cpr wral cab ciin wceq eleq2d ralprg abbidv df-in 3eqtr4g
      cin df-iin ) BGLCHLMZKNZDLZABCOZPZKQUHELZUHFLZMZKQAUJDREFUEUGUKUNKUIULUMA
      BCGHANZBSDEUHITUOCSDFUHJTUAUBAKUJDUFKEFUCUD $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d y V $.
    iunxsng.1 $e |- ( x = A -> B = C ) $.
    $( A singleton index picks out an instance of an indexed union's argument.
       (Contributed by Mario Carneiro, 25-Jun-2016.) $)
    iunxsng $p |- ( A e. V -> U_ x e. { A } B = C ) $=
      ( vy wcel csn ciun cv wrex eliun wceq eleq2d rexsng syl5bb eqrdv ) BEHZGA
      BIZCJZDGKZUAHUBCHZATLSUBDHZAUBTCMUCUDABEAKBNCDUBFOPQR $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.
    iunxsn.1 $e |- A e. _V $.
    iunxsn.2 $e |- ( x = A -> B = C ) $.
    $( A singleton index picks out an instance of an indexed union's argument.
       (Contributed by NM, 26-Mar-2004.)  (Proof shortened by Mario Carneiro,
       25-Jun-2016.) $)
    iunxsn $p |- U_ x e. { A } B = C $=
      ( cvv wcel csn ciun wceq iunxsng ax-mp ) BGHABICJDKEABCDGFLM $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( Separate a union in an indexed union.  (Contributed by NM,
       27-Dec-2004.)  (Proof shortened by Mario Carneiro, 17-Nov-2016.) $)
    iunun $p |- U_ x e. A ( B u. C ) = ( U_ x e. A B u. U_ x e. A C ) $=
      ( vy cun ciun cv wcel wrex r19.43 elun rexbii eliun orbi12i 3bitr4i eqriv
      wo ) EABCDFZGZABCGZABDGZFZEHZSIZABJZUDUAIZUDUBIZRZUDTIUDUCIUDCIZUDDIZRZAB
      JUJABJZUKABJZRUFUIUJUKABKUEULABUDCDLMUGUMUHUNAUDBCNAUDBDNOPAUDBSNUDUAUBLP
      Q $.

    $( Separate a union in the index of an indexed union.  (Contributed by NM,
       26-Mar-2004.)  (Proof shortened by Mario Carneiro, 17-Nov-2016.) $)
    iunxun $p |- U_ x e. ( A u. B ) C = ( U_ x e. A C u. U_ x e. B C ) $=
      ( vy cun ciun cv wcel wrex rexun eliun orbi12i bitr4i elun 3bitr4i eqriv
      wo ) EABCFZDGZABDGZACDGZFZEHZDIZASJZUDUAIZUDUBIZRZUDTIUDUCIUFUEABJZUEACJZ
      RUIUEABCKUGUJUHUKAUDBDLAUDCDLMNAUDSDLUDUAUBOPQ $.
  $}

  ${
    $d x y z $.  $d x z A $.  $d z B $.  $d y z C $.
    $( Separate an indexed union in the index of an indexed union.
       (Contributed by Mario Carneiro, 5-Dec-2016.) $)
    iunxiun $p |- U_ x e. U_ y e. A B C = U_ y e. A U_ x e. B C $=
      ( vz ciun cv wcel wa wex eliun anbi1i r19.41v bitr4i exbii rexcom4 df-rex
      wrex 3bitr4i bitri rexbii eqriv ) FABCDGZEGZBCADEGZGZFHZEIZAUDSZUHUFIZBCS
      ZUHUEIUHUGIAHZUDIZUIJZAKZUMDIZUIJZAKZBCSZUJULUPURBCSZAKUTUOVAAUOUQBCSZUIJ
      VAUNVBUIBUMCDLMUQUIBCNOPURBACQOUIAUDRUKUSBCUKUIADSUSAUHDELUIADRUAUBTAUHUD
      ELBUHCUFLTUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( A relationship involving union and indexed intersection.  Exercise 23 of
       [Enderton] p. 33.  (Contributed by NM, 25-Nov-2003.)  (Proof shortened
       by Mario Carneiro, 17-Nov-2016.) $)
    iinuni $p |- ( A u. |^| B ) = |^|_ x e. B ( A u. x ) $=
      ( vy cv wcel cint cab cun wral ciin r19.32v elun ralbii vex elint2 orbi2i
      wo 3bitr4ri abbii df-un df-iin 3eqtr4i ) DEZBFZUDCGZFZRZDHUDBAEZIZFZACJZD
      HBUFIACUJKUHULDUEUDUIFZRZACJUEUMACJZRULUHUEUMACLUKUNACUDBUIMNUGUOUEAUDCDO
      PQSTDBUFUAADCUJUBUC $.

    $( A relationship involving union and indexed union.  Exercise 25 of
       [Enderton] p. 33.  (Contributed by NM, 25-Nov-2003.)  (Proof shortened
       by Mario Carneiro, 17-Nov-2016.) $)
    iununi $p |- ( ( B = (/) -> A = (/) ) <->
                ( A u. U. B ) = U_ x e. B ( A u. x ) ) $=
      ( c0 wceq wi cuni cun cv ciun wn wne iunconst sylbir iun0 iuneq2d 3eqtr4a
      df-ne id syl6eq ja eqcomd uneq1d uniiun uneq2i iunun 3eqtr4g unieq uneq2d
      uni0 un0 iuneq1 0iun eqeq12d biimpcd impbii ) CDEZBDEZFZBCGZHZACBAIZHZJZE
      ZUSBACVBJZHACBJZVFHVAVDUSBVGVFUSVGBUQURVGBEZUQKCDLVHCDRACBMNURACDJDVGBACO
      URACBDURSZPVIQUAUBUCUTVFBACUDUEACBVBUFUGUQVEURUQVABVDDUQVABDHBUQUTDBUQUTD
      GDCDUHUJTUIBUKTUQVDADVCJDACDVCULAVCUMTUNUOUP $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Subclass relationship for power class and union.  (Contributed by NM,
       18-Jul-2006.) $)
    sspwuni $p |- ( A C_ ~P B <-> U. A C_ B ) $=
      ( vx cv cpw wcel wral wss cuni selpw ralbii dfss3 unissb 3bitr4i ) CDZBEZ
      FZCAGOBHZCAGAPHAIBHQRCACBJKCAPLCABMN $.

    $( Two ways to express a collection of subclasses.  (Contributed by NM,
       19-Jul-2006.) $)
    pwssb $p |- ( A C_ ~P B <-> A. x e. A x C_ B ) $=
      ( cpw wss cuni cv wral sspwuni unissb bitri ) BCDEBFCEAGCEABHBCIABCJK $.
  $}

  $( Relationship for power class and union.  (Contributed by NM,
     18-Jul-2006.) $)
  elpwuni $p |- ( B e. A -> ( A C_ ~P B <-> U. A = B ) ) $=
    ( cpw wss cuni wcel wceq sspwuni unissel expcom eqimss impbid1 syl5bb ) ABC
    DAEZBDZBAFZNBGZABHPOQOPQABIJNBKLM $.

  ${
    $d x y A $.
    $( The power class of an intersection in terms of indexed intersection.
       Exercise 24(a) of [Enderton] p. 33.  (Contributed by NM,
       29-Nov-2003.) $)
    iinpw $p |- ~P |^| A = |^|_ x e. A ~P x $=
      ( vy cint cpw cv ciin wss wcel ssint selpw ralbii bitr4i cvv wb vex eliin
      wral ax-mp 3bitr4i eqriv ) CBDZEZABAFZEZGZCFZUBHZUGUEIZABRZUGUCIUGUFIZUHU
      GUDHZABRUJAUGBJUIULABCUDKLMCUBKUGNIUKUJOCPAUGBUENQSTUA $.

    $( Inclusion of an indexed union of a power class in the power class of the
       union of its index.  Part of Exercise 24(b) of [Enderton] p. 33.
       (Contributed by NM, 25-Nov-2003.) $)
    iunpwss $p |- U_ x e. A ~P x C_ ~P U. A $=
      ( vy cv cpw ciun cuni wss wrex wcel ssiun eliun selpw rexbii bitri uniiun
      sseq2i 3imtr4i ssriv ) CABADZEZFZBGZEZCDZTHZABIZUEABTFZHZUEUBJZUEUDJZABTU
      EKUJUEUAJZABIUGAUEBUALULUFABCTMNOUKUEUCHUICUCMUCUHUEABPQORS $.
  $}

  $( Relative intersection of a nonempty set.  (Contributed by Stefan O'Rear,
     3-Apr-2015.)  (Revised by Mario Carneiro, 5-Jun-2015.) $)
  rintn0 $p |- ( ( X C_ ~P A /\ X =/= (/) ) -> ( A i^i |^| X ) = |^| X ) $=
    ( cpw wss c0 wne wa cint incom wceq cuni intssuni2 ssid sspwuni mpbi syl6ss
    cin df-ss sylib syl5eq ) BACZDBEFGZABHZQUCAQZUCAUCIUBUCADUDUCJUBUCUAKZABUAL
    UAUADUEADUAMUAANOPUCARST $.

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                     Disjointness
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c Disj_ $.

  $( Extend wff notation to include the statement that a family of classes
     ` B ( x ) ` , for ` x e. A ` , is a disjoint family. $)
  wdisj $a wff Disj_ x e. A B $.

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( A collection of classes ` B ( x ) ` is disjoint when for each element
       ` y ` , it is in ` B ( x ) ` for at most one ` x ` .  (Contributed by
       Mario Carneiro, 14-Nov-2016.)  (Revised by NM, 16-Jun-2017.) $)
    df-disj $a |- ( Disj_ x e. A B <-> A. y E* x e. A y e. B ) $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( Alternate definition for disjoint classes.  (Contributed by NM,
       17-Jun-2017.) $)
    dfdisj2 $p |- ( Disj_ x e. A B <-> A. y E* x ( x e. A /\ y e. B ) ) $=
      ( wdisj cv wcel wrmo wal wa wmo df-disj df-rmo albii bitri ) ACDEBFDGZACH
      ZBIAFCGPJAKZBIABCDLQRBPACMNO $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( If each element of a collection is contained in a disjoint collection,
       the original collection is also disjoint.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjss2 $p |- ( A. x e. A B C_ C ->
      ( Disj_ x e. A C -> Disj_ x e. A B ) ) $=
      ( vy wss wral cv wcel wrmo wal wdisj ssel ralimi rmoim syl alimdv df-disj
      wi 3imtr4g ) CDFZABGZEHZDIZABJZEKUCCIZABJZEKABDLABCLUBUEUGEUBUFUDSZABGUEU
      GSUAUHABCDUCMNUFUDABOPQAEBDRAEBCRT $.
  $}

  $( Equality theorem for disjoint collection.  (Contributed by Mario Carneiro,
     14-Nov-2016.) $)
  disjeq2 $p |- ( A. x e. A B = C ->
    ( Disj_ x e. A B <-> Disj_ x e. A C ) ) $=
    ( wceq wral wdisj wss wi eqimss2 ralimi disjss2 syl eqimss impbid ) CDEZABF
    ZABCGZABDGZQDCHZABFRSIPTABDCJKABDCLMQCDHZABFSRIPUAABCDNKABCDLMO $.

  ${
    $d x ph $.
    disjeq2dv.1 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Equality deduction for disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjeq2dv $p |- ( ph -> ( Disj_ x e. A B <-> Disj_ x e. A C ) ) $=
      ( wceq wral wdisj wb ralrimiva disjeq2 syl ) ADEGZBCHBCDIBCEIJANBCFKBCDEL
      M $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( A subset of a disjoint collection is disjoint.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjss1 $p |- ( A C_ B -> ( Disj_ x e. B C -> Disj_ x e. A C ) ) $=
      ( vy wss cv wcel wa wmo wal wdisj wi ssel anim1d alrimiv moim syl dfdisj2
      alimdv 3imtr4g ) BCFZAGZCHZEGDHZIZAJZEKUCBHZUEIZAJZEKACDLABDLUBUGUJEUBUIU
      FMZAKUGUJMUBUKAUBUHUDUEBCUCNOPUIUFAQRTAECDSAEBDSUA $.

    $( Equality theorem for disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjeq1 $p |- ( A = B -> ( Disj_ x e. A C <-> Disj_ x e. B C ) ) $=
      ( wceq wdisj wss wi eqimss2 disjss1 syl eqimss impbid ) BCEZABDFZACDFZNCB
      GOPHCBIACBDJKNBCGPOHBCLABCDJKM $.

    disjeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjeq1d $p |- ( ph -> ( Disj_ x e. A C <-> Disj_ x e. B C ) ) $=
      ( wceq wdisj wb disjeq1 syl ) ACDGBCEHBDEHIFBCDEJK $.

    $d x ph $.
    disjeq12d.1 $e |- ( ph -> C = D ) $.
    $( Equality theorem for disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    disjeq12d $p |- ( ph -> ( Disj_ x e. A C <-> Disj_ x e. B D ) ) $=
      ( wdisj disjeq1d wceq cv wcel adantr disjeq2dv bitrd ) ABCEIBDEIBDFIABCDE
      GJABDEFAEFKBLDMHNOP $.
  $}

  ${
    $d x y z A $.  $d z B $.  $d z C $.
    cbvdisj.1 $e |- F/_ y B $.
    cbvdisj.2 $e |- F/_ x C $.
    cbvdisj.3 $e |- ( x = y -> B = C ) $.
    $( Change bound variables in a disjoint collection.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    cbvdisj $p |- ( Disj_ x e. A B <-> Disj_ y e. A C ) $=
      ( vz cv wcel wrmo wal wdisj nfcri weq eleq2d cbvrmo albii df-disj 3bitr4i
      ) IJZDKZACLZIMUBEKZBCLZIMACDNBCENUDUFIUCUEABCBIDFOAIEGOABPDEUBHQRSAICDTBI
      CETUA $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x C $.
    cbvdisjv.1 $e |- ( x = y -> B = C ) $.
    $( Change bound variables in a disjoint collection.  (Contributed by Mario
       Carneiro, 11-Dec-2016.) $)
    cbvdisjv $p |- ( Disj_ x e. A B <-> Disj_ y e. A C ) $=
      ( nfcv cbvdisj ) ABCDEBDGAEGFH $.
  $}

  ${
    $d z A $.  $d z B $.  $d x z $.  $d y z $.
    nfdisj.1 $e |- F/_ y A $.
    nfdisj.2 $e |- F/_ y B $.
    $( Bound-variable hypothesis builder for disjoint collection.  (Contributed
       by Mario Carneiro, 14-Nov-2016.) $)
    nfdisj $p |- F/ y Disj_ x e. A B $=
      ( vz wdisj cv wcel wa wmo wal dfdisj2 wnf wtru nftru weq wn a1i wnfc trud
      nfcvf nfeld nfcri nfand adantl nfmod2 nfal nfxfr ) ACDHAIZCJZGIDJZKZALZGM
      BAGCDNUOBGUOBOPUNBAAQBARBMSZUNBOPUPULUMBUPBUKCBAUCBCUAUPETUDUMBOUPBGDFUET
      UFUGUHUBUIUJ $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( Bound-variable hypothesis builder for disjoint collection.  (Contributed
       by Mario Carneiro, 14-Nov-2016.) $)
    nfdisj1 $p |- F/ x Disj_ x e. A B $=
      ( vy wdisj cv wcel wrmo wal df-disj nfrmo1 nfal nfxfr ) ABCEDFCGZABHZDIAA
      DBCJOADNABKLM $.
  $}

  ${
    $d i j x A $.  $d j x B $.  $d i x C $.
    disjmo.1 $e |- ( i = j -> B = C ) $.
    $( Two ways to say that a collection ` B ( i ) ` for ` i e. A ` is
       disjoint.  (Contributed by Mario Carneiro, 26-Mar-2015.)  (Revised by
       Mario Carneiro, 14-Nov-2016.) $)
    disjor $p |- ( Disj_ i e. A B <->
      A. i e. A A. j e. A ( i = j \/ ( B i^i C ) = (/) ) ) $=
      ( vx wdisj cv wcel wrmo wal wo wral wi ralcom4 wex bitri bitr4i ralbii c0
      weq cin wceq df-disj wa orcom df-or neq0 elin imbi1i 19.23v 3bitri eleq2d
      wn exbii rmo4 albii 3bitr4i ) DABHGIZBJZDAKZGLZDEUBZBCUCZUAUDZMZEANZDANZD
      GABUEVAUTCJZUFZVDOZEANZGLZDANVMDANZGLVIVCVMDGAPVHVNDAVHVLGLZEANVNVGVPEAVG
      VFVDMVFUOZVDOZVPVDVFUGVFVDUHVRVKGQZVDOVPVQVSVDVQUTVEJZGQVSGVEUIVTVKGUTBCU
      JUPRUKVKVDGULSUMTVLEGAPRTVBVOGVAVJDEAVDBCUTFUNUQURUSS $.

    $( Two ways to say that a collection ` B ( i ) ` for ` i e. A ` is
       disjoint.  (Contributed by Mario Carneiro, 26-Mar-2015.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    disjmoOLD $p |- ( A. x E* i ( i e. A /\ x e. B ) <->
      A. i e. A A. j e. A ( i = j \/ ( B i^i C ) = (/) ) ) $=
      ( cv wcel wa wmo wal wdisj wceq cin c0 wo wral dfdisj2 disjor bitr3i ) EH
      ZBIAHCIJEKALEBCMUBFHNCDOPNQFBREBREABCSBCDEFGTUA $.
  $}

  ${
    $d i j x A $.  $d i j B $.
    $( Two ways to say that a collection ` B ( i ) ` for ` i e. A ` is
       disjoint.  (Contributed by Mario Carneiro, 14-Nov-2016.) $)
    disjors $p |- ( Disj_ x e. A B <-> A. i e. A A. j e. A
      ( i = j \/ ( [_ i / x ]_ B i^i [_ j / x ]_ B ) = (/) ) ) $=
      ( wdisj cv csb wceq c0 wo wral nfcv nfcsb1v csbeq1a cbvdisj csbeq1 disjor
      cin bitri ) ABCFDBADGZCHZFUAEGZIUBAUCCHZSJIKEBLDBLADBCUBDCMAUACNAUACOPBUB
      UDDEAUAUCCQRT $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d x y z C $.  $d x z D $.  $d x y z X $.
    $d x z Y $.
    disji.1 $e |- ( x = X -> B = C ) $.
    disji.2 $e |- ( x = Y -> B = D ) $.
    $( Property of a disjoint collection: if ` B ( X ) = C ` and
       ` B ( Y ) = D ` , and ` X =/= Y ` , then ` C ` and ` D ` are disjoint.
       (Contributed by Mario Carneiro, 14-Nov-2016.) $)
    disji2 $p |- ( ( Disj_ x e. A B /\ ( X e. A /\ Y e. A ) /\
      X =/= Y ) -> ( C i^i D ) = (/) ) $=
      ( vy vz wcel wa cin c0 wceq wo cv csb nfcv wdisj df-ne wral disjors eqeq1
      wn csbhypf ineq1d eqeq1d orbi12d eqeq2 ineq2d rspc2v syl5bi impcom 3impia
      wne ord ) ABCUAZFBLGBLMZFGUQZDENZOPZVAFGPZUFUSUTMZVCFGUBVEVDVCUTUSVDVCQZU
      SJRZKRZPZAVGCSZAVHCSZNZOPZQZKBUCJBUCUTVFABCJKUDVNVFFVHPZDVKNZOPZQJKFGBBVG
      FPZVIVOVMVQVGFVHUEVRVLVPOVRVJDVKAJFCDAFTADTHUGUHUIUJVHGPZVOVDVQVCVHGFUKVS
      VPVBOVSVKEDAKGCEAGTAETIUGULUIUJUMUNUOURUNUP $.

    $( Property of a disjoint collection: if ` B ( X ) = C ` and
       ` B ( Y ) = D ` have a common element ` Z ` , then ` X = Y ` .
       (Contributed by Mario Carneiro, 14-Nov-2016.) $)
    disji $p |- ( ( Disj_ x e. A B /\ ( X e. A /\ Y e. A ) /\
      ( Z e. C /\ Z e. D ) ) -> X = Y ) $=
      ( wcel wa wdisj cin c0 wne wceq inelcm disji2 3expia necon1d syl3an3
      3impia ) HDKHEKLABCMZFBKGBKLZDENZOPZFGQZHDERUDUEUGUHUDUELFGUFOUDUEFGPUFOQ
      ABCDEFGIJSTUAUCUB $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d x C $.
    $( If there is a function ` C ( y ) ` such that ` C ( y ) = x ` for all
       ` y e. B ( x ) ` , then the sets ` B ( x ) ` for distinct ` x e. A ` are
       disjoint.  (Contributed by Mario Carneiro, 10-Dec-2016.) $)
    invdisj $p |- ( A. x e. A A. y e. B C = x -> Disj_ x e. A B ) $=
      ( cv wceq wral wcel wa wmo wal wdisj nfra2 df-ral rsp eqcom syl6ib imim2i
      wi impd alimi sylbi mo2icl syl alrimi dfdisj2 sylibr ) EAFZGZBDHZACHZUICI
      ZBFDIZJZAKZBLACDMULUPBUJABCDNULUOUIEGZTZALZUPULUMUKTZALUSUKACOUTURAUTUMUN
      UQUKUNUQTUMUKUNUJUQUJBDPEUIQRSUAUBUCUOAEUDUEUFABCDUGUH $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d x y z C $.  $d x y z D $.
    $( A disjoint collection yields disjoint indexed unions for disjoint index
       sets.  (Contributed by Mario Carneiro, 26-Mar-2015.)  (Revised by Mario
       Carneiro, 14-Nov-2016.) $)
    disjiun $p |- ( ( Disj_ x e. A B /\
      ( C C_ A /\ D C_ A /\ ( C i^i D ) = (/) ) ) ->
        ( U_ x e. C B i^i U_ x e. D B ) = (/) ) $=
      ( vy vz wss cin c0 wceq wa cv wcel wi wrex wral impcom syl syl5bi ciun wn
      wdisj w3a wal wrmo df-disj wne elin eliun anbi12i weq wex nfv rmo2 ssralv
      bitri an4 r19.29 id imp eleq1d biimpcd rexlimiv ex expimpd anim12d inelcm
      syl6 exlimiv expd sylbi necon2bd impancom 3impa alimdv eq0 sylibr ) ABCUC
      ZDBHZEBHZDEIZJKZUDZLFMZADCUAZAECUAZIZNZUBZFUEZWHJKWDVSWKVSWECNZABUFZFUEWD
      WKAFBCUGWDWMWJFVTWAWCWMWJOVTWALZWMWCWJWNWMLZWIWBJWIWLADPZWLAEPZLZWOWBJUHZ
      WIWEWFNZWEWGNZLWRWEWFWGUIWTWPXAWQAWEDCUJAWEECUJUKUQWMWNWRWSOZWMWLAGULZOZA
      BQZGUMZWNXBOWLAGBWLGUNUOXFWNWRWSWNWRLVTWPLZWAWQLZLZXFWSVTWAWPWQURXEXIWSOG
      XEXIGMZDNZXJENZLWSXEXGXKXHXLXEVTWPXKXEVTLXDADQZWPXKOVTXEXMXDADBUPRXMWPXKX
      MWPLXDWLLZADPXKXDWLADUSXNXKADXNAMZDNXKXNXOXJDXDWLXCXDUTVAZVBVCVDSVESVFXEW
      AWQXLXEWALXDAEQZWQXLOWAXEXQXDAEBUPRXQWQXLXQWQLXNAEPXLXDWLAEUSXNXLAEXNXOEN
      XLXNXOXJEXPVBVCVDSVESVFVGXJDEVHVIVJTVKVLRTVMVNVOVPTRFWHVQVR $.

    $( A disjoint collection yields disjoint indexed unions for disjoint index
       sets.  (Contributed by Mario Carneiro, 26-Mar-2015.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    disjiunOLD $p |- ( ( A. y E* x ( x e. A /\ y e. B ) /\
      ( C C_ A /\ D C_ A /\ ( C i^i D ) = (/) ) ) ->
        ( U_ x e. C B i^i U_ x e. D B ) = (/) ) $=
      ( cv wcel wa wmo wal wdisj wss cin c0 wceq w3a ciun dfdisj2 disjiun
      sylanbr ) AGCHBGDHIAJBKACDLECMFCMEFNOPQAEDRAFDRNOPABCDSACDEFTUA $.
  $}

  ${
    $d x y $.  $d y A $.
    $( Any collection of singletons is disjoint.  (Contributed by Mario
       Carneiro, 14-Nov-2016.) $)
    sndisj $p |- Disj_ x e. A { x } $=
      ( vy cv csn wdisj wcel wmo dfdisj2 weq moeq simpr elsn sylib eqcomd moimi
      wa ax-mp mpgbir ) ABADZEZFTBGZCDZUAGZQZAHZCACBUAIACJZAHUFAUCKUEUGAUEUCTUE
      UDCAJUBUDLCTMNOPRS $.
  $}

  $( Any collection of empty sets is disjoint.  (Contributed by Mario Carneiro,
     14-Nov-2016.) $)
  0disj $p |- Disj_ x e. A (/) $=
    ( c0 cv csn wss wral wdisj 0ss rgenw sndisj disjss2 mp2 ) CADEZFZABGABNHABC
    HOABNIJABKABCNLM $.

  ${
    $d x y A $.  $d y B $.
    $( A singleton collection is disjoint.  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    disjxsn $p |- Disj_ x e. { A } B $=
      ( vy csn wdisj cv wcel wa wmo dfdisj2 wceq moeq elsni adantr moimi mpgbir
      ax-mp ) ABEZCFAGZSHZDGCHZIZAJZDADSCKTBLZAJUDABMUCUEAUAUEUBTBNOPRQ $.

    $( An empty collection is disjoint.  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    disjx0 $p |- Disj_ x e. (/) B $=
      ( c0 csn wss wdisj 0ss disjxsn disjss1 mp2 ) CCDZEAKBFACBFKGACBHACKBIJ $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d y z C $.  $d x y z D $.  $d x y z E $.
    disjprg.1 $e |- ( x = A -> C = D ) $.
    disjprg.2 $e |- ( x = B -> C = E ) $.
    $( A pair collection is disjoint iff the two sets in the family have empty
       intersection.  (Contributed by Mario Carneiro, 14-Nov-2016.) $)
    disjprg $p |- ( ( A e. V /\ B e. V /\ A =/= B ) ->
      ( Disj_ x e. { A , B } C <-> ( D i^i E ) = (/) ) ) $=
      ( vy vz wceq cin c0 wo wral wa wb nfcv wtru wcel wne w3a cv csb cpr wdisj
      eqeq1 csbhypf ineq1d eqeq1d orbi12d ralbidv ralprg 3adant3 id eqcomd orcd
      a1tru 2thd eqeq2 ineq2d simp3 neneqd biorf syl tru biantrur syl6bb bitr4d
      wn eqcom incom syl6eq biantru anbi12d bitrd disjors pm4.24 3bitr4g ) BGUA
      ZCGUAZBCUBZUCZJUDZKUDZLZAWEDUEZAWFDUEZMZNLZOZKBCUFZPZJWMPZEFMZNLZWQQZAWMD
      UGWQWDWOBWFLZEWIMZNLZOZKWMPZCWFLZFWIMZNLZOZKWMPZQZWRWAWBWOXIRWCWNXCXHJBCG
      GWEBLZWLXBKWMXJWGWSWKXAWEBWFUHXJWJWTNXJWHEWIAJBDEABSZAESZHUIUJUKULUMWECLZ
      WLXGKWMXMWGXDWKXFWECWFUHXMWJXENXMWHFWIAJCDFACSZAFSZIUIUJUKULUMUNUOWDXCWQX
      HWQWDXCTBCLZWQOZQZWQWAWBXCXRRWCXBTXQKBCGGWFBLZXBTXSWSXAXSWFBXSUPUQURXSUSU
      TWFCLZWSXPXAWQWFCBVAXTWTWPNXTWIFEAKCDFXNXOIUIVBUKULUNUOWDWQXQXRWDXPVKWQXQ
      RWDBCWAWBWCVCVDXPWQVEVFZTXQVGVHVIVJWDXHXQTQZWQWAWBXHYBRWCXGXQTKBCGGXSXDXP
      XFWQXSXDCBLXPWFBCVACBVLVIXSXEWPNXSXEFEMWPXSWIEFAKBDEXKXLHUIVBFEVMVNUKULXT
      XGTXTXDXFXTWFCXTUPUQURXTUSUTUNUOWDWQXQYBYATXQVGVOVIVJVPVQAWMDJKVRWQVSVT
      $.
  $}

  ${
    $d r s u v x y z A $.  $d r s u v x z B $.  $d r s u v y z C $.
    $( An indexed union of a disjoint collection of disjoint collections is
       disjoint if each component is disjoint, and the disjoint unions in the
       collection are also disjoint.  Note that ` B ( y ) ` and ` C ( x ) ` may
       have the displayed free variables.  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    disjxiun $p |- ( Disj_ y e. A B -> ( Disj_ x e. U_ y e. A B C <->
      ( A. y e. A Disj_ x e. B C /\ Disj_ y e. A U_ x e. B C ) ) ) $=
      ( vu vv vr vs vz wdisj ciun wral wa nfcv cv wcel wss syl weq nfiu1 nfdisj
      wi ssiun2 disjss1 com12 ralrimi a1i csb cin c0 wceq wo wn simprll nfcsb1v
      simplr csbeq1a cbviun syl6sseqr simprlr csbeq1 sseq1d vtoclga simpl sylib
      cbvdisj disjor rsp2 imp ord impr disjiun syl13anc expr ralrimivva iuneq1d
      orrd sylibr nfiun ex jcad wrex eleq2i eliun anbi12i reeanv bitr4i simplrr
      simprl simplrl disjeq1d rspc sylc ad2antrr disjors simpld simprd eleqtrrd
      bitri adantl jca mpd wne ss2in syl2anc simprr disji2 syl121anc pm2.61dane
      simpr sseq0 rexlimdvva syl5bi ralrimivv impbid ) BCDKZABCDLZEKZADEKZBCMZB
      CADELZKZNZXQXSYAYCXSYAUCXQXSXTBCABXREBCDUABEOZUBBPCQZXSXTYFDXRRXSXTUCBCDU
      DADXREUESUFUGUHXQXSYCXQXSNZFCABFPZDUIZELZKZYCYGFGTZYJABGPZDUIZELZUJZUKULZ
      UMZGCMFCMYKYGYRFGCCYGYHCQZYMCQZNZNZYLYQYGUUAYLUNZYQYGUUAUUCNZNZXSYIXRRZYN
      XRRZYIYNUJUKULZYQXQXSUUDUQUUEYSUUFYGYSYTUUCUOYSYIFCYILZXRFCYIUDBFCDYIFDOZ
      BYHDUPZBYHDURZUSZUTZSUUEYTUUGYGYSYTUUCVAUUFUUGFYMCYLYIYNXRBYHYMDVBZVCUUNV
      DSYGUUAUUCUUHUUBYLUUHYGUUAYLUUHUMZYGUUPGCMFCMZUUAUUPUCYGFCYIKZUUQYGXQUURX
      QXSVEBFCDYIUUJUUKUULVGVFCYIYNFGUUOVHVFUUPFGCCVISVJVKVLAXREYIYNVMVNVOVRVPC
      YJYOFGYLAYIYNEUUOVQVHVSBFCYBYJFYBOABYIEUUKYEVTBFTZADYIEUULVQVGVSWAWBXQYDX
      SXQYDNZHITZAHPZEUIZAIPZEUIZUJZUKULZUMZIXRMHXRMXSUUTUVHHIXRXRUVBXRQZUVDXRQ
      ZNZUVBYIQZUVDYNQZNZGCWCFCWCZUUTUVHUVKUVLFCWCZUVMGCWCZNUVOUVIUVPUVJUVQUVIU
      VBUUIQUVPXRUUIUVBUUMWDFUVBCYIWEWTUVJUVDGCYNLZQUVQXRUVRUVDBGCDYNGDOBYMDUPB
      YMDURUSWDGUVDCYNWEWTWFUVLUVMFGCCWGWHUUTUVNUVHFGCCUUTUUANZUVNUVHUVSUVNNUVA
      UVGUVSUVNUVAUNZUVGUVSUVNUVTNZNZUVGYHYMUWBYLNZUVTUVGUVSUVNUVTYLWIUWCUVAUVG
      UWCUVHIYIMHYIMZUVLUVDYIQZNUVHUWCAYIEKZUWDUVSUWFUWAYLUVSYSYAUWFUUTYSYTWJZX
      QYAYCUUAWKXTUWFBYHCABYIEUUKYEUBUUSADYIEUULWLWMWNWOAYIEHIWPVFUWCUVLUWEUWCU
      VLUVMUVSUVNUVTYLWKZWQUWCUVDYNYIUWCUVLUVMUWHWRYLYIYNULUWBUUOXAWSXBUVHHIYIY
      IVIWNVKXCUWBYHYMXDZNZUVFYPRZYQUVGUWJUVCYJRZUVEYORZUWKUWJUVLUWLUWJUVLUVMUV
      SUVNUVTUWIWKZWQUVLUVCHYIUVCLYJHYIUVCUDAHYIEUVCHEOAUVBEUPAUVBEURUSUTSUWJUV
      MUWMUWJUVLUVMUWNWRUVMUVEIYNUVELYOIYNUVEUDAIYNEUVEIEOAUVDEUPAUVDEURUSUTSUV
      CYJUVEYOXEXFUWJJCABJPZDUIZELZKZYSYTUWIYQUWJYCUWRUVSYCUWAUWIXQYAYCUUAWIWOB
      JCYBUWQJYBOABUWPEBUWODUPYEVTBJTADUWPEBUWODURVQVGVFUVSYSUWAUWIUWGWOUVSYTUW
      AUWIUUTYSYTXGWOUWBUWIXKJCUWQYJYOYHYMJFTAUWPYIEBUWOYHDVBVQJGTAUWPYNEBUWOYM
      DVBVQXHXIUVFYPXLXFXJVOVRWAXMXNXOAXREHIWPVSWAXP $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w y z C $.  $d w x z D $.
    disjxun.1 $e |- ( x = y -> C = D ) $.
    $( The union of two disjoint collections.  (Contributed by Mario Carneiro,
       14-Nov-2016.) $)
    disjxun $p |- ( ( A i^i B ) = (/) -> ( Disj_ x e. ( A u. B ) C <->
      ( Disj_ x e. A C /\ Disj_ x e. B C /\
        A. x e. A A. y e. B ( C i^i D ) = (/) ) ) ) $=
      ( vz vw cin c0 wceq weq cv wo wral wa eqeq1d orbi12d bitri csb wdisj wcel
      cun wn wb disjel eleq1 notbid syl5ibcom con2d impr biorf bicomd 2ralbidva
      w3a syl anbi2d ralunb ralbii nfcv nfcsb1v nfin nfeq1 nfor equequ2 csbhypf
      nfral ineq2d cbvralv equequ1 csbeq1a ineq1d ralbidv syl5bbr cbvral r19.26
      nfv 3bitr3i disjor anbi1i equcom syl6bb incom syl6eq ralcom syl5bb anbi1d
      3bitr4g disjors anbi2ci anbi12d df-3an anandir ) CDJKLZHIMZAHNZEUAZAINZEU
      AZJZKLZOZICDUDZPZHCPZXEHDPZQZACEUBZEFJZKLZBDPACPZQZADEUBZXLQZQZAXDEUBZXIX
      NXLUPZWOXFXMXGXOWOABMZXKOZBCPZACPZXTBDPZACPZQZYBXLQXFXMWOYDXLYBWOXTXKABCD
      WOANZCUCZBNZDUCZQQZXKXTYJXSUEZXKXTUFWOYGYIYKWOYGQZXSYIYLYFDUCZUEXSYIUECDY
      FUGXSYMYIYFYHDUHUIUJUKULXSXKUMUQUNUOZURXTBXDPZACPYAYCQZACPXFYEYOYPACXTBCD
      USUTYOXEAHCYOHVRXCAIXDAXDVAWPXBAWPAVRAXAKAWRWTAWQEVBAWSEVBVCVDVEZVHYOAIMZ
      EWTJZKLZOZIXDPAHMZXEUUAXTIBXDIBMZYRXSYTXKIBAVFUUCYSXJKUUCWTFEAIYHEFAYHVAZ
      AFVAZGVGVIRSVJUUBUUAXCIXDUUBYRWPYTXBAHIVKUUBYSXAKUUBEWRWTAWQEVLVMRSVNVOVP
      YAYCACVQVSXIYBXLCEFABGVTWAWIWOXCICPZHDPZXCIDPZHDPZQZXLUUIQXGXOWOUUGXLUUIU
      UGYDWOXLUUGXTACPZBDPYDUUFUUKHBDUUFHAMZWREJZKLZOZACPHBMZUUKUUOXCAICUUOIVRY
      QYRUULWPUUNXBAIHVFYRUUMXAKYREWTWRAWSEVLVIRSVPUUPUUOXTACUUPUULXSUUNXKUUPUU
      LBAMXSHBAVKBAWBWCUUPUUMXJKUUPUUMFEJXJUUPWRFEAHYHEFUUDUUEGVGVMFEWDWERSVNVO
      VJXTBADCWFTYNWGWHXGUUFUUHQZHDPUUJXEUUQHDXCICDUSUTUUFUUHHDVQTXNUUIXLADEHIW
      JWKWIWLXQXEHXDPXHAXDEHIWJXEHCDUSTXRXIXNQXLQXPXIXNXLWMXIXNXLWNTWI $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( Expand a disjoint collection with any number of empty sets.
       (Contributed by Mario Carneiro, 15-Nov-2016.) $)
    disjss3 $p |- ( ( A C_ B /\ A. x e. ( B \ A ) C = (/) ) ->
      ( Disj_ x e. A C <-> Disj_ x e. B C ) ) $=
      ( vy wss c0 wceq cdif wa wdisj cv wcel wmo wal wi wn syl alimdv dfdisj2
      wral df-ral w3a simp3r n0i simp3l eldif simp2 syl5bir mpand mt3d jca 3exp
      syl5bi imp moim 3imtr4g disjss1 adantr impbid ) BCFZDGHZACBIZUAZJZABDKZAC
      DKZVEALZBMZELZDMZJZANZEOVHCMZVKJZANZEOVFVGVEVMVPEVEVOVLPZAOZVMVPPVAVDVRVD
      VHVCMZVBPZAOVAVRVBAVCUBVAVTVQAVAVTVOVLVAVTVOUCZVIVKWAVIVBWAVKVBQVAVTVNVKU
      DZDVJUERWAVNVIQZVBVAVTVNVKUFVNWCJVSWAVBVHCBUGVAVTVOUHUIUJUKWBULUMSUNUOVOV
      LAUPRSAEBDTAECDTUQVAVGVFPVDABCDURUSUT $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                     Binary relations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Extend wff notation to include the general binary relation predicate.
     Note that the syntax is simply three class symbols in a row.  Since binary
     relations are the only possible wff expressions consisting of three class
     expressions in a row, the syntax is unambiguous.  (For an example of how
     syntax could become ambiguous if we are not careful, see the comment in
     ~ cneg .) $)
  wbr $a wff A R B $.

  $( Define a general binary relation.  Note that the syntax is simply three
     class symbols in a row.  Definition 6.18 of [TakeutiZaring] p. 29
     generalized to arbitrary classes.  Class ` R ` often denotes a relation
     such as "" ` < ` "" that compares two classes ` A ` and ` B ` , which might
     be numbers such as ` 1 ` and ` 2 ` (see ~ df-ltxr for the specific
     definition of ` < ` ).  As a wff, relations are true or false.  For
     example, ` ( R = { <. 2 , 6 >. , <. 3 , 9 >. } -> 3 R 9 ) ` ( ~ ex-br ).
     Often class ` R ` meets the ` Rel ` criteria to be defined in ~ df-rel ,
     and in particular ` R ` may be a function (see ~ df-fun ).  This
     definition of relations is well-defined, although not very meaningful,
     when classes ` A ` and/or ` B ` are proper classes (i.e. are not sets).
     On the other hand, we often find uses for this definition when ` R ` is a
     proper class (see for example ~ iprc ).  (Contributed by NM,
     31-Dec-1993.) $)
  df-br $a |- ( A R B <-> <. A , B >. e. R ) $.

  $( Equality theorem for binary relations.  (Contributed by NM,
     4-Jun-1995.) $)
  breq $p |- ( R = S -> ( A R B <-> A S B ) ) $=
    ( wceq cop wcel wbr eleq2 df-br 3bitr4g ) CDEABFZCGLDGABCHABDHCDLIABCJABDJK
    $.

  $( Equality theorem for a binary relation.  (Contributed by NM,
     31-Dec-1993.) $)
  breq1 $p |- ( A = B -> ( A R C <-> B R C ) ) $=
    ( wceq cop wcel wbr opeq1 eleq1d df-br 3bitr4g ) ABEZACFZDGBCFZDGACDHBCDHMN
    ODABCIJACDKBCDKL $.

  $( Equality theorem for a binary relation.  (Contributed by NM,
     31-Dec-1993.) $)
  breq2 $p |- ( A = B -> ( C R A <-> C R B ) ) $=
    ( wceq cop wcel wbr opeq2 eleq1d df-br 3bitr4g ) ABEZCAFZDGCBFZDGCADHCBDHMN
    ODABCIJCADKCBDKL $.

  $( Equality theorem for a binary relation.  (Contributed by NM,
     8-Feb-1996.) $)
  breq12 $p |- ( ( A = B /\ C = D ) -> ( A R C <-> B R D ) ) $=
    ( wceq wbr breq1 breq2 sylan9bb ) ABFACEGBCEGCDFBDEGABCEHCDBEIJ $.

  ${
    breqi.1 $e |- R = S $.
    $( Equality inference for binary relations.  (Contributed by NM,
       19-Feb-2005.) $)
    breqi $p |- ( A R B <-> A S B ) $=
      ( wceq wbr wb breq ax-mp ) CDFABCGABDGHEABCDIJ $.
  $}

  ${
    breq1i.1 $e |- A = B $.
    $( Equality inference for a binary relation.  (Contributed by NM,
       8-Feb-1996.) $)
    breq1i $p |- ( A R C <-> B R C ) $=
      ( wceq wbr wb breq1 ax-mp ) ABFACDGBCDGHEABCDIJ $.

    $( Equality inference for a binary relation.  (Contributed by NM,
       8-Feb-1996.) $)
    breq2i $p |- ( C R A <-> C R B ) $=
      ( wceq wbr wb breq2 ax-mp ) ABFCADGCBDGHEABCDIJ $.

    ${
      breq12i.2 $e |- C = D $.
      $( Equality inference for a binary relation.  (Contributed by NM,
         8-Feb-1996.)  (Proof shortened by Eric Schmidt, 4-Apr-2007.) $)
      breq12i $p |- ( A R C <-> B R D ) $=
        ( wceq wbr wb breq12 mp2an ) ABHCDHACEIBDEIJFGABCDEKL $.
    $}
  $}

  ${
    breq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for a binary relation.  (Contributed by NM,
       8-Feb-1996.) $)
    breq1d $p |- ( ph -> ( A R C <-> B R C ) ) $=
      ( wceq wbr wb breq1 syl ) ABCGBDEHCDEHIFBCDEJK $.

    $( Equality deduction for a binary relation.  (Contributed by NM,
       29-Oct-2011.) $)
    breqd $p |- ( ph -> ( C A D <-> C B D ) ) $=
      ( wceq wbr wb breq syl ) ABCGDEBHDECHIFDEBCJK $.

    $( Equality deduction for a binary relation.  (Contributed by NM,
       8-Feb-1996.) $)
    breq2d $p |- ( ph -> ( C R A <-> C R B ) ) $=
      ( wceq wbr wb breq2 syl ) ABCGDBEHDCEHIFBCDEJK $.

    ${
      breq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for a binary relation.  (Contributed by NM,
         8-Feb-1996.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.) $)
      breq12d $p |- ( ph -> ( A R C <-> B R D ) ) $=
        ( wceq wbr wb breq12 syl2anc ) ABCIDEIBDFJCEFJKGHBCDEFLM $.
    $}

    ${
      breq123d.2 $e |- ( ph -> R = S ) $.
      breq123d.3 $e |- ( ph -> C = D ) $.
      $( Equality deduction for a binary relation.  (Contributed by NM,
         29-Oct-2011.) $)
      breq123d $p |- ( ph -> ( A R C <-> B S D ) ) $=
        ( wbr breq12d breqd bitrd ) ABDFKCEFKCEGKABCDEFHJLAFGCEIMN $.
    $}

    ${
      breqan12i.2 $e |- ( ps -> C = D ) $.
      $( Equality deduction for a binary relation.  (Contributed by NM,
         8-Feb-1996.) $)
      breqan12d $p |- ( ( ph /\ ps ) -> ( A R C <-> B R D ) ) $=
        ( wceq wbr wb breq12 syl2an ) ACDJEFJCEGKDFGKLBHICDEFGMN $.

      $( Equality deduction for a binary relation.  (Contributed by NM,
         8-Feb-1996.) $)
      breqan12rd $p |- ( ( ps /\ ph ) -> ( A R C <-> B R D ) ) $=
        ( wbr wb breqan12d ancoms ) ABCEGJDFGJKABCDEFGHILM $.
    $}
  $}

  $( Two classes are different if they don't have the same relationship to a
     third class.  (Contributed by NM, 3-Jun-2012.) $)
  nbrne1 $p |- ( ( A R B /\ -. A R C ) -> B =/= C ) $=
    ( wbr wn wne wceq breq2 biimpcd necon3bd imp ) ABDEZACDEZFBCGMNBCBCHMNBCADI
    JKL $.

  $( Two classes are different if they don't have the same relationship to a
     third class.  (Contributed by NM, 3-Jun-2012.) $)
  nbrne2 $p |- ( ( A R C /\ -. B R C ) -> A =/= B ) $=
    ( wbr wn wne wceq breq1 biimpcd necon3bd imp ) ACDEZBCDEZFABGMNABABHMNABCDI
    JKL $.

  ${
    eqbrtr.1 $e |- A = B $.
    eqbrtr.2 $e |- B R C $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 1-Aug-1999.) $)
    eqbrtri $p |- A R C $=
      ( wbr breq1i mpbir ) ACDGBCDGFABCDEHI $.
  $}

  ${
    eqbrtrd.1 $e |- ( ph -> A = B ) $.
    eqbrtrd.2 $e |- ( ph -> B R C ) $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 8-Oct-1999.) $)
    eqbrtrd $p |- ( ph -> A R C ) $=
      ( wbr breq1d mpbird ) ABDEHCDEHGABCDEFIJ $.
  $}

  ${
    eqbrtrr.1 $e |- A = B $.
    eqbrtrr.2 $e |- A R C $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 1-Aug-1999.) $)
    eqbrtrri $p |- B R C $=
      ( eqcomi eqbrtri ) BACDABEGFH $.
  $}

  ${
    eqbrtrrd.1 $e |- ( ph -> A = B ) $.
    eqbrtrrd.2 $e |- ( ph -> A R C ) $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 24-Oct-1999.) $)
    eqbrtrrd $p |- ( ph -> B R C ) $=
      ( eqcomd eqbrtrd ) ACBDEABCFHGI $.
  $}

  ${
    breqtr.1 $e |- A R B $.
    breqtr.2 $e |- B = C $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 1-Aug-1999.) $)
    breqtri $p |- A R C $=
      ( wbr breq2i mpbi ) ABDGACDGEBCADFHI $.
  $}

  ${
    breqtrd.1 $e |- ( ph -> A R B ) $.
    breqtrd.2 $e |- ( ph -> B = C ) $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 24-Oct-1999.) $)
    breqtrd $p |- ( ph -> A R C ) $=
      ( wbr breq2d mpbid ) ABCEHBDEHFACDBEGIJ $.
  $}

  ${
    breqtrr.1 $e |- A R B $.
    breqtrr.2 $e |- C = B $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 1-Aug-1999.) $)
    breqtrri $p |- A R C $=
      ( eqcomi breqtri ) ABCDECBFGH $.
  $}

  ${
    breqtrrd.1 $e |- ( ph -> A R B ) $.
    breqtrrd.2 $e |- ( ph -> C = B ) $.
    $( Substitution of equal classes into a binary relation.  (Contributed by
       NM, 24-Oct-1999.) $)
    breqtrrd $p |- ( ph -> A R C ) $=
      ( eqcomd breqtrd ) ABCDEFADCGHI $.
  $}

  ${
    3brtr3.1 $e |- A R B $.
    3brtr3.2 $e |- A = C $.
    3brtr3.3 $e |- B = D $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 11-Aug-1999.) $)
    3brtr3i $p |- C R D $=
      ( eqbrtrri breqtri ) CBDEACBEGFIHJ $.
  $}

  ${
    3brtr4.1 $e |- A R B $.
    3brtr4.2 $e |- C = A $.
    3brtr4.3 $e |- D = B $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 11-Aug-1999.) $)
    3brtr4i $p |- C R D $=
      ( eqbrtri breqtrri ) CBDECABEGFIHJ $.
  $}

  ${
    3brtr3d.1 $e |- ( ph -> A R B ) $.
    3brtr3d.2 $e |- ( ph -> A = C ) $.
    3brtr3d.3 $e |- ( ph -> B = D ) $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 18-Oct-1999.) $)
    3brtr3d $p |- ( ph -> C R D ) $=
      ( wbr breq12d mpbid ) ABCFJDEFJGABDCEFHIKL $.
  $}

  ${
    3brtr4d.1 $e |- ( ph -> A R B ) $.
    3brtr4d.2 $e |- ( ph -> C = A ) $.
    3brtr4d.3 $e |- ( ph -> D = B ) $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 21-Feb-2005.) $)
    3brtr4d $p |- ( ph -> C R D ) $=
      ( wbr breq12d mpbird ) ADEFJBCFJGADBECFHIKL $.
  $}

  ${
    3brtr3g.1 $e |- ( ph -> A R B ) $.
    3brtr3g.2 $e |- A = C $.
    3brtr3g.3 $e |- B = D $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 16-Jan-1997.) $)
    3brtr3g $p |- ( ph -> C R D ) $=
      ( wbr breq12i sylib ) ABCFJDEFJGBDCEFHIKL $.
  $}

  ${
    3brtr4g.1 $e |- ( ph -> A R B ) $.
    3brtr4g.2 $e |- C = A $.
    3brtr4g.3 $e |- D = B $.
    $( Substitution of equality into both sides of a binary relation.
       (Contributed by NM, 16-Jan-1997.) $)
    3brtr4g $p |- ( ph -> C R D ) $=
      ( wbr breq12i sylibr ) ABCFJDEFJGDBECFHIKL $.
  $}

  ${
    syl5eqbr.1 $e |- A = B $.
    syl5eqbr.2 $e |- ( ph -> B R C ) $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       11-Oct-1999.) $)
    syl5eqbr $p |- ( ph -> A R C ) $=
      ( eqid 3brtr4g ) ACDBDEGFDHI $.
  $}

  ${
    syl5eqbrr.1 $e |- B = A $.
    syl5eqbrr.2 $e |- ( ph -> B R C ) $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       17-Sep-2004.) $)
    syl5eqbrr $p |- ( ph -> A R C ) $=
      ( eqid 3brtr3g ) ACDBDEGFDHI $.
  $}

  ${
    syl5breq.1 $e |- A R B $.
    syl5breq.2 $e |- ( ph -> B = C ) $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       11-Oct-1999.) $)
    syl5breq $p |- ( ph -> A R C ) $=
      ( wbr a1i breqtrd ) ABCDEBCEHAFIGJ $.
  $}

  ${
    syl5breqr.1 $e |- A R B $.
    syl5breqr.2 $e |- ( ph -> C = B ) $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       24-Apr-2005.) $)
    syl5breqr $p |- ( ph -> A R C ) $=
      ( eqcomd syl5breq ) ABCDEFADCGHI $.
  $}

  ${
    syl6eqbr.1 $e |- ( ph -> A = B ) $.
    syl6eqbr.2 $e |- B R C $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       12-Oct-1999.) $)
    syl6eqbr $p |- ( ph -> A R C ) $=
      ( wbr breq1d mpbiri ) ABDEHCDEHGABCDEFIJ $.
  $}

  ${
    syl6eqbrr.1 $e |- ( ph -> B = A ) $.
    syl6eqbrr.2 $e |- B R C $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       4-Jan-2006.) $)
    syl6eqbrr $p |- ( ph -> A R C ) $=
      ( eqcomd syl6eqbr ) ABCDEACBFHGI $.
  $}

  ${
    syl6breq.1 $e |- ( ph -> A R B ) $.
    syl6breq.2 $e |- B = C $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       11-Oct-1999.) $)
    syl6breq $p |- ( ph -> A R C ) $=
      ( eqid 3brtr3g ) ABCBDEFBHGI $.
  $}

  ${
    syl6breqr.1 $e |- ( ph -> A R B ) $.
    syl6breqr.2 $e |- C = B $.
    $( A chained equality inference for a binary relation.  (Contributed by NM,
       24-Apr-2005.) $)
    syl6breqr $p |- ( ph -> A R C ) $=
      ( eqcomi syl6breq ) ABCDEFDCGHI $.
  $}

  ${
    ssbrd.1 $e |- ( ph -> A C_ B ) $.
    $( Deduction from a subclass relationship of binary relations.
       (Contributed by NM, 30-Apr-2004.) $)
    ssbrd $p |- ( ph -> ( C A D -> C B D ) ) $=
      ( cop wcel wbr sseld df-br 3imtr4g ) ADEGZBHMCHDEBIDECIABCMFJDEBKDECKL $.
  $}

  ${
    ssbri.1 $e |- A C_ B $.
    $( Inference from a subclass relationship of binary relations.
       (Contributed by NM, 28-Mar-2007.)  (Revised by Mario Carneiro,
       8-Feb-2015.) $)
    ssbri $p |- ( C A D -> C B D ) $=
      ( wbr wi wtru wss a1i ssbrd trud ) CDAFCDBFGHABCDABIHEJKL $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d y z R $.  $d x y z $.  $d y ph $.
    nfbrd.2 $e |- ( ph -> F/_ x A ) $.
    nfbrd.3 $e |- ( ph -> F/_ x R ) $.
    nfbrd.4 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of bound-variable hypothesis builder ~ nfbr .
       (Contributed by NM, 13-Dec-2005.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfbrd $p |- ( ph -> F/ x A R B ) $=
      ( wbr cop wcel df-br nfopd nfeld nfxfrd ) CDEICDJZEKABCDELABPEABCDFHMGNO
      $.
  $}

  ${
    $d y A $.  $d y B $.  $d y R $.  $d x y $.
    nfbr.1 $e |- F/_ x A $.
    nfbr.2 $e |- F/_ x R $.
    nfbr.3 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for binary relation.  (Contributed by
       NM, 1-Sep-1999.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    nfbr $p |- F/ x A R B $=
      ( wbr wnf wtru wnfc a1i nfbrd trud ) BCDHAIJABCDABKJELADKJFLACKJGLMN $.
  $}

  ${
    $d x y $.  $d y z A $.  $d y z R $.
    $( Relationship between a binary relation and a class abstraction.
       (Contributed by Andrew Salmon, 8-Jul-2011.) $)
    brab1 $p |- ( x R A <-> x e. { z | z R A } ) $=
      ( vy cv wbr wsbc cab wcel cvv wb vex breq1 sbcie2g ax-mp df-sbc bitr3i )
      AFZCDGZBFZCDGZBSHZSUBBIJSKJUCTLAMUBEFZCDGTBESKUAUDCDNUDSCDNOPUBBSQR $.
  $}

  $( The empty binary relation never holds.  (Contributed by NM,
     23-Aug-2018.) $)
  br0 $p |- -. A (/) B $=
    ( c0 wbr cop wcel noel df-br mtbir ) ABCDABEZCFJGABCHI $.

  $( If two sets are in a binary relation, the relation cannot be empty.
     (Contributed by Alexander van der Vekens, 7-Jul-2018.) $)
  brne0 $p |- ( A R B -> R =/= (/) ) $=
    ( wbr cop wcel c0 wne df-br ne0i sylbi ) ABCDABEZCFCGHABCICLJK $.

  $( The union of two binary relations.  (Contributed by NM, 21-Dec-2008.) $)
  brun $p |- ( A ( R u. S ) B <-> ( A R B \/ A S B ) ) $=
    ( cop cun wcel wo wbr elun df-br orbi12i 3bitr4i ) ABEZCDFZGNCGZNDGZHABOIAB
    CIZABDIZHNCDJABOKRPSQABCKABDKLM $.

  $( The intersection of two relations.  (Contributed by FL, 7-Oct-2008.) $)
  brin $p |- ( A ( R i^i S ) B <-> ( A R B /\ A S B ) ) $=
    ( cop cin wcel wa wbr elin df-br anbi12i 3bitr4i ) ABEZCDFZGNCGZNDGZHABOIAB
    CIZABDIZHNCDJABOKRPSQABCKABDKLM $.

  $( The difference of two binary relations.  (Contributed by Scott Fenton,
     11-Apr-2011.) $)
  brdif $p |- ( A ( R \ S ) B <-> ( A R B /\ -. A S B ) ) $=
    ( cop cdif wcel wn wa wbr eldif df-br notbii anbi12i 3bitr4i ) ABEZCDFZGPCG
    ZPDGZHZIABQJABCJZABDJZHZIPCDKABQLUARUCTABCLUBSABDLMNO $.

  ${
    $d y z A $.  $d y z B $.  $d y z C $.  $d y z D $.  $d y z R $.
    $d x y z $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       13-Dec-2005.)  (Modified by NM, 22-Aug-2018.) $)
    sbcbr123 $p |- ( [. A / x ]. B R C
           <-> [_ A / x ]_ B [_ A / x ]_ R [_ A / x ]_ C ) $=
      ( vy cvv wcel wbr wsbc csb wb wsb dfsbcq2 csbeq1 breq123d nfcsb1v csbeq1a
      cv c0 wceq nfbr weq sbie vtoclbg wn sbcex con3i br0 csbprc mtbiri 2falsed
      breqd pm2.61i ) BGHZCDEIZABJZABCKZABDKZABEKZIZLUPAFMAFSZCKZAVBDKZAVBEKZIZ
      UQVAFBGUPAFBNVBBUAVCURVDUSVEUTAVBBCOAVBBEOAVBBDOPUPVFAFAVCVDVEAVBCQAVBEQA
      VBDQUBAFUCCVCDVDEVEAVBCRAVBERAVBDRPUDUEUOUFZUQVAUQUOUPABUGUHVGVAURUSTIURU
      SUIVGUTTURUSABEUJUMUKULUN $.

    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       13-Dec-2005.)  (Proof shortened by Andrew Salmon, 9-Jul-2011.)  Obsolete
       as of 22-Aug-2018.  Use ~ sbcbr123 instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    sbcbrgOLD $p |- ( A e. D -> ( [. A / x ]. B R C <->
           [_ A / x ]_ B [_ A / x ]_ R [_ A / x ]_ C ) ) $=
      ( vy wbr wsb cv csb wsbc dfsbcq2 wceq csbeq1 breq123d nfcsb1v weq csbeq1a
      nfbr sbie vtoclbg ) CDFHZAGIAGJZCKZAUDDKZAUDFKZHZUCABLABCKZABDKZABFKZHGBE
      UCAGBMUDBNUEUIUFUJUGUKAUDBCOAUDBFOAUDBDOPUCUHAGAUEUFUGAUDCQAUDFQAUDDQTAGR
      CUEDUFFUGAUDCSAUDFSAUDDSPUAUB $.
  $}

  ${
    $d x B $.  $d x C $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       23-Aug-2018.) $)
    sbcbr $p |- ( [. A / x ]. B R C <-> B [_ A / x ]_ R C ) $=
      ( wbr wsbc csb sbcbr123 cvv wcel wb csbconstg breq12d wn br0 2false breqd
      c0 a1i csbprc 3bitr4d pm2.61i bitri ) CDEFABGABCHZABDHZABEHZFZCDUGFZABCDE
      IBJKZUHUILUJUECUFDUGABCJMABDJMNUJOZUEUFSFZCDSFZUHUIULUMLUKULUMUEUFPCDPQTU
      KUGSUEUFABEUAZRUKUGSCDUNRUBUCUD $.
  $}

  ${
    $d x R $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       13-Dec-2005.) $)
    sbcbr12g $p |- ( A e. V ->
                 ( [. A / x ]. B R C <-> [_ A / x ]_ B R [_ A / x ]_ C ) ) $=
      ( wbr wsbc csb wcel sbcbr123 csbconstg breqd syl5bb ) CDEGABHABCIZABDIZAB
      EIZGBFJZOPEGABCDEKRQEOPABEFLMN $.
  $}

  ${
    $d x C $.  $d x R $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       13-Dec-2005.) $)
    sbcbr1g $p |- ( A e. V -> ( [. A / x ]. B R C <-> [_ A / x ]_ B R C ) ) $=
      ( wcel wbr wsbc csb sbcbr12g csbconstg breq2d bitrd ) BFGZCDEHABIABCJZABD
      JZEHPDEHABCDEFKOQDPEABDFLMN $.
  $}

  ${
    $d x B $.  $d x R $.
    $( Move substitution in and out of a binary relation.  (Contributed by NM,
       13-Dec-2005.) $)
    sbcbr2g $p |- ( A e. V -> ( [. A / x ]. B R C <-> B R [_ A / x ]_ C ) ) $=
      ( wcel wbr wsbc csb sbcbr12g csbconstg breq1d bitrd ) BFGZCDEHABIABCJZABD
      JZEHCQEHABCDEFKOPCQEABCFLMN $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                Ordered-pair class abstractions (class builders)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c |-> $.  $( Maps-to symbol $)

  $( Extend class notation to include ordered-pair class abstraction (class
     builder). $)
  copab $a class { <. x , y >. | ph } $.

  $( Extend the definition of a class to include maps-to notation for defining
     a function via a rule. $)
  cmpt $a class ( x e. A |-> B ) $.

  ${
    $d x z $.  $d y z $.  $d z ph $.
    $( Define the class abstraction of a collection of ordered pairs.
       Definition 3.3 of [Monk1] p. 34.  Usually ` x ` and ` y ` are distinct,
       although the definition doesn't strictly require it (see ~ dfid2 for a
       case where they are not distinct).  The brace notation is called ""class
       abstraction"" by Quine; it is also (more commonly) called a ""class
       builder"" in the literature.  An alternate definition using no
       existential quantifiers is shown by ~ dfopab2 .  For example,
       ` R = { <. x , y >. | ( x e. CC /\ y e. CC /\ ( x + 1 ) = y ) } `
       ` -> 3 R 4 ` ( ~ ex-opab ).  (Contributed by NM, 4-Jul-1994.) $)
    df-opab $a |- { <. x , y >. | ph } =
                  { z | E. x E. y ( z = <. x , y >. /\ ph ) } $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.
    $( Define maps-to notation for defining a function via a rule.  Read as
       ""the function defined by the map from ` x ` (in ` A ` ) to
       ` B ( x ) ` .""  The class expression ` B ` is the value of the function
       at ` x ` and normally contains the variable ` x ` .  An example is the
       square function for complex numbers, ` ( x e. CC |-> ( x ^ 2 ) ) ` .
       Similar to the definition of mapping in [ChoquetDD] p. 2.  (Contributed
       by NM, 17-Feb-2008.) $)
    df-mpt $a |- ( x e. A |-> B ) =
                    { <. x , y >. | ( x e. A /\ y = B ) } $.
  $}

  ${
    $d x z R $.  $d y z R $.
    $( The collection of ordered pairs in a class is a subclass of it.
       (Contributed by NM, 27-Dec-1996.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    opabss $p |- { <. x , y >. | x R y } C_ R $=
      ( vz cv wbr copab cop wceq wa wex cab df-opab df-br eleq1 biimpar sylan2b
      wcel exlimivv abssi eqsstri ) AEZBEZCFZABGDEZUBUCHZIZUDJZBKAKZDLCUDABDMUI
      DCUHUECRZABUDUGUFCRZUJUBUCCNUGUJUKUEUFCOPQSTUA $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.  $d z ps $.  $d z ch $.
    opabbid.1 $e |- F/ x ph $.
    opabbid.2 $e |- F/ y ph $.
    opabbid.3 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal ordered-pair class abstractions (deduction
       rule).  (Contributed by NM, 21-Feb-2004.)  (Proof shortened by Andrew
       Salmon, 9-Jul-2011.) $)
    opabbid $p |- ( ph -> { <. x , y >. | ps } = { <. x , y >. | ch } ) $=
      ( vz cv cop wceq wa wex cab copab anbi2d exbid abbidv df-opab 3eqtr4g ) A
      IJDJEJKLZBMZENZDNZIOUBCMZENZDNZIOBDEPCDEPAUEUHIAUDUGDFAUCUFEGABCUBHQRRSBD
      EITCDEITUA $.
  $}

  ${
    $d x ph $.  $d y z ph $.  $d z ps $.  $d z ch $.
    opabbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal ordered-pair class abstractions (deduction
       rule).  (Contributed by NM, 15-May-1995.) $)
    opabbidv $p |- ( ph -> { <. x , y >. | ps } = { <. x , y >. | ch } ) $=
      ( nfv opabbid ) ABCDEADGAEGFH $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.  $d z ps $.
    opabbii.1 $e |- ( ph <-> ps ) $.
    $( Equivalent wff's yield equal class abstractions.  (Contributed by NM,
       15-May-1995.) $)
    opabbii $p |- { <. x , y >. | ph } = { <. x , y >. | ps } $=
      ( vz cv wceq copab eqid wb a1i opabbidv ax-mp ) FGZOHZACDIBCDIHOJPABCDABK
      PELMN $.
  $}

  ${
    $d x z w $.  $d y z w $.  $d ph w $.
    nfopab.1 $e |- F/ z ph $.
    $( Bound-variable hypothesis builder for class abstraction.  (Contributed
       by NM, 1-Sep-1999.)  (Unnecessary distinct variable restrictions were
       removed by Andrew Salmon, 11-Jul-2011.) $)
    nfopab $p |- F/_ z { <. x , y >. | ph } $=
      ( vw copab cv cop wceq wa wex cab df-opab nfv nfan nfex nfab nfcxfr ) DAB
      CGFHBHCHIJZAKZCLZBLZFMABCFNUCDFUBDBUADCTADTDOEPQQRS $.
  $}

  ${
    $d x z $.  $d y z $.  $d z ph $.
    $( The first abstraction variable in an ordered-pair class abstraction
       (class builder) is effectively not free.  (Contributed by NM,
       16-May-1995.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    nfopab1 $p |- F/_ x { <. x , y >. | ph } $=
      ( vz copab cv cop wceq wa wex cab df-opab nfe1 nfab nfcxfr ) BABCEDFBFCFG
      HAICJZBJZDKABCDLQBDPBMNO $.

    $( The second abstraction variable in an ordered-pair class abstraction
       (class builder) is effectively not free.  (Contributed by NM,
       16-May-1995.)  (Revised by Mario Carneiro, 14-Oct-2016.) $)
    nfopab2 $p |- F/_ y { <. x , y >. | ph } $=
      ( vz copab cv cop wceq wa wex cab df-opab nfe1 nfex nfab nfcxfr ) CABCEDF
      BFCFGHAIZCJZBJZDKABCDLSCDRCBQCMNOP $.
  $}

  ${
    $d x y z w v $.  $d v ph $.  $d v ps $.
    cbvopab.1 $e |- F/ z ph $.
    cbvopab.2 $e |- F/ w ph $.
    cbvopab.3 $e |- F/ x ps $.
    cbvopab.4 $e |- F/ y ps $.
    cbvopab.5 $e |- ( ( x = z /\ y = w ) -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables in an ordered-pair class
       abstraction, using implicit substitution.  (Contributed by NM,
       14-Sep-2003.) $)
    cbvopab $p |- { <. x , y >. | ph } = { <. z , w >. | ps } $=
      ( vv cv cop wceq wa wex cab nfv nfan opeq12 eqeq2d anbi12d cbvex2 df-opab
      copab abbii 3eqtr4i ) LMZCMZDMZNZOZAPZDQCQZLRUIEMZFMZNZOZBPZFQEQZLRACDUFB
      EFUFUOVALUNUTCDEFUMAEUMESGTUMAFUMFSHTUSBCUSCSITUSBDUSDSJTUJUPOUKUQOPZUMUS
      ABVBULURUIUJUKUPUQUAUBKUCUDUGACDLUEBEFLUEUH $.
  $}

  ${
    $d x y z w $.  $d z w v ph $.  $d x y v ps $.
    cbvopabv.1 $e |- ( ( x = z /\ y = w ) -> ( ph <-> ps ) ) $.
    $( Rule used to change bound variables in an ordered-pair class
       abstraction, using implicit substitution.  (Contributed by NM,
       15-Oct-1996.) $)
    cbvopabv $p |- { <. x , y >. | ph } = { <. z , w >. | ps } $=
      ( nfv cbvopab ) ABCDEFAEHAFHBCHBDHGI $.
  $}

  ${
    $d v w x y $.  $d v w y z $.  $d v w ph $.  $d v w ps $.
    cbvopab1.1 $e |- F/ z ph $.
    cbvopab1.2 $e |- F/ x ps $.
    cbvopab1.3 $e |- ( x = z -> ( ph <-> ps ) ) $.
    $( Change first bound variable in an ordered-pair class abstraction, using
       explicit substitution.  (Contributed by NM, 6-Oct-2004.)  (Revised by
       Mario Carneiro, 14-Oct-2016.) $)
    cbvopab1 $p |- { <. x , y >. | ph } = { <. z , y >. | ps } $=
      ( vw vv cv cop wceq wa wex cab copab wsb nfv nfan nfs1v nfex opeq1 eqeq2d
      sbequ12 anbi12d exbidv cbvex nfsb sbequ sbie syl6bb bitri df-opab 3eqtr4i
      abbii ) IKZCKZDKZLZMZANZDOZCOZIPUQEKZUSLZMZBNZDOZEOZIPACDQBEDQVDVJIVDUQJK
      ZUSLZMZACJRZNZDOZJOVJVCVPCJVCJSVOCDVMVNCVMCSACJUATUBURVKMZVBVODVQVAVMAVNV
      QUTVLUQURVKUSUCUDACJUEUFUGUHVPVIJEVOEDVMVNEVMESACJEFUITUBVIJSVKVEMZVOVHDV
      RVMVGVNBVRVLVFUQVKVEUSUCUDVRVNACERBAJECUJABCEGHUKULUFUGUHUMUPACDIUNBEDIUN
      UO $.
  $}

  ${
    $d w x y z $.  $d w ph $.  $d w ps $.
    cbvopab2.1 $e |- F/ z ph $.
    cbvopab2.2 $e |- F/ y ps $.
    cbvopab2.3 $e |- ( y = z -> ( ph <-> ps ) ) $.
    $( Change second bound variable in an ordered-pair class abstraction, using
       explicit substitution.  (Contributed by NM, 22-Aug-2013.) $)
    cbvopab2 $p |- { <. x , y >. | ph } = { <. x , z >. | ps } $=
      ( vw cv cop wceq wa wex cab copab nfv nfan opeq2 df-opab anbi12d 3eqtr4i
      eqeq2d cbvex exbii abbii ) IJZCJZDJZKZLZAMZDNZCNZIOUGUHEJZKZLZBMZENZCNZIO
      ACDPBCEPUNUTIUMUSCULURDEUKAEUKEQFRUQBDUQDQGRUIUOLZUKUQABVAUJUPUGUIUOUHSUC
      HUAUDUEUFACDITBCEITUB $.
  $}

  ${
    $d x y z w $.  $d z w ph $.
    $( Change first bound variable in an ordered-pair class abstraction, using
       explicit substitution.  (Contributed by NM, 31-Jul-2003.) $)
    cbvopab1s $p |- { <. x , y >. | ph } = { <. z , y >. | [ z / x ] ph } $=
      ( vw cv cop wceq wa wex cab wsb copab nfv nfs1v nfan opeq1 eqeq2d df-opab
      nfex sbequ12 anbi12d exbidv cbvex abbii 3eqtr4i ) EFZBFZCFZGZHZAIZCJZBJZE
      KUGDFZUIGZHZABDLZIZCJZDJZEKABCMURDCMUNVAEUMUTBDUMDNUSBCUQURBUQBNABDOPTUHU
      OHZULUSCVBUKUQAURVBUJUPUGUHUOUIQRABDUAUBUCUDUEABCESURDCESUF $.
  $}

  ${
    $d x y $.  $d y z $.  $d z ph $.  $d x ps $.
    cbvopab1v.1 $e |- ( x = z -> ( ph <-> ps ) ) $.
    $( Rule used to change the first bound variable in an ordered pair
       abstraction, using implicit substitution.  (Contributed by NM,
       31-Jul-2003.)  (Proof shortened by Eric Schmidt, 4-Apr-2007.) $)
    cbvopab1v $p |- { <. x , y >. | ph } = { <. z , y >. | ps } $=
      ( nfv cbvopab1 ) ABCDEAEGBCGFH $.
  $}

  ${
    $d x y z w $.  $d z w ph $.  $d y w ps $.
    cbvopab2v.1 $e |- ( y = z -> ( ph <-> ps ) ) $.
    $( Rule used to change the second bound variable in an ordered pair
       abstraction, using implicit substitution.  (Contributed by NM,
       2-Sep-1999.) $)
    cbvopab2v $p |- { <. x , y >. | ph } = { <. x , z >. | ps } $=
      ( vw cv cop wceq wex cab copab opeq2 eqeq2d anbi12d cbvexv exbii df-opab
      wa abbii 3eqtr4i ) GHZCHZDHZIZJZATZDKZCKZGLUCUDEHZIZJZBTZEKZCKZGLACDMBCEM
      UJUPGUIUOCUHUNDEUEUKJZUGUMABUQUFULUCUEUKUDNOFPQRUAACDGSBCEGSUB $.
  $}

  ${
    $d x z $.  $d y z $.  $d ph z $.  $d ps z $.
    $( Union of two ordered pair class abstractions.  (Contributed by NM,
       30-Sep-2002.) $)
    unopab $p |- ( { <. x , y >. | ph } u. { <. x , y >. | ps } ) =
               { <. x , y >. | ( ph \/ ps ) } $=
      ( vz cv cop wceq wa wex cab wo copab unab 19.43 andi exbii bitr2i df-opab
      cun bitr3i abbii eqtri uneq12i 3eqtr4i ) EFCFDFGHZAIZDJZCJZEKZUFBIZDJZCJZ
      EKZTZUFABLZIZDJZCJZEKZACDMZBCDMZTUPCDMUOUIUMLZEKUTUIUMENVCUSEVCUHULLZCJUS
      UHULCOVDURCURUGUKLZDJVDUQVEDUFABPQUGUKDORQUAUBUCVAUJVBUNACDESBCDESUDUPCDE
      SUE $.
  $}

  ${
    $d x y ph $.  $d y A $.  $d y B $.  $d y C $.  $d y D $.
    $( An equality theorem for the maps to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpteq12f $p |- ( ( A. x A = C /\ A. x e. A B = D ) ->
                    ( x e. A |-> B ) = ( x e. C |-> D ) ) $=
      ( vy wceq wal wral wa cv wcel copab cmpt nfa1 nfra1 nfan nfv rspa df-mpt
      eqeq2d pm5.32da sp eleq2d anbi1d sylan9bbr opabbid 3eqtr4g ) BDGZAHZCEGZA
      BIZJZAKZBLZFKZCGZJZAFMUNDLZUPEGZJZAFMABCNADENUMURVAAFUJULAUIAOUKABPQUMFRU
      LURUOUTJUJVAULUOUQUTULUOJCEUPUKABSUAUBUJUOUSUTUJBDUNUIAUCUDUEUFUGAFBCTAFD
      ETUH $.

    mpteq12dv.1 $e |- ( ph -> A = C ) $.
    ${
      mpteq12dva.2 $e |- ( ( ph /\ x e. A ) -> B = D ) $.
      $( An equality inference for the maps to notation.  (Contributed by Mario
         Carneiro, 26-Jan-2017.) $)
      mpteq12dva $p |- ( ph -> ( x e. A |-> B ) = ( x e. C |-> D ) ) $=
        ( wceq wal wral cmpt alrimiv ralrimiva mpteq12f syl2anc ) ACEIZBJDFIZBC
        KBCDLBEFLIAQBGMARBCHNBCDEFOP $.
    $}

    mpteq12dv.2 $e |- ( ph -> B = D ) $.
    $( An equality inference for the maps to notation.  (Contributed by NM,
       24-Aug-2011.)  (Revised by Mario Carneiro, 16-Dec-2013.) $)
    mpteq12dv $p |- ( ph -> ( x e. A |-> B ) = ( x e. C |-> D ) ) $=
      ( wceq cv wcel adantr mpteq12dva ) ABCDEFGADFIBJCKHLM $.
  $}

  ${
    $d x A $.  $d x C $.
    $( An equality theorem for the maps to notation.  (Contributed by NM,
       16-Dec-2013.) $)
    mpteq12 $p |- ( ( A = C /\ A. x e. A B = D ) ->
                    ( x e. A |-> B ) = ( x e. C |-> D ) ) $=
      ( wceq wal wral cmpt ax-5 mpteq12f sylan ) BDFZMAGCEFABHABCIADEIFMAJABCDE
      KL $.
  $}

  ${
    $d x A $.  $d x B $.
    $( An equality theorem for the maps to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpteq1 $p |- ( A = B -> ( x e. A |-> C ) = ( x e. B |-> C ) ) $=
      ( wceq wral cmpt cv wcel eqidd rgen mpteq12 mpan2 ) BCEDDEZABFABDGACDGENA
      BAHBIDJKABDCDLM $.

    mpteq1d.1 $e |- ( ph -> A = B ) $.
    $( An equality theorem for the maps to notation.  (Contributed by Mario
       Carneiro, 11-Jun-2016.) $)
    mpteq1d $p |- ( ph -> ( x e. A |-> C ) = ( x e. B |-> C ) ) $=
      ( wceq cmpt mpteq1 syl ) ACDGBCEHBDEHGFBCDEIJ $.
  $}

  ${
    mpteq2ia.1 $e |- ( x e. A -> B = C ) $.
    $( An equality inference for the maps to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpteq2ia $p |- ( x e. A |-> B ) = ( x e. A |-> C ) $=
      ( wceq wal wral cmpt eqid ax-gen rgen mpteq12f mp2an ) BBFZAGCDFZABHABCIA
      BDIFOABJKPABELABCBDMN $.
  $}

  ${
    mpteq2i.1 $e |- B = C $.
    $( An equality inference for the maps to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpteq2i $p |- ( x e. A |-> B ) = ( x e. A |-> C ) $=
      ( wceq cv wcel a1i mpteq2ia ) ABCDCDFAGBHEIJ $.
  $}

  ${
    mpteq12i.1 $e |- A = C $.
    mpteq12i.2 $e |- B = D $.
    $( An equality inference for the maps to notation.  (Contributed by Scott
       Fenton, 27-Oct-2010.)  (Revised by Mario Carneiro, 16-Dec-2013.) $)
    mpteq12i $p |- ( x e. A |-> B ) = ( x e. C |-> D ) $=
      ( cmpt wceq wtru a1i mpteq12dv trud ) ABCHADEHIJABCDEBDIJFKCEIJGKLM $.
  $}

  ${
    mpteq2da.1 $e |- F/ x ph $.
    mpteq2da.2 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Slightly more general equality inference for the maps to notation.
       (Contributed by FL, 14-Sep-2013.)  (Revised by Mario Carneiro,
       16-Dec-2013.) $)
    mpteq2da $p |- ( ph -> ( x e. A |-> B ) = ( x e. A |-> C ) ) $=
      ( wceq wal wral cmpt eqid ax-gen cv wcel ex ralrimi mpteq12f sylancr ) AC
      CHZBIDEHZBCJBCDKBCEKHTBCLMAUABCFABNCOUAGPQBCDCERS $.
  $}

  ${
    $d x ph $.
    mpteq2dva.1 $e |- ( ( ph /\ x e. A ) -> B = C ) $.
    $( Slightly more general equality inference for the maps to notation.
       (Contributed by Scott Fenton, 25-Apr-2012.) $)
    mpteq2dva $p |- ( ph -> ( x e. A |-> B ) = ( x e. A |-> C ) ) $=
      ( nfv mpteq2da ) ABCDEABGFH $.
  $}

  ${
    $d x ph $.
    mpteq2dv.1 $e |- ( ph -> B = C ) $.
    $( An equality inference for the maps to notation.  (Contributed by Mario
       Carneiro, 23-Aug-2014.) $)
    mpteq2dv $p |- ( ph -> ( x e. A |-> B ) = ( x e. A |-> C ) ) $=
      ( wceq cv wcel adantr mpteq2dva ) ABCDEADEGBHCIFJK $.
  $}

  ${
    $d z A $.  $d z B $.  $d x y z $.
    nfmpt.1 $e |- F/_ x A $.
    nfmpt.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for the maps-to notation.
       (Contributed by NM, 20-Feb-2013.) $)
    nfmpt $p |- F/_ x ( y e. A |-> B ) $=
      ( vz cmpt cv wcel wceq wa copab df-mpt nfcri nfeq2 nfan nfopab nfcxfr ) A
      BCDHBICJZGIZDKZLZBGMBGCDNUCBGATUBAABCEOAUADFPQRS $.
  $}

  ${
    $d A z $.  $d B z $.  $d x y $.  $d x z $.
    $( Bound-variable hypothesis builder for the maps-to notation.
       (Contributed by FL, 17-Feb-2008.) $)
    nfmpt1 $p |- F/_ x ( x e. A |-> B ) $=
      ( vz cmpt cv wcel wceq wa copab df-mpt nfopab1 nfcxfr ) AABCEAFBGDFCHIZAD
      JADBCKNADLM $.
  $}

  ${
    $d w z x A $.  $d w z y A $.  $d w z B $.  $d w z C $.
    cbvmpt.1 $e |- F/_ y B $.
    cbvmpt.2 $e |- F/_ x C $.
    cbvmpt.3 $e |- ( x = y -> B = C ) $.
    $( Rule to change the bound variable in a maps-to function, using implicit
       substitution.  This version has bound-variable hypotheses in place of
       distinct variable conditions.  (Contributed by NM, 11-Sep-2011.) $)
    cbvmpt $p |- ( x e. A |-> B ) = ( y e. A |-> C ) $=
      ( vz vw cv wcel wceq wa copab cmpt wsb nfv nfan weq nfs1v sbequ12 anbi12d
      eleq1 cbvopab1 nfeq2 nfsb sbequ eqeq2d sbie syl6bb eqtri df-mpt 3eqtr4i )
      AKZCLZIKZDMZNZAIOZBKZCLZUQEMZNZBIOZACDPBCEPUTJKZCLZURAJQZNZJIOVEUSVIAIJUS
      JRVGVHAVGARURAJUASAJTUPVGURVHUOVFCUDURAJUBUCUEVIVDJIBVGVHBVGBRURAJBBUQDFU
      FUGSVDJRJBTZVGVBVHVCVFVACUDVJVHURABQVCURJBAUHURVCABAUQEGUFABTDEUQHUIUJUKU
      CUEULAICDUMBICEUMUN $.
  $}

  ${
    $d A x $.  $d A y $.  $d B y $.  $d C x $.
    cbvmptv.1 $e |- ( x = y -> B = C ) $.
    $( Rule to change the bound variable in a maps-to function, using implicit
       substitution.  (Contributed by Mario Carneiro, 19-Feb-2013.) $)
    cbvmptv $p |- ( x e. A |-> B ) = ( y e. A |-> C ) $=
      ( nfcv cbvmpt ) ABCDEBDGAEGFH $.
  $}

  ${
    $d x y $.  $d y B $.
    $( Function with universal domain in maps-to notation.  (Contributed by NM,
       16-Aug-2013.) $)
    mptv $p |- ( x e. _V |-> B ) = { <. x , y >. | y = B } $=
      ( cvv cmpt cv wcel wceq wa copab df-mpt vex biantrur opabbii eqtr4i ) ADC
      EAFDGZBFCHZIZABJQABJABDCKQRABPQALMNO $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Transitive classes
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare a new symbol. $)
  $c Tr $. $( Transitive predicate (read:  ""the following class is
              transitive"") $)

  $( Extend wff notation to include transitive classes.  Notation from
     [TakeutiZaring] p. 35. $)
  wtr $a wff Tr A $.

  $( Define the transitive class predicate.  Not to be confused with a
     transitive relation (see ~ cotr ).  Definition of [Enderton] p. 71
     extended to arbitrary classes.  For alternate definitions, see ~ dftr2
     (which is suggestive of the word ""transitive""), ~ dftr3 , ~ dftr4 ,
     ~ dftr5 , and (when ` A ` is a set) ~ unisuc .  The term ""complete"" is
     used instead of ""transitive"" in Definition 3 of [Suppes] p. 130.
     (Contributed by NM, 29-Aug-1993.) $)
  df-tr $a |- ( Tr A <-> U. A C_ A ) $.

  ${
    $d x y A $.
    $( An alternate way of defining a transitive class.  Exercise 7 of
       [TakeutiZaring] p. 40.  (Contributed by NM, 24-Apr-1994.) $)
    dftr2 $p |- ( Tr A <-> A. x A. y ( ( x e. y /\ y e. A ) -> x e. A ) ) $=
      ( cuni wss cv wcel wi wal wa dfss2 df-tr 19.23v eluni imbi1i bitr4i albii
      wtr wex 3bitr4i ) CDZCEAFZUAGZUBCGZHZAICRUBBFZGUFCGJZUDHBIZAIAUACKCLUHUEA
      UHUGBSZUDHUEUGUDBMUCUIUDBUBCNOPQT $.

    $( An alternate way of defining a transitive class.  (Contributed by NM,
       20-Mar-2004.) $)
    dftr5 $p |- ( Tr A <-> A. x e. A A. y e. x y e. A ) $=
      ( wtr cv wcel wa wi wal wral dftr2 alcom impexp albii df-ral bitr4i bitri
      r19.21v ) CDBEZAEZFZTCFZGSCFZHZAIBIZUCBTJZACJZBACKUEUDBIZAIZUGUDBALUIUBUF
      HZAIUGUHUJAUHUBUCHZBTJZUJUHUAUKHZBIULUDUMBUAUBUCMNUKBTOPUBUCBTRQNUFACOPQQ
      $.

    $( An alternate way of defining a transitive class.  Definition 7.1 of
       [TakeutiZaring] p. 35.  (Contributed by NM, 29-Aug-1993.) $)
    dftr3 $p |- ( Tr A <-> A. x e. A x C_ A ) $=
      ( vy wtr cv wcel wral wss dftr5 dfss3 ralbii bitr4i ) BDCEBFCAEZGZABGMBHZ
      ABGACBIONABCMBJKL $.
  $}

  $( An alternate way of defining a transitive class.  Definition of [Enderton]
     p. 71.  (Contributed by NM, 29-Aug-1993.) $)
  dftr4 $p |- ( Tr A <-> A C_ ~P A ) $=
    ( wtr cuni wss cpw df-tr sspwuni bitr4i ) ABACADAAEDAFAAGH $.

  $( Equality theorem for the transitive class predicate.  (Contributed by NM,
     17-Sep-1993.) $)
  treq $p |- ( A = B -> ( Tr A <-> Tr B ) ) $=
    ( wceq cuni wss wtr unieq sseq1d sseq2 bitrd df-tr 3bitr4g ) ABCZADZAEZBDZB
    EZAFBFMOPAEQMNPAABGHABPIJAKBKL $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( In a transitive class, the membership relation is transitive.
       (Contributed by NM, 19-Apr-1994.)  (Proof shortened by Andrew Salmon,
       9-Jul-2011.) $)
    trel $p |- ( Tr A -> ( ( B e. C /\ C e. A ) -> B e. A ) ) $=
      ( vy vx wtr cv wcel wa wi wal dftr2 eleq12 wb eleq1 adantl anbi12d adantr
      wceq imbi12d spc2gv pm2.43b sylbi ) AFDGZEGZHZUEAHZIZUDAHZJZEKDKZBCHZCAHZ
      IZBAHZJZDEALUKUNUOUJUPDEBCCAUDBSZUECSZIZUHUNUIUOUSUFULUGUMUDBUECMURUGUMNU
      QUECAOPQUQUIUONURUDBAORTUAUBUC $.
  $}

  $( In a transitive class, the membership relation is transitive.
     (Contributed by NM, 19-Apr-1994.) $)
  trel3 $p |- ( Tr A -> ( ( B e. C /\ C e. D /\ D e. A ) -> B e. A ) ) $=
    ( wtr wcel w3a wa 3anass trel anim2d syl5bi syld ) AEZBCFZCDFZDAFZGZOCAFZHZ
    BAFROPQHZHNTOPQINUASOACDJKLABCJM $.

  ${
    $d x A $.  $d x B $.
    $( An element of a transitive class is a subset of the class.  (Contributed
       by NM, 7-Aug-1994.) $)
    trss $p |- ( Tr A -> ( B e. A -> B C_ A ) ) $=
      ( vx wtr wcel wss cv wceq eleq1 sseq1 imbi12d imbi2d wral dftr3 rsp sylbi
      wi vtoclg pm2.43b ) ADZBAEZBAFZTCGZAEZUCAFZQZQTUAUBQZQCBAUCBHZUFUGTUHUDUA
      UEUBUCBAIUCBAJKLTUECAMUFCANUECAOPRS $.
  $}

  ${
    $d x A $.  $d x B $.
    $( The intersection of transitive classes is transitive.  (Contributed by
       NM, 9-May-1994.) $)
    trin $p |- ( ( Tr A /\ Tr B ) -> Tr ( A i^i B ) ) $=
      ( vx wtr cin wss wral wcel elin trss im2anan9 syl5bi ssin syl6ib ralrimiv
      wa cv dftr3 sylibr ) ADZBDZPZCQZABEZFZCUDGUDDUBUECUDUBUCUDHZUCAFZUCBFZPZU
      EUFUCAHZUCBHZPUBUIUCABITUJUGUAUKUHAUCJBUCJKLUCABMNOCUDRS $.
  $}

  $( The empty set is transitive.  (Contributed by NM, 16-Sep-1993.) $)
  tr0 $p |- Tr (/) $=
    ( c0 wtr cpw wss 0ss dftr4 mpbir ) ABAACZDHEAFG $.

  $( The universe is transitive.  (Contributed by NM, 14-Sep-2003.) $)
  trv $p |- Tr _V $=
    ( cvv wtr cuni wss ssv df-tr mpbir ) ABACZADHEAFG $.

  ${
    $d x y z A $.  $d y z B $.
    $( The indexed union of a class of transitive sets is transitive.
       (Contributed by Mario Carneiro, 16-Nov-2014.) $)
    triun $p |- ( A. x e. A Tr B -> Tr U_ x e. A B ) $=
      ( vy wtr wral cv ciun wss wcel wrex eliun r19.29 nfcv nfiu1 nfss trss imp
      wa ssiun2 sstr2 syl5com syl5 rexlimi syl sylan2b ralrimiva dftr3 sylibr )
      CEZABFZDGZABCHZIZDUMFUMEUKUNDUMULUMJUKULCJZABKZUNAULBCLUKUPSUJUOSZABKUNUJ
      UOABMUQUNABAULUMAULNABCOPUQULCIZAGBJZUNUJUOURCULQRUSCUMIURUNABCTULCUMUAUB
      UCUDUEUFUGDUMUHUI $.

    $( The union of a class of transitive sets is transitive.  Exercise 5(a) of
       [Enderton] p. 73.  (Contributed by Scott Fenton, 21-Feb-2011.)  (Proof
       shortened by Mario Carneiro, 26-Apr-2014.) $)
    truni $p |- ( A. x e. A Tr x -> Tr U. A ) $=
      ( cv wtr wral ciun cuni triun wceq wb uniiun treq ax-mp sylibr ) ACZDABEA
      BOFZDZBGZDZABOHRPISQJABKRPLMN $.

    $( The intersection of a class of transitive sets is transitive.  Exercise
       5(b) of [Enderton] p. 73.  (Contributed by Scott Fenton,
       25-Feb-2011.) $)
    trint $p |- ( A. x e. A Tr x -> Tr |^| A ) $=
      ( vy cv wtr wral wel wss wal cint dftr3 ralbii df-ral ralcom4 bitri sylbb
      wi ralim alimi syl wcel vex elint2 ssint imbi12i albii sylibr ) ADZEZABFZ
      CAGZABFZCDZUHHZABFZQZCIZBJZEZUJUKUNQZABFZCIZUQUJUNCUHFZABFZVBUIVCABCUHKLV
      DUTCIZABFVBVCVEABUNCUHMLUTACBNOPVAUPCUKUNABRSTUSUMURHZCURFZUQCURKVGUMURUA
      ZVFQZCIUQVFCURMVIUPCVHULVFUOAUMBCUBUCAUMBUDUEUFOOUG $.

    $( If ` A ` is transitive and non-null, then ` |^| A ` is a subset of
       ` A ` .  (Contributed by Scott Fenton, 3-Mar-2011.) $)
    trintss $p |- ( ( A =/= (/) /\ Tr A ) -> |^| A C_ A ) $=
      ( vy vx c0 wne wtr wa cint cv wcel wel wral elint2 wrex r19.2z ex expcomd
      vex trel rexlimdv sylan9 syl5bi ssrdv ) ADEZAFZGZBAHZABIZUGJBCKZCALZUFUHA
      JZCUHABRMUDUJUICANZUEUKUDUJULUICAOPUEUIUKCAUEUICIZAJUKAUHUMSQTUAUBUC $.

    $( Any nonempty transitive class includes its intersection.  Exercise 2 in
       [TakeutiZaring] p. 44.  (Contributed by Andrew Salmon, 14-Nov-2011.) $)
    trint0 $p |- ( ( Tr A /\ A =/= (/) ) -> |^| A C_ A ) $=
      ( vx c0 wne wtr cint wss cv wcel wex wi intss1 trss com12 sylsyld exlimiv
      n0 sstr2 sylbi impcom ) ACDZAEZAFZAGZUABHZAIZBJUBUDKZBAQUFUGBUFUCUEGUBUEA
      GZUDUEALUBUFUHAUEMNUCUEAROPST $.
  $}

$( End $[ set-class.mm $] $)

$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
             ZF Set Theory - add the Axiom of Replacement
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
          Introduce the Axiom of Replacement
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z w $.
    $( Axiom of Replacement.  An axiom scheme of Zermelo-Fraenkel set theory.
       Axiom 5 of [TakeutiZaring] p. 19.  It tells us that the image of any set
       under a function is also a set (see the variant ~ funimaex ).  Although
       ` ph ` may be any wff whatsoever, this axiom is useful (i.e. its
       antecedent is satisfied) when we are given some function and ` ph `
       encodes the predicate ""the value of the function at ` w ` is ` z ` .""
       Thus, ` ph ` will ordinarily have free variables ` w ` and ` z ` - think
       of it informally as ` ph ( w , z ) ` .  We prefix ` ph ` with the
       quantifier ` A. y ` in order to ""protect"" the axiom from any ` ph `
       containing ` y ` , thus allowing us to eliminate any restrictions on
       ` ph ` .  Another common variant is derived as ~ axrep5 , where you can
       find some further remarks.  A slightly more compact version is shown as
       ~ axrep2 .  A quite different variant is ~ zfrep6 , which if used in
       place of ~ ax-rep would also require that the Separation Scheme ~ axsep
       be stated as a separate axiom.

       There is very a strong generalization of Replacement that doesn't demand
       function-like behavior of ` ph ` .  Two versions of this generalization
       are called the Collection Principle ~ cp and the Boundedness Axiom
       ~ bnd .

       Many developments of set theory distinguish the uses of Replacement from
       uses the weaker axioms of Separation ~ axsep , Null Set ~ axnul , and
       Pairing ~ axpr , all of which we derive from Replacement.  In order to
       make it easier to identify the uses of those redundant axioms, we
       restate them as axioms ~ ax-sep , ~ ax-nul , and ~ ax-pr below the
       theorems that prove them.  (Contributed by NM, 23-Dec-1993.) $)
    ax-rep $a |- ( A. w E. y A. z ( A. y ph -> z = y ) ->
                     E. y A. z ( z e. y <-> E. w ( w e. x /\ A. y ph ) ) ) $.
  $}

  ${
    $d w y ph $.  $d w x y z $.
    $( The version of the Axiom of Replacement used in the Metamath Solitaire
       applet ~ http://us.metamath.org/mmsolitaire/mms.html .  Equivalence is
       shown via the path ~ ax-rep ` -> ` ~ axrep1 ` -> ` ~ axrep2 ` -> `
       ~ axrepnd ` -> ` ~ zfcndrep = ~ ax-rep .  (Contributed by NM,
       19-Nov-2005.)  (Proof shortened by Mario Carneiro, 17-Nov-2016.) $)
    axrep1 $p |- E. x ( E. y A. z ( ph -> z = y ) ->
                 A. z ( z e. x <-> E. x ( x e. y /\ ph ) ) ) $=
      ( vw weq wi wal wex wel wa elequ2 anbi1d exbidv bibi2d albidv albii exbii
      wb nfv imbi2d ax-rep 19.3v imbi1i nfe1 nfbi nfal anbi2i a1i bibi12d cbvex
      3imtr3i chvarv 19.35ri ) ADCFZGZDHZCIZDBJZBCJZAKZBIZSZDHZBURBHZUSBEJZAKZB
      IZSZDHZBIZGVEVDBIZGECECFZVKVLVEVMVJVDBVMVIVCDVMVHVBUSVMVGVABVMVFUTAECBLMN
      OPNUAACHZUOGZDHZCIZBHDCJZVFVNKZBIZSZDHZCIVEVKAECDBUBVQURBVPUQCVOUPDVNAUOA
      CUCZUDQRQWBVJCBWABDVRVTBVRBTVSBUEUFUGVJCTCBFZWAVIDWDVRUSVTVHCBDLVTVHSWDVS
      VGBVNAVFWCUHRUIUJPUKULUMUN $.
  $}

  ${
    $d w ph $.  $d w x y z $.
    $( Axiom of Replacement expressed with the fewest number of different
       variables and without any restrictions on ` ph ` .  (Contributed by NM,
       15-Aug-2003.) $)
    axrep2 $p |- E. x ( E. y A. z ( ph -> z = y ) ->
                        A. z ( z e. x <-> E. x ( x e. y /\ A. y ph ) ) ) $=
      ( vw wal weq wi wex wel wa nfe1 nfv nfim nfex exbidv albidv imbi2d imim1i
      wb elequ2 anbi1d bibi2d axrep1 chvar sp alimi eximi nfa1 nfal cbvex sylib
      equequ2 eximii ) ACFZDEGZHZDFZEIZDBJZBCJZUOKZBIZTZDFZHZADCGZHZDFZCIZVEHBU
      SUTBEJZUOKZBIZTZDFZHZBIVFBIECVFEBUSVEEURELVEEMNOECGZVPVFBVQVOVEUSVQVNVDDV
      QVMVCUTVQVLVBBVQVKVAUOECBUAUBPUCQRPUOBEDUDUEVJUSVEVJUOVGHZDFZCIUSVIVSCVHV
      RDUOAVGACUFSUGUHVSURCEVSEMUQCDUOUPCACUIUPCMNUJCEGZVRUQDVTVGUPUOCEDUMRQUKU
      LSUN $.
  $}

  ${
    $d w x y z $.
    $( Axiom of Replacement slightly strengthened from ~ axrep2 ; ` w ` may
       occur free in ` ph ` .  (Contributed by NM, 2-Jan-1997.) $)
    axrep3 $p |- E. x ( E. y A. z ( ph -> z = y ) ->
                 A. z ( z e. x <-> E. x ( x e. w /\ A. y ph ) ) ) $=
      ( weq wi wal wex wel wa wb nfe1 nfv nfa1 nfan nfex nfbi nfal exbidv chvar
      nfim elequ2 anbi1d bibi2d albidv imbi2d axrep2 ) ADCFGDHZCIZDBJZBCJZACHZK
      ZBIZLZDHZGZBIUJUKBEJZUMKZBIZLZDHZGZBICEVDCBUJVCCUICMVBCDUKVACUKCNUTCBUSUM
      CUSCNACOPQRSUBQCEFZURVDBVEUQVCUJVEUPVBDVEUOVAUKVEUNUTBVEULUSUMCEBUCUDTUEU
      FUGTABCDUHUA $.
  $}

  ${
    $d x y z w $.
    axrep4.1 $e |- F/ z ph $.
    $( A more traditional version of the Axiom of Replacement.  (Contributed by
       NM, 14-Aug-1994.) $)
    axrep4 $p |- ( A. x E. z A. y ( ph -> y = z ) ->
                E. z A. y ( y e. z <-> E. x ( x e. w /\ ph ) ) ) $=
      ( weq wi wal wex wel wa wb axrep3 19.35i nfv nfa1 nfan nfbi nfal nfex a1i
      nfe1 elequ2 19.3 anbi2i exbii bibi12d albidv cbvex sylib ) ACDGHCIDJZBICB
      KZBEKZADIZLZBJZMZCIZBJCDKZUNALZBJZMZCIZDJULUSBABDCENOUSVDBDURDCUMUQDUMDPU
      PDBUNUODUNDPADQRUASTVCBCUTVBBUTBPVABUCSTBDGZURVCCVEUMUTUQVBBDCUDUQVBMVEUP
      VABUOAUNADFUEUFUGUBUHUIUJUK $.
  $}

  ${
    $d x y z w $.
    axrep5.1 $e |- F/ z ph $.
    $( Axiom of Replacement (similar to Axiom Rep of [BellMachover] p. 463).
       The antecedent tells us ` ph ` is analogous to a ""function"" from ` x `
       to ` y ` (although it is not really a function since it is a wff and not
       a class).  In the consequent we postulate the existence of a set ` z `
       that corresponds to the ""image"" of ` ph ` restricted to some other set
       ` w ` .  The hypothesis says ` z ` must not be free in ` ph ` .
       (Contributed by NM, 26-Nov-1995.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    axrep5 $p |- ( A. x ( x e. w -> E. z A. y ( ph -> y = z ) ) ->
                E. z A. y ( y e. z <-> E. x ( x e. w /\ ph ) ) ) $=
      ( wel weq wi wal wex wa wb 19.37v impexp albii 19.21v bitr2i exbii bitr3i
      nfv nfan axrep4 sylbi anabs5 bibi2i sylib ) BEGZACDHZIZCJZDKIZBJZCDGZUHUH
      ALZLZBKZMZCJZDKZUNUOBKZMZCJZDKUMUOUIIZCJZDKZBJUTULVFBULUHUKIZDKVFUHUKDNVG
      VEDVEUHUJIZCJVGVDVHCUHAUIOPUHUJCQRSTPUOBCDEUHADUHDUAFUBUCUDUSVCDURVBCUQVA
      UNUPUOBUHAUESUFPSUG $.
  $}

  ${
    $d y z A v $.  $d z ph v $.  $d A w v $.  $d x y z v $.  $d x w v $.
    zfrepclf.1 $e |- F/_ x A $.
    zfrepclf.2 $e |- A e. _V $.
    zfrepclf.3 $e |- ( x e. A -> E. z A. y ( ph -> y = z ) ) $.
    $( An inference rule based on the Axiom of Replacement.  Typically, ` ph `
       defines a function from ` x ` to ` y ` .  (Contributed by NM,
       26-Nov-1995.) $)
    zfrepclf $p |- E. z A. y ( y e. z <-> E. x ( x e. A /\ ph ) ) $=
      ( vv wel cv wcel wa wex wb wal wceq wi nfeq2 eleq2 syl6bi nfv exbid mpbid
      alrimi axrep5 syl anbi1d bibi2d albidv exbidv vtocle ) CDJZBKZELZAMZBNZOZ
      CPZDNZIEGIKZEQZUMBIJZAMZBNZOZCPZDNZUTVBVCACKDKQRCPDNZRZBPVHVBVJBBVAEFSZVB
      VCUOVIVAEUNTZHUAUEABCDIADUBUFUGVBVGUSDVBVFURCVBVEUQUMVBVDUPBVKVBVCUOAVLUH
      UCUIUJUKUDUL $.
  $}

  ${
    $d x y z A $.  $d z ph $.
    zfrep3cl.1 $e |- A e. _V $.
    zfrep3cl.2 $e |- ( x e. A -> E. z A. y ( ph -> y = z ) ) $.
    $( An inference rule based on the Axiom of Replacement.  Typically, ` ph `
       defines a function from ` x ` to ` y ` .  (Contributed by NM,
       26-Nov-1995.) $)
    zfrep3cl $p |- E. z A. y ( y e. z <-> E. x ( x e. A /\ ph ) ) $=
      ( nfcv zfrepclf ) ABCDEBEHFGI $.
  $}

  ${
    $d ph y z $.  $d ps z $.  $d x y z $.
    zfrep4.1 $e |- { x | ph } e. _V $.
    zfrep4.2 $e |- ( ph -> E. z A. y ( ps -> y = z ) ) $.
    $( A version of Replacement using class abstractions.  (Contributed by NM,
       26-Nov-1995.) $)
    zfrep4 $p |- { y | E. x ( ph /\ ps ) } e. _V $=
      ( cv cab wcel wa wex cvv abid anbi1i exbii abbii wceq wb wal nfab1 sylbi
      wi zfrepclf abeq2 mpbir issetri eqeltrri ) CHACIZJZBKZCLZDIZABKZCLZDIMULU
      ODUKUNCUJABACNZOPQEUMEHZUMRZELDHZUQJULSDTZELBCDEUIACUAFUJABUSUQRUCDTELUPG
      UBUDURUTEULDUQUEPUFUGUH $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                    Derive the Axiom of Separation
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z w $.  $d y z ph w $.
    $( Separation Scheme, which is an axiom scheme of Zermelo's original
       theory.  Scheme Sep of [BellMachover] p. 463.  As we show here, it is
       redundant if we assume Replacement in the form of ~ ax-rep .  Some
       textbooks present Separation as a separate axiom scheme in order to show
       that much of set theory can be derived without the stronger
       Replacement.  The Separation Scheme is a weak form of Frege's Axiom of
       Comprehension, conditioning it (with ` x e. z ` ) so that it asserts the
       existence of a collection only if it is smaller than some other
       collection ` z ` that already exists.  This prevents Russell's paradox
       ~ ru .  In some texts, this scheme is called ""Aussonderung"" or the
       Subset Axiom.

       The variable ` x ` can appear free in the wff ` ph ` , which in
       textbooks is often written ` ph ( x ) ` .  To specify this in the
       Metamath language, we _omit_ the distinct variable requirement ($d) that
       ` x ` not appear in ` ph ` .

       For a version using a class variable, see ~ zfauscl , which requires the
       Axiom of Extensionality as well as Separation for its derivation.

       If we omit the requirement that ` y ` not occur in ` ph ` , we can
       derive a contradiction, as ~ notzfaus shows (contradicting ~ zfauscl ).
       However, as ~ axsep2 shows, we can eliminate the restriction that ` z `
       not occur in ` ph ` .

       Note: the distinct variable restriction that ` z ` not occur in ` ph `
       is actually redundant in this particular proof, but we keep it since its
       purpose is to demonstrate the derivation of the exact ~ ax-sep from
       ~ ax-rep .

       This theorem should not be referenced by any proof.  Instead, use
       ~ ax-sep below so that the uses of the Axiom of Separation can be more
       easily identified.  (Contributed by NM, 11-Sep-2006.)
       (New usage is discouraged.) $)
    axsep $p |- E. y A. x ( x e. y <-> ( x e. z /\ ph ) ) $=
      ( vw wel weq wa wex wb wal wi nfv axrep5 equtr equcomi syl6 adantrd exbii
      alrimiv a1d spimev mpg an12 elequ1 anbi1d equsex bitr3i bibi2i albii mpbi
      ) BCFZEDFZEBGZAHZHZEIZJZBKZCIZULBDFZAHZJZBKZCIUMUOBCGZLZBKZCILUTEUOEBCDUO
      CMNUMVGCECEGZVGUMVHVFBVHUNVEAVHUNCBGVECEBOCBPQRTUAUBUCUSVDCURVCBUQVBULUQU
      NUMAHZHZEIVBVJUPEUNUMAUDSVIVBEBVBEMUNUMVAAEBDUEUFUGUHUIUJSUK $.

    $( The Axiom of Separation of ZF set theory.  See ~ axsep for more
       information.  It was derived as ~ axsep above and is therefore
       redundant, but we state it as a separate axiom here so that its uses can
       be identified more easily.  (Contributed by NM, 11-Sep-2006.) $)
    ax-sep $a |- E. y A. x ( x e. y <-> ( x e. z /\ ph ) ) $.
    $( $j restatement 'ax-sep' of 'axsep'; $)
  $}

  ${
    $d x y z w $.  $d y ph w $.  $d z w $.
    $( A less restrictive version of the Separation Scheme ~ axsep , where
       variables ` x ` and ` z ` can both appear free in the wff ` ph ` , which
       can therefore be thought of as ` ph ( x , z ) ` .  This version was
       derived from the more restrictive ~ ax-sep with no additional set theory
       axioms.  (Contributed by NM, 10-Dec-2006.)  (Proof shortened by Mario
       Carneiro, 17-Nov-2016.) $)
    axsep2 $p |- E. y A. x ( x e. y <-> ( x e. z /\ ph ) ) $=
      ( vw wel wa wb wal wex cv eleq2 anbi1d anabs5 syl6bb bibi2d albidv exbidv
      weq ax-sep chvarv ) BCFZBEFZBDFZAGZGZHZBIZCJUBUEHZBIZCJEDEDSZUHUJCUKUGUIB
      UKUFUEUBUKUFUDUEGUEUKUCUDUEEKDKBKLMUDANOPQRUEBCETUA $.
  $}

  ${
    $d x y A z $.  $d y ph z $.
    zfauscl.1 $e |- A e. _V $.
    $( Separation Scheme (Aussonderung) using a class variable.  To derive this
       from ~ ax-sep , we invoke the Axiom of Extensionality (indirectly via
       ~ vtocl ), which is needed for the justification of class variable
       notation.

       If we omit the requirement that ` y ` not occur in ` ph ` , we can
       derive a contradiction, as ~ notzfaus shows.  (Contributed by NM,
       21-Jun-1993.) $)
    zfauscl $p |- E. y A. x ( x e. y <-> ( x e. A /\ ph ) ) $=
      ( vz cv wcel wa wb wal wex eleq2 anbi1d bibi2d albidv exbidv ax-sep vtocl
      wceq ) BGZCGHZUAFGZHZAIZJZBKZCLUBUADHZAIZJZBKZCLFDEUCDTZUGUKCULUFUJBULUEU
      IUBULUDUHAUCDUAMNOPQABCFRS $.
  $}

  ${
    $d x ph z $.  $d x y z $.
    bm1.3ii.1 $e |- E. x A. y ( ph -> y e. x ) $.
    $( Convert implication to equivalence using the Separation Scheme
       (Aussonderung) ~ ax-sep .  Similar to Theorem 1.3ii of [BellMachover]
       p. 463.  (Contributed by NM, 21-Jun-1993.) $)
    bm1.3ii $p |- E. x A. y ( y e. x <-> ph ) $=
      ( vz wel wi wal wa wex weq elequ2 imbi2d albidv cbvexv mpbi ax-sep pm3.2i
      wb exan 19.42v bimsc1 alanimi eximi sylbir exlimiv ax-mp ) ACEFZGZCHZCBFZ
      UHAISZCHZBJZIZEJUKASZCHZBJZUJUNEUJEJZUNAUKGZCHZBJUSDVAUJBEBEKZUTUICVBUKUH
      ABECLMNOPACBEQRTUOUREUOUJUMIZBJURUJUMBUAVCUQBUIULUPCAUHUKUBUCUDUEUFUG $.
  $}

  ${
    $d x y z $.
    $( Derive a weakened version of ~ ax-6 ( i.e. ~ ax6v ), where ` x ` and
       ` y ` must be distinct, from Separation ~ ax-sep and Extensionality
       ~ ax-ext .  See ~ ax6 for the derivation of ~ ax-6 from ~ ax6v .
       (Contributed by NM, 12-Nov-2013.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    ax6vsep $p |- -. A. x -. x = y $=
      ( vz cv wceq wex wn wal wcel wi wa wb ax-sep biantru bibi2i biimpri alimi
      id ax-ext syl eximi ax-mp df-ex mpbi ) ADZBDZEZAFZUGGAHGCDZUEIZUIUFIZUIUI
      EZULJZKZLZCHZAFUHUMCABMUPUGAUPUJUKLZCHUGUOUQCUQUOUKUNUJUMUKULRNOPQABCSTUA
      UBUGAUCUD $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
              Derive the Null Set Axiom
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y $.
    zfnuleu.1 $e |- E. x A. y -. y e. x $.
    $( Show the uniqueness of the empty set (using the Axiom of Extensionality
       via ~ bm1.1 to strengthen the hypothesis in the form of ~ axnul ).
       (Contributed by NM, 22-Dec-2007.) $)
    zfnuleu $p |- E! x A. y -. y e. x $=
      ( wel wn wal weu wfal wb wex nbfal albii exbii mpbi nfv bm1.1 ax-mp eubii
      mpbir ) BADZEZBFZAGTHIZBFZAGZUDAJZUEUBAJUFCUBUDAUAUCBTKLZMNHABHAOPQUBUDAU
      GRS $.
  $}

  ${
    $d x y z w $.
    $( Alternate proof of ~ axnul , proved directly from ~ ax-rep using none of
       the equality axioms ~ ax-7 through ~ ax-c14 provided we accept ~ sp as
       an axiom.  Replace ~ sp with the obsolete ~ ax-c5 to see this in 'show
       trace_back'.  (Contributed by Jeff Hoffman, 3-Feb-2008.)  (Proof
       shortened by Mario Carneiro, 17-Nov-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    axnulALT $p |- E. x A. y -. y e. x $=
      ( vw vz cv wcel wn wal wex wfal wa wb wi ax-rep sp con2i df-ex sylibr mpg
      wceq fal mto pm2.21i intnan nex nbn albii exbii mpbir ) BEZAEZFZGZBHZAIUL
      CEDEFZJAHZKZCIZLZBHZAIZUPUJUKTZMZBHZAIZVACJDABCNVCVEBVDVDGZAHZGVEVGVDVFAO
      PVDAQRUPVBUPJUAJAOUBZUCSSUNUTAUMUSBURULUQCUPUOVHUDUEUFUGUHUI $.

    $( The Null Set Axiom of ZF set theory: there exists a set with no
       elements.  Axiom of Empty Set of [Enderton] p. 18.  In some textbooks,
       this is presented as a separate axiom; here we show it can be derived
       from Separation ~ ax-sep .  This version of the Null Set Axiom tells us
       that at least one empty set exists, but does not tell us that it is
       unique - we need the Axiom of Extensionality to do that (see
       ~ zfnuleu ).

       This proof, suggested by Jeff Hoffman, uses only ~ ax-4 and ~ ax-gen
       from predicate calculus, which are valid in ""free logic"" i.e. logic
       holding in an empty domain (see Axiom A5 and Rule R2 of [LeBlanc]
       p. 277).  Thus, our ~ ax-sep implies the existence of at least one set.
       Note that Kunen's version of ~ ax-sep (Axiom 3 of [Kunen] p. 11) does
       not imply the existence of a set because his is universally closed i.e.
       prefixed with universal quantifiers to eliminate all free variables.
       His existence is provided by a separate axiom stating ` E. x x = x `
       (Axiom 0 of [Kunen] p. 10).

       See ~ axnulALT for a proof directly from ~ ax-rep .

       This theorem should not be referenced by any proof.  Instead, use
       ~ ax-nul below so that the uses of the Null Set Axiom can be more easily
       identified.  (Contributed by Jeff Hoffman, 3-Feb-2008.)  (Revised by NM,
       4-Feb-2008.)  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    axnul $p |- E. x A. y -. y e. x $=
      ( vz cv wn wa wb wal wex ax-sep pm3.24 intnan id mtbiri alimi eximi ax-mp
      wcel ) BDZADRZSCDRZSSRZUBEFZFZGZBHZAITEZBHZAIUCBACJUFUHAUEUGBUETUDUCUAUBK
      LUEMNOPQ $.

    $( The Null Set Axiom of ZF set theory.  It was derived as ~ axnul above
       and is therefore redundant, but we state it as a separate axiom here so
       that its uses can be identified more easily.  (Contributed by NM,
       7-Aug-2003.) $)
    ax-nul $a |- E. x A. y -. y e. x $.
    $( $j restatement 'ax-nul' of 'axnul'; $)

    $( The Null Set Axiom of ZF set theory: the empty set exists.  Corollary
       5.16 of [TakeutiZaring] p. 20.  For the unabbreviated version, see
       ~ ax-nul .  (Contributed by NM, 21-Jun-1993.)  (Proof shortened by
       Andrew Salmon, 9-Jul-2011.) $)
    0ex $p |- (/) e. _V $=
      ( vx vy c0 cv wceq wex wel wn wal ax-nul eq0 exbii mpbir issetri ) ACADZC
      EZAFBAGHBIZAFABJPQABOKLMN $.
  $}

  ${
    sseliALT.1 $e |- A C_ B $.
    $( Alternate proof of ~ sseli illustrating the use of the weak deduction
       theorem to prove it from the inference ~ sselii .  (Contributed by NM,
       24-Aug-2018.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    sseliALT $p |- ( C e. A -> C e. B ) $=
      ( wcel csn cif wceq biidd eleq2 eleq1 wss sseq1 sseq2 ssid keephyp3v snid
      c0 0ex elimhyp3v sselii dedth3v ) CAEZCBEZUDCUCBRFZGZEUCCRGZUFEABCUEUERAU
      CAUEGZHUDIBUFCJCUGUFKUHUFUGUCUHBLUHUFLZUIUEUELUHUELUIABLABCUEUERAUHBMBUFU
      HNCUGHUIIUEUHUEMUEUFUHNRUGHUIIDUEOPUCCUHEZUJUGUHERUEERUHEZUKABCUEUERAUHCJ
      BUFHUJICUGUHKUEUHRJUEUFHUKIRUGUHKRSQTUAUB $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( The existence of proper substitution into a class.  (Contributed by NM,
       10-Nov-2005.)  (Revised by NM, 17-Aug-2018.) $)
    csbexg $p |- ( A. x B e. W -> [_ A / x ]_ B e. _V ) $=
      ( vy cvv wcel wal csb wa wsbc cab df-csb abid2 elex syl5eqel alimi adantr
      cv spsbc syl5 imp wb nfcv sbcabel mpbid wn csbprc 0ex syl6eqel pm2.61ian
      c0 ) BFGZCDGZAHZABCIZFGZUMUOJZUPESCGZABKELZFAEBCMURUSELZFGZABKZUTFGZUMUOV
      CUOVBAHUMVCUNVBAUNVACFECNCDOPQVBABFTUAUBUMVCVDUCUOUSAEBFFAFUDUERUFPUMUGZU
      QUOVEUPULFABCUHUIUJRUK $.
  $}

  ${
    csbex.1 $e |- B e. _V $.
    $( The existence of proper substitution into a class.  (Contributed by NM,
       7-Aug-2007.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.)  (Revised
       by NM, 17-Aug-2018.) $)
    csbex $p |- [_ A / x ]_ B e. _V $=
      ( cvv wcel csb csbexg mpg ) CEFABCGEFAABCEHDI $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( The existence of proper substitution into a class.  (Contributed by NM,
       10-Nov-2005.)  Use ~ csbexg instead of this.  Obsolete as of
       17-Aug-2018.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    csbexgOLD $p |- ( ( A e. V /\ A. x B e. W ) -> [_ A / x ]_ B e. _V ) $=
      ( vy wcel wal wa csb wsbc cab cvv df-csb abid2 elex syl5eqel alimi spsbc
      cv syl5 imp wb nfcv sbcabel adantr mpbid ) BDGZCEGZAHZIZABCJFTCGZABKFLZMA
      FBCNUKULFLZMGZABKZUMMGZUHUJUPUJUOAHUHUPUIUOAUIUNCMFCOCEPQRUOABDSUAUBUHUPU
      QUCUJULAFBMDAMUDUEUFUGQ $.
  $}

  ${
    csbexOLD.1 $e |- A e. _V $.
    csbexOLD.2 $e |- B e. _V $.
    $( The existence of proper substitution into a class.  (Contributed by NM,
       7-Aug-2007.)  (Proof shortened by Andrew Salmon, 29-Jun-2011.)  Use
       ~ csbex instead of this.  Obsolete as of 17-Aug-2018.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbexOLD $p |- [_ A / x ]_ B e. _V $=
      ( cvv wcel csb wal csbexgOLD mpan mpg ) CFGZABCHFGZABFGMAINDABCFFJKEL $.
  $}

  ${
    $( A version of ~ unisn without the ` A e. _V ` hypothesis.  (Contributed
       by Stefan Allan, 14-Mar-2006.) $)
    unisn2 $p |- U. { A } e. { (/) , A } $=
      ( cvv wcel csn cuni c0 cpr unisng prid2g eqeltrd wceq snprc biimpi unieqd
      wn uni0 0ex prid1 eqeltri syl6eqel pm2.61i ) ABCZADZEZFAGZCUBUDAUEABHFABI
      JUBOZUDFEZUEUFUCFUFUCFKALMNUGFUEPFAQRSTUA $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
           Theorems requiring subset and intersection existence
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z $.
    $( No set contains all sets.  Theorem 41 of [Suppes] p. 30.  (Contributed
       by NM, 23-Aug-1993.) $)
    nalset $p |- -. E. x A. y y e. x $=
      ( vz wel wn wex wal alexn wa wb ax-sep elequ1 elequ2 bitrd notbid anbi12d
      weq bibi12d spv pclem6 syl eximii mpgbi ) BADZEZBFUDBGAFEAUDABHCBDZCADZCC
      DZEZIZJZCGZUEBUICBAKULBBDZUDUMEZIZJZUEUKUPCBCBQZUFUMUJUOCBBLUQUGUDUIUNCBA
      LUQUHUMUQUHBCDUMCBCLCBBMNOPRSUMUDTUAUBUC $.
  $}

  ${
    $d x y $.
    $( The universal class is not a member of itself (and thus is not a set).
       Proposition 5.21 of [TakeutiZaring] p. 21; our proof, however, does not
       depend on the Axiom of Regularity.  (Contributed by NM, 23-Aug-1993.) $)
    vprc $p |- -. _V e. _V $=
      ( vx vy cvv wcel cv wceq wex wal nalset vex tbt albii dfcleq bitr4i exbii
      wb mtbi isset mtbir ) CCDAEZCFZAGZBEZTDZBHZAGUBABIUEUAAUEUDUCCDZPZBHUAUDU
      GBUFUDBJKLBTCMNOQACRS $.
  $}

  $( The universal class doesn't belong to any class.  (Contributed by FL,
     31-Dec-2006.) $)
  nvel $p |- -. _V e. A $=
    ( cvv wcel vprc elex mto ) BACBBCDBAEF $.

  $( The universal class does not exist.  (Contributed by NM, 4-Jul-2005.) $)
  vnex $p |- -. E. x x = _V $=
    ( cvv wcel cv wceq wex vprc isset mtbi ) BBCADBEAFGABHI $.

  ${
    $d A x y $.  $d B x y $.
    inex1.1 $e |- A e. _V $.
    $( Separation Scheme (Aussonderung) using class notation.  Compare Exercise
       4 of [TakeutiZaring] p. 22.  (Contributed by NM, 21-Jun-1993.) $)
    inex1 $p |- ( A i^i B ) e. _V $=
      ( vx vy cin cv wceq wex wcel wa wb zfauscl dfcleq elin bibi2i albii bitri
      wal exbii mpbir issetri ) DABFZDGZUCHZDIEGZUDJZUFAJUFBJZKZLZESZDIUHEDACMU
      EUKDUEUGUFUCJZLZESUKEUDUCNUMUJEULUIUGUFABOPQRTUAUB $.
  $}

  ${
    inex2.1 $e |- A e. _V $.
    $( Separation Scheme (Aussonderung) using class notation.  (Contributed by
       NM, 27-Apr-1994.) $)
    inex2 $p |- ( B i^i A ) e. _V $=
      ( cin cvv incom inex1 eqeltri ) BADABDEBAFABCGH $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Closed-form, generalized Separation Scheme.  (Contributed by NM,
       7-Apr-1995.) $)
    inex1g $p |- ( A e. V -> ( A i^i B ) e. _V ) $=
      ( vx cv cin cvv wcel wceq ineq1 eleq1d vex inex1 vtoclg ) DEZBFZGHABFZGHD
      ACOAIPQGOABJKOBDLMN $.
  $}

  ${
    ssex.1 $e |- B e. _V $.
    $( The subset of a set is also a set.  Exercise 3 of [TakeutiZaring]
       p. 22.  This is one way to express the Axiom of Separation ~ ax-sep
       (a.k.a.  Subset Axiom).  (Contributed by NM, 27-Apr-1994.) $)
    ssex $p |- ( A C_ B -> A e. _V ) $=
      ( wss cin wceq cvv wcel df-ss inex2 eleq1 mpbii sylbi ) ABDABEZAFZAGHZABI
      ONGHPBACJNAGKLM $.
  $}

  ${
    ssexi.1 $e |- B e. _V $.
    ssexi.2 $e |- A C_ B $.
    $( The subset of a set is also a set.  (Contributed by NM, 9-Sep-1993.) $)
    ssexi $p |- A e. _V $=
      ( wss cvv wcel ssex ax-mp ) ABEAFGDABCHI $.
  $}

  ${
    $d x A $.  $d x B $.
    $( The subset of a set is also a set.  Exercise 3 of [TakeutiZaring] p. 22
       (generalized).  (Contributed by NM, 14-Aug-1994.) $)
    ssexg $p |- ( ( A C_ B /\ B e. C ) -> A e. _V ) $=
      ( vx wcel wss cvv cv wi wceq sseq2 imbi1d vex ssex vtoclg impcom ) BCEABF
      ZAGEZADHZFZRIQRIDBCSBJTQRSBAKLASDMNOP $.
  $}

  ${
    ssexd.1 $e |- ( ph -> B e. C ) $.
    ssexd.2 $e |- ( ph -> A C_ B ) $.
    $( A subclass of a set is a set.  Deduction form of ~ ssexg .  (Contributed
       by David Moews, 1-May-2017.) $)
    ssexd $p |- ( ph -> A e. _V ) $=
      ( wss wcel cvv ssexg syl2anc ) ABCGCDHBIHFEBCDJK $.
  $}

  $( Existence of a difference.  (Contributed by NM, 26-May-1998.) $)
  difexg $p |- ( A e. V -> ( A \ B ) e. _V ) $=
    ( cdif wss wcel cvv difss ssexg mpan ) ABDZAEACFKGFABHKACIJ $.

  ${
    $d x y A $.  $d y ph $.
    zfausab.1 $e |- A e. _V $.
    $( Separation Scheme (Aussonderung) in terms of a class abstraction.
       (Contributed by NM, 8-Jun-1994.) $)
    zfausab $p |- { x | ( x e. A /\ ph ) } e. _V $=
      ( cv wcel wa cab ssab2 ssexi ) BECFAGBHCDABCIJ $.
  $}

  ${
    $d x A $.
    $( Separation Scheme in terms of a restricted class abstraction.
       (Contributed by NM, 23-Oct-1999.) $)
    rabexg $p |- ( A e. V -> { x e. A | ph } e. _V ) $=
      ( crab wss wcel cvv ssrab2 ssexg mpan ) ABCEZCFCDGLHGABCILCDJK $.
  $}

  ${
    $d x A $.
    rabex.1 $e |- A e. _V $.
    $( Separation Scheme in terms of a restricted class abstraction.
       (Contributed by NM, 19-Jul-1996.) $)
    rabex $p |- { x e. A | ph } e. _V $=
      ( cvv wcel crab rabexg ax-mp ) CEFABCGEFDABCEHI $.
  $}

  ${
    $d x A $.
    rabexd.1 $e |- B = { x e. A | ps } $.
    rabexd.2 $e |- ( ph -> A e. V ) $.
    $( Separation Scheme in terms of a restricted class abstraction, deduction
       form of ~ rabex2 .  (Contributed by AV, 16-Jul-2019.) $)
    rabexd $p |- ( ph -> B e. _V ) $=
      ( crab cvv wcel rabexg syl syl5eqel ) AEBCDIZJGADFKOJKHBCDFLMN $.
  $}

  ${
    $d x A $.
    rabex2.1 $e |- B = { x e. A | ps } $.
    rabex2.2 $e |- A e. V $.
    $( Separation Scheme in terms of a restricted class abstraction.
       (Contributed by AV, 16-Jul-2019.) $)
    rabex2 $p |- B e. _V $=
      ( wcel cvv id rabexd ax-mp ) CEHZDIHGMABCDEFMJKL $.
  $}

  ${
    $d x B $.  $d y A $.
    rab2ex.1 $e |- B = { y e. A | ps } $.
    rab2ex.2 $e |- A e. V $.
    $( A class abstraction based on a class abstraction based on a set is a
       set.  (Contributed by AV, 16-Jul-2019.) $)
    rab2ex $p |- { x e. B | ph } e. _V $=
      ( rabex2 rabex ) ACFBDEFGHIJK $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ps $.
    elssabg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Membership in a class abstraction involving a subset.  Unlike ~ elabg ,
       ` A ` does not have to be a set.  (Contributed by NM, 29-Aug-2006.) $)
    elssabg $p |- ( B e. V ->
                  ( A e. { x | ( x C_ B /\ ph ) } <-> ( A C_ B /\ ps ) ) ) $=
      ( wcel wss wa cvv wi cv cab wb ssexg expcom adantrd wceq sseq1 elab3g syl
      anbi12d ) EFHZDEIZBJZDKHZLDCMZEIZAJZCNHUFOUDUEUGBUEUDUGDEFPQRUJUFCDKUHDSU
      IUEABUHDETGUCUAUB $.
  $}

  ${
    $d x A $.
    $( The intersection of a nonempty class exists.  Exercise 5 of
       [TakeutiZaring] p. 44 and its converse.  (Contributed by NM,
       13-Aug-2002.) $)
    intex $p |- ( A =/= (/) <-> |^| A e. _V ) $=
      ( vx c0 wne cint cvv wcel cv wex n0 wss intss1 vex ssex syl exlimiv sylbi
      wceq vprc inteq int0 syl6eq eleq1d mtbiri necon2ai impbii ) ACDZAEZFGZUGB
      HZAGZBIUIBAJUKUIBUKUHUJKUIUJALUHUJBMNOPQUIACACRZUIFFGSULUHFFULUHCEFACTUAU
      BUCUDUEUF $.
  $}

  $( If a class intersection is not a set, it must be the universe.
     (Contributed by NM, 3-Jul-2005.) $)
  intnex $p |- ( -. |^| A e. _V <-> |^| A = _V ) $=
    ( cint cvv wcel wn wceq intex necon1bbii inteq int0 syl6eq sylbi vprc eleq1
    c0 mtbiri impbii ) ABZCDZEZRCFZTAOFZUASAOAGHUBROBCAOIJKLUASCCDMRCCNPQ $.

  ${
    $d x y $.  $d ph y $.
    $( The intersection of a nonempty class abstraction exists.  (Contributed
       by NM, 21-Oct-2003.) $)
    intexab $p |- ( E. x ph <-> |^| { x | ph } e. _V ) $=
      ( wex cab c0 wne cint cvv wcel abn0 intex bitr3i ) ABCABDZEFMGHIABJMKL $.
  $}

  $( The intersection of a nonempty restricted class abstraction exists.
     (Contributed by NM, 21-Oct-2003.) $)
  intexrab $p |- ( E. x e. A ph <-> |^| { x e. A | ph } e. _V ) $=
    ( cv wcel wa wex cab cint cvv wrex crab intexab df-rex df-rab inteqi eleq1i
    3bitr4i ) BDCEAFZBGSBHZIZJEABCKABCLZIZJESBMABCNUCUAJUBTABCOPQR $.

  ${
    $d A x y $.  $d B y $.
    $( The existence of an indexed union. ` x ` is normally a free-variable
       parameter in ` B ` , which should be read ` B ( x ) ` .  (Contributed by
       FL, 19-Sep-2011.) $)
    iinexg $p |- ( ( A =/= (/) /\ A. x e. A B e. C )
    -> |^|_ x e. A B e. _V ) $=
      ( vy c0 wne wcel wral wa ciin cv wceq wrex cab cint cvv wex wi sylib abn0
      dfiin2g adantl elisset rgenw r19.2z mpan2 r19.35 imp rexcom4 sylibr intex
      eqeltrd ) BFGZCDHZABIZJZABCKZELCMZABNZEOZPZQUPURVBMUNAEBCDUBUCUQVAFGZVBQH
      UQUTERZVCUQUSERZABNZVDUNUPVFUNUOVESZABNZUPVFSUNVGABIVHVGABECDUDUEVGABUFUG
      UOVEABUHTUIUSAEBUJTUTEUAUKVAULTUM $.
  $}

  ${
    $d x y $.  $d x A $.  $d y ph $.  $d x ps $.  $d x ch $.
    intabs.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    intabs.2 $e |- ( x = |^| { y | ps } -> ( ph <-> ch ) ) $.
    intabs.3 $e |- ( |^| { y | ps } C_ A /\ ch ) $.
    $( Absorption of a redundant conjunct in the intersection of a class
       abstraction.  (Contributed by NM, 3-Jul-2005.) $)
    intabs $p |- |^| { x | ( x C_ A /\ ph ) } = |^| { x | ph } $=
      ( cv wss wa cab cint cvv wcel wceq sseq1 anbi12d intmin3 intnex ssv sseq2
      wn mpbiri sylbi pm2.61i cbvabv inteqi sseqtr4i simpr ss2abi intss ax-mp
      eqssi ) DJZFKZALZDMZNZADMZNZUTBEMZNZVBVDOPZUTVDKZURVDFKZCLDVDOUPVDQUQVGAC
      UPVDFRHSITVEUDVDOQZVFVCUAVHVFUTOKUTUBVDOUTUCUEUFUGVAVCABDEGUHUIUJUSVAKVBU
      TKURADUQAUKULUSVAUMUNUO $.
  $}

  ${
    $d A x y z $.  $d B x y z $.
    $( The intersection of a union ` U. A ` with a class ` B ` is equal to the
       union of the intersections of each element of ` A ` with ` B ` .
       (Contributed by FL, 24-Mar-2007.) $)
    inuni $p |- ( U. A i^i B ) = U. { x | E. y e. A x = ( y i^i B ) } $=
      ( vz cuni cin cv wceq wrex cab wcel wex eluni2 anbi1i elin r19.41v bitr4i
      wa bitri ancom exbii rexcom4 vex inex1 eleq2 ceqsexv rexbii 3bitr4i eqriv
      eluniab ) ECFZDGZAHZBHZDGZIZBCJZAKFZEHZUMLZUTUNLZURSZAMZUTUSLUTULLZUTDLZS
      UTUOLZBCJZVFSZVAVDVEVHVFBUTCNOUTULDPVDUQVBSZAMZBCJZVIVDVJBCJZAMVLVCVMAVCU
      RVBSVMVBURUAUQVBBCQRUBVJBACUCRVLVGVFSZBCJVIVKVNBCVKUTUPLZVNVBVOAUPUODBUDU
      EUNUPUTUFUGUTUODPTUHVGVFBCQTTUIURAUTUKRUJ $.
  $}

  $( Membership in a power class.  Theorem 86 of [Suppes] p. 47.  (Contributed
     by NM, 7-Aug-2000.) $)
  elpw2g $p |- ( B e. V -> ( A e. ~P B <-> A C_ B ) ) $=
    ( wcel cpw wss elpwi cvv ssexg elpwg biimparc syldan expcom impbid2 ) BCDZA
    BEDZABFZABGQOPQOAHDZPABCIRPQABHJKLMN $.

  ${
    elpw2.1 $e |- B e. _V $.
    $( Membership in a power class.  Theorem 86 of [Suppes] p. 47.
       (Contributed by NM, 11-Oct-2007.) $)
    elpw2 $p |- ( A e. ~P B <-> A C_ B ) $=
      ( cvv wcel cpw wss wb elpw2g ax-mp ) BDEABFEABGHCABDIJ $.
  $}

  ${
    $d A x y $.  $d V x y $.
    $( The power set of a set is never a subset.  (Contributed by Stefan
       O'Rear, 22-Feb-2015.) $)
    pwnss $p |- ( A e. V -> -. ~P A C_ A ) $=
      ( vx vy cpw cv wnel crab wcel wn wa wb eleq12 anidms notbid df-nel syl5bb
      wss wceq cbvrabv elrab2 pclem6 ax-mp ssel mtoi ssrab2 elpw2g mpbiri nsyl3
      ) AEZARZCFZULGZCAHZUJIZABIZUKUOUNAIZUNUNIZUQURJZKLUQJDFZUTIZJZUSDUNAUNUTU
      NSZVAURVCVAURLUTUNUTUNMNOUMVBCDAUMULULIZJULUTSZVBULULPVEVDVAVEVDVALULUTUL
      UTMNOQTUAURUQUBUCUJAUNUDUEUPUOUNARUMCAUFUNABUGUHUI $.
  $}

  $( No set equals its power set.  The sethood antecedent is necessary; compare
     ~ pwv .  (Contributed by NM, 17-Nov-2008.)  (Proof shortened by Mario
     Carneiro, 23-Dec-2016.) $)
  pwne $p |- ( A e. V -> ~P A =/= A ) $=
    ( wcel cpw wss wn wne pwnss eqimss necon3bi syl ) ABCADZAEZFLAGABHMLALAIJK
    $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                 Theorems requiring empty set existence
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x A $.
    $( Construct, from any class ` A ` , a set equal to it when the class
       exists and equal to the empty set when the class is proper.  This
       theorem shows that the constructed set always exists.  (Contributed by
       NM, 16-Oct-2003.) $)
    class2set $p |- { x e. A | A e. _V } e. _V $=
      ( wcel crab rabexg wn c0 wrex wceq cv simpl nrexdv rabn0 necon1bbii sylib
      cvv 0ex syl6eqel pm2.61i ) BPCZTABDZPCTABPETFZUAGPUBTABHZFUAGIUBTABUBAJBC
      KLUCUAGTABMNOQRS $.

    $( Equality theorem based on ~ class2set .  (Contributed by NM,
       13-Dec-2005.)  (Proof shortened by Raph Levien, 30-Jun-2006.) $)
    class2seteq $p |- ( A e. V -> { x e. A | A e. _V } = A ) $=
      ( wcel cvv crab wceq elex wral cv ax-1 ralrimiv rabid2 sylibr eqcomd syl
      ) BCDBEDZQABFZBGBCHQBRQQABIBRGQQABQAJBDKLQABMNOP $.
  $}

  $( Every power class contains the empty set.  (Contributed by NM,
     25-Oct-2007.) $)
  0elpw $p |- (/) e. ~P A $=
    ( c0 cpw wcel wss 0ss 0ex elpw mpbir ) BACDBAEAFBAGHI $.
  $( A power class is never empty.  (Contributed by NM, 3-Sep-2018.) $)
  pwne0 $p |- ~P A =/= (/) $=
    ( c0 wcel wn cpw wne noel wceq 0elpw eleq2 mpbii necon3bi ax-mp ) BBCZDAEZB
    FBGNOBOBHBOCNAIOBBJKLM $.

  $( The empty set and its power set are not equal.  (Contributed by NM,
     23-Dec-1993.) $)
  0nep0 $p |- (/) =/= { (/) } $=
    ( c0 csn 0ex snnz necomi ) ABAACDE $.

  $( Something cannot be equal to both the null set and the power set of the
     null set.  (Contributed by NM, 21-Jun-1993.) $)
  0inp0 $p |- ( A = (/) -> -. A = { (/) } ) $=
    ( c0 wceq csn wne 0nep0 neeq1 mpbiri neneqd ) ABCZABDZJAKEBKEFABKGHI $.

  $( The removal of the empty set from a class does not affect its union.
     (Contributed by NM, 22-Mar-2004.) $)
  unidif0 $p |- U. ( A \ { (/) } ) = U. A $=
    ( c0 csn cdif cuni cun uniun undif1 uncom eqtr2i unieqi 0ex uneq2i 3eqtr4ri
    unisn un0 uneq1i 3eqtri ) ABCZDZEZBAEZFZUBBFUBUASAFZEZSEZUBFUCTSFZEUAUFFZUE
    UATSGUDUGUGASFUDASHASIJKUHUABFUAUFBUABLOZMUAPJNSAGUFBUBUIQRBUBIUBPR $.

  ${
    $d x y A $.  $d y B $.
    $( An indexed intersection of the empty set, with a nonempty index set, is
       empty.  (Contributed by NM, 20-Oct-2005.) $)
    iin0 $p |- ( A =/= (/) <-> |^|_ x e. A (/) = (/) ) $=
      ( c0 wne ciin wceq iinconst cvv wcel wn 0ex n0i ax-mp eqeq1i mtbir iineq1
      0iin eqeq1d mtbiri necon2ai impbii ) BCDABCEZCFZABCGUCBCBCFZUCACCEZCFZUFH
      CFZCHIUGJKHCLMUEHCACQNOUDUBUECABCCPRSTUA $.
  $}

  ${
    $d x A $.
    notzfaus.1 $e |- A = { (/) } $.
    notzfaus.2 $e |- ( ph <-> -. x e. y ) $.
    $( In the Separation Scheme ~ zfauscl , we require that ` y ` not occur in
       ` ph ` (which can be generalized to ""not be free in"").  Here we show
       special cases of ` A ` and ` ph ` that result in a contradiction by
       violating this requirement.  (Contributed by NM, 8-Feb-2006.) $)
    notzfaus $p |- -. E. y A. x ( x e. y <-> ( x e. A /\ ph ) ) $=
      ( cv wcel wa wb wal wn wex c0 wne csn 0ex snnz eqnetri mpbi n0 biimt iman
      wi anbi2i xchbinxr syl6bb xor3 sylibr eximii exnal nex ) BGZCGHZUMDHZAIZJ
      ZBKZCUQLZBMURLUOUSBDNOUOBMDNPNENQRSBDUATUOUNUPLZJUSUOUNUOUNUDZUTUOUNUBVAU
      OUNLZIUPUOUNUCAVBUOFUEUFUGUNUPUHUIUJUQBUKTUL $.
  $}

  $( The intersection of the universal class is empty.  (Contributed by NM,
     11-Sep-2008.) $)
  intv $p |- |^| _V = (/) $=
    ( c0 cvv wcel cint wceq 0ex int0el ax-mp ) ABCBDAEFBGH $.

  ${
    $d x y z A $.
    axpweq.1 $e |- A e. _V $.
    $( Two equivalent ways to express the Power Set Axiom.  Note that ~ ax-pow
       is not used by the proof.  (Contributed by NM, 22-Jun-2009.) $)
    axpweq $p |- ( ~P A e. _V
                <-> E. x A. y ( A. z ( z e. y -> z e. A ) -> y e. x ) ) $=
      ( cpw cvv wcel cv wex wel wi wal pwidg wceq pweq eleq2d spcegv wss bitri
      mpd elex exlimiv impbii vex elpw2 pwss dfss2 imbi1i albii exbii ) DFZGHZU
      LAIZFZHZAJZCBKCIDHLCMZBAKZLZBMZAJUMUQUMULULFZHZUQULGNUPVCAULGUNULOUOVBULU
      NULPQRUAUPUMAULUOUBUCUDUPVAAUPULUNSZVAULUNAUEUFVDBIZDSZUSLZBMVABDUNUGVGUT
      BVFURUSCVEDUHUIUJTTUKT $.
  $}

$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
             ZF Set Theory - add the Axiom of Power Sets
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
            Introduce the Axiom of Power Sets
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z w $.
    $( Axiom of Power Sets.  An axiom of Zermelo-Fraenkel set theory.  It
       states that a set ` y ` exists that includes the power set of a given
       set ` x ` i.e. contains every subset of ` x ` .  The variant ~ axpow2
       uses explicit subset notation.  A version using class notation is
       ~ pwex .  (Contributed by NM, 21-Jun-1993.) $)
    ax-pow $a |- E. y A. z ( A. w ( w e. z -> w e. x ) -> z e. y ) $.

    $( Axiom of Power Sets expressed with the fewest number of different
       variables.  (Contributed by NM, 14-Aug-2003.) $)
    zfpow $p |- E. x A. y ( A. x ( x e. y -> x e. z ) -> y e. x ) $=
      ( vw wel wal wex ax-pow weq elequ1 imbi12d cbvalv imbi1i albii exbii mpbi
      wi ) DBEZDCEZQZDFZBAEZQZBFZAGABEZACEZQZAFZUBQZBFZAGCABDHUDUJAUCUIBUAUHUBT
      UGDADAIRUESUFDABJDACJKLMNOP $.

    $( A variant of the Axiom of Power Sets ~ ax-pow using subset notation.
       Problem in [BellMachover] p. 466.  (Contributed by NM, 4-Jun-2006.) $)
    axpow2 $p |- E. y A. z ( z C_ x -> z e. y ) $=
      ( vw cv wss wel wi wal wex ax-pow dfss2 imbi1i albii exbii mpbir ) CEZAEZ
      FZCBGZHZCIZBJDCGDAGHDIZTHZCIZBJABCDKUBUEBUAUDCSUCTDQRLMNOP $.

    $( A variant of the Axiom of Power Sets ~ ax-pow .  For any set ` x ` ,
       there exists a set ` y ` whose members are exactly the subsets of ` x `
       i.e. the power set of ` x ` .  Axiom Pow of [BellMachover] p. 466.
       (Contributed by NM, 4-Jun-2006.) $)
    axpow3 $p |- E. y A. z ( z C_ x <-> z e. y ) $=
      ( cv wss wel wb wal wex axpow2 bm1.3ii bicom albii exbii mpbir ) CDADEZCB
      FZGZCHZBIQPGZCHZBIPBCABCJKSUABRTCPQLMNO $.
  $}

  ${
    $d w x y z $.
    $( Every set is an element of some other set.  See ~ elALT for a shorter
       proof using more axioms.  (Contributed by NM, 4-Jan-2002.)  (Proof
       shortened by Andrew Salmon, 25-Jul-2011.) $)
    el $p |- E. y x e. y $=
      ( vz wel wi wal zfpow weq ax-9 alrimiv ax-8 embantd spimv eximii ) BCDBAD
      EZBFZCBDZEZCFABDZBBCAGRSCACAHZPQSTOBCABIJCABKLMN $.
  $}

  ${
    $d A x y z $.
    zfpowcl.1 $e |- A e. _V $.
    $( Power set axiom expressed in class notation.  Axiom 4 of [TakeutiZaring]
       p. 17.  (Contributed by NM, 21-Jun-1993.)  (Proof shortened by Andrew
       Salmon, 25-Jul-2011.) $)
    pwex $p |- ~P A e. _V $=
      ( vz vy vx cv cpw cvv wcel wceq pweq eleq1d wss cab df-pw wex wal bm1.3ii
      wb axpow2 abeq2 exbii mpbir issetri eqeltri vtocl ) CFZGZHIAGZHICABUGAJUH
      UIHUGAKLUHDFZUGMZDNZHDUGOEULEFZULJZEPUJUMIUKSDQZEPUKEDCEDTRUNUOEUKDUMUAUB
      UCUDUEUF $.
  $}

  ${
    $d x A $.
    $( Power set axiom expressed in class notation, with the sethood
       requirement as an antecedent.  Axiom 4 of [TakeutiZaring] p. 17.
       (Contributed by NM, 30-Oct-2003.) $)
    pwexg $p |- ( A e. V -> ~P A e. _V ) $=
      ( vx cv cpw cvv wcel wceq pweq eleq1d vex pwex vtoclg ) CDZEZFGAEZFGCABNA
      HOPFNAIJNCKLM $.

    $( Existence of a class of subsets.  (Contributed by NM, 15-Jul-2006.)
       (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    abssexg $p |- ( A e. V -> { x | ( x C_ A /\ ph ) } e. _V ) $=
      ( wcel cpw cvv cv wss wa pwexg df-pw eleq1i simpl ss2abi ssexg mpan sylbi
      cab syl ) CDECFZGEZBHCIZAJZBSZGEZCDKUBUCBSZGEZUFUAUGGBCLMUEUGIUHUFUDUCBUC
      ANOUEUGGPQRT $.
  $}

  ${
    $d x y A $.
    $( Alternate proof of ~ snex using Power Set ( ~ ax-pow ) instead of
       Pairing ( ~ ax-pr ).  Unlike in the proof of ~ zfpair , Replacement
       ( ~ ax-rep ) is not needed.  (Contributed by NM, 7-Aug-1994.)  (Proof
       shortened by Andrew Salmon, 25-Jul-2011.)  See also ~ snex .
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    snexALT $p |- { A } e. _V $=
      ( cpw cvv wcel csn wss snsspw ssexg mpan wn pwexg con3i wceq snprc biimpi
      c0 0ex syl6eqel syl pm2.61i ) ABZCDZAEZCDZUCUAFUBUDAGUCUACHIUBJACDZJZUDUE
      UBACKLUFUCPCUFUCPMANOQRST $.
  $}

  $( The power set of the empty set (the ordinal 1) is a set.  See also
     ~ p0exALT .  (Contributed by NM, 23-Dec-1993.) $)
  p0ex $p |- { (/) } e. _V $=
    ( c0 cpw csn cvv pw0 0ex pwex eqeltrri ) ABACDEAFGH $.

  $( Alternate proof of ~ p0ex which is quite different and longer if ~ snexALT
     is expanded.  (Contributed by NM, 23-Dec-1993.)
     (Proof modification is discouraged.)  (New usage is discouraged.) $)
  p0exALT $p |- { (/) } e. _V $=
    ( c0 snexALT ) AB $.

  $( The power set of the power set of the empty set (the ordinal 2) is a set.
     (Contributed by NM, 24-Jun-1993.) $)
  pp0ex $p |- { (/) , { (/) } } e. _V $=
    ( c0 csn cpw cpr cvv pwpw0 p0ex pwex eqeltrri ) ABZCAJDEFJGHI $.

  $( The ordinal number 3 is a set, proved without the Axiom of Union
     ~ ax-un .  (Contributed by NM, 2-May-2009.) $)
  ord3ex $p |- { (/) , { (/) } , { (/) , { (/) } } } e. _V $=
    ( c0 csn cpr ctp cun cvv df-tp cpw pwpr pp0ex pwex eqeltrri wss unss2 ax-mp
    snsspr2 ssexi eqeltri ) AABZASCZDTTBZEZFASTGUBTSBZTCZEZTHUEFASITJKLUAUDMUBU
    EMUCTPUAUDTNOQR $.

  ${
    $d w x y z $.
    $( At least two sets exist (or in terms of first-order logic, the universe
       of discourse has two or more objects).  Note that we may not substitute
       the same variable for both ` x ` and ` y ` (as indicated by the distinct
       variable requirement), for otherwise we would contradict ~ stdpc6 .

       This theorem is proved directly from set theory axioms (no set theory
       definitions) and does not use ~ ax-ext or ~ ax-sep .  See ~ dtruALT for
       a shorter proof using these axioms.

       The proof makes use of dummy variables ` z ` and ` w ` which do not
       appear in the final theorem.  They must be distinct from each other and
       from ` x ` and ` y ` .  In other words, if we were to substitute ` x `
       for ` z ` throughout the proof, the proof would fail.  (Contributed by
       NM, 7-Nov-2006.) $)
    dtru $p |- -. A. x x = y $=
      ( vw vz weq wn wex wal wel wa el ax-nul sp eeanv mpbir2an ax-9 ax-7 con3d
      eximii spimev com12 con3dimp 2eximi wi equequ2 notbid syl6bi a1d exlimivv
      pm2.61i mp2b exnal mpbi ) ABEZFZAGZUNAHFACIZADIZFZJZDGCGZCDEZFZDGCGUPVAUQ
      CGUSDGACKUSAHUSDDALUSAMSUQUSCDNOUTVCCDUQVBURVBUQURCDAPUAUBUCVCUPCDDBEZVCU
      PUDVDVCCBEZFZUPVDVBVEDBCUEUFVFUOACACEUNVEACBQRTUGVDFZUPVCVGUOADADEUNVDADB
      QRTUHUJUIUKUNAULUM $.
  $}

  ${
    $d x y $.
    $( This theorem shows that axiom ~ ax-c16 is redundant in the presence of
       theorem ~ dtru , which states simply that at least two things exist.
       This justifies the remark at
       ~ http://us.metamath.org/mpeuni/mmzfcnd.html#twoness (which links to
       this theorem).  (Proof modification is discouraged.)
       (New usage is discouraged.)  (Contributed by NM, 7-Nov-2006.) $)
    axc16b $p |- ( A. x x = y -> ( ph -> A. x ph ) ) $=
      ( weq wal wi dtru pm2.21i ) BCDBEAABEFBCGH $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( Existential uniqueness implies there is a value for which the wff
       argument is false.  (Contributed by NM, 24-Oct-2010.) $)
    eunex $p |- ( E! x ph -> E. x -. ph ) $=
      ( vy wex weq wi wal wa wn weu dtru alim mtoi exlimiv adantl exnal 3imtr4i
      eu3v ) ABDZABCEZFBGZCDZHABGZIZABJAIBDUBUDSUAUDCUAUCTBGBCKATBLMNOABCRABPQ
      $.
  $}

  ${
    $d x y z $.  $d A y z $.
    $( Two ways to express single-valuedness of a class expression
       ` A ( x ) ` .  (Contributed by NM, 14-Oct-2010.) $)
    eusv1 $p |- ( E! y A. x y = A <-> E. y A. x y = A ) $=
      ( vz cv wceq wal weu wex wa wi sp eqtr3 syl2an gen2 eqeq1 albidv mpbiran2
      eu4 ) BEZCFZAGZBHUBBIUBDEZCFZAGZJTUCFZKZDGBGUGBDUBUAUDUFUEUAALUDALTUCCMNO
      UBUEBDUFUAUDATUCCPQSR $.
  $}

  ${
    $d x y z w $.  $d A y z w $.
    $( Even if ` x ` is free in ` A ` , it is effectively bound when
       ` A ( x ) ` is single-valued.  (Contributed by NM, 14-Oct-2010.)
       (Revised by Mario Carneiro, 14-Oct-2016.) $)
    eusvnf $p |- ( E! y A. x y = A -> F/_ x A ) $=
      ( vz vw cv wceq wal csb cvv wcel wi vex nfcv nfcsb1v nfeq2 csbeq1a eqeq2d
      spcgf ax-mp weu wex wnfc euex eqtr3d alrimivv sbnfc2 sylibr exlimiv syl )
      BFZCGZAHZBUAUMBUBACUCZUMBUDUMUNBUMADFZCIZAEFZCIZGZEHDHUNUMUSDEUMUKUPURUOJ
      KUMUKUPGZLDMULUTAUOJAUONAUKUPAUOCOPAFZUOGCUPUKAUOCQRSTUQJKUMUKURGZLEMULVB
      AUQJAUQNAUKURAUQCOPVAUQGCURUKAUQCQRSTUEUFADECUGUHUIUJ $.

    $( Two ways to say that ` A ( x ) ` is a set expression that does not
       depend on ` x ` .  (Contributed by Mario Carneiro, 18-Nov-2016.) $)
    eusvnfb $p |- ( E! y A. x y = A <-> ( F/_ x A /\ A e. _V ) ) $=
      ( wceq wal weu wnfc cvv wcel eusvnf wex euex eqvisset sps exlimiv syl jca
      cv wa isset nfcvd id nfeqd nfrd eximdv syl5bi imp eusv1 sylibr impbii ) B
      RZCDZAEZBFZACGZCHIZSZUNUOUPABCJUNUMBKZUPUMBLUMUPBULUPABCMNOPQUQURUNUOUPUR
      UPULBKUOURBCTUOULUMBUOULAUOAUKCUOAUKUAUOUBUCUDUEUFUGABCUHUIUJ $.
  $}

  ${
    $d x y $.  $d A y $.
    $( Two ways to express single-valuedness of a class expression
       ` A ( x ) ` .  (Contributed by NM, 14-Oct-2010.)  (Revised by Mario
       Carneiro, 18-Nov-2016.) $)
    eusv2i $p |- ( E! y A. x y = A -> E! y E. x y = A ) $=
      ( cv wceq wal weu wex nfeu1 wnf nfcvd eusvnf nfeqd nf2 sylib 19.2 impbid1
      wi eubid ibir ) BDZCEZAFZBGZUBAHZBGUDUEUCBUCBIUDUEUCUDUBAJUEUCRUDAUACUDAU
      AKABCLMUBANOUBAPQST $.
  $}

  ${
    $d x y z v w $.  $d A y z w v $.
    eusv2.1 $e |- A e. _V $.
    $( Two ways to express single-valuedness of a class expression
       ` A ( x ) ` .  (Contributed by Mario Carneiro, 18-Nov-2016.) $)
    eusv2nf $p |- ( E! y E. x y = A <-> F/_ x A ) $=
      ( cv wceq wex weu wnfc wnf wal nfeu1 wi nfe1 nfeu wa isseti alrimi sylibr
      cvv 19.8a ancri eximii eupick mpan2 nf3 wcel wb dfnfc2 mpg eusvnfb eusv2i
      mpbiran2 sylbir impbii ) BECFZAGZBHZACIZURUPAJZBKZUSURUTBUQBLURUQUPMZAKUT
      URVBAUQABUPANOURUQUPPZBGVBUPVCBBCDQUPUQUPAUAUBUCUQUPBUDUERUPAUFSRCTUGZUSV
      AUHAABCTUIDUJSUSUPAKBHZURVEUSVDDABCUKUMABCULUNUO $.

    $( Two ways to express single-valuedness of a class expression
       ` A ( x ) ` .  (Contributed by NM, 15-Oct-2010.)  (Proof shortened by
       Mario Carneiro, 18-Nov-2016.) $)
    eusv2 $p |- ( E! y E. x y = A <-> E! y A. x y = A ) $=
      ( cv wceq wex weu wnfc wal eusv2nf cvv wcel eusvnfb mpbiran2 bitr4i ) BEC
      FZAGBHACIZQAJBHZABCDKSRCLMDABCNOP $.
  $}

  ${
    $d x z A $.  $d w x z B $.  $d x z C $.  $d w x z ph $.  $d w x y z $.
    $( Two ways to express single-valuedness of a class expression
       ` C ( y ) ` .  (Contributed by NM, 16-Dec-2012.)  (Proof shortened by
       Mario Carneiro, 18-Nov-2016.) $)
    reusv1 $p |- ( E. y e. B ph -> ( E! x e. A A. y e. B ( ph -> x = C )
                   <-> E. x e. A A. y e. B ( ph -> x = C ) ) ) $=
      ( wrex cv wceq wi wral wmo wrmo wreu wb nfra1 nfmo wcel wa wal impd com12
      rsp alrimiv moeq moim mpisyl ex rexlimi mormo reu5 rbaib 3syl ) ACEGABHFI
      ZJZCEKZBLZUPBDMZUPBDNZUPBDGZOAUQCEUPCBUOCEPQCHERZAUQVAASZUPUNJZBTUNBLUQVB
      VCBUPVBUNUPVAAUNUOCEUCUAUBUDBFUEUPUNBUFUGUHUIUPBDUJUSUTURUPBDUKULUM $.
  $}

  ${
    $d x y z A $.  $d x z B $.  $d x z C $.  $d x z ph $.
    $( Lemma for ~ reusv2 .  (Contributed by NM, 22-Oct-2010.)  (Proof
       shortened by Mario Carneiro, 19-Nov-2016.) $)
    reusv2lem1 $p |- ( A =/= (/) -> ( E! x A. y e. A x = B
                     <-> E. x A. y e. A x = B ) ) $=
      ( c0 wne cv wceq wral wmo weu wex wb wcel n0 nfra1 nfmo wi wal rsp mpisyl
      com12 alrimiv moeq moim exlimi sylbi eu5 rbaib syl ) CEFZAGDHZBCIZAJZUMAK
      ZUMALZMUKBGCNZBLUNBCOUQUNBUMBAULBCPQUQUMULRZASULAJUNUQURAUMUQULULBCTUBUCA
      DUDUMULAUEUAUFUGUOUPUNUMAUHUIUJ $.

    $( Lemma for ~ reusv2 .  (Contributed by NM, 27-Oct-2010.)  (Proof
       shortened by Mario Carneiro, 19-Nov-2016.) $)
    reusv2lem2 $p |- ( E! x A. y e. A x = B -> E! x E. y e. A x = B ) $=
      ( vz cv wceq wral weu wrex wi c0 wal wn wex eunex sylib wa nfra1 ex exnal
      rzal alrimiv nsyl3 pm2.21d wne simpr wb euex ralbidv cbvexv nfv nfan wcel
      eqeq1 simprr rspa ad2ant2lr eqtr4d simplr syl5ibrcom exp32 rexlimd r19.2z
      mpd adantr impbid eubidv exlimdv syl5 imp mpbird pm2.61ine ) AFZDGZBCHZAI
      ZVOBCJZAIZKCLCLGZVQVSVQVPAMZVTVQVPNAOWANVPAPVPAUAQVTVPAVOBCUBUCUDUECLUFZV
      QVSWBVQRVSVQWBVQUGWBVQVSVQUHZVQEFZDGZBCHZEOZWBWCVQVPAOWGVPAUIVPWFAEVNWDGZ
      VOWEBCVNWDDUOUJZUKQWBWFWCEWBWFWCWBWFRZVRVPAWJVRVPWJVOVPBCWBWFBWBBULWEBCSU
      MVOBCSWJBFCUNZVOVPWJWKVORZRZWHVPWMVNDWDWJWKVOUPWFWKWEWBVOWEBCUQURUSWMVPWH
      WFWBWFWLUTWIVAVEVBVCWBVPVRKWFWBVPVRVOBCVDTVFVGVHTVIVJVKVLTVM $.

    $( Lemma for ~ reusv2 .  (Contributed by NM, 14-Dec-2012.)  (Proof
       shortened by Mario Carneiro, 19-Nov-2016.) $)
    reusv2lem3 $p |- ( A. y e. A B e. _V ->
          ( E! x E. y e. A x = B <-> E! x A. y e. A x = B ) ) $=
      ( cvv wcel wral cv wceq wrex weu wa simpr nfv nfeu1 nfan wi wex syl ex c0
      wne euex rexn0 exlimiv adantl r19.2z nfra1 nfre1 nfeu simplr adantr isset
      rsp imp sylib rspe ancrd eximdv eupick syl2anc com23 ralrimd impbid eubid
      sylc mpbird reusv2lem2 impbid1 ) DEFZBCGZAHDIZBCJZAKZVLBCGZAKZVKVNVPVKVNL
      ZVPVNVKVNMVQVOVMAVKVNAVKANVMAOPVQVOVMVQCUAUBZVOVMQVNVRVKVNVMARVRVMAUCVMVR
      AVLBCUDUESUFVRVOVMVLBCUGTSVQVMVLBCVKVNBVJBCUHVMBAVLBCUIZUJPVSVQBHCFZVMVLV
      QVTVMVLQZVQVTLZVNVMVLLZARZWAVKVNVTUKWBVTVLARZWDVQVTMWBVJWEVQVTVJVKVTVJQVN
      VJBCUNULUOADUMUPVTVLWCAVTVLVMVTVLVMVLBCUQTURUSVFVMVLAUTVATVBVCVDVEVGTABCD
      VHVI $.

    $( Lemma for ~ reusv2 .  (Contributed by NM, 13-Dec-2012.) $)
    reusv2lem4 $p |- ( E! x e. A E. y e. B ( ph /\ x = C )
            <-> E! x A. y e. B ( ( C e. A /\ ph ) -> x = C ) ) $=
      ( vz cv wceq wa wrex wcel weu wi wral anass eleq1 nfv cvv wal wreu df-reu
      crab anbi1i anbi1d pm5.32ri bitr3i anbi2i 3bitr4ri rexbii2 r19.42v nfrab1
      csb rabid nfcv nfcsb1v nfeq2 csbeq1a eqeq2d cbvrexf 3bitr3i eubii wb elex
      ad2antrl sylbi rgen nfel1 eleq1d cbvralf mpbi reusv2lem3 ax-mp nfcri nfim
      df-ral imbi12d cbval imbi1i impexp bitri albii bitr4i 3bitr2i 3bitri ) AB
      HZFIZJZCEKZBDUAWFDLZWIJZBMWFCGHZFUMZIZGFDLZAJZCEUCZKZBMZWPWGNZCEOZBMZWIBD
      UBWKWRBWJWHJZCEKWGCWQKWKWRXCWGCEWQCHZELZWPJZWGJXEWPWGJZJXDWQLZWGJXEXCJXEW
      PWGPXHXFWGWPCEUNZUDXCXGXEXCWJAJZWGJXGWJAWGPWGXJWPWGWJWOAWFFDQUEUFUGUHUIUJ
      WJWHCEUKWGWNCGWQWPCEULZGWQUOZWGGRCWFWMCWLFUPZUQZXDWLIZFWMWFCWLFURZUSZUTVA
      VBWSWNGWQOZBMZXBWMSLZGWQOZWSXSVCFSLZCWQOYAYBCWQXHXFYBXIWOYBXEAFDVDVEVFVGY
      BXTCGWQXKXLYBGRCWMSXMVHXOFWMSXPVIVJVKBGWQWMVLVMXRXABXRWLWQLZWNNZGTXHWGNZC
      TZXAWNGWQVPYEYDCGYEGRYCWNCCGWQXKVNXNVOXOXHYCWGWNXDWLWQQXQVQVRYFXEWTNZCTXA
      YEYGCYEXFWGNYGXHXFWGXIVSXEWPWGVTWAWBWTCEVPWCWDVBWAWE $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x C $.
    $( Lemma for ~ reusv2 .  (Contributed by NM, 4-Jan-2013.)  (Proof shortened
       by Mario Carneiro, 19-Nov-2016.) $)
    reusv2lem5 $p |- ( ( A. y e. B C e. A /\ B =/= (/) )
          -> ( E! x e. A E. y e. B x = C <-> E! x e. A A. y e. B x = C ) ) $=
      ( wcel wral c0 wne wa wtru cv wceq wi weu wrex wreu wb tru eubidv syl6bbr
      biimt mpan2 ibar bitr3d eleq1 pm5.32ri ralimi ralbi syl r19.28zv sylan9bb
      biantrur rexbii reubii reusv2lem4 bitri df-reu 3bitr4g ) ECFZBDGZDHIZJUTK
      JZALZEMZNZBDGZAOZVDCFZVEBDGZJZAOZVEBDPZACQZVJACQVAVHVIVEJZBDGZAOVBVLVAVGV
      PAVAVFVORZBDGVGVPRUTVQBDUTVFUTVEJZVOUTVEVFVRUTKVEVFRSVCVEUBUCUTVEUDUEVEVI
      UTVDECUFUGUAUHVFVOBDUIUJTVBVPVKAVIVEBDUKTULVNKVEJZBDPZACQVHVMVTACVEVSBDKV
      ESUMUNUOKABCDEUPUQVJACURUS $.
  $}

  ${
    $d w x y z A $.  $d w x z B $.  $d w x z C $.  $d w x z ph $.
    $( Two ways to express single-valuedness of a class expression ` C ( y ) `
       that is constant for those ` y e. B ` such that ` ph ` .  The first
       antecedent ensures that the constant value belongs to the existential
       uniqueness domain ` A ` , and the second ensures that ` C ( y ) ` is
       evaluated for at least one ` y ` .  (Contributed by NM, 4-Jan-2013.)
       (Proof shortened by Mario Carneiro, 19-Nov-2016.) $)
    reusv2 $p |- ( ( A. y e. B ( ph -> C e. A ) /\ E. y e. B ph )
          -> ( E! x e. A E. y e. B ( ph /\ x = C )
                   <-> E! x e. A A. y e. B ( ph -> x = C ) ) ) $=
      ( vz wcel wi wral cv wceq wa wrex wreu nfv cbvralf imbi1i bitri bitr3i c0
      csb crab wb nfrab1 nfcv nfcsb1v nfel1 csbeq1a eleq1d rabid impexp ralbii2
      rabn0 reusv2lem5 nfeq2 eqeq2d cbvrexf anbi1i anass rexbii2 reubii 3bitr3g
      wne syl2anbr ) AFDHZIZCEJZCGKZFUBZDHZGACEUCZJZVLUAVDZABKZFLZMZCENZBDOZAVP
      IZCEJZBDOZUDACENVMVFCVLJVHVFVKCGVLACEUEZGVLUFZVFGPCVJDCVIFUGZUHCKZVILZFVJ
      DCVIFUIZUJQVFVGCVLEWFVLHZVFIWFEHZAMZVFIWJVGIWIWKVFACEUKZRWJAVFULSUMTACEUN
      VMVNMVOVJLZGVLNZBDOWMGVLJZBDOVSWBBGDVLVJUOWNVRBDWNVPCVLNVRVPWMCGVLWCWDVPG
      PZCVOVJWEUPZWGFVJVOWHUQZURVPVQCVLEWIVPMWKVPMWJVQMWIWKVPWLUSWJAVPUTSVATVBW
      OWABDWOVPCVLJWAVPWMCGVLWCWDWPWQWRQVPVTCVLEWIVPIWKVPIWJVTIWIWKVPWLRWJAVPUL
      SUMTVBVCVE $.
  $}

  ${
    $d x y z B $.  $d x z C $.  $d x y D $.  $d x z ph $.  $d x y ps $.
    reusv3.1 $e |- ( y = z -> ( ph <-> ps ) ) $.
    reusv3.2 $e |- ( y = z -> C = D ) $.
    $( Two ways of expressing existential uniqueness via an indirect equality.
       (Contributed by NM, 23-Dec-2012.) $)
    reusv3i $p |- ( E. x e. A A. y e. B ( ph -> x = C )
            -> A. y e. B A. z e. B ( ( ph /\ ps ) -> C = D ) ) $=
      ( cv wceq wi wral wa eqeq2d imbi12d cbvralv ralimi biimpi prth eqtr2 syl6
      raaanv sylbir mpdan rexlimivw ) ACLZHMZNZDGOZABPZHIMZNZEGOZDGOZCFULBUIIMZ
      NZEGOZUQULUTUKUSDEGDLELMZABUJURJVAHIUIKQRSUAULUTPUKUSPZEGOZDGOUQUKUSDEGUE
      VCUPDGVBUOEGVBUMUJURPUNAUJBURUBUIHIUCUDTTUFUGUH $.

    $d x y z A $.
    $( Two ways to express single-valuedness of a class expression
       ` C ( y ) ` .  See ~ reusv1 for the connection to uniqueness.
       (Contributed by NM, 27-Dec-2012.) $)
    reusv3 $p |- ( E. y e. B ( ph /\ C e. A )
          -> ( A. y e. B A. z e. B ( ( ph /\ ps ) -> C = D )
                   <-> E. x e. A A. y e. B ( ph -> x = C ) ) ) $=
      ( wcel wa wrex wceq wi wral cv bitri ralbii eleq1d anbi12d nfra2 nfv nfim
      cbvrexv risset ralcom impexp bi2.04 r19.21v sylbi com3l imp31 eqeq1 eqcom
      rsp syl6bb imbi2d ralbidv syl5ibrcom reximdv com23 syl5bi expimpd rexlimi
      ex reusv3i impbid1 ) AHFLZMZDGNZABMHIOZPZEGQDGQZACRZHOZPZDGQZCFNZVLBIFLZM
      ZEGNVOVTPZVKWBDEGDRERZOZABVJWAJWEHIFKUAUBUFWBWCEGVOVTEVNDEGGUCVTEUDUEWDGL
      ZBWAWCWAVPIOZCFNZWFBMZWCCIFUGWIVOWHVTWIVOWHVTPWIVOMZWGVSCFWJVSWGAVMPZDGQZ
      WFBVOWLVOWFBWLVOBWLPZEGQZWFWMPVOVNDGQZEGQWNVNDEGGUHWOWMEGWOBWKPZDGQWMVNWP
      DGVNABVMPPWPABVMUIABVMUJSTBWKDGUKSTSWMEGUQULUMUNWGVRWKDGWGVQVMAWGVQIHOVMV
      PIHUOIHUPURUSUTVAVBVGVCVDVEVFULABCDEFGHIJKVHVI $.
  $}

  ${
    $d x y z A $.  $d x z B $.
    eusv4.1 $e |- B e. _V $.
    $( Two ways to express single-valuedness of a class expression
       ` B ( x ) ` .  (Contributed by NM, 27-Oct-2010.) $)
    eusv4 $p |- ( E! x E. y e. A x = B <-> E! x A. y e. A x = B ) $=
      ( cvv wcel cv wceq wrex weu wral wb reusv2lem3 a1i mprg ) DFGZAHDIZBCJAKR
      BCLAKMBCABCDNQBHCGEOP $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x C $.  $d x y $.
    $( Two ways to express single-valuedness of a class expression
       ` C ( y ) ` .  (Contributed by NM, 16-Dec-2012.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    reusv5OLD $p |- ( B =/= (/) -> ( E! x e. A A. y e. B x = C
                     <-> E. x e. A A. y e. B x = C ) ) $=
      ( c0 wne cv wceq wrex wral wreu wb wcel wex wa equid biantru exbii n0 wi
      df-rex 3bitr4i reusv1 a1bi ralbii reubii rexbii 3bitr4g sylbi ) DFGZBHZUL
      IZBDJZAHEIZBDKZACLZUPACJZMULDNZBOUSUMPZBOUKUNUSUTBUMUSBQZRSBDTUMBDUBUCUNU
      MUOUAZBDKZACLVCACJUQURUMABCDEUDUPVCACUOVBBDUMUOVAUEUFZUGUPVCACVDUHUIUJ $.
  $}

  ${
    $d v w x y z A $.  $d v w x y z B $.  $d v w x z C $.
    $( Two ways to express single-valuedness of a class expression
       ` C ( y ) ` .  The converse does not hold.  Note that ` U. A = |^| A `
       means ` A ` is a singleton ( ~ uniintsn ).  (Contributed by NM,
       30-Oct-2010.)  (Proof shortened by Mario Carneiro, 24-Dec-2016.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    reusv6OLD $p |- ( ( U. A =/= |^| A \/ B =/= (/) )
          -> ( E! x e. A A. y e. B x = C -> E! x e. A E. y e. B x = C ) ) $=
      ( vz wne cv wceq wral wreu wi c0 wcel wa weu csn wex nfv ex cuni wn raleq
      cint wrex reubidv df-reu uniintsn eusn ral0 biantru 3bitr2i bitr4i syl6bb
      eubii necon3bbid pm2.21 syl6bir crab wss nfrab1 nfeq1 nfan w3a nfra1 nfcv
      nfrab nf3an vex snid simp2 syl5eleqr eqeq1 ralbidv elrab simprbi r19.21bi
      syl eqeq2d biimprd elsn syl6ibr rexlimd 3expia ralrimi rabss sylibr simpr
      sseqtr4d r19.2z adantr ss2rabdv eqssd eqtrd eximdv reusn 3imtr4g a1d jaoi
      pm2.61ine ) CUAZCUDZGZAHZEIZBDJZACKZXEBDUEZACKZLZDMGZXCXJLDMDMIZXCXGUBXJX
      LXGXAXBXLXGXEBMJZACKZXAXBIZXLXFXMACXEBDMUCUFXNXDCNZXMOZAPZXOXMACUGXOCXDQI
      ARXPAPXRACUHACUIXPXQAXMXPXEBUJUKUOULUMUNUPXGXIUQURXKXJXCXKXFACUSZFHZQZIZF
      RXHACUSZYAIZFRXGXIXKYBYDFXKYBYDXKYBOZYCXSYAYEYCXSYEYCYAXSYEXHXDYANZLZACJY
      CYAUTYEYGACXKYBAXKASAXSYAXFACVAVBVCXKYBXPYGXKYBXPVDZXEYFBDXKYBXPBXKBSBXSY
      AXFBACXEBDVEBCVFVGVBXPBSVHYFBSYHBHDNZXEYFLYHYIOZXEXDXTIZYFYJYKXEYJXTEXDYH
      XTEIZBDYHXTXSNZYLBDJZYHXTYAXSXTFVIVJXKYBXPVKVLYMXTCNYNXFYNAXTCYKXEYLBDXDX
      TEVMVNVOVPVRVQVSVTAXTWAWBTWCWDWEXHACYAWFWGXKYBWHZWIXKXSYCUTYBXKXFXHACXKXF
      XHLXPXKXFXHXEBDWJTWKWLWKWMYOWNTWOXFAFCWPXHAFCWPWQZWRWTYPWS $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x C $.
    reusv7.1 $e |- ( y e. B -> C e. A ) $.
    $( Two ways to express single-valuedness of a class expression
       ` C ( y ) ` .  Note that ` U. A = |^| A ` means ` A ` is a singleton
       ( ~ uniintsn ).  (Contributed by NM, 14-Dec-2012.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    reusv7OLD $p |- ( ( U. A =/= |^| A \/ B =/= (/) )
          -> ( E! x e. A E. y e. B x = C <-> E! x e. A A. y e. B x = C ) ) $=
      ( wne cv wceq wrex wreu wral wb c0 wi wn wa wcel weu df-reu raleq reubidv
      cuni cint csn uniintsn eusn ral0 biantru 3bitr2i bitr4i syl6bb necon3bbid
      eubii biimprd reurex rexn0 rexlimivw necon2bi jctild pm5.21 syl6 r19.28zv
      wex syl eubidv reusv2lem4 equid biantrur rexbii reubii biantrurd pm5.32ri
      eleq1 syl6rbbr biimt bitrd imbi1i ralbiia 3bitr4i 3bitr4g pm2.61ine jaoi
      a1d ) CUCZCUDZGZAHZEIZBDJZACKZWIBDLZACKZMZDNGZWGWNODNDNIZWGWKPZWMPZQWNWPW
      GWRWQWPWRWGWPWMWEWFWPWMWIBNLZACKZWEWFIZWPWLWSACWIBDNUAUBWTWHCRZWSQZASZXAW
      SACTXACWHUEIAVDXBASXDACUFACUGXBXCAWSXBWIBUHUIUNUJUKULUMUOWKDNWKWJACJWOWJA
      CUPWJWOACWIBDUQURVEUSUTWKWMVAVBWOWNWGWOXBWIQZBDLZASZXBWLQZASWKWMWOXFXHAXB
      WIBDVCVFBHZXIIZWIQZBDJZACKECRZXJQZWIOZBDLZASWKXGXJABCDEVGWJXLACWIXKBDXJWI
      BVHZVIVJVKXFXPAXEXOBDXIDRZXEXMWIOZXOXRXEWIXSXRWIXMWIQXEXRXMWIFVLWIXBXMWHE
      CVNVMVOXRXMWIXSMFXMWIVPVEVQXMXNWIXJXMXQUIVRULVSUNVTWLACTWAZWDWBXTWC $.
  $}

  ${
    $d x A $.  $d y ph $.  $d x ps $.  $d x y $.
    alxfr.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       18-Feb-2007.) $)
    alxfr $p |- ( ( A. y A e. B /\ A. x E. y x = A ) ->
                ( A. x ph <-> A. y ps ) ) $=
      ( wcel wal cv wceq wex wa wi spcgv com12 alimdv adantr nfa1 nfv sp exlimd
      syl5ibrcom adantl impbid ) EFHZDIZCJEKZDLZCIZMACIZBDIZUGUKULNUJUKUGULUKUF
      BDUFUKBABCEFGOPQPRUJULUKNUGULUJUKULUIACULUHADBDSADTULAUHBBDUAGUCUBQPUDUE
      $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x C $.  $d x ch $.  $d x y ph $.  $d y ps $.
    ralxfrd.1 $e |- ( ( ph /\ y e. C ) -> A e. B ) $.
    ralxfrd.2 $e |- ( ( ph /\ x e. B ) -> E. y e. C x = A ) $.
    ralxfrd.3 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       15-Aug-2014.)  (Proof shortened by Mario Carneiro, 19-Nov-2016.) $)
    ralxfrd $p |- ( ph -> ( A. x e. B ps <-> A. y e. C ch ) ) $=
      ( wral cv wcel wa wceq wb adantlr ralrimdva wrex rspcdv r19.29 wi biimprd
      expimpd ancomsd ad2antrr rexlimdva syl5 mpan2d impbid ) ABDGLZCEHLZAULCEH
      AEMHNZOBCDFGIADMZFPZBCQUNKRUASAUMBDGAUOGNZOZUMUPEHTZBJUMUSOCUPOZEHTURBCUP
      EHUBURUTBEHAUTBUCUQUNAUPCBAUPCBAUPOBCKUDUEUFUGUHUIUJSUK $.

    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by FL,
       10-Apr-2007.)  (Revised by Mario Carneiro, 15-Aug-2014.) $)
    rexxfrd $p |- ( ph -> ( E. x e. B ps <-> E. y e. C ch ) ) $=
      ( wn wral wrex cv wceq wa notbid ralxfrd dfrex2 3bitr4g ) ABLZDGMZLCLZEHM
      ZLBDGNCEHNAUCUEAUBUDDEFGHIJADOFPQBCKRSRBDGTCEHTUA $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x C $.  $d x ch $.  $d x y ph $.  $d y ps $.
    ralxfr2d.1 $e |- ( ( ph /\ y e. C ) -> A e. V ) $.
    ralxfr2d.2 $e |- ( ph -> ( x e. B <-> E. y e. C x = A ) ) $.
    ralxfr2d.3 $e |- ( ( ph /\ x = A ) -> ( ps <-> ch ) ) $.
    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by Mario
       Carneiro, 20-Aug-2014.) $)
    ralxfr2d $p |- ( ph -> ( A. x e. B ps <-> A. y e. C ch ) ) $=
      ( cv wcel wa wceq wex elisset syl wi wrex biimprd r19.23v sylibr r19.21bi
      wral eleq1 mpbidi exlimdv mpd biimpa ralxfrd ) ABCDEFGHAEMHNOZDMZFPZDQZFG
      NZUMFINUPJDFIRSUMUOUQDUOUNGNZUQUMAUOURTZEHAUOEHUAZURTUSEHUFAURUTKUBUOUREH
      UCUDUEUNFGUGUHUIUJAURUTKUKLUL $.

    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by Mario
       Carneiro, 20-Aug-2014.)  (Proof shortened by Mario Carneiro,
       19-Nov-2016.) $)
    rexxfr2d $p |- ( ph -> ( E. x e. B ps <-> E. y e. C ch ) ) $=
      ( wn wral wrex cv wceq wa notbid dfrex2 ralxfr2d 3bitr4g ) ABMZDGNZMCMZEH
      NZMBDGOCEHOAUDUFAUCUEDEFGHIJKADPFQRBCLSUASBDGTCEHTUB $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x A $.  $d x y B $.  $d x C $.
    ralxfr.1 $e |- ( y e. C -> A e. B ) $.
    ralxfr.2 $e |- ( x e. B -> E. y e. C x = A ) $.
    ralxfr.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Transfer universal quantification from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       10-Jun-2005.)  (Revised by Mario Carneiro, 15-Aug-2014.) $)
    ralxfr $p |- ( A. x e. B ph <-> A. y e. C ps ) $=
      ( wral wb wtru cv wcel adantl wceq wrex ralxfrd trud ) ACFKBDGKLMABCDEFGD
      NGOEFOMHPCNZFOUAEQZDGRMIPUBABLMJPST $.

    $( Alternate proof of ~ ralxfr which does not use ~ ralxfrd .  (Contributed
       by NM, 10-Jun-2005.)  (Revised by Mario Carneiro, 15-Aug-2014.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    ralxfrALT $p |- ( A. x e. B ph <-> A. y e. C ps ) $=
      ( wral cv wcel wi rspcv syl com12 ralrimiv wceq wrex nfv biimprcd rexlimd
      nfra1 rsp syl6 syl5 impbii ) ACFKZBDGKZUIBDGDLGMZUIBUKEFMUIBNHABCEFJOPQRU
      JACFCLZFMULESZDGTUJAIUJUMADGBDGUDADUAUJUKBUMANBDGUEUMABJUBUFUCUGRUH $.

    $( Transfer existence from a variable ` x ` to another variable ` y `
       contained in expression ` A ` .  (Contributed by NM, 10-Jun-2005.)
       (Revised by Mario Carneiro, 15-Aug-2014.) $)
    rexxfr $p |- ( E. x e. B ph <-> E. y e. C ps ) $=
      ( wrex wn wral dfrex2 cv wceq notbid ralxfr xchbinxr bitr4i ) ACFKALZCFMZ
      LBDGKZACFNUCBLZDGMUBBDGNUAUDCDEFGHICOEPABJQRST $.
  $}

  ${
    $d x A $.  $d x y D $.  $d y ph $.  $d y ps $.  $d x ch $.
    rabxfrd.1 $e |- F/_ y B $.
    rabxfrd.2 $e |- F/_ y C $.
    rabxfrd.3 $e |- ( ( ph /\ y e. D ) -> A e. D ) $.
    rabxfrd.4 $e |- ( x = A -> ( ps <-> ch ) ) $.
    rabxfrd.5 $e |- ( y = B -> A = C ) $.
    $( Class builder membership after substituting an expression ` A `
       (containing ` y ` ) for ` x ` in the class expression ` ch ` .
       (Contributed by NM, 16-Jan-2012.) $)
    rabxfrd $p |- ( ( ph /\ B e. D ) ->
                 ( C e. { x e. D | ps } <-> B e. { y e. D | ch } ) ) $=
      ( wcel crab wb wa wi imp cv ibibr sylib anbi1d elrab rabid 3bitr4g eleq2d
      ex rabbidva nfcv nfel1 wceq eleq1d elrabf nfrab1 nfel eleq1 pm5.32 sylibr
      3bitr3g ) AGIOZHBDIPZOZGCEIPZOZQZAVBVDRZVBVFRZQVBVGSAGFVCOZEIPZOGEUAZVEOZ
      EIPZOVHVIAVKVNGAVJVMEIAVLIOZRZFIOZCRVOCRVJVMVPVQVOCAVOVQVOQZAVOVQSVOVRSAV
      OVQLUIVOVQUBUCTUDBCDFIMUECEIUFUGUJUHVJVDEGIJEIUKZEHVCKULVLGUMFHVCNUNUOVMV
      FEGIJVSEGVEJCEIUPUQVLGVEURUOVAVBVDVFUSUTT $.
  $}

  ${
    $d x A $.  $d z B $.  $d z C $.  $d x y z D $.  $d y z ph $.  $d x z ps $.
    rabxfr.1 $e |- F/_ y B $.
    rabxfr.2 $e |- F/_ y C $.
    rabxfr.3 $e |- ( y e. D -> A e. D ) $.
    rabxfr.4 $e |- ( x = A -> ( ph <-> ps ) ) $.
    rabxfr.5 $e |- ( y = B -> A = C ) $.
    $( Class builder membership after substituting an expression ` A `
       (containing ` y ` ) for ` x ` in the class expression ` ph ` .
       (Contributed by NM, 10-Jun-2005.) $)
    rabxfr $p |- ( B e. D ->
                 ( C e. { x e. D | ph } <-> B e. { y e. D | ps } ) ) $=
      ( wtru wcel crab wb tru cv adantl rabxfrd mpan ) NFHOGACHPOFBDHPOQRNABCDE
      FGHIJDSHOEHONKTLMUAUB $.
  $}

  ${
    $d x y ph $.  $d x ps $.  $d x A $.  $d x y B $.
    reuxfr2d.1 $e |- ( ( ph /\ y e. B ) -> A e. B ) $.
    reuxfr2d.2 $e |- ( ( ph /\ x e. B ) -> E* y e. B x = A ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       16-Jan-2012.)  (Revised by NM, 16-Jun-2017.) $)
    reuxfr2d $p |- ( ph
        -> ( E! x e. B E. y e. B ( x = A /\ ps ) <-> E! y e. B ps ) ) $=
      ( cv wa wrex wreu wrmo wral wi wcel syl ancom 2reuswap wmo wceq ralrimiva
      rmoan rmobii sylib df-rmo ralbii moeq moani an12 bitri mobii mpbi impbid1
      sylbir a1i mprg wb biidd ceqsrexv reubidva bitrd ) ACIZEUAZBJZDFKCFLZVECF
      KZDFLZBDFLAVFVHAVEDFMZCFNVFVHOAVICFAVCFPZJZBVDJZDFMZVIVKVDDFMVMHVDBDFUCQV
      LVEDFBVDRUDUEUBVECDFFSQVJVEJZCTZVHVFOZDFVODFNVECFMZDFNVPVQVODFVECFUFUGVED
      CFFSUOVODIFPZVJBJZVDJZCTVOVDVSCCEUHUIVTVNCVTVDVSJVNVSVDRVDVJBUJUKULUMUPUQ
      UNAVGBDFAVRJEFPVGBURGBBCEFVDBUSUTQVAVB $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x y B $.
    reuxfr2.1 $e |- ( y e. B -> A e. B ) $.
    reuxfr2.2 $e |- ( x e. B -> E* y e. B x = A ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  (Contributed by NM,
       14-Nov-2004.)  (Revised by NM, 16-Jun-2017.) $)
    reuxfr2 $p |- ( E! x e. B E. y e. B ( x = A /\ ph ) <-> E! y e. B ph ) $=
      ( cv wceq wa wrex wreu wb wtru wcel adantl wrmo reuxfr2d trud ) BHZDIZAJC
      EKBELACELMNABCDECHEODEONFPTEOUACEQNGPRS $.
  $}

  ${
    $d x y ph $.  $d y ps $.  $d x ch $.  $d x A $.  $d x y B $.
    reuxfrd.1 $e |- ( ( ph /\ y e. B ) -> A e. B ) $.
    reuxfrd.2 $e |- ( ( ph /\ x e. B ) -> E! y e. B x = A ) $.
    reuxfrd.3 $e |- ( x = A -> ( ps <-> ch ) ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  Use ~ reuhypd to
       eliminate the second hypothesis.  (Contributed by NM, 16-Jan-2012.) $)
    reuxfrd $p |- ( ph -> ( E! x e. B ps <-> E! y e. B ch ) ) $=
      ( wreu cv wceq wa wrex wcel reurex syl biantrurd r19.41v pm5.32i reubidva
      rexbii bitr3i syl6bb wrmo reurmo reuxfr2d bitrd ) ABDGKDLZFMZCNZEGOZDGKCE
      GKABUMDGAUJGPNZBUKEGOZBNZUMUNUOBUNUKEGKZUOIUKEGQRSUPUKBNZEGOUMUKBEGTURULE
      GUKBCJUAUCUDUEUBACDEFGHUNUQUKEGUFIUKEGUGRUHUI $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x A $.  $d x y B $.
    reuxfr.1 $e |- ( y e. B -> A e. B ) $.
    reuxfr.2 $e |- ( x e. B -> E! y e. B x = A ) $.
    reuxfr.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( Transfer existential uniqueness from a variable ` x ` to another
       variable ` y ` contained in expression ` A ` .  Use ~ reuhyp to
       eliminate the second hypothesis.  (Contributed by NM, 14-Nov-2004.) $)
    reuxfr $p |- ( E! x e. B ph <-> E! y e. B ps ) $=
      ( wreu wb wtru cv wcel adantl wceq reuxfrd trud ) ACFJBDFJKLABCDEFDMFNEFN
      LGOCMZFNSEPDFJLHOIQR $.
  $}

  ${
    $d y ph $.  $d y B $.  $d y C $.  $d x y $.
    reuhypd.1 $e |- ( ( ph /\ x e. C ) -> B e. C ) $.
    reuhypd.2 $e |- ( ( ph /\ x e. C /\ y e. C ) -> ( x = A <-> y = B ) ) $.
    $( A theorem useful for eliminating the restricted existential uniqueness
       hypotheses in ~ riotaxfrd .  (Contributed by NM, 16-Jan-2012.) $)
    reuhypd $p |- ( ( ph /\ x e. C ) -> E! y e. C x = A ) $=
      ( cv wcel wa wceq weu wreu cvv elex syl eueq sylib eleq1 syl5ibrcom 3expa
      pm4.71rd wb pm5.32da bitr4d eubidv mpbid df-reu sylibr ) ABIZFJZKZCIZFJZU
      KDLZKZCMZUPCFNUMUNELZCMZURUMEOJZUTUMEFJZVAGEFPQCERSUMUSUQCUMUSUOUSKUQUMUS
      UOUMUOUSVBGUNEFTUAUCUMUOUPUSAULUOUPUSUDHUBUEUFUGUHUPCFUIUJ $.
  $}

  ${
    $d y B $.  $d y C $.  $d x y $.
    reuhyp.1 $e |- ( x e. C -> B e. C ) $.
    reuhyp.2 $e |- ( ( x e. C /\ y e. C ) -> ( x = A <-> y = B ) ) $.
    $( A theorem useful for eliminating the restricted existential uniqueness
       hypotheses in ~ reuxfr .  (Contributed by NM, 15-Nov-2004.) $)
    reuhyp $p |- ( x e. C -> E! y e. C x = A ) $=
      ( wtru cv wcel wceq wreu tru adantl wb 3adant1 reuhypd mpan ) HAIZEJZSCKZ
      BELMHABCDETDEJHFNTBIZEJUAUBDKOHGPQR $.
  $}

  ${
    $d w x y z $.
    $( A setvar variable is not free from itself.  The proof relies on ~ dtru ,
       that is, it is not true in a one-element domain.  (Contributed by Mario
       Carneiro, 8-Oct-2016.) $)
    nfnid $p |- -. F/_ x x $=
      ( vy vz vw cv wnfc wel wal weq dtru ax-ext sps alimi mto wnf df-nfc sbnf2
      wb wsb elsb4 bibi12i 2albii bitri albii alrot3 3bitri mtbir ) AAEZFZBCGZB
      DGZRZBHZDHZCHZUOCDIZCHCDJUNUPCUMUPDCDBKLMNUIBAGZAOZBHULDHCHZBHUOABUHPURUS
      BURUQACSZUQADSZRZDHCHUSUQACDQVBULCDUTUJVAUKCABTDABTUAUBUCUDULBCDUEUFUG $.
    $d x z $.  $d y z $.
    $( The ""distinctor"" expression ` -. A. x x = y ` , stating that ` x ` and
       ` y ` are not the same variable, can be written in terms of ` F/ ` in
       the obvious way.  This theorem is not true in a one-element domain,
       because then ` F/_ x y ` and ` A. x x = y ` will both be true.
       (Contributed by Mario Carneiro, 8-Oct-2016.) $)
    nfcvb $p |- ( F/_ x y <-> -. A. x x = y ) $=
      ( cv wnfc weq wal wn nfnid eqidd drnfc1 mtbiri con2i nfcvf impbii ) ABCZD
      ZABEAFZGQPQPBODBHABOOQOIJKLABMN $.
  $}

  ${
    $d A x $.
    $( A class is a subclass of the power class of its union.  Exercise 6(b) of
       [Enderton] p. 38.  (Contributed by NM, 14-Oct-1996.) $)
    pwuni $p |- A C_ ~P U. A $=
      ( vx cuni cpw cv wcel wss elssuni selpw sylibr ssriv ) BAACZDZBEZAFNLGNMF
      NAHBLIJK $.
  $}

  ${
    $d x y $.
    $( Alternate proof of ~ dtru which requires more axioms but is shorter and
       may be easier to understand.

       Assuming that ZF set theory is consistent, we cannot prove this theorem
       unless we specify that ` x ` and ` y ` be distinct.  Specifically,
       theorem ~ spcev requires that ` x ` must not occur in the subexpression
       ` -. y = { (/) } ` in step 4 nor in the subexpression ` -. y = (/) ` in
       step 9.  The proof verifier will require that ` x ` and ` y ` be in a
       distinct variable group to ensure this.  You can check this by deleting
       the $d statement in set.mm and rerunning the verifier, which will print
       a detailed explanation of the distinct variable violation.  (Contributed
       by NM, 15-Jul-1994.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    dtruALT $p |- -. A. x x = y $=
      ( cv wceq wn wex wal c0 csn 0inp0 p0ex eqeq2 notbid spcev syl 0ex pm2.61i
      exnal eqcom albii xchbinx mpbi ) BCZACZDZEZAFZUDUCDZAGZEUCHDZUGUJUCHIZDZE
      ZUGUCJUFUMAUKKUDUKDUEULUDUKUCLMNOUFUJEAHPUDHDUEUJUDHUCLMNQUGUEAGUIUEARUEU
      HAUCUDSTUAUB $.
  $}

  ${
    $d x y $.
    dtrucor.1 $e |- x = y $.
    $( Corollary of ~ dtru .  This example illustrates the danger of blindly
       trusting the standard Deduction Theorem without accounting for free
       variables: the theorem form of this deduction is not valid, as shown by
       ~ dtrucor2 .  (Contributed by NM, 27-Jun-2002.) $)
    dtrucor $p |- x =/= y $=
      ( weq cv wne wal dtru pm2.21i mpg ) ABDZAEBEFZAKAGLABHICJ $.
  $}

  ${
    dtrucor2.1 $e |- ( x = y -> x =/= y ) $.
    $( The theorem form of the deduction ~ dtrucor leads to a contradiction, as
       mentioned in the ""Wrong!"" example at
       ~ http://us.metamath.org/mpeuni/mmdeduction.html#bad .  (Contributed by
       NM, 20-Oct-2007.) $)
    dtrucor2 $p |- ( ph /\ -. ph ) $=
      ( weq wex wn wa ax6e wi cv necon2bi pm2.01 ax-mp nex pm2.24ii ) BCEZBFAAG
      HBCIQBQQGZJRQBKCKDLQMNOP $.
  $}

  ${
    $d x y $.
    $( Demonstration of a theorem (scheme) that requires (meta)variables ` x `
       and ` y ` to be distinct, but no others.  It bundles the theorem schemes
       ` E. x ( x = y -> x e. x ) ` and ` E. x ( x = y -> y e. x ) ` .  Compare
       ~ dvdemo2 .  (""Bundles"" is a term introduced by Raph Levien.)
       (Contributed by NM, 1-Dec-2006.) $)
    dvdemo1 $p |- E. x ( x = y -> z e. x ) $=
      ( weq wn wel wi wex wal dtru exnal mpbir pm2.21 eximii ) ABDZEZOCAFZGAPAH
      OAIEABJOAKLOQMN $.
  $}

  ${
    $d x z $.
    $( Demonstration of a theorem (scheme) that requires (meta)variables ` x `
       and ` z ` to be distinct, but no others.  It bundles the theorem schemes
       ` E. x ( x = x -> z e. x ) ` and ` E. x ( x = y -> y e. x ) ` .  Compare
       ~ dvdemo1 .  (Contributed by NM, 1-Dec-2006.) $)
    dvdemo2 $p |- E. x ( x = y -> z e. x ) $=
      ( wel weq wi el ax-1 eximii ) CADZABEZJFACAGJKHI $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                   Derive the Axiom of Pairing
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x z w v $.  $d y z w v $.
    $( The Axiom of Pairing of Zermelo-Fraenkel set theory.  Axiom 2 of
       [TakeutiZaring] p. 15.  In some textbooks this is stated as a separate
       axiom; here we show it is redundant since it can be derived from the
       other axioms.

       This theorem should not be referenced by any proof other than ~ axpr .
       Instead, use ~ zfpair2 below so that the uses of the Axiom of Pairing
       can be more easily identified.  (Contributed by NM, 18-Oct-1995.)
       (New usage is discouraged.) $)
    zfpair $p |- { x , y } e. _V $=
      ( vw vz vv cv cpr weq wo cab cvv dfpr2 c0 wceq wex isseti mpbiran equequ2
      wa 19.41v csn 19.43 prlem2 exbii 0ex p0ex orbi12i 3bitr3ri abbii eqeltrri
      pp0ex wi wal 0inp0 prlem1 alrimdv spimev orcom syl7bi jaoi zfrep4 eqeltri
      con2i ) AFZBFZGCAHZCBHZIZCJZKCVDVELVIDFZMNZVJMUAZNZIZVKVFSZVMVGSZIZSZDOZC
      JKVHVSCVQDOVODOZVPDOZIVSVHVOVPDUBVQVRDVKVFVMVGUCUDVTVFWAVGVTVKDOVFDMUEPVK
      VFDTQWAVMDOVGDVLUFPVMVGDTQUGUHUIVNVQDCEMVLGVNDJKDMVLLUKUJVKVQCEHZULZCUMZE
      OVMVKWDEAEAHZVKWCCWEVKVFVMVGWBEACRVJUNZUOUPUQVMWDEBEBHZVMWCCVQVPVOIWGVMWB
      VOVPURWGVMVGVKVFWBEBCRVKVMWFVCUOUSUPUQUTVAVBVB $.

    $( Unabbreviated version of the Axiom of Pairing of ZF set theory, derived
       as a theorem from the other axioms.

       This theorem should not be referenced by any proof.  Instead, use
       ~ ax-pr below so that the uses of the Axiom of Pairing can be more
       easily identified.  (Contributed by NM, 14-Nov-2006.)
       (New usage is discouraged.) $)
    axpr $p |- E. z A. w ( ( w = x \/ w = y ) -> w e. z ) $=
      ( cv cpr wceq wo wcel wi wal zfpair isseti wb dfcleq vex bibi2i bi2 sylbi
      elpr alimi eximii ) CEZAEZBEZFZGZDEZUDGUHUEGHZUHUCIZJZDKZCCUFABLMUGUJUHUF
      IZNZDKULDUCUFOUNUKDUNUJUINUKUMUIUJUHUDUEDPTQUJUIRSUASUB $.

    $( The Axiom of Pairing of ZF set theory.  It was derived as theorem ~ axpr
       above and is therefore redundant, but we state it as a separate axiom
       here so that its uses can be identified more easily.  (Contributed by
       NM, 14-Nov-2006.) $)
    ax-pr $a |- E. z A. w ( ( w = x \/ w = y ) -> w e. z ) $.
    $( $j restatement 'ax-pr' of 'axpr'; $)

    $( Derive the abbreviated version of the Axiom of Pairing from ~ ax-pr .
       See ~ zfpair for its derivation from the other axioms.  (Contributed by
       NM, 14-Nov-2006.) $)
    zfpair2 $p |- { x , y } e. _V $=
      ( vz vw cv cpr wceq wex wcel wo wal ax-pr bm1.3ii dfcleq vex bibi2i albii
      wb elpr bitri exbii mpbir issetri ) CAEZBEZFZCEZUFGZCHDEZUGIZUIUDGUIUEGJZ
      RZDKZCHUKCDABCDLMUHUMCUHUJUIUFIZRZDKUMDUGUFNUOULDUNUKUJUIUDUEDOSPQTUAUBUC
      $.
  $}

  ${
    $d x A $.
    $( A singleton is a set.  Theorem 7.12 of [Quine] p. 51, proved using
       Extensionality, Separation, Null Set, and Pairing.  See also
       ~ snexALT .  (Contributed by NM, 7-Aug-1994.)  (Revised by Mario
       Carneiro, 19-May-2013.)  (Proof modification is discouraged.) $)
    snex $p |- { A } e. _V $=
      ( vx cvv wcel csn cpr dfsn2 cv wceq preq12 anidms eleq1d zfpair2 syl5eqel
      vtoclg wn c0 snprc biimpi 0ex syl6eqel pm2.61i ) ACDZAEZCDUCUDAAFZCAGBHZU
      FFZCDUECDBACUFAIZUGUECUHUGUEIUFUFAAJKLBBMONUCPZUDQCUIUDQIARSTUAUB $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The Axiom of Pairing using class variables.  Theorem 7.13 of [Quine]
       p. 51.  By virtue of its definition, an unordered pair remains a set
       (even though no longer a pair) even when its components are proper
       classes (see ~ prprc ), so we can dispense with hypotheses requiring
       them to be sets.  (Contributed by NM, 15-Jul-1993.) $)
    prex $p |- { A , B } e. _V $=
      ( vx vy cvv wcel cpr wi wceq preq2 eleq1d zfpair2 vtoclg preq1 syl5ib csn
      cv wn snex syl6eqel vtocleg prprc1 prprc2 pm2.61nii ) AEFZBEFZABGZEFZUFUH
      HCAEUFCQZBGZEFZUIAIZUHUIDQZGZEFUKDBEUMBIUNUJEUMBUIJKCDLMULUJUGEUIABNKOUAU
      ERUGBPEABUBBSTUFRUGAPEABUCASTUD $.
  $}

  ${
    $d x y $.
    $( Alternate proof of ~ el , shorter but requiring more axioms.
       (Contributed by NM, 4-Jan-2002.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    elALT $p |- E. y x e. y $=
      ( cv csn wcel wex vex snid snex eleq2 spcev ax-mp ) ACZMDZEZMBCZEZBFMAGHQ
      OBNMIPNMJKL $.
  $}

  ${
    $d x y $.
    $( Alternate proof of ~ dtru using ~ ax-pr instead of ~ ax-pow .
       (Contributed by Mario Carneiro, 31-Aug-2015.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    dtruALT2 $p |- -. A. x x = y $=
      ( cv wceq wn wex wal c0 csn 0inp0 snex eqeq2 notbid spcev syl 0ex pm2.61i
      exnal eqcom albii xchbinx mpbi ) BCZACZDZEZAFZUDUCDZAGZEUCHDZUGUJUCHIZDZE
      ZUGUCJUFUMAUKHKUDUKDUEULUDUKUCLMNOUFUJEAHPUDHDUEUJUDHUCLMNQUGUEAGUIUEARUE
      UHAUCUDSTUAUB $.
  $}

  ${
    $( A singleton of a set belongs to the power class of a class containing
       the set.  (Contributed by Alan Sare, 25-Aug-2011.) $)
    snelpwi $p |- ( A e. B -> { A } e. ~P B ) $=
      ( wcel csn wss cpw snssi snex elpw sylibr ) ABCADZBEKBFCABGKBAHIJ $.
  $}

  ${
    snelpw.1 $e |- A e. _V $.
    $( A singleton of a set belongs to the power class of a class containing
       the set.  (Contributed by NM, 1-Apr-1998.) $)
    snelpw $p |- ( A e. B <-> { A } e. ~P B ) $=
      ( wcel csn wss cpw snss snex elpw bitr4i ) ABDAEZBFLBGDABCHLBAIJK $.
  $}

  $( A pair of two sets belongs to the power class of a class containing those
     two sets.  (Contributed by Thierry Arnoux, 10-Mar-2017.) $)
  prelpwi $p |- ( ( A e. C /\ B e. C ) -> { A , B } e. ~P C ) $=
    ( wcel wa cpr wss cpw prssi prex elpw sylibr ) ACDBCDEABFZCGMCHDABCIMCABJKL
    $.

  ${
    $d x y z $.
    $( A theorem similar to extensionality, requiring the existence of a
       singleton.  Exercise 8 of [TakeutiZaring] p. 16.  (Contributed by NM,
       10-Aug-1993.) $)
    rext $p |- ( A. z ( x e. z -> y e. z ) -> x = y ) $=
      ( cv wcel wi wal csn wceq ssnid snex eleq2 imbi12d spcv mpi equcomi sylbi
      elsn syl ) ADZCDZEZBDZUAEZFZCGZUCTHZEZTUCIZUFTUGEZUHAJUEUJUHFCUGTKUAUGIUB
      UJUDUHUAUGTLUAUGUCLMNOUHUCTIUIBTRBAPQS $.
  $}

  ${
    $d A x $.  $d B x $.
    $( Classes are subclasses if and only if their power classes are
       subclasses.  Exercise 18 of [TakeutiZaring] p. 18.  (Contributed by NM,
       13-Oct-1996.) $)
    sspwb $p |- ( A C_ B <-> ~P A C_ ~P B ) $=
      ( vx wss cpw wcel sstr2 com12 vex elpw 3imtr4g ssrdv csn ssel snex bitr4i
      cv snss 3imtr3g impbii ) ABDZAEZBEZDZUACUBUCUACQZADZUEBDZUEUBFUEUCFUFUAUG
      UEABGHUEACIZJUEBUHJKLUDCABUDUEMZUBFZUIUCFZUEAFZUEBFZUBUCUINUJUIADULUIAUEO
      ZJUEAUHRPUKUIBDUMUIBUNJUEBUHRPSLT $.
  $}

  ${
    $d A x y $.
    $( A class equals the union of its power class.  Exercise 6(a) of
       [Enderton] p. 38.  (Contributed by NM, 14-Oct-1996.)  (Proof shortened
       by Alan Sare, 28-Dec-2008.) $)
    unipw $p |- U. ~P A = A $=
      ( vx vy cpw cuni cv wcel wa wex eluni elelpwi exlimiv sylbi ssnid snelpwi
      csn elunii sylancr impbii eqriv ) BADZEZABFZUBGZUCAGZUDUCCFZGUFUAGHZCIUEC
      UCUAJUGUECUCUFAKLMUEUCUCPZGUHUAGUDBNUCAOUCUHUAQRST $.
  $}

  $( The union of the universe is the universe.  Exercise 4.12(c) of
     [Mendelson] p. 235.  (Contributed by NM, 14-Sep-2003.) $)
  univ $p |- U. _V = _V $=
    ( cvv cpw cuni pwv unieqi unipw eqtr3i ) ABZCACAHADEAFG $.

  $( Membership of a power class.  Exercise 10 of [Enderton] p. 26.
     (Contributed by NM, 13-Jan-2007.) $)
  pwel $p |- ( A e. B -> ~P A e. ~P ~P U. B ) $=
    ( wcel cpw cuni wss elssuni sspwb sylib cvv wb pwexg elpwg syl mpbird ) ABC
    ZADZBEZDZDCZQSFZPARFUAABGARHIPQJCTUAKABLQSJMNO $.

  $( A class is transitive iff its power class is transitive.  (Contributed by
     Alan Sare, 25-Aug-2011.)  (Revised by Mario Carneiro, 15-Jun-2014.) $)
  pwtr $p |- ( Tr A <-> Tr ~P A ) $=
    ( cpw cuni wss wtr unipw sseq1i df-tr dftr4 3bitr4ri ) ABZCZKDAKDKEAELAKAFG
    KHAIJ $.

  ${
    $d A x $.  $d B x $.
    $( An extensionality-like principle defining subclass in terms of subsets.
       (Contributed by NM, 30-Jun-2004.) $)
    ssextss $p |- ( A C_ B <-> A. x ( x C_ A -> x C_ B ) ) $=
      ( wss cpw cv wcel wi wal sspwb dfss2 selpw imbi12i albii 3bitri ) BCDBEZC
      EZDAFZPGZRQGZHZAIRBDZRCDZHZAIBCJAPQKUAUDASUBTUCABLACLMNO $.

    $( An extensionality-like principle that uses the subset instead of the
       membership relation: two classes are equal iff they have the same
       subsets.  (Contributed by NM, 30-Jun-2004.) $)
    ssext $p |- ( A = B <-> A. x ( x C_ A <-> x C_ B ) ) $=
      ( wss wa cv wi wal wceq wb ssextss anbi12i eqss albiim 3bitr4i ) BCDZCBDZ
      EAFZBDZRCDZGAHZTSGAHZEBCISTJAHPUAQUBABCKACBKLBCMSTANO $.

    $( Negation of subclass relationship.  Compare ~ nss .  (Contributed by NM,
       30-Jun-2004.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    nssss $p |- ( -. A C_ B <-> E. x ( x C_ A /\ -. x C_ B ) ) $=
      ( cv wss wn wa wex wi wal exanali ssextss xchbinxr bicomi ) ADZBEZOCEZFGA
      HZBCEZFRPQIAJSPQAKABCLMN $.
  $}

  $( Classes are equal if and only if their power classes are equal.  Exercise
     19 of [TakeutiZaring] p. 18.  (Contributed by NM, 13-Oct-1996.) $)
  pweqb $p |- ( A = B <-> ~P A = ~P B ) $=
    ( wss wa cpw wceq sspwb anbi12i eqss 3bitr4i ) ABCZBACZDAEZBEZCZNMCZDABFMNF
    KOLPABGBAGHABIMNIJ $.

  ${
    $d x A $.
    intid.1 $e |- A e. _V $.
    $( The intersection of all sets to which a set belongs is the singleton of
       that set.  (Contributed by NM, 5-Jun-2009.) $)
    intid $p |- |^| { x | A e. x } = { A } $=
      ( cv wcel cab cint csn cvv wss snex eleq2 intmin3 ax-mp wi elintab mpgbir
      snid id snssi eqssi ) BADZEZAFGZBHZUEIEUDUEJBKUCBUEEAUEIUBUEBLBCRMNBUDEZU
      EUDJUFUCUCOAUCABCPUCSQBUDTNUA $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( ""At most one"" existence implies a class abstraction exists.
       (Contributed by NM, 30-Dec-1996.) $)
    moabex $p |- ( E* x ph -> { x | ph } e. _V ) $=
      ( vy wmo weq wi wal wex cab cvv wcel mo2v csn wss abss imbi2i albii bitri
      cv elsn snex ssex sylbir exlimiv sylbi ) ABDABCEZFZBGZCHABIZJKZABCLUHUJCU
      HUICSZMZNZUJUMABSULKZFZBGUHABULOUOUGBUNUFABUKTPQRUIULUKUAUBUCUDUE $.
  $}

  $( Restricted ""at most one"" existence implies a restricted class abstraction
     exists.  (Contributed by NM, 17-Jun-2017.) $)
  rmorabex $p |- ( E* x e. A ph -> { x e. A | ph } e. _V ) $=
    ( cv wcel wa wmo cab cvv wrmo crab moabex df-rmo df-rab eleq1i 3imtr4i ) BD
    CEAFZBGQBHZIEABCJABCKZIEQBLABCMSRIABCNOP $.

  $( The abstraction of a wff with existential uniqueness exists.  (Contributed
     by NM, 25-Nov-1994.) $)
  euabex $p |- ( E! x ph -> { x | ph } e. _V ) $=
    ( weu wmo cab cvv wcel eumo moabex syl ) ABCABDABEFGABHABIJ $.

  ${
    $d x y A $.
    $( A nonempty class (even if proper) has a nonempty subset.  (Contributed
       by NM, 23-Aug-2003.) $)
    nnullss $p |- ( A =/= (/) -> E. x ( x C_ A /\ x =/= (/) ) ) $=
      ( vy c0 wne cv wcel wex wss wa n0 csn vex snss snnz snex wceq sseq1 neeq1
      sylbi anbi12d spcev mpan2 exlimiv ) BDECFZBGZCHAFZBIZUGDEZJZAHZCBKUFUKCUF
      UELZBIZUKUEBCMZNUMULDEZUKUEUNOUJUMUOJAULUEPUGULQUHUMUIUOUGULBRUGULDSUAUBU
      CTUDT $.
  $}

  ${
    $d x y z A $.  $d y z ph $.
    $( Restricted existence in a class (even if proper) implies restricted
       existence in a subset.  (Contributed by NM, 23-Aug-2003.) $)
    exss $p |- ( E. x e. A ph -> E. y ( y C_ A /\ E. x e. y ph ) ) $=
      ( vz wrex cv wcel wa cab wex wss crab c0 wne df-rab rabn0 sylbi wsb bitri
      neeq1i 3bitr3i csn vex snss ssab2 sstr2 mpi simpr wceq equsb1 sbbii mpbir
      n0 elsn jctil df-clab sban eleq2i 3imtr4i ne0i syl sylib snex sseq1 rexeq
      anbi12d spcev syl2anc exlimiv ) ABDFZEGZBGZDHZAIZBJZHZEKZCGZDLZABVSFZIZCK
      ZABDMZNOVPNOVKVRWDVPNABDPUAABDQEVPUNUBVQWCEVQVLUCZDLZABWEFZWCVQWEVPLZWFVL
      VPEUDUEWHVPDLWFABDUFWEVPDUGUHRVQABWEMZNOZWGVQVLWIHZWJVNBESZABESZIZVMWEHZB
      ESZWMIZVQWKWNWMWPWLWMUIWPVMVLUJZBESBEUKWOWRBEBVLUOULUMUPVQVOBESWNVOEBUQVN
      ABEURTWKVLWOAIZBJZHZWQWIWTVLABWEPUSXAWSBESWQWSEBUQWOABEURTTUTWIVLVAVBABWE
      QVCWBWFWGICWEVLVDVSWEUJVTWFWAWGVSWEDVEABVSWEVFVGVHVIVJR $.
  $}

  $( An ordered pair of classes is a set.  Exercise 7 of [TakeutiZaring]
     p. 16.  (Contributed by NM, 18-Aug-1993.)  (Revised by Mario Carneiro,
     26-Apr-2015.) $)
  opex $p |- <. A , B >. e. _V $=
    ( cop cvv wcel wa csn cpr c0 cif dfopif prex 0ex ifex eqeltri ) ABCADEBDEFZ
    AGZABHZHZIJDABKPSIQRLMNO $.

  $( An ordered triple of classes is a set.  (Contributed by NM,
     3-Apr-2015.) $)
  otex $p |- <. A , B , C >. e. _V $=
    ( cotp cop cvv df-ot opex eqeltri ) ABCDABEZCEFABCGJCHI $.

  ${
    elop.1 $e |- A e. _V $.
    elop.2 $e |- B e. _V $.
    elop.3 $e |- C e. _V $.
    $( An ordered pair has two elements.  Exercise 3 of [TakeutiZaring] p. 15.
       (Contributed by NM, 15-Jul-1993.)  (Revised by Mario Carneiro,
       26-Apr-2015.)  (Avoid depending on this detail.) $)
    elop $p |- ( A e. <. B , C >. <-> ( A = { B } \/ A = { B , C } ) ) $=
      ( cop wcel csn cpr wceq wo dfop eleq2i elpr bitri ) ABCGZHABIZBCJZJZHARKA
      SKLQTABCEFMNARSDOP $.
  $}

  ${
    opi1.1 $e |- A e. _V $.
    opi1.2 $e |- B e. _V $.
    $( One of the two elements in an ordered pair.  (Contributed by NM,
       15-Jul-1993.)  (Revised by Mario Carneiro, 26-Apr-2015.)  (Avoid
       depending on this detail.) $)
    opi1 $p |- { A } e. <. A , B >. $=
      ( csn cpr cop snex prid1 dfop eleqtrri ) AEZLABFZFABGLMAHIABCDJK $.

    $( One of the two elements of an ordered pair.  (Contributed by NM,
       5-Aug-1993.)  (Revised by Mario Carneiro, 26-Apr-2015.)  (Avoid
       depending on this detail.) $)
    opi2 $p |- { A , B } e. <. A , B >. $=
      ( cpr csn cop prex prid2 dfop eleqtrri ) ABEZAFZLEABGMLABHIABCDJK $.
  $}

  ${
    opeluu.1 $e |- A e. _V $.
    opeluu.2 $e |- B e. _V $.
    $( Each member of an ordered pair belongs to the union of the union of a
       class to which the ordered pair belongs.  Lemma 3D of [Enderton] p. 41.
       (Contributed by NM, 31-Mar-1995.)  (Revised by Mario Carneiro,
       27-Feb-2016.) $)
    opeluu $p |- ( <. A , B >. e. C ->
                 ( A e. U. U. C /\ B e. U. U. C ) ) $=
      ( cop wcel cuni cpr prid1 opi2 elunii mpan sylancr prid2 jca ) ABFZCGZACH
      ZHZGZBTGZRAABIZGUCSGZUAABDJUCQGRUDABDEKUCQCLMZAUCSLNRBUCGUDUBABEOUEBUCSLN
      P $.
  $}

  ${
    op1stb.1 $e |- A e. _V $.
    op1stb.2 $e |- B e. _V $.
    $( Extract the first member of an ordered pair.  Theorem 73 of [Suppes]
       p. 42.  (See ~ op2ndb to extract the second member, ~ op1sta for an
       alternate version, and ~ op1st for the preferred version.)  (Contributed
       by NM, 25-Nov-2003.) $)
    op1stb $p |- |^| |^| <. A , B >. = A $=
      ( cop cint csn cpr dfop inteqi cin snex prex intpr wss wceq snsspr1 df-ss
      mpbi eqtri intsn ) ABEZFZFAGZFAUCUDUCUDABHZHZFZUDUBUFABCDIJUGUDUEKZUDUDUE
      ALABMNUDUEOUHUDPABQUDUERSTTJACUAT $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                   Ordered pair theorem
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $( An ordered pair is nonempty iff the arguments are sets.  (Contributed by
       NM, 24-Jan-2004.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    opnz $p |- ( <. A , B >. =/= (/) <-> ( A e. _V /\ B e. _V ) ) $=
      ( cop c0 wne cvv wcel wa opprc necon1ai csn cpr dfopg snex eqnetrd impbii
      prnz a1i ) ABCZDEAFGBFGHZTSDABIJTSAKZABLZLZDABFFMUCDETUAUBANQROP $.
  $}

  ${
    opth1.1 $e |- A e. _V $.
    opth1.2 $e |- B e. _V $.
    $( An ordered pair is nonempty if the arguments are sets.  (Contributed by
       Mario Carneiro, 26-Apr-2015.) $)
    opnzi $p |- <. A , B >. =/= (/) $=
      ( cop c0 wne cvv wcel opnz mpbir2an ) ABEFGAHIBHICDABJK $.

    $( Equality of the first members of equal ordered pairs.  (Contributed by
       NM, 28-May-2008.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    opth1 $p |- ( <. A , B >. = <. C , D >. -> A = C ) $=
      ( cop wceq csn cpr wi sneqr a1i wcel cvv wa opi1 id syl5eleq syl oprcl wo
      simpld prid1g eleq2 syl5ibrcom elsni eqcomd syl6 dfopg 3syl eleqtrd elpri
      mpjaod ) ABGZCDGZHZAIZCIZHZACHZURCDJZHZUTVAKUQACELMUQVCCURNZVAUQVDVCCVBNZ
      UQCONZVEUQVFDONZUQURUPNZVFVGPZUQURUOUPABEFQUQRSZCDURUAZTUCCDOUDTURVBCUEUF
      VDCACAUGUHUIUQURUSVBJZNUTVCUBUQURUPVLVJUQVHVIUPVLHVJVKCDOOUJUKULURUSVBUMT
      UN $.

    $d x B $.  $d x C $.  $d x D $.
    $( The ordered pair theorem.  If two ordered pairs are equal, their first
       elements are equal and their second elements are equal.  Exercise 6 of
       [TakeutiZaring] p. 16.  Note that ` C ` and ` D ` are not required to be
       sets due our specific ordered pair definition.  (Contributed by NM,
       28-May-1995.) $)
    opth $p |- ( <. A , B >. = <. C , D >. <-> ( A = C /\ B = D ) ) $=
      ( vx cop wceq wa cvv wcel cpr csn syl eqtr3d dfopg prex preqr2 wi opi1 id
      opth1 syl5eleq oprcl simprd opeq1d simpld sylancl cv preq2 eqeq2d imbi12d
      eqeq2 vex vtoclg sylc jca opeq12 impbii ) ABHZCDHZIZACIZBDIZJVCVDVEABCDEF
      UCZVCDKLZCBMZCDMZIZVEVCCKLZVGVCANZVBLVKVGJZVCVLVAVBABEFUAVCUBZUDCDVLUEOZU
      FVCCNZVHMZVPVIMZIVJVCVBVQVRVCCBHZVBVQVCVAVSVBVCACBVFUGVNPVCVKBKLVSVQIVCVK
      VGVOUHFCBKKQUIPVCVMVBVRIVOCDKKQOPVHVIVPCBRCDRSOVHCGUJZMZIZBVTIZTVJVETGDKV
      TDIZWBVJWCVEWDWAVIVHVTDCUKULVTDBUNUMBVTCFGUOSUPUQURABCDUSUT $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x y D $.
    $( Ordered pair theorem. ` C ` and ` D ` are not required to be sets under
       our specific ordered pair definition.  (Contributed by NM,
       14-Oct-2005.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    opthg $p |- ( ( A e. V /\ B e. W ) ->
                 ( <. A , B >. = <. C , D >. <-> ( A = C /\ B = D ) ) ) $=
      ( vx vy cv cop wceq wa wb opeq1 eqeq1d eqeq1 anbi1d bibi12d opeq2 vex
      anbi2d opth vtocl2g ) GIZHIZJZCDJZKZUDCKZUEDKZLZMAUEJZUGKZACKZUJLZMABJZUG
      KZUNBDKZLZMGHABEFUDAKZUHUMUKUOUTUFULUGUDAUENOUTUIUNUJUDACPQRUEBKZUMUQUOUS
      VAULUPUGUEBASOVAUJURUNUEBDPUARUDUECDGTHTUBUC $.
  $}

  $( Equality of the first members of equal ordered pairs.  Closed form of
     ~ opth1 .  (Contributed by AV, 14-Oct-2018.) $)
  opth1g $p |- ( ( A e. V /\ B e. W )
                 -> ( <. A , B >. = <. C , D >. -> A = C ) ) $=
    ( wcel wa cop wceq opthg simpl syl6bi ) AEGBFGHABICDIJACJZBDJZHNABCDEFKNOLM
    $.

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x y D $.  $d x y X $.
    $( Ordered pair theorem.  (Contributed by NM, 14-Oct-2005.)  (Revised by
       Mario Carneiro, 26-Apr-2015.) $)
    opthg2 $p |- ( ( C e. V /\ D e. W ) ->
                 ( <. A , B >. = <. C , D >. <-> ( A = C /\ B = D ) ) ) $=
      ( wcel wa cop wceq opthg eqcom anbi12i 3bitr4g ) CEGDFGHCDIZABIZJCAJZDBJZ
      HPOJACJZBDJZHCDABEFKPOLSQTRACLBDLMN $.
  $}

  ${
    opth2.1 $e |- C e. _V $.
    opth2.2 $e |- D e. _V $.
    $( Ordered pair theorem.  (Contributed by NM, 21-Sep-2014.) $)
    opth2 $p |- ( <. A , B >. = <. C , D >. <-> ( A = C /\ B = D ) ) $=
      ( cvv wcel cop wceq wa wb opthg2 mp2an ) CGHDGHABICDIJACJBDJKLEFABCDGGMN
      $.
  $}

  $( Two ordered pairs are not equal iff their first components or their second
     components are not equal.  (Contributed by AV, 13-Dec-2018.) $)
  opthneg $p |- ( ( A e. V /\ B e. W ) -> ( <. A , B >. =/= <. C , D >.
                                            <-> ( A =/= C \/ B =/= D ) ) ) $=
    ( cop wne wceq wn wcel wa wo df-ne opthg notbid wb bicomi a1i syl5bb ianor
    orbi12d bitrd ) ABGZCDGZHUDUEIZJZAEKBFKLZACHZBDHZMZUDUENUHUGACIZBDIZLZJZUKU
    HUFUNABCDEFOPUOULJZUMJZMUHUKULUMUAUHUPUIUQUJUPUIQUHUIUPACNRSUQUJQUHUJUQBDNR
    SUBTUCT $.

  ${
    opthne.1 $e |- A e. _V $.
    opthne.2 $e |- B e. _V $.
    $( Two ordered pairs are not equal iff their first components or their
       second components are not equal.  (Contributed by AV, 13-Dec-2018.) $)
    opthne $p |- ( <. A , B >. =/= <. C , D >. <-> ( A =/= C \/ B =/= D ) ) $=
      ( cvv wcel cop wne wo wb opthneg mp2an ) AGHBGHABICDIJACJBDJKLEFABCDGGMN
      $.
  $}

  ${
    otth.1 $e |- A e. _V $.
    otth.2 $e |- B e. _V $.
    otth.3 $e |- R e. _V $.
    $( Ordered triple theorem, with triple express with ordered pairs.
       (Contributed by NM, 1-May-1995.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    otth2 $p |- ( <. <. A , B >. , R >. = <. <. C , D >. , S >. <->
                ( A = C /\ B = D /\ R = S ) ) $=
      ( cop wceq wa w3a opth anbi1i opex df-3an 3bitr4i ) ABJZCDJZKZEFKZLACKZBD
      KZLZUBLSEJTFJKUCUDUBMUAUEUBABCDGHNOSETFABPINUCUDUBQR $.

    $( Ordered triple theorem.  (Contributed by NM, 25-Sep-2014.)  (Revised by
       Mario Carneiro, 26-Apr-2015.) $)
    otth $p |- ( <. A , B , R >. = <. C , D , S >. <->
      ( A = C /\ B = D /\ R = S ) ) $=
      ( cotp wceq cop w3a df-ot eqeq12i otth2 bitri ) ABEJZCDFJZKABLELZCDLFLZKA
      CKBDKEFKMRTSUAABENCDFNOABCDEFGHIPQ $.
  $}

  $( Ordered triple theorem, closed form.  (Contributed by Alexander van der
     Vekens, 10-Mar-2018.) $)
  otthg $p |- ( ( A e. U /\ B e. V /\ C e. W )
                  -> ( <. A , B , C >. = <. D , E , F >.
                       <-> ( A = D /\ B = E /\ C = F ) ) ) $=
    ( cotp wceq cop wcel w3a df-ot eqeq12i wa wb cvv opthg opex 3ad2ant3 anbi1d
    mpan df-3an syl6bbr 3adant3 bitrd syl5bb ) ABCJZDFGJZKABLZCLZDFLZGLZKZAEMZB
    HMZCIMZNZADKZBFKZCGKZNZUJUMUKUOABCODFGOPUTUPULUNKZVCQZVDUSUQUPVFRZURULSMUSV
    GABUAULCUNGSITUDUBUQURVFVDRUSUQURQZVFVAVBQZVCQVDVHVEVIVCABDFEHTUCVAVBVCUEUF
    UGUHUI $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    eqvinop.1 $e |- B e. _V $.
    eqvinop.2 $e |- C e. _V $.
    $( A variable introduction law for ordered pairs.  Analog of Lemma 15 of
       [Monk2] p. 109.  (Contributed by NM, 28-May-1995.) $)
    eqvinop $p |- ( A = <. B , C >. <-> E. x E. y ( A = <. x , y >. /\
                  <. x , y >. = <. B , C >. ) ) $=
      ( cv cop wceq wa wex opth2 anbi2i ancom anass 3bitri exbii eqeq2d ceqsexv
      19.42v opeq2 opeq1 bitr2i ) CAHZBHZIZJZUGDEIZJZKZBLZALUEDJZCUEEIZJZKZALCU
      IJZULUPAULUMUFEJZUHKZKZBLUMUSBLZKUPUKUTBUKUHUMURKZKVBUHKUTUJVBUHUEUFDEFGM
      NUHVBOUMURUHPQRUMUSBUAVAUOUMUHUOBEGURUGUNCUFEUEUBSTNQRUOUQADFUMUNUICUEDEU
      CSTUD $.
  $}

  ${
    $d x z w A $.  $d y z w A $.  $d z w ph $.
    $( Substitution of class ` A ` for ordered pair ` <. x , y >. ` .
       (Contributed by NM, 27-Dec-1996.)  (Revised by Andrew Salmon,
       11-Jul-2011.)  (Proof shortened by Wolf Lammen, 25-Aug-2019.) $)
    copsexg $p |- ( A = <. x , y >. ->
                  ( ph <-> E. x E. y ( A = <. x , y >. /\ ph ) ) ) $=
      ( vz vw cv cop wceq wa wex wb wi vex 19.8a weq syl5 syl5bi weu euequ1 wal
      eqvinop 19.23bi opth anbi1i 2exbii nfe1 anim2i anassrs eximi biidd syl5ib
      ex drex1 anass exbii 19.40 nfeqf2 19.9d anim1d syl6 pm2.61i exlimi equcom
      wn eubii mpbi eupick mpan com12 sylan9 sylbi impbid anbi1d 2exbidv bibi2d
      eqeq1 imbi12d mpbiri adantr exlimivv pm2.43i ) DBGZCGZHZIZAWFAJZCKBKZLZWF
      DEGZFGZHZIZWLWEIZJZFKEKWFWIMZEFDWCWDBNCNUBWOWPEFWMWPWNWMWPWNAWNAJZCKZBKZL
      ZMWNAWSWNAWSWQWSCWRBOUCUMWNEBPZFCPZJZWSAMWJWKWCWDENFNUDZWSXCAJZCKZBKZXCAW
      QXEBCWNXCAXDUEUFXGXAXBAJZCKZJZBKZXCAXFXKBXJBUGCBPCUAZXFXKMXFXJCKXLXKXEXJC
      XAXBAXJXHXIXAXHCOUHUIUJXJXJCBXLXJUKUNULXLVEZXFXJXKXFXAXHJZCKZXMXJXEXNCXAX
      BAUOUPXOXACKZXIJXMXJXAXHCUQXMXPXAXIXAXMCCBEURUSUTQRXJBOVAVBVCXAXKXIXBAXKX
      AXIXABSZXKXAXIMBEPZBSXQBETXRXABBEVDVFVGXAXIBVHVIVJXIXBAXBCSZXIXBAMCFPZCSX
      SCFTXTXBCCFVDVFVGXBACVHVIVJVKQRVLVMWMWFWNWIWTDWLWEVQZWMWHWSAWMWGWQBCWMWFW
      NAYAVNVOVPVRVSVTWAVLWB $.

    $( Obsolete proof of ~ copsexg as of 9-Jun-2019.  (Contributed by NM,
       27-Dec-1996.)  (Revised by Andrew Salmon, 11-Jul-2011.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    copsexgOLD $p |- ( A = <. x , y >. ->
                  ( ph <-> E. x E. y ( A = <. x , y >. /\ ph ) ) ) $=
      ( vz vw cv cop wceq wa wex wb wi vex 19.8a weq syl5bi syl5 weu euequ1 wal
      eqvinop 19.23bi opth anbi1i 2exbii nfe1 nfae anass a1i anim2d eximd biidd
      ex drex1 sylibd wn exbii 19.40 nfnae dveeq2 nfd 19.9d anim1d syl6 pm2.61i
      exlimi equcom eubii eupick com12 sylan9 sylbi impbid eqeq1 anbi1d 2exbidv
      mpbi mpan bibi2d imbi12d mpbiri adantr exlimivv pm2.43i ) DBGZCGZHZIZAWIA
      JZCKBKZLZWIDEGZFGZHZIZWOWHIZJZFKEKWIWLMZEFDWFWGBNCNUBWRWSEFWPWSWQWPWSWQAW
      QAJZCKZBKZLZMWQAXBWQAXBWTXBCXABOUCUNWQEBPZFCPZJZXBAMWMWNWFWGENFNUDZXBXFAJ
      ZCKZBKZXFAWTXHBCWQXFAXGUEUFXJXDXEAJZCKZJZBKZXFAXIXNBXMBUGCBPCUAZXIXNMXOXI
      XMCKXNXOXHXMCCBCUHXHXDXKJZXOXMXDXEAUIZXOXKXLXDXKXLMXOXKCOUJUKQULXMXMCBXOX
      MUMUOUPXOUQZXIXMXNXIXPCKZXRXMXHXPCXQURXSXDCKZXLJXRXMXDXKCUSXRXTXDXLXDXRCX
      RXDCCBCUTCBEVAVBVCVDRQXMBOVEVFVGXDXNXLXEAXNXDXLXDBSZXNXDXLMBEPZBSYABETYBX
      DBBEVHVIVRXDXLBVJVSVKXLXEAXECSZXLXEAMCFPZCSYCCFTYDXECCFVHVIVRXEACVJVSVKVL
      RQVMVNWPWIWQWLXCDWOWHVOZWPWKXBAWPWJWTBCWPWIWQAYEVPVQVTWAWBWCWDVMWE $.
  $}

  ${
    $d x y ps $.  $d x y A $.  $d x y B $.
    $( Closed theorem form of ~ copsex2g .  (Contributed by NM,
       17-Feb-2013.) $)
    copsex2t $p |- ( ( A. x A. y ( ( x = A /\ y = B ) -> ( ph <-> ps ) )
      /\ ( A e. V /\ B e. W ) ) ->
                  ( E. x E. y ( <. A , B >. = <. x , y >. /\ ph ) <-> ps ) ) $=
      ( wcel wa cv wceq wb wal wex cop elisset nfe1 nfv nfbi anim12i eeanv nfa1
      wi sylibr nfa2 nfex opeq12 copsexg eqcoms syl adantl 2sp bitr3d ex exlimd
      imp sylan2 ) EGIZFHIZJZCKZELZDKZFLZJZABMZUDZDNZCNZVFDOZCOZEFPZVBVDPZLAJZD
      OZCOZBMZVAVCCOZVEDOZJVLUSVSUTVTCEGQDFHQUAVCVECDUBUEVJVLVRVJVKVRCVICUCVQBC
      VPCRBCSTVJVFVRDVHDCUFVQBDVPDCVODRUGBDSTVJVFVRVJVFJAVQBVFAVQMZVJVFVNVMLWAV
      BVDEFUHWAVMVNACDVMUIUJUKULVJVFVGVHCDUMUQUNUOUPUPUQUR $.
  $}

  ${
    $d x y ps $.  $d x y A $.  $d x y B $.
    copsex2g.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( Implicit substitution inference for ordered pairs.  (Contributed by NM,
       28-May-1995.) $)
    copsex2g $p |- ( ( A e. V /\ B e. W ) ->
                  ( E. x E. y ( <. A , B >. = <. x , y >. /\ ph ) <-> ps ) ) $=
      ( wcel cv wceq wex cop wa wb elisset nfe1 nfv nfbi eeanv nfex copsexg syl
      opeq12 eqcoms bitr3d exlimi sylbir syl2an ) EGJCKZELZCMZDKZFLZDMZEFNZUKUN
      NZLAOZDMZCMZBPZFHJCEGQDFHQUMUPOULUOOZDMZCMVBULUOCDUAVDVBCVABCUTCRBCSTVCVB
      DVABDUTDCUSDRUBBDSTVCAVABVCURUQLAVAPZUKUNEFUEVEUQURACDUQUCUFUDIUGUHUHUIUJ
      $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d x y z w D $.
    $d x y z w ps $.  $d x y z w R $.  $d x y z w S $.
    copsex4g.1 $e |- ( ( ( x = A /\ y = B ) /\ ( z = C /\ w = D ) ) ->
                     ( ph <-> ps ) ) $.
    $( An implicit substitution inference for 2 ordered pairs.  (Contributed by
       NM, 5-Aug-1995.) $)
    copsex4g $p |- ( ( ( A e. R /\ B e. S ) /\ ( C e. R /\ D e. S ) ) ->
                      ( E. x E. y E. z E. w ( ( <. A , B >. = <. x , y >. /\
                      <. C , D >. = <. z , w >. ) /\ ph ) <-> ps ) ) $=
      ( wcel wa cop cv wceq wex vex eqcom opth bitri anbi12i anbi1i a1i 4exbidv
      wb id cgsex4g bitrd ) GKNHLNOIKNJLNOOZGHPZCQZDQZPZRZIJPZEQZFQZPZRZOZAOZFS
      ESDSCSUNGRUOHROZUSIRUTJROZOZAOZFSESDSCSBULVDVHCDEFVDVHUHULVCVGAUQVEVBVFUQ
      UPUMRVEUMUPUAUNUOGHCTDTUBUCVBVAURRVFURVAUAUSUTIJETFTUBUCUDUEUFUGABVGCDEFG
      HIJKLVGUIMUJUK $.
  $}

  $( A property of ordered pairs.  (Contributed by Mario Carneiro,
     26-Apr-2015.) $)
  0nelop $p |- -. (/) e. <. A , B >. $=
    ( c0 cop wcel csn cpr wo id cvv wa oprcl dfopg syl eleqtrd elpri wne necomd
    wceq wn simpld snnzg prnzg jca neanior sylib pm2.65i ) CABDZEZCAFZSCABGZSHZ
    UICUJUKGZEULUICUHUMUIIUIAJEZBJEZKUHUMSABCLZABJJMNOCUJUKPNUICUJQZCUKQZKULTUI
    UQURUIUJCUIUNUJCQUIUNUOUPUAZAJUBNRUIUKCUIUNUKCQUSABJUCNRUDCUJCUKUEUFUG $.

  $( Equivalence of existence implied by equality of ordered pairs.
     (Contributed by NM, 28-May-2008.) $)
  opeqex $p |- ( <. A , B >. = <. C , D >. ->
    ( ( A e. _V /\ B e. _V ) <-> ( C e. _V /\ D e. _V ) ) ) $=
    ( cop wceq c0 wne cvv wcel wa neeq1 opnz 3bitr3g ) ABEZCDEZFOGHPGHAIJBIJKCI
    JDIJKOPGLABMCDMN $.

  $( Equivalence of existence implied by equality of ordered triples.
     (Contributed by NM, 26-Apr-2015.) $)
  oteqex2 $p |- ( <. <. A , B >. , C >. = <. <. R , S >. , T >. ->
    ( C e. _V <-> T e. _V ) ) $=
    ( cop wceq cvv wcel wa opeqex opex biantrur 3bitr4g ) ABGZCGDEGZFGHPIJZCIJZ
    KQIJZFIJZKSUAPCQFLRSABMNTUADEMNO $.

  $( Equivalence of existence implied by equality of ordered triples.
     (Contributed by NM, 28-May-2008.)  (Revised by Mario Carneiro,
     26-Apr-2015.) $)
  oteqex $p |- ( <. <. A , B >. , C >. = <. <. R , S >. , T >. ->
    ( ( A e. _V /\ B e. _V /\ C e. _V ) <->
      ( R e. _V /\ S e. _V /\ T e. _V ) ) ) $=
    ( cop wceq cvv wcel w3a wi simp3 a1i oteqex2 syl5ibr wb wa opex df-3an mpan
    opthg simprbda opeqex syl adantl anbi12d 3bitr4g expcom pm5.21ndd ) ABGZCGD
    EGZFGHZCIJZAIJZBIJZUNKZDIJZEIJZFIJZKZUQUNLUMUOUPUNMNVAUNUMUTURUSUTMABCDEFOZ
    PUNUMUQVAQUNUMRZUOUPRZUNRURUSRZUTRUQVAVCVDVEUNUTVCUKULHZVDVEQUNUMVFCFHZUKIJ
    UNUMVFVGRQABSUKCULFIIUBUAUCABDEUDUEUMUNUTQUNVBUFUGUOUPUNTURUSUTTUHUIUJ $.

  ${
    opcom.1 $e |- A e. _V $.
    opcom.2 $e |- B e. _V $.
    $( An ordered pair commutes iff its members are equal.  (Contributed by NM,
       28-May-2009.) $)
    opcom $p |- ( <. A , B >. = <. B , A >. <-> A = B ) $=
      ( cop wceq wa opth eqcom anbi2i anidm 3bitri ) ABEBAEFABFZBAFZGMMGMABBACD
      HNMMBAIJMKL $.
  $}

  ${
    $d x y z A $.  $d y z B $.
    moop2.1 $e |- B e. _V $.
    $( ""At most one"" property of an ordered pair.  (Contributed by NM,
       11-Apr-2004.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    moop2 $p |- E* x A = <. B , x >. $=
      ( vy cv cop wceq wmo csb wa wal eqtr2 vex opth simprbi syl gen2 nfcsb1v
      wi nfcv nfop nfeq2 csbeq1a id opeq12d eqeq2d mo4f mpbir ) BCAFZGZHZAIULBA
      EFZCJZUMGZHZKZUJUMHZTZELALUSAEUQUKUOHZURBUKUOMUTCUNHURCUJUNUMDANOPQRULUPA
      EABUOAUNUMAUMCSAUMUAUBUCURUKUOBURCUNUJUMAUMCUDURUEUFUGUHUI $.
  $}

  ${
    opeqsn.1 $e |- A e. _V $.
    opeqsn.2 $e |- B e. _V $.
    opeqsn.3 $e |- C e. _V $.
    $( Equivalence for an ordered pair equal to a singleton.  (Contributed by
       NM, 3-Jun-2008.) $)
    opeqsn $p |- ( <. A , B >. = { C } <-> ( A = B /\ C = { A } ) ) $=
      ( cop csn wceq cpr dfop eqeq1i snex prex preqsn eqcom anbi2i bitri 3bitri
      wa anidm anbi1i dfsn2 preq2 syl5req eqeq1d syl6bb pm5.32i ) ABGZCHZIAHZAB
      JZJZUJIUKULIZULCIZTZABIZCUKIZTZUIUMUJABDEKLUKULCAMABNFOUPUQUOTUSUNUQUOUNU
      LUKIUQBAIZTZUQUKULPABADEDOVAUQUQTUQUTUQUQBAPQUQUARSUBUQUOURUQUOUKCIURUQUL
      UKCUQUKAAJULAUCABAUDUEUFUKCPUGUHRS $.
  $}

  ${
    opeqpr.1 $e |- A e. _V $.
    opeqpr.2 $e |- B e. _V $.
    opeqpr.3 $e |- C e. _V $.
    opeqpr.4 $e |- D e. _V $.
    $( Equivalence for an ordered pair equal to an unordered pair.
       (Contributed by NM, 3-Jun-2008.)  (Avoid depending on this detail.) $)
    opeqpr $p |- ( <. A , B >. = { C , D }
  <-> ( ( C = { A } /\ D = { A , B } ) \/ ( C = { A , B } /\ D = { A } ) ) ) $=
      ( cop cpr wceq csn wa wo eqcom dfop eqeq2i snex prex preq12b 3bitri ) ABI
      ZCDJZKUCUBKUCALZABJZJZKCUDKDUEKMCUEKDUDKMNUBUCOUBUFUCABEFPQCDUDUEGHARABST
      UA $.
  $}

  ${
    $d x y z A $.
    $( ""At most one"" remains true inside ordered pair quantification.
       (Contributed by NM, 28-Aug-2007.) $)
    mosubopt $p |- ( A. y A. z E* x ph ->
                 E* x E. y E. z ( A = <. y , z >. /\ ph ) ) $=
      ( wmo wal cv cop wceq wex wa nfa1 nfe1 nfmo wi nfex sps exlimd wn copsexg
      mobidv biimpcd simpl 2eximi exlimiv con3i exmo ori syl pm2.61d1 ) ABFZDGZ
      CGZECHDHIJZDKZCKZUOALZDKZCKZBFZUNUPVACUMCMUTCBUSCNOUMUPVAPCUMUOVADULDMUTD
      BUSDCURDNQOULUOVAPDUOULVAUOAUTBACDEUAUBUCRSRSUQTUTBKZTVAVBUQUTUQBURUOCDUO
      AUDUEUFUGVBVAUTBUHUIUJUK $.
  $}

  ${
    $d x y z A $.
    mosubop.1 $e |- E* x ph $.
    $( ""At most one"" remains true inside ordered pair quantification.
       (Contributed by NM, 28-May-1995.) $)
    mosubop $p |- E* x E. y E. z ( A = <. y , z >. /\ ph ) $=
      ( wmo wal cv cop wceq wa wex gen2 mosubopt ax-mp ) ABGZDHCHECIDIJKALDMCMB
      GQCDFNABCDEOP $.
  $}

  ${
    $d x ph $.  $d x A $.  $d x y $.
    euop2.1 $e |- A e. _V $.
    $( Transfer existential uniqueness to second member of an ordered pair.
       (Contributed by NM, 10-Apr-2004.) $)
    euop2 $p |- ( E! x E. y ( x = <. A , y >. /\ ph ) <-> E! y ph ) $=
      ( cv cop opex moop2 euxfr2 ) ABCDCFZGDKHCBFDEIJ $.
  $}

  ${
    $d a b c x y A $.  $d a b c x y B $.  $d a b c x y C $.  $d a b c x ph $.
    $d y ps $.
    euotd.1 $e |- ( ph -> A e. _V ) $.
    euotd.2 $e |- ( ph -> B e. _V ) $.
    euotd.3 $e |- ( ph -> C e. _V ) $.
    euotd.4 $e |- ( ph -> ( ps <-> ( a = A /\ b = B /\ c = C ) ) ) $.
    $( Prove existential uniqueness for an ordered triple.  (Contributed by
       Mario Carneiro, 20-May-2015.) $)
    euotd $p |- ( ph -> E! x E. a E. b E. c ( x = <. a , b , c >. /\ ps ) ) $=
      ( vy cv wceq wa wex cvv wtru cotp wb wal weu w3a biimpa vex sylibr eqeq2d
      otth biimpd impancom expimpd exlimdvv wcel wsbc tru adantr ad2antrr simpr
      exlimdv eqcomd biimpar jca a1tru 2thd 3anassrs sbcied mpbiri spesbcd nfcv
      nfsbc1v nfex sbceq1a exbidv spcegf 2exbidv excom13 sylib eqeq1 syl5ibrcom
      sylc anbi1d 3exbidv impbid alrimiv otex eqeq2 bibi2d albidv spcev df-eu
      syl ) ACOZGOZHOZIOZUAZPZBQZIRZHRGRZWNNOZPZUBZCUCZNRZXBCUDAXBWNDEFUAZPZUBZ
      CUCZXGAXJCAXBXIAXAXIGHAWTXIIAWSBXIABWSXIABQZWSXIXLWRXHWNXLWODPZWPEPZWQFPZ
      UEZWRXHPZABXPMUFWOWPDEWQFGUGHUGIUGUJZUHUIUKULUMVAUNAXBXIXHWRPZBQZIRHRGRZA
      XTGRHRZIRZYAAFSUOZXTIFUPZGRZHRZYCLAESUOZYEHEUPZGRZYGKAYIGDAYIGDUPTUQAYITG
      DSJAXMQZYETHESAYHXMKURYKXNQXTTIFSAYDXMXNLUSAXMXNXOXTTUBAXPQZXTTYLXSBYLWRX
      HYLXPXQAXPUTXRUHVBABXPMVCVDYLVEVFVGVHVHVHVIVJYFYJHESHEVKYIHGYEHEVLVMXNYEY
      IGYEHEVNVOVPWBYBYGIFSIFVKYFIHYEIGXTIFVLVMVMXOXTYEHGXTIFVNVQVPWBXTIHGVRVSX
      IWTXTGHIXIWSXSBWNXHWRVTWCWDWAWEWFXFXKNXHDEFWGXCXHPZXEXJCYMXDXIXBXCXHWNWHW
      IWJWKWMXBCNWLUH $.
  $}

  ${
    opthw.1 $e |- A e. _V $.
    opthw.2 $e |- B e. _V $.
    $( Justification theorem for the ordered pair definition in Norbert Wiener,
       ""A simplification of the logic of relations,"" _Proc. of the Cambridge
       Philos.  Soc_., 1914, vol. 17, pp.387-390.  It is also shown as a
       definition in [Enderton] p. 36 and as Exercise 4.8(b) of [Mendelson]
       p. 230.  It is meaningful only for classes that exist as sets (i.e. are
       not proper classes).  See ~ df-op for other ordered pair definitions.
       (Contributed by NM, 28-Sep-2003.) $)
    opthwiener $p |- ( { { { A } , (/) } , { { B } } } =
                    { { { C } , (/) } , { { D } } } <-> ( A = C /\ B = D ) ) $=
      ( csn c0 cpr wceq wcel snex prid2 wn 0ex eqcom preq2d syl sneqr sneq elpr
      wa id wo eleq2 mpbii sylib wb snnz elsnc bitri nemtbir nelneq2 mp2an mtbi
      biorf ax-mp sylibr eqtr4d prex preqr1 jca preq1d sylan9eq impbii ) AGZHIZ
      BGZGZIZCGZHIZDGZGZIZJZACJZBDJZUBVPVQVRVPVFVKJZVQVPVGVLJZVSVPVJVLVIIZJVTVP
      VJVOWAVPUCVPVIVNVLVPVIVLJZVIVNJZUDZWCVPVIVOKZWDVPVIVJKWEVGVIVHLZMVJVOVIUE
      UFVIVLVNWFUAUGWBNWCWDUHVLVIJZWBHVLKHVIKZNWGNVKHOMWHVHHBFUIWHHVHJVHHJHVHOU
      JHVHPUKULHVLVIUMUNVLVIPUOWBWCUPUQURZQUSVGVLVIVFHUTVKHUTVARVFVKHALCLVARACE
      SRVPVHVMJZVRVPWCWJWIVHVMBLSRBDFSRVBVQVRVJWAVOVQVGVLVIVQVFVKHACTVCVCVRVIVN
      VLVRWJWCBDTVHVMTRQVDVE $.

    $( The union of an ordered pair.  Theorem 65 of [Suppes] p. 39.
       (Contributed by NM, 17-Aug-2004.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    uniop $p |- U. <. A , B >. = { A , B } $=
      ( cop cuni csn cpr cun dfop snex prex unipr wss wceq snsspr1 ssequn1 mpbi
      unieqi 3eqtri ) ABEZFAGZABHZHZFUBUCIZUCUAUDABCDJSUBUCAKABLMUBUCNUEUCOABPU
      BUCQRT $.

    $( Ordered pair membership is inherited by class union.  (Contributed by
       NM, 13-May-2008.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    uniopel $p |- ( <. A , B >. e. C -> U. <. A , B >. e. U. C ) $=
      ( cop wcel cuni cpr uniop opi2 eqeltri elssuni sseld mpi ) ABFZCGZPHZPGRC
      HZGRABIPABDEJABDEKLQPSRPCMNO $.
  $}

  ${
    $d A c d $.  $d B c d $.  $d V c d $.  $d X c d $.  $d Y c d $.
    $( The singletons consisting of ordered triples which have distinct third
       components are disjunct.  (Contributed by Alexander van der Vekens,
       10-Mar-2018.) $)
    otsndisj $p |- ( ( A e. X /\ B e. Y )
                   -> Disj_ c e. V { <. A , B , c >. } ) $=
      ( vd wcel wa weq cv cotp csn cin c0 wceq wo wral wdisj wn orc a1d wne w3a
      wi wb otthg 3expa adantrr simp3 syl6bi con3rr3 imp neqned disjsn2 olcd ex
      syl pm2.61i ralrimivva oteq3 sneqd disjor sylibr ) ADHZBEHZIZFGJZABFKZLZM
      ZABGKZLZMZNOPZQZGCRFCRFCVKSVGVPFGCCVHVGVICHZVLCHZIIZVPUEVHVPVSVHVOUAUBVHT
      ZVSVPVTVSIZVOVHWAVJVMUCVOWAVJVMVTVSVJVMPZTVSWBVHVSWBAAPZBBPZVHUDZVHVGVQWB
      WEUFZVRVEVFVQWFABVIADBVLECUGUHUIWCWDVHUJUKULUMUNVJVMUOURUPUQUSUTCVKVNFGVH
      VJVMVIVLABVAVBVCVD $.
  $}

  ${
    $d B a c d e s $.  $d V a c d e s $.  $d W a c d e s $.  $d X a c d e s $.
    $d Y c d $.
    $( The union of singletons consisting of ordered triples which have
       distinct first and third components are disjunct.  (Contributed by
       Alexander van der Vekens, 10-Mar-2018.) $)
    otiunsndisj $p |- ( B e. X
                 -> Disj_ a e. V U_ c e. ( W \ { a } ) { <. a , B , c >. } ) $=
      ( vd vs ve wcel cv csn cotp ciun wceq wral wa wn ex adantr weq cdif c0 wo
      cin wdisj wi orc a1d eliun w3a wb simprl adantl simpl otthg syl3anc simp1
      wrex syl6bi con3d com13 imp31 eqeq1 notbid sylbi mpbird sylnibr rexlimdva
      elsn nrexdv syl5bi ralrimiv oteq3 sneqd cbviunv eleq2i notbii ralbii disj
      sylibr olcd pm2.61i ralrimivva sneq difeq2d oteq1 iuneq12d disjor ) ADJZE
      GUAZFCEKZLZUBZWLAFKZMZLZNZFCGKZLZUBZWSAWOMZLZNZUEUCOZUDZGBPEBPEBWRUFWJXFE
      GBBWKWJWLBJZWSBJZQZQZXFUGWKXFXJWKXEUHUIWKRZXJXFXKXJQZXEWKXLHKZXDJZRZHWRPZ
      XEXLXMIXAWSAIKZMZLZNZJZRZHWRPXPXLYBHWRXMWRJXMWQJZFWNUSXLYBFXMWNWQUJXLYCYB
      FWNXLWOWNJZQZYCYBYEYCQZXMXSJZIXAUSYAYFYGIXAYFXQXAJZQZXMXROZYGYIYJRZWPXROZ
      RZYFYMYHYEYMYCXKXJYDYMYDXJXKYMYDXJXKYMUGYDXJQZYLWKYNYLWKAAOZFIUAZUKZWKYNX
      GWJYDYLYQULXJXGYDWJXGXHUMUNYDWJXIUMYDXJUOWLAWOWSBAXQDWNUPUQWKYOYPURUTVASV
      BVCTTYFYKYMULZYHYCYRYEYCXMWPOZYRHWPVJYSYJYLXMWPXRVDVEVFUNTVGHXRVJVHVKIXMX
      AXSUJVHSVIVLVMXOYBHWRXNYAXDXTXMFIXAXCXSYPXBXRWOXQWSAVNVOVPVQVRVSWAHWRXDVT
      WAWBSWCWDBWRXDEGWKFWNXAWQXCWKWMWTCWLWSWEWFWKWPXBWLWSAWOWGVOWHWIWA $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                Ordered-pair class abstractions (cont.)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x z w v $.  $d y z w v $.  $d ph z w v $.
    $( The law of concretion.  Special case of Theorem 9.5 of [Quine] p. 61.
       (Contributed by NM, 14-Apr-1995.)  (Proof shortened by Andrew Salmon,
       25-Jul-2011.) $)
    opabid $p |- ( <. x , y >. e. { <. x , y >. | ph } <-> ph ) $=
      ( vz cv cop wceq wa wex copab opex copsexg bicomd df-opab elab2 ) DEZBEZC
      EZFZGZAHCIBIZADSABCJQRKTAUAABCPLMABCDNO $.
  $}

  ${
    $d x z A $.  $d y z A $.  $d z ph $.
    $( Membership in a class abstraction of pairs.  (Contributed by NM,
       24-Mar-1998.) $)
    elopab $p |- ( A e. { <. x , y >. | ph } <->
                 E. x E. y ( A = <. x , y >. /\ ph ) ) $=
      ( vz copab wcel cvv cv cop wceq wa elex opex eleq1 mpbiri adantr exlimivv
      wex eqeq1 anbi1d 2exbidv df-opab elab2g pm5.21nii ) DABCFZGDHGZDBIZCIZJZK
      ZALZCSBSZDUFMULUGBCUKUGAUKUGUJHGUHUINDUJHOPQREIZUJKZALZCSBSUMEDUFHUNDKZUP
      ULBCUQUOUKAUNDUJTUAUBABCEUCUDUE $.
  $}

  ${
    $d x y z v $.  $d x y w v $.  $d v ph $.
    $( The law of concretion in terms of substitutions.  Less general than
       ~ opelopabsb , but having a much shorter proof.  (Contributed by NM,
       30-Sep-2002.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    opelopabsbALT $p |- ( <. z , w >. e. { <. x , y >. | ph }
                 <-> [ w / y ] [ z / x ] ph ) $=
      ( cv cop wceq wa wex copab wcel wsb excom vex opth equcom anbi12ci anbi1i
      bitri 2exbii elopab 2sb5 3bitr4i ) DFZEFZGZBFZCFZGHZAIZCJBJZUIUFHZUHUEHZI
      ZAIZBJCJZUGABCKLABDMCEMULUKBJCJUQUKBCNUKUPCBUJUOAUJUEUHHZUFUIHZIUOUEUFUHU
      IDOEOPURUNUSUMDBQECQRTSUATABCUGUBACBEDUCUD $.
  $}

  ${
    $d x y z w $.  $d w z A $.  $d w x B $.  $d w z ph $.
    $( The law of concretion in terms of substitutions.  (Contributed by NM,
       30-Sep-2002.)  (Revised by Mario Carneiro, 18-Nov-2016.) $)
    opelopabsb $p |- ( <. A , B >. e. { <. x , y >. | ph }
                 <-> [. A / x ]. [. B / y ]. ph ) $=
      ( vz vw cop wcel cvv wa wsbc c0 wne wceq cv wex wb eleq1d bibi12d vex nex
      copab wn opnzi simpl eqcomd necon3ai ax-mp elopab mtbir eleq1 mtbiri opnz
      necon2ai sylib sbcex spesbc exlimiv syl jca opeq1 dfsbcq2 sbcbidv nfopab1
      wsb opeq2 nfel2 nfs1v nfbi sbequ12 nfopab2 opabid chvar vtocl2g pm5.21nii
      weq ) DEHZABCUCZIZDJIZEJIZKZACELZBDLZVTVRMNWCVTVRMVRMOVTMVSIZWFMBPZCPZHZO
      ZAKZCQZBQWLBWKCWIMNWKUDWGWHBUACUAUEWKWIMWKMWIWJAUFUGUHUIUBUBABCMUJUKVRMVS
      ULUMUODEUNUPWEWAWBWDBDUQWEWDBQWBWDBDURWDWBBACEUQUSUTVAFPZGPZHZVSIZACGVFZB
      FVFZRZDWNHZVSIZWQBDLZRVTWERFGDEJJWMDOZWPXAWRXBXCWOWTVSWMDWNVBSWQBFDVCTWNE
      OZXAVTXBWEXDWTVRVSWNEDVGSXDWQWDBDACGEVCVDTWGWNHZVSIZWQRZWSBFWPWRBBWOVSABC
      VEVHWQBFVIVJBFVQZXFWPWQWRXHXEWOVSWGWMWNVBSWQBFVKTWIVSIZARXGCGXFWQCCXEVSAB
      CVLVHACGVIVJCGVQZXIXFAWQXJWIXEVSWHWNWGVGSACGVKTABCVMVNVNVOVP $.

    brabsb.1 $e |- R = { <. x , y >. | ph } $.
    $( The law of concretion in terms of substitutions.  (Contributed by NM,
       17-Mar-2008.) $)
    brabsb $p |- ( A R B <-> [. A / x ]. [. B / y ]. ph ) $=
      ( wbr cop wcel copab wsbc df-br eleq2i opelopabsb 3bitri ) DEFHDEIZFJQABC
      KZJACELBDLDEFMFRQGNABCDEOP $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y ch $.  $d z ph $.
    $( Closed theorem form of ~ opelopab .  (Contributed by NM,
       19-Feb-2013.) $)
    opelopabt $p |- ( ( A. x A. y ( x = A -> ( ph <-> ps ) )
                     /\ A. x A. y ( y = B -> ( ps <-> ch ) )
                     /\ ( A e. V /\ B e. W ) ) ->
                    ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) ) $=
      ( cop copab wcel cv wceq wa wex wb wi wal w3a elopab prth 2alimi copsex2t
      19.26-2 bitr syl6 sylbir stoic3 syl5bb ) FGJZADEKLUKDMZEMZJNAOEPDPZULFNZA
      BQZRZESDSZUMGNZBCQZRZESDSZFHLGILOZTCADEUKUAURVBUOUSOZACQZRZESDSZVCUNCQURV
      BOUQVAOZESDSVGUQVADEUEVHVFDEVHVDUPUTOVEUOUPUSUTUBABCUFUGUCUHACDEFGHIUDUIU
      J $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    opelopabga.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  (Contributed by
       Mario Carneiro, 19-Dec-2013.) $)
    opelopabga $p |- ( ( A e. V /\ B e. W ) ->
                    ( <. A , B >. e. { <. x , y >. | ph } <-> ps ) ) $=
      ( cop copab wcel cv wceq wa wex elopab copsex2g syl5bb ) EFJZACDKLTCMDMJN
      AODPCPEGLFHLOBACDTQABCDEFGHIRS $.

    ${
      brabga.2 $e |- R = { <. x , y >. | ph } $.
      $( The law of concretion for a binary relation.  (Contributed by Mario
         Carneiro, 19-Dec-2013.) $)
      brabga $p |- ( ( A e. V /\ B e. W ) -> ( A R B <-> ps ) ) $=
        ( wbr cop copab wcel wa df-br eleq2i bitri opelopabga syl5bb ) EFGLZEFM
        ZACDNZOZEHOFIOPBUBUCGOUEEFGQGUDUCKRSABCDEFHIJTUA $.
    $}

    $d x y C $.  $d x y D $.
    $( Ordered pair membership in an ordered pair class abstraction.
       (Contributed by Mario Carneiro, 19-Dec-2013.) $)
    opelopab2a $p |- ( ( A e. C /\ B e. D ) -> ( <. A , B >. e.
                 { <. x , y >. | ( ( x e. C /\ y e. D ) /\ ph ) } <-> ps ) ) $=
      ( wcel wa cop cv copab wceq eleq1 bi2anan9 anbi12d opelopabga bianabs ) E
      GJZFHJZKZEFLCMZGJZDMZHJZKZAKZCDNJBUIUCBKCDEFGHUDEOZUFFOZKUHUCABUJUEUAUKUG
      UBUDEGPUFFHPQIRST $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ps $.
    opelopaba.1 $e |- A e. _V $.
    opelopaba.2 $e |- B e. _V $.
    opelopaba.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  (Contributed by
       Mario Carneiro, 19-Dec-2013.) $)
    opelopaba $p |- ( <. A , B >. e. { <. x , y >. | ph } <-> ps ) $=
      ( cvv wcel cop copab wb opelopabga mp2an ) EJKFJKEFLACDMKBNGHABCDEFJJIOP
      $.

    ${
      braba.4 $e |- R = { <. x , y >. | ph } $.
      $( The law of concretion for a binary relation.  (Contributed by NM,
         19-Dec-2013.) $)
      braba $p |- ( A R B <-> ps ) $=
        ( cvv wcel wbr wb brabga mp2an ) ELMFLMEFGNBOHIABCDEFGLLJKPQ $.
    $}
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ch $.
    opelopabg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopabg.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  (Contributed by
       NM, 28-May-1995.)  (Revised by Mario Carneiro, 19-Dec-2013.) $)
    opelopabg $p |- ( ( A e. V /\ B e. W ) ->
                    ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) ) $=
      ( cv wceq sylan9bb opelopabga ) ACDEFGHIDLFMABELGMCJKNO $.

    ${
      brabg.5 $e |- R = { <. x , y >. | ph } $.
      $( The law of concretion for a binary relation.  (Contributed by NM,
         16-Aug-1999.)  (Revised by Mario Carneiro, 19-Dec-2013.) $)
      brabg $p |- ( ( A e. C /\ B e. D ) -> ( A R B <-> ch ) ) $=
        ( cv wceq sylan9bb brabga ) ACDEFGJHIDNFOABENGOCKLPMQ $.
    $}
  $}

  ${
    $d x y A $.  $d x y B $.
    opelopabgf.x $e |- F/ x ps $.
    opelopabgf.y $e |- F/ y ch $.
    opelopabgf.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopabgf.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  This version of
       ~ opelopabg uses bound-variable hypotheses in place of distinct variable
       conditions.  (Contributed by Alexander van der Vekens, 8-Jul-2018.) $)
    opelopabgf $p |- ( ( A e. V /\ B e. W )
                       -> ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) ) $=
      ( wcel wa cop copab wsbc wb sbciegf opelopabsb nfcv nfsbc cv wceq sbcbidv
      a1i adantr adantl 3bitrd ) FHNZGINZOZFGPADEQNZAEGRZDFRZBEGRZCUNUPSUMADEFG
      UAUGUKUPUQSULUOUQDFHBDEGDGUBJUCDUDFUEABEGLUFTUHULUQCSUKBCEGIKMTUIUJ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y ch $.
    opelopab2.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopab2.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( Ordered pair membership in an ordered pair class abstraction.
       (Contributed by NM, 14-Oct-2007.)  (Revised by Mario Carneiro,
       19-Dec-2013.) $)
    opelopab2 $p |- ( ( A e. C /\ B e. D ) -> ( <. A , B >. e.
                 { <. x , y >. | ( ( x e. C /\ y e. D ) /\ ph ) } <-> ch ) ) $=
      ( cv wceq sylan9bb opelopab2a ) ACDEFGHIDLFMABELGMCJKNO $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ch $.
    opelopab.1 $e |- A e. _V $.
    opelopab.2 $e |- B e. _V $.
    opelopab.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopab.4 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  (Contributed by
       NM, 16-May-1995.) $)
    opelopab $p |- ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) $=
      ( cvv wcel cop copab wb opelopabg mp2an ) FLMGLMFGNADEOMCPHIABCDEFGLLJKQR
      $.

    ${
      brab.5 $e |- R = { <. x , y >. | ph } $.
      $( The law of concretion for a binary relation.  (Contributed by NM,
         16-Aug-1999.) $)
      brab $p |- ( A R B <-> ch ) $=
        ( cvv wcel wbr wb brabg mp2an ) FNOGNOFGHPCQIJABCDEFGNNHKLMRS $.
    $}
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w z ph $.  $d w z ps $.
    opelopabaf.x $e |- F/ x ps $.
    opelopabaf.y $e |- F/ y ps $.
    opelopabaf.1 $e |- A e. _V $.
    opelopabaf.2 $e |- B e. _V $.
    opelopabaf.3 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  This version of
       ~ opelopab uses bound-variable hypotheses in place of distinct variable
       conditions.""  (Contributed by Mario Carneiro, 19-Dec-2013.)  (Proof
       shortened by Mario Carneiro, 18-Nov-2016.) $)
    opelopabaf $p |- ( <. A , B >. e. { <. x , y >. | ph } <-> ps ) $=
      ( cop copab wcel wsbc opelopabsb cvv wb nfv sbc2iegf mp2an bitri ) EFLACD
      MNADFOCEOZBACDEFPEQNFQNZUCBRIJABCDEFQQGHUDCSKTUAUB $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w z ch $.  $d w z ph $.
    opelopabf.x $e |- F/ x ps $.
    opelopabf.y $e |- F/ y ch $.
    opelopabf.1 $e |- A e. _V $.
    opelopabf.2 $e |- B e. _V $.
    opelopabf.3 $e |- ( x = A -> ( ph <-> ps ) ) $.
    opelopabf.4 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( The law of concretion.  Theorem 9.5 of [Quine] p. 61.  This version of
       ~ opelopab uses bound-variable hypotheses in place of distinct variable
       conditions.""  (Contributed by NM, 19-Dec-2008.) $)
    opelopabf $p |- ( <. A , B >. e. { <. x , y >. | ph } <-> ch ) $=
      ( cop wcel wsbc cvv wb sbciegf ax-mp copab opelopabsb nfcv cv wceq 3bitri
      nfsbc sbcbidv ) FGNADEUAOAEGPZDFPZBEGPZCADEFGUBFQOUJUKRJUIUKDFQBDEGDGUCHU
      GDUDFUEABEGLUHSTGQOUKCRKBCEGQIMSTUF $.
  $}

  ${
    $d ph z $.  $d ps z $.  $d x z $.  $d y z $.
    $( Equivalence of ordered pair abstraction subclass and implication.
       (Contributed by NM, 27-Dec-1996.)  (Revised by Mario Carneiro,
       19-May-2013.) $)
    ssopab2 $p |- ( A. x A. y ( ph -> ps ) ->
        { <. x , y >. | ph } C_ { <. x , y >. | ps } ) $=
      ( vz wi wal cv cop wceq wa wex cab anim2d aleximi ss2abdv df-opab 3sstr4g
      copab id ) ABFZDGZCGZEHCHDHIJZAKZDLZCLZEMUDBKZDLZCLZEMACDSBCDSUCUGUJEUBUF
      UICUAUEUHDUAABUDUATNOOPACDEQBCDEQR $.
  $}

  ${
    $d ph z $.  $d ps z $.  $d x z $.  $d y z $.
    $( Equivalence of ordered pair abstraction subclass and implication.
       (Contributed by NM, 27-Dec-1996.)  (Proof shortened by Mario Carneiro,
       18-Nov-2016.) $)
    ssopab2b $p |- ( { <. x , y >. | ph } C_ { <. x , y >. | ps } <->
               A. x A. y ( ph -> ps ) ) $=
      ( copab wss wi wal nfopab1 nfss nfopab2 cv cop wcel opabid 3imtr3g alrimi
      ssel ssopab2 impbii ) ACDEZBCDEZFZABGZDHZCHUCUECCUAUBACDIBCDIJUCUDDDUAUBA
      CDKBCDKJUCCLDLMZUANUFUBNABUAUBUFRACDOBCDOPQQABCDST $.
  $}

  ${
    ssopab2i.1 $e |- ( ph -> ps ) $.
    $( Inference of ordered pair abstraction subclass from implication.
       (Contributed by NM, 5-Apr-1995.) $)
    ssopab2i $p |- { <. x , y >. | ph } C_ { <. x , y >. | ps } $=
      ( wi wal copab wss ssopab2 ax-gen mpg ) ABFZDGACDHBCDHICABCDJMDEKL $.
  $}

  ${
    $d x ph $.  $d y ph $.
    ssopab2dv.1 $e |- ( ph -> ( ps -> ch ) ) $.
    $( Inference of ordered pair abstraction subclass from implication.
       (Contributed by NM, 19-Jan-2014.)  (Revised by Mario Carneiro,
       24-Jun-2014.) $)
    ssopab2dv $p |- ( ph -> { <. x , y >. | ps } C_ { <. x , y >. | ch } ) $=
      ( wi wal copab wss alrimivv ssopab2 syl ) ABCGZEHDHBDEICDEIJANDEFKBCDELM
      $.
  $}

  ${
    $d ph z $.  $d ps z $.  $d x z $.  $d y z $.
    $( Equivalence of ordered pair abstraction equality and biconditional.
       (Contributed by Mario Carneiro, 4-Jan-2017.) $)
    eqopab2b $p |- ( { <. x , y >. | ph } = { <. x , y >. | ps }
                <-> A. x A. y ( ph <-> ps ) ) $=
      ( copab wss wa wi wal wceq wb ssopab2b anbi12i eqss 2albiim 3bitr4i ) ACD
      EZBCDEZFZRQFZGABHDICIZBAHDICIZGQRJABKDICISUATUBABCDLBACDLMQRNABCDOP $.
  $}

  ${
    $d z ph $.  $d z x $.  $d z y $.
    $( Nonempty ordered pair class abstraction.  (Contributed by NM,
       10-Oct-2007.) $)
    opabn0 $p |- ( { <. x , y >. | ph } =/= (/) <-> E. x E. y ph ) $=
      ( vz copab c0 wne cv wcel wex n0 cop wceq elopab exbii exrot3 opex isseti
      wa bitri 19.41v mpbiran 2exbii ) ABCEZFGDHZUDIZDJZACJBJZDUDKUGUEBHZCHZLZM
      ZASZCJBJZDJZUHUFUNDABCUENOUOUMDJZCJBJUHUMDBCPUPABCUPULDJADUKUIUJQRULADUAU
      BUCTTT $.
  $}

  ${
    $d w y z A $.  $d w ph $.  $d w x y z $.
    $( Move substitution into a class abstraction.  Version of ~ csbopabgALT
       without a sethood antecedent but depending on more axioms.  (Contributed
       by NM, 6-Aug-2007.)  (Revised by NM, 23-Aug-2018.) $)
    csbopab $p |- [_ A / x ]_ { <. y , z >. | ph }
              = { <. y , z >. | [. A / x ]. ph } $=
      ( vw cvv wcel copab csb wsbc wceq cv wsb csbeq1 opabbidv wn c0 wex nexdv
      dfsbcq2 eqeq12d vex nfs1v nfopab sbequ12 csbief vtoclg csbprc sbcex con3i
      weq opabn0 necon1bbii sylib eqtr4d pm2.61i ) EGHZBEACDIZJZABEKZCDIZLZBFMZ
      USJZABFNZCDIZLVCFEGVDELZVEUTVGVBBVDEUSOVHVFVACDABFEUAPUBBVDUSVGFUCVFCDBAB
      FUDUEBFULAVFCDABFUFPUGUHURQZUTRVBBEUSUIVIVADSZCSZQVBRLVIVJCVIVADVAURABEUJ
      UKTTVKVBRVACDUMUNUOUPUQ $.

    $( Move substitution into a class abstraction.  Version of ~ csbopab with a
       sethood antecedent but depending on fewer axioms.  (Contributed by NM,
       6-Aug-2007.)  (Proof shortened by Mario Carneiro, 17-Nov-2016.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbopabgALT $p |- ( A e. V -> [_ A / x ]_ { <. y , z >. | ph }
              = { <. y , z >. | [. A / x ]. ph } ) $=
      ( vw cv copab csb wsb wceq wsbc csbeq1 dfsbcq2 opabbidv eqeq12d vex nfs1v
      nfopab sbequ12 csbief vtoclg ) BGHZACDIZJZABGKZCDIZLBEUEJZABEMZCDIZLGEFUD
      ELZUFUIUHUKBUDEUENULUGUJCDABGEOPQBUDUEUHGRUGCDBABGSTBHUDLAUGCDABGUAPUBUC
      $.
  $}

  ${
    $d A y z $.  $d V y z $.  $d Y y z $.  $d Z z $.  $d x y z $.
    $( Move substitution into a maps-to notation.  (Contributed by AV,
       26-Sep-2019.) $)
    csbmpt12 $p |- ( A e. V -> [_ A / x ]_ ( y e. Y |-> Z )
                             = ( y e. [_ A / x ]_ Y |-> [_ A / x ]_ Z ) ) $=
      ( vz wcel cv wceq copab csb cmpt wsbc csbopab sbcan sbcel12 syl5bb df-mpt
      wa csbconstg eleq1d sbceq2g anbi12d opabbidv syl5eq csbeq2i 3eqtr4g ) CDH
      ZACBIZEHZGIZFJZTZBGKZLZUJACELZHZULACFLZJZTZBGKZACBEFMZLBUQUSMUIUPUNACNZBG
      KVBUNABGCOUIVDVABGVDUKACNZUMACNZTUIVAUKUMACPUIVEURVFUTVEACUJLZUQHUIURACUJ
      EQUIVGUJUQACUJDUAUBRACULFDUCUDRUEUFACVCUOBGEFSUGBGUQUSSUH $.

    $d Y x $.
    $( Move substitution into the second part of a maps-to notation.
       (Contributed by AV, 26-Sep-2019.) $)
    csbmpt2 $p |- ( A e. V -> [_ A / x ]_ ( y e. Y |-> Z )
                              = ( y e. Y |-> [_ A / x ]_ Z ) ) $=
      ( wcel cmpt csb csbmpt12 csbconstg mpteq1d eqtrd ) CDGZACBEFHIBACEIZACFIZ
      HBEPHABCDEFJNBOEPACEDKLM $.
  $}

  ${
    $d ph w $.  $d A w x $.  $d A y $.  $d w y z $.  $d x z $.
    $( Move indexed union inside an ordered-pair abstraction.  (Contributed by
       Stefan O'Rear, 20-Feb-2015.) $)
    iunopab $p |- U_ z e. A { <. x , y >. | ph } =
        { <. x , y >. | E. z e. A ph } $=
      ( vw cv copab wcel wrex cab cop wceq wex ciun elopab rexcom4 exbii bitri
      wa rexbii r19.42v abbii df-iun df-opab 3eqtr4i ) FGZABCHZIZDEJZFKUGBGCGLM
      ZADEJZTZCNZBNZFKDEUHOULBCHUJUOFUJUKATZCNZBNZDEJZUOUIURDEABCUGPUAUSUQDEJZB
      NUOUQDBEQUTUNBUTUPDEJZCNUNUPDCEQVAUMCUKADEUBRSRSSUCDFEUHUDULBCFUEUF $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                 Power class of union and intersection
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d A x y $.  $d B x y $.
    $( The power class of the intersection of two classes is the intersection
       of their power classes.  Exercise 4.12(j) of [Mendelson] p. 235.
       (Contributed by NM, 23-Nov-2003.) $)
    pwin $p |- ~P ( A i^i B ) = ( ~P A i^i ~P B ) $=
      ( vx cpw cin cv wss wa wcel ssin selpw anbi12i 3bitr4i ineqri eqcomi ) AD
      ZBDZEABEZDZCPQSCFZAGZTBGZHTRGTPIZTQIZHTSITABJUCUAUDUBCAKCBKLCRKMNO $.

    $( The power class of the union of two classes includes the union of their
       power classes.  Exercise 4.12(k) of [Mendelson] p. 235.  (Contributed by
       NM, 23-Nov-2003.) $)
    pwunss $p |- ( ~P A u. ~P B ) C_ ~P ( A u. B ) $=
      ( vx cpw cun cv wss wo wcel ssun elun selpw orbi12i bitri 3imtr4i ssriv )
      CADZBDZEZABEZDZCFZAGZUBBGZHZUBTGUBSIZUBUAIUBABJUFUBQIZUBRIZHUEUBQRKUGUCUH
      UDCALCBLMNCTLOP $.

    $( The power class of the union of two classes is a subset of the union of
       their power classes, iff one class is a subclass of the other.  Exercise
       4.12(l) of [Mendelson] p. 235.  (Contributed by NM, 23-Nov-2003.) $)
    pwssun $p |- ( ( A C_ B \/ B C_ A ) <->
               ~P ( A u. B ) C_ ( ~P A u. ~P B ) ) $=
      ( vy vx wss wo cun cpw wceq pweq eqimss syl sylbi orim12i wn wa wcel elpw
      cv wi ssequn2 ssequn1 orcoms ssun cpr csn vex snss unss12 syl2anb zfpair2
      df-pr sseq1i bitr2i sylib ssel syl5 expcomd imp31 elun bitr4i simprbi ord
      prss simplbi impancom ssrdv exp31 con1b syl6ib com23 imp ex orrd impbii )
      ABEZBAEZFZABGZHZAHZBHZGZEZVRVTWAEZVTWBEZFZWDVQVPWGVQWEVPWFVQVSAIZWEBAUAWH
      VTWAIWEVSAJVTWAKLMVPVSBIZWFABUBWIVTWBIWFVSBJVTWBKLMNUCVTWAWBUDLWDVPVQWDVP
      OZVQWDWJPCBAWDWJCSZBQZWKAQZTWDWLWJWMWDWLWMOZVPTWJWMTWDWLWNVPWDWLPZWNPDABW
      ODSZAQZWNWPBQZWOWQPZWMWRWSWPWKUEZWAQZWTWBQZFZWMWRFWSWTWCQZXCWDWLWQXDWDWQW
      LXDWQWLPZWTVTQZWDXDXEWPUFZWKUFZGZVSEZXFWQXGAEXHBEXJWLWPADUGZUHWKBCUGZUHXG
      AXHBUIUJXFWTVSEXJWTVSDCUKZRWTXIVSWPWKULUMUNUOVTWCWTUPUQURUSWTWAWBUTUOXAWM
      XBWRXAWQWMXAWTAEWQWMPWTAXMRWPWKAXKXLVDVAVBXBWRWLXBWTBEWRWLPWTBXMRWPWKBXKX
      LVDVAVENLVCVFVGVHWMVPVIVJVKVLVGVMVNVO $.
  $}

  $( Break up the power class of a union into a union of smaller classes.
     (Contributed by NM, 25-Mar-2007.)  (Proof shortened by Thierry Arnoux,
     20-Dec-2016.) $)
  pwundif $p |- ~P ( A u. B ) =
                ( ( ~P ( A u. B ) \ ~P A ) u. ~P A ) $=
    ( cun cpw cdif undif1 wss wceq pwunss unss mpbir simpli ssequn2 mpbi eqtr2i
    wa ) ABCDZADZERCQRCZQQRFRQGZSQHTBDZQGZTUBPRUACQGABIRUAQJKLRQMNO $.

  $( The power class of the union of two classes equals the union of their
     power classes, iff one class is a subclass of the other.  Part of Exercise
     7(b) of [Enderton] p. 28.  (Contributed by NM, 23-Nov-2003.) $)
  pwun $p |- ( ( A C_ B \/ B C_ A ) <->
             ~P ( A u. B ) = ( ~P A u. ~P B ) ) $=
    ( cun cpw wss wa wo wceq pwunss biantru pwssun eqss 3bitr4i ) ABCDZADBDCZEZ
    PONEZFABEBAEGNOHQPABIJABKNOLM $.

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                Epsilon and identity relations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new constant symbols. $)
  $c _E $. $( Letter E (for epsilon relation) $)
  $c _I $.  $( Letter I (for identity relation) $)

  $( Extend class notation to include the epsilon relation. $)
  cep $a class _E $.

  $( Extend the definition of a class to include identity relation. $)
  cid $a class _I $.

  ${
    $d x y $.
    $( Define the epsilon relation.  Similar to Definition 6.22 of
       [TakeutiZaring] p. 30.  The epsilon relation and set membership are the
       same, that is, ` ( A _E B <-> A e. B ) ` when ` B ` is a set by
       ~ epelg .  Thus, ` 5 _E { 1 , 5 } ` ( ~ ex-eprel ).  (Contributed by NM,
       13-Aug-1995.) $)
    df-eprel $a |- _E = { <. x , y >. | x e. y } $.
  $}

  ${
    $d A x y $.  $d B x y $.
    $( The epsilon relation and membership are the same.  General version of
       ~ epel .  (Contributed by Scott Fenton, 27-Mar-2011.)  (Revised by Mario
       Carneiro, 28-Apr-2015.) $)
    epelg $p |- ( B e. V -> ( A _E B <-> A e. B ) ) $=
      ( vx vy wcel cvv cep wbr wi cop df-br cv copab wceq wa wex vex sylbi a1i
      elopab pm3.2i opeqex mpbiri simpld adantr exlimivv df-eprel eleq2s eleq12
      elex wb brabga expcom pm5.21ndd ) BCFZAGFZABHIZABFZURUQJUPURABKZHFUQABHLU
      QUTDMZEMZFZDENZHUTVDFUTVAVBKOZVCPZEQDQUQVCDEUTUAVFUQDEVEUQVCVEUQBGFZVEUQV
      GPVAGFZVBGFZPVHVIDRERUBABVAVBUCUDUEUFUGSDEUHZUISTUSUQJUPABUKTUQUPURUSULVC
      USDEABHGCVAAVBBUJVJUMUNUO $.
  $}

  ${
    epelc.1 $e |- B e. _V $.
    $( The epsilon relationship and the membership relation are the same.
       (Contributed by Scott Fenton, 11-Apr-2012.) $)
    epelc $p |- ( A _E B <-> A e. B ) $=
      ( cvv wcel cep wbr wb epelg ax-mp ) BDEABFGABEHCABDIJ $.
  $}

  $( The epsilon relation and the membership relation are the same.
     (Contributed by NM, 13-Aug-1995.) $)
  epel $p |- ( x _E y <-> x e. y ) $=
    ( cv vex epelc ) ACBCBDE $.

  ${
    $d x y $.
    $( Define the identity relation.  Definition 9.15 of [Quine] p. 64.  For
       example, ` 5 _I 5 ` and ` -. 4 _I 5 ` ( ~ ex-id ).  (Contributed by NM,
       13-Aug-1995.) $)
    df-id $a |- _I = { <. x , y >. | x = y } $.
  $}

  ${
    $d w z x $.  $d w z y $.
    $( A stronger version of ~ df-id that doesn't require ` x ` and ` y ` to be
       distinct.  Ordinarily, we wouldn't use this as a definition, since
       non-distinct dummy variables would make soundness verification more
       difficult (as the proof here shows).  The proof can be instructive in
       showing how distinct variable requirements may be eliminated, a task
       that is not necessarily obvious.  (Contributed by NM, 5-Feb-2008.)
       (Revised by Mario Carneiro, 18-Nov-2016.) $)
    dfid3 $p |- _I = { <. x , y >. | x = y } $=
      ( vz vw weq copab cv cop wa wex cab wb exbii opeq2 eqeq2d equequ2 anbi12d
      wceq nfnae nfcvd cid df-id wal ancom equcom anbi1i bitri vex equid 3bitri
      ceqsexv biantru nfe1 19.9 bitr4i drex1 drex2 syl5bb wn nfcvf2 nfopd nfeqd
      sps nfand wi a1i cbvexd exbid pm2.61i abbii df-opab 3eqtr4i eqtri ) UAACE
      ZACFZABEZABFZACUBDGZAGZCGZHZRZVNIZCJZAJZDKVRVSBGZHZRZVPIZBJZAJZDKVOVQWEWK
      DVPAUCZWEWKLWEVRVSVSHZRZAAEZIZAJZAJZWLWKWEWQWRWDWPAWDCAEZWBIZCJWNWPWCWTCW
      CVNWBIWTWBVNUDVNWSWBACUEUFUGMWBWNCVSAUHWSWAWMVRVTVSVSNOUKWOWNAUIULUJMWQAW
      PAUMUNUOWQWJABAWPWIABVPWPWILAVPWNWHWOVPVPWMWGVRVSWFVSNOABAPQVCUPUQURWLUSZ
      WDWJAABASXAWCWICBABBSXAWBVNBXABVRWAXABVRTXABVSVTABUTZXABVTTZVAVBXABVSVTXB
      XCVBVDCBEZWCWILVEXAXDWBWHVNVPXDWAWGVRVTWFVSNOCBAPQVFVGVHVIVJVNACDVKVPABDV
      KVLVM $.
  $}

  $( Alternate definition of the identity relation.  (Contributed by NM,
     15-Mar-2007.) $)
  dfid2 $p |- _I = { <. x , x >. | x = x } $=
    ( dfid3 ) AAB $.

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                  Partial and complete ordering
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

$(
We have not yet defined relations ( ~ df-rel ), but here we introduce a
few related notions we will use to develop ordinals.  The class variable
` R ` is no different from other class variables, but it reminds us that
normally it represents what we will later call a ""relation.""
$)

  $( Declare new constant symbols. $)
  $c Po $.  $( Partial ordering predicate symbol (read: 'partial ordering'). $)
  $c Or $.  $( Strict complete ordering predicate symbol (read: 'orders'). $)

  $( Extend wff notation to include the strict partial ordering predicate.
     Read:  ' ` R ` is a partial order on ` A ` .' $)
  wpo $a wff R Po A $.

  $( Extend wff notation to include the strict complete ordering predicate.
     Read:  ' ` R ` orders ` A ` .' $)
  wor $a wff R Or A $.

  ${
    $d x y z R $.  $d x y z A $.
    $( Define the strict partial order predicate.  Definition of [Enderton]
       p. 168.  The expression ` R Po A ` means ` R ` is a partial order on
       ` A ` .  For example, ` < Po RR ` is true, while ` <_ Po RR ` is false
       ( ~ ex-po ).  (Contributed by NM, 16-Mar-1997.) $)
    df-po $a |- ( R Po A <-> A. x e. A A. y e. A A. z e. A
                ( -. x R x /\ ( ( x R y /\ y R z ) -> x R z ) ) ) $.

    $( Define the strict complete (linear) order predicate.  The expression
       ` R Or A ` is true if relationship ` R ` orders ` A ` .  For example,
       ` < Or RR ` is true ( ~ ltso ).  Equivalent to Definition 6.19(1) of
       [TakeutiZaring] p. 29.  (Contributed by NM, 21-Jan-1996.) $)
    df-so $a |- ( R Or A <-> ( R Po A /\ A. x e. A A. y e. A
                ( x R y \/ x = y \/ y R x ) ) ) $.
  $}

  ${
    $d x y z R $.  $d x y z A $.  $d x y z B $.
    $( Subset theorem for the partial ordering predicate.  (Contributed by NM,
       27-Mar-1997.)  (Proof shortened by Mario Carneiro, 18-Nov-2016.) $)
    poss $p |- ( A C_ B -> ( R Po B -> R Po A ) ) $=
      ( vx vy vz wss cv wbr wn wa wi wral wpo ssralv ralimdv syld df-po 3imtr4g
      ) ABGZDHZUACIJUAEHZCIUBFHZCIKUAUCCILKZFBMZEBMZDBMZUDFAMZEAMZDAMZBCNACNTUG
      UFDAMUJUFDABOTUFUIDATUFUEEAMUIUEEABOTUEUHEAUDFABOPQPQDEFBCRDEFACRS $.
  $}

  ${
    $d x y z R $.  $d x y z S $.  $d x y z A $.
    $( Equality theorem for partial ordering predicate.  (Contributed by NM,
       27-Mar-1997.) $)
    poeq1 $p |- ( R = S -> ( R Po A <-> S Po A ) ) $=
      ( vx vy vz wceq cv wbr wn wa wral wpo breq notbid anbi12d imbi12d ralbidv
      wi df-po 2ralbidv 3bitr4g ) BCGZDHZUDBIZJZUDEHZBIZUGFHZBIZKZUDUIBIZSZKZFA
      LZEALDALUDUDCIZJZUDUGCIZUGUICIZKZUDUICIZSZKZFALZEALDALABMACMUCUOVDDEAAUCU
      NVCFAUCUFUQUMVBUCUEUPUDUDBCNOUCUKUTULVAUCUHURUJUSUDUGBCNUGUIBCNPUDUIBCNQP
      RUADEFABTDEFACTUB $.
  $}

  $( Equality theorem for partial ordering predicate.  (Contributed by NM,
     27-Mar-1997.) $)
  poeq2 $p |- ( A = B -> ( R Po A <-> R Po B ) ) $=
    ( wceq wpo wss wi eqimss2 poss syl eqimss impbid ) ABDZACEZBCEZMBAFNOGBAHBA
    CIJMABFONGABKABCIJL $.

  ${
    $d R a b c $.  $d A a b c $.  $d x a b c $.
    nfpo.r $e |- F/_ x R $.
    nfpo.a $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for partial orders.  (Contributed by
       Stefan O'Rear, 20-Jan-2015.) $)
    nfpo $p |- F/ x R Po A $=
      ( va vb vc wpo cv wbr wn wa wi wral df-po nfcv nfbr nfan nfral nfim nfxfr
      nfn ) BCIFJZUDCKZLZUDGJZCKZUGHJZCKZMZUDUICKZNZMZHBOZGBOZFBOAFGHBCPUPAFBEU
      OAGBEUNAHBEUFUMAUEAAUDUDCAUDQZDUQRUCUKULAUHUJAAUDUGCUQDAUGQZRAUGUICURDAUI
      QZRSAUDUICUQDUSRUASTTTUB $.

    $( Bound-variable hypothesis builder for total orders.  (Contributed by
       Stefan O'Rear, 20-Jan-2015.) $)
    nfso $p |- F/ x R Or A $=
      ( va vb wor wpo cv wbr weq w3o wral wa df-so nfpo nfcv nfbr nfral nf3or
      nfv nfan nfxfr ) BCHBCIZFJZGJZCKZFGLZUGUFCKZMZGBNZFBNZOAFGBCPUEUMAABCDEQU
      LAFBEUKAGBEUHUIUJAAUFUGCAUFRZDAUGRZSUIAUBAUGUFCUODUNSUATTUCUD $.
  $}

  ${
    $d x y z R $.  $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z D $.
    $( Properties of partial order relation in class notation.  (Contributed by
       NM, 27-Mar-1997.) $)
    pocl $p |- ( R Po A -> ( ( B e. A /\ C e. A /\ D e. A ) ->
               ( -. B R B /\ ( ( B R C /\ C R D ) -> B R D ) ) ) ) $=
      ( vx vy vz wcel wbr wa wi cv wceq breq1 imbi2d breq2 anbi2d wal wral r3al
      w3a wpo wn id breq12d notbid anbi1d imbi12d anbi12d imbi1d df-po 19.21bbi
      sylbb 19.21bi com12 vtocl3ga ) BAICAIDAIUBAEUCZBBEJZUDZBCEJZCDEJZKZBDEJZL
      ZKZURFMZVGEJZUDZVGGMZEJZVJHMZEJZKZVGVLEJZLZKZLURUTBVJEJZVMKZBVLEJZLZKZLUR
      UTVACVLEJZKZVTLZKZLURVFLFGHBCDAAAVGBNZVQWBURWGVIUTVPWAWGVHUSWGVGBVGBEWGUE
      ZWHUFUGWGVNVSVOVTWGVKVRVMVGBVJEOUHVGBVLEOUIUJPVJCNZWBWFURWIWAWEUTWIVSWDVT
      WIVRVAVMWCVJCBEQVJCVLEOUJUKRPVLDNZWFVFURWJWEVEUTWJWDVCVTVDWJWCVBVAVLDCEQR
      VLDBEQUIRPURVGAIVJAIVLAIUBZVQURWKVQLZHURWLHSZFGURVQHATGATFATWMGSFSFGHAEUL
      VQFGHAAAUAUNUMUOUPUQUP $.
  $}

  ${
    $d x y z A $.  $d x y z R $.  $d x y z ph $.
    ispod.1 $e |- ( ( ph /\ x e. A ) -> -. x R x ) $.
    ispod.2 $e |- ( ( ph /\ ( x e. A /\ y e. A /\ z e. A ) ) ->
                    ( ( x R y /\ y R z ) -> x R z ) ) $.
    $( Sufficient conditions for a partial order.  (Contributed by NM,
       9-Jul-2014.) $)
    ispod $p |- ( ph -> R Po A ) $=
      ( cv wbr wn wa wi wral wpo wcel w3a 3ad2antr1 jca ralrimivvva sylibr
      df-po ) ABIZUCFJKZUCCIZFJUEDIZFJLUCUFFJMZLZDENCENBENEFOAUHBCDEEEAUCEPZUEE
      PZUFEPZQLUDUGAUJUIUDUKGRHSTBCDEFUBUA $.
  $}

  ${
    $d x y z A $.  $d x y z ph $.  $d x y z R $.  $d x y z X $.  $d y z Y $.
    $d z Z $.
    swopolem.1 $e |- ( ( ph /\ ( x e. A /\ y e. A /\ z e. A ) ) ->
                    ( x R y -> ( x R z \/ z R y ) ) ) $.
    $( Perform the substitutions into the strict weak ordering law.
       (Contributed by Mario Carneiro, 31-Dec-2014.) $)
    swopolem $p |- ( ( ph /\ ( X e. A /\ Y e. A /\ Z e. A ) ) ->
                    ( X R Y -> ( X R Z \/ Z R Y ) ) ) $=
      ( cv wbr wo wi wral wcel wceq breq1 imbi12d breq2 w3a ralrimivvva orbi12d
      orbi1d orbi2d imbi2d rspc3v mpan9 ) ABKZCKZFLZUIDKZFLZULUJFLZMZNZDEOCEOBE
      OGEPHEPIEPUAGHFLZGIFLZIHFLZMZNZAUPBCDEEEJUBUPVAGUJFLZGULFLZUNMZNUQVCULHFL
      ZMZNBCDGHIEEEUIGQZUKVBUOVDUIGUJFRVGUMVCUNUIGULFRUDSUJHQZVBUQVDVFUJHGFTVHU
      NVEVCUJHULFTUESULIQZVFUTUQVIVCURVEUSULIGFTULIHFRUCUFUGUH $.
  $}

  ${
    $d x y z A $.  $d x y z R $.  $d x y z ph $.
    swopo.1 $e |- ( ( ph /\ ( y e. A /\ z e. A ) ) ->
                    ( y R z -> -. z R y ) ) $.
    swopo.2 $e |- ( ( ph /\ ( x e. A /\ y e. A /\ z e. A ) ) ->
                    ( x R y -> ( x R z \/ z R y ) ) ) $.
    $( A strict weak order is a partial order.  (Contributed by Mario Carneiro,
       9-Jul-2014.) $)
    swopo $p |- ( ph -> R Po A ) $=
      ( cv wcel wa wbr wn wi wral weq breq1 breq2 notbid imbi12d ralrimivva w3a
      id ancli rspc2va syl2anr pm2.01d 3adantr1 wo imp orcomd ord expimpd ispod
      sylan2d ) ABCDEFABIZEJZKUPUPFLZUQUQUQKCIZDIZFLZUTUSFLZMZNZDEOCEOURURMZNZA
      UQUQUQUCUDAVDCDEEGUAVDVFUPUTFLZUTUPFLZMZNCDUPUPEECBPZVAVGVCVIUSUPUTFQVJVB
      VHUSUPUTFRSTDBPZVGURVIVEUTUPUPFRVKVHURUTUPUPFQSTUEUFUGAUQUSEJZUTEJZUBKZVA
      VCUPUSFLZVGAVLVMVDUQGUHVNVOVCVGVNVOKZVBVGVPVGVBVNVOVGVBUIHUJUKULUMUOUN $.
  $}

  $( A partial order relation is irreflexive.  (Contributed by NM,
     27-Mar-1997.) $)
  poirr $p |- ( ( R Po A /\ B e. A ) -> -. B R B ) $=
    ( wcel wpo w3a wbr wn wa df-3an anabs1 anidm 3bitrri wi pocl simpld sylan2b
    imp ) BADZACEZSSSFZBBCGZHZUASSIZSIUDSSSSJSSKSLMTUAIUCUBUBIUBNZTUAUCUEIABBBC
    ORPQ $.

  $( A partial order relation is a transitive relation.  (Contributed by NM,
     27-Mar-1997.) $)
  potr $p |- ( ( R Po A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
             ( ( B R C /\ C R D ) -> B R D ) ) $=
    ( wpo wcel w3a wa wbr wn wi pocl imp simprd ) AEFZBAGCAGDAGHZIBBEJKZBCEJCDE
    JIBDEJLZPQRSIABCDEMNO $.

  $( A partial order relation has no 2-cycle loops.  (Contributed by NM,
     27-Mar-1997.) $)
  po2nr $p |- ( ( R Po A /\ ( B e. A /\ C e. A ) ) ->
              -. ( B R C /\ C R B ) ) $=
    ( wpo wcel wa wbr wn poirr adantrr wi potr 3exp2 com34 pm2.43d imp32 mtod )
    ADEZBAFZCAFZGGBCDHCBDHGZBBDHZSTUCIUAABDJKSTUAUBUCLZSTUAUDLSTUATUDSTUATUDABC
    BDMNOPQR $.

  $( A partial order relation has no 3-cycle loops.  (Contributed by NM,
     27-Mar-1997.) $)
  po3nr $p |- ( ( R Po A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
             -. ( B R C /\ C R D /\ D R B ) ) $=
    ( wpo wcel w3a wa wbr wn po2nr 3adantr2 df-3an potr anim1d syl5bi mtod ) AE
    FZBAGZCAGZDAGZHIZBCEJZCDEJZDBEJZHZBDEJZUFIZSTUBUIKUAABDELMUGUDUEIZUFIUCUIUD
    UEUFNUCUJUHUFABCDEOPQR $.

  ${
    $d x y z R $.
    $( Any relation is a partial ordering of the empty set.  (Contributed by
       NM, 28-Mar-1997.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    po0 $p |- R Po (/) $=
      ( vx vy vz c0 wpo cv wbr wn wa wi wral ral0 df-po mpbir ) EAFBGZPAHIPCGZA
      HQDGZAHJPRAHKJDELCELZBELSBMBCDEANO $.
  $}

  ${
    $d R v w x y z $.  $d S v w z $.  $d X v w y z $.  $d Y x z $.
    $d A v w x z $.  $d B v w x z $.
    pofun.1 $e |- S = { <. x , y >. | X R Y } $.
    pofun.2 $e |- ( x = y -> X = Y ) $.
    $( A function preserves a partial order relation.  (Contributed by Jeff
       Madsen, 18-Jun-2011.) $)
    pofun $p |- ( ( R Po B /\ A. x e. A X e. B ) -> S Po A ) $=
      ( vv vw vz wcel wa cv wbr csb weq cop wpo wn nfcsb1v nfel1 csbeq1a eleq1d
      wral rspc impcom poirr copab df-br eleq2i nfcv nfbr nfv vex breq1d csbeq1
      csbie syl5eqr breq2d opelopabf 3bitri sylnibr sylan2 anassrs w3a wi com12
      3anim123d imp adantll potr anbi12i 3imtr4g adantlr syldan ispod ) DEUAZGD
      NZACUGZOZKLMCFVTWBKPZCNZWDWDFQZUBZWBWEOVTAWDGRZDNZWGWEWBWIWAWIAWDCAWHDAWD
      GUCZUDAKSZGWHDAWDGUEZUFUHZUIVTWIOWHWHEQZWFDWHEUJWFWDWDTZFNWOGHEQZABUKZNWN
      WDWDFULFWQWOIUMWPWHHEQZWNABWDWDAWHHEWJAEUNZAHUNZUOZWNBUPKUQZXBWKGWHHEWLUR
      ZBKSZHWHWHEXDHABPZGRZWHAXEGHBUQJUTZAXEWDGUSVAVBVCVDVEVFVGWCWELPZCNZMPZCNZ
      VHZWIAXHGRZDNZAXJGRZDNZVHZWDXHFQZXHXJFQZOZWDXJFQZVIZWBXLXQVTWBXLXQWBWEWIX
      IXNXKXPWEWBWIWMVJXIWBXNWAXNAXHCAXMDAXHGUCZUDALSZGXMDAXHGUEZUFUHVJXKWBXPWA
      XPAXJCAXODAXJGUCUDAMSGXODAXJGUEUFUHVJVKVLVMVTXQYBWBVTXQOWHXMEQZXMXOEQZOWH
      XOEQZXTYADWHXMXOEVNXRYFXSYGXRWDXHTZFNYIWQNYFWDXHFULFWQYIIUMWPWRYFABWDXHXA
      YFBUPXBLUQZXCBLSZHXMWHEYKHXFXMXGAXEXHGUSVAVBVCVDXSXHXJTZFNYLWQNYGXHXJFULF
      WQYLIUMWPXMHEQYGABXHXJAXMHEYCWSWTUOYGBUPYJMUQZYDGXMHEYEURBMSZHXOXMEYNHXFX
      OXGAXEXJGUSVAZVBVCVDVOYAWDXJTZFNYPWQNYHWDXJFULFWQYPIUMWPWRYHABWDXJXAYHBUP
      XBYMXCYNHXOWHEYOVBVCVDVPVQVRVS $.
  $}

  ${
    $d x y R $.  $d x y A $.
    $( A strict linear order is a strict partial order.  (Contributed by NM,
       28-Mar-1997.) $)
    sopo $p |- ( R Or A -> R Po A ) $=
      ( vx vy wor wpo cv wbr weq w3o wral df-so simplbi ) ABEABFCGZDGZBHCDIONBH
      JDAKCAKCDABLM $.
  $}

  ${
    $d x y R $.  $d x y A $.  $d x y B $.
    $( Subset theorem for the strict ordering predicate.  (Contributed by NM,
       16-Mar-1997.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    soss $p |- ( A C_ B -> ( R Or B -> R Or A ) ) $=
      ( vx vy wss wpo cv wbr wral wa wor wcel wi wal ssel anim12d 3imtr4g df-so
      r2al weq w3o poss imim1d 2alimdv ) ABFZBCGZDHZEHZCIDEUAUIUHCIUBZEBJDBJZKA
      CGZUJEAJDAJZKBCLACLUFUGULUKUMABCUCUFUHBMZUIBMZKZUJNZEODOUHAMZUIAMZKZUJNZE
      ODOUKUMUFUQVADEUFUTUPUJUFURUNUSUOABUHPABUIPQUDUEUJDEBBTUJDEAATRQDEBCSDEAC
      SR $.
  $}

  ${
    $d x y R $.  $d x y S $.  $d x y A $.
    $( Equality theorem for the strict ordering predicate.  (Contributed by NM,
       16-Mar-1997.) $)
    soeq1 $p |- ( R = S -> ( R Or A <-> S Or A ) ) $=
      ( vx vy wceq wpo cv wbr w3o wral wa wor poeq1 breq biidd 2ralbidv anbi12d
      3orbi123d df-so 3bitr4g ) BCFZABGZDHZEHZBIZUDUEFZUEUDBIZJZEAKDAKZLACGZUDU
      ECIZUGUEUDCIZJZEAKDAKZLABMACMUBUCUKUJUOABCNUBUIUNDEAAUBUFULUGUGUHUMUDUEBC
      OUBUGPUEUDBCOSQRDEABTDEACTUA $.
  $}

  $( Equality theorem for the strict ordering predicate.  (Contributed by NM,
     16-Mar-1997.) $)
  soeq2 $p |- ( A = B -> ( R Or A <-> R Or B ) ) $=
    ( wceq wor wss wa wi wb soss anim12i eqss dfbi2 3imtr4i bicomd ) ABDZBCEZAC
    EZABFZBAFZGQRHZRQHZGPQRISUATUBABCJBACJKABLQRMNO $.

  $( A strict order relation is irreflexive.  (Contributed by NM,
     24-Nov-1995.) $)
  sonr $p |- ( ( R Or A /\ B e. A ) -> -. B R B ) $=
    ( wor wpo wcel wbr wn sopo poirr sylan ) ACDACEBAFBBCGHACIABCJK $.

  $( A strict order relation is a transitive relation.  (Contributed by NM,
     21-Jan-1996.) $)
  sotr $p |- ( ( R Or A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
             ( ( B R C /\ C R D ) -> B R D ) ) $=
    ( wor wpo wcel w3a wbr wa wi sopo potr sylan ) AEFAEGBAHCAHDAHIBCEJCDEJKBDE
    JLAEMABCDENO $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y R $.
    $( A strict order relation is linear (satisfies trichotomy).  (Contributed
       by NM, 21-Jan-1996.) $)
    solin $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              ( B R C \/ B = C \/ C R B ) ) $=
      ( vx vy wcel wa wor wbr wceq w3o cv wi breq1 eqeq1 breq2 3orbi123d imbi2d
      wral eqeq2 wpo df-so rsp2 adantl sylbi com12 vtocl2ga impcom ) BAGCAGHADI
      ZBCDJZBCKZCBDJZLZUJEMZFMZDJZUOUPKZUPUODJZLZNUJBUPDJZBUPKZUPBDJZLZNUJUNNEF
      BCAAUOBKZUTVDUJVEUQVAURVBUSVCUOBUPDOUOBUPPUOBUPDQRSUPCKZVDUNUJVFVAUKVBULV
      CUMUPCBDQUPCBUAUPCBDORSUJUOAGUPAGHZUTUJADUBZUTFATEATZHVGUTNZEFADUCVIVJVHU
      TEFAAUDUEUFUGUHUI $.
  $}

  $( A strict order relation has no 2-cycle loops.  (Contributed by NM,
     21-Jan-1996.) $)
  so2nr $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              -. ( B R C /\ C R B ) ) $=
    ( wor wpo wcel wa wbr wn sopo po2nr sylan ) ADEADFBAGCAGHBCDICBDIHJADKABCDL
    M $.

  $( A strict order relation has no 3-cycle loops.  (Contributed by NM,
     21-Jan-1996.) $)
  so3nr $p |- ( ( R Or A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
             -. ( B R C /\ C R D /\ D R B ) ) $=
    ( wor wpo wcel w3a wbr wn sopo po3nr sylan ) AEFAEGBAHCAHDAHIBCEJCDEJDBEJIK
    AELABCDEMN $.

  $( A strict order relation satisfies strict trichotomy.  (Contributed by NM,
     19-Feb-1996.) $)
  sotric $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              ( B R C <-> -. ( B = C \/ C R B ) ) ) $=
    ( wor wcel wa wceq wo wn wi sonr breq2 notbid syl5ibcom adantrr so2nr imnan
    wbr sylibr con2d jaod w3o solin 3orass df-or bitri sylib impbid con2bid ) A
    DEZBAFZCAFZGGZBCHZCBDSZIZBCDSZUNUQURJZUNUOUSUPUKULUOUSKUMUKULGBBDSZJUOUSABD
    LUOUTURBCBDMNOPUNURUPUNURUPGJURUPJKABCDQURUPRTUAUBUNURUOUPUCZUSUQKZABCDUDVA
    URUQIVBURUOUPUEURUQUFUGUHUIUJ $.

  $( Trichotomy law for strict order relation.  (Contributed by NM,
     9-Apr-1996.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  sotrieq $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              ( B = C <-> -. ( B R C \/ C R B ) ) ) $=
    ( wor wcel wa wo wceq wn sonr adantrr pm1.2 nsyl breq2 breq1 orbi12d notbid
    wbr syl5ibcom con2d w3o solin 3orass or12 df-or 3bitri sylib impbid con2bid
    wi ) ADEZBAFZCAFZGGZBCDSZCBDSZHZBCIZUOURUSJZUOUSURUOBBDSZVAHZJUSURJUOVAVBUL
    UMVAJUNABDKLVAMNUSVBURUSVAUPVAUQBCBDOBCBDPQRTUAUOUPUSUQUBZUTURUKZABCDUCVCUP
    USUQHHUSURHVDUPUSUQUDUPUSUQUEUSURUFUGUHUIUJ $.

  $( Trichotomy law for strict order relation.  (Contributed by NM,
     5-May-1999.) $)
  sotrieq2 $p |- ( ( R Or A /\ ( B e. A /\ C e. A ) ) ->
              ( B = C <-> ( -. B R C /\ -. C R B ) ) ) $=
    ( wor wcel wa wceq wbr wo wn sotrieq ioran syl6bb ) ADEBAFCAFGGBCHBCDIZCBDI
    ZJKOKPKGABCDLOPMN $.

  $( A transitivity relation.  (Read ` B <_ C ` and ` C < D ` implies
     ` B < D ` .)  (Contributed by Mario Carneiro, 10-May-2013.) $)
  sotr2 $p |- ( ( R Or A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
                ( ( -. C R B /\ C R D ) -> B R D ) ) $=
    ( wor wcel w3a wa wbr wn wceq wo wi sotric ancom2s 3adantr3 con2bid breq1
    wb biimpd a1i sotr expd jaod sylbird impd ) AEFZBAGZCAGZDAGZHIZCBEJZKZCDEJZ
    BDEJZULUNCBLZBCEJZMZUOUPNZULUMUSUHUIUJUMUSKTZUKUHUJUIVAACBEOPQRULUQUTURUQUT
    NULUQUOUPCBDESUAUBULURUOUPABCDEUCUDUEUFUG $.

  ${
    $d x y R $.  $d x y A $.  $d x y ph $.
    issod.1 $e |- ( ph -> R Po A ) $.
    issod.2 $e |- ( ( ph /\ ( x e. A /\ y e. A ) ) ->
                    ( x R y \/ x = y \/ y R x ) ) $.
    $( An irreflexive, transitive, linear relation is a strict ordering.
       (Contributed by NM, 21-Jan-1996.)  (Revised by Mario Carneiro,
       9-Jul-2014.) $)
    issod $p |- ( ph -> R Or A ) $=
      ( wpo cv wbr weq w3o wral wor ralrimivva df-so sylanbrc ) ADEHBIZCIZEJBCK
      SREJLZCDMBDMDENFATBCDDGOBCDEPQ $.
  $}

  ${
    $d x y z R $.  $d x y z A $.
    issoi.1 $e |- ( x e. A -> -. x R x ) $.
    issoi.2 $e |- ( ( x e. A /\ y e. A /\ z e. A ) ->
                  ( ( x R y /\ y R z ) -> x R z ) ) $.
    issoi.3 $e |- ( ( x e. A /\ y e. A ) -> ( x R y \/ x = y \/ y R x ) ) $.
    $( An irreflexive, transitive, linear relation is a strict ordering.
       (Contributed by NM, 21-Jan-1996.)  (Revised by Mario Carneiro,
       9-Jul-2014.) $)
    issoi $p |- R Or A $=
      ( wor wtru cv wcel wbr wn adantl w3a wa wi ispod weq w3o issod trud ) DEI
      JABDEJABCDEAKZDLZUDUDEMNJFOUEBKZDLZCKZDLPUDUFEMZUFUHEMQUDUHEMRJGOSUEUGQUI
      ABTUFUDEMUAJHOUBUC $.
  $}

  ${
    $d x y z R $.  $d x y z A $.
    isso2i.1 $e |- ( ( x e. A /\ y e. A ) ->
                     ( x R y <-> -. ( x = y \/ y R x ) ) ) $.
    isso2i.2 $e |- ( ( x e. A /\ y e. A /\ z e. A ) ->
                     ( ( x R y /\ y R z ) -> x R z ) ) $.
    $( Deduce strict ordering from its properties.  (Contributed by NM,
       29-Jan-1996.)  (Revised by Mario Carneiro, 9-Jul-2014.) $)
    isso2i $p |- R Or A $=
      ( cv wcel wbr wn wa weq wo equid orci wb wi eleq1 anbi2d breq1 notbid w3o
      equequ2 orbi12d breq2 bibi12d imbi12d con2bid chvarv mpbii anidms biimprd
      3orass df-or bitri sylibr issoi ) ABCDEAHZDIZUSUSEJZKZUTUTLZAAMZVANZVBVDV
      AAOPUTBHZDIZLZABMZVFUSEJZNZUSVFEJZKZQZRVCVEVBQZRBABAMZVHVCVNVOVPVGUTUTVFU
      SDSTVPVKVEVMVBVPVIVDVJVABAAUDVFUSUSEUAUEVPVLVAVFUSUSEUFUBUGUHVHVLVKFUIZUJ
      UKULGVHVMVKRZVLVIVJUCZVHVKVMVQUMVSVLVKNVRVLVIVJUNVLVKUOUPUQUR $.
  $}

  ${
    $d x y R $.
    $( Any relation is a strict ordering of the empty set.  (Contributed by NM,
       16-Mar-1997.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
    so0 $p |- R Or (/) $=
      ( vx vy c0 wor wpo cv wbr weq w3o wral po0 ral0 df-so mpbir2an ) DAEDAFBG
      ZCGZAHBCIQPAHJCDKZBDKALRBMBCDANO $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( A totally ordered set has at most one minimal element.  (Contributed by
       Mario Carneiro, 24-Jun-2015.)  (Revised by NM, 16-Jun-2017.) $)
    somo $p |- ( R Or A -> E* x e. A A. y e. A -. y R x ) $=
      ( vz wor cv wbr wn wral wa weq wi wrmo wcel breq1 notbid rspcv im2anan9
      wo ancomsd imp ioran w3o solin df-3or or32 bitri sylib syl5bir syl5 exp4b
      ord pm2.43d ralrimivv breq2 ralbidv rmo4 sylibr ) CDFZBGZAGZDHZIZBCJZVAEG
      ZDHZIZBCJZKZAELZMZECJACJVEACNUTVLAECCUTVBCOZVFCOZKZVLUTVOVOVJVKVOVJKVBVFD
      HZIZVFVBDHZIZKZUTVOKZVKVOVJVTVOVIVEVTVMVIVQVNVEVSVHVQBVBCBALVGVPVAVBVFDPQ
      RVDVSBVFCBELVCVRVAVFVBDPQRSUAUBVTVPVRTZIWAVKVPVRUCWAWBVKWAVPVKVRUDZWBVKTZ
      CVBVFDUEWCVPVKTVRTWDVPVKVRUFVPVKVRUGUHUIUMUJUKULUNUOVEVIAECVKVDVHBCVKVCVG
      VBVFVADUPQUQURUS $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                Founded and well-ordering relations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new constant symbols. $)
  $c Fr $. $( Well-founded predicate symbol (read: 'well-founded'). $)
  $c Se $. $( Set-like predicate symbol (read: 'set-like'). $)
  $c We $. $( Well-ordering predicate symbol (read: 'well-orders') $)

  $( Extend wff notation to include the well-founded predicate.  Read:  ' ` R `
     is a well-founded relation on ` A ` .' $)
  wfr $a wff R Fr A $.

  $( Extend wff notation to include the set-like predicate.  Read:  ' ` R ` is
     set-like on ` A ` .' $)
  wse $a wff R Se A $.

  $( Extend wff notation to include the well-ordering predicate.
     Read:  ' ` R ` well-orders ` A ` .' $)
  wwe $a wff R We A $.

  ${
    $d x y z R $.  $d x y z A $.
    $( Define the well-founded relation predicate.  Definition 6.24(1) of
       [TakeutiZaring] p. 30.  For alternate definitions, see ~ dffr2 and
       ~ dffr3 .  (Contributed by NM, 3-Apr-1994.) $)
    df-fr $a |- ( R Fr A <-> A. x ( ( x C_ A /\ x =/= (/) ) ->
                E. y e. x A. z e. x -. z R y ) ) $.

    $( Define the set-like predicate.  (Contributed by Mario Carneiro,
       19-Nov-2014.) $)
    df-se $a |- ( R Se A <-> A. x e. A { y e. A | y R x } e. _V ) $.
  $}

  $( Define the well-ordering predicate.  For an alternate definition, see
     ~ dfwe2 .  (Contributed by NM, 3-Apr-1994.) $)
  df-we $a |- ( R We A <-> ( R Fr A /\ R Or A ) ) $.

  ${
    $d x y z A $.  $d x y z B $.  $d x y z R $.  $d x y V $.
    $( Property of well-founded relation (one direction of definition).
       (Contributed by NM, 18-Mar-1997.) $)
    fri $p |- ( ( ( B e. C /\ R Fr A ) /\ ( B C_ A /\ B =/= (/) ) ) ->
                E. x e. B A. y e. B -. y R x ) $=
      ( vz wcel wfr wss c0 wne wa cv wbr wn wral wrex wi wal df-fr wceq anbi12d
      sseq1 neeq1 raleq rexeqbi1dv imbi12d spcgv syl5bi imp31 ) DEHZCFIZDCJZDKL
      ZMZBNANFOPZBDQZADRZUMGNZCJZUTKLZMZUQBUTQZAUTRZSZGTULUPUSSZGABCFUAVFVGGDEU
      TDUBZVCUPVEUSVHVAUNVBUOUTDCUDUTDKUEUCVDURAUTDUQBUTDUFUGUHUIUJUK $.

    $( The ` R ` -preimage of an element of the base set in a set-like relation
       is a set.  (Contributed by Mario Carneiro, 19-Nov-2014.) $)
    seex $p |- ( ( R Se A /\ B e. A ) -> { x e. A | x R B } e. _V ) $=
      ( vy wse cv wbr crab cvv wcel wral df-se wceq breq2 rabbidv eleq1d sylanb
      rspccva ) BDFAGZEGZDHZABIZJKZEBLCBKTCDHZABIZJKZEABDMUDUGECBUACNZUCUFJUHUB
      UEABUACTDOPQSR $.

    $( Any relation on a set is set-like on it.  (Contributed by Mario
       Carneiro, 22-Jun-2015.) $)
    exse $p |- ( A e. V -> R Se A ) $=
      ( vy vx wcel cv wbr crab cvv wral wse rabexg ralrimivw df-se sylibr ) ACF
      ZDGEGBHZDAIJFZEAKABLQSEARDACMNEDABOP $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( Alternate definition of well-founded relation.  Similar to Definition
       6.21 of [TakeutiZaring] p. 30.  (Contributed by NM, 17-Feb-2004.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.)  (Proof shortened by
       Mario Carneiro, 23-Jun-2015.) $)
    dffr2 $p |- ( R Fr A <-> A. x ( ( x C_ A /\ x =/= (/) ) ->
                E. y e. x { z e. x | z R y } = (/) ) ) $=
      ( wfr cv wss c0 wne wa wbr wn wral wrex wi wal crab wceq df-fr rabeq0
      rexbii imbi2i albii bitr4i ) DEFAGZDHUFIJKZCGBGELZMCUFNZBUFOZPZAQUGUHCUFR
      ISZBUFOZPZAQABCDETUNUKAUMUJUGULUIBUFUHCUFUAUBUCUDUE $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.
    frc.1 $e |- B e. _V $.
    $( Property of well-founded relation (one direction of definition using
       class variables).  (Contributed by NM, 17-Feb-2004.)  (Revised by Mario
       Carneiro, 19-Nov-2014.) $)
    frc $p |- ( ( R Fr A /\ B C_ A /\ B =/= (/) ) ->
                E. x e. B { y e. B | y R x } = (/) ) $=
      ( wfr wss c0 wne w3a cv wbr wn wral wrex crab wceq cvv wcel wa fri mpanl1
      3impb rabeq0 rexbii sylibr ) CEGZDCHZDIJZKBLALEMZNBDOZADPZUKBDQIRZADPUHUI
      UJUMDSTUHUIUJUAUMFABCDSEUBUCUDUNULADUKBDUEUFUG $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z R $.  $d x y S $.
    $( Subset theorem for the well-founded predicate.  Exercise 1 of
       [TakeutiZaring] p. 31.  (Contributed by NM, 3-Apr-1994.)  (Proof
       shortened by Andrew Salmon, 25-Jul-2011.) $)
    frss $p |- ( A C_ B -> ( R Fr B -> R Fr A ) ) $=
      ( vx vz vy wss cv c0 wne wa wbr wn wral wrex wi wal wfr sstr2 df-fr com12
      anim1d imim1d alimdv 3imtr4g ) ABGZDHZBGZUGIJZKZEHFHCLMEUGNFUGOZPZDQUGAGZ
      UIKZUKPZDQBCRACRUFULUODUFUNUJUKUFUMUHUIUMUFUHUGABSUAUBUCUDDFEBCTDFEACTUE
      $.

    $( Subset theorem for the set-like predicate.  (Contributed by Mario
       Carneiro, 24-Jun-2015.) $)
    sess1 $p |- ( R C_ S -> ( S Se A -> R Se A ) ) $=
      ( vy vx wss cv wbr crab cvv wcel wral wi simpl ssbrd ss2rabdv ssexg df-se
      wse wa ex syl ralimdv 3imtr4g ) BCFZDGZEGZCHZDAIZJKZEALUFUGBHZDAIZJKZEALA
      CSABSUEUJUMEAUEULUIFZUJUMMUEUKUHDAUEUFAKZTBCUFUGUEUONOPUNUJUMULUIJQUAUBUC
      EDACREDABRUD $.

    $( Subset theorem for the set-like predicate.  (Contributed by Mario
       Carneiro, 24-Jun-2015.) $)
    sess2 $p |- ( A C_ B -> ( R Se B -> R Se A ) ) $=
      ( vy vx wss cv wbr crab cvv wcel wral wse ssralv wi rabss2 ssexg ex df-se
      syl ralimdv syld 3imtr4g ) ABFZDGEGCHZDBIZJKZEBLZUEDAIZJKZEALZBCMACMUDUHU
      GEALUKUGEABNUDUGUJEAUDUIUFFZUGUJOUEDABPULUGUJUIUFJQRTUAUBEDBCSEDACSUC $.
  $}

  ${
    $d x y z R $.  $d x y z S $.  $d x y z A $.
    $( Equality theorem for the well-founded predicate.  (Contributed by NM,
       9-Mar-1997.) $)
    freq1 $p |- ( R = S -> ( R Fr A <-> S Fr A ) ) $=
      ( vx vz vy wceq cv wss c0 wne wa wbr wn wral wrex wi wal wfr df-fr notbid
      breq rexralbidv imbi2d albidv 3bitr4g ) BCGZDHZAIUHJKLZEHZFHZBMZNZEUHOFUH
      PZQZDRUIUJUKCMZNZEUHOFUHPZQZDRABSACSUGUOUSDUGUNURUIUGUMUQFEUHUHUGULUPUJUK
      BCUBUAUCUDUEDFEABTDFEACTUF $.
  $}

  $( Equality theorem for the well-founded predicate.  (Contributed by NM,
     3-Apr-1994.) $)
  freq2 $p |- ( A = B -> ( R Fr A <-> R Fr B ) ) $=
    ( wceq wfr wss wi eqimss2 frss syl eqimss impbid ) ABDZACEZBCEZMBAFNOGBAHBA
    CIJMABFONGABKABCIJL $.

  $( Equality theorem for the set-like predicate.  (Contributed by Mario
     Carneiro, 24-Jun-2015.) $)
  seeq1 $p |- ( R = S -> ( R Se A <-> S Se A ) ) $=
    ( wceq wse wss wi eqimss2 sess1 syl eqimss impbid ) BCDZABEZACEZMCBFNOGCBHA
    CBIJMBCFONGBCKABCIJL $.

  $( Equality theorem for the set-like predicate.  (Contributed by Mario
     Carneiro, 24-Jun-2015.) $)
  seeq2 $p |- ( A = B -> ( R Se A <-> R Se B ) ) $=
    ( wceq wse wss wi eqimss2 sess2 syl eqimss impbid ) ABDZACEZBCEZMBAFNOGBAHB
    ACIJMABFONGABKABCIJL $.

  ${
    $d y R a b c $.  $d y A a b c $.  $d x y a b c $.
    nffr.r $e |- F/_ x R $.
    nffr.a $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for well-founded relations.
       (Contributed by Stefan O'Rear, 20-Jan-2015.)  (Revised by Mario
       Carneiro, 14-Oct-2016.) $)
    nffr $p |- F/ x R Fr A $=
      ( va vc vb wfr cv wss c0 wne wa wbr wn wral wrex wi nfcv wal nfss nfv nfn
      df-fr nfan nfbr nfral nfrex nfim nfal nfxfr ) BCIFJZBKZUMLMZNZGJZHJZCOZPZ
      GUMQZHUMRZSZFUAAFHGBCUEVCAFUPVBAUNUOAAUMBAUMTZEUBUOAUCUFVAAHUMVDUTAGUMVDU
      SAAUQURCAUQTDAURTUGUDUHUIUJUKUL $.

    $( Bound-variable hypothesis builder for set-like relations.  (Contributed
       by Mario Carneiro, 24-Jun-2015.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfse $p |- F/ x R Se A $=
      ( va vb wse cv wbr crab cvv wcel wral df-se nfcv nfbr nfrab nfel1 nfral
      nfxfr ) BCHFIZGIZCJZFBKZLMZGBNAGFBCOUFAGBEAUELUDAFBAUBUCCAUBPDAUCPQERSTUA
      $.

    $( Bound-variable hypothesis builder for well-orderings.  (Contributed by
       Stefan O'Rear, 20-Jan-2015.)  (Revised by Mario Carneiro,
       14-Oct-2016.) $)
    nfwe $p |- F/ x R We A $=
      ( wwe wfr wor wa df-we nffr nfso nfan nfxfr ) BCFBCGZBCHZIABCJOPAABCDEKAB
      CDELMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.
    $( A well-founded relation is irreflexive.  Special case of Proposition
       6.23 of [TakeutiZaring] p. 30.  (Contributed by NM, 2-Jan-1994.)
       (Revised by Mario Carneiro, 22-Jun-2015.) $)
    frirr $p |- ( ( R Fr A /\ B e. A ) -> -. B R B ) $=
      ( vx vy wfr wcel wa cv wbr csn crab c0 wceq wrex wss adantl wral notbid
      wn wne simpl simpr snssd snnzg frc syl3anc wb rabeq0 breq2 ralbidv syl5bb
      snex rexsng breq1 ralsng bitrd mpbid ) ACFZBAGZHZDIZEIZCJZDBKZLMNZEVEOZBB
      CJZTZVAUSVEAPVEMUAZVGUSUTUBVABAUSUTUCUDUTVJUSBAUEQEDAVECBUMUFUGUTVGVIUHUS
      UTVGVBBCJZTZDVERZVIVFVMEBAVFVDTZDVERVCBNZVMVDDVEUIVOVNVLDVEVOVDVKVCBVBCUJ
      SUKULUNVLVIDBAVBBNVKVHVBBBCUOSUPUQQUR $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y R $.
    $( A well-founded relation has no 2-cycle loops.  Special case of
       Proposition 6.23 of [TakeutiZaring] p. 30.  (Contributed by NM,
       30-May-1994.)  (Revised by Mario Carneiro, 22-Jun-2015.) $)
    fr2nr $p |- ( ( R Fr A /\ ( B e. A /\ C e. A ) ) ->
                -. ( B R C /\ C R B ) ) $=
      ( vx vy wcel wa wbr wn wo cv wral cvv adantl ad2antrl wceq notbid ralbidv
      breq2 wfr cpr wrex wss wne prex a1i simpl prssi prnzg fri syl22anc rexprg
      c0 wb mpbid wi prid2g ad2antll breq1 syl prid1g orim12d mpd orcomd sylibr
      rspcv ianor ) ADUAZBAGZCAGZHZHZBCDIZJZCBDIZJZKVNVPHJVMVQVOVMELZBDIZJZEBCU
      BZMZVRCDIZJZEWAMZKZVQVOKVMVRFLZDIZJZEWAMZFWAUCZWFVMWANGZVIWAAUDZWAUNUEZWK
      WLVMBCUFUGVIVLUHVLWMVIBCAUIOVJWNVIVKBCAUJPFEAWANDUKULVLWKWFUOVIWJWBWEFBCA
      AWGBQZWIVTEWAWOWHVSWGBVRDTRSWGCQZWIWDEWAWPWHWCWGCVRDTRSUMOUPVMWBVQWEVOVMC
      WAGZWBVQUQVKWQVIVJBCAURUSVTVQECWAVRCQVSVPVRCBDUTRVGVAVMBWAGZWEVOUQVJWRVIV
      KBCAVBPWDVOEBWAVRBQWCVNVRBCDUTRVGVAVCVDVEVNVPVHVF $.
  $}

  ${
    $d x y z R $.
    $( Any relation is well-founded on the empty set.  (Contributed by NM,
       17-Sep-1993.) $)
    fr0 $p |- R Fr (/) $=
      ( vx vz vy c0 wfr cv wss wne wa wbr crab wceq wrex dffr2 ss0 a1d necon1ad
      wi wn imp mpgbir ) EAFBGZEHZUCEIZJCGDGAKCUCLEMDUCNZSBBDCEAOUDUEUFUDUFUCEU
      DUCEMUFTUCPQRUAUB $.
  $}

  ${
    $d A x y z $.  $d R x y z $.  $d ph y z $.  $d ps x z $.
    frminex.1 $e |- A e. _V $.
    frminex.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( If an element of a well-founded set satisfies a property ` ph ` , then
       there is a minimal element that satisfies ` ph ` .  (Contributed by Jeff
       Madsen, 18-Jun-2010.)  (Proof shortened by Mario Carneiro,
       18-Nov-2016.) $)
    frminex $p |- ( R Fr A -> ( E. x e. A ph ->
                      E. x e. A ( ph /\ A. y e. A ( ps -> -. y R x ) ) ) ) $=
      ( vz wrex crab c0 wne cv wbr wn wi wral wa cvv wfr rabn0 wss rabex ssrab2
      wcel fri ralrab rexbii weq breq2 notbid imbi2d ralbidv rexrab2 bitri an4s
      sylib mpanl12 ex syl5bir ) ACEJACEKZLMZEFUAZABDNZCNZFOZPZQZDERZSCEJZACEUB
      VDVCVKVBTUFZVBEUCZVDVCSVKACEGUDACEUEVLVDVMVCVKVLVDSVMVCSSVEINZFOZPZDVBRZI
      VBJZVKIDEVBTFUGVRBVPQZDERZIVBJVKVQVTIVBABVPDCEHUHUIAVTVJICEICUJZVSVIDEWAV
      PVHBWAVOVGVNVFVEFUKULUMUNUOUPURUQUSUTVA $.
  $}

  ${
    $d x A $.
    $( Irreflexivity of the epsilon relation: a class founded by epsilon is not
       a member of itself.  (Contributed by NM, 18-Apr-1994.)  (Revised by
       Mario Carneiro, 22-Jun-2015.) $)
    efrirr $p |- ( _E Fr A -> -. A e. A ) $=
      ( cep wfr wcel wa wbr frirr wb epelg adantl mtbid pm2.01da ) ABCZAADZMNEA
      ABFZNAABGNONHMAAAIJKL $.
  $}

  $( A set founded by epsilon contains no 2-cycle loops.  (Contributed by NM,
     19-Apr-1994.) $)
  efrn2lp $p |- ( ( _E Fr A /\ ( B e. A /\ C e. A ) ) ->
                -. ( B e. C /\ C e. B ) ) $=
    ( cep wfr wcel wa wbr fr2nr wb epelg bi2anan9r adantl mtbid ) ADEZBAFZCAFZG
    ZGBCDHZCBDHZGZBCFZCBFZGZABCDIRUAUDJOQSUBPTUCBCAKCBAKLMN $.

  ${
    $d x y A $.
    $( The epsilon relation is set-like on any class.  (This is the origin of
       the term ""set-like"": a set-like relation ""acts like"" the epsilon
       relation of sets and their elements.)  (Contributed by Mario Carneiro,
       22-Jun-2015.) $)
    epse $p |- _E Se A $=
      ( vy vx cep wse cv wbr crab cvv wcel wral cab epel bicomi abbi2i eqeltrri
      vex rabssab ssexi rgenw df-se mpbir ) ADEBFZCFZDGZBAHZIJZCAKUGCAUFUEBLZUD
      UHIUEBUDUEUCUDJBCMNOCQPUEBARSTCBADUAUB $.
  $}

  $( Similar to Theorem 7.2 of [TakeutiZaring] p. 35, of except that the Axiom
     of Regularity is not required due to antecedent ` _E Fr A ` .
     (Contributed by NM, 4-May-1994.) $)
  tz7.2 $p |- ( ( Tr A /\ _E Fr A /\ B e. A ) -> ( B C_ A /\ B =/= A ) ) $=
    ( wtr cep wfr wcel wss wne wa trss wn wceq efrirr eleq1 syl5ibrcom necon2ad
    notbid anim12ii 3impia ) ACZADEZBAFZBAGZBAHZITUBUCUAUDABJUAUBBAUAUBKBALZAAF
    ZKAMUEUBUFBAANQOPRS $.

  ${
    $d x y z A $.
    $( An alternate way of saying that the epsilon relation is well-founded.
       (Contributed by NM, 17-Feb-2004.)  (Revised by Mario Carneiro,
       23-Jun-2015.) $)
    dfepfr $p |- ( _E Fr A <-> A. x ( ( x C_ A /\ x =/= (/) ) ->
                  E. y e. x ( x i^i y ) = (/) ) ) $=
      ( vz cep wfr cv wss c0 wne wa wbr crab wceq wrex wi wal cin dffr2 wel a1i
      wb epel rabbiia dfin5 eqtr4i eqeq1i rexbii imbi2i albii bitri ) CEFAGZCHU
      LIJKZDGBGZELZDULMZINZBULOZPZAQUMULUNRZINZBULOZPZAQABDCESUSVCAURVBUMUQVABU
      LUPUTIUPDBTZDULMUTUOVDDULUOVDUBDATDBUCUAUDDULUNUEUFUGUHUIUJUK $.
  $}

  ${
    $d x y A $.  $d x y B $.
    epfrc.1 $e |- B e. _V $.
    $( A subset of an epsilon-founded class has a minimal element.
       (Contributed by NM, 17-Feb-2004.)  (Revised by David Abernethy,
       22-Feb-2011.) $)
    epfrc $p |- ( ( _E Fr A /\ B C_ A /\ B =/= (/) ) ->
                  E. x e. B ( B i^i x ) = (/) ) $=
      ( vy cep wfr wss c0 wne w3a cv wbr crab wceq wrex cin frc wcel dfin5 epel
      wb a1i rabbiia eqtr4i eqeq1i rexbii sylibr ) BFGCBHCIJKELZALZFMZECNZIOZAC
      PCUJQZIOZACPAEBCFDRUOUMACUNULIUNUIUJSZECNULECUJTUKUPECUKUPUBUICSEAUAUCUDU
      EUFUGUH $.
  $}

  $( Subset theorem for the well-ordering predicate.  Exercise 4 of
     [TakeutiZaring] p. 31.  (Contributed by NM, 19-Apr-1994.) $)
  wess $p |- ( A C_ B -> ( R We B -> R We A ) ) $=
    ( wss wfr wor wa wwe frss soss anim12d df-we 3imtr4g ) ABDZBCEZBCFZGACEZACF
    ZGBCHACHNOQPRABCIABCJKBCLACLM $.

  $( Equality theorem for the well-ordering predicate.  (Contributed by NM,
     9-Mar-1997.) $)
  weeq1 $p |- ( R = S -> ( R We A <-> S We A ) ) $=
    ( wceq wfr wor wa wwe freq1 soeq1 anbi12d df-we 3bitr4g ) BCDZABEZABFZGACEZ
    ACFZGABHACHNOQPRABCIABCJKABLACLM $.

  $( Equality theorem for the well-ordering predicate.  (Contributed by NM,
     3-Apr-1994.) $)
  weeq2 $p |- ( A = B -> ( R We A <-> R We B ) ) $=
    ( wceq wfr wor wa wwe freq2 soeq2 anbi12d df-we 3bitr4g ) ABDZACEZACFZGBCEZ
    BCFZGACHBCHNOQPRABCIABCJKACLBCLM $.

  $( A well-ordering is well-founded.  (Contributed by NM, 22-Apr-1994.) $)
  wefr $p |- ( R We A -> R Fr A ) $=
    ( wwe wfr wor df-we simplbi ) ABCABDABEABFG $.

  $( A well-ordering is a strict ordering.  (Contributed by NM,
     16-Mar-1997.) $)
  weso $p |- ( R We A -> R Or A ) $=
    ( wwe wfr wor df-we simprbi ) ABCABDABEABFG $.

  $( The elements of an epsilon well-ordering are comparable.  (Contributed by
     NM, 17-May-1994.) $)
  wecmpep $p |- ( ( _E We A /\ ( x e. A /\ y e. A ) ) ->
                 ( x e. y \/ x = y \/ y e. x ) ) $=
    ( cep wwe wor cv wcel wa weq w3o weso solin epel biid 3orbi123i sylib sylan
    wbr ) CDECDFZAGZCHBGZCHIZUAUBHZABJZUBUAHZKZCDLTUCIUAUBDSZUEUBUADSZKUGCUAUBD
    MUHUDUEUEUIUFABNUEOBANPQR $.

  $( An epsilon well-ordering is a transitive relation.  (Contributed by NM,
     22-Apr-1994.) $)
  wetrep $p |- ( ( _E We A /\ ( x e. A /\ y e. A /\ z e. A ) ) ->
             ( ( x e. y /\ y e. z ) -> x e. z ) ) $=
    ( cep wwe cv wcel w3a wa wbr wel wor weso sotr sylan epel anbi12i 3imtr3g
    wi ) DEFZAGZDHBGZDHCGZDHIZJUBUCEKZUCUDEKZJZUBUDEKZABLZBCLZJACLUADEMUEUHUITD
    ENDUBUCUDEOPUFUJUGUKABQBCQRACQS $.

  ${
    $d x y z R $.  $d y z A $.  $d x y z B $.
    $( A nonempty (possibly proper) subclass of a class well-ordered by ` _E `
       has a minimal element.  Special case of Proposition 6.26 of
       [TakeutiZaring] p. 31.  (Contributed by NM, 17-Feb-2004.) $)
    wefrc $p |- ( ( _E We A /\ B C_ A /\ B =/= (/) ) ->
               E. x e. B ( B i^i x ) = (/) ) $=
      ( vy vz cep wwe wss c0 wne cv cin wceq wrex wi wcel wa eqeq1d ex wel wess
      wex n0 ineq2 rspcev adantl inss1 wfr wefr vex inex2 syl3an1 3exp mpi elin
      epfrc anbi1i anass rexbii2 syl6ib adantr wral df-3an 3anrot bitr3i wetrep
      bitri w3a expd sylan2b exp44 com34 impd syl5bi imp4a com23 ralrimdv dfss3
      imp syl6ibr dfss in32 sylbb biimprd syl6 reximdvai syld pm2.61dne exlimdv
      eqeq2i syl6com 3imp ) BFGZCBHZCIJZCAKZLZIMZACNZWNWMCFGZWOWSOCBFUAWODKZCPZ
      DUBWTWSDCUCWTXBWSDWTXBWSWTXBQZWSCXALZIXBXDIMZWSOWTXBXEWSWRXEAXACWPXAMWQXD
      IWPXACUDRUESUFXCXDIJZADTZXDWPLZIMZQZACNZWSWTXFXKOXBWTXFXIAXDNZXKWTXDCHZXF
      XLOCXAUGWTXMXFXLWTCFUHXMXFXLCFUIACXDXACDUJUKUPULUMUNXIXJAXDCWPXDPZXIQWPCP
      ZXGQZXIQXOXJQXNXPXIWPCXAUOUQXOXGXIURVGUSUTVAXCXJWRACXCXOXGXIWRXCXOXGXIWRO
      ZXCXPWQXAHZXQXCXPEDTZEWQVBXRXCXPXSEWQXCEKZWQPZXPXSXCYAXOXGXSYAXTCPZEATZQX
      CXOXGXSOZOZXTCWPUOXCYBYCYEXCYBXOYCYDWTXBYBXOYCYDOZOOWTXBYBXOYFXBYBQXOQZWT
      YBXOXBVHZYFYGXBYBXOVHYHXBYBXOVCXBYBXOVDVEWTYHQYCXGXSEADCVFVIVJVKVSVLVMVNV
      OVPVQEWQXAVRVTXRWRXIXRWQXHIXRWQWQXALZMWQXHMWQXAWAYIXHWQCWPXAWBWJWCRWDWEVI
      VOWFWGWHSWIVNWKWL $.
  $}

  $( Any relation is a well-ordering of the empty set.  (Contributed by NM,
     16-Mar-1997.) $)
  we0 $p |- R We (/) $=
    ( c0 wwe wfr wor fr0 so0 df-we mpbir2an ) BACBADBAEAFAGBAHI $.

  ${
    $d x y z A $.  $d w x y z B $.  $d w x y z R $.
    $( A subset of a well-ordered set has a unique minimal element.
       (Contributed by NM, 18-Mar-1997.)  (Revised by Mario Carneiro,
       28-Apr-2015.) $)
    wereu $p |- ( ( R We A /\ ( B e. V /\ B C_ A /\ B =/= (/) ) ) ->
                E! x e. B A. y e. B -. y R x ) $=
      ( wwe wcel wss c0 wne w3a wa cv wbr wn wral wrex wi wor wrmo wreu wfr fri
      wefr exp32 expcom 3imp2 sylan simpr2 weso adantr soss sylc somo syl reu5
      sylanbrc ) CEGZDFHZDCIZDJKZLZMZBNANEOPBDQZADRZVEADUAZVEADUBUSCEUCZVCVFCEU
      EVHUTVAVBVFUTVHVAVBVFSSUTVHMVAVBVFABCDFEUDUFUGUHUIVDDETZVGVDVACETZVIUSUTV
      AVBUJUSVJVCCEUKULDCEUMUNABDEUOUPVEADUQUR $.

    $( All nonempty (possibly proper) subclasses of ` A ` , which has a
       well-founded relation ` R ` , have ` R `-minimal elements.  Proposition
       6.26 of [TakeutiZaring] p. 31.  (Contributed by Scott Fenton,
       29-Jan-2011.)  (Revised by Mario Carneiro, 24-Jun-2015.) $)
    wereu2 $p |- ( ( ( R We A /\ R Se A ) /\ ( B C_ A /\ B =/= (/) ) ) ->
                E! x e. B A. y e. B -. y R x ) $=
      ( vz vw wa c0 cv wbr wn wral wrex wcel wi breq1 syl5bi sylc ad2antrr wrmo
      wwe wse wss wne wreu wex n0 crab wceq rabeq0 notbid cbvralv breq2 ralbidv
      weq syl5bb rspcev ex ad2antll cvv simprl simplr sess2 simprr seex syl2anc
      wfr wefr ssrab2 syl5ss fri expr syl21anc rexrab ralrab wor weso soss sotr
      simpr syl13anc ancomsd expdimp an32s con3d idd jad ralimdva reximdva syld
      expimpd pm2.61dne exlimdv impr somo syl reu5 sylanbrc ) CEUBZCEUCZHZDCUDZ
      DIUEZHZHZBJZAJZEKZLZBDMZADNZXKADUAZXKADUFXBXCXDXLXDFJZDOZFUGXBXCHZXLFDUHX
      PXOXLFXBXCXOXLXBXCXOHZHZXLGJZXNEKZGDUIZIYAIUJXTLZGDMZXRXLXTGDUKXOYCXLPXBX
      CXOYCXLXKYCAXNDXKXSXHEKZLZGDMAFUPZYCXJYEBGDBGUPXIYDXGXSXHEQULUMYFYEYBGDYF
      YDXTXHXNXSEUNULUOUQURUSUTRXRYAIUEZXJBYAMZAYANZXLXRYAVAOZCEVHZYACUDZYGYIPX
      RDEUCZXOYJXRXCXAYMXBXCXOVBZWTXAXQVCDCEVDSXBXCXOVEZGDXNEVFVGWTYKXAXQCEVITX
      RYADCXTGDVJYNVKYJYKHYLYGYIABCYAVAEVLVMVNYIXHXNEKZYHHZADNXRXLXTYPYHAGDXSXH
      XNEQVOXRYQXKADXRXHDOZHZYPYHXKYHXGXNEKZXJPZBDMYSYPHZXKXTYTXJBGDXSXGXNEQVPU
      UBUUAXJBDUUBXGDOZHZYTXJXJUUDXIYTYSUUCYPXIYTPYSUUCHZYPXIYTUUEXIYPYTUUEDEVQ
      ZUUCYRXOXIYPHYTPXRUUFYRUUCXRXCCEVQZUUFYNWTUUGXAXQCEVRZTDCEVSZSTYSUUCWAXRY
      RUUCVCXRXOYRUUCYOTDXGXHXNEVTWBWCWDWEWFUUDXJWGWHWIRWLWJRWKWMVMWNRWOXFUUFXM
      XFXCUUGUUFXBXCXDVBWTUUGXAXEUUHTUUISABDEWPWQXKADWRWS $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Ordinals
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Introduce new constant symbols. $)
  $c Ord $. $( Ordinal predicate $)
  $c On $. $( The class of ordinal numbers $)
  $c Lim $. $( Limit ordinal predicate $)
  $c suc $. $( Successor function (read:  'successor of') $)

  $( Extend the definition of a wff to include the ordinal predicate. $)
  word $a wff Ord A $.

  $( Extend the definition of a class to include the class of all ordinal
     numbers.  (The 0 in the name prevents creating a file called con.html,
     which causes problems in Windows.) $)
  con0 $a class On $.

  $( Extend the definition of a wff to include the limit ordinal predicate. $)
  wlim $a wff Lim A $.

  $( Extend class notation to include the successor function. $)
  csuc $a class suc A $.

  $( Define the ordinal predicate, which is true for a class that is transitive
     and is well-ordered by the epsilon relation.  Variant of definition of
     [BellMachover] p. 468.  (Contributed by NM, 17-Sep-1993.) $)
  df-ord $a |- ( Ord A <-> ( Tr A /\ _E We A ) ) $.

  $( Define the class of all ordinal numbers.  Definition 7.11 of
     [TakeutiZaring] p. 38.  (Contributed by NM, 5-Jun-1994.) $)
  df-on $a |- On = { x | Ord x } $.

  $( Define the limit ordinal predicate, which is true for a nonempty ordinal
     that is not a successor (i.e. that is the union of itself).  Our
     definition combines the definition of Lim of [BellMachover] p. 471 and
     Exercise 1 of [TakeutiZaring] p. 42.  See ~ dflim2 , ~ dflim3 , and dflim4
     for alternate definitions.  (Contributed by NM, 22-Apr-1994.) $)
  df-lim $a |- ( Lim A <-> ( Ord A /\ A =/= (/) /\ A = U. A ) ) $.

  $( Define the successor of a class.  When applied to an ordinal number, the
     successor means the same thing as ""plus 1"" (see ~ oa1suc ).  Definition
     7.22 of [TakeutiZaring] p. 41, who use ""+ 1"" to denote this function.  Our
     definition is a generalization to classes.  Although it is not
     conventional to use it with proper classes, it has no effect on a proper
     class ( ~ sucprc ), so that the successor of any ordinal class is still an
     ordinal class ( ~ ordsuc ), simplifying certain proofs.  Some authors
     denote the successor operation with a prime (apostrophe-like) symbol, such
     as Definition 6 of [Suppes] p. 134 and the definition of successor in
     [Mendelson] p. 246 (who uses the symbol ""Suc"" as a predicate to mean ""is a
     successor ordinal"").  The definition of successor of [Enderton] p. 68
     denotes the operation with a plus-sign superscript.  (Contributed by NM,
     30-Aug-1993.) $)
  df-suc $a |- suc A = ( A u. { A } ) $.

  $( Equality theorem for the ordinal predicate.  (Contributed by NM,
     17-Sep-1993.) $)
  ordeq $p |- ( A = B -> ( Ord A <-> Ord B ) ) $=
    ( wceq wtr cep wwe wa word treq weeq2 anbi12d df-ord 3bitr4g ) ABCZADZAEFZG
    BDZBEFZGAHBHNOQPRABIABEJKALBLM $.

  ${
    $d x A $.
    $( An ordinal number is an ordinal set.  (Contributed by NM,
       5-Jun-1994.) $)
    elong $p |- ( A e. V -> ( A e. On <-> Ord A ) ) $=
      ( vx cv word con0 ordeq df-on elab2g ) CDZEAECAFBJAGCHI $.
  $}

  ${
    elon.1 $e |- A e. _V $.
    $( An ordinal number is an ordinal set.  (Contributed by NM,
       5-Jun-1994.) $)
    elon $p |- ( A e. On <-> Ord A ) $=
      ( cvv wcel con0 word wb elong ax-mp ) ACDAEDAFGBACHI $.
  $}

  $( An ordinal number has the ordinal property.  (Contributed by NM,
     5-Jun-1994.) $)
  eloni $p |- ( A e. On -> Ord A ) $=
    ( con0 wcel word elong ibi ) ABCADABEF $.

  $( An ordinal number is an ordinal set.  (Contributed by NM, 8-Feb-2004.) $)
  elon2 $p |- ( A e. On <-> ( Ord A /\ A e. _V ) ) $=
    ( con0 wcel word cvv wa eloni elex jca elong biimparc impbii ) ABCZADZAECZF
    MNOAGABHIOMNAEJKL $.

  $( Equality theorem for the limit predicate.  (Contributed by NM,
     22-Apr-1994.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  limeq $p |- ( A = B -> ( Lim A <-> Lim B ) ) $=
    ( wceq word c0 wne cuni w3a wlim ordeq neeq1 unieq eqeq12d 3anbi123d df-lim
    id 3bitr4g ) ABCZADZAEFZAAGZCZHBDZBEFZBBGZCZHAIBIRSUCTUDUBUFABJABEKRABUAUER
    PABLMNAOBOQ $.

  $( Epsilon well-orders every ordinal.  Proposition 7.4 of [TakeutiZaring]
     p. 36.  (Contributed by NM, 3-Apr-1994.) $)
  ordwe $p |- ( Ord A -> _E We A ) $=
    ( word wtr cep wwe df-ord simprbi ) ABACADEAFG $.

  $( An ordinal class is transitive.  (Contributed by NM, 3-Apr-1994.) $)
  ordtr $p |- ( Ord A -> Tr A ) $=
    ( word wtr cep wwe df-ord simplbi ) ABACADEAFG $.

  $( Epsilon is well-founded on an ordinal class.  (Contributed by NM,
     22-Apr-1994.) $)
  ordfr $p |- ( Ord A -> _E Fr A ) $=
    ( word cep wwe wfr ordwe wefr syl ) ABACDACEAFACGH $.

  $( An element of an ordinal class is a subset of it.  (Contributed by NM,
     30-May-1994.) $)
  ordelss $p |- ( ( Ord A /\ B e. A ) -> B C_ A ) $=
    ( word wtr wcel wss ordtr trss imp sylan ) ACADZBAEZBAFZAGKLMABHIJ $.

  $( A transitive subclass of an ordinal class is ordinal.  (Contributed by NM,
     29-May-1994.) $)
  trssord $p |- ( ( Tr A /\ A C_ B /\ Ord B ) -> Ord A ) $=
    ( wtr wss word w3a cep wwe ordwe wess imp sylan2 anim2i 3impb df-ord sylibr
    wa ) ACZABDZBEZFRAGHZQZAERSTUBSTQUARTSBGHZUABISUCUAABGJKLMNAOP $.

  $( Epsilon irreflexivity of ordinals: no ordinal class is a member of
     itself.  Theorem 2.2(i) of [BellMachover] p. 469, generalized to classes.
     We prove this without invoking the Axiom of Regularity.  (Contributed by
     NM, 2-Jan-1994.) $)
  ordirr $p |- ( Ord A -> -. A e. A ) $=
    ( word cep wfr wcel wn ordfr efrirr syl ) ABACDAAEFAGAHI $.

  $( A member of an ordinal class is not equal to it.  (Contributed by NM,
     25-May-1998.) $)
  nordeq $p |- ( ( Ord A /\ B e. A ) -> A =/= B ) $=
    ( word wcel wne wn wceq ordirr eleq1 notbid syl5ibcom necon2ad imp ) ACZBAD
    ZABENOABNAADZFABGZOFAHQPOABAIJKLM $.

  $( An ordinal class cannot an element of one of its members.  Variant of
     first part of Theorem 2.2(vii) of [BellMachover] p. 469.  (Contributed by
     NM, 3-Apr-1994.) $)
  ordn2lp $p |- ( Ord A -> -. ( A e. B /\ B e. A ) ) $=
    ( word wcel wa ordirr wtr wi ordtr trel syl mtod ) ACZABDBADEZAADZAFMAGNOHA
    IAABJKL $.

  ${
    $d x B $.
    $( A subclass (possibly proper) of an ordinal class has a minimal element.
       Proposition 7.5 of [TakeutiZaring] p. 36.  (Contributed by NM,
       18-Feb-2004.)  (Revised by David Abernethy, 16-Mar-2011.) $)
    tz7.5 $p |- ( ( Ord A /\ B C_ A /\ B =/= (/) ) ->
               E. x e. B ( B i^i x ) = (/) ) $=
      ( word cep wwe wss c0 wne cv cin wceq wrex ordwe wefrc syl3an1 ) BDBEFCBG
      CHICAJKHLACMBNABCOP $.
  $}

  ${
    $d x y z A $.  $d x y z B $.
    $( An element of an ordinal class is ordinal.  Proposition 7.6 of
       [TakeutiZaring] p. 36.  (Contributed by NM, 23-Apr-1994.) $)
    ordelord $p |- ( ( Ord A /\ B e. A ) -> Ord B ) $=
      ( vx vz vy word wcel cv wa wceq eleq1 anbi2d wtr cep wwe wel wal w3a syl
      wi ordeq imbi12d simpll 3anrot 3anass ordtr trel3 syl5bir impl trel imp31
      bitr3i expcomd adantrl simplr ordwe sylan syl13anc pm2.43d alrimivv dftr2
      wetrep ex sylibr wss trss wess syl6ci imp df-ord sylanbrc vtoclg anabsi7
      ) AFZBAGZBFZVNCHZAGZIZVQFZTVNVOIZVPTCBAVQBJZVSWAVTVPWBVRVOVNVQBAKLVQBUAUB
      VSVQMZVQNOZVTVSDEPZECPZIZDCPZTZEQDQWCVSWIDEVSWGWHVSWGWIVSWGIVNDHZAGZEHZAG
      ZVRWIVNVRWGUCVNVRWGWKVRWGIZWEWFVRRZVNWKWOVRWEWFRWNVRWEWFUDVRWEWFUEULVNAMZ
      WOWKTAUFZAWJWLVQUGSUHUIVSWFWMWEVNVRWFWMVNWFVRWMVNWPWFVRIWMTWQAWLVQUJSUMUK
      UNVNVRWGUOVNANOZWKWMVRRWIAUPZDECAVBUQURVCUSUTDEVQVAVDVNVRWDVNVRVQAVEZWRWD
      VNWPVRWTTWQAVQVFSWSVQANVGVHVIVQVJVKVLVM $.
  $}

  ${
    $d x y $.
    $( The class of all ordinal numbers is transitive.  (Contributed by NM,
       4-May-2009.) $)
    tron $p |- Tr On $=
      ( vx vy con0 wtr cv wss dftr3 wcel word vex elon ordelord sylanb ex ssrdv
      syl6ibr mprgbir ) CDAEZCFACACGRCHZBRCSBEZRHZTIZTCHSUAUBSRIUAUBRAJKRTLMNTB
      JKPOQ $.
  $}

  $( An element of an ordinal class is an ordinal number.  (Contributed by NM,
     26-Oct-2003.) $)
  ordelon $p |- ( ( Ord A /\ B e. A ) -> B e. On ) $=
    ( word wcel wa con0 ordelord wb elong adantl mpbird ) ACZBADZEBFDZBCZABGMNO
    HLBAIJK $.

  $( An element of an ordinal number is an ordinal number.  Theorem 2.2(iii) of
     [BellMachover] p. 469.  (Contributed by NM, 26-Oct-2003.) $)
  onelon $p |- ( ( A e. On /\ B e. A ) -> B e. On ) $=
    ( con0 wcel word eloni ordelon sylan ) ACDAEBADBCDAFABGH $.

  ${
    $d x y A $.  $d x y B $.
    $( Proposition 7.7 of [TakeutiZaring] p. 37.  (Contributed by NM,
       5-May-1994.) $)
    tz7.7 $p |- ( ( Ord A /\ Tr B ) ->
                ( B e. A <-> ( B C_ A /\ B =/= A ) ) ) $=
      ( vx vy word wtr wa wcel wss wne wi cep c0 cv wceq imp32 wn nsyli adantll
      imp wfr ordtr ordfr tz7.2 3exp sylc adantr cdif pssdifn0 wrex difss tz7.5
      cin mp3an2 eldifi trss difin0ss com12 syl56 ad2antrr eleq1 biimpcd eldifn
      syl adantl trel expcomd ex adantld w3o ordwe ssel2 anim12i wecmpep syl2an
      wwe adantlr ecase23d exp44 com34 imp31 ssrdv ad2antrl eqeltrrd rexlimdvaa
      adantrr eqssd syl5 exp4b com23 adantrd pm2.43i syl7 exp4a pm2.43d impbid
      impd ) AEZBFZGZBAHZBAIZBAJZGZWRXAXDKZWSWRAFZALUAZXEAUBZAUCXFXGXAXDABUDUEU
      FUGWTXBXCXAWTXBXCXAKWTXBXBXCXAXDABUHZMJZWTXBXABAUIWTXBXJXAKZKZWTWRXLWSWTX
      BWRXKWTXBWRXJXAWRXJGXICNZUMMOZCXIUJZWTXBGZXAWRXIAIXJXOABUKCAXIULUNXPXNXAC
      XIXPXMXIHZXNGGZXMBAXRXMBXPXQXNXMBIZWRXQXNXSKZKZWSXBWRXFYAXHXQXMAHZXFXMAIZ
      XTXMABUOZAXMUPXNYCXSABXMUQURUSVDUTPXPXQBXMIXNXPXQGDBXMWTXBXQDNZBHZYEXMHZK
      WTXBYFXQYGWTXBYFXQYGWTXBYFGZXQGZGYGYEXMOZXMYEHZYIYJQZWTYFXQYLXBYFXQYLYFYJ
      XMBHZXQYJYFYMYEXMBVAVBXMABVCZRTSVEWSYIYKQZWRWSYHXQYOWSYFXQYOKZXBWSYFYPWSY
      FGYKYMXQWSYFYKYMKWSYKYFYMBXMYEVFVGTYNRVHVIPSWRYIYGYJYKVJZWSWRALVPYEAHZYBG
      YQYIAVKYHYRXQYBBAYEVLYDVMDCAVNVOVQVRVSVTWAWBWFWGXQYBXPXNYDWCWDWEWHWIWJWKW
      LWMWNWOWQWP $.
  $}

  $( Corollary 7.8 of [TakeutiZaring] p. 37.  (Contributed by NM,
     25-Nov-1995.) $)
  ordelssne $p |- ( ( Ord A /\ Ord B ) ->
              ( A e. B <-> ( A C_ B /\ A =/= B ) ) ) $=
    ( word wcel wss wne wa wb wtr ordtr tz7.7 sylan2 ancoms ) BCZACZABDABEABFGH
    ZONAIPAJBAKLM $.

  $( Corollary 7.8 of [TakeutiZaring] p. 37.  (Contributed by NM,
     17-Jun-1998.) $)
  ordelpss $p |- ( ( Ord A /\ Ord B ) -> ( A e. B <-> A C. B ) ) $=
    ( word wa wcel wss wne wpss ordelssne df-pss syl6bbr ) ACBCDABEABFABGDABHAB
    IABJK $.

  $( For ordinal classes, subclass is equivalent to membership or equality.
     (Contributed by NM, 25-Nov-1995.)  (Proof shortened by Andrew Salmon,
     25-Jul-2011.) $)
  ordsseleq $p |- ( ( Ord A /\ Ord B ) ->
                  ( A C_ B <-> ( A e. B \/ A = B ) ) ) $=
    ( word wa wcel wceq wo wpss wss ordelpss orbi1d sspss syl6rbbr ) ACBCDZABEZ
    ABFZGABHZPGABINOQPABJKABLM $.

  $( The intersection of two ordinal classes is ordinal.  Proposition 7.9 of
     [TakeutiZaring] p. 37.  (Contributed by NM, 9-May-1994.) $)
  ordin $p |- ( ( Ord A /\ Ord B ) -> Ord ( A i^i B ) ) $=
    ( word cin wtr ordtr trin syl2an wss inss2 trssord mp3an2 sylancom ) ACZBCZ
    ABDZEZPCZNAEBEQOAFBFABGHQPBIORABJPBKLM $.

  ${
    $d x y A $.  $d x y B $.
    $( The intersection of two ordinal numbers is an ordinal number.
       (Contributed by NM, 7-Apr-1995.) $)
    onin $p |- ( ( A e. On /\ B e. On ) -> ( A i^i B ) e. On ) $=
      ( con0 wcel wa cin word eloni ordin syl2an cvv wb simpl inex1g elong 3syl
      mpbird ) ACDZBCDZEZABFZCDZUAGZRAGBGUCSAHBHABIJTRUAKDUBUCLRSMABCNUAKOPQ $.
  $}

  $( A trichotomy law for ordinals.  Proposition 7.10 of [TakeutiZaring]
     p. 38.  (Contributed by NM, 10-May-1994.)  (Proof shortened by Andrew
     Salmon, 25-Jul-2011.) $)
  ordtri3or $p |- ( ( Ord A /\ Ord B ) -> ( A e. B \/ A = B \/ B e. A ) ) $=
    ( word wa wcel wceq w3o wpss wss wo ordin sylib inss1 ordsseleq mpbii sylan
    cin wn ord df-ss ordirr syl ianor elin incom eleq1i anbi2i xchnxbir anabss1
    bitri syl6ibr anabss4 orim12d mpd sspsstri ordelpss ancoms 3orbi123d mpbird
    biidd wb ) ACZBCZDZABEZABFZBAEZGABHZVFBAHZGZVDABIZBAIZJZVJVDABQZAEZRZBAQZBE
    ZRZJZVMVDVNVNEZRZVTVDVNCZWBABKZVNUAUBVOVRDZVTWAVOVRUCWAVOVNBEZDWEVNABUDWFVR
    VOVNVQBABUEUFUGUJUHLVDVPVKVSVLVDVPVNAFZVKVDVOWGVBVCVOWGJZVDWCVBWHWDWCVBDVNA
    IWHABMVNANOPUISABTUKVDVSVQBFZVLVDVRWIVBVCVRWIJZVCVBDVQCZVCWJBAKWKVCDVQBIWJB
    AMVQBNOPULSBATUKUMUNABUOLVDVEVHVFVFVGVIABUPVDVFUTVCVBVGVIVABAUPUQURUS $.

  $( A trichotomy law for ordinals.  (Contributed by NM, 25-Mar-1995.)  (Proof
     shortened by Andrew Salmon, 25-Jul-2011.) $)
  ordtri1 $p |- ( ( Ord A /\ Ord B ) -> ( A C_ B <-> -. B e. A ) ) $=
    ( word wa wss wcel wceq wo wn ordsseleq wi imnan sylibr ordirr eleq2 notbid
    ordn2lp syl5ibrcom jaao w3o ordtri3or df-3or sylib orcomd ord impbid bitrd
    ) ACZBCZDZABEABFZABGZHZBAFZIZABJUJUMUOUHUKUOUIULUHUKUNDIUKUOKABQUKUNLMUIUOU
    LBBFZIBNULUNUPABBOPRSUJUNUMUJUMUNUJUKULUNTUMUNHABUAUKULUNUBUCUDUEUFUG $.

  $( A trichotomy law for ordinal numbers.  (Contributed by NM, 6-Nov-2003.) $)
  ontri1 $p |- ( ( A e. On /\ B e. On ) -> ( A C_ B <-> -. B e. A ) ) $=
    ( con0 wcel word wss wn wb eloni ordtri1 syl2an ) ACDAEBEABFBADGHBCDAIBIABJ
    K $.

  $( A trichotomy law for ordinals.  (Contributed by NM, 25-Nov-1995.) $)
  ordtri2 $p |- ( ( Ord A /\ Ord B ) ->
               ( A e. B <-> -. ( A = B \/ B e. A ) ) ) $=
    ( word wa wceq wcel wo wn wb wss ordsseleq eqcom orbi2i orcom bitri ordtri1
    syl6bb bitr3d ancoms con2bid ) ACZBCZDABEZBAFZGZABFZUBUAUEUFHZIUBUADZBAJZUE
    UGUHUIUDBAEZGZUEBAKUKUDUCGUEUJUCUDBALMUDUCNOQBAPRST $.

  $( A trichotomy law for ordinals.  (Contributed by NM, 18-Oct-1995.)  (Proof
     shortened by Andrew Salmon, 25-Jul-2011.) $)
  ordtri3 $p |- ( ( Ord A /\ Ord B ) ->
               ( A = B <-> -. ( A e. B \/ B e. A ) ) ) $=
    ( word wa wceq wcel wo wn ordirr eleq2 notbid syl5ib syl5ibr anim12d pm4.56
    com12 syl6ib w3o ordtri3or sylib df-3or or32 ord impbid ) ACZBCZDZABEZABFZB
    AFZGZHZUGUHUIHZUJHZDZULUHUGUOUHUEUMUFUNUEAAFZHUHUMAIUHUPUIABAJKLUFUNUHBBFZH
    BIUHUJUQABBJKMNPUIUJOQUGUKUHUGUIUHGUJGZUKUHGUGUIUHUJRURABSUIUHUJUATUIUHUJUB
    TUCUD $.

  $( A trichotomy law for ordinals.  (Contributed by NM, 1-Nov-2003.)  (Proof
     shortened by Andrew Salmon, 25-Jul-2011.) $)
  ordtri4 $p |- ( ( Ord A /\ Ord B ) ->
               ( A = B <-> ( A C_ B /\ -. A e. B ) ) ) $=
    ( wceq wss wa word wcel wn eqss wb ordtri1 ancoms anbi2d syl5bb ) ABCABDZBA
    DZEAFZBFZEZOABGHZEABISPTORQPTJBAKLMN $.

  $( An ordinal class and its singleton are disjoint.  (Contributed by NM,
     19-May-1998.) $)
  orddisj $p |- ( Ord A -> ( A i^i { A } ) = (/) ) $=
    ( word wcel wn csn cin c0 wceq ordirr disjsn sylibr ) ABAACDAAEFGHAIAAJK $.

  ${
    $d x y z $.
    $( The ordinal class is well-founded.  This lemma is needed for ~ ordon in
       order to eliminate the need for the Axiom of Regularity.  (Contributed
       by NM, 17-May-1994.) $)
    onfr $p |- _E Fr On $=
      ( vx vz vy con0 cep wfr cv wss c0 wne wa cin wceq wrex dfepfr wcel eqeq1d
      wi syl adantr wex ineq2 rspcev adantll inss1 word ssel2 eloni ordfr inss2
      n0 vex inex1 epfrc mp3an2 sylan wb inass simpr sseldi ordelss dfss1 sylib
      syl2anc ineq2d syl5eq rexbidva mpbid ssrexv pm2.61dane exlimdv syl5bi imp
      mpsyl ex mpgbir ) DEFAGZDHZVQIJZKVQBGZLZIMZBVQNZRAABDOVRVSWCVSCGZVQPZCUAV
      RWCCVQUKVRWEWCCVRWEWCVRWEKZWCVQWDLZIWEWGIMZWCVRWBWHBWDVQVTWDMWAWGIVTWDVQU
      BQUCUDWGVQHWFWGIJZKZWBBWGNZWCVQWDUEWJWGVTLZIMZBWGNZWKWFWDEFZWIWNWFWDUFZWO
      WFWDDPWPVQDWDUGWDUHSZWDUISWOWGWDHWIWNVQWDUJZBWDWGVQWDAULUMUNUOUPWFWNWKUQW
      IWFWMWBBWGWFVTWGPZKZWLWAIWTWLVQWDVTLZLWAVQWDVTURWTXAVTVQWTVTWDHZXAVTMWTWP
      VTWDPXBWFWPWSWQTWTWGWDVTWRWFWSUSUTWDVTVAVDVTWDVBVCVEVFQVGTVHWBBWGVQVIVNVJ
      VOVKVLVMVP $.
  $}

  $( Relationship between membership and proper subset of an ordinal number.
     (Contributed by NM, 15-Sep-1995.) $)
  onelpss $p |- ( ( A e. On /\ B e. On ) ->
               ( A e. B <-> ( A C_ B /\ A =/= B ) ) ) $=
    ( con0 wcel word wss wne wa wb eloni ordelssne syl2an ) ACDAEBEABDABFABGHIB
    CDAJBJABKL $.

  $( Relationship between subset and membership of an ordinal number.
     (Contributed by NM, 15-Sep-1995.) $)
  onsseleq $p |- ( ( A e. On /\ B e. On ) ->
                 ( A C_ B <-> ( A e. B \/ A = B ) ) ) $=
    ( con0 wcel word wss wceq wo wb eloni ordsseleq syl2an ) ACDAEBEABFABDABGHI
    BCDAJBJABKL $.

  $( An element of an ordinal number is a subset of the number.  (Contributed
     by NM, 5-Jun-1994.)  (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  onelss $p |- ( A e. On -> ( B e. A -> B C_ A ) ) $=
    ( con0 wcel word wss wi eloni ordelss ex syl ) ACDAEZBADZBAFZGAHLMNABIJK $.

  $( Transitive law for ordinal classes.  (Contributed by NM, 12-Dec-2004.) $)
  ordtr1 $p |- ( Ord C -> ( ( A e. B /\ B e. C ) -> A e. C ) ) $=
    ( word wtr wcel wa wi ordtr trel syl ) CDCEABFBCFGACFHCICABJK $.

  $( Transitive law for ordinal classes.  (Contributed by NM, 12-Dec-2004.)
     (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  ordtr2 $p |- ( ( Ord A /\ Ord C ) -> ( ( A C_ B /\ B e. C ) -> A e. C ) ) $=
    ( word wa wss wcel wpss wi ordelord ex ancld anc2li ordelpss ancoms sspsstr
    wb expcom syl6bi com23 imp32 com12 syl9 impd adantl sylibrd ) ADZCDZEABFZBC
    GZEZACHZACGUHUKULIUGUHUIUJULUHUJUHUJBDZEZEZUIULUHUJUNUHUJUMUHUJUMCBJKLMUOUI
    ULUHUJUMUIULIZUHUMUJUPUHUMUJUPIUHUMEUJBCHZUPUMUHUJUQQBCNOUIUQULABCPRSKTUAUB
    UCUDUEACNUF $.

  $( Transitive law for ordinal classes.  (Contributed by Mario Carneiro,
     30-Dec-2014.) $)
  ordtr3 $p |- ( ( Ord B /\ Ord C ) -> ( A e. B -> ( A e. C \/ C e. B ) ) ) $=
    ( word wa wcel wo wss simplr ordelord adantlr ordtri1 syl2anc ordtr2 ancoms
    wn wb wi ancomsd expdimp sylbird orrd ex ) BDZCDZEZABFZACFZCBFZGUFUGEZUHUIU
    JUHPZCAHZUIUJUEADZULUKQUDUEUGIUDUGUMUEBAJKCALMUFUGULUIUFULUGUIUEUDULUGEUIRC
    ABNOSTUAUBUC $.

  $( Transitive law for ordinal numbers.  Theorem 7M(b) of [Enderton] p. 192.
     (Contributed by NM, 11-Aug-1994.) $)
  ontr1 $p |- ( C e. On -> ( ( A e. B /\ B e. C ) -> A e. C ) ) $=
    ( con0 wcel word wa wi eloni ordtr1 syl ) CDECFABEBCEGACEHCIABCJK $.

  $( Transitive law for ordinal numbers.  Exercise 3 of [TakeutiZaring] p. 40.
     (Contributed by NM, 6-Nov-2003.) $)
  ontr2 $p |- ( ( A e. On /\ C e. On ) ->
              ( ( A C_ B /\ B e. C ) -> A e. C ) ) $=
    ( con0 wcel word wss wa wi eloni ordtr2 syl2an ) ADEAFCFABGBCEHACEICDEAJCJA
    BCKL $.

  ${
    $d x y A $.  $d x y B $.
    $( The union of an ordinal stays the same if a subset equal to one of its
       elements is removed.  (Contributed by NM, 10-Dec-2004.) $)
    ordunidif $p |- ( ( Ord A /\ B e. A ) -> U. ( A \ B ) = U. A ) $=
      ( vx vy word wcel wa cv wss cdif wrex wi syl wn eldif adantl sseq2 rspcev
      cuni syl6 wral wceq con0 ordelon onelss eloni ordirr simplbi2 syl5 jctild
      mpd adantr biimpri ssid jctir ex pm2.61d ralrimiva unidif ) AEZBAFZGZCHZD
      HZIZDABJZKZCAUAVFSASUBVBVGCAVBVCAFZGZVCBFZVGVIVJBVFFZVCBIZGZVGVBVJVMLVHVB
      VJVLVKVBBUCFZVJVLLABUDZBVCUEMVBVNVKVOVAVNVKLUTVNBBFNZVAVKVNBEVPBUFBUGMVKV
      AVPBABOUHUIPUKUJULVEVLDBVFVDBVCQRTVHVJNZVGLVBVHVQVCVFFZVCVCIZGZVGVHVQVTVH
      VQGZVRVSVRWAVCABOUMVCUNUOUPVEVSDVCVFVDVCVCQRTPUQURCDABUSM $.

    $( If ` B ` is smaller than ` A ` , then it equals the intersection of the
       difference.  Exercise 11 in [TakeutiZaring] p. 44.  (Contributed by
       Andrew Salmon, 14-Nov-2011.) $)
    ordintdif $p |- ( ( Ord A /\ Ord B /\ ( A \ B ) =/= (/) )
      -> B = |^| ( A \ B ) ) $=
      ( vx cdif c0 wne word wss wn cint wceq ssdif0 necon3bbii w3a cv wcel crab
      dfdif2 wa ordtri1 inteqi con2bid wb ordelord ancoms sylan bicomd rabbidva
      an32s inteqd intmin sylan9eq ex sylbird 3impia syl5req syl3an3br ) ABDZEF
      AGZBGZABHZIZBURJZKVAUREABLMUSUTVBNVCCOZBPIZCAQZJZBURVFCABRUAUSUTVBVGBKZUS
      UTSZVBBAPZVHVIVAVJABTUBVIVJVHVIVJVGBVDHZCAQZJBVIVFVLVIVEVKCAVIVDAPZSVKVEU
      SVMUTVKVEUCZUSVMSVDGZUTVNAVDUDUTVOVNBVDTUEUFUIUGUHUJCBAUKULUMUNUOUPUQ $.
  $}

  ${
    $d x ps $.  $d x A $.
    onintss.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( If a property is true for an ordinal number, then the minimum ordinal
       number for which it is true is smaller or equal.  Theorem Schema 61 of
       [Suppes] p. 228.  (Contributed by NM, 3-Oct-2003.) $)
    onintss $p |- ( A e. On -> ( ps -> |^| { x e. On | ph } C_ A ) ) $=
      ( con0 wcel crab cint wss intminss ex ) DFGBACFHIDJABCDFEKL $.
  $}

  ${
    $d x A $.  $d x B $.
    $( A way to show that an ordinal number equals the minimum of a collection
       of ordinal numbers: it must be in the collection, and it must not be
       larger than any member of the collection.  (Contributed by NM,
       14-Nov-2003.) $)
    oneqmini $p |- ( B C_ On -> ( ( A e. B /\ A. x e. A -. x e. B )
                    -> A = |^| B ) ) $=
      ( con0 wss wcel cv wn wral wa cint wceq ssint wi ssel anim12d ontri1 syl6
      wb expdimp pm5.74d con2b syl6bb syl5bb biimprd expimpd intss1 a1i adantrd
      ralbidv2 jcad eqss syl6ibr ) CDEZBCFZAGZCFZHZABIZJZBCKZEZVABEZJBVALUNUTVB
      VCUNUOUSVBUNUOJZVBUSVBBUPEZACIVDUSABCMVDVEURACBVDUQVENUQUPBFZHZNVFURNVDUQ
      VEVGUNUOUQVEVGSZUNUOUQJBDFZUPDFZJVHUNUOVIUQVJCDBOCDUPOPBUPQRTUAUQVFUBUCUJ
      UDUEUFUNUOVCUSUOVCNUNBCUGUHUIUKBVAULUM $.
  $}

  $( The empty set is an ordinal class.  (Contributed by NM, 11-May-1994.) $)
  ord0 $p |- Ord (/) $=
    ( c0 word wtr cep wwe tr0 we0 df-ord mpbir2an ) ABACADEFDGAHI $.

  $( The empty set is an ordinal number.  Corollary 7N(b) of [Enderton]
     p. 193.  (Contributed by NM, 17-Sep-1993.) $)
  0elon $p |- (/) e. On $=
    ( c0 con0 wcel word ord0 0ex elon mpbir ) ABCADEAFGH $.

  $( A nonempty ordinal contains the empty set.  (Contributed by NM,
     25-Nov-1995.) $)
  ord0eln0 $p |- ( Ord A -> ( (/) e. A <-> A =/= (/) ) ) $=
    ( word c0 wcel wne ne0i wceq wn df-ne wo ord0 wa noel ordtri2 con2bid mpan2
    mpbiri ord syl5bi impbid2 ) ABZCADZACEZACFUCACGZHUAUBACIUAUDUBUACBZUDUBJZKU
    AUELZUFACDZHAMUGUHUFACNOQPRST $.

  $( An ordinal number contains zero iff it is nonzero.  (Contributed by NM,
     6-Dec-2004.) $)
  on0eln0 $p |- ( A e. On -> ( (/) e. A <-> A =/= (/) ) ) $=
    ( con0 wcel word c0 wne wb eloni ord0eln0 syl ) ABCADEACAEFGAHAIJ $.

  $( An alternate definition of a limit ordinal.  (Contributed by NM,
     4-Nov-2004.) $)
  dflim2 $p |- ( Lim A <-> ( Ord A /\ (/) e. A /\ A = U. A ) ) $=
    ( wlim word c0 wne cuni wceq w3a wcel df-lim ord0eln0 anbi1d pm5.32i 3anass
    wa 3bitr4i bitr4i ) ABACZADEZAAFGZHZRDAIZTHZAJRUBTOZORSTOZOUCUARUDUERUBSTAK
    LMRUBTNRSTNPQ $.

  $( The intersection of the class of ordinal numbers is the empty set.
     (Contributed by NM, 20-Oct-2003.) $)
  inton $p |- |^| On = (/) $=
    ( c0 con0 wcel cint wceq 0elon int0el ax-mp ) ABCBDAEFBGH $.

  $( The empty set is not a limit ordinal.  (Contributed by NM, 24-Mar-1995.)
     (Proof shortened by Andrew Salmon, 25-Jul-2011.) $)
  nlim0 $p |- -. Lim (/) $=
    ( c0 wlim word wcel cuni wceq w3a noel simp2 mto dflim2 mtbir ) ABACZAADZAA
    EFZGZPNAHMNOIJAKL $.

  $( A limit ordinal is ordinal.  (Contributed by NM, 4-May-1995.) $)
  limord $p |- ( Lim A -> Ord A ) $=
    ( wlim word c0 wne cuni wceq df-lim simp1bi ) ABACADEAAFGAHI $.

  $( A limit ordinal is its own supremum (union).  (Contributed by NM,
     4-May-1995.) $)
  limuni $p |- ( Lim A -> A = U. A ) $=
    ( wlim word c0 wne cuni wceq df-lim simp3bi ) ABACADEAAFGAHI $.

  $( The union of a limit ordinal is a limit ordinal.  (Contributed by NM,
     19-Sep-2006.) $)
  limuni2 $p |- ( Lim A -> Lim U. A ) $=
    ( wlim cuni wceq wb limuni limeq syl ibi ) ABZACZBZJAKDJLEAFAKGHI $.

  $( A limit ordinal contains the empty set.  (Contributed by NM,
     15-May-1994.) $)
  0ellim $p |- ( Lim A -> (/) e. A ) $=
    ( wlim c0 wcel wne wceq nlim0 limeq mtbiri necon2ai word wb limord ord0eln0
    syl mpbird ) ABZCADZACEZQACACFQCBGACHIJQAKRSLAMANOP $.

  $( A limit ordinal class that is also a set is an ordinal number.
     (Contributed by NM, 26-Apr-2004.) $)
  limelon $p |- ( ( A e. B /\ Lim A ) -> A e. On ) $=
    ( wcel wlim con0 word limord elong syl5ibr imp ) ABCZADZAECZLMKAFAGABHIJ $.

  $( The class of all ordinal numbers is not empty.  (Contributed by NM,
     17-Sep-1995.) $)
  onn0 $p |- On =/= (/) $=
    ( c0 con0 0elon ne0ii ) ABCD $.

  $( Equality of successors.  (Contributed by NM, 30-Aug-1993.)  (Proof
     shortened by Andrew Salmon, 25-Jul-2011.) $)
  suceq $p |- ( A = B -> suc A = suc B ) $=
    ( wceq csn cun csuc id sneq uneq12d df-suc 3eqtr4g ) ABCZAADZEBBDZEAFBFLABM
    NLGABHIAJBJK $.

  $( Membership in a successor.  This one-way implication does not require that
     either ` A ` or ` B ` be sets.  (Contributed by NM, 6-Jun-1994.) $)
  elsuci $p |- ( A e. suc B -> ( A e. B \/ A = B ) ) $=
    ( csuc wcel csn wo wceq cun df-suc eleq2i elun bitri elsni orim2i sylbi ) A
    BCZDZABDZABEZDZFZRABGZFQABSHZDUAPUCABIJABSKLTUBRABMNO $.

  $( Membership in a successor.  Exercise 5 of [TakeutiZaring] p. 17.
     (Contributed by NM, 15-Sep-1995.) $)
  elsucg $p |- ( A e. V -> ( A e. suc B <-> ( A e. B \/ A = B ) ) ) $=
    ( csuc wcel csn wo wceq cun df-suc eleq2i elun bitri elsncg orbi2d syl5bb )
    ABDZEZABEZABFZEZGZACEZSABHZGRABTIZEUBQUEABJKABTLMUCUAUDSABCNOP $.

  $( Variant of membership in a successor, requiring that ` B ` rather than
     ` A ` be a set.  (Contributed by NM, 28-Oct-2003.) $)
  elsuc2g $p |- ( B e. V -> ( A e. suc B <-> ( A e. B \/ A = B ) ) ) $=
    ( csuc wcel csn cun wceq wo df-suc eleq2i elun elsnc2g orbi2d syl5bb ) ABDZ
    EABBFZGZEZBCEZABEZABHZIZPRABJKSUAAQEZITUCABQLTUDUBUAABCMNOO $.

  ${
    elsuc.1 $e |- A e. _V $.
    $( Membership in a successor.  Exercise 5 of [TakeutiZaring] p. 17.
       (Contributed by NM, 15-Sep-2003.) $)
    elsuc $p |- ( A e. suc B <-> ( A e. B \/ A = B ) ) $=
      ( cvv wcel csuc wceq wo wb elsucg ax-mp ) ADEABFEABEABGHICABDJK $.

    $( Membership in a successor.  (Contributed by NM, 15-Sep-2003.) $)
    elsuc2 $p |- ( B e. suc A <-> ( B e. A \/ B = A ) ) $=
      ( cvv wcel csuc wceq wo wb elsuc2g ax-mp ) ADEBAFEBAEBAGHICBADJK $.
  $}

  ${
    $d y A $.  $d x y $.
    nfsuc.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for successor.  (Contributed by NM,
       15-Sep-2003.) $)
    nfsuc $p |- F/_ x suc A $=
      ( csuc csn cun df-suc nfsn nfun nfcxfr ) ABDBBEZFBGABKCABCHIJ $.
  $}

  $( Membership in a successor.  (Contributed by NM, 20-Jun-1998.) $)
  elelsuc $p |- ( A e. B -> A e. suc B ) $=
    ( wcel csuc wceq wo orc elsucg mpbird ) ABCZABDCJABEZFJKGABBHI $.

  ${
    $d x y A $.  $d x B $.
    $( Membership of a successor in another class.  (Contributed by NM,
       29-Jun-2004.) $)
    sucel $p |- ( suc A e. B <->
                E. x e. B A. y ( y e. x <-> ( y e. A \/ y = A ) ) ) $=
      ( csuc wcel cv wceq wrex wo wb wal risset dfcleq elsuc bibi2i albii bitri
      vex rexbii ) CEZDFAGZUAHZADIBGZUBFZUDCFUDCHJZKZBLZADIAUADMUCUHADUCUEUDUAF
      ZKZBLUHBUBUANUJUGBUIUFUEUDCBSOPQRTR $.
  $}

  $( The successor of the empty set.  (Contributed by NM, 1-Feb-2005.) $)
  suc0 $p |- suc (/) = { (/) } $=
    ( c0 csuc csn cun df-suc uncom un0 3eqtri ) ABAACZDIADIAEAIFIGH $.

  $( A proper class is its own successor.  (Contributed by NM, 3-Apr-1995.) $)
  sucprc $p |- ( -. A e. _V -> suc A = A ) $=
    ( cvv wcel wn csuc cun csn df-suc wceq snprc uneq2 sylbi syl5eq un0 syl6eq
    c0 ) ABCDZAEZAPFZAQRAAGZFZSAHQTPIUASIAJTPAKLMANO $.

  ${
    unisuc.1 $e |- A e. _V $.
    $( A transitive class is equal to the union of its successor.  Combines
       Theorem 4E of [Enderton] p. 72 and Exercise 6 of [Enderton] p. 73.
       (Contributed by NM, 30-Aug-1993.) $)
    unisuc $p |- ( Tr A <-> U. suc A = A ) $=
      ( cuni wss cun wceq wtr csuc ssequn1 df-tr csn df-suc unieqi uniun uneq2i
      unisn 3eqtri eqeq1i 3bitr4i ) ACZADTAEZAFAGAHZCZAFTAIAJUCUAAUCAAKZEZCTUDC
      ZEUAUBUEALMAUDNUFATABPOQRS $.
  $}

  $( A class is included in its own successor.  Part of Proposition 7.23 of
     [TakeutiZaring] p. 41 (generalized to arbitrary classes).  (Contributed by
     NM, 31-May-1994.) $)
  sssucid $p |- A C_ suc A $=
    ( csn cun csuc ssun1 df-suc sseqtr4i ) AAABZCADAHEAFG $.

  $( Part of Proposition 7.23 of [TakeutiZaring] p. 41 (generalized).
     (Contributed by NM, 25-Mar-1995.)  (Proof shortened by Scott Fenton,
     20-Feb-2012.) $)
  sucidg $p |- ( A e. V -> A e. suc A ) $=
    ( wcel csuc wceq wo eqid olci elsucg mpbiri ) ABCAADCAACZAAEZFLKAGHAABIJ $.

  ${
    sucid.1 $e |- A e. _V $.
    $( A set belongs to its successor.  (Contributed by NM, 22-Jun-1994.)
       (Proof shortened by Alan Sare, 18-Feb-2012.)  (Proof shortened by Scott
       Fenton, 20-Feb-2012.) $)
    sucid $p |- A e. suc A $=
      ( cvv wcel csuc sucidg ax-mp ) ACDAAEDBACFG $.
  $}

  $( No successor is empty.  (Contributed by NM, 3-Apr-1995.) $)
  nsuceq0 $p |- suc A =/= (/) $=
    ( csuc c0 wcel wceq wn noel sucidg eleq2 syl5ibcom mtoi sucprc eqeq1d eleq1
    cvv 0ex mpbiri syl6bi con3d pm2.43i pm2.61i neir ) ABZCAODZUCCEZFZUDUEACDZA
    GUDAUCDUEUGAOHUCCAIJKUDFZUFUHUEUDUHUEACEZUDUHUCACALMUIUDCODPACONQRSTUAUB $.

  ${
    eqelsuc.1 $e |- A e. _V $.
    $( A set belongs to the successor of an equal set.  (Contributed by NM,
       18-Aug-1994.) $)
    eqelsuc $p |- ( A = B -> A e. suc B ) $=
      ( wceq csuc sucid suceq syl5eleq ) ABDAAEBEACFABGH $.
  $}

  ${
    $d A x y $.  $d B y $.  $d C x y $.
    iunsuc.1 $e |- A e. _V $.
    iunsuc.2 $e |- ( x = A -> B = C ) $.
    $( Inductive definition for the indexed union at a successor.  (Contributed
       by Mario Carneiro, 4-Feb-2013.)  (Proof shortened by Mario Carneiro,
       18-Nov-2016.) $)
    iunsuc $p |- U_ x e. suc A B = ( U_ x e. A B u. C ) $=
      ( csuc ciun csn cun wceq df-suc iuneq1 ax-mp iunxun iunxsn uneq2i 3eqtri
      ) ABGZCHZABBIZJZCHZABCHZAUACHZJUDDJSUBKTUCKBLASUBCMNABUACOUEDUDABCDEFPQR
      $.
  $}

  ${
    $d y z A $.
    $( The successor of a transitive class is transitive.  (Contributed by Alan
       Sare, 11-Apr-2009.) $)
    suctr $p |- ( Tr A -> Tr suc A ) $=
      ( vz vy wtr cv wcel csuc wa wi wal wceq simpr vex elsuc sylib simpl eleq2
      wo syl6 mpdi syl5ibcom elelsuc trel expd adantrd syl8 jao alrimivv sylibr
      dftr2 ) ADZBEZCEZFZUMAGZFZHZULUOFZIZCJBJUODUKUSBCUKUQUMAFZUMAKZRZURUQUPVB
      UNUPLUMACMNOUKUQVAURIZVBURIZUQVAULAFZURUQUNVAVEUNUPPUMAULQUAULAUBZSUKUQUT
      URIVCVDIUKUQUTVEURUKUNUTVEIUPUKUNUTVEAULUMUCUDUEVFUFUTURVAUGSTTUHBCUOUJUI
      $.
  $}

  $( A set whose successor belongs to a transitive class also belongs.
     (Contributed by NM, 5-Sep-2003.)  (Proof shortened by Andrew Salmon,
     12-Aug-2011.) $)
  trsuc $p |- ( ( Tr A /\ suc B e. A ) -> B e. A ) $=
    ( wtr csuc wcel cvv wss sssucid ssexg mpan sucidg syl ancri trel syl5 imp
    wa ) ACZBDZAEZBAEZTBSEZTQRUATUBTBFEZUBBSGTUCBHBSAIJBFKLMABSNOP $.

  $( A member of the successor of a transitive class is a subclass of it.
     (Contributed by NM, 4-Oct-2003.) $)
  trsucss $p |- ( Tr A -> ( B e. suc A -> B C_ A ) ) $=
    ( csuc wcel wceq wo wtr wss elsuci trss wi eqimss a1i jaod syl5 ) BACDBADZB
    AEZFAGZBAHZBAIRPSQABJQSKRBALMNO $.

  $( A subset of an ordinal belongs to its successor.  (Contributed by NM,
     28-Nov-2003.) $)
  ordsssuc $p |- ( ( A e. On /\ Ord B ) -> ( A C_ B <-> A e. suc B ) ) $=
    ( con0 wcel word wa wss wceq wo csuc wb eloni ordsseleq sylan elsucg adantr
    bitr4d ) ACDZBEZFABGZABDABHIZABJDZRAESTUAKALABMNRUBUAKSABCOPQ $.

  $( A subset of an ordinal number belongs to its successor.  (Contributed by
     NM, 15-Sep-1995.) $)
  onsssuc $p |- ( ( A e. On /\ B e. On ) -> ( A C_ B <-> A e. suc B ) ) $=
    ( con0 wcel word wss csuc wb eloni ordsssuc sylan2 ) BCDACDBEABFABGDHBIABJK
    $.

  $( An ordinal subset of an ordinal number belongs to its successor.
     (Contributed by NM, 1-Feb-2005.)  (Proof shortened by Andrew Salmon,
     12-Aug-2011.) $)
  ordsssuc2 $p |- ( ( Ord A /\ B e. On ) -> ( A C_ B <-> A e. suc B ) ) $=
    ( cvv wcel word con0 wa wss csuc wb wi elong biimprd anim1d onsssuc syl6 wn
    annim ssexg ex elex a1d pm5.21ni sylbi expcom adantld pm2.61i ) ACDZAEZBFDZ
    GZABHZABIZDZJZKUHUKAFDZUJGUOUHUIUPUJUHUPUIACLMNABOPUHQZUJUOUIUJUQUOUJUQGUJU
    HKZQUOUJUHRULURUNULUJUHABFSTUNUHUJAUMUAUBUCUDUEUFUG $.

  ${
    $d x A $.  $d x B $.
    $( When its successor is subtracted from a class of ordinal numbers, an
       ordinal number is less than the minimum of the resulting subclass.
       (Contributed by NM, 1-Dec-2003.) $)
    onmindif $p |- ( ( A C_ On /\ B e. On ) -> B e. |^| ( A \ suc B ) ) $=
      ( vx con0 wss wcel wa csuc cdif cint cv wral wn eldif wi wb ssel2 onsssuc
      ontri1 bitr3d con1bid sylan biimpd exp31 com23 imp4b syl5bi elintg adantl
      ralrimiv mpbird ) ADEZBDFZGZBABHZIZJFZBCKZFZCUPLZUNUSCUPURUPFURAFZURUOFZM
      ZGUNUSURAUONULUMVAVCUSULVAUMVCUSOZULVAUMVDULVAGZUMGVCUSVEURDFZUMVCUSPADUR
      QVFUMGZUSVBVGURBEUSMVBURBSURBRTUAUBUCUDUEUFUGUJUMUQUTPULCBUPDUHUIUK $.
  $}

  $( There is no set between an ordinal class and its successor.  Generalized
     Proposition 7.25 of [TakeutiZaring] p. 41.  (Contributed by NM,
     21-Jun-1998.) $)
  ordnbtwn $p |- ( Ord A -> -. ( A e. B /\ B e. suc A ) ) $=
    ( word wcel wa wo csuc wn ordn2lp ordirr ioran sylanbrc elsuci anim2i sylib
    wceq andi eleq2 biimpac orim2i syl nsyl ) ACZABDZBADZEZAADZFZUDBAGDZEZUCUFH
    UGHUHHABIAJUFUGKLUJUFUDBAPZEZFZUHUJUDUEUKFZEUMUIUNUDBAMNUDUEUKQOULUGUFUKUDU
    GBAARSTUAUB $.

  $( There is no set between an ordinal number and its successor.  Proposition
     7.25 of [TakeutiZaring] p. 41.  (Contributed by NM, 9-Jun-1994.) $)
  onnbtwn $p |- ( A e. On -> -. ( A e. B /\ B e. suc A ) ) $=
    ( con0 wcel word csuc wa wn eloni ordnbtwn syl ) ACDAEABDBAFDGHAIABJK $.

  $( A set whose successor is a subset of another class is a member of that
     class.  (Contributed by NM, 16-Sep-1995.) $)
  sucssel $p |- ( A e. V -> ( suc A C_ B -> A e. B ) ) $=
    ( wcel csuc wss sucidg ssel syl5com ) ACDAAEZDJBFABDACGJBAHI $.

  $( Ordinal derived from its successor.  (Contributed by NM, 20-May-1998.) $)
  orddif $p |- ( Ord A -> A = ( suc A \ { A } ) ) $=
    ( word csn cin wceq csuc cdif orddisj disj3 cun df-suc difeq1i difun2 eqtri
    c0 eqeq2i bitr4i sylib ) ABAACZDOEZAAFZSGZEZAHTAASGZEUCASIUBUDAUBASJZSGUDUA
    UESAKLASMNPQR $.

  $( An ordinal class includes its union.  (Contributed by NM, 13-Sep-2003.) $)
  orduniss $p |- ( Ord A -> U. A C_ A ) $=
    ( word wtr cuni wss ordtr df-tr sylib ) ABACADAEAFAGH $.

  $( A trichotomy law for ordinal classes.  (Contributed by NM, 13-Sep-2003.)
     (Proof shortened by Andrew Salmon, 12-Aug-2011.) $)
  ordtri2or $p |- ( ( Ord A /\ Ord B ) -> ( A e. B \/ B C_ A ) ) $=
    ( word wa wcel wss wn wb ordtri1 ancoms biimprd orrd ) ACZBCZDZABEZBAFZOQPG
    ZNMQRHBAIJKL $.

  $( A trichotomy law for ordinal classes.  (Contributed by NM, 2-Nov-2003.) $)
  ordtri2or2 $p |- ( ( Ord A /\ Ord B ) -> ( A C_ B \/ B C_ A ) ) $=
    ( word wa wcel wss wo ordtri2or wi ordelss ex orim1d adantl mpd ) ACZBCZDAB
    EZBAFZGZABFZRGZABHPSUAIOPQTRPQTBAJKLMN $.

  $( A consequence of total ordering for ordinal classes.  Similar to
     ~ ordtri2or2 .  (Contributed by David Moews, 1-May-2017.) $)
  ordtri2or3 $p |- ( ( Ord A /\ Ord B ) ->
                     ( A = ( A i^i B ) \/ B = ( A i^i B ) ) ) $=
    ( word wa wss wo cin wceq ordtri2or2 dfss dfss5 orbi12i sylib ) ACBCDABEZBA
    EZFAABGZHZBPHZFABINQORABJBAKLM $.

  $( The intersection of two ordinal classes is an element of a third if and
     only if either one of them is.  (Contributed by David Moews,
     1-May-2017.) $)
  ordelinel $p |- ( ( Ord A /\ Ord B /\ Ord C ) ->
                    ( ( A i^i B ) e. C <-> ( A e. C \/ B e. C ) ) ) $=
    ( word w3a cin wcel wo wceq ordtri2or3 3adant3 eleq1 orc syl6bir wss ordtr2
    wi wa stoic3 mpani olc jaoi syl inss1 ordin inss2 jaod impbid ) ADZBDZCDZEZ
    ABFZCGZACGZBCGZHZULAUMIZBUMIZHZUNUQQZUIUJUTUKABJKURVAUSURUNUOUQAUMCLUOUPMNU
    SUNUPUQBUMCLUPUOUANUBUCULUOUNUPULUMAOZUOUNABUDUIUJUMDZUKVBUORUNQABUEZUMACPS
    TULUMBOZUPUNABUFUIUJVCUKVEUPRUNQVDUMBCPSTUGUH $.

  $( Property of a subclass of the maximum (i.e. union) of two ordinals.
     (Contributed by NM, 28-Nov-2003.) $)
  ordssun $p |- ( ( Ord B /\ Ord C ) ->
               ( A C_ ( B u. C ) <-> ( A C_ B \/ A C_ C ) ) ) $=
    ( word wa cun wss wo wi ordtri2or2 wceq wb ssequn1 sseq2 olc syl6bi ssequn2
    sylbi orc jaoi syl ssun impbid1 ) BDCDEZABCFZGZABGZACGZHZUDBCGZCBGZHUFUIIZB
    CJUJULUKUJUFUHUIUJUECKUFUHLBCMUECANRUHUGOPUKUFUGUIUKUEBKUFUGLCBQUEBANRUGUHS
    PTUAABCUBUC $.

  $( The maximum (i.e. union) of two ordinals is either one or the other.
     Similar to Exercise 14 of [TakeutiZaring] p. 40.  (Contributed by NM,
     28-Nov-2003.) $)
  ordequn $p |- ( ( Ord B /\ Ord C ) ->
               ( A = ( B u. C ) -> ( A = B \/ A = C ) ) ) $=
    ( word wa wss wo cun wceq wi ordtri2or2 wb ssequn1 eqeq2 olc syl6bi ssequn2
    sylbi orc jaoi syl ) BDCDEBCFZCBFZGABCHZIZABIZACIZGZJZBCKUBUIUCUBUEUGUHUBUD
    CIUEUGLBCMUDCANRUGUFOPUCUEUFUHUCUDBIUEUFLCBQUDBANRUFUGSPTUA $.

  $( The maximum (i.e. union) of two ordinals is ordinal.  Exercise 12 of
     [TakeutiZaring] p. 40.  (Contributed by NM, 28-Nov-2003.) $)
  ordun $p |- ( ( Ord A /\ Ord B ) -> Ord ( A u. B ) ) $=
    ( word wa cun wceq wo eqid ordequn mpi ordeq biimprcd jaao mpd ) ACZBCZDZAB
    EZAFZRBFZGZRCZQRRFUARHRABIJOSUBPTSUBORAKLTUBPRBKLMN $.

  ${
    $d x A $.  $d x B $.
    $( A subclass relationship for union and successor of ordinal classes.
       (Contributed by NM, 28-Nov-2003.) $)
    ordunisssuc $p |- ( ( A C_ On /\ Ord B ) ->
                      ( U. A C_ B <-> A C_ suc B ) ) $=
      ( vx con0 word wa cv wral csuc wcel cuni wb ssel2 ordsssuc sylan ralbidva
      wss an32s unissb dfss3 3bitr4g ) ADQZBEZFZCGZBQZCAHUEBIZJZCAHAKBQAUGQUDUF
      UHCAUBUEAJZUCUFUHLZUBUIFUEDJUCUJADUEMUEBNORPCABSCAUGTUA $.
  $}

  $( The successor operation behaves like a one-to-one function.  Compare
     Exercise 16 of [Enderton] p. 194.  (Contributed by NM, 3-Sep-2003.) $)
  suc11 $p |- ( ( A e. On /\ B e. On ) -> ( suc A = suc B <-> A = B ) ) $=
    ( con0 wcel wa csuc wceq wn wo wi word eloni ordn2lp wss sucssel elsuci ord
    syl5 com12 syl9 ianor sylib syl adantr eqimss eqimss2 eqcom syl6ib jaao mpd
    suceq impbid1 ) ACDZBCDZEZAFZBFZGZABGZUOABDZHZBADZHZIZURUSJZUMVDUNUMAKZVDAL
    VFUTVBEHVDABMUTVBUAUBUCUDUMVAVEUNVCUMURAUQDZVAUSURUPUQNUMVGUPUQUEAUQCORVGVA
    USVGUTUSABPQSTUNURBUPDZVCUSURUQUPNUNVHUQUPUFBUPCORVCVHBAGZUSVHVCVIVHVBVIBAP
    QSBAUGUHTUIUJABUKUL $.

  ${
    on.1 $e |- A e. On $.
    $( An ordinal number is an ordinal class.  (Contributed by NM,
       11-Jun-1994.) $)
    onordi $p |- Ord A $=
      ( con0 wcel word eloni ax-mp ) ACDAEBAFG $.

    $( An ordinal number is a transitive class.  (Contributed by NM,
       11-Jun-1994.) $)
    ontrci $p |- Tr A $=
      ( word wtr onordi ordtr ax-mp ) ACADABEAFG $.

    $( An ordinal number is not a member of itself.  Theorem 7M(c) of
       [Enderton] p. 192.  (Contributed by NM, 11-Jun-1994.) $)
    onirri $p |- -. A e. A $=
      ( word wcel wn onordi ordirr ax-mp ) ACAADEABFAGH $.

    $( A member of an ordinal number is an ordinal number.  Theorem 7M(a) of
       [Enderton] p. 192.  (Contributed by NM, 11-Jun-1994.) $)
    oneli $p |- ( B e. A -> B e. On ) $=
      ( con0 wcel onelon mpan ) ADEBAEBDECABFG $.

    $( A member of an ordinal number is a subset of it.  (Contributed by NM,
       11-Aug-1994.) $)
    onelssi $p |- ( B e. A -> B C_ A ) $=
      ( con0 wcel wss wi onelss ax-mp ) ADEBAEBAFGCABHI $.

    $( An ordering law for ordinal numbers.  (Contributed by NM,
       13-Jun-1994.) $)
    onssneli $p |- ( A C_ B -> -. B e. A ) $=
      ( wcel wss con0 word wn oneli eloni ordirr 3syl ssel com12 mtod con2i ) B
      ADZABEZQRBBDZQBFDBGSHABCIBJBKLRQSABBMNOP $.

    $( An ordering law for ordinal numbers.  (Contributed by NM,
       13-Jun-1994.) $)
    onssnel2i $p |- ( B C_ A -> -. A e. B ) $=
      ( wss wcel onirri ssel mtoi ) BADABEAAEACFBAAGH $.

    $( An element of an ordinal number equals the intersection with it.
       (Contributed by NM, 11-Jun-1994.) $)
    onelini $p |- ( B e. A -> B = ( B i^i A ) ) $=
      ( wcel wss cin wceq onelssi dfss sylib ) BADBAEBBAFGABCHBAIJ $.

    $( An ordinal number equals its union with any element.  (Contributed by
       NM, 13-Jun-1994.) $)
    oneluni $p |- ( B e. A -> ( A u. B ) = A ) $=
      ( wcel wss cun wceq onelssi ssequn2 sylib ) BADBAEABFAGABCHBAIJ $.

    $( An ordinal number is equal to the union of its successor.  (Contributed
       by NM, 12-Jun-1994.) $)
    onunisuci $p |- U. suc A = A $=
      ( wtr csuc cuni wceq ontrci con0 elexi unisuc mpbi ) ACADEAFABGAAHBIJK $.

    ${
      on.2 $e |- B e. On $.
      $( Subset is equivalent to membership or equality for ordinal numbers.
         (Contributed by NM, 15-Sep-1995.) $)
      onsseli $p |- ( A C_ B <-> ( A e. B \/ A = B ) ) $=
        ( con0 wcel wss wceq wo wb onsseleq mp2an ) AEFBEFABGABFABHIJCDABKL $.

      $( The union of two ordinal numbers is an ordinal number.  (Contributed
         by NM, 13-Jun-1994.) $)
      onun2i $p |- ( A u. B ) e. On $=
        ( wcel wss wo con0 word onordi ordtri2or mp2an oneluni syl6eqel ssequn1
        cun wceq eleq1 mpbiri sylbi jaoi ax-mp ) BAEZABFZGZABPZHEZBIAIUEBDJACJB
        AKLUCUGUDUCUFAHABCMCNUDUFBQZUGABOUHUGBHEDUFBHRSTUAUB $.
    $}
  $}

  $( An ordinal equal to its own union is either zero or a limit ordinal.
     (Contributed by NM, 1-Oct-2003.) $)
  unizlim $p |- ( Ord A -> ( A = U. A <-> ( A = (/) \/ Lim A ) ) ) $=
    ( word cuni wceq c0 wlim wo wa wn wne df-ne w3a df-lim biimpri 3exp syl5bir
    wi com23 imp orrd ex uni0 eqcomi id unieq 3eqtr4a limuni jaoi impbid1 ) ABZ
    AACZDZAEDZAFZGZUJULUOUJULHUMUNUJULUMIZUNQUJUPULUNUPAEJZUJULUNQAEKUJUQULUNUN
    UJUQULLAMNOPRSTUAUMULUNUMEECZAUKUREUBUCUMUDAEUEUFAUGUHUI $.

  $( An ordinal number either equals zero or contains zero.  (Contributed by
     NM, 1-Jun-2004.) $)
  on0eqel $p |- ( A e. On -> ( A = (/) \/ (/) e. A ) ) $=
    ( con0 wcel c0 wceq wo wss 0ss 0elon onsseleq mpan mpbii eqcom orbi2i orcom
    wb bitri sylib ) ABCZDACZDAEZFZADEZTFZSDAGZUBAHDBCSUEUBPIDAJKLUBTUCFUDUAUCT
    DAMNTUCOQR $.

  $( The singleton of the singleton of the empty set is not an ordinal (nor a
     natural number by ~ omsson ).  It can be used to represent an ""undefined""
     value for a partial operation on natural or ordinal numbers.  See also
     ~ onxpdisj .  (Contributed by NM, 21-May-2004.)  (Proof shortened by
     Andrew Salmon, 12-Aug-2011.) $)
  snsn0non $p |- -. { { (/) } } e. On $=
    ( c0 csn con0 wcel wceq wo wn p0ex snid n0i ax-mp eqcom mtbir elsnc pm3.2ni
    0ex on0eqel mto ) ABZBZCDTAEZATDZFUAUBSTDUAGSHITSJKUBASEZUCSAEZASDUDGAPISAJ
    KASLMASPNMOTQR $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                              Relations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Introduce new constant symbols. $)
  $c X. $. $( Times symbol (Cartesian product symbol) (read: 'cross') $)
  $c `' $. $( Small elevated smiley (converse operation) $)
  $c dom $. $( Domain $)
  $c ran $. $( Range $)
  $c |` $. $( Right hook (restriction symbol) $)
  $c "" $. $( Left quote (image symbol) $)
  $c o. $. $( Small circle (composition symbol) $)
  $c Rel $. $( Relation predicate $)

  $( Extend the definition of a class to include the Cartesian product. $)
  cxp $a class ( A X. B ) $.

  $( Extend the definition of a class to include the converse of a class. $)
  ccnv $a class `' A $.

  $( Extend the definition of a class to include the domain of a class. $)
  cdm $a class dom A $.

  $( Extend the definition of a class to include the range of a class. $)
  crn $a class ran A $.

  $( Extend the definition of a class to include the restriction of a class.
     (Read:  The restriction of ` A ` to ` B ` .) $)
  cres $a class ( A |` B ) $.

  $( Extend the definition of a class to include the image of a class.  (Read:
     The image of ` B ` under ` A ` .) $)
  cima $a class ( A "" B ) $.

  $( Extend the definition of a class to include the composition of two
     classes.  (Read:  The composition of ` A ` and ` B ` .) $)
  ccom $a class ( A o. B ) $.

  $( Extend the definition of a wff to include the relation predicate.  (Read:
     ` A ` is a relation.) $)
  wrel $a wff Rel A $.

  ${
    $d x y z A $.  $d x y z B $.
    $( Define the Cartesian product of two classes.  This is also sometimes
       called the ""cross product"" but that term also has other meanings; we
       intentionally choose a less ambiguous term.  Definition 9.11 of [Quine]
       p. 64.  For example, ` ( { 1 , 5 } X. { 2 , 7 } ) = `
       ` ( { <. 1 , 2 >. , <. 1 , 7 >. } u. { <. 5 , 2 >. , <. 5 , 7 >. } ) `
       ( ~ ex-xp ).  Another example is that the set of rational numbers are
       defined in ~ df-q using the Cartesian product ` ( ZZ X. NN ) ` ; the
       left- and right-hand sides of the Cartesian product represent the top
       (integer) and bottom (natural) numbers of a fraction.  (Contributed by
       NM, 4-Jul-1994.) $)
    df-xp $a |- ( A X. B ) = { <. x , y >. | ( x e. A /\ y e. B ) } $.

    $( Define the relation predicate.  Definition 6.4(1) of [TakeutiZaring]
       p. 23.  For alternate definitions, see ~ dfrel2 and ~ dfrel3 .
       (Contributed by NM, 1-Aug-1994.) $)
    df-rel $a |- ( Rel A <-> A C_ ( _V X. _V ) ) $.

    $( Define the converse of a class.  Definition 9.12 of [Quine] p. 64.  The
       converse of a binary relation swaps its arguments, i.e., if ` A e. _V `
       and ` B e. _V ` then ` ( A ``' R B <-> B R A ) ` , as proven in ~ brcnv
       (see ~ df-br and ~ df-rel for more on relations).  For example,
       ` ``' { <. 2 , 6 >. , <. 3 , 9 >. } = { <. 6 , 2 >. , <. 9 , 3 >. } `
       ( ~ ex-cnv ).  We use Quine's breve accent (smile) notation.  Like
       Quine, we use it as a prefix, which eliminates the need for
       parentheses.  Many authors use the postfix superscript ""to the minus
       one.""  ""Converse"" is Quine's terminology; some authors call it
       ""inverse,"" especially when the argument is a function.  (Contributed by
       NM, 4-Jul-1994.) $)
    df-cnv $a |- `' A = { <. x , y >. | y A x } $.

    $( Define the composition of two classes.  Definition 6.6(3) of
       [TakeutiZaring] p. 24.  For example, ` ( ( exp o. cos ) `` 0 ) = _e `
       ( ~ ex-co ) because ` ( cos `` 0 ) = 1 ` (see ~ cos0 ) and
       ` ( exp `` 1 ) = _e ` (see ~ df-e ).  Note that Definition 7 of [Suppes]
       p. 63 reverses ` A ` and ` B ` , uses ` /. ` instead of ` o. ` , and
       calls the operation ""relative product.""  (Contributed by NM,
       4-Jul-1994.) $)
    df-co $a |- ( A o. B ) = { <. x , y >. | E. z ( x B z /\ z A y ) } $.

    $( Define the domain of a class.  Definition 3 of [Suppes] p. 59.  For
       example, ` F = { <. 2 , 6 >. , <. 3 , 9 >. } -> dom F = { 2 , 3 } `
       ( ~ ex-dm ).  Another example is the domain of the complex arctangent,
       ` ( A e. dom arctan <-> ( A e. CC /\ A =/= -u _i /\ A =/= _i ) ) ` (for
       proof see ~ atandm ).  Contrast with range (defined in ~ df-rn ).  For
       alternate definitions see ~ dfdm2 , ~ dfdm3 , and ~ dfdm4 .  The
       notation "" ` dom ` "" is used by Enderton; other authors sometimes use
       script D. (Contributed by NM, 1-Aug-1994.) $)
    df-dm $a |- dom A = { x | E. y x A y } $.

    $( Define the range of a class.  For example,
       ` F = { <. 2 , 6 >. , <. 3 , 9 >. } -> ran F = { 6 , 9 } ` ( ~ ex-rn ).
       Contrast with domain (defined in ~ df-dm ).  For alternate definitions,
       see ~ dfrn2 , ~ dfrn3 , and ~ dfrn4 .  The notation "" ` ran ` "" is used
       by Enderton; other authors sometimes use script R or script W.
       (Contributed by NM, 1-Aug-1994.) $)
    df-rn $a |- ran A = dom `' A $.

    $( Define the restriction of a class.  Definition 6.6(1) of [TakeutiZaring]
       p. 24.  For example, the expression ` ( exp |`` RR ) ` (used in
       ~ reeff1 ) means ""the exponential function e to the x, but the exponent
       x must be in the reals"" ( ~ df-ef defines the exponential function,
       which normally allows the exponent to be a complex number).  Another
       example is that ` ( F = { <. 2 , 6 >. , <. 3 , 9 >. } `
       ` /\ B = { 1 , 2 } ) -> ( F |`` B ) = { <. 2 , 6 >. } ` ( ~ ex-res ).
       (Contributed by NM, 2-Aug-1994.) $)
    df-res $a |- ( A |` B ) = ( A i^i ( B X. _V ) ) $.

    $( Define the image of a class (as restricted by another class).
       Definition 6.6(2) of [TakeutiZaring] p. 24.  For example,
       ` ( F = { <. 2 , 6 >. , <. 3 , 9 >. } /\ B = { 1 , 2 } ) `
       ` -> ( F "" B ) = { 6 } ` ( ~ ex-ima ).  Contrast with restriction
       ( ~ df-res ) and range ( ~ df-rn ).  For an alternate definition, see
       ~ dfima2 .  (Contributed by NM, 2-Aug-1994.) $)
    df-ima $a |- ( A "" B ) = ran ( A |` B ) $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.
    $( Equality theorem for Cartesian product.  (Contributed by NM,
       4-Jul-1994.) $)
    xpeq1 $p |- ( A = B -> ( A X. C ) = ( B X. C ) ) $=
      ( vx vy wceq cv wcel wa copab cxp eleq2 anbi1d opabbidv df-xp 3eqtr4g ) A
      BFZDGZAHZEGCHZIZDEJRBHZTIZDEJACKBCKQUAUCDEQSUBTABRLMNDEACODEBCOP $.

    $( Equality theorem for Cartesian product.  (Contributed by NM,
       5-Jul-1994.) $)
    xpeq2 $p |- ( A = B -> ( C X. A ) = ( C X. B ) ) $=
      ( vx vy wceq cv wcel wa copab cxp eleq2 anbi2d opabbidv df-xp 3eqtr4g ) A
      BFZDGCHZEGZAHZIZDEJRSBHZIZDEJCAKCBKQUAUCDEQTUBRABSLMNDECAODECBOP $.

    $( Membership in a Cartesian product.  Uses fewer axioms than ~ elxp .
       (Contributed by NM, 4-Jul-1994.) $)
    elxpi $p |- ( A e. ( B X. C ) -> E. x E. y ( A = <. x , y >. /\
               ( x e. B /\ y e. C ) ) ) $=
      ( vz cv cop wceq wcel wa wex cab cxp eqeq1 anbi1d 2exbidv elabg ibi copab
      df-xp df-opab eqtri eleq2s ) CAGZBGZHZIZUEDJUFEJKZKZBLALZCFGZUGIZUIKZBLAL
      ZFMZDENZCUPJUKUOUKFCUPULCIZUNUJABURUMUHUIULCUGOPQRSUQUIABTUPABDEUAUIABFUB
      UCUD $.

    $( Membership in a Cartesian product.  (Contributed by NM, 4-Jul-1994.) $)
    elxp $p |- ( A e. ( B X. C ) <-> E. x E. y ( A = <. x , y >. /\
               ( x e. B /\ y e. C ) ) ) $=
      ( cxp wcel cv wa copab cop wceq wex df-xp eleq2i elopab bitri ) CDEFZGCAH
      ZDGBHZEGIZABJZGCSTKLUAIBMAMRUBCABDENOUAABCPQ $.

    $( Membership in a Cartesian product.  (Contributed by NM, 23-Feb-2004.) $)
    elxp2 $p |- ( A e. ( B X. C ) <-> E. x e. B E. y e. C A = <. x , y >. ) $=
      ( cv wcel cop wceq wrex wa wex cxp df-rex r19.42v an13 exbii 3bitr3i elxp
      3bitr4ri ) AFZDGZCUABFZHIZBEJZKZALUDUBUCEGZKKZBLZALUEADJCDEMGUFUIAUBUDKZB
      EJUGUJKZBLUFUIUJBENUBUDBEOUKUHBUGUBUDPQRQUEADNABCDEST $.
  $}

  $( Equality theorem for Cartesian product.  (Contributed by FL,
     31-Aug-2009.) $)
  xpeq12 $p |- ( ( A = B /\ C = D ) -> ( A X. C ) = ( B X. D ) ) $=
    ( wceq cxp xpeq1 xpeq2 sylan9eq ) ABECDEACFBCFBDFABCGCDBHI $.

  ${
    xpeq1i.1 $e |- A = B $.
    $( Equality inference for Cartesian product.  (Contributed by NM,
       21-Dec-2008.) $)
    xpeq1i $p |- ( A X. C ) = ( B X. C ) $=
      ( wceq cxp xpeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for Cartesian product.  (Contributed by NM,
       21-Dec-2008.) $)
    xpeq2i $p |- ( C X. A ) = ( C X. B ) $=
      ( wceq cxp xpeq2 ax-mp ) ABECAFCBFEDABCGH $.
  $}

  ${
    xpeq12i.1 $e |- A = B $.
    xpeq12i.2 $e |- C = D $.
    $( Equality inference for Cartesian product.  (Contributed by FL,
       31-Aug-2009.) $)
    xpeq12i $p |- ( A X. C ) = ( B X. D ) $=
      ( wceq cxp xpeq12 mp2an ) ABGCDGACHBDHGEFABCDIJ $.
  $}

  ${
    xpeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for Cartesian product.  (Contributed by Jeff Madsen,
       17-Jun-2010.) $)
    xpeq1d $p |- ( ph -> ( A X. C ) = ( B X. C ) ) $=
      ( wceq cxp xpeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for Cartesian product.  (Contributed by Jeff Madsen,
       17-Jun-2010.) $)
    xpeq2d $p |- ( ph -> ( C X. A ) = ( C X. B ) ) $=
      ( wceq cxp xpeq2 syl ) ABCFDBGDCGFEBCDHI $.

    ${
      xpeq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for Cartesian product.  (Contributed by NM,
         8-Dec-2013.) $)
      xpeq12d $p |- ( ph -> ( A X. C ) = ( B X. D ) ) $=
        ( wceq cxp xpeq12 syl2anc ) ABCHDEHBDICEIHFGBCDEJK $.
    $}

    $( Equality deduction for a Cartesian square, see Wikipedia ""Cartesian
       product"",
~ https://en.wikipedia.org/wiki/Cartesian_product#n-ary_Cartesian_power .
       (Contributed by AV, 13-Jan-2020.) $)
    sqxpeqd $p |- ( ph -> ( A X. A ) = ( B X. B ) ) $=
      ( xpeq12d ) ABCBCDDE $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d x y z $.
    nfxp.1 $e |- F/_ x A $.
    nfxp.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for Cartesian product.  (Contributed
       by NM, 15-Sep-2003.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfxp $p |- F/_ x ( A X. B ) $=
      ( vy vz cxp cv wcel wa copab df-xp nfcri nfan nfopab nfcxfr ) ABCHFIBJZGI
      CJZKZFGLFGBCMTFGARSAAFBDNAGCENOPQ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( The empty set is not a member of a Cartesian product.  (Contributed by
       NM, 2-May-1996.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    0nelxp $p |- -. (/) e. ( A X. B ) $=
      ( vx vy c0 cxp wcel cv cop wceq wa wex wne wn opnzi simpl eqcomd necon3ai
      vex nex ax-mp elxp mtbir ) EABFGECHZDHZIZJZUDAGUEBGKZKZDLZCLUJCUIDUFEMUIN
      UDUECSDSOUIUFEUIEUFUGUHPQRUATTCDEABUBUC $.

    $( A member of a Cartesian product (ordered pair) doesn't contain the empty
       set.  (Contributed by NM, 15-Dec-2008.) $)
    0nelelxp $p |- ( C e. ( A X. B ) -> -. (/) e. C ) $=
      ( vx vy cxp wcel cv cop wceq wa wex c0 wn elxp 0nelop simpl eleq2d mtbiri
      exlimivv sylbi ) CABFGCDHZEHZIZJZUBAGUCBGKZKZELDLMCGZNZDECABOUGUIDEUGUHMU
      DGUBUCPUGCUDMUEUFQRSTUA $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z D $.
    $( Ordered pair membership in a Cartesian product.  (Contributed by NM,
       15-Nov-1994.)  (Proof shortened by Andrew Salmon, 12-Aug-2011.)
       (Revised by Mario Carneiro, 26-Apr-2015.) $)
    opelxp $p |- ( <. A , B >. e. ( C X. D ) <-> ( A e. C /\ B e. D ) ) $=
      ( vx vy cop cxp wcel cv wceq wrex wa elxp2 wb opth2 eleq1 bi2anan9 eqeq2d
      vex sylbi biimprcd rexlimivv eqid opeq1 opeq2 rspc2ev mp3an3 impbii bitri
      ) ABGZCDHIUKEJZFJZGZKZFDLECLZACIZBDIZMZEFUKCDNUPUSUOUSEFCDUOUSULCIZUMDIZM
      ZUOAULKZBUMKZMUSVBOABULUMETFTPVCUQUTVDURVAAULCQBUMDQRUAUBUCUQURUKUKKZUPUK
      UDUOVEUKAUMGZKEFABCDULAKUNVFUKULAUMUESUMBKVFUKUKUMBAUFSUGUHUIUJ $.

    $( Binary relation on a Cartesian product.  (Contributed by NM,
       22-Apr-2004.) $)
    brxp $p |- ( A ( C X. D ) B <-> ( A e. C /\ B e. D ) ) $=
      ( cxp wbr cop wcel wa df-br opelxp bitri ) ABCDEZFABGMHACHBDHIABMJABCDKL
      $.
  $}

  $( Ordered pair membership in a Cartesian product (implication).
     (Contributed by NM, 28-May-1995.) $)
  opelxpi $p |- ( ( A e. C /\ B e. D ) -> <. A , B >. e. ( C X. D ) ) $=
    ( cop cxp wcel wa opelxp biimpri ) ABECDFGACGBDGHABCDIJ $.

  $( The first member of an ordered pair of classes in a Cartesian product
     belongs to first Cartesian product argument.  (Contributed by NM,
     28-May-2008.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
  opelxp1 $p |- ( <. A , B >. e. ( C X. D ) -> A e. C ) $=
    ( cop cxp wcel opelxp simplbi ) ABECDFGACGBDGABCDHI $.

  $( The second member of an ordered pair of classes in a Cartesian product
     belongs to second Cartesian product argument.  (Contributed by Mario
     Carneiro, 26-Apr-2015.) $)
  opelxp2 $p |- ( <. A , B >. e. ( C X. D ) -> B e. D ) $=
    ( cop cxp wcel opelxp simprbi ) ABECDFGACGBDGABCDHI $.

  $( The first member of an ordered triple of classes in a Cartesian product
     belongs to first Cartesian product argument.  (Contributed by NM,
     28-May-2008.) $)
  otelxp1 $p |- ( <. <. A , B >. , C >. e. ( ( R X. S ) X. T )
          -> A e. R ) $=
    ( cop cxp wcel opelxp1 syl ) ABGZCGDEHZFHILMIADILCMFJABDEJK $.

  $( An ordered triple is an element of a doubled Cartesian product.
     (Contributed by Alexander van der Vekens, 26-Feb-2018.) $)
  otel3xp $p |- ( ( T = <. A , B , C >. /\ ( A e. X /\ B e. Y /\ C e. Z ) )
                         -> T e. ( ( X X. Y ) X. Z ) ) $=
    ( cotp wceq wcel w3a cxp cop df-ot wa 3simpa opelxp sylibr simp3 sylanbrc
    syl5eqel eleq1 syl5ibr imp ) DABCHZIZAEJZBFJZCGJZKZDEFLZGLZJZUJUMUFUEULJUJU
    EABMZCMZULABCNUJUNUKJZUIUOULJUJUGUHOUPUGUHUIPABEFQRUGUHUISUNCUKGQTUADUEULUB
    UCUD $.

  ${
    $d x y z A $.  $d x y z B $.  $d y z ph $.  $d x ps $.
    rabxp.1 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Membership in a class builder restricted to a Cartesian product.
       (Contributed by NM, 20-Feb-2014.) $)
    rabxp $p |- { x e. ( A X. B ) | ph }
             = { <. y , z >. | ( y e. A /\ z e. B /\ ps ) } $=
      ( cv cxp wcel wa cab cop wceq w3a wex crab copab elxp anbi1i anass anbi2d
      19.41vv df-3an syl6bbr pm5.32i bitri 2exbii 3bitr2i abbii df-opab 3eqtr4i
      df-rab ) CIZFGJZKZALZCMUODIZEIZNOZUSFKZUTGKZBPZLZEQDQZCMACUPRVDDESURVFCUR
      VAVBVCLZLZEQDQZALVHALZEQDQVFUQVIADEUOFGTUAVHADEUDVJVEDEVJVAVGALZLVEVAVGAU
      BVAVKVDVAVKVGBLVDVAABVGHUCVBVCBUEUFUGUHUIUJUKACUPUNVDDECULUM $.
  $}

  $( A true binary relation on a relation implies the arguments are sets.
     (This is a property of our ordered pair definition.)  (Contributed by
     Mario Carneiro, 26-Apr-2015.) $)
  brrelex12 $p |- ( ( Rel R /\ A R B ) -> ( A e. _V /\ B e. _V ) ) $=
    ( wrel wbr wa cvv cxp wcel wss df-rel biimpi ssbrd imp brxp sylib ) CDZABCE
    ZFABGGHZEZAGIBGIFQRTQCSABQCSJCKLMNABGGOP $.

  $( A true binary relation on a relation implies the first argument is a set.
     (This is a property of our ordered pair definition.)  (Contributed by NM,
     18-May-2004.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
  brrelex $p |- ( ( Rel R /\ A R B ) -> A e. _V ) $=
    ( wrel wbr wa cvv wcel brrelex12 simpld ) CDABCEFAGHBGHABCIJ $.

  $( A true binary relation on a relation implies the second argument is a
     set.  (This is a property of our ordered pair definition.)  (Contributed
     by Mario Carneiro, 26-Apr-2015.) $)
  brrelex2 $p |- ( ( Rel R /\ A R B ) -> B e. _V ) $=
    ( wrel wbr wa cvv wcel brrelex12 simprd ) CDABCEFAGHBGHABCIJ $.

  ${
    brrelexi.1 $e |- Rel R $.
    $( The first argument of a binary relation exists.  (An artifact of our
       ordered pair definition.)  (Contributed by NM, 4-Jun-1998.) $)
    brrelexi $p |- ( A R B -> A e. _V ) $=
      ( wrel wbr cvv wcel brrelex mpan ) CEABCFAGHDABCIJ $.

    $( The second argument of a binary relation exists.  (An artifact of our
       ordered pair definition.)  (Contributed by Mario Carneiro,
       26-Apr-2015.) $)
    brrelex2i $p |- ( A R B -> B e. _V ) $=
      ( wrel wbr cvv wcel brrelex2 mpan ) CEABCFBGHDABCIJ $.
  $}

  ${
    nprrel.1 $e |- Rel R $.
    nprrel.2 $e |- -. A e. _V $.
    $( No proper class is related to anything via any relation.  (Contributed
       by Roy F. Longton, 30-Jul-2005.) $)
    nprrel $p |- -. A R B $=
      ( wbr cvv wcel brrelexi mto ) ABCFAGHEABCDIJ $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Representation of a constant function using the mapping operation.
       (Note that ` x ` cannot appear free in ` B ` .)  (Contributed by NM,
       12-Oct-1999.)  (Revised by Mario Carneiro, 16-Nov-2013.) $)
    fconstmpt $p |- ( A X. { B } ) = ( x e. A |-> B ) $=
      ( vy cv wcel csn wa copab wceq cxp cmpt elsn anbi2i opabbii df-xp 3eqtr4i
      df-mpt ) AEBFZDEZCGZFZHZADISTCJZHZADIBUAKABCLUCUEADUBUDSDCMNOADBUAPADBCRQ
      $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y z C $.  $d x y z R $.
    vtoclr.1 $e |- Rel R $.
    vtoclr.2 $e |- ( ( x R y /\ y R z ) -> x R z ) $.
    $( Variable to class conversion of transitive relation.  (Contributed by
       NM, 9-Jun-1998.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    vtoclr $p |- ( ( A R B /\ B R C ) -> A R C ) $=
      ( wbr wa wi cvv wcel brrelex2i cv wceq breq1 imbi12d breq2 anbi1d anbi12d
      brrelexi jca imbi2d imbi1d anbi2d vtoclg vtocl2g syl2im imp pm2.43i ) DEG
      JZEFGJZKZDFGJZUMUNUOUPLZUMDMNZEMNZKUNFMNZUQUMURUSDEGHUCDEGHOUDEFGHOUTAPZB
      PZGJZVBFGJZKZVAFGJZLZLUTDVBGJZVDKZUPLZLUTUQLABDEMMVADQZVGVJUTVKVEVIVFUPVK
      VCVHVDVADVBGRUAVADFGRSUEVBEQZVJUQUTVLVIUOUPVLVHUMVDUNVBEDGTVBEFGRUBUFUEVC
      VBCPZGJZKZVAVMGJZLVGCFMVMFQZVOVEVPVFVQVNVDVCVMFVBGTUGVMFVAGTSIUHUIUJUKUL
      $.
  $}

  $( Ordered pair membership in the universal class of ordered pairs.
     (Contributed by Mario Carneiro, 3-May-2015.) $)
  opelvvg $p |- ( ( A e. V /\ B e. W ) -> <. A , B >. e. ( _V X. _V ) ) $=
    ( wcel cvv cop cxp elex opelxpi syl2an ) ACEAFEBFEABGFFHEBDEACIBDIABFFJK $.

  ${
    opelvv.1 $e |- A e. _V $.
    opelvv.2 $e |- B e. _V $.
    $( Ordered pair membership in the universal class of ordered pairs.
       (Contributed by NM, 22-Aug-2013.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    opelvv $p |- <. A , B >. e. ( _V X. _V ) $=
      ( cvv wcel cop cxp opelxpi mp2an ) AEFBEFABGEEHFCDABEEIJ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x D $.
    $( Justification theorem for an ordered pair definition that works for any
       classes, including proper classes.  This is a possible definition
       implied by the footnote in [Jech] p. 78, which says, ""The sophisticated
       reader will not object to our use of a pair of classes.""  (Contributed
       by NM, 28-Sep-2003.) $)
    opthprc $p |- ( ( ( A X. { (/) } ) u. ( B X. { { (/) } } ) ) =
                    ( ( C X. { (/) } ) u. ( D X. { { (/) } } ) )
                  <-> ( A = C /\ B = D ) ) $=
      ( vx c0 csn cxp cun wceq wa wcel wo opelxp mpbiran2 bianfi bitr4i orbi12i
      elun 3bitr4ri cop eleq2 0ex snid 0nep0 elsnc nemtbir biorfi 3bitr4g eqrdv
      cv p0ex eqcom bitri wn wb biorf ax-mp jca xpeq1 uneq12 syl2an impbii ) AF
      GZHZBVDGZHZIZCVDHZDVFHZIZJZACJZBDJZKVLVMVNVLEACVLEUKZFUAZVHLZVPVKLZVOALZV
      OCLZVHVKVPUBVPVELZVPVGLZMVSFVFLZMVQVSWAVSWBWCWAVSFVDLZFUCUDZVOFAVDNOWBVOB
      LZWCKWCVOFBVFNWCWFWCFVDUEFVDUCUFUGZPQRVPVEVGSWCVSWGUHTVPVILZVPVJLZMVTWCMV
      RVTWHVTWIWCWHVTWDWEVOFCVDNOWIVODLZWCKWCVOFDVFNWCWJWGPQRVPVIVJSWCVTWGUHTUI
      UJVLEBDVLVOVDUAZVHLZWKVKLZWFWJVHVKWKUBWKVELZWKVGLZMVDVDLZWFMZWLWFWNWPWOWF
      WNVSWPKWPVOVDAVDNWPVSWPFVDUEWPVDFJFVDJVDFULUFVDFUMUNUGZPQWOWFVDVFLZVDULUD
      ZVOVDBVFNORWKVEVGSWPUOZWFWQUPWRWPWFUQURTWKVILZWKVJLZMWPWJMZWMWJXBWPXCWJXB
      VTWPKWPVOVDCVDNWPVTWRPQXCWJWSWTVOVDDVFNORWKVIVJSXAWJXDUPWRWPWJUQURTUIUJUS
      VMVEVIJVGVJJVLVNACVDUTBDVFUTVEVIVGVJVAVBVC $.
  $}

  ${
    brel.1 $e |- R C_ ( C X. D ) $.
    $( Two things in a binary relation belong to the relation's domain.
       (Contributed by NM, 17-May-1996.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    brel $p |- ( A R B -> ( A e. C /\ B e. D ) ) $=
      ( wbr cxp wcel wa ssbri brxp sylib ) ABEGABCDHZGACIBDIJENABFKABCDLM $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y ps $.
    brab2a.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    brab2a.2 $e |- R = { <. x , y >. | ( ( x e. C /\ y e. D ) /\ ph ) } $.
    $( Ordered pair membership in an ordered pair class abstraction.
       (Contributed by Mario Carneiro, 9-Nov-2015.) $)
    brab2a $p |- ( A R B <-> ( ( A e. C /\ B e. D ) /\ ps ) ) $=
      ( wbr wcel wa cv copab cxp simpl ssopab2i df-xp 3sstr4i brel df-br eleq2i
      cop bitri opelopab2a syl5bb biadan2 ) EFILZEGMFHMNZBEFGHICOGMDOHMNZANZCDP
      ZULCDPIGHQUMULCDULARSKCDGHTUAUBUJEFUEZUNMZUKBUJUOIMUPEFIUCIUNUOKUDUFABCDE
      FGHJUGUHUI $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Membership in a Cartesian product.  (Contributed by NM, 5-Mar-1995.) $)
    elxp3 $p |- ( A e. ( B X. C ) <->
            E. x E. y ( <. x , y >. = A /\ <. x , y >. e. ( B X. C ) ) ) $=
      ( cxp wcel cv cop wceq wa wex elxp eqcom opelxp anbi12i 2exbii bitr4i ) C
      DEFZGCAHZBHZIZJZTDGUAEGKZKZBLALUBCJZUBSGZKZBLALABCDEMUHUEABUFUCUGUDUBCNTU
      ADEOPQR $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d y z C $.  $d x y z $.
    $( Membership in a union of Cartesian products.  (Contributed by Mario
       Carneiro, 29-Dec-2014.)  (Revised by Mario Carneiro, 1-Jan-2017.) $)
    opeliunxp $p |- ( <. x , C >. e. U_ x e. A ( { x } X. B ) <->
                     ( x e. A /\ C e. B ) ) $=
      ( vy vz cv cop csn cxp ciun wcel wrex wa wceq eleq2d anbi12d bitri 3bitri
      wex cab wsb csb df-iun eleq2i opex nfv nfs1v nfcv nfcsb1v nfxp nfcri nfan
      df-rex sbequ12 sneq csbeq1a xpeq12d cbvex eleq1 anbi2d exbidv syl5bb elab
      opelxp anbi2i an12 elsn equcom anbi1i vex sbequ12r equcoms eqcomd ceqsexv
      exbii ) AGZDHZABVQIZCJZKZLVREGZVTLZABMZEUAZLVQBLZAFUBZVRFGZIZAWHCUCZJZLZN
      ZFTZWFDCLZNZWAWEVRAEBVTUDUEWDWNEVRVQDUFWDWGWBWKLZNZFTZWBVROZWNWDWFWCNZATW
      SWCABUNXAWRAFXAFUGWGWQAWFAFUHAEWKAWIWJAWIUIAWHCUJUKULUMVQWHOZWFWGWCWQWFAF
      UOXBVTWKWBXBVSWICWJVQWHUPAWHCUQZURPQUSRWTWRWMFWTWQWLWGWBVRWKUTVAVBVCVDWNW
      HVQOZWGDWJLZNZNZFTWPWMXGFWMWGVQWILZXENZNXHXFNXGWLXIWGVQDWIWJVEVFWGXHXEVGX
      HXDXFXHXBXDAWHVHAFVIRVJSVPXFWPFVQAVKXDWGWFXEWOWFFAVLXDWJCDXDCWJCWJOAFXCVM
      VNPQVORS $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Distributive law for Cartesian product over union.  Theorem 103 of
       [Suppes] p. 52.  (Contributed by NM, 12-Aug-2004.) $)
    xpundi $p |- ( A X. ( B u. C ) ) = ( ( A X. B ) u. ( A X. C ) ) $=
      ( vx vy cun cxp cv wcel wa copab df-xp uneq12i wo elun andi bitri opabbii
      anbi2i eqtr4i unopab ) ABCFZGDHAIZEHZUBIZJZDEKZABGZACGZFZDEAUBLUJUCUDBIZJ
      ZDEKZUCUDCIZJZDEKZFZUGUHUMUIUPDEABLDEACLMUGULUONZDEKUQUFURDEUFUCUKUNNZJUR
      UEUSUCUDBCOSUCUKUNPQRULUODEUATTT $.

    $( Distributive law for Cartesian product over union.  Similar to Theorem
       103 of [Suppes] p. 52.  (Contributed by NM, 30-Sep-2002.) $)
    xpundir $p |- ( ( A u. B ) X. C ) = ( ( A X. C ) u. ( B X. C ) ) $=
      ( vx vy cun cxp cv wcel wa copab df-xp uneq12i wo elun anbi1i andir bitri
      opabbii eqtr4i unopab ) ABFZCGDHZUBIZEHCIZJZDEKZACGZBCGZFZDEUBCLUJUCAIZUE
      JZDEKZUCBIZUEJZDEKZFZUGUHUMUIUPDEACLDEBCLMUGULUONZDEKUQUFURDEUFUKUNNZUEJU
      RUDUSUEUCABOPUKUNUEQRSULUODEUATTT $.
  $}

  ${
    $d w y z A $.  $d w y z B $.  $d w x y z C $.  $d x F $.
    $( Distributive law for Cartesian product over indexed union.  (Contributed
       by Mario Carneiro, 27-Apr-2014.) $)
    xpiundi $p |- ( C X. U_ x e. A B ) = U_ x e. A ( C X. B ) $=
      ( vz vw vy ciun cxp cv wrex wcel wa wex eliun exbii df-rex rexbii 3bitr4i
      elxp2 cop wceq rexcom anbi1i rexcom4 r19.41v 3bitri eqriv ) EDABCHZIZABDC
      IZHZEJZFJGJZUAUBZGUIKZFDKZUMUKLZABKZUMUJLUMULLUOGCKZABKZFDKUTFDKZABKUQUSU
      TFADBUCUPVAFDUNUILZUOMZGNUNCLZABKZUOMZGNZUPVAVDVGGVCVFUOAUNBCOUDPUOGUIQVA
      VEUOMZGNZABKVIABKZGNVHUTVJABUOGCQRVIAGBUEVKVGGVEUOABUFPUGSRURVBABFGUMDCTR
      SFGUMDUITAUMBUKOSUH $.

    $( Distributive law for Cartesian product over indexed union.  (Contributed
       by Mario Carneiro, 27-Apr-2014.) $)
    xpiundir $p |- ( U_ x e. A B X. C ) = U_ x e. A ( B X. C ) $=
      ( vz vy vw ciun cxp cv cop wrex wcel wa df-rex rexbii eliun elxp2 3bitr4i
      wex wceq rexcom4 anbi1i r19.41v bitr4i exbii 3bitr4ri eqriv ) EABCHZDIZAB
      CDIZHZEJZFJZGJKUAGDLZFUILZUMUKMZABLZUMUJMUMULMUNUIMZUONZFTZUOFCLZABLZUPUR
      UNCMZUONZFTZABLVEABLZFTVCVAVEAFBUBVBVFABUOFCOPUTVGFUTVDABLZUONVGUSVHUOAUN
      BCQUCVDUOABUDUEUFUGUOFUIOUQVBABFGUMCDRPSFGUMUIDRAUMBUKQSUH $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Membership in a union of Cartesian products when the second factor is
       constant.  (Contributed by Mario Carneiro, 29-Dec-2014.) $)
    iunxpconst $p |- U_ x e. A ( { x } X. B ) = ( A X. B ) $=
      ( cv csn ciun cxp xpiundir iunid xpeq1i eqtr3i ) ABADEZFZCGABLCGFBCGABLCH
      MBCABIJK $.
  $}

  $( The Cartesian product of two unions.  (Contributed by NM, 12-Aug-2004.) $)
  xpun $p |- ( ( A u. B ) X. ( C u. D ) ) =
            ( ( ( A X. C ) u. ( A X. D ) ) u. ( ( B X. C ) u. ( B X. D ) ) ) $=
    ( cun cxp xpundi xpundir uneq12i un4 3eqtri ) ABEZCDEFLCFZLDFZEACFZBCFZEZAD
    FZBDFZEZEOREPSEELCDGMQNTABCHABDHIOPRSJK $.

  ${
    $d w x y z A $.
    $( Membership in universal class of ordered pairs.  (Contributed by NM,
       4-Jul-1994.) $)
    elvv $p |- ( A e. ( _V X. _V ) <-> E. x E. y A = <. x , y >. ) $=
      ( cvv cxp wcel cv cop wceq wa wex elxp vex pm3.2i biantru 2exbii bitr4i )
      CDDEFCAGZBGZHIZRDFZSDFZJZJZBKAKTBKAKABCDDLTUDABUCTUAUBAMBMNOPQ $.

    $( Membership in universal class of ordered triples.  (Contributed by NM,
       17-Dec-2008.) $)
    elvvv $p |- ( A e. ( ( _V X. _V ) X. _V )
                 <-> E. x E. y E. z A = <. <. x , y >. , z >. ) $=
      ( vw cvv cxp wcel cv cop wceq wa wex elxp anass ancom 2exbii bitr3i bitri
      19.42vv vex biantru elvv anbi2i 3bitr4ri exrot4 excom opex eqeq2d ceqsexv
      opeq1 exbii ) DFFGZFGHDEIZCIZJZKZUNUMHZUOFHZLLZCMEMZDAIZBIZJZUOJZKZCMZBMA
      MZECDUMFNVAUNVDKZUQLZBMAMZCMEMZVHUTVKECUTUQURLZUSLZVKUQURUSOUQVILZBMAMUQV
      IBMAMZLZVKVNUQVIABTVJVOABVIUQPQVNVMVQUSVMCUAUBURVPUQABUNUCUDRUERQVLVJCMEM
      ZBMAMVHVJABECUFVRVGABVRVJEMZCMVGVJECUGVSVFCUQVFEVDVBVCUHVIUPVEDUNVDUOUKUI
      UJULSQRSS $.

    $( An ordered pair contains its union.  (Contributed by NM,
       16-Sep-2006.) $)
    elvvuni $p |- ( A e. ( _V X. _V ) -> U. A e. A ) $=
      ( vx vy cvv cxp wcel cv cop wceq wex cuni elvv cpr vex uniop opi2 eqeltri
      unieq id eleq12d mpbiri exlimivv sylbi ) ADDEFABGZCGZHZIZCJBJAKZAFZBCALUG
      UIBCUGUIUFKZUFFUJUDUEMUFUDUEBNZCNZOUDUEUKULPQUGUHUJAUFAUFRUGSTUAUBUC $.
  $}

  $( Intersection of binary relation with Cartesian product.  (Contributed by
     NM, 3-Mar-2007.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
  brinxp2 $p |- ( A ( R i^i ( C X. D ) ) B <->
                ( A e. C /\ B e. D /\ A R B ) ) $=
    ( cxp cin wbr wa wcel w3a brin ancom brxp anbi1i df-3an bitr4i 3bitri ) ABE
    CDFZGHABEHZABSHZIUATIZACJZBDJZTKZABESLTUAMUBUCUDIZTIUEUAUFTABCDNOUCUDTPQR
    $.

  $( Intersection of binary relation with Cartesian product.  (Contributed by
     NM, 9-Mar-1997.) $)
  brinxp $p |- ( ( A e. C /\ B e. D ) ->
               ( A R B <-> A ( R i^i ( C X. D ) ) B ) ) $=
    ( cxp cin wbr wcel wa w3a brinxp2 df-3an bitri baibr ) ABECDFGHZACIZBDIZJZA
    BEHZPQRTKSTJABCDELQRTMNO $.

  ${
    $d x y z A $.  $d x y z R $.
    $( Intersection of partial order with Cartesian product of its field.
       (Contributed by Mario Carneiro, 10-Jul-2014.) $)
    poinxp $p |- ( R Po A <-> ( R i^i ( A X. A ) ) Po A ) $=
      ( vx vy vz cv wbr wn wa wi wral cxp cin wpo wcel wb brinxp ralbidva df-po
      anbi12d simpll syl2anc notbid adantll adantlr imbi12d ralbiia 3bitr4i
      adantr ) CFZUJBGZHZUJDFZBGZUMEFZBGZIZUJUOBGZJZIZEAKZDAKZCAKUJUJBAALMZGZHZ
      UJUMVCGZUMUOVCGZIZUJUOVCGZJZIZEAKZDAKZCAKABNAVCNVBVMCAUJAOZVAVLDAVNUMAOZI
      ZUTVKEAVPUOAOZIZULVEUSVJVRUKVDVRVNVNUKVDPVNVOVQUAZVSUJUJAABQUBUCVRUQVHURV
      IVRUNVFUPVGVPUNVFPVQUJUMAABQUIVOVQUPVGPVNUMUOAABQUDTVNVQURVIPVOUJUOAABQUE
      UFTRRUGCDEABSCDEAVCSUH $.

    $( Intersection of total order with Cartesian product of its field.
       (Contributed by Mario Carneiro, 10-Jul-2014.) $)
    soinxp $p |- ( R Or A <-> ( R i^i ( A X. A ) ) Or A ) $=
      ( vx vy wpo cv wbr weq w3o wral wa cxp cin poinxp wcel brinxp biidd df-so
      wor wb ancoms 3orbi123d ralbidva ralbiia anbi12i 3bitr4i ) ABEZCFZDFZBGZC
      DHZUIUHBGZIZDAJZCAJZKABAALMZEZUHUIUPGZUKUIUHUPGZIZDAJZCAJZKABSAUPSUGUQUOV
      BABNUNVACAUHAOZUMUTDAVCUIAOZKZUJURUKUKULUSUHUIAABPVEUKQVDVCULUSTUIUHAABPU
      AUBUCUDUECDABRCDAUPRUF $.

    $( Intersection of well-founded relation with Cartesian product of its
       field.  (Contributed by Mario Carneiro, 10-Jul-2014.) $)
    frinxp $p |- ( R Fr A <-> ( R i^i ( A X. A ) ) Fr A ) $=
      ( vz vy vx cv wss c0 wa wbr wn wral wrex wi wal wfr wb wcel ssel df-fr
      wne cxp cin anim12d brinxp ancoms notbid ralbidva rexbidva adantr pm5.74i
      syl6 impl albii 3bitr4i ) CFZAGZUPHUAZIZDFZEFZBJZKZDUPLZEUPMZNZCOUSUTVABA
      AUBUCZJZKZDUPLZEUPMZNZCOABPAVGPVFVLCUSVEVKUQVEVKQURUQVDVJEUPUQVAUPRZIZVCV
      IDUPVNUTUPRZIVBVHUQVMVOVBVHQZUQVMVOIVAARZUTARZIVPUQVMVQVOVRUPAVASUPAUTSUD
      VRVQVPUTVAAABUEUFULUMUGUHUIUJUKUNCEDABTCEDAVGTUO $.

    $( Intersection of set-like relation with Cartesian product of its field.
       (Contributed by Mario Carneiro, 22-Jun-2015.) $)
    seinxp $p |- ( R Se A <-> ( R i^i ( A X. A ) ) Se A ) $=
      ( vy vx cv wbr crab cvv wcel cxp cin wse wb brinxp ancoms rabbidva eleq1d
      wral ralbiia df-se 3bitr4i ) CEZDEZBFZCAGZHIZDARUBUCBAAJKZFZCAGZHIZDARABL
      AUGLUFUJDAUCAIZUEUIHUKUDUHCAUBAIUKUDUHMUBUCAABNOPQSDCABTDCAUGTUA $.

    $( Intersection of well-ordering with Cartesian product of its field.
       (Contributed by NM, 9-Mar-1997.)  (Revised by Mario Carneiro,
       10-Jul-2014.) $)
    weinxp $p |- ( R We A <-> ( R i^i ( A X. A ) ) We A ) $=
      ( wfr wor wa cxp cin wwe frinxp soinxp anbi12i df-we 3bitr4i ) ABCZABDZEA
      BAAFGZCZAPDZEABHAPHNQORABIABJKABLAPLM $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( Partial ordering of a singleton.  (Contributed by NM, 27-Apr-2009.)
       (Revised by Mario Carneiro, 23-Apr-2015.) $)
    posn $p |- ( Rel R -> ( R Po { A } <-> -. A R A ) ) $=
      ( vx vy vz cvv wpo wbr wn wb cv wa wi wral breq2 anbi2d ralsng ralbidv c0
      wceq wrel wcel csn df-po simpl syl5ib biantrud bicomd bitrd breq12 anidms
      imbi12d notbid adantl syl5bb po0 snprc poeq2 sylbi mpbiri brrelex stoic1a
      2thd pm2.61dan ) BUAZAFUBZAUCZBGZAABHZIZJVHCKZVKBHZIZVKDKZBHZVNEKZBHZLZVK
      VPBHZMZLZEVGNZDVGNZCVGNZVEVFLVJCDEVGBUDVFWDVJJVEVFWDVMCVGNVJVFWCVMCVGVFWC
      VMVOVNABHZLZVKABHZMZLZDVGNVMVFWBWIDVGWAWIEAFVPATZVTWHVMWJVRWFVSWGWJVQWEVO
      VPAVNBOPVPAVKBOULPQRWIVMDAFVNATZVMWIWKWHVMWFVOWKWGVOWEUEVNAVKBOUFUGUHQUIR
      VMVJCAFVKATZVLVIWLVLVIJVKAVKABUJUKUMQUIUNUOVEVFIZLVHVJWMVHVEWMVHSBGZBUPWM
      VGSTVHWNJAUQVGSBURUSUTUNVEVIVFAABVAVBVCVD $.

    $( Strict ordering on a singleton.  (Contributed by Mario Carneiro,
       28-Dec-2014.) $)
    sosn $p |- ( Rel R -> ( R Or { A } <-> -. A R A ) ) $=
      ( vx vy csn wor wpo wrel wbr wn cv weq wral wcel wa elsni eqcomd sylan9eq
      w3o 3mix2d rgen2a df-so mpbiran2 posn syl5bb ) AEZBFZUFBGZBHAABIJUGUHCKZD
      KZBIZCDLZUJUIBIZSZDUFMCUFMUNCDUFUIUFNZUJUFNZOULUKUMUOUPUIAUJUIAPUPUJAUJAP
      QRTUACDUFBUBUCABUDUE $.

    $( Founded relation on a singleton.  (Contributed by Mario Carneiro,
       28-Dec-2014.)  (Revised by Mario Carneiro, 23-Apr-2015.) $)
    frsn $p |- ( Rel R -> ( R Fr { A } <-> -. A R A ) ) $=
      ( vz vy vx cvv wfr wbr wn wb wa cv wral wrex c0 wne wi wal wceq adantl wo
      wrel wcel csn wss df-fr df-ne simpr sssn sylib ord syl5bi eqimss ad2antlr
      impr snnzg eqnetrd jca impbida imbi1d albidv snex raleq rexeqbi1dv syl6bb
      ceqsalv syl5bb breq2 notbid ralbidv rexsng breq1 ralsng bitrd snprc freq2
      fr0 mpbiri sylbi brrelex stoic1a 2thd pm2.61dan ) BUBZAFUCZAUDZBGZAABHZIZ
      JWDWEKZWGCLZDLZBHZIZCWFMZDWFNZWIWGELZWFUEZWQOPZKZWNCWQMZDWQNZQZERZWJWPEDC
      WFBUFWJXDWQWFSZXBQZERWPWJXCXFEWJWTXEXBWJWTXEWJWRWSXEWSWQOSZIWJWRKZXEWQOUG
      XHXGXEXHWRXGXEUAWJWRUHWQAUIUJUKULUOWJXEKZWRWSXEWRWJWQWFUMTXIWQWFOWJXEUHWE
      WFOPWDXEAFUPUNUQURUSUTVAXBWPEWFAVBXAWODWQWFWNCWQWFVCVDVFVEVGWEWPWIJWDWEWP
      WKABHZIZCWFMZWIWOXLDAFWLASZWNXKCWFXMWMXJWLAWKBVHVIVJVKXKWICAFWKASXJWHWKAA
      BVLVIVMVNTVNWDWEIZKWGWIXNWGWDXNWFOSZWGAVOXOWGOBGBVQWFOBVPVRVSTWDWHWEAABVT
      WAWBWC $.

    $( Well-ordering of a singleton.  (Contributed by Mario Carneiro,
       28-Dec-2014.) $)
    wesn $p |- ( Rel R -> ( R We { A } <-> -. A R A ) ) $=
      ( wrel csn wfr wor wa wbr wn wwe frsn sosn anbi12d df-we pm4.24 3bitr4g )
      BCZADZBEZRBFZGAABHIZUAGRBJUAQSUATUAABKABLMRBNUAOP $.
  $}

  ${
    $d A x y $.
    $( Membership in an ordered pair class builder implies membership in a
       Cartesian product.  (Contributed by Alexander van der Vekens,
       23-Jun-2018.) $)
    elopaelxp $p |- ( A e. { <. x , y >. | ps } -> A e. ( _V X. _V ) ) $=
      ( cv cop wceq wa wex copab wcel cvv cxp simpl 2eximi elopab elvv 3imtr4i
      ) DBECEFGZAHZCIBISCIBIDABCJKDLLMKTSBCSANOABCDPBCDQR $.
  $}

  ${
    $d A x y $.  $d B x y $.
    bropaex12.1 $e |- R = { <. x , y >. | ps } $.
    $( Two classes related by an ordered pair class builder are sets.
       (Contributed by AV, 21-Jan-2020.) $)
    bropaex12 $p |- ( A R B -> ( A e. _V /\ B e. _V ) ) $=
      ( wbr cop cvv cxp wcel wa copab df-br eleq2i bitri elopaelxp sylbi opelxp
      sylib ) DEFHZDEIZJJKLZDJLEJLMUBUCABCNZLZUDUBUCFLUFDEFOFUEUCGPQABCUCRSDEJJ
      TUA $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( An abstraction relation is a subset of a related Cartesian product.
       (Contributed by NM, 16-Jul-1995.) $)
    opabssxp $p |- { <. x , y >. | ( ( x e. A /\ y e. B ) /\ ph ) }
                   C_ ( A X. B ) $=
      ( cv wcel wa copab cxp simpl ssopab2i df-xp sseqtr4i ) BFDGCFEGHZAHZBCIOB
      CIDEJPOBCOAKLBCDEMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y ps $.
    brab2ga.1 $e |- ( ( x = A /\ y = B ) -> ( ph <-> ps ) ) $.
    brab2ga.2 $e |- R = { <. x , y >. | ( ( x e. C /\ y e. D ) /\ ph ) } $.
    $( The law of concretion for a binary relation.  See ~ brab2a for alternate
       proof.  TODO: should one of them be deleted?  (Contributed by Mario
       Carneiro, 28-Apr-2015.)  (Proof modification is discouraged.) $)
    brab2ga $p |- ( A R B <-> ( ( A e. C /\ B e. D ) /\ ps ) ) $=
      ( wbr wcel wa cv copab cxp opabssxp eqsstri brel eleq2i opelopab2a syl5bb
      cop df-br bitri biadan2 ) EFILZEGMFHMNZBEFGHIICOGMDOHMNANCDPZGHQKACDGHRST
      UHEFUDZUJMZUIBUHUKIMULEFIUEIUJUKKUAUFABCDEFGHJUBUCUG $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y ps $.
    optocl.1 $e |- D = ( B X. C ) $.
    optocl.2 $e |- ( <. x , y >. = A -> ( ph <-> ps ) ) $.
    optocl.3 $e |- ( ( x e. B /\ y e. C ) -> ph ) $.
    $( Implicit substitution of class for ordered pair.  (Contributed by NM,
       5-Mar-1995.) $)
    optocl $p |- ( A e. D -> ps ) $=
      ( cxp wcel cv cop wceq wa wex elxp3 sylbi opelxp syl5ib exlimivv eleq2s
      imp ) BEFGLZHEUFMCNZDNZOZEPZUIUFMZQZDRCRBCDEFGSULBCDUJUKBUKAUJBUKUGFMUHGM
      QAUGUHFGUAKTJUBUEUCTIUD $.
  $}

  ${
    $d x y z w A $.  $d z w B $.  $d x y z w C $.  $d x y z w D $.
    $d x y ps $.  $d z w ch $.  $d z w R $.
    2optocl.1 $e |- R = ( C X. D ) $.
    2optocl.2 $e |- ( <. x , y >. = A -> ( ph <-> ps ) ) $.
    2optocl.3 $e |- ( <. z , w >. = B -> ( ps <-> ch ) ) $.
    2optocl.4 $e |- ( ( ( x e. C /\ y e. D ) /\ ( z e. C /\ w e. D ) ) ->
                   ph ) $.
    $( Implicit substitution of classes for ordered pairs.  (Contributed by NM,
       12-Mar-1995.) $)
    2optocl $p |- ( ( A e. R /\ B e. R ) -> ch ) $=
      ( wcel wi cv cop wceq imbi2d wa ex optocl com12 impcom ) ILQHLQZCUHBRUHCR
      FGIJKLMFSZGSZTIUABCUHOUBUHUIJQUJKQUCZBUKARUKBRDEHJKLMDSZESZTHUAABUKNUBULJ
      QUMKQUCUKAPUDUEUFUEUG $.
  $}

  ${
    $d x y z w v u A $.  $d z w v u B $.  $d v u C $.  $d x y z w v u D $.
    $d x y z w v u F $.  $d z w v u R $.  $d x y ps $.  $d z w ch $.
    $d v u th $.
    3optocl.1 $e |- R = ( D X. F ) $.
    3optocl.2 $e |- ( <. x , y >. = A -> ( ph <-> ps ) ) $.
    3optocl.3 $e |- ( <. z , w >. = B -> ( ps <-> ch ) ) $.
    3optocl.4 $e |- ( <. v , u >. = C -> ( ch <-> th ) ) $.
    3optocl.5 $e |- ( ( ( x e. D /\ y e. F ) /\ ( z e. D /\ w e. F )
                    /\ ( v e. D /\ u e. F ) ) -> ph ) $.
    $( Implicit substitution of classes for ordered pairs.  (Contributed by NM,
       12-Mar-1995.) $)
    3optocl $p |- ( ( A e. R /\ B e. R /\ C e. R ) -> th ) $=
      ( wcel wa wi cv cop wceq imbi2d 3expia 2optocl com12 optocl impcom 3impa
      ) KOUBZLOUBZMOUBZDUQUOUPUCZDURCUDURDUDIJMNPOQIUEZJUEZUFMUGCDURTUHURUSNUBU
      TPUBUCZCVAAUDVABUDVACUDEFGHKLNPOQEUEZFUEZUFKUGABVARUHGUEZHUEZUFLUGBCVASUH
      VBNUBVCPUBUCVDNUBVEPUBUCVAAUAUIUJUKULUMUN $.
  $}

  ${
    $d x y z w v u A $.  $d x y z w v u B $.  $d x y z w v u C $.
    $d x y z w v u D $.  $d x y z w v u S $.  $d x y ph $.  $d z w v u ps $.
    opbrop.1 $e |- ( ( ( z = A /\ w = B ) /\ ( v = C /\ u = D ) ) ->
                     ( ph <-> ps ) ) $.
    opbrop.2 $e |- R = { <. x , y >. | ( ( x e. ( S X. S ) /\
                      y e. ( S X. S ) ) /\
                      E. z E. w E. v E. u ( ( x = <. z , w >. /\
                      y = <. v , u >. ) /\ ph ) ) } $.
    $( Ordered pair membership in a relation.  Special case.  (Contributed by
       NM, 5-Aug-1995.) $)
    opbrop $p |- ( ( ( A e. S /\ B e. S ) /\ ( C e. S /\ D e. S ) ) ->
                   ( <. A , B >. R <. C , D >. <-> ps ) ) $=
      ( wcel wa cv wex cop wbr cxp wceq opex eleq1 anbi1d eqeq1 4exbidv anbi12d
      anbi2d brab copsex4g syl5bb opelxpi anim12i biantrurd bitr4d ) INQJNQRZKN
      QLNQRZRZIJUAZKLUAZMUBZVBNNUCZQZVCVEQZRZBRZBVDVHVBESFSUAZUDZVCGSHSUAZUDZRZ
      ARZHTGTFTETZRZVAVICSZVEQZDSZVEQZRZVRVJUDZVTVLUDZRZARZHTGTFTETZRVFWARZVKWD
      RZARZHTGTFTETZRVQCDVBVCMIJUEKLUEVRVBUDZWBWHWGWKWLVSVFWAVRVBVEUFUGWLWFWJEF
      GHWLWEWIAWLWCVKWDVRVBVJUHUGUGUIUJVTVCUDZWHVHWKVPWMWAVGVFVTVCVEUFUKWMWJVOE
      FGHWMWIVNAWMWDVMVKVTVCVLUHUKUGUIUJPULVAVPBVHABEFGHIJKLNNOUMUKUNVAVHBUSVFU
      TVGIJNNUOKLNNUOUPUQUR $.
  $}

  ${
    $d x y z A $.
    $( The Cartesian product with the empty set is empty.  Part of Theorem
       3.13(ii) of [Monk1] p. 37.  (Contributed by NM, 4-Jul-1994.) $)
    0xp $p |- ( (/) X. A ) = (/) $=
      ( vz vx vy c0 cxp cv wcel cop wceq wa wex elxp noel simprl mto nex 2false
      bitri eqriv ) BEAFZEBGZUAHUBCGZDGZIJZUCEHZUDAHZKKZDLZCLZUBEHZCDUBEAMUJUKU
      ICUHDUHUFUCNUEUFUGOPQQUBNRST $.
  $}

  ${
    $d A w y z $.  $d B w y z $.  $d C w y z $.  $d D w y z $.  $d w x y z $.
    $( Distribute proper substitution through the Cartesian product of two
       classes.  (Contributed by Alan Sare, 10-Nov-2012.)  (Revised by NM,
       23-Aug-2018.) $)
    csbxp $p |- [_ A / x ]_ ( B X. C ) = ( [_ A / x ]_ B X. [_ A / x ]_ C ) $=
      ( vz vw vy cv wcel wex cab csb cxp wsbc sbcex2 sbcan bitri intnand eqtri
      wa cop wceq csbab cvv wb sbcg sbcel2 anbi12i a1i anbi12d sbcex con3i noel
      wn c0 neleqtrrd 2falsed pm2.61i exbii abbii copab df-opab csbeq2i 3eqtr4i
      csbprc df-xp ) ABEHFHZGHZUAUBZVGCIZVHDIZTZTZGJZFJZEKZLZVIVGABCLZIZVHABDLZ
      IZTZTZGJZFJZEKZABCDMZLVRVTMZVQVOABNZEKWFVOAEBUCWIWEEWIVNABNZFJWEVNFABOWJW
      DFWJVMABNZGJWDVMGABOWKWCGWKVIABNZVLABNZTZWCVIVLABPBUDIZWNWCUEWOWLVIWMWBVI
      ABUDUFWMWBUEWOWMVJABNZVKABNZTWBVJVKABPWPVSWQWAABVGCUGABVHDUGUHQUIUJWOUNZW
      NWCWRWMWLWMWOVLABUKULRWRWBVIWRWAVSWRVTUOVHVHUOIUNWRVHUMUIABDVEUPRRUQURQUS
      QUSQUTSABWGVPWGVLFGVAVPFGCDVFVLFGEVBSVCWHWBFGVAWFFGVRVTVFWBFGEVBSVD $.

    $( Distribute proper substitution through the Cartesian product of two
       classes.  (Contributed by Alan Sare, 10-Nov-2012.)  Obsolete as of
       23-Aug-2018.  Use ~ csbrn instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    csbxpgOLD $p |- ( A e. D -> [_ A / x ]_ ( B X. C ) =
                ( [_ A / x ]_ B X. [_ A / x ]_ C ) ) $=
      ( vz vw vy wcel cv wa wex cab csb cxp wsbc sbcexgOLD sbcangOLD sbcel2gOLD
      bitrd wceq csbabgOLD sbcg anbi12d exbidv abbidv eqtrd copab df-xp df-opab
      cop eqtri csbeq2i 3eqtr4g ) BEIZABFJGJZHJZUKUAZUPCIZUQDIZKZKZHLZGLZFMZNZU
      RUPABCNZIZUQABDNZIZKZKZHLZGLZFMZABCDOZNVGVIOZUOVFVDABPZFMVOVDAFBEUBUOVRVN
      FUOVRVCABPZGLVNVCGABEQUOVSVMGUOVSVBABPZHLVMVBHABEQUOVTVLHUOVTURABPZVAABPZ
      KVLURVAABERUOWAURWBVKURABEUCUOWBUSABPZUTABPZKVKUSUTABERUOWCVHWDVJABUPCESA
      BUQDESUDTUDTUETUETUFUGABVPVEVPVAGHUHVEGHCDUIVAGHFUJULUMVQVKGHUHVOGHVGVIUI
      VKGHFUJULUN $.
  $}

  ${
    $d x y z $.
    $( Ordinal numbers and ordered pairs are disjoint collections.  This
       theorem can be used if we want to extend a set of ordinal numbers or
       ordered pairs with disjoint elements.  See also ~ snsn0non .
       (Contributed by NM, 1-Jun-2004.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    onxpdisj $p |- ( On i^i ( _V X. _V ) ) = (/) $=
      ( vx con0 cvv cxp cin c0 wceq cv wcel wn disj on0eqel 0nelxp eleq1 mtbiri
      wo 0nelelxp con2i jaoi syl mprgbir ) BCCDZEFGAHZUBIZJZABABUBKUCBIUCFGZFUC
      IZPUEUCLUFUEUGUFUDFUBICCMUCFUBNOUDUGCCUCQRSTUA $.
  $}

  $( The class of ordinal numbers is not equal to the universe.  (Contributed
     by NM, 16-Jun-2007.)  (Proof shortened by Mario Carneiro, 10-Jan-2013.) $)
  onnev $p |- On =/= _V $=
    ( c0 csn con0 wcel wn cvv wne snsn0non wceq snex syl5eleqr necon3bi ax-mp
    id ) ABZBZCDZECFGHQCFCFIZPFCOJRNKLM $.

  $( Equality theorem for the relation predicate.  (Contributed by NM,
     1-Aug-1994.) $)
  releq $p |- ( A = B -> ( Rel A <-> Rel B ) ) $=
    ( wceq cvv cxp wss wrel sseq1 df-rel 3bitr4g ) ABCADDEZFBKFAGBGABKHAIBIJ $.

  ${
    releqi.1 $e |- A = B $.
    $( Equality inference for the relation predicate.  (Contributed by NM,
       8-Dec-2006.) $)
    releqi $p |- ( Rel A <-> Rel B ) $=
      ( wceq wrel wb releq ax-mp ) ABDAEBEFCABGH $.
  $}

  ${
    releqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for the relation predicate.  (Contributed by NM,
       8-Mar-2014.) $)
    releqd $p |- ( ph -> ( Rel A <-> Rel B ) ) $=
      ( wceq wrel wb releq syl ) ABCEBFCFGDBCHI $.
  $}

  ${
    $d y A $.  $d x y $.
    nfrel.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for a relation.  (Contributed by NM,
       31-Jan-2004.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfrel $p |- F/ x Rel A $=
      ( wrel cvv cxp wss df-rel nfcv nfss nfxfr ) BDBEEFZGABHABLCALIJK $.
  $}

  $( Distribute proper substitution through a relation predicate.  (Contributed
     by Alexander van der Vekens, 23-Jul-2017.) $)
  sbcrel $p |- ( A e. V -> ( [. A / x ]. Rel R <-> Rel [_ A / x ]_ R ) ) $=
    ( wcel cvv cxp wss wsbc sbcssg csbconstg sseq2d bitrd df-rel sbcbii 3bitr4g
    csb wrel ) BDEZCFFGZHZABIZABCQZTHZCRZABIUCRSUBUCABTQZHUDABCTDJSUFTUCABTDKLM
    UEUAABCNOUCNP $.

  $( Subclass theorem for relation predicate.  Theorem 2 of [Suppes] p. 58.
     (Contributed by NM, 15-Aug-1994.) $)
  relss $p |- ( A C_ B -> ( Rel B -> Rel A ) ) $=
    ( wss cvv cxp wrel sstr2 df-rel 3imtr4g ) ABCBDDEZCAJCBFAFABJGBHAHI $.

  ${
    $d x y z A $.  $d x y z B $.
    $( A subclass relationship depends only on a relation's ordered pairs.
       Theorem 3.2(i) of [Monk1] p. 33.  (Contributed by NM, 2-Aug-1994.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    ssrel $p |- ( Rel A -> ( A C_ B <->
                A. x A. y ( <. x , y >. e. A -> <. x , y >. e. B ) ) ) $=
      ( vz wrel wss cv cop wcel wi wal ssel alrimivv wceq wex eleq1 imbi12d cvv
      dfss2 biimprcd 2alimi 19.23vv sylib com23 alimdv df-rel elvv imbi2i albii
      a2d cxp 3bitri 3imtr4g com12 impbid2 ) CFZCDGZAHBHIZCJZUSDJZKZBLALZURVBAB
      CDUSMNVCUQURVCEHZCJZVDUSOZBPAPZKZELZVEVDDJZKZELUQURVCVHVKEVCVEVGVJVCVGVEV
      JVCVFVKKZBLALVGVKKVBVLABVFVKVBVFVEUTVJVAVDUSCQVDUSDQRUAUBVFVKABUCUDUEUKUF
      UQCSSULZGVEVDVMJZKZELVICUGECVMTVOVHEVNVGVEABVDUHUIUJUMECDTUNUOUP $.

    $( Extensionality principle for relations.  Theorem 3.2(ii) of [Monk1]
       p. 33.  (Contributed by NM, 2-Aug-1994.) $)
    eqrel $p |- ( ( Rel A /\ Rel B ) -> ( A = B <->
                A. x A. y ( <. x , y >. e. A <-> <. x , y >. e. B ) ) ) $=
      ( wrel wa wss cv cop wcel wi wal wceq ssrel bi2anan9 eqss 2albiim 3bitr4g
      wb ) CEZDEZFCDGZDCGZFAHBHIZCJZUDDJZKBLALZUFUEKBLALZFCDMUEUFSBLALTUBUGUAUC
      UHABCDNABDCNOCDPUEUFABQR $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z R $.  $d x y z S $.
    $( A subclass relationship depends only on a relation's ordered pairs.
       This version of ~ ssrel is restricted to the relation's domain.
       (Contributed by Thierry Arnoux, 25-Jan-2018.) $)
    ssrel2 $p |- ( R C_ ( A X. B ) -> ( R C_ S <-> A. x e. A A. y e. B
      ( <. x , y >. e. R -> <. x , y >. e. S ) ) ) $=
      ( vz cxp wss cv wcel wi wral wrex wal eleq1 ralimi r19.23v bitri dfss2 wa
      cop ssel a1d ralrimivv wceq imbi12d biimprcd ralbii sylib com23 a2d elxp2
      alimdv imbi2i albii 3imtr4g com12 impbid2 ) ECDHZIZEFIZAJZBJZUBZEKZVEFKZL
      ZBDMZACMZVBVHABCDVBVHVCCKVDDKUAEFVEUCUDUEVJVAVBVJGJZEKZVKVEUFZBDNZACNZLZG
      OZVLVKFKZLZGOVAVBVJVPVSGVJVLVOVRVJVOVLVRVJVMVSLZBDMZACMZVOVSLZVIWAACVHVTB
      DVMVSVHVMVLVFVRVGVKVEEPVKVEFPUGUHQQWBVNVSLZACMWCWAWDACVMVSBDRUIVNVSACRSUJ
      UKULUNVAVLVKUTKZLZGOVQGEUTTWFVPGWEVOVLABVKCDUMUOUPSGEFTUQURUS $.
  $}

  ${
    $d x y A $.  $d x y B $.
    relssi.1 $e |- Rel A $.
    relssi.2 $e |- ( <. x , y >. e. A -> <. x , y >. e. B ) $.
    $( Inference from subclass principle for relations.  (Contributed by NM,
       31-Mar-1998.) $)
    relssi $p |- A C_ B $=
      ( wss cv cop wcel wi wal wrel wb ssrel ax-mp ax-gen mpgbir ) CDGZAHBHIZCJ
      TDJKZBLZACMSUBALNEABCDOPUABFQR $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ph $.
    relssdv.1 $e |- ( ph -> Rel A ) $.
    relssdv.2 $e |- ( ph -> ( <. x , y >. e. A -> <. x , y >. e. B ) ) $.
    $( Deduction from subclass principle for relations.  (Contributed by NM,
       11-Sep-2004.) $)
    relssdv $p |- ( ph -> A C_ B ) $=
      ( wss cv cop wcel wi wal alrimivv wrel wb ssrel syl mpbird ) ADEHZBICIJZD
      KUAEKLZCMBMZAUBBCGNADOTUCPFBCDEQRS $.
  $}

  ${
    $d x y A $.  $d x y B $.
    eqrelriv.1 $e |- ( <. x , y >. e. A <-> <. x , y >. e. B ) $.
    $( Inference from extensionality principle for relations.  (Contributed by
       FL, 15-Oct-2012.) $)
    eqrelriv $p |- ( ( Rel A /\ Rel B ) -> A = B ) $=
      ( wrel wa wceq cv cop wcel wb wal gen2 eqrel mpbiri ) CFDFGCDHAIBIJZCKQDK
      LZBMAMRABENABCDOP $.
  $}

  ${
    $d x y A $.  $d x y B $.
    eqreliiv.1 $e |- Rel A $.
    eqreliiv.2 $e |- Rel B $.
    eqreliiv.3 $e |- ( <. x , y >. e. A <-> <. x , y >. e. B ) $.
    $( Inference from extensionality principle for relations.  (Contributed by
       NM, 17-Mar-1995.) $)
    eqrelriiv $p |- A = B $=
      ( wrel wceq eqrelriv mp2an ) CHDHCDIEFABCDGJK $.
  $}

  ${
    $d x y A $.  $d x y B $.
    eqbrriv.1 $e |- Rel A $.
    eqbrriv.2 $e |- Rel B $.
    eqbrriv.3 $e |- ( x A y <-> x B y ) $.
    $( Inference from extensionality principle for relations.  (Contributed by
       NM, 12-Dec-2006.) $)
    eqbrriv $p |- A = B $=
      ( cv wbr cop wcel df-br 3bitr3i eqrelriiv ) ABCDEFAHZBHZCIOPDIOPJZCKQDKGO
      PCLOPDLMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqrelrdv.1 $e |- Rel A $.
    eqrelrdv.2 $e |- Rel B $.
    eqrelrdv.3 $e |- ( ph -> ( <. x , y >. e. A <-> <. x , y >. e. B ) ) $.
    $( Deduce equality of relations from equivalence of membership.
       (Contributed by Rodolfo Medina, 10-Oct-2010.) $)
    eqrelrdv $p |- ( ph -> A = B ) $=
      ( cv cop wcel wb wal wceq alrimivv wrel eqrel mp2an sylibr ) ABICIJZDKTEK
      LZCMBMZDENZAUABCHODPEPUCUBLFGBCDEQRS $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqbrrdv.1 $e |- ( ph -> Rel A ) $.
    eqbrrdv.2 $e |- ( ph -> Rel B ) $.
    eqbrrdv.3 $e |- ( ph -> ( x A y <-> x B y ) ) $.
    $( Deduction from extensionality principle for relations.  (Contributed by
       Mario Carneiro, 3-Jan-2017.) $)
    eqbrrdv $p |- ( ph -> A = B ) $=
      ( wceq cv cop wcel wb wal wbr df-br 3bitr3g alrimivv wrel eqrel syl2anc
      mpbird ) ADEIZBJZCJZKZDLZUFELZMZCNBNZAUIBCAUDUEDOUDUEEOUGUHHUDUEDPUDUEEPQ
      RADSESUCUJMFGBCDETUAUB $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqbrrdiv.1 $e |- Rel A $.
    eqbrrdiv.2 $e |- Rel B $.
    eqbrrdiv.3 $e |- ( ph -> ( x A y <-> x B y ) ) $.
    $( Deduction from extensionality principle for relations.  (Contributed by
       Rodolfo Medina, 10-Oct-2010.) $)
    eqbrrdiv $p |- ( ph -> A = B ) $=
      ( cv wbr cop wcel df-br 3bitr3g eqrelrdv ) ABCDEFGABIZCIZDJPQEJPQKZDLRELH
      PQDMPQEMNO $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqrelrdv2.1 $e |- ( ph
       -> ( <. x , y >. e. A <-> <. x , y >. e. B ) ) $.
    $( A version of ~ eqrelrdv .  (Contributed by Rodolfo Medina,
       10-Oct-2010.) $)
    eqrelrdv2 $p |- ( ( ( Rel A /\ Rel B ) /\ ph ) -> A = B ) $=
      ( wrel wa wceq cv cop wcel wb wal alrimivv adantl eqrel adantr mpbird ) D
      GEGHZAHDEIZBJCJKZDLUBELMZCNBNZAUDTAUCBCFOPTUAUDMABCDEQRS $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.
    $( A subclass relationship determined by ordered triples.  Use ~ relrelss
       to express the antecedent in terms of the relation predicate.
       (Contributed by NM, 17-Dec-2008.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    ssrelrel $p |- ( A C_ ( ( _V X. _V ) X. _V ) -> ( A C_ B <->
                   A. x A. y A. z ( <. <. x , y >. , z >. e. A
                       -> <. <. x , y >. , z >. e. B ) ) ) $=
      ( vw cvv cxp wss cv cop wcel wi wal ssel alrimiv wex eleq1 sylib dfss2
      alrimivv wceq elvvv imbi12d biimprcd alimi 19.23v 2alimi syl5bi com23 a2d
      19.23vv alimdv 3imtr4g com12 impbid2 ) DGGHGHZIZDEIZAJBJKCJKZDLZUTELZMZCN
      ZBNANZUSVDABUSVCCDEUTOPUAVEURUSVEFJZDLZVFUQLZMZFNVGVFELZMZFNURUSVEVIVKFVE
      VGVHVJVEVHVGVJVHVFUTUBZCQZBQAQZVEVKABCVFUCVEVMVKMZBNANVNVKMVDVOABVDVLVKMZ
      CNVOVCVPCVLVKVCVLVGVAVJVBVFUTDRVFUTERUDUEUFVLVKCUGSUHVMVKABULSUIUJUKUMFDU
      QTFDETUNUOUP $.

    $( Extensionality principle for ordered triples (used by 2-place operations
       ~ df-oprab ), analogous to ~ eqrel .  Use ~ relrelss to express the
       antecedent in terms of the relation predicate.  (Contributed by NM,
       17-Dec-2008.) $)
    eqrelrel $p |- ( ( A u. B ) C_ ( ( _V X. _V ) X. _V ) -> ( A = B <->
                   A. x A. y A. z ( <. <. x , y >. , z >. e. A
                       <-> <. <. x , y >. , z >. e. B ) ) ) $=
      ( cun cvv cxp wss wa wceq cv cop wcel wb wal unss wi ssrelrel bi2anan9
      eqss 2albiim albii 19.26 bitri 3bitr4g sylbir ) DEFGGHGHZIDUHIZEUHIZJZDEK
      ZALBLMCLMZDNZUMENZOCPBPZAPZODEUHQUKDEIZEDIZJUNUORCPBPZAPZUOUNRCPBPZAPZJZU
      LUQUIURVAUJUSVCABCDESABCEDSTDEUAUQUTVBJZAPVDUPVEAUNUOBCUBUCUTVBAUDUEUFUG
      $.
  $}

  ${
    $d x y A $.
    $( A member of a relation is an ordered pair.  (Contributed by NM,
       17-Sep-2006.) $)
    elrel $p |- ( ( Rel R /\ A e. R ) -> E. x E. y A = <. x , y >. ) $=
      ( wrel wcel wa cvv cxp cop wceq wex wss df-rel biimpi sselda elvv sylib
      cv ) DEZCDFGCHHIZFCASBSJKBLALTDUACTDUAMDNOPABCQR $.
  $}

  ${
    relsn.1 $e |- A e. _V $.
    $( A singleton is a relation iff it is an ordered pair.  (Contributed by
       NM, 24-Sep-2013.) $)
    relsn $p |- ( Rel { A } <-> A e. ( _V X. _V ) ) $=
      ( csn wrel cvv cxp wss wcel df-rel snss bitr4i ) ACZDLEEFZGAMHLIAMBJK $.

    relsnop.2 $e |- B e. _V $.
    $( A singleton of an ordered pair is a relation.  (Contributed by NM,
       17-May-1998.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    relsnop $p |- Rel { <. A , B >. } $=
      ( cop csn wrel cvv cxp wcel opelvv opex relsn mpbir ) ABEZFGOHHIJABCDKOAB
      LMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.
    $( Subset theorem for Cartesian product.  Generalization of Theorem 101 of
       [Suppes] p. 52.  (Contributed by NM, 26-Aug-1995.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.) $)
    xpss12 $p |- ( ( A C_ B /\ C C_ D ) -> ( A X. C ) C_ ( B X. D ) ) $=
      ( vx vy wss wa cv wcel copab cxp ssel im2anan9 ssopab2dv df-xp 3sstr4g )
      ABGZCDGZHZEIZAJZFIZCJZHZEFKUABJZUCDJZHZEFKACLBDLTUEUHEFRUBUFSUDUGABUAMCDU
      CMNOEFACPEFBDPQ $.
  $}

  ${
    $d x y z A $.  $d x y z B $.
    $( A Cartesian product is included in the ordered pair universe.  Exercise
       3 of [TakeutiZaring] p. 25.  (Contributed by NM, 2-Aug-1994.) $)
    xpss $p |- ( A X. B ) C_ ( _V X. _V ) $=
      ( cvv wss cxp ssv xpss12 mp2an ) ACDBCDABECCEDAFBFACBCGH $.
  $}

  $( A Cartesian product is a relation.  Theorem 3.13(i) of [Monk1] p. 37.
     (Contributed by NM, 2-Aug-1994.) $)
  relxp $p |- Rel ( A X. B ) $=
    ( cxp wrel cvv wss xpss df-rel mpbir ) ABCZDJEECFABGJHI $.

  $( Subset relation for Cartesian product.  (Contributed by Jeff Hankins,
     30-Aug-2009.) $)
  xpss1 $p |- ( A C_ B -> ( A X. C ) C_ ( B X. C ) ) $=
    ( wss cxp ssid xpss12 mpan2 ) ABDCCDACEBCEDCFABCCGH $.

  $( Subset relation for Cartesian product.  (Contributed by Jeff Hankins,
     30-Aug-2009.) $)
  xpss2 $p |- ( A C_ B -> ( C X. A ) C_ ( C X. B ) ) $=
    ( wss cxp ssid xpss12 mpan ) CCDABDCAECBEDCFCCABGH $.

  ${
    $d x y A $.  $d x y ph $.
    copsex2ga.1 $e |- ( A = <. x , y >. -> ( ph <-> ps ) ) $.
    $( Implicit substitution inference for ordered pairs.  Compare
       ~ copsex2ga .  (Contributed by NM, 12-Mar-2014.) $)
    copsex2gb $p |- ( E. x E. y ( A = <. x , y >. /\ ps )
         <-> ( A e. ( _V X. _V ) /\ ph ) ) $=
      ( cvv cxp wcel wa cv cop wceq elvv anbi1i 19.41vv pm5.32i 2exbii 3bitr2ri
      wex ) EGGHIZAJECKDKLMZDTCTZAJUBAJZDTCTUBBJZDTCTUAUCACDENOUBACDPUDUECDUBAB
      FQRS $.

    $( Implicit substitution inference for ordered pairs.  Compare
       ~ copsex2g .  (Contributed by NM, 26-Feb-2014.)  (Proof shortened by
       Mario Carneiro, 31-Aug-2015.) $)
    copsex2ga $p |- ( A e. ( V X. W )
        -> ( ph <-> E. x E. y ( A = <. x , y >. /\ ps ) ) ) $=
      ( cxp wcel cvv cv cop wceq wa wex wb xpss sseli copsex2gb baibr syl ) EFG
      IZJEKKIZJZAECLDLMNBODPCPZQUCUDEFGRSUFUEAABCDEHTUAUB $.

    $( Membership in an ordered pair class builder.  (Contributed by NM,
       25-Feb-2014.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    elopaba $p |- ( A e. { <. x , y >. | ps } <->
            ( A e. ( _V X. _V ) /\ ph ) ) $=
      ( copab wcel cv cop wceq wa wex cvv cxp elopab copsex2gb bitri ) EBCDGHEC
      IDIJKBLDMCMENNOHALBCDEPABCDEFQR $.
  $}

  ${
    $d A x y z $.  $d B x y z $.
    $( A Cartesian product is included in the power of the power of the union
       of its arguments.  (Contributed by NM, 13-Sep-2006.) $)
    xpsspw $p |- ( A X. B ) C_ ~P ~P ( A u. B ) $=
      ( vz vx vy cun cpw cv wcel wss wceq wa wex csn cpr snssi sseq1 syl5ibrcom
      vex syl cxp cop elxpi dfop wo ssun3 adantr df-pr ssun4 anim12i unss sylib
      syl5eqss jaod selpw 3imtr4g ssrdv biimpar sylan2 exlimivv sylibr ssriv
      elpr ) CABUAZABFZGZGZCHZVDIZVHVFJZVHVGIVIVHDHZEHZUBZKZVKAIZVLBIZLZLZEMDMV
      JDEVHABUCVRVJDEVQVNVMVFJZVJVQVMVKNZVKVLOZOZVFVKVLDSESUDVQCWBVFVQVHVTKZVHW
      AKZUEVHVEJZVHWBIVHVFIVQWCWEWDVQWEWCVTVEJZVOWFVPVOVTAJWFVKAPVTABUFTZUGVHVT
      VEQRVQWEWDWAVEJVQWAVTVLNZFZVEVKVLUHVQWFWHVEJZLWIVEJVOWFVPWJWGVPWHBJWJVLBP
      WHBAUITUJVTWHVEUKULUMVHWAVEQRUNVHVTWACSVCCVEUOUPUQUMVNVJVSVHVMVFQURUSUTTC
      VFUOVAVB $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( A Cartesian product is included in the power of the power of the union
       of its arguments.  (Contributed by NM, 13-Sep-2006.)
       (Proof modification is discouraged.)  (New usage is discouraged.) $)
    xpsspwOLD $p |- ( A X. B ) C_ ~P ~P ( A u. B ) $=
      ( vx vy cxp cun cpw relxp cv wcel csn cpr wss snssi syl elpw sylibr sylib
      wa vex opelxp ssun3 snex adantr df-pr ssun4 anim12i unss syl5eqss zfpair2
      cop jca prex dfop eleq1i prss 3bitr4ri sylbi relssi ) CDABEZABFZGZGZABHCI
      ZDIZUKZUTJVDAJZVEBJZSZVFVCJZVDVEABUAVIVDKZVBJZVDVELZVBJZSZVJVIVLVNVGVLVHV
      GVKVAMZVLVGVKAMVPVDANVKABUBOZVKVAVDUCZPQUDVIVMVAMVNVIVMVKVEKZFZVAVDVEUEVI
      VPVSVAMZSVTVAMVGVPVHWAVQVHVSBMWAVEBNVSBAUFOUGVKVSVAUHRUIVMVACDUJZPQULVKVM
      LZVCJWCVBMVJVOWCVBVKVMUMPVFWCVCVDVECTDTUNUOVKVMVBVRWBUPUQRURUS $.
  $}

  $( The double class union of a Cartesian product is included in the union of
     its arguments.  (Contributed by NM, 16-Sep-2006.) $)
  unixpss $p |- U. U. ( A X. B ) C_ ( A u. B ) $=
    ( cxp cuni cun cpw xpsspw unissi unipw sseqtri ) ABCZDZDABEZFZDMLNLNFZDNKOA
    BGHNIJHMIJ $.

  $( The union of two relations is a relation.  Compare Exercise 5 of
     [TakeutiZaring] p. 25.  (Contributed by NM, 12-Aug-1994.) $)
  relun $p |- ( Rel ( A u. B ) <-> ( Rel A /\ Rel B ) ) $=
    ( cvv cxp wss wa cun wrel unss df-rel anbi12i 3bitr4ri ) ACCDZEZBMEZFABGZME
    AHZBHZFPHABMIQNROAJBJKPJL $.

  $( The intersection with a relation is a relation.  (Contributed by NM,
     16-Aug-1994.) $)
  relin1 $p |- ( Rel A -> Rel ( A i^i B ) ) $=
    ( cin wss wrel wi inss1 relss ax-mp ) ABCZADAEJEFABGJAHI $.

  $( The intersection with a relation is a relation.  (Contributed by NM,
     17-Jan-2006.) $)
  relin2 $p |- ( Rel B -> Rel ( A i^i B ) ) $=
    ( cin wss wrel wi inss2 relss ax-mp ) ABCZBDBEJEFABGJBHI $.

  $( A difference cutting down a relation is a relation.  (Contributed by NM,
     31-Mar-1998.) $)
  reldif $p |- ( Rel A -> Rel ( A \ B ) ) $=
    ( cdif wss wrel wi difss relss ax-mp ) ABCZADAEJEFABGJAHI $.

  ${
    $d y A $.  $d y B $.  $d x y $.
    $( An indexed union is a relation iff each member of its indexed family is
       a relation.  (Contributed by NM, 19-Dec-2008.) $)
    reliun $p |- ( Rel U_ x e. A B <-> A. x e. A Rel B ) $=
      ( vy ciun wrel cv wcel wrex cab cvv cxp wss wral df-iun releqi df-rel wal
      wi 3bitri abss dfss2 bitri ralbii ralcom4 r19.23v albii bitr4i ) ABCEZFDG
      ZCHZABIZDJZFUMKKLZMZCFZABNZUIUMADBCOPUMQUOULUJUNHZSZDRZUQULDUNUAUQUKURSZD
      RZABNVAABNZDRUTUPVBABUPCUNMVBCQDCUNUBUCUDVAADBUEVCUSDUKURABUFUGTUHT $.
  $}

  $( An indexed intersection is a relation if at least one of the member of the
     indexed family is a relation.  (Contributed by NM, 8-Mar-2014.) $)
  reliin $p |- ( E. x e. A Rel B -> Rel |^|_ x e. A B ) $=
    ( cvv cxp wss wrex ciin wrel iinss df-rel rexbii 3imtr4i ) CDDEZFZABGABCHZN
    FCIZABGPIABCNJQOABCKLPKM $.

  ${
    $d x A $.
    $( The union of a class is a relation iff any member is a relation.
       Exercise 6 of [TakeutiZaring] p. 25 and its converse.  (Contributed by
       NM, 13-Aug-2004.) $)
    reluni $p |- ( Rel U. A <-> A. x e. A Rel x ) $=
      ( cuni wrel cv ciun wral uniiun releqi reliun bitri ) BCZDABAEZFZDMDABGLN
      ABHIABMJK $.

    $( The intersection of a class is a relation if at least one member is a
       relation.  (Contributed by NM, 8-Mar-2014.) $)
    relint $p |- ( E. x e. A Rel x -> Rel |^| A ) $=
      ( cv wrel wrex ciin cint reliin intiin releqi sylibr ) ACZDABEABLFZDBGZDA
      BLHNMABIJK $.
  $}

  $( The empty set is a relation.  (Contributed by NM, 26-Apr-1998.) $)
  rel0 $p |- Rel (/) $=
    ( c0 wrel cvv cxp wss 0ss df-rel mpbir ) ABACCDZEIFAGH $.

  ${
    $d ph z $.  $d u v x z $.  $d u v y z $.
    relopabi.1 $e |- A = { <. x , y >. | ph } $.
    $( A class of ordered pairs is a relation.  (Contributed by Mario Carneiro,
       21-Dec-2013.) $)
    relopabi $p |- Rel A $=
      ( vz wrel cvv cxp wss cv cop wceq wa wex cab copab df-opab wcel vex eqtri
      opelvv eleq1 mpbiri adantr exlimivv abssi eqsstri df-rel mpbir ) DGDHHIZJ
      DFKZBKZCKZLZMZANZCOBOZFPZUKDABCQUSEABCFRUAURFUKUQULUKSZBCUPUTAUPUTUOUKSUM
      UNBTCTUBULUOUKUCUDUEUFUGUHDUIUJ $.
  $}

  $( A class of ordered pairs is a relation.  (Contributed by NM, 8-Mar-1995.)
     (Unnecessary distinct variable restrictions were removed by Alan Sare,
     9-Jul-2013.)  (Proof shortened by Mario Carneiro, 21-Dec-2013.) $)
  relopab $p |- Rel { <. x , y >. | ph } $=
    ( copab eqid relopabi ) ABCABCDZGEF $.

  ${
    $d w x y z A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d ph z w $.
    $d ps z w $.
    $( The identity relation is a relation.  Part of Exercise 4.12(p) of
       [Mendelson] p. 235.  (Contributed by NM, 26-Apr-1998.)  (Revised by
       Mario Carneiro, 21-Dec-2013.) $)
    reli $p |- Rel _I $=
      ( vx vy weq cid dfid3 relopabi ) ABCABDABEF $.

    $( The membership relation is a relation.  (Contributed by NM,
       26-Apr-1998.)  (Revised by Mario Carneiro, 21-Dec-2013.) $)
    rele $p |- Rel _E $=
      ( vx vy wel cep df-eprel relopabi ) ABCABDABEF $.

    $( A relation expressed as an ordered pair abstraction.  (Contributed by
       NM, 11-Dec-2006.) $)
    opabid2 $p |- ( Rel A -> { <. x , y >. | <. x , y >. e. A } = A ) $=
      ( vz vw wrel cv cop wcel copab wceq wb wal vex opeq1 eleq1d opelopab gen2
      opeq2 relopab eqrel mpan mpbiri ) CFZAGZBGZHZCIZABJZCKZDGZEGZHZUIIUMCIZLZ
      EMDMZUODEUHUKUFHZCIUNABUKULDNENUEUKKUGUQCUEUKUFOPUFULKUQUMCUFULUKSPQRUIFU
      DUJUPLUHABTDEUICUAUBUC $.

    $( Intersection of two ordered pair class abstractions.  (Contributed by
       NM, 30-Sep-2002.) $)
    inopab $p |- ( { <. x , y >. | ph } i^i { <. x , y >. | ps } ) =
               { <. x , y >. | ( ph /\ ps ) } $=
      ( vz vw copab cin wa wrel relopab relin1 ax-mp cv cop wcel wsb sban sbbii
      opelopabsbALT anbi12i 3bitr4ri elin 3bitr4i eqrelriiv ) EFACDGZBCDGZHZABI
      ZCDGZUFJUHJACDKUFUGLMUICDKENFNOZUFPZUKUGPZIZUICEQZDFQZUKUHPUKUJPACEQZBCEQ
      ZIZDFQUQDFQZURDFQZIUPUNUQURDFRUOUSDFABCERSULUTUMVAACDEFTBCDEFTUAUBUKUFUGU
      CUICDEFTUDUE $.

    $( The difference of two ordered-pair abstractions.  (Contributed by Stefan
       O'Rear, 17-Jan-2015.) $)
    difopab $p |- ( { <. x , y >. | ph } \ { <. x , y >. | ps } ) =
        { <. x , y >. | ( ph /\ -. ps ) } $=
      ( vz vw copab wn wa wrel relopab ax-mp cv wcel wsbc sbcbii opelopabsb cvv
      sbcan wb cdif reldif cop vex sbcng notbii anbi12i eldif 3bitr4i eqrelriiv
      3bitr4ri ) EFACDGZBCDGZUAZABHZIZCDGZULJUNJACDKULUMUBLUPCDKEMZFMZUCZULNZUT
      UMNZHZIZUPDUSOZCUROZUTUNNUTUQNADUSOZUODUSOZIZCUROVGCUROZVHCUROZIVFVDVGVHC
      URSVEVICURAUODUSSPVAVJVCVKACDURUSQBDUSOZHZCUROZVLCUROZHZVKVCURRNVNVPTEUDV
      LCURRUELVHVMCURUSRNVHVMTFUDBDUSRUELPVBVOBCDURUSQUFUKUGUKUTULUMUHUPCDURUSQ
      UIUJ $.

    $( The intersection of two Cartesian products.  Exercise 9 of
       [TakeutiZaring] p. 25.  (Contributed by NM, 3-Aug-1994.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    inxp $p |- ( ( A X. B ) i^i ( C X. D ) ) =
                   ( ( A i^i C ) X. ( B i^i D ) ) $=
      ( vx vy cv wcel wa copab cin cxp inopab elin anbi12i bitr4i opabbii eqtri
      an4 df-xp ineq12i 3eqtr4i ) EGZAHZFGZBHZIZEFJZUCCHZUEDHZIZEFJZKZUCACKZHZU
      EBDKZHZIZEFJZABLZCDLZKUNUPLUMUGUKIZEFJUSUGUKEFMVBUREFVBUDUIIZUFUJIZIURUDU
      FUIUJSUOVCUQVDUCACNUEBDNOPQRUTUHVAULEFABTEFCDTUAEFUNUPTUB $.

    $( Distributive law for Cartesian product over intersection.  Theorem 102
       of [Suppes] p. 52.  (Contributed by NM, 26-Sep-2004.) $)
    xpindi $p |- ( A X. ( B i^i C ) ) = ( ( A X. B ) i^i ( A X. C ) ) $=
      ( cxp cin inxp inidm xpeq1i eqtr2i ) ABDACDEAAEZBCEZDAKDABACFJAKAGHI $.

    $( Distributive law for Cartesian product over intersection.  Similar to
       Theorem 102 of [Suppes] p. 52.  (Contributed by NM, 26-Sep-2004.) $)
    xpindir $p |- ( ( A i^i B ) X. C ) = ( ( A X. C ) i^i ( B X. C ) ) $=
      ( cxp cin inxp inidm xpeq2i eqtr2i ) ACDBCDEABEZCCEZDJCDACBCFKCJCGHI $.
  $}

  ${
    $d x y z A $.  $d x y z C $.  $d y z B $.
    $( Distributive law for Cartesian product over indexed intersection.
       (Contributed by Mario Carneiro, 21-Mar-2015.) $)
    xpiindi $p |- ( A =/= (/) ->
      ( C X. |^|_ x e. A B ) = |^|_ x e. A ( C X. B ) ) $=
      ( vy vz ciin cxp wrel wa wral relxp cv wcel wb eliin ax-mp opelxp 3bitr4g
      cvv wne wceq wrex rgenw r19.2z mpan2 reliin syl jctil cop r19.28zv bicomd
      c0 vex anbi2i ralbii opex eqrelrdv2 mpancom ) DABCGZHZIZABDCHZGZIZJBUMUAZ
      VAVDUBVFVEVBVFVCIZABUCZVEVFVGABKVHVGABDCLUDVGABUEUFABVCUGUHDUTLUIVFEFVAVD
      VFEMZDNZFMZUTNZJZVIVKUJZVCNZABKZVNVANVNVDNZVFVJVKCNZABKZJZVJVRJZABKZVMVPV
      FWBVTVJVRABUKULVLVSVJVKTNVLVSOFUNAVKBCTPQUOVOWAABVIVKDCRUPSVIVKDUTRVNTNVQ
      VPOVIVKUQAVNBVCTPQSURUS $.

    $( Distributive law for Cartesian product over relativized indexed
       intersection.  (Contributed by Mario Carneiro, 21-Mar-2015.) $)
    xpriindi $p |- ( C X. ( D i^i |^|_ x e. A B ) ) =
      ( ( C X. D ) i^i |^|_ x e. A ( C X. B ) ) $=
      ( ciin cin cxp wceq c0 cvv iineq1 0iin syl6eq ineq2d xpeq2d eqtr4d xpindi
      inv1 wne xpiindi syl5eq pm2.61ine ) DEABCFZGZHZDEHZABDCHZFZGZIBJBJIZUFUGU
      JUKUEEDUKUEEKGEUKUDKEUKUDAJCFKABJCLACMNOESNPUKUJUGKGUGUKUIKUGUKUIAJUHFKAB
      JUHLAUHMNOUGSNQBJTZUFUGDUDHZGUJDEUDRULUMUIUGABCDUAOUBUC $.
  $}

  ${
    $d y A $.  $d y B $.  $d x y C $.  $d x y D $.  $d x E $.  $d x V $.
    $( Membership in a union of Cartesian products.  Analogue of ~ elxp for
       nonconstant ` B ( x ) ` .  (Contributed by Mario Carneiro,
       29-Dec-2014.) $)
    eliunxp $p |- ( C e. U_ x e. A ( { x } X. B ) <->
      E. x E. y ( C = <. x , y >. /\ ( x e. A /\ y e. B ) ) ) $=
      ( cv csn cxp ciun wcel cop wceq wex wa wrel wral relxp rgenw reliun exbii
      mpbir elrel mpan pm4.71ri nfiu1 nfel2 19.41 19.41v eleq1 opeliunxp syl6bb
      pm5.32i bitr3i 3bitr2i ) EACAFZGZDHZIZJZEUOBFZKZLZBMZAMZUSNVCUSNZAMVBUOCJ
      UTDJNZNZBMZAMUSVDUROZUSVDVIUQOZACPVJACUPDQRACUQSUAABEURUBUCUDVCUSAAEURACU
      QUEUFUGVEVHAVEVBUSNZBMVHVBUSBUHVKVGBVBUSVFVBUSVAURJVFEVAURUIACDUTUJUKULTU
      MTUN $.

    $d x A $.
    opeliunxp2.1 $e |- ( x = C -> B = E ) $.
    $( Membership in a union of Cartesian products.  (Contributed by Mario
       Carneiro, 14-Feb-2015.) $)
    opeliunxp2 $p |- ( <. C , D >. e. U_ x e. A ( { x } X. B ) <->
      ( C e. A /\ D e. E ) ) $=
      ( cop cv csn cxp ciun wcel cvv wa wbr df-br wrel wral wb relxp rgenw elex
      reliun mpbir brrelexi sylbir adantr nfiu1 nfel2 nfv nfbi wceq opeq1 eleq1
      eleq1d eleq2d anbi12d bibi12d opeliunxp vtoclg1f pm5.21nii ) DEHZABAIZJZC
      KZLZMZDNMZDBMZEFMZOZVHDEVGPVIDEVGQDEVGVGRVFRZABSVMABVECUAUBABVFUDUEUFUGVJ
      VIVKDBUCUHVDEHZVGMZVDBMZECMZOZTVHVLTADNVHVLAAVCVGABVFUIUJVLAUKULVDDUMZVOV
      HVRVLVSVNVCVGVDDEUNUPVSVPVJVQVKVDDBUOVSCFEGUQURUSABCEUTVAVB $.
  $}

  ${
    $d x y z A $.  $d x z B $.  $d y z ph $.  $d x ps $.
    ralxp.1 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Write a double restricted quantification as one universal quantifier.
       In this version of ~ ralxp , ` B ( y ) ` is not assumed to be constant.
       (Contributed by Mario Carneiro, 29-Dec-2014.) $)
    raliunxp $p |- ( A. x e. U_ y e. A ( { y } X. B ) ph <->
      A. y e. A A. z e. B ps ) $=
      ( cv csn cxp ciun wcel wi wal wa wral wex albii bitri wceq eliunxp imbi1i
      cop 19.23vv bitr4i alrot3 impexp opex imbi2d ceqsalv 2albii r2al 3bitr4i
      df-ral ) CIZDFDIZJGKLZMZANZCOZUQFMEIZGMPZBNZEODOZACURQBEGQDFQVAUPUQVBUDZU
      AZVCPZANZEODOZCOZVEUTVJCUTVHERDRZANVJUSVLADEFGUPUBUCVHADEUEUFSVKVICOZEODO
      VEVICDEUGVMVDDEVMVGVCANZNZCOVDVIVOCVGVCAUHSVNVDCVFUQVBUIVGABVCHUJUKTULTTA
      CURUOBDEFGUMUN $.

    $( Write a double restricted quantification as one universal quantifier.
       In this version of ~ rexxp , ` B ( y ) ` is not assumed to be constant.
       (Contributed by Mario Carneiro, 14-Feb-2015.) $)
    rexiunxp $p |- ( E. x e. U_ y e. A ( { y } X. B ) ph <->
      E. y e. A E. z e. B ps ) $=
      ( wn cv csn cxp ciun wral wrex cop wceq notbid raliunxp dfrex2 3bitr4i
      ralnex ralbii bitri notbii ) AIZCDFDJZKGLMZNZIBEGOZIZDFNZIACUHOUJDFOUIULU
      IBIZEGNZDFNULUFUMCDEFGCJUGEJPQABHRSUNUKDFBEGUBUCUDUEACUHTUJDFTUA $.

    $d y B $.
    $( Universal quantification restricted to a Cartesian product is equivalent
       to a double restricted quantification.  The hypothesis specifies an
       implicit substitution.  (Contributed by NM, 7-Feb-2004.)  (Revised by
       Mario Carneiro, 29-Dec-2014.) $)
    ralxp $p |- ( A. x e. ( A X. B ) ph <-> A. y e. A A. z e. B ps ) $=
      ( cxp wral cv csn ciun iunxpconst raleqi raliunxp bitr3i ) ACFGIZJACDFDKL
      GIMZJBEGJDFJACSRDFGNOABCDEFGHPQ $.

    $( Existential quantification restricted to a Cartesian product is
       equivalent to a double restricted quantification.  (Contributed by NM,
       11-Nov-1995.)  (Revised by Mario Carneiro, 14-Feb-2015.) $)
    rexxp $p |- ( E. x e. ( A X. B ) ph <-> E. y e. A E. z e. B ps ) $=
      ( cxp wrex cv csn ciun iunxpconst rexeqi rexiunxp bitr3i ) ACFGIZJACDFDKL
      GIMZJBEGJDFJACSRDFGNOABCDEFGHPQ $.
  $}

  ${
    $d y z ph $.  $d x ps $.  $d x y z $.
    exopxfr.1 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Transfer ordered-pair existence from/to single variable existence.
       (Contributed by NM, 26-Feb-2014.)  (Proof shortened by Mario Carneiro,
       31-Aug-2015.) $)
    exopxfr $p |- ( E. x e. ( _V X. _V ) ph <-> E. y E. z ps ) $=
      ( cvv cxp wrex wex rexxp rexv exbii 3bitri ) ACGGHIBEGIZDGIODJBEJZDJABCDE
      GGFKODLOPDBELMN $.
  $}

  ${
    $d x y z A $.  $d y z ph $.  $d x ps $.
    exopxfr2.1 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Transfer ordered-pair existence from/to single variable existence.
       (Contributed by NM, 26-Feb-2014.) $)
    exopxfr2 $p |- ( Rel A -> ( E. x e. A ph
              <-> E. y E. z ( <. y , z >. e. A /\ ps ) ) ) $=
      ( wrel wrex cv wcel wa cvv cxp cop wex wss df-rel biimpi sseld wceq eleq1
      adantrd pm4.71rd rexbidv2 anbi12d exopxfr syl6bb ) FHZACFICJZFKZALZCMMNZI
      DJEJOZFKZBLZEPDPUIAULCFUMUIULUJUMKZUIUKUQAUIFUMUJUIFUMQFRSTUCUDUEULUPCDEU
      JUNUAUKUOABUJUNFUBGUFUGUH $.
  $}

  ${
    $d x A $.
    $( Disjoint union is a subset of a Cartesian product.  (Contributed by
       Stefan O'Rear, 21-Nov-2014.) $)
    djussxp $p |- U_ x e. A ( { x } X. B ) C_ ( A X. _V ) $=
      ( cv csn cxp ciun cvv wss iunss wcel snssi ssv xpss12 sylancl mprgbir ) A
      BADZEZCFZGBHFZISTIZABABSTJQBKRBICHIUAQBLCMRBCHNOP $.
  $}

  ${
    $d u v w x y A $.  $d u v w x y z B $.  $d u v w ph $.  $d u v w ps $.
    ralxpf.1 $e |- F/ y ph $.
    ralxpf.2 $e |- F/ z ph $.
    ralxpf.3 $e |- F/ x ps $.
    ralxpf.4 $e |- ( x = <. y , z >. -> ( ph <-> ps ) ) $.
    $( Version of ~ ralxp with bound-variable hypotheses.  (Contributed by NM,
       18-Aug-2006.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    ralxpf $p |- ( A. x e. ( A X. B ) ph <-> A. y e. A A. z e. B ps ) $=
      ( vw vu vv wral wsb cv wceq vex nfsb cxp cbvralsv ralbii nfcv nfs1v nfral
      nfv sbequ12 ralbidv cbvral cop wa wex wb eqvinop nfbi opth sylan9bb sylbi
      sbhypf exlimi ralxp 3bitr4ri bitri ) ACFGUAZOACLPZLVEOZBEGOZDFOZACLVEUBBD
      MPZEGOZMFOVJENPZNGOZMFOVIVGVKVMMFVJENGUBUCVHVKDMFVHMUGVJDEGDGUDBDMUEZUFDQ
      ZMQZRZBVJEGBDMUHZUIUJVFVLLMNFGLQZVPNQZUKZRVSVOEQZUKZRZWCWARZULZEUMZDUMVFV
      LUNZDEVSVPVTMSNSUOWGWHDVFVLDACLDHTVJENDVNTUPWFWHEVFVLEACLEITVJENUEUPWDVFB
      WEVLABCLWCJKUTWEVQWBVTRZULBVLUNVOWBVPVTDSESUQVQBVJWIVLVRVJENUHURUSURVAVAU
      SVBVCVD $.

    $( Version of ~ rexxp with bound-variable hypotheses.  (Contributed by NM,
       19-Dec-2008.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    rexxpf $p |- ( E. x e. ( A X. B ) ph <-> E. y e. A E. z e. B ps ) $=
      ( wn cxp wral wrex nfn cv cop wceq dfrex2 notbid ralxpf ralnex 3bitr4i
      ralbii bitri notbii ) ALZCFGMZNZLBEGOZLZDFNZLACUIOUKDFOUJUMUJBLZEGNZDFNUM
      UHUNCDEFGADHPAEIPBCJPCQDQEQRSABKUAUBUOULDFBEGUCUEUFUGACUITUKDFTUD $.
  $}

  ${
    $d w x y A $.  $d w x y z B $.  $d w C $.  $d w D $.
    iunxpf.1 $e |- F/_ y C $.
    iunxpf.2 $e |- F/_ z C $.
    iunxpf.3 $e |- F/_ x D $.
    iunxpf.4 $e |- ( x = <. y , z >. -> C = D ) $.
    $( Indexed union on a Cartesian product is equals a double indexed union.
       The hypothesis specifies an implicit substitution.  (Contributed by NM,
       19-Dec-2008.) $)
    iunxpf $p |- U_ x e. ( A X. B ) C = U_ y e. A U_ z e. B D $=
      ( vw cxp ciun cv wcel wrex nfcri cop eliun wceq eleq2d rexxpf bitri eqriv
      rexbii 3bitr4i ) LADEMZFNZBDCEGNZNZLOZFPZAUHQULGPZCEQZBDQZULUIPULUKPZUMUN
      ABCDEBLFHRCLFIRALGJRAOBOCOSUAFGULKUBUCAULUHFTUQULUJPZBDQUPBULDUJTURUOBDCU
      LEGTUFUDUGUE $.
  $}

  ${
    $d x y A $.  $d x y ph $.
    opabbi2dv.1 $e |- Rel A $.
    opabbi2dv.3 $e |- ( ph -> ( <. x , y >. e. A <-> ps ) ) $.
    $( Deduce equality of a relation and an ordered-pair class builder.
       Compare ~ abbi2dv .  (Contributed by NM, 24-Feb-2014.) $)
    opabbi2dv $p |- ( ph -> A = { <. x , y >. | ps } ) $=
      ( cv cop wcel copab wrel wceq opabid2 ax-mp opabbidv syl5eqr ) AECHDHIEJZ
      CDKZBCDKELSEMFCDENOARBCDGPQ $.
  $}

  ${
    $d v w x y z A $.  $d v w x y z B $.
    relop.1 $e |- A e. _V $.
    relop.2 $e |- B e. _V $.
    $( A necessary and sufficient condition for a Kuratowski ordered pair to be
       a relation.  (Contributed by NM, 3-Jun-2008.)  (Avoid depending on this
       detail.) $)
    relop $p |- ( Rel <. A , B >.
             <-> E. x E. y ( A = { x } /\ B = { x , y } ) ) $=
      ( vz vw vv cop cv wceq cpr wa wex wi wal vex bitri eqeq2d cvv cxp wss csn
      wrel df-rel wcel dfss2 wo elop elvv imbi12i jaob albii 19.26 eqeq1 opeqsn
      snex eqcom syl6bb 2exbidv spcv sneq cbvexv ax6ev equcom exbii mpbi 19.41v
      imbi12d mpbiran eqid a1bi 3bitr2ri sylib prex mpi opeqpr idd eqtr2 preqsn
      simplbi syl dfsn2 preq2 syl5req syl5eq anbi12d biimpd com12 adantr expcom
      expd mpd impd jaod syl5bi 2eximdv exlimiv syl2an sylbi simpr equid sylibr
      jctl eqtr4d opeq12 spc2ev adantlr preq12 biimpa syl6eqr jaodan ex 3imtr4g
      imp dfop ssrdv exlimivv impbii ) CDJZUEYAUAUAUBZUCZCAKZUDZLZDYDBKZMZLZNZB
      OAOZYAUFYCYKYCGKZCUDZLZYLYDYGJZLZBOAOZPZGQZYLCDMZLZYQPZGQZNZYKYCYLYAUGZYL
      YBUGZPZGQZUUDGYAYBUHUUHYRUUBNZGQUUDUUGUUIGUUGYNUUAUIZYQPUUIUUEUUJUUFYQYLC
      DGREFUJZABYLUKULYNYQUUAUMSUNYRUUBGUOSSYSCHKZUDZLZHOZYTYOLZBOAOZYKUUCYSYMY
      MLZYDYGLZYFNZBOZAOZPZUUOYRUVCGYMCURYNYNUURYQUVBYLYMYMUPYNYPUUTABYNYPYMYOL
      ZUUTYLYMYOUPUVDYOYMLUUTYMYOUSYDYGCARZBRZEUQSUTVAVJVBUUOYFAOUVBUVCUUNYFHAU
      ULYDLZUUMYECUULYDVCTVDUVAYFAUVAUUSBOZYFYGYDLZBOUVHBAVEUVIUUSBBAVFVGVHUUSY
      FBVIVKVGUURUVBYMVLVMVNVOUUCYTYTLZUUQYTVLUUBUVJUUQPGYTCDVPUUAUUAUVJYQUUQYL
      YTYTUPUUAYPUUPABYLYTYOUPVAVJVBVQUUOUUQYKUUNUUQYKPHUUNUUPYJABUUPYJCYHLZDYE
      LZNZUIZUUNYJUUPYOYTLUVNYTYOUSYDYGCDUVEUVFEFVRSUUNYJYJUVMUUNYJVSUUNUVKUVLY
      JUVKUUNUVLYJPZUVKUUNNZUUSUVOUVPYHUUMLZUUSCYHUUMVTUVQUUSYGUULLYDYGUULUVEUV
      FHRWAWBWCUVKUUSUVOPUUNUUSUVKUVOUUSUVKUVLYJUUSUVMYJUUSUVKYFUVLYIUUSYHYECUU
      SYEYDYDMZYHYDWDZYDYGYDWEZWFTUUSYEYHDUUSYEUVRYHUVSUVTWGTWHWIWMWJWKWNWLWOWP
      WQWRWSXPWTXAYJYCABYJGYAYBYJUUJYLUULIKZJZLZIOHOZUUEUUFYJUUJUWDYJYNUWDUUAYF
      YNUWDYIYFYNNZYLYDYDJZLZUWDUWEYLYMUWFYFYNXBYFUWFYMLZYNYFYDYDLZYFNUWHYFUWIA
      XCXEYDYDCUVEUVEEUQXDWKXFUWCUWGHIYDYDUVEUVEUVGUWAYDLNUWBUWFYLUULUWAYDYDXGT
      XHWCXIYJUUANZYPUWDUWJYLYEYHMZYOYJUUAYLUWKLYJYTUWKYLCDYEYHXJTXKYDYGUVEUVFX
      QXLUWCYPHIYDYGUVEUVFUVGUWAYGLNUWBYOYLUULUWAYDYGXGTXHWCXMXNUUKHIYLUKXOXRXS
      XTS $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( For sets, the identity relation is the same as equality.  (Contributed
       by NM, 30-Apr-2004.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    ideqg $p |- ( B e. V -> ( A _I B <-> A = B ) ) $=
      ( vx vy wcel cid wbr wceq cvv wa brrelexi adantl simpl jca eleq1 biimparc
      reli elex cv syl eqeq1 eqeq2 df-id brabg pm5.21nd ) BCFZABGHZABIZAJFZUGKU
      GUHKUJUGUHUJUGABGRLMUGUHNOUGUIKZUJUGUKACFZUJUIULUGABCPQACSUAUGUINODTZETZI
      AUNIUIDEABJCGUMAUNUBUNBAUCDEUDUEUF $.
  $}

  ${
    ideq.1 $e |- B e. _V $.
    $( For sets, the identity relation is the same as equality.  (Contributed
       by NM, 13-Aug-1995.) $)
    ideq $p |- ( A _I B <-> A = B ) $=
      ( cvv wcel cid wbr wceq wb ideqg ax-mp ) BDEABFGABHICABDJK $.
  $}

  ${
    $d x A $.
    $( A set is identical to itself.  (Contributed by NM, 28-May-2008.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    ididg $p |- ( A e. V -> A _I A ) $=
      ( wcel cid wbr wceq eqid ideqg mpbiri ) ABCAADEAAFAGAABHI $.
  $}

  $( Two ways of expressing set existence.  (Contributed by NM, 16-Feb-2008.)
     (Proof shortened by Andrew Salmon, 27-Aug-2011.)  (Revised by Mario
     Carneiro, 26-Apr-2015.) $)
  issetid $p |- ( A e. _V <-> A _I A ) $=
    ( cvv wcel cid wbr ididg reli brrelexi impbii ) ABCAADEABFAADGHI $.

  ${
    $d A x y z $.  $d B x y z $.  $d C x y z $.
    $( Subclass theorem for composition.  (Contributed by FL, 30-Dec-2010.) $)
    coss1 $p |- ( A C_ B -> ( A o. C ) C_ ( B o. C ) ) $=
      ( vx vy vz wss cv wbr wa wex copab id ssbrd anim2d eximdv ssopab2dv df-co
      ccom 3sstr4g ) ABGZDHEHZCIZUBFHZAIZJZEKZDFLUCUBUDBIZJZEKZDFLACSBCSUAUGUJD
      FUAUFUIEUAUEUHUCUAABUBUDUAMNOPQDFEACRDFEBCRT $.

    $( Subclass theorem for composition.  (Contributed by NM, 5-Apr-2013.) $)
    coss2 $p |- ( A C_ B -> ( C o. A ) C_ ( C o. B ) ) $=
      ( vx vy vz wss cv wbr wa wex copab id ssbrd anim1d eximdv ssopab2dv df-co
      ccom 3sstr4g ) ABGZDHZEHZAIZUCFHCIZJZEKZDFLUBUCBIZUEJZEKZDFLCASCBSUAUGUJD
      FUAUFUIEUAUDUHUEUAABUBUCUAMNOPQDFECARDFECBRT $.
  $}

  $( Equality theorem for composition of two classes.  (Contributed by NM,
     3-Jan-1997.) $)
  coeq1 $p |- ( A = B -> ( A o. C ) = ( B o. C ) ) $=
    ( wss wa ccom wceq coss1 anim12i eqss 3imtr4i ) ABDZBADZEACFZBCFZDZONDZEABG
    NOGLPMQABCHBACHIABJNOJK $.

  $( Equality theorem for composition of two classes.  (Contributed by NM,
     3-Jan-1997.) $)
  coeq2 $p |- ( A = B -> ( C o. A ) = ( C o. B ) ) $=
    ( wss wa ccom wceq coss2 anim12i eqss 3imtr4i ) ABDZBADZECAFZCBFZDZONDZEABG
    NOGLPMQABCHBACHIABJNOJK $.

  ${
    coeq1i.1 $e |- A = B $.
    $( Equality inference for composition of two classes.  (Contributed by NM,
       16-Nov-2000.) $)
    coeq1i $p |- ( A o. C ) = ( B o. C ) $=
      ( wceq ccom coeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for composition of two classes.  (Contributed by NM,
       16-Nov-2000.) $)
    coeq2i $p |- ( C o. A ) = ( C o. B ) $=
      ( wceq ccom coeq2 ax-mp ) ABECAFCBFEDABCGH $.
  $}

  ${
    coeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for composition of two classes.  (Contributed by NM,
       16-Nov-2000.) $)
    coeq1d $p |- ( ph -> ( A o. C ) = ( B o. C ) ) $=
      ( wceq ccom coeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for composition of two classes.  (Contributed by NM,
       16-Nov-2000.) $)
    coeq2d $p |- ( ph -> ( C o. A ) = ( C o. B ) ) $=
      ( wceq ccom coeq2 syl ) ABCFDBGDCGFEBCDHI $.
  $}

  ${
    coeq12i.1 $e |- A = B $.
    coeq12i.2 $e |- C = D $.
    $( Equality inference for composition of two classes.  (Contributed by FL,
       7-Jun-2012.) $)
    coeq12i $p |- ( A o. C ) = ( B o. D ) $=
      ( ccom coeq1i coeq2i eqtri ) ACGBCGBDGABCEHCDBFIJ $.
  $}

  ${
    coeq12d.1 $e |- ( ph -> A = B ) $.
    coeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for composition of two classes.  (Contributed by FL,
       7-Jun-2012.) $)
    coeq12d $p |- ( ph -> ( A o. C ) = ( B o. D ) ) $=
      ( ccom coeq1d coeq2d eqtrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  ${
    $d w x y z $.  $d y z w A $.  $d y z w B $.
    nfco.1 $e |- F/_ x A $.
    nfco.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for function value.  (Contributed by
       NM, 1-Sep-1999.) $)
    nfco $p |- F/_ x ( A o. B ) $=
      ( vy vw vz ccom cv wbr wa wex copab df-co nfcv nfbr nfan nfex nfopab
      nfcxfr ) ABCIFJZGJZCKZUCHJZBKZLZGMZFHNFHGBCOUHFHAUGAGUDUFAAUBUCCAUBPEAUCP
      ZQAUCUEBUIDAUEPQRSTUA $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z D $.
    $( Ordered pair membership in a composition.  (Contributed by NM,
       24-Feb-2015.) $)
    brcog $p |- ( ( A e. V /\ B e. W ) -> ( A ( C o. D ) B <->
                   E. x ( A D x /\ x C B ) ) ) $=
      ( vy vz cv wbr wa wex ccom wceq breq1 breq2 bi2anan9 exbidv df-co brabga
      ) HJZAJZEKZUCIJZDKZLZAMBUCEKZUCCDKZLZAMHIBCDENFGUBBOZUECOZLUGUJAUKUDUHULU
      FUIUBBUCEPUECUCDQRSHIADETUA $.

    $( Ordered pair membership in a composition.  (Contributed by NM,
       27-Jan-1997.)  (Revised by Mario Carneiro, 24-Feb-2015.) $)
    opelco2g $p |- ( ( A e. V /\ B e. W ) -> ( <. A , B >. e. ( C o. D ) <->
                   E. x ( <. A , x >. e. D /\ <. x , B >. e. C ) ) ) $=
      ( wcel wa ccom wbr cv wex cop brcog df-br anbi12i exbii 3bitr3g ) BFHCGHI
      BCDEJZKBALZEKZUACDKZIZAMBCNTHBUANEHZUACNDHZIZAMABCDEFGOBCTPUDUGAUBUEUCUFB
      UAEPUACDPQRS $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x D $.  $d x X $.
    $( Ordered pair membership in a composition.  (Contributed by Thierry
       Arnoux, 14-Jan-2018.) $)
    brcogw $p |- ( ( ( A e. V /\ B e. W /\ X e. Z ) /\ ( A D X /\ X C B ) )
      -> A ( C o. D ) B ) $=
      ( vx wcel w3a wbr wa cv wex ccom simpl1 simpl2 wceq breq2 breq1 3ad2antl3
      anbi12d spcegv imp brcog biimpar syl21anc ) AEJZBFJZGHJZKAGDLZGBCLZMZMUIU
      JAINZDLZUOBCLZMZIOZABCDPLZUIUJUKUNQUIUJUKUNRUKUIUNUSUJUKUNUSURUNIGHUOGSUP
      ULUQUMUOGADTUOGBCUAUCUDUEUBUIUJMUTUSIABCDEFUFUGUH $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d ph x $.  $d ph y $.
    eqbrrdva.1 $e |- ( ph -> A C_ ( C X. D ) ) $.
    eqbrrdva.2 $e |- ( ph -> B C_ ( C X. D ) ) $.
    eqbrrdva.3 $e |- ( ( ph /\ x e. C /\ y e. D ) -> ( x A y <-> x B y ) ) $.
    $( Deduction from extensionality principle for relations, given an
       equivalence only on the relation's domain and range.  (Contributed by
       Thierry Arnoux, 28-Nov-2017.) $)
    eqbrrdva $p |- ( ph -> A = B ) $=
      ( cvv cxp wss wrel syl6ss df-rel sylibr cv wcel wbr xpss wa ssbrd brxp wb
      syl6ib 3expib pm5.21ndd eqbrrdv ) ABCDEADKKLZMDNADFGLZUJHFGUAZODPQAEUJMEN
      AEUKUJIULOEPQABRZFSZCRZGSZUBZUMUODTZUMUOETZAURUMUOUKTZUQADUKUMUOHUCUMUOFG
      UDZUFAUSUTUQAEUKUMUOIUCVAUFAUNUPURUSUEJUGUHUI $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z D $.
    opelco.1 $e |- A e. _V $.
    opelco.2 $e |- B e. _V $.
    $( Binary relation on a composition.  (Contributed by NM, 21-Sep-2004.)
       (Revised by Mario Carneiro, 24-Feb-2015.) $)
    brco $p |- ( A ( C o. D ) B <-> E. x ( A D x /\ x C B ) ) $=
      ( cvv wcel ccom wbr cv wa wex wb brcog mp2an ) BHICHIBCDEJKBALZEKRCDKMANO
      FGABCDEHHPQ $.

    $( Ordered pair membership in a composition.  (Contributed by NM,
       27-Dec-1996.)  (Revised by Mario Carneiro, 24-Feb-2015.) $)
    opelco $p |- ( <. A , B >. e. ( C o. D ) <-> E. x ( A D x /\ x C B ) ) $=
      ( cop ccom wcel wbr cv wa wex df-br brco bitr3i ) BCHDEIZJBCRKBALZEKSCDKM
      ANBCROABCDEFGPQ $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Subset theorem for converse.  (Contributed by NM, 22-Mar-1998.) $)
    cnvss $p |- ( A C_ B -> `' A C_ `' B ) $=
      ( vy vx wss wbr copab ccnv cop wcel ssel 3imtr4g ssopab2dv df-cnv 3sstr4g
      cv df-br ) ABEZCPZDPZAFZDCGSTBFZDCGAHBHRUAUBDCRSTIZAJUCBJUAUBABUCKSTAQSTB
      QLMDCANDCBNO $.
  $}

  $( Equality theorem for converse.  (Contributed by NM, 13-Aug-1995.) $)
  cnveq $p |- ( A = B -> `' A = `' B ) $=
    ( wss wa ccnv wceq cnvss anim12i eqss 3imtr4i ) ABCZBACZDAEZBEZCZNMCZDABFMN
    FKOLPABGBAGHABIMNIJ $.

  ${
    cnveqi.1 $e |- A = B $.
    $( Equality inference for converse.  (Contributed by NM, 23-Dec-2008.) $)
    cnveqi $p |- `' A = `' B $=
      ( wceq ccnv cnveq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    cnveqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for converse.  (Contributed by NM, 6-Dec-2013.) $)
    cnveqd $p |- ( ph -> `' A = `' B ) $=
      ( wceq ccnv cnveq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d x y A $.  $d x y R $.
    $( Membership in a converse.  Equation 5 of [Suppes] p. 62.  (Contributed
       by NM, 24-Mar-1998.) $)
    elcnv $p |- ( A e. `' R <-> E. x E. y ( A = <. x , y >. /\ y R x ) ) $=
      ( ccnv wcel cv wbr copab cop wceq wa wex df-cnv eleq2i elopab bitri ) CDE
      ZFCBGZAGZDHZABIZFCTSJKUALBMAMRUBCABDNOUAABCPQ $.

    $( Membership in a converse.  Equation 5 of [Suppes] p. 62.  (Contributed
       by NM, 11-Aug-2004.) $)
    elcnv2 $p |- ( A e. `' R <->
                 E. x E. y ( A = <. x , y >. /\ <. y , x >. e. R ) ) $=
      ( ccnv wcel cv cop wceq wbr wa wex elcnv df-br anbi2i 2exbii bitri ) CDEF
      CAGZBGZHIZSRDJZKZBLALTSRHDFZKZBLALABCDMUBUDABUAUCTSRDNOPQ $.
  $}

  ${
    $d y z A $.  $d x y z $.
    nfcnv.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for converse.  (Contributed by NM,
       31-Jan-2004.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfcnv $p |- F/_ x `' A $=
      ( vz vy ccnv cv wbr copab df-cnv nfcv nfbr nfopab nfcxfr ) ABFDGZEGZBHZED
      IEDBJQEDAAOPBAOKCAPKLMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.
    $( Ordered-pair membership in converse.  (Contributed by NM, 13-May-1999.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    opelcnvg $p |- ( ( A e. C /\ B e. D ) ->
                     ( <. A , B >. e. `' R <-> <. B , A >. e. R ) ) $=
      ( vy vx wcel wa ccnv wbr cop cv breq2 breq1 df-cnv brabg df-br 3bitr3g )
      ACHBDHIABEJZKBAEKZABLTHBALEHFMZGMZEKUBAEKUAGFABCDTUCAUBENUBBAEOGFEPQABTRB
      AERS $.
  $}

  $( The converse of a binary relation swaps arguments.  Theorem 11 of [Suppes]
     p. 61.  (Contributed by NM, 10-Oct-2005.) $)
  brcnvg $p |- ( ( A e. C /\ B e. D ) -> ( A `' R B <-> B R A ) ) $=
    ( wcel wa cop ccnv wbr opelcnvg df-br 3bitr4g ) ACFBDFGABHEIZFBAHEFABNJBAEJ
    ABCDEKABNLBAELM $.

  ${
    opelcnv.1 $e |- A e. _V $.
    opelcnv.2 $e |- B e. _V $.
    $( Ordered-pair membership in converse.  (Contributed by NM,
       13-Aug-1995.) $)
    opelcnv $p |- ( <. A , B >. e. `' R <-> <. B , A >. e. R ) $=
      ( cvv wcel cop ccnv wb opelcnvg mp2an ) AFGBFGABHCIGBAHCGJDEABFFCKL $.

    $( The converse of a binary relation swaps arguments.  Theorem 11 of
       [Suppes] p. 61.  (Contributed by NM, 13-Aug-1995.) $)
    brcnv $p |- ( A `' R B <-> B R A ) $=
      ( cvv wcel ccnv wbr wb brcnvg mp2an ) AFGBFGABCHIBACIJDEABFFCKL $.
  $}

  ${
    $d y z A $.  $d y z F $.  $d y z V $.  $d x y z $.
    $( Move class substitution in and out of the converse of a function.
       Version of ~ csbcnvgALT without a sethood antecedent but depending on
       more axioms.  (Contributed by Thierry Arnoux, 8-Feb-2017.)  (Revised by
       NM, 23-Aug-2018.) $)
    csbcnv $p |- `' [_ A / x ]_ F = [_ A / x ]_ `' F $=
      ( vz vy csb ccnv cv wbr copab wsbc sbcbr opabbii csbopab 3eqtr4ri csbeq2i
      df-cnv eqtr4i ) ABCFZGZABDHZEHZCIZEDJZFZABCGZFUCABKZEDJUAUBSIZEDJUETUGUHE
      DABUAUBCLMUCAEDBNEDSQOABUFUDEDCQPR $.

    $( Move class substitution in and out of the converse of a function.
       Version of ~ csbcnv with a sethood antecedent but depending on fewer
       axioms.  (Contributed by Thierry Arnoux, 8-Feb-2017.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbcnvgALT $p |- ( A e. V -> `' [_ A / x ]_ F = [_ A / x ]_ `' F ) $=
      ( vz vy wcel csb ccnv cv wbr copab wsbc sbcbr123 csbconstg breq12d syl5bb
      opabbidv csbopabgALT df-cnv wceq a1i 3eqtr4rd csbeq2i syl6eqr ) BDGZABCHZ
      IZABEJZFJZCKZFELZHZABCIZHUFUKABMZFELUIUJUGKZFELZUMUHUFUOUPFEUOABUIHZABUJH
      ZUGKUFUPABUIUJCNUFURUIUSUJUGABUIDOABUJDOPQRUKAFEBDSUHUQUAUFFEUGTUBUCABUNU
      LFECTUDUE $.
  $}

  ${
    $d x y z A $.  $d x y z B $.
    $( Distributive law of converse over class composition.  Theorem 26 of
       [Suppes] p. 64.  (Contributed by NM, 19-Mar-1998.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.) $)
    cnvco $p |- `' ( A o. B ) = ( `' B o. `' A ) $=
      ( vx vy vz cv ccom wbr copab ccnv wa wex exancom brco brcnv anbi12i exbii
      vex 3bitr4i opabbii df-cnv df-co 3eqtr4i ) CFZDFZABGZHZDCIUEEFZAJZHZUHUDB
      JZHZKZELZDCIUFJUKUIGUGUNDCUDUHBHZUHUEAHZKELUPUOKZELUGUNUOUPEMEUDUEABCRZDR
      ZNUMUQEUJUPULUOUEUHAUSERZOUHUDBUTUROPQSTDCUFUADCEUKUIUBUC $.
  $}

  ${
    $d x y z w A $.
    $( The converse of a class union is the (indexed) union of the converses of
       its members.  (Contributed by NM, 11-Aug-2004.) $)
    cnvuni $p |- `' U. A = U_ x e. A `' x $=
      ( vy vz vw cuni ccnv cv ciun wcel wrex cop wa elcnv2 eluni2 anbi2i bitr4i
      wceq wex rexcom4 r19.42v 2exbii rexbii exbii 3bitrri 3bitri eliun eqriv )
      CBFZGZABAHZGZIZCHZUJJZUNULJZABKZUNUMJUOUNDHZEHZLRZUSURLZUIJZMZESDSUTVAUKJ
      ZMZABKZESZDSZUQDEUNUINVCVFDEVCUTVDABKZMVFVBVIUTAVABOPUTVDABUAQUBUQVEESZDS
      ZABKVJABKZDSVHUPVKABDEUNUKNUCVJADBTVLVGDVEAEBTUDUEUFAUNBULUGQUH $.
  $}

  ${
    $d x y A $.
    $( Alternate definition of domain.  Definition 6.5(1) of [TakeutiZaring]
       p. 24.  (Contributed by NM, 28-Dec-1996.) $)
    dfdm3 $p |- dom A = { x | E. y <. x , y >. e. A } $=
      ( cdm cv wbr wex cab cop wcel df-dm df-br exbii abbii eqtri ) CDAEZBEZCFZ
      BGZAHPQICJZBGZAHABCKSUAARTBPQCLMNO $.

    $( Alternate definition of range.  Definition 4 of [Suppes] p. 60.
       (Contributed by NM, 27-Dec-1996.) $)
    dfrn2 $p |- ran A = { y | E. x x A y } $=
      ( crn ccnv cdm cv wbr wex cab df-rn df-dm vex brcnv exbii abbii 3eqtri )
      CDCEZFBGZAGZRHZAIZBJTSCHZAIZBJCKBARLUBUDBUAUCASTCBMAMNOPQ $.

    $( Alternate definition of range.  Definition 6.5(2) of [TakeutiZaring]
       p. 24.  (Contributed by NM, 28-Dec-1996.) $)
    dfrn3 $p |- ran A = { y | E. x <. x , y >. e. A } $=
      ( crn cv wbr wex cab cop wcel dfrn2 df-br exbii abbii eqtri ) CDAEZBEZCFZ
      AGZBHPQICJZAGZBHABCKSUABRTAPQCLMNO $.
  $}

  ${
    $d A x y $.  $d B x y $.
    $( Membership in a range.  (Contributed by Scott Fenton, 2-Feb-2011.) $)
    elrn2g $p |- ( A e. V -> ( A e. ran B <-> E. x <. x , A >. e. B ) ) $=
      ( vy cv cop wcel wex crn wceq opeq2 eleq1d exbidv dfrn3 elab2g ) AFZEFZGZ
      CHZAIQBGZCHZAIEBCJDRBKZTUBAUCSUACRBQLMNAECOP $.

    $( Membership in a range.  (Contributed by Scott Fenton, 2-Feb-2011.) $)
    elrng $p |- ( A e. V -> ( A e. ran B <-> E. x x B A ) ) $=
      ( wcel crn cv cop wex wbr elrn2g df-br exbii syl6bbr ) BDEBCFEAGZBHCEZAIO
      BCJZAIABCDKQPAOBCLMN $.
  $}

  ${
    $d x y A $.
    $( Alternate definition of domain.  (Contributed by NM, 28-Dec-1996.) $)
    dfdm4 $p |- dom A = ran `' A $=
      ( vy vx cv wbr wex cab crn cdm vex brcnv exbii abbii dfrn2 df-dm 3eqtr4ri
      ccnv ) BDZCDZAQZEZBFZCGSRAEZBFZCGTHAIUBUDCUAUCBRSABJCJKLMBCTNCBAOP $.
  $}

  ${
    $d x y w v $.  $d w v A $.
    dfdmf.1 $e |- F/_ x A $.
    dfdmf.2 $e |- F/_ y A $.
    $( Definition of domain, using bound-variable hypotheses instead of
       distinct variable conditions.  (Contributed by NM, 8-Mar-1995.)
       (Revised by Mario Carneiro, 15-Oct-2016.) $)
    dfdmf $p |- dom A = { x | E. y x A y } $=
      ( vw vv cdm cv wbr wex cab df-dm nfcv nfbr nfv breq2 cbvex abbii nfex weq
      breq1 exbidv cbvab 3eqtri ) CHFIZGIZCJZGKZFLUFBIZCJZBKZFLAIZUJCJZBKZALFGC
      MUIULFUHUKGBBUFUGCBUFNEBUGNOUKGPUGUJUFCQRSULUOFAUKABAUFUJCAUFNDAUJNOTUOFP
      FAUAUKUNBUFUMUJCUBUCUDUE $.
  $}

  ${
    $d A w y $.  $d B w y $.  $d V w y $.  $d x w y $.
    $( Distribute proper substitution through the domain of a class.
       (Contributed by Alexander van der Vekens, 23-Jul-2017.)  (Revised by NM,
       24-Aug-2018.) $)
    csbdm $p |- [_ A / x ]_ dom B = dom [_ A / x ]_ B $=
      ( vy vw cv cop wcel wex cab csb cdm csbab sbcex2 sbcel2 exbii bitri abbii
      wsbc dfdm3 eqtri csbeq2i 3eqtr4i ) ABDFEFGZCHZEIZDJZKZUDABCKZHZEIZDJZABCL
      ZKUILUHUFABSZDJULUFADBMUNUKDUNUEABSZEIUKUEEABNUOUJEABUDCOPQRUAABUMUGDECTU
      BDEUITUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Domain membership.  Theorem 4 of [Suppes] p. 59.  (Contributed by Mario
       Carneiro, 9-Jul-2014.) $)
    eldmg $p |- ( A e. V -> ( A e. dom B <-> E. y A B y ) ) $=
      ( vx cv wbr wex cdm wceq breq1 exbidv df-dm elab2g ) EFZAFZCGZAHBPCGZAHEB
      CIDOBJQRAOBPCKLEACMN $.

    $( Domain membership.  Theorem 4 of [Suppes] p. 59.  (Contributed by NM,
       27-Jan-1997.)  (Revised by Mario Carneiro, 9-Jul-2014.) $)
    eldm2g $p |- ( A e. V -> ( A e. dom B <-> E. y <. A , y >. e. B ) ) $=
      ( wcel cdm cv wbr wex cop eldmg df-br exbii syl6bb ) BDEBCFEBAGZCHZAIBOJC
      EZAIABCDKPQABOCLMN $.
  $}

  ${
    $d x y A $.  $d x y B $.
    eldm.1 $e |- A e. _V $.
    $( Membership in a domain.  Theorem 4 of [Suppes] p. 59.  (Contributed by
       NM, 2-Apr-2004.) $)
    eldm $p |- ( A e. dom B <-> E. y A B y ) $=
      ( cvv wcel cdm cv wbr wex wb eldmg ax-mp ) BEFBCGFBAHCIAJKDABCELM $.

    $( Membership in a domain.  Theorem 4 of [Suppes] p. 59.  (Contributed by
       NM, 1-Aug-1994.) $)
    eldm2 $p |- ( A e. dom B <-> E. y <. A , y >. e. B ) $=
      ( cvv wcel cdm cv cop wex wb eldm2g ax-mp ) BEFBCGFBAHICFAJKDABCELM $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Subset theorem for domain.  (Contributed by NM, 11-Aug-1994.) $)
    dmss $p |- ( A C_ B -> dom A C_ dom B ) $=
      ( vx vy wss cdm cv cop wcel wex ssel eximdv vex eldm2 3imtr4g ssrdv ) ABE
      ZCAFZBFZQCGZDGHZAIZDJUABIZDJTRITSIQUBUCDABUAKLDTACMZNDTBUDNOP $.
  $}

  $( Equality theorem for domain.  (Contributed by NM, 11-Aug-1994.) $)
  dmeq $p |- ( A = B -> dom A = dom B ) $=
    ( wss wa cdm wceq dmss anim12i eqss 3imtr4i ) ABCZBACZDAEZBEZCZNMCZDABFMNFK
    OLPABGBAGHABIMNIJ $.

  ${
    dmeqi.1 $e |- A = B $.
    $( Equality inference for domain.  (Contributed by NM, 4-Mar-2004.) $)
    dmeqi $p |- dom A = dom B $=
      ( wceq cdm dmeq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    dmeqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for domain.  (Contributed by NM, 4-Mar-2004.) $)
    dmeqd $p |- ( ph -> dom A = dom B ) $=
      ( wceq cdm dmeq syl ) ABCEBFCFEDBCGH $.
  $}

  ${
    $d y A $.  $d y B $.  $d y C $.
    opeldm.1 $e |- A e. _V $.
    opeldm.2 $e |- B e. _V $.
    $( Membership of first of an ordered pair in a domain.  (Contributed by NM,
       30-Jul-1995.) $)
    opeldm $p |- ( <. A , B >. e. C -> A e. dom C ) $=
      ( vy cop wcel cv wex cdm wceq opeq2 eleq1d spcev eldm2 sylibr ) ABGZCHZAF
      IZGZCHZFJACKHUBSFBETBLUARCTBAMNOFACDPQ $.

    $( Membership of first of a binary relation in a domain.  (Contributed by
       NM, 30-Jul-1995.) $)
    breldm $p |- ( A R B -> A e. dom R ) $=
      ( wbr cop wcel cdm df-br opeldm sylbi ) ABCFABGCHACIHABCJABCDEKL $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x R $.
    $( Membership of first of a binary relation in a domain.  (Contributed by
       NM, 21-Mar-2007.) $)
    breldmg $p |- ( ( A e. C /\ B e. D /\ A R B ) -> A e. dom R ) $=
      ( vx wbr w3a cdm cv wex breq2 spcegv imp 3adant1 wb eldmg 3ad2ant1 mpbird
      wcel ) ACTZBDTZABEGZHAEITZAFJZEGZFKZUBUCUGUAUBUCUGUFUCFBDUEBAELMNOUAUBUDU
      GPUCFAECQRS $.

    $( The domain of a union is the union of domains.  Exercise 56(a) of
       [Enderton] p. 65.  (Contributed by NM, 12-Aug-1994.)  (Proof shortened
       by Andrew Salmon, 27-Aug-2011.) $)
    dmun $p |- dom ( A u. B ) = ( dom A u. dom B ) $=
      ( vy vx cv wbr wex cab cun cdm wo unab brun exbii 19.43 abbii eqtri df-dm
      bitr2i uneq12i 3eqtr4ri ) CEZDEZAFZDGZCHZUBUCBFZDGZCHZIZUBUCABIZFZDGZCHZA
      JZBJZIUKJUJUEUHKZCHUNUEUHCLUQUMCUMUDUGKZDGUQULURDUBUCABMNUDUGDOSPQUOUFUPU
      ICDARCDBRTCDUKRUA $.

    $( The domain of an intersection belong to the intersection of domains.
       Theorem 6 of [Suppes] p. 60.  (Contributed by NM, 15-Sep-2004.) $)
    dmin $p |- dom ( A i^i B ) C_ ( dom A i^i dom B ) $=
      ( vx vy cin cdm cv cop wcel wa wex 19.40 eldm2 elin exbii anbi12i 3imtr4i
      vex bitri ssriv ) CABEZFZAFZBFZEZCGZDGHZAIZUGBIZJZDKZUHDKZUIDKZJZUFUBIZUF
      UEIZUHUIDLUOUGUAIZDKUKDUFUACRZMUQUJDUGABNOSUPUFUCIZUFUDIZJUNUFUCUDNUSULUT
      UMDUFAURMDUFBURMPSQT $.
  $}

  ${
    $d x y z $.  $d y z A $.  $d y z B $.
    $( The domain of an indexed union.  (Contributed by Mario Carneiro,
       26-Apr-2016.) $)
    dmiun $p |- dom U_ x e. A B = U_ x e. A dom B $=
      ( vy vz ciun cdm cv cop wcel wex wrex rexcom4 eldm2 rexbii eliun 3bitr4ri
      vex exbii 3bitr4i eqriv ) DABCFZGZABCGZFZDHZEHIZUBJZEKZUFUDJZABLZUFUCJUFU
      EJUGCJZEKZABLULABLZEKUKUIULAEBMUJUMABEUFCDRZNOUHUNEAUGBCPSQEUFUBUONAUFBUD
      PTUA $.

    $d x A $.
    $( The domain of a union.  Part of Exercise 8 of [Enderton] p. 41.
       (Contributed by NM, 3-Feb-2004.) $)
    dmuni $p |- dom U. A = U_ x e. A dom x $=
      ( vy vz cuni cdm cv ciun cop wcel wex wrex excom ancom 19.41v vex 3bitr4i
      wa eldm2 exbii anbi2i bitri eluni df-rex eliun eqriv ) CBEZFZABAGZFZHZCGZ
      DGIZUGJZDKZULUJJZABLZULUHJULUKJUMUIJZUIBJZRZAKZDKZUSUPRZAKZUOUQVBUTDKZAKV
      DUTDAMVEVCAURDKZUSRUSVFRVEVCVFUSNURUSDOUPVFUSDULUICPZSUAQTUBUNVADAUMBUCTU
      PABUDQDULUGVGSAULBUJUEQUF $.
  $}

  ${
    $d x y z $.  $d z ph $.
    $( The domain of a class of ordered pairs.  (Contributed by NM,
       16-May-1995.)  (Revised by Mario Carneiro, 4-Dec-2016.) $)
    dmopab $p |- dom { <. x , y >. | ph } = { x | E. y ph } $=
      ( copab cdm wbr wex cab nfopab1 nfopab2 dfdmf cop wcel df-br opabid bitri
      cv exbii abbii eqtri ) ABCDZEBQZCQZUAFZCGZBHACGZBHBCUAABCIABCJKUEUFBUDACU
      DUBUCLUAMAUBUCUANABCOPRST $.
  $}

  ${
    $d x y A $.
    $( Upper bound for the domain of a restricted class of ordered pairs.
       (Contributed by NM, 31-Jan-2004.) $)
    dmopabss $p |- dom { <. x , y >. | ( x e. A /\ ph ) } C_ A $=
      ( cv wcel wa copab cdm wex cab dmopab 19.42v abbii ssab2 eqsstri ) BEDFZA
      GZBCHIRCJZBKZDRBCLTQACJZGZBKDSUBBQACMNUABDOPP $.
  $}

  ${
    $d x y A $.
    $( The domain of a restricted class of ordered pairs.  (Contributed by NM,
       31-Jan-2004.) $)
    dmopab3 $p |- ( A. x e. A E. y ph <->
               dom { <. x , y >. | ( x e. A /\ ph ) } = A ) $=
      ( wex wral cv wcel wi wal wa wb copab cdm wceq df-ral pm4.71 albii dmopab
      cab 19.42v abbii eqtri eqeq1i eqcom abeq2 3bitr2ri 3bitri ) ACEZBDFBGDHZU
      IIZBJUJUJUIKZLZBJZUJAKZBCMNZDOZUIBDPUKUMBUJUIQRUQULBTZDODUROUNUPURDUPUOCE
      ZBTURUOBCSUSULBUJACUAUBUCUDDURUEULBDUFUGUH $.
  $}

  ${
    $d x y $.
    $( The domain of the empty set is empty.  Part of Theorem 3.8(v) of [Monk1]
       p. 36.  (Contributed by NM, 4-Jul-1994.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    dm0 $p |- dom (/) = (/) $=
      ( vx vy c0 cdm wceq cv wcel eq0 cop wex noel nex vex eldm2 mtbir mpgbir
      wn ) CDZCEAFZRGZQAARHTSBFIZCGZBJUBBUAKLBSCAMNOP $.

    $( The domain of the identity relation is the universe.  (Contributed by
       NM, 30-Apr-1998.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    dmi $p |- dom _I = _V $=
      ( vx vy cid cdm cvv wceq cv wcel eqv wbr wex ax6ev vex equcom bitri exbii
      ideq mpbir eldm mpgbir ) CDZEFAGZUAHZAAUAIUCUBBGZCJZBKZUFUDUBFZBKBALUEUGB
      UEUBUDFUGUBUDBMQABNOPRBUBCAMSRT $.

    $( The domain of the universe is the universe.  (Contributed by NM,
       8-Aug-2003.) $)
    dmv $p |- dom _V = _V $=
      ( cvv cdm ssv cid dmi wss dmss ax-mp eqsstr3i eqssi ) ABZAKCADBZKEDAFLKFD
      CDAGHIJ $.
  $}

  ${
    $d x y A $.
    $( An empty domain implies an empty range.  (Contributed by NM,
       21-May-1998.) $)
    dm0rn0 $p |- ( dom A = (/) <-> ran A = (/) ) $=
      ( vx vy cv wbr wex cab c0 wceq wcel wb wal alnex noel albii abeq1 3bitr4i
      wn nbn eqeq1i cdm crn excom xchbinx bitr4i 3bitr3i df-dm dfrn2 ) BDZCDZAE
      ZCFZBGZHIZUKBFZCGZHIZAUAZHIAUBZHIULUIHJZKZBLZUOUJHJZKZCLZUNUQULRZBLZUORZC
      LZVBVEVGUOCFZRVIVGULBFVJULBMUKBCUCUDUOCMUEVFVABUTULUINSOVHVDCVCUOUJNSOUFU
      LBHPUOCHPQURUMHBCAUGTUSUPHBCAUHTQ $.

    $( A relation is empty iff its domain is empty.  (Contributed by NM,
       15-Sep-2004.) $)
    reldm0 $p |- ( Rel A -> ( A = (/) <-> dom A = (/) ) ) $=
      ( vx vy wrel c0 wceq cv cop wcel wb wal cdm rel0 eqrel mpan2 wn eq0 alnex
      wex albii vex eldm2 xchbinxr noel nbn bitr3i bitr2i syl6bb ) ADZAEFZBGZCG
      HZAIZULEIZJZCKZBKZALZEFZUIEDUJUQJMBCAENOUSUKURIZPZBKUQBURQVAUPBVAUMPZCKZU
      PVCUMCSUTUMCRCUKABUAUBUCVBUOCUNUMULUDUETUFTUGUH $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The domain of a Cartesian product.  Part of Theorem 3.13(x) of [Monk1]
       p. 37.  (Contributed by NM, 28-Jul-1995.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    dmxp $p |- ( B =/= (/) -> dom ( A X. B ) = A ) $=
      ( vy vx c0 wne cxp cdm cv wcel wa copab df-xp dmeqi wex wral n0 ralrimivw
      wceq biimpi dmopab3 sylib syl5eq ) BEFZABGZHCIAJDIBJZKCDLZHZAUEUGCDABMNUD
      UFDOZCAPUHASUDUICAUDUIDBQTRUFCDAUAUBUC $.
  $}

  $( The domain of a square Cartesian product.  (Contributed by NM,
     28-Jul-1995.) $)
  dmxpid $p |- dom ( A X. A ) = A $=
    ( cxp cdm wceq c0 dm0 xpeq1 0xp syl6eq dmeqd id 3eqtr4a dmxp pm2.61ine ) AA
    BZCZADAEAEDZECEPAFQOEQOEABEAEAGAHIJQKLAAMN $.

  $( The domain of the intersection of two square Cartesian products.  Unlike
     ~ dmin , equality holds.  (Contributed by NM, 29-Jan-2008.) $)
  dmxpin $p |- dom ( ( A X. A ) i^i ( B X. B ) ) = ( A i^i B ) $=
    ( cxp cin cdm inxp dmeqi dmxpid eqtri ) AACBBCDZEABDZKCZEKJLAABBFGKHI $.

  $( The Cartesian product of a class with itself is one-to-one.  (Contributed
     by NM, 5-Nov-2006.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  xpid11 $p |- ( ( A X. A ) = ( B X. B ) <-> A = B ) $=
    ( cxp wceq cdm dmeq dmxpid 3eqtr3g xpeq12 anidms impbii ) AACZBBCZDZABDZNLE
    MEABLMFAGBGHONABABIJK $.

  $( The domain of the double converse of a class (which doesn't have to be a
     relation as in ~ dfrel2 ).  (Contributed by NM, 8-Apr-2007.) $)
  dmcnvcnv $p |- dom `' `' A = dom A $=
    ( cdm ccnv crn dfdm4 df-rn eqtr2i ) ABACZDHCBAEHFG $.

  $( The range of the double converse of a class.  (Contributed by NM,
     8-Apr-2007.) $)
  rncnvcnv $p |- ran `' `' A = ran A $=
    ( crn ccnv cdm df-rn dfdm4 eqtr2i ) ABACZDHCBAEHFG $.

  ${
    $d x y A $.  $d x y B $.
    $( The first member of an ordered pair in a relation belongs to the domain
       of the relation.  (Contributed by NM, 28-Jul-2004.) $)
    elreldm $p |- ( ( Rel A /\ B e. A ) -> |^| |^| B e. dom A ) $=
      ( vx vy wrel wcel cint cdm cv cop wceq wex cvv cxp wss wi df-rel ssel vex
      sylbi elvv syl6ib eleq1 opeldm syl6bi inteqd op1stb syl6eq eleq1d sylibrd
      inteq exlimivv syli imp ) AEZBAFZBGZGZAHZFZUPUOBCIZDIZJZKZDLCLZUTUOUPBMMN
      ZFZVEUOAVFOUPVGPAQAVFBRTCDBUAUBVDUPUTPCDVDUPVAUSFZUTVDUPVCAFVHBVCAUCVAVBA
      CSZDSZUDUEVDURVAUSVDURVCGZGVAVDUQVKBVCUKUFVAVBVIVJUGUHUIUJULUMUN $.
  $}

  $( Equality theorem for range.  (Contributed by NM, 29-Dec-1996.) $)
  rneq $p |- ( A = B -> ran A = ran B ) $=
    ( wceq ccnv cdm crn cnveq dmeqd df-rn 3eqtr4g ) ABCZADZEBDZEAFBFKLMABGHAIBI
    J $.

  ${
    rneqi.1 $e |- A = B $.
    $( Equality inference for range.  (Contributed by NM, 4-Mar-2004.) $)
    rneqi $p |- ran A = ran B $=
      ( wceq crn rneq ax-mp ) ABDAEBEDCABFG $.
  $}

  ${
    rneqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for range.  (Contributed by NM, 4-Mar-2004.) $)
    rneqd $p |- ( ph -> ran A = ran B ) $=
      ( wceq crn rneq syl ) ABCEBFCFEDBCGH $.
  $}

  $( Subset theorem for range.  (Contributed by NM, 22-Mar-1998.) $)
  rnss $p |- ( A C_ B -> ran A C_ ran B ) $=
    ( wss ccnv cdm crn cnvss dmss syl df-rn 3sstr4g ) ABCZADZEZBDZEZAFBFLMOCNPC
    ABGMOHIAJBJK $.

  $( The second argument of a binary relation belongs to its range.
     (Contributed by NM, 29-Jun-2008.) $)
  brelrng $p |- ( ( A e. F /\ B e. G /\ A C B ) -> B e. ran C ) $=
    ( wcel wbr w3a ccnv cdm crn wb brcnvg ancoms biimp3ar 3com12 syld3an3 df-rn
    breldmg syl6eleqr ) ADFZBEFZABCGZHBCIZJZCKUAUBUCBAUDGZBUEFZUAUBUFUCUBUAUFUC
    LBAEDCMNOUBUAUFUGBAEDUDSPQCRT $.

  ${
    brelrn.1 $e |- A e. _V $.
    brelrn.2 $e |- B e. _V $.
    $( The second argument of a binary relation belongs to its range.
       (Contributed by NM, 13-Aug-2004.) $)
    brelrn $p |- ( A C B -> B e. ran C ) $=
      ( cvv wcel wbr crn brelrng mp3an12 ) AFGBFGABCHBCIGDEABCFFJK $.

    $( Membership of second member of an ordered pair in a range.  (Contributed
       by NM, 23-Feb-1997.) $)
    opelrn $p |- ( <. A , B >. e. C -> B e. ran C ) $=
      ( cop wcel wbr crn df-br brelrn sylbir ) ABFCGABCHBCIGABCJABCDEKL $.
  $}

  $( The first argument of a binary relation belongs to its domain.
     (Contributed by NM, 2-Jul-2008.) $)
  releldm $p |- ( ( Rel R /\ A R B ) -> A e. dom R ) $=
    ( wrel wbr wa cvv wcel cdm brrelex brrelex2 simpr breldmg syl3anc ) CDZABCE
    ZFAGHBGHPACIHABCJABCKOPLABGGCMN $.

  $( The second argument of a binary relation belongs to its range.
     (Contributed by NM, 2-Jul-2008.) $)
  relelrn $p |- ( ( Rel R /\ A R B ) -> B e. ran R ) $=
    ( wrel wbr wa cvv wcel crn brrelex brrelex2 simpr brelrng syl3anc ) CDZABCE
    ZFAGHBGHPBCIHABCJABCKOPLABCGGMN $.

  ${
    $d x A $.  $d x R $.
    $( Membership in a domain.  (Contributed by Mario Carneiro, 5-Nov-2015.) $)
    releldmb $p |- ( Rel R -> ( A e. dom R <-> E. x A R x ) ) $=
      ( wrel cdm wcel cv wbr wex eldmg ibi releldm ex exlimdv impbid2 ) CDZBCEZ
      FZBAGZCHZAIZRUAABCQJKPTRAPTRBSCLMNO $.

    $( Membership in a range.  (Contributed by Mario Carneiro, 5-Nov-2015.) $)
    relelrnb $p |- ( Rel R -> ( A e. ran R <-> E. x x R A ) ) $=
      ( wrel crn wcel cv wbr wex elrng ibi relelrn ex exlimdv impbid2 ) CDZBCEZ
      FZAGZBCHZAIZRUAABCQJKPTRAPTRSBCLMNO $.
  $}

  ${
    releldm.1 $e |- Rel R $.
    $( The first argument of a binary relation belongs to its domain.
       (Contributed by NM, 28-Apr-2015.) $)
    releldmi $p |- ( A R B -> A e. dom R ) $=
      ( wrel wbr cdm wcel releldm mpan ) CEABCFACGHDABCIJ $.

    $( The second argument of a binary relation belongs to its range.
       (Contributed by NM, 28-Apr-2015.) $)
    relelrni $p |- ( A R B -> B e. ran R ) $=
      ( wrel wbr crn wcel relelrn mpan ) CEABCFBCGHDABCIJ $.
  $}

  ${
    $d x y w v $.  $d w v A $.
    dfrnf.1 $e |- F/_ x A $.
    dfrnf.2 $e |- F/_ y A $.
    $( Definition of range, using bound-variable hypotheses instead of distinct
       variable conditions.  (Contributed by NM, 14-Aug-1995.)  (Revised by
       Mario Carneiro, 15-Oct-2016.) $)
    dfrnf $p |- ran A = { y | E. x x A y } $=
      ( vv vw crn cv wbr wex cab dfrn2 nfcv nfbr nfv breq1 cbvex abbii nfex weq
      breq2 exbidv cbvab 3eqtri ) CHFIZGIZCJZFKZGLAIZUGCJZAKZGLUJBIZCJZAKZBLFGC
      MUIULGUHUKFAAUFUGCAUFNDAUGNOUKFPUFUJUGCQRSULUOGBUKBABUJUGCBUJNEBUGNOTUOGP
      GBUAUKUNAUGUMUJCUBUCUDUE $.
  $}

  ${
    $d x y A $.  $d x y B $.
    elrn.1 $e |- A e. _V $.
    $( Membership in a range.  (Contributed by NM, 10-Jul-1994.) $)
    elrn2 $p |- ( A e. ran B <-> E. x <. x , A >. e. B ) $=
      ( vy cv cop wcel wex crn wceq opeq2 eleq1d exbidv dfrn3 elab2 ) AFZEFZGZC
      HZAIQBGZCHZAIEBCJDRBKZTUBAUCSUACRBQLMNAECOP $.

    $( Membership in a range.  (Contributed by NM, 2-Apr-2004.) $)
    elrn $p |- ( A e. ran B <-> E. x x B A ) $=
      ( crn wcel cv cop wex wbr elrn2 df-br exbii bitr4i ) BCEFAGZBHCFZAIOBCJZA
      IABCDKQPAOBCLMN $.
  $}

  ${
    $d x y z $.  $d y z A $.
    nfrn.1 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for domain.  (Contributed by NM,
       30-Jan-2004.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfdm $p |- F/_ x dom A $=
      ( vy vz cdm cv wbr wex cab df-dm nfcv nfbr nfex nfab nfcxfr ) ABFDGZEGZBH
      ZEIZDJDEBKTADSAEAQRBAQLCARLMNOP $.

    $( Bound-variable hypothesis builder for range.  (Contributed by NM,
       1-Sep-1999.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfrn $p |- F/_ x ran A $=
      ( crn ccnv cdm df-rn nfcnv nfdm nfcxfr ) ABDBEZFBGAKABCHIJ $.
  $}

  ${
    $d A z $.  $d B z $.  $d x z $.
    $( Domain of an intersection.  (Contributed by FL, 15-Oct-2012.) $)
    dmiin $p |- dom |^|_ x e. A B C_ |^|_ x e. A dom B $=
      ( ciin cdm wss nfii1 nfdm ssiinf cv wcel iinss2 dmss syl mprgbir ) ABCDZE
      ZABCEZDFQRFZABABRQAPABCGHIAJBKPCFSABCLPCMNO $.
  $}

  ${
    $d x y z $.  $d z ph $.
    $( The range of a class of ordered pairs.  (Contributed by NM,
       14-Aug-1995.)  (Revised by Mario Carneiro, 4-Dec-2016.) $)
    rnopab $p |- ran { <. x , y >. | ph } = { y | E. x ph } $=
      ( copab crn wbr wex cab nfopab1 nfopab2 dfrnf cop wcel df-br opabid bitri
      cv exbii abbii eqtri ) ABCDZEBQZCQZUAFZBGZCHABGZCHBCUAABCIABCJKUEUFCUDABU
      DUBUCLUAMAUBUCUANABCOPRST $.
  $}

  ${
    $d w y z A $.  $d w y z B $.  $d w x y z C $.
    rnmpt.1 $e |- F = ( x e. A |-> B ) $.
    $( The range of a function in maps-to notation.  (Contributed by Scott
       Fenton, 21-Mar-2011.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    rnmpt $p |- ran F = { y | E. x e. A y = B } $=
      ( cv wcel wceq wa copab crn wex cab wrex rnopab cmpt df-mpt eqtri rneqi
      df-rex abbii 3eqtr4i ) AGCHBGDIZJZABKZLUEAMZBNELUDACOZBNUEABPEUFEACDQUFFA
      BCDRSTUHUGBUDACUAUBUC $.

    $( The range of a function in maps-to notation.  (Contributed by Mario
       Carneiro, 20-Feb-2015.) $)
    elrnmpt $p |- ( C e. V -> ( C e. ran F <-> E. x e. A C = B ) ) $=
      ( vy cv wceq wrex crn eqeq1 rexbidv rnmpt elab2g ) HIZCJZABKDCJZABKHDELFQ
      DJRSABQDCMNAHBCEGOP $.

    ${
      $d x A $.  $d x D $.
      elrnmpt1s.1 $e |- ( x = D -> B = C ) $.
      $( Elementhood in an image set.  (Contributed by Mario Carneiro,
         12-Sep-2015.) $)
      elrnmpt1s $p |- ( ( D e. A /\ C e. V ) -> C e. ran F ) $=
        ( wcel wceq wrex crn eqid cv eqeq2d rspcev mpan2 elrnmpt biimparc sylan
        ) EBJZDCKZABLZDGJZDFMJZUBDDKZUDDNUCUGAEBAOEKCDDIPQRUEUFUDABCDFGHSTUA $.
    $}

    $( Elementhood in an image set.  (Contributed by Mario Carneiro,
       31-Aug-2015.) $)
    elrnmpt1 $p |- ( ( x e. A /\ B e. V ) -> B e. ran F ) $=
      ( vz vy wcel cv crn csb wceq wa wex vex wb id csbeq1a nfcsb1v bitr2d wrex
      eleq12d biantrud equcoms spcev df-rex nfv nfcri nfeq2 nfan eqeq2d anbi12d
      cbvex bitri eqeq1 anbi2d exbidv syl5bb rnmpt elab2g syl5ibr impcom ) CEIZ
      AJZBIZCDKZIZVFVHVDGJZAVIBLZIZCAVICLZMZNZGOZVNVFGVEAPVNVFQAGVEVIMZVFVKVNVP
      VEVIBVJVPRAVIBSUCZVPVMVKAVICSZUDUAUEUFHJZCMZABUBZVOHCVGEWAVKVSVLMZNZGOZVT
      VOWAVFVTNZAOWDVTABUGWEWCAGWEGUHVKWBAAGVJAVIBTUIAVSVLAVICTUJUKVPVFVKVTWBVQ
      VPCVLVSVRULUMUNUOVTWCVNGVTWBVMVKVSCVLUPUQURUSAHBCDFUTVAVBVC $.

    $( Membership in the range of a function.  (Contributed by NM,
       27-Aug-2007.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    elrnmptg $p |- ( A. x e. A B e. V ->
      ( C e. ran F <-> E. x e. A C = B ) ) $=
      ( vy crn wcel cv wceq wrex cab wral rnmpt eleq2i cvv wa syl wi eleq1 elex
      wb r19.29 biimparc rexlimivw ex eqeq1 rexbidv elab3g syl5bb ) DEIZJDHKZCL
      ZABMZHNZJZCFJZABOZDCLZABMZUMUQDAHBCEGPQUTVBDRJZUAURVBUDUTVBVCUTVBSUSVASZA
      BMVCUSVAABUEVDVCABVDDFJZVCVAVEUSDCFUBUFDFUCTUGTUHUPVBHDRUNDLUOVAABUNDCUIU
      JUKTUL $.

    elrnmpti.2 $e |- B e. _V $.
    $( Membership in the range of a function.  (Contributed by NM,
       30-Aug-2004.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    elrnmpti $p |- ( C e. ran F <-> E. x e. A C = B ) $=
      ( cvv wcel wral crn wceq wrex wb rgenw elrnmptg ax-mp ) CHIZABJDEKIDCLABM
      NRABGOABCDEHFPQ $.
  $}

  $( The range of the empty set is empty.  Part of Theorem 3.8(v) of [Monk1]
     p. 36.  (Contributed by NM, 4-Jul-1994.) $)
  rn0 $p |- ran (/) = (/) $=
    ( c0 cdm wceq crn dm0 dm0rn0 mpbi ) ABACADACEAFG $.

  ${
    $d y z w A $.  $d y z w B $.  $d w C z $.  $d w x y z $.
    $( Alternate definition of indexed union when ` B ` is a set.  (Contributed
       by Mario Carneiro, 31-Aug-2015.) $)
    dfiun3g $p |- ( A. x e. A B e. C ->
                  U_ x e. A B = U. ran ( x e. A |-> B ) ) $=
      ( vy wcel wral ciun wceq wrex cab cuni cmpt crn dfiun2g eqid rnmpt unieqi
      cv syl6eqr ) CDFABGABCHESCIABJEKZLABCMZNZLAEBCDOUCUAAEBCUBUBPQRT $.

    $( Alternate definition of indexed intersection when ` B ` is a set.
       (Contributed by Mario Carneiro, 31-Aug-2015.) $)
    dfiin3g $p |- ( A. x e. A B e. C
               -> |^|_ x e. A B = |^| ran ( x e. A |-> B ) ) $=
      ( vy wcel wral ciin wceq wrex cab cint cmpt crn dfiin2g eqid rnmpt inteqi
      cv syl6eqr ) CDFABGABCHESCIABJEKZLABCMZNZLAEBCDOUCUAAEBCUBUBPQRT $.
  $}

  ${
    dfiun3.1 $e |- B e. _V $.
    $( Alternate definition of indexed union when ` B ` is a set.  (Contributed
       by Mario Carneiro, 31-Aug-2015.) $)
    dfiun3 $p |- U_ x e. A B = U. ran ( x e. A |-> B ) $=
      ( cvv wcel ciun cmpt crn cuni wceq dfiun3g cv a1i mprg ) CEFZABCGABCHIJKA
      BABCELPAMBFDNO $.

    $( Alternate definition of indexed intersection when ` B ` is a set.
       (Contributed by Mario Carneiro, 31-Aug-2015.) $)
    dfiin3 $p |- |^|_ x e. A B = |^| ran ( x e. A |-> B ) $=
      ( cvv wcel ciin cmpt crn cint wceq dfiin3g cv a1i mprg ) CEFZABCGABCHIJKA
      BABCELPAMBFDNO $.
  $}

  ${
    $d I x $.  $d S x $.  $d V k $.  $d X k $.  $d k x $.
    $( Express a relative indexed intersection as an intersection.
       (Contributed by Stefan O'Rear, 22-Feb-2015.) $)
    riinint $p |- ( ( X e. V /\ A. k e. I S C_ X ) ->
        ( X i^i |^|_ k e. I S ) = |^| ( { X } u. ran ( k e. I |-> S ) ) ) $=
      ( wcel wss wral wa ciin cin cmpt crn cint csn cun cvv wceq ssexg expcom
      ralimdv imp dfiin3g syl ineq2d intun intsng adantr ineq1d syl5eq eqtr4d )
      EDFZAEGZBCHZIZEBCAJZKEBCALMZNZKZEOZUQPNZUOUPUREUOAQFZBCHZUPURRULUNVCULUMV
      BBCUMULVBAEDSTUAUBBCAQUCUDUEUOVAUTNZURKUSUTUQUFUOVDEURULVDERUNEDUGUHUIUJU
      K $.
  $}

  ${
    $d x y A $.
    $( A relation is empty iff its range is empty.  (Contributed by NM,
       15-Sep-2004.) $)
    relrn0 $p |- ( Rel A -> ( A = (/) <-> ran A = (/) ) ) $=
      ( wrel c0 wceq cdm crn reldm0 dm0rn0 syl6bb ) ABACDAECDAFCDAGAHI $.

    $( The domain and range of a class are included in its double union.
       (Contributed by NM, 13-May-2008.) $)
    dmrnssfld $p |- ( dom A u. ran A ) C_ U. U. A $=
      ( vx vy cdm crn cuni cv cop wex vex eldm2 cpr prid1 wss sseld mpi exlimiv
      wcel sylbi ssriv uniop uniopel syl5eqelr elssuni syl elrn2 prid2 unssi )
      ADZAEZAFZFZBUIULBGZUIRUMCGZHZARZCIUMULRZCUMABJZKUPUQCUPUMUMUNLZRUQUMUNURM
      UPUSULUMUPUSUKRUSULNUPUSUOFUKUMUNURCJZUAUMUNAURUTUBUCUSUKUDUEZOPQSTCUJULU
      NUJRUPBIUNULRZBUNAUTUFUPVBBUPUNUSRVBUMUNUTUGUPUSULUNVAOPQSTUH $.
  $}

  ${
    $d x y z A $.  $d x y z B $.
    $( Domain of a composition.  Theorem 21 of [Suppes] p. 63.  (Contributed by
       NM, 19-Mar-1998.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    dmcoss $p |- dom ( A o. B ) C_ dom B $=
      ( vx vy vz ccom cdm cv cop wcel wex wbr nfe1 wa exsimpl vex opelco cbvexv
      breq2 3imtr4i exlimi eldm2 eldm ssriv ) CABFZGZBGZCHZDHZIUEJZDKUHUIBLZDKZ
      UHUFJUHUGJUJULDUKDMUHEHZBLZUMUIALZNEKUNEKUJULUNUOEOEUHUIABCPZDPQUKUNDEUIU
      MUHBSRTUADUHUEUPUBDUHBUPUCTUD $.
  $}

  $( Range of a composition.  (Contributed by NM, 19-Mar-1998.) $)
  rncoss $p |- ran ( A o. B ) C_ ran A $=
    ( ccnv ccom cdm crn dmcoss df-rn cnvco dmeqi eqtri 3sstr4i ) BCZACZDZEZNEAB
    DZFZAFMNGRQCZEPQHSOABIJKAHL $.

  ${
    $d x y z A $.  $d x y z B $.
    $( Domain of a composition.  (Contributed by NM, 28-May-1998.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    dmcosseq $p |- ( ran B C_ dom A -> dom ( A o. B ) = dom B ) $=
      ( vx vy vz crn cdm wss ccom dmcoss a1i cv wbr wex wcel wi vex eldm eximdv
      syl6ibr wa ssel elrn imbi12i 19.8a imim1i pm3.2 sylcom sylbi excom opelco
      cop syl exbii eldm2 3imtr4g ssrdv eqssd ) BFZAGZHZABIZGZBGZVCVDHVAABJKVAC
      VDVCVACLZDLZBMZDNZVEELZULVBOZENZVEVDOVEVCOVAVHVGVFVIAMZUAZDNZENZVKVAVHVME
      NZDNVOVAVGVPDVAVFUSOZVFUTOZPZVGVPPZUSUTVFUBVSVGCNZVLENZPZVTVQWAVRWBCVFBDQ
      ZUCEVFAWDRUDWCVGWBVPVGWAWBVGCUEUFVGVLVMEVGVLUGSUHUIUMSVMEDUJTVJVNEDVEVIAB
      CQZEQUKUNTDVEBWEREVEVBWEUOUPUQUR $.

    $( Domain of a composition.  (Contributed by NM, 19-Mar-1998.) $)
    dmcoeq $p |- ( dom A = ran B -> dom ( A o. B ) = dom B ) $=
      ( cdm crn wceq wss ccom eqimss2 dmcosseq syl ) ACZBDZELKFABGCBCELKHABIJ
      $.
  $}

  $( Range of a composition.  (Contributed by NM, 19-Mar-1998.) $)
  rncoeq $p |- ( dom A = ran B -> ran ( A o. B ) = ran A ) $=
    ( ccnv cdm crn wceq ccom dmcoeq eqcom df-rn dfdm4 eqeq12i bitri cnvco dmeqi
    eqtri 3imtr4i ) BCZDZACZEZFZRTGZDZTDZFADZBEZFZABGZEZAEZFRTHUHUGUFFUBUFUGIUG
    SUFUABJAKLMUJUDUKUEUJUICZDUDUIJULUCABNOPAJLQ $.

  $( Equality theorem for restrictions.  (Contributed by NM, 7-Aug-1994.) $)
  reseq1 $p |- ( A = B -> ( A |` C ) = ( B |` C ) ) $=
    ( wceq cvv cxp cin cres ineq1 df-res 3eqtr4g ) ABDACEFZGBLGACHBCHABLIACJBCJ
    K $.

  $( Equality theorem for restrictions.  (Contributed by NM, 8-Aug-1994.) $)
  reseq2 $p |- ( A = B -> ( C |` A ) = ( C |` B ) ) $=
    ( wceq cvv cxp cin cres xpeq1 ineq2d df-res 3eqtr4g ) ABDZCAEFZGCBEFZGCAHCB
    HMNOCABEIJCAKCBKL $.

  ${
    reseqi.1 $e |- A = B $.
    $( Equality inference for restrictions.  (Contributed by NM,
       21-Oct-2014.) $)
    reseq1i $p |- ( A |` C ) = ( B |` C ) $=
      ( wceq cres reseq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality inference for restrictions.  (Contributed by Paul Chapman,
       22-Jun-2011.) $)
    reseq2i $p |- ( C |` A ) = ( C |` B ) $=
      ( wceq cres reseq2 ax-mp ) ABECAFCBFEDABCGH $.

    reseqi.2 $e |- C = D $.
    $( Equality inference for restrictions.  (Contributed by NM,
       21-Oct-2014.) $)
    reseq12i $p |- ( A |` C ) = ( B |` D ) $=
      ( cres reseq1i reseq2i eqtri ) ACGBCGBDGABCEHCDBFIJ $.
  $}

  ${
    reseqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for restrictions.  (Contributed by NM,
       21-Oct-2014.) $)
    reseq1d $p |- ( ph -> ( A |` C ) = ( B |` C ) ) $=
      ( wceq cres reseq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality deduction for restrictions.  (Contributed by Paul Chapman,
       22-Jun-2011.) $)
    reseq2d $p |- ( ph -> ( C |` A ) = ( C |` B ) ) $=
      ( wceq cres reseq2 syl ) ABCFDBGDCGFEBCDHI $.

    reseqd.2 $e |- ( ph -> C = D ) $.
    $( Equality deduction for restrictions.  (Contributed by NM,
       21-Oct-2014.) $)
    reseq12d $p |- ( ph -> ( A |` C ) = ( B |` D ) ) $=
      ( cres reseq1d reseq2d eqtrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  ${
    $d y B $.  $d x y $.
    nfres.1 $e |- F/_ x A $.
    nfres.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for restriction.  (Contributed by NM,
       15-Sep-2003.)  (Revised by David Abernethy, 19-Jun-2012.) $)
    nfres $p |- F/_ x ( A |` B ) $=
      ( cres cvv cxp cin df-res nfcv nfxp nfin nfcxfr ) ABCFBCGHZIBCJABODACGEAG
      KLMN $.
  $}

  $( Distribute proper substitution through the restriction of a class.
     (Contributed by Alan Sare, 10-Nov-2012.)  (Revised by NM, 23-Aug-2018.) $)
  csbres $p |- [_ A / x ]_ ( B |` C ) = ( [_ A / x ]_ B |` [_ A / x ]_ C ) $=
    ( cres csb cvv cxp cin df-res csbeq2i wcel csbxp csbconstg xpeq2d syl5eq wn
    wceq c0 csbprc 0xp a1i xpeq1d 3eqtr4rd pm2.61i ineq2i csbin 3eqtr4i eqtri )
    ABCDEZFABCDGHZIZFZABCFZABDFZEZABUJULCDJKUNABUKFZIUNUOGHZIUMUPUQURUNBGLZUQUR
    RUSUQUOABGFZHURABDGMUSUTGUOABGGNOPUSQZSGHZSURUQVBSRVAGUAUBVAUOSGABDTUCABUKT
    UDUEUFABCUKUGUNUOJUHUI $.

  $( Distribute proper substitution through the restriction of a class.
     ~ csbresgOLD is derived from the virtual deduction proof ~ csbresgVD .
     (Contributed by Alan Sare, 10-Nov-2012.)  Obsolete as of 23-Aug-2018.  Use
     ~ csbres instead.  (New usage is discouraged.)
     (Proof modification is discouraged.) $)
  csbresgOLD $p |- ( A e. V -> [_ A / x ]_ ( B |` C ) =
                 ( [_ A / x ]_ B |` [_ A / x ]_ C ) ) $=
    ( wcel cvv cxp cin csbingOLD csbxpgOLD csbconstg xpeq2d eqtrd ineq2d df-res
    csb cres csbeq2i 3eqtr4g ) BEFZABCDGHZIZQZABCQZABDQZGHZIZABCDRZQUEUFRUAUDUE
    ABUBQZIUHABECUBJUAUJUGUEUAUJUFABGQZHUGABDGEKUAUKGUFABGELMNONABUIUCCDPSUEUFP
    T $.

  $( A restriction to the empty set is empty.  (Contributed by NM,
     12-Nov-1994.) $)
  res0 $p |- ( A |` (/) ) = (/) $=
    ( c0 cres cvv cxp cin df-res 0xp ineq2i in0 3eqtri ) ABCABDEZFABFBABGLBADHI
    AJK $.

  ${
    opelres.1 $e |- B e. _V $.
    $( Ordered pair membership in a restriction.  Exercise 13 of
       [TakeutiZaring] p. 25.  (Contributed by NM, 13-Nov-1995.) $)
    opelres $p |- ( <. A , B >. e. ( C |` D ) <->
                    ( <. A , B >. e. C /\ A e. D ) ) $=
      ( cop cres wcel cvv cxp cin wa df-res eleq2i elin opelxp mpbiran2 anbi2i
      3bitri ) ABFZCDGZHTCDIJZKZHTCHZTUBHZLUDADHZLUAUCTCDMNTCUBOUEUFUDUEUFBIHEA
      BDIPQRS $.

    $( Binary relation on a restriction.  (Contributed by NM, 12-Dec-2006.) $)
    brres $p |- ( A ( C |` D ) B <-> ( A C B /\ A e. D ) ) $=
      ( cop cres wcel wa wbr opelres df-br anbi1i 3bitr4i ) ABFZCDGZHOCHZADHZIA
      BPJABCJZRIABCDEKABPLSQRABCLMN $.
  $}

  ${
    $d y A $.  $d y B $.  $d y C $.  $d y D $.
    $( Ordered pair membership in a restriction.  Exercise 13 of
       [TakeutiZaring] p. 25.  (Contributed by NM, 14-Oct-2005.) $)
    opelresg $p |- ( B e. V -> ( <. A , B >. e. ( C |` D ) <->
                    ( <. A , B >. e. C /\ A e. D ) ) ) $=
      ( vy cv cop cres wcel wa wceq opeq2 eleq1d anbi1d vex opelres vtoclbg ) A
      FGZHZCDIZJTCJZADJZKABHZUAJUDCJZUCKFBESBLZTUDUASBAMZNUFUBUEUCUFTUDCUGNOASC
      DFPQR $.

    $( Binary relation on a restriction.  (Contributed by Mario Carneiro,
       4-Nov-2015.) $)
    brresg $p |- ( B e. V -> ( A ( C |` D ) B <-> ( A C B /\ A e. D ) ) ) $=
      ( wcel cop cres wa wbr opelresg df-br anbi1i 3bitr4g ) BEFABGZCDHZFOCFZAD
      FZIABPJABCJZRIABCDEKABPLSQRABCLMN $.
  $}

  ${
    opres.1 $e |- B e. _V $.
    $( Ordered pair membership in a restriction when the first member belongs
       to the restricting class.  (Contributed by NM, 30-Apr-2004.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    opres $p |- ( A e. D ->
                    ( <. A , B >. e. ( C |` D ) <-> <. A , B >. e. C ) ) $=
      ( cop cres wcel opelres rbaib ) ABFZCDGHKCHADHABCDEIJ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    $( A restricted identity relation is equivalent to equality in its domain.
       (Contributed by NM, 30-Apr-2004.) $)
    resieq $p |- ( ( B e. A /\ C e. A ) -> ( B ( _I |` A ) C <-> B = C ) ) $=
      ( vx wcel cid cres wbr wceq wb cv wi breq2 eqeq2 bibi12d imbi2d cop opres
      vex df-br ideq bitr3i 3bitr4g vtoclg impcom ) CAEBAEZBCFAGZHZBCIZJZUFBDKZ
      UGHZBUKIZJZLUFUJLDCAUKCIZUNUJUFUOULUHUMUIUKCBUGMUKCBNOPUFBUKQZUGEUPFEZULU
      MBUKFADSZRBUKUGTUMBUKFHUQBUKURUABUKFTUBUCUDUE $.
  $}

  $( ` <. A , A >. ` belongs to a restriction of the identity class iff ` A `
     belongs to the restricting class.  (Contributed by FL, 27-Oct-2008.)
     (Revised by NM, 30-Mar-2016.) $)
  opelresi $p |- ( A e. V -> ( <. A , A >. e. ( _I |` B ) <-> A e. B ) ) $=
    ( wcel cop cid cres wa opelresg wbr ididg df-br sylib biantrurd bitr4d ) AC
    DZAAEZFBGDQFDZABDZHSAAFBCIPRSPAAFJRACKAAFLMNO $.

  $( The restriction of a restriction.  (Contributed by NM, 27-Mar-2008.) $)
  resres $p |- ( ( A |` B ) |` C ) = ( A |` ( B i^i C ) ) $=
    ( cres cvv cxp cin df-res ineq1i xpindir ineq2i inass 3eqtr4ri 3eqtri ) ABD
    ZCDOCEFZGABEFZGZPGZABCGZDZOCHORPABHIATEFZGAQPGZGUASUBUCABCEJKATHAQPLMN $.

  $( Distributive law for restriction over union.  Theorem 31 of [Suppes]
     p. 65.  (Contributed by NM, 30-Sep-2002.) $)
  resundi $p |- ( A |` ( B u. C ) ) = ( ( A |` B ) u. ( A |` C ) ) $=
    ( cun cvv cxp cin cres xpundir ineq2i indi eqtri df-res uneq12i 3eqtr4i ) A
    BCDZEFZGZABEFZGZACEFZGZDZAPHABHZACHZDRASUADZGUCQUFABCEIJASUAKLAPMUDTUEUBABM
    ACMNO $.

  $( Distributive law for restriction over union.  (Contributed by NM,
     23-Sep-2004.) $)
  resundir $p |- ( ( A u. B ) |` C ) = ( ( A |` C ) u. ( B |` C ) ) $=
    ( cun cvv cxp cin cres indir df-res uneq12i 3eqtr4i ) ABDZCEFZGANGZBNGZDMCH
    ACHZBCHZDABNIMCJQORPACJBCJKL $.

  $( Class restriction distributes over intersection.  (Contributed by FL,
     6-Oct-2008.) $)
  resindi $p |- ( A |` ( B i^i C ) ) = ( ( A |` B ) i^i ( A |` C ) ) $=
    ( cin cvv cxp cres xpindir ineq2i inindi eqtri df-res ineq12i 3eqtr4i ) ABC
    DZEFZDZABEFZDZACEFZDZDZAOGABGZACGZDQARTDZDUBPUEABCEHIARTJKAOLUCSUDUAABLACLM
    N $.

  $( Class restriction distributes over intersection.  (Contributed by NM,
     18-Dec-2008.) $)
  resindir $p |- ( ( A i^i B ) |` C ) = ( ( A |` C ) i^i ( B |` C ) ) $=
    ( cin cvv cxp cres inindir df-res ineq12i 3eqtr4i ) ABDZCEFZDAMDZBMDZDLCGAC
    GZBCGZDABMHLCIPNQOACIBCIJK $.

  $( Move intersection into class restriction.  (Contributed by NM,
     18-Dec-2008.) $)
  inres $p |- ( A i^i ( B |` C ) ) = ( ( A i^i B ) |` C ) $=
    ( cin cvv cxp cres inass df-res ineq2i 3eqtr4ri ) ABDZCEFZDABMDZDLCGABCGZDA
    BMHLCIONABCIJK $.

  ${
    $d x C $.
    $( Distribution of restriction over indexed union.  (Contributed by Mario
       Carneiro, 29-May-2015.) $)
    resiun1 $p |- ( U_ x e. A B |` C ) = U_ x e. A ( B |` C ) $=
      ( cvv cxp cin ciun cres iunin2 wceq cv wcel df-res incom iuneq2i 3eqtr4ri
      eqtri a1i ) ABDEFZCGZHTABCHZGZABCDIZHUBDIZABTCJABUDUAUDUAKALBMUDCTGUACDNC
      TORSPUEUBTGUCUBDNUBTORQ $.

    $( Distribution of restriction over indexed union.  (Contributed by Mario
       Carneiro, 29-May-2015.) $)
    resiun2 $p |- ( C |` U_ x e. A B ) = U_ x e. A ( C |` B ) $=
      ( ciun cres cvv cxp cin df-res wceq cv a1i iuneq2i xpiundir ineq2i iunin2
      wcel eqtr4i ) DABCEZFDTGHZIZABDCFZEZDTJUDABDCGHZIZEZUBABUCUFUCUFKALBRDCJM
      NUBDABUEEZIUGUAUHDABCGOPABDUEQSSS $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The domain of a restriction.  Exercise 14 of [TakeutiZaring] p. 25.
       (Contributed by NM, 1-Aug-1994.) $)
    dmres $p |- dom ( A |` B ) = ( B i^i dom A ) $=
      ( vx vy cdm cin cres cv wcel cop wex wa eldm2 19.41v opelres exbii anbi1i
      vex 3bitr4i bitr2i ineqri incom eqtr3i ) AEZBFABGZEZBUDFCUDBUFCHZUFIUGDHZ
      JZUEIZDKZUGUDIZUGBIZLZDUGUECRZMUIAIZUMLZDKUPDKZUMLUKUNUPUMDNUJUQDUGUHABDR
      OPULURUMDUGAUOMQSTUAUDBUBUC $.
  $}

  $( A domain restricted to a subclass equals the subclass.  (Contributed by
     NM, 2-Mar-1997.) $)
  ssdmres $p |- ( A C_ dom B <-> dom ( B |` A ) = A ) $=
    ( cdm wss cin wceq cres df-ss dmres eqeq1i bitr4i ) ABCZDALEZAFBAGCZAFALHNM
    ABAIJK $.

  $( The domain of a restriction to a set exists.  (Contributed by NM,
     7-Apr-1995.) $)
  dmresexg $p |- ( B e. V -> dom ( A |` B ) e. _V ) $=
    ( wcel cres cdm cin cvv dmres inex1g syl5eqel ) BCDABEFBAFZGHABIBLCJK $.

  $( A class includes its restriction.  Exercise 15 of [TakeutiZaring] p. 25.
     (Contributed by NM, 2-Aug-1994.) $)
  resss $p |- ( A |` B ) C_ A $=
    ( cres cvv cxp cin df-res inss1 eqsstri ) ABCABDEZFAABGAJHI $.

  $( Commutative law for restriction.  (Contributed by NM, 27-Mar-1998.) $)
  rescom $p |- ( ( A |` B ) |` C ) = ( ( A |` C ) |` B ) $=
    ( cin cres incom reseq2i resres 3eqtr4i ) ABCDZEACBDZEABECEACEBEJKABCFGABCH
    ACBHI $.

  $( Subclass theorem for restriction.  (Contributed by NM, 16-Aug-1994.) $)
  ssres $p |- ( A C_ B -> ( A |` C ) C_ ( B |` C ) ) $=
    ( wss cvv cxp cin cres ssrin df-res 3sstr4g ) ABDACEFZGBLGACHBCHABLIACJBCJK
    $.

  $( Subclass theorem for restriction.  (Contributed by NM, 22-Mar-1998.)
     (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  ssres2 $p |- ( A C_ B -> ( C |` A ) C_ ( C |` B ) ) $=
    ( wss cvv cxp cin cres xpss1 sslin syl df-res 3sstr4g ) ABDZCAEFZGZCBEFZGZC
    AHCBHNOQDPRDABEIOQCJKCALCBLM $.

  $( A restriction is a relation.  Exercise 12 of [TakeutiZaring] p. 25.
     (Contributed by NM, 2-Aug-1994.)  (Proof shortened by Andrew Salmon,
     27-Aug-2011.) $)
  relres $p |- Rel ( A |` B ) $=
    ( cres cvv cxp wss wrel cin df-res inss2 eqsstri relxp relss mp2 ) ABCZBDEZ
    FPGOGOAPHPABIAPJKBDLOPMN $.

  $( Absorption law for restriction.  Exercise 17 of [TakeutiZaring] p. 25.
     (Contributed by NM, 9-Aug-1994.) $)
  resabs1 $p |- ( B C_ C -> ( ( A |` C ) |` B ) = ( A |` B ) ) $=
    ( wss cres cin resres wceq sseqin2 reseq2 sylbi syl5eq ) BCDZACEBEACBFZEZAB
    EZACBGMNBHOPHBCINBAJKL $.

  ${
    resabs1d.b $e |- ( ph -> B C_ C ) $.
    $( Absorption law for restriction, deduction form.  (Contributed by Glauco
       Siliprandi, 11-Dec-2019.) $)
    resabs1d $p |- ( ph -> ( ( A |` C ) |` B ) = ( A |` B ) ) $=
      ( wss cres wceq resabs1 syl ) ACDFBDGCGBCGHEBCDIJ $.
  $}

  $( Absorption law for restriction.  (Contributed by NM, 27-Mar-1998.) $)
  resabs2 $p |- ( B C_ C -> ( ( A |` B ) |` C ) = ( A |` B ) ) $=
    ( wss cres rescom resabs1 syl5eq ) BCDABEZCEACEBEIABCFABCGH $.

  $( Idempotent law for restriction.  (Contributed by NM, 27-Mar-1998.) $)
  residm $p |- ( ( A |` B ) |` B ) = ( A |` B ) $=
    ( wss cres wceq ssid resabs2 ax-mp ) BBCABDZBDIEBFABBGH $.

  $( A restriction to an image.  (Contributed by NM, 29-Sep-2004.) $)
  resima $p |- ( ( A |` B ) "" B ) = ( A "" B ) $=
    ( cres crn cima residm rneqi df-ima 3eqtr4i ) ABCZBCZDJDJBEABEKJABFGJBHABHI
    $.

  $( Image under a restricted class.  (Contributed by FL, 31-Aug-2009.) $)
  resima2 $p |- ( B C_ C -> ( ( A |` C ) "" B ) = ( A "" B ) ) $=
    ( wss cres cima crn df-ima cin resres rneqi wceq df-ss incom reseq2d reseq2
    a1i rneqd syl6eqr syl5eq eqtrd sylbi ) BCDZACEZBFUDBEZGZABFZUDBHUCUFACBIZEZ
    GZUGUEUIACBJKUCBCIZBLZUJUGLBCMULUJAUKEZGZUGULUIUMULUHUKAUHUKLULCBNQORULUNAB
    EZGUGULUMUOUKBAPRABHSUAUBTT $.

  $( Restriction of a constant function (or other Cartesian product).
     (Contributed by Stefan O'Rear, 24-Jan-2015.) $)
  xpssres $p |- ( C C_ A -> ( ( A X. B ) |` C ) = ( C X. B ) ) $=
    ( wss cxp cres cin df-res inxp incom inv1 xpeq12i 3eqtri wceq biimpi xpeq1d
    cvv df-ss syl5eq ) CADZABEZCFZCAGZBEZCBEUBUACQEGACGZBQGZEUDUACHABCQIUEUCUFB
    ACJBKLMTUCCBTUCCNCAROPS $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Membership in a restriction.  (Contributed by Scott Fenton,
       17-Mar-2011.) $)
    elres $p |- ( A e. ( B |` C )
          <-> E. x e. C E. y ( A = <. x , y >. /\ <. x , y >. e. B ) ) $=
      ( cres wcel cv cop wceq wex wrex wrel relres elrel mpan eleq1 biimpd vex
      wa opelres biimpi ancomd syl6com ancld an12 syl6ib 2eximdv rexcom4 df-rex
      mpd exbii excom 3bitri sylibr simplbi2com biimprd exlimdv rexlimiv impbii
      syl9 impd ) CDEFZGZCAHZBHZIZJZVGDGZTZBKZAELZVDVEEGZVJTZBKAKZVLVDVHBKAKZVO
      VCMVDVPDENABCVCOPVDVHVNABVDVHVHVMVITZTVNVDVHVQVHVDVGVCGZVQVHVDVRCVGVCQZRV
      RVIVMVRVIVMTVEVFDEBSUAZUBUCUDUEVHVMVIUFUGUHUKVLVJAELZBKVNAKZBKVOVJABEUIWA
      WBBVJAEUJULVNBAUMUNUOVKVDAEVMVJVDBVMVHVIVDVMVIVRVHVDVRVIVMVTUPVHVDVRVSUQV
      AVBURUSUT $.

    ${
      elsnres.1 $e |- C e. _V $.
      $( Membership in restriction to a singleton.  (Contributed by Scott
         Fenton, 17-Mar-2011.) $)
      elsnres $p |- ( A e. ( B |` { C } )
            <-> E. y ( A = <. C , y >. /\ <. C , y >. e. B ) ) $=
        ( vx csn cres wcel cv cop wceq wa wex elres rexcom4 opeq1 eqeq2d eleq1d
        wrex anbi12d rexsn exbii 3bitri ) BCDGZHIBFJZAJZKZLZUHCIZMZANFUETUKFUET
        ZANBDUGKZLZUMCIZMZANFABCUEOUKFAUEPULUPAUKUPFDEUFDLZUIUNUJUOUQUHUMBUFDUG
        QZRUQUHUMCURSUAUBUCUD $.
    $}

    $( Simplification law for restriction.  (Contributed by NM,
       16-Aug-1994.) $)
    relssres $p |- ( ( Rel A /\ dom A C_ B ) -> ( A |` B ) = A ) $=
      ( vx vy wrel cdm wss wa cres wceq simpl cv cop wcel vex opeldm ssel ancld
      wi syl5 opelres syl6ibr adantl relssdv resss jctil eqss sylibr ) AEZAFZBG
      ZHZABIZAGZAUMGZHUMAJULUOUNULCDAUMUIUKKUKCLZDLZMZANZURUMNZSUIUKUSUSUPBNZHU
      TUKUSVAUSUPUJNUKVAUPUQACODOZPUJBUPQTRUPUQABVBUAUBUCUDABUEUFUMAUGUH $.
  $}

  $( The domain of a restriction to a singleton is a singleton.  (Contributed
     by Alexander van der Vekens, 2-Jul-2017.) $)
  dmressnsn $p |- ( A e. dom F -> dom ( F |` { A } ) = { A } ) $=
    ( cdm wcel csn cres cin dmres wss wceq snssi df-ss sylib syl5eq ) ABCZDZBAE
    ZFCQOGZQBQHPQOIRQJAOKQOLMN $.

  $( The element of the domain of a restriction to a singleton is the element
     of the singleton.  (Contributed by Alexander van der Vekens,
     2-Jul-2017.) $)
  eldmressnsn $p |- ( A e. dom F -> A e. dom ( F |` { A } ) ) $=
    ( cdm wcel csn cres snidg dmressnsn eleqtrrd ) ABCZDAAEZBKFCAJGABHI $.

  $( An element of the domain (of a relation) is an element of the domain of
     the restriction (of the relation) to the singleton containing this
     element.  (Contributed by Alexander van der Vekens, 22-Jul-2018.) $)
  eldmeldmressn $p |- ( X e. dom F <-> X e. dom ( F |` { X } ) ) $=
    ( cdm wcel csn cres eldmressnsn cin elin simprbi dmres eleq2s impbii ) BACZ
    DZBABEZFCZDBAGOBPNHZQBRDBPDOBPNIJAPKLM $.

  $( A relation restricted to its domain equals itself.  (Contributed by NM,
     12-Dec-2006.) $)
  resdm $p |- ( Rel A -> ( A |` dom A ) = A ) $=
    ( wrel cdm wss cres wceq ssid relssres mpan2 ) ABACZJDAJEAFJGAJHI $.

  $( The restriction of a set is a set.  (Contributed by NM, 28-Mar-1998.)
     (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  resexg $p |- ( A e. V -> ( A |` B ) e. _V ) $=
    ( cres wss wcel cvv resss ssexg mpan ) ABDZAEACFKGFABHKACIJ $.

  ${
    resex.1 $e |- A e. _V $.
    $( The restriction of a set is a set.  (Contributed by Jeff Madsen,
       19-Jun-2011.) $)
    resex $p |- ( A |` B ) e. _V $=
      ( cvv wcel cres resexg ax-mp ) ADEABFDECABDGH $.
  $}

  $( Class restriction distributes over intersection.  (Contributed by FL,
     6-Oct-2008.) $)
  resindm $p |- ( Rel A -> ( A |` ( B i^i dom A ) ) = ( A |` B ) ) $=
    ( wrel cdm cin cres resindi resdm ineq2d incom inres eqtri wceq reseq1i a1i
    inidm syl5eq eqtrd ) ACZABADZEFABFZATFZEZUAABTGSUCUAAEZUASUBAUAAHISUDAAEZBF
    ZUAUDAUAEUFUAAJAABKLUFUAMSUEABAPNOQRQ $.

  $( Restricting a function to a domain without one element of the domain of
     the function, and adding a pair of this element and the function value of
     the element results in the function itself.  (Contributed by AV,
     2-Dec-2018.) $)
  resdmdfsn $p |- ( Rel R -> ( R |` ( _V \ { X } ) )
                             = ( R |` ( dom R \ { X } ) ) ) $=
    ( wrel cvv csn cdif cdm cin cres resindm wceq indif1 incom inv1 difeq1i a1i
    eqtri reseq2d eqtr3d ) ACZADBEZFZAGZHZIAUBIAUCUAFZIAUBJTUDUEAUDUEKTUDDUCHZU
    AFUEDUCUALUFUCUAUFUCDHUCDUCMUCNQOQPRS $.

  ${
    $d x y A $.
    $( Restriction of a class abstraction of ordered pairs.  (Contributed by
       NM, 5-Nov-2002.) $)
    resopab $p |- ( { <. x , y >. | ph } |` A ) =
                  { <. x , y >. | ( x e. A /\ ph ) } $=
      ( copab cres cvv cxp cin cv wa df-res df-xp biantru opabbii eqtr4i ineq2i
      wcel vex eqtri incom inopab ) ABCEZDFUCDGHZIZBJDRZAKBCEZUCDLUEUFBCEZUCIZU
      GUEUCUHIUIUDUHUCUDUFCJGRZKZBCEUHBCDGMUFUKBCUJUFCSNOPQUCUHUATUFABCUBTT $.

    $( A subclass of the identity function is the identity function restricted
       to its domain.  (Contributed by NM, 13-Dec-2003.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.) $)
    iss $p |- ( A C_ _I <-> A = ( _I |` dom A ) ) $=
      ( vx vy cid wss cdm cres wceq cv cop wcel wb wal wa ssel wi opeldm syl5bi
      vex wrel a1i jcad wbr df-br bitr3i wex eldm2 opeq2 eleq1d biimprcd sylcom
      ideq exlimdv imbi2d syl5ibcom impd impbid opelres alrimivv reli relss mpi
      syl6bbr relres eqrel sylancl mpbird resss sseq1 mpbiri impbii ) ADEZADAFZ
      GZHZVLVOBIZCIZJZAKZVRVNKZLZCMBMZVLWABCVLVSVRDKZVPVMKZNZVTVLVSWEVLVSWCWDAD
      VROZVSWDPVLVPVQABSZCSZQUAUBVLWCWDVSWCVPVQHZVLWDVSPZWCVPVQDUCWIVPVQDUDVPVQ
      WHULUEZVLWDVPVPJZAKZPWIWJWDVSCUFVLWMCVPAWGUGVLVSWMCVLVSWCWMWFWCWIVSWMWKWI
      WMVSWIWLVRAVPVQVPUHUIZUJRUKUMRWIWMVSWDWNUNUORUPUQVPVQDVMWHURVCUSVLATZVNTV
      OWBLVLDTWOUTADVAVBDVMVDBCAVNVEVFVGVOVLVNDEDVMVHAVNDVIVJVK $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.
    $( Restriction of a class abstraction of ordered pairs.  (Contributed by
       NM, 24-Aug-2007.) $)
    resopab2 $p |- ( A C_ B -> ( { <. x , y >. | ( x e. B /\ ph ) } |` A ) =
                  { <. x , y >. | ( x e. A /\ ph ) } ) $=
      ( wss cv wcel wa copab cres resopab pm4.71d anbi1d anass syl6rbb opabbidv
      ssel syl5eq ) DEFZBGZEHZAIZBCJDKUADHZUCIZBCJUDAIZBCJUCBCDLTUEUFBCTUFUDUBI
      ZAIUETUDUGATUDUBDEUARMNUDUBAOPQS $.

    $( Restriction of the mapping operation.  (Contributed by Mario Carneiro,
       15-Jul-2013.) $)
    resmpt $p |- ( B C_ A -> ( ( x e. A |-> C ) |` B ) = ( x e. B |-> C ) ) $=
      ( vy wss cv wcel wceq wa copab cres cmpt resopab2 df-mpt reseq1i 3eqtr4g
      ) CBFAGZBHEGDIZJAEKZCLRCHSJAEKABDMZCLACDMSAECBNUATCAEBDOPAECDOQ $.

    $( Unconditional restriction of the mapping operation.  (Contributed by
       Stefan O'Rear, 24-Jan-2015.)  (Proof shortened by Mario Carneiro,
       22-Mar-2015.) $)
    resmpt3 $p |- ( ( x e. A |-> C ) |` B ) = ( x e. ( A i^i B ) |-> C ) $=
      ( cmpt cres cin resres wss wceq ssid resmpt ax-mp reseq1i inss1 3eqtr3i )
      ABDEZBFZCFQBCGZFZQCFASDEZQBCHRQCBBIRQJBKABBDLMNSBITUAJBCOABSDLMP $.
  $}

  ${
    $d A x $.  $d B x $.
    resmptd.b $e |- ( ph -> B C_ A ) $.
    $( Restriction of the mapping operation, deduction form.  (Contributed by
       Glauco Siliprandi, 11-Dec-2019.) $)
    resmptd $p |- ( ph -> ( ( x e. A |-> C ) |` B ) = ( x e. B |-> C ) ) $=
      ( wss cmpt cres wceq resmpt syl ) ADCGBCEHDIBDEHJFBCDEKL $.
  $}

  ${
    $d w x y z A $.  $d w x y z R $.
    $( Alternate definition of the restriction operation.  (Contributed by
       Mario Carneiro, 5-Nov-2013.) $)
    dfres2 $p |- ( R |` A ) = { <. x , y >. | ( x e. A /\ x R y ) } $=
      ( vz vw cres cv wbr wa copab relres relopab cop vex brres df-br ancom weq
      wcel 3bitr3i eleq1 breq1 anbi12d breq2 anbi2d opelopab bitr4i eqrelriiv )
      EFDCGZAHZCTZUKBHZDIZJZABKZDCLUOABMEHZFHZNZUJTZUQCTZUQURDIZJZUSUPTUQURUJIV
      BVAJUTVCUQURDCFOZPUQURUJQVBVARUAUOVAUQUMDIZJVCABUQUREOVDAESULVAUNVEUKUQCU
      BUKUQUMDUCUDBFSVEVBVAUMURUQDUEUFUGUHUI $.
  $}

  ${
    $d A x y $.
    $( The restricted identity expressed with the class builder.  (Contributed
       by FL, 25-Apr-2012.) $)
    opabresid $p |- { <. x , y >. | ( x e. A /\ y = x ) } = ( _I |` A ) $=
      ( weq copab cres cv wcel cid resopab equcom opabbii eqtr4i reseq1i eqtr3i
      wa dfid3 ) BADZABEZCFAGCHRPABEICFRABCJSICSABDZABEIRTABBAKLABQMNO $.
  $}

  ${
    $d A x y $.
    $( The restricted identity expressed with the ""maps to"" notation.
       (Contributed by FL, 25-Apr-2012.) $)
    mptresid $p |- ( x e. A |-> x ) = ( _I |` A ) $=
      ( vy cv cmpt wcel weq wa copab cid cres df-mpt opabresid eqtri ) ABADZEOB
      FCAGHACIJBKACBOLACBMN $.
  $}

  $( The domain of a restricted identity function.  (Contributed by NM,
     27-Aug-2004.) $)
  dmresi $p |- dom ( _I |` A ) = A $=
    ( cid cdm wss cres wceq cvv ssv dmi sseqtr4i ssdmres mpbi ) ABCZDBAECAFAGMA
    HIJABKL $.

  ${
    $d A x y $.
    $( Restriction of the identity to a singleton.  (Contributed by FL,
       2-Aug-2009.) $)
    restidsing $p |- ( _I |` { A } ) = ( { A } X. { A } ) $=
      ( vx vy cid csn cres cxp relres cv wcel wa wceq elsn wi cvv imp jca bitri
      ex sylbi relxp cop wbr df-br bicomi anbi1i simpr ideqg biimpd ax-mp eqtr2
      vex syl6ibr syl syl5bi eqtr3 ideq equcom sylibr com12 simpl impbii opelxp
      opelres 3bitr4i eqrelriiv ) BCDAEZFZVGVGGZDVGHVGVGUABIZCIZUBZDJZVJVGJZKZV
      NVKVGJZKZVLVHJVLVIJVOVJVKDUCZVNKZVQVMVRVNVRVMVJVKDUDUEUFVSVQVSVNVPVRVNUGV
      RVNVPVNVJALZVRVPBAMZVRVJVKLZVTVPNVKOJZVRWBNCULZWCVRWBVJVKOUHUIUJWBVTVKALZ
      VPWBVTWEVJVKAUKSCAMZUMUNUOPQVQVRVNVNVPVRVNVTVPVRNWAVPVTVRVPWEVTVRNWFWEVTV
      RWEVTKVKVJLZVRVKVJAUPVRWBWGVJVKWDUQBCURRUSSTUTTPVNVPVAQVBRVJVKDVGWDVDVJVK
      VGVGVCVEVF $.
  $}

  $( TODO - delete this and replace w/ dfres3 (in FL's mathbox) $)
  $( Any relation restricted to the universe is itself.  (Contributed by NM,
     16-Mar-2004.) $)
  resid $p |- ( Rel A -> ( A |` _V ) = A ) $=
    ( wrel cdm cvv wss cres wceq ssv relssres mpan2 ) ABACZDEADFAGKHADIJ $.

  $( Equality theorem for image.  (Contributed by NM, 14-Aug-1994.) $)
  imaeq1 $p |- ( A = B -> ( A "" C ) = ( B "" C ) ) $=
    ( wceq cres crn cima reseq1 rneqd df-ima 3eqtr4g ) ABDZACEZFBCEZFACGBCGLMNA
    BCHIACJBCJK $.

  $( Equality theorem for image.  (Contributed by NM, 14-Aug-1994.) $)
  imaeq2 $p |- ( A = B -> ( C "" A ) = ( C "" B ) ) $=
    ( wceq cres crn cima reseq2 rneqd df-ima 3eqtr4g ) ABDZCAEZFCBEZFCAGCBGLMNA
    BCHICAJCBJK $.

  ${
    imaeq1i.1 $e |- A = B $.
    $( Equality theorem for image.  (Contributed by NM, 21-Dec-2008.) $)
    imaeq1i $p |- ( A "" C ) = ( B "" C ) $=
      ( wceq cima imaeq1 ax-mp ) ABEACFBCFEDABCGH $.

    $( Equality theorem for image.  (Contributed by NM, 21-Dec-2008.) $)
    imaeq2i $p |- ( C "" A ) = ( C "" B ) $=
      ( wceq cima imaeq2 ax-mp ) ABECAFCBFEDABCGH $.
  $}

  ${
    imaeq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality theorem for image.  (Contributed by FL, 15-Dec-2006.) $)
    imaeq1d $p |- ( ph -> ( A "" C ) = ( B "" C ) ) $=
      ( wceq cima imaeq1 syl ) ABCFBDGCDGFEBCDHI $.

    $( Equality theorem for image.  (Contributed by FL, 15-Dec-2006.) $)
    imaeq2d $p |- ( ph -> ( C "" A ) = ( C "" B ) ) $=
      ( wceq cima imaeq2 syl ) ABCFDBGDCGFEBCDHI $.

    imaeq12d.2 $e |- ( ph -> C = D ) $.
    $( Equality theorem for image.  (Contributed by Mario Carneiro,
       4-Dec-2016.) $)
    imaeq12d $p |- ( ph -> ( A "" C ) = ( B "" D ) ) $=
      ( cima imaeq1d imaeq2d eqtrd ) ABDHCDHCEHABCDFIADECGJK $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Alternate definition of image.  Compare definition (d) of [Enderton]
       p. 44.  (Contributed by NM, 19-Apr-2004.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    dfima2 $p |- ( A "" B ) = { y | E. x e. B x A y } $=
      ( cima cres crn cv wbr wex cab wrex df-ima dfrn2 wa vex brres ancom bitri
      wcel exbii df-rex bitr4i abbii 3eqtri ) CDECDFZGAHZBHZUFIZAJZBKUGUHCIZADL
      ZBKCDMABUFNUJULBUJUGDTZUKOZAJULUIUNAUIUKUMOUNUGUHCDBPQUKUMRSUAUKADUBUCUDU
      E $.

    $( Alternate definition of image.  Compare definition (d) of [Enderton]
       p. 44.  (Contributed by NM, 14-Aug-1994.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    dfima3 $p |- ( A "" B ) = { y | E. x ( x e. B /\ <. x , y >. e. A ) } $=
      ( cima cv wbr wrex cab wcel cop wa dfima2 df-br rexbii df-rex bitri abbii
      wex eqtri ) CDEAFZBFZCGZADHZBIUADJUAUBKCJZLASZBIABCDMUDUFBUDUEADHUFUCUEAD
      UAUBCNOUEADPQRT $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Membership in an image.  Theorem 34 of [Suppes] p. 65.  (Contributed by
       NM, 20-Jan-2007.) $)
    elimag $p |- ( A e. V -> ( A e. ( B "" C ) <-> E. x e. C x B A ) ) $=
      ( vy cv wbr wrex cima wceq breq2 rexbidv dfima2 elab2g ) AGZFGZCHZADIPBCH
      ZADIFBCDJEQBKRSADQBPCLMAFCDNO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    elima.1 $e |- A e. _V $.
    $( Membership in an image.  Theorem 34 of [Suppes] p. 65.  (Contributed by
       NM, 19-Apr-2004.) $)
    elima $p |- ( A e. ( B "" C ) <-> E. x e. C x B A ) $=
      ( cvv wcel cima cv wbr wrex wb elimag ax-mp ) BFGBCDHGAIBCJADKLEABCDFMN
      $.

    $( Membership in an image.  Theorem 34 of [Suppes] p. 65.  (Contributed by
       NM, 11-Aug-2004.) $)
    elima2 $p |- ( A e. ( B "" C ) <-> E. x ( x e. C /\ x B A ) ) $=
      ( cima wcel cv wbr wrex wa wex elima df-rex bitri ) BCDFGAHZBCIZADJPDGQKA
      LABCDEMQADNO $.

    $( Membership in an image.  Theorem 34 of [Suppes] p. 65.  (Contributed by
       NM, 14-Aug-1994.) $)
    elima3 $p |- ( A e. ( B "" C ) <-> E. x ( x e. C /\ <. x , A >. e. B ) ) $=
      ( cima wcel cv wbr wa wex cop elima2 df-br anbi2i exbii bitri ) BCDFGAHZD
      GZRBCIZJZAKSRBLCGZJZAKABCDEMUAUCATUBSRBCNOPQ $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d x y z w $.
    nfima.1 $e |- F/_ x A $.
    nfima.2 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for image.  (Contributed by NM,
       30-Dec-1996.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    nfima $p |- F/_ x ( A "" B ) $=
      ( cima cres crn df-ima nfres nfrn nfcxfr ) ABCFBCGZHBCIAMABCDEJKL $.
  $}

  ${
    $d x y z $.  $d B y z $.  $d A y z $.  $d ph y $.
    nfimad.2 $e |- ( ph -> F/_ x A ) $.
    nfimad.3 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of bound-variable hypothesis builder ~ nfima .
       (Contributed by FL, 15-Dec-2006.)  (Revised by Mario Carneiro,
       15-Oct-2016.) $)
    nfimad $p |- ( ph -> F/_ x ( A "" B ) ) $=
      ( vz cv wcel wal cab cima wnfc nfaba1 nfima wb wa nfnfc1 nfan abidnf
      imaeq1d imaeq2d sylan9eq nfceqdf syl2anc mpbii ) ABGHZCIZBJGKZUGDIZBJGKZL
      ZMZBCDLZMZBUIUKUHBGNUJBGNOABCMZBDMZUMUOPEFUPUQQBULUNUPUQBBCRBDRSUPUQULCUK
      LUNUPUICUKBGCTUAUQUKDCBGDTUBUCUDUEUF $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The image of the domain of a class is the range of the class.
       (Contributed by NM, 14-Aug-1994.) $)
    imadmrn $p |- ( A "" dom A ) = ran A $=
      ( vx vy cv cdm wcel cop wa wex cab cima crn vex opeldm ancom bitr2i exbii
      pm4.71i abbii dfima3 dfrn3 3eqtr4i ) BDZAEZFZUCCDZGAFZHZBIZCJUGBIZCJAUDKA
      LUIUJCUHUGBUGUGUEHUHUGUEUCUFABMCMNRUGUEOPQSBCAUDTBCAUAUB $.

    $( The image of a class is a subset of its range.  Theorem 3.16(xi) of
       [Monk1] p. 39.  (Contributed by NM, 31-Mar-1995.) $)
    imassrn $p |- ( A "" B ) C_ ran A $=
      ( vx vy cv wcel cop wex cab cima crn exsimpr ss2abi dfima3 dfrn3 3sstr4i
      wa ) CEZBFZRDEGAFZQCHZDITCHZDIABJAKUAUBDSTCLMCDABNCDAOP $.
  $}

  ${
    $d x y A $.
    $( Image under the identity relation.  Theorem 3.16(viii) of [Monk1]
       p. 38.  (Contributed by NM, 30-Apr-1998.) $)
    imai $p |- ( _I "" A ) = A $=
      ( vx vy cid cima cv wcel cop wex cab dfima3 weq wbr df-br vex ideq bitr3i
      wa anbi2i bitri ancom exbii eleq1 ceqsexv abbii abid2 3eqtri ) DAEBFZAGZU
      HCFZHDGZRZBIZCJUJAGZCJABCDAKUMUNCUMBCLZUIRZBIUNULUPBULUIUORUPUKUOUIUKUHUJ
      DMUOUHUJDNUHUJCOZPQSUIUOUATUBUIUNBUJUQUHUJAUCUDTUECAUFUG $.
  $}

  $( The range of the restricted identity function.  (Contributed by NM,
     27-Aug-2004.) $)
  rnresi $p |- ran ( _I |` A ) = A $=
    ( cid cima cres crn df-ima imai eqtr3i ) BACBADEABAFAGH $.

  $( The image of a restriction of the identity function.  (Contributed by FL,
     31-Dec-2006.) $)
  resiima $p |- ( B C_ A -> ( ( _I |` A ) "" B ) = B ) $=
    ( wss cid cres cima crn wceq df-ima a1i resabs1 rneqd rnresi 3eqtrd ) BACZD
    AEZBFZPBEZGZDBEZGZBQSHOPBIJORTDBAKLUABHOBMJN $.

  $( Image of the empty set.  Theorem 3.16(ii) of [Monk1] p. 38.  (Contributed
     by NM, 20-May-1998.) $)
  ima0 $p |- ( A "" (/) ) = (/) $=
    ( c0 cima cres crn df-ima res0 rneqi rn0 3eqtri ) ABCABDZEBEBABFKBAGHIJ $.

  $( Image under the empty relation.  (Contributed by FL, 11-Jan-2007.) $)
  0ima $p |- ( (/) "" A ) = (/) $=
    ( c0 cima crn imassrn rn0 sseqtri 0ss eqssi ) BACZBJBDBBAEFGJHI $.

  ${
    $d A y z $.  $d B y z $.  $d C y z $.  $d x y z $.  $d F y z $.
    $( Move class substitution in and out of the image of a function.
       (Contributed by FL, 15-Dec-2006.)  (Revised by NM, 20-Aug-2018.) $)
    csbima12 $p |- [_ A / x ]_ ( F "" B ) = ( [_ A / x ]_ F "" [_ A / x ]_ B ) $=
      ( vy cvv wcel cima csb wceq csbeq1 imaeq12d eqeq12d nfcsb1v nfima csbeq1a
      cv vex c0 csbprc weq csbief vtoclg wn imaeq2d ima0 syl6req eqtrd pm2.61i
      ) BFGZABDCHZIZABDIZABCIZHZJZAEQZUKIZAUQDIZAUQCIZHZJUPEBFUQBJZURULVAUOAUQB
      UKKVBUSUMUTUNAUQBDKAUQBCKLMAUQUKVAERAUSUTAUQDNAUQCNOAEUADUSCUTAUQDPAUQCPL
      UBUCUJUDZULSUOABUKTVCUOUMSHSVCUNSUMABCTUEUMUFUGUHUI $.

    $( Move class substitution in and out of the image of a function.
       (Contributed by FL, 15-Dec-2006.)  (Proof shortened by Mario Carneiro,
       4-Dec-2016.)  Obsolete as of 20-Aug-2018.  Use ~ csbfv12 instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbima12gOLD $p |- ( A e. C -> [_ A / x ]_ ( F "" B ) =
                 ( [_ A / x ]_ F "" [_ A / x ]_ B ) ) $=
      ( vy cv cima csb csbeq1 imaeq12d eqeq12d vex nfcsb1v nfima csbeq1a csbief
      wceq vtoclg ) AFGZECHZIZATEIZATCIZHZRABUAIZABEIZABCIZHZRFBDTBRZUBUFUEUIAT
      BUAJUJUCUGUDUHATBEJATBCJKLATUAUEFMAUCUDATENATCNOAGTREUCCUDATEPATCPKQS $.
  $}

  $( A class whose image under another is empty is disjoint with the other's
     domain.  (Contributed by FL, 24-Jan-2007.) $)
  imadisj $p |- ( ( A "" B ) = (/) <-> ( dom A i^i B ) = (/) ) $=
    ( cima wceq cres crn cdm cin df-ima eqeq1i dm0rn0 dmres incom eqtri 3bitr2i
    c0 ) ABCZPDABEZFZPDRGZPDAGZBHZPDQSPABIJRKTUBPTBUAHUBABLBUAMNJO $.

  $( A preimage under any class is included in the domain of the class.
     (Contributed by FL, 29-Jan-2007.) $)
  cnvimass $p |- ( `' A "" B ) C_ dom A $=
    ( ccnv cima crn cdm imassrn dfdm4 sseqtr4i ) ACZBDJEAFJBGAHI $.

  $( The preimage of the range of a class is the domain of the class.
     (Contributed by Jeff Hankins, 15-Jul-2009.) $)
  cnvimarndm $p |- ( `' A "" ran A ) = dom A $=
    ( ccnv cdm cima crn imadmrn df-rn imaeq2i dfdm4 3eqtr4i ) ABZKCZDKEKAEZDACK
    FMLKAGHAIJ $.

  ${
    $d x y A $.  $d x B $.  $d x y R $.
    $( The image of a singleton.  (Contributed by NM, 8-May-2005.) $)
    imasng $p |- ( A e. B -> ( R "" { A } ) = { y | A R y } ) $=
      ( vx wcel cvv csn cima wbr cab wceq elex wrex dfima2 rexsng abbidv syl5eq
      cv breq1 syl ) BCFBGFZDBHZIZBASZDJZAKZLBCMUBUDESZUEDJZEUCNZAKUGEADUCOUBUJ
      UFAUIUFEBGUHBUEDTPQRUA $.

    $( The image of a singleton.  (Contributed by NM, 20-May-1998.) $)
    relimasn $p |- ( Rel R -> ( R "" { A } ) = { y | A R y } ) $=
      ( wrel cvv wcel csn cima cv wbr cab wceq wn wa c0 snprc imaeq2 sylbi ima0
      syl6eq adantl wex brrelex stoic1a nexdv necon1bbii sylib eqtr4d ex imasng
      abn0 pm2.61d2 ) CDZBEFZCBGZHZBAIZCJZAKZLZUMUNMZUTUMVANZUPOUSVAUPOLUMVAUPC
      OHZOVAUOOLUPVCLBPUOOCQRCSTUAVBURAUBZMUSOLVBURAUMURUNBUQCUCUDUEVDUSOURAUKU
      FUGUHUIABECUJUL $.

    $( Elementhood in the image of a singleton.  (Contributed by Mario
       Carneiro, 3-Nov-2015.) $)
    elrelimasn $p |- ( Rel R -> ( B e. ( R "" { A } ) <-> A R B ) ) $=
      ( vx wrel csn cima cv wbr cab relimasn eleq2d cvv wi wb brrelex2 ex breq2
      wcel elab3g syl bitrd ) CEZBCAFGZSBADHZCIZDJZSZABCIZUCUDUGBDACKLUCUIBMSZN
      UHUIOUCUIUJABCPQUFUIDBMUEBACRTUAUB $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    elimasn.1 $e |- B e. _V $.
    elimasn.2 $e |- C e. _V $.
    $( Membership in an image of a singleton.  (Contributed by NM,
       15-Mar-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    elimasn $p |- ( C e. ( A "" { B } ) <-> <. B , C >. e. A ) $=
      ( vx csn cima wcel wbr cop cv breq2 cvv cab wceq imasng ax-mp elab2 df-br
      bitri ) CABGHZIBCAJZBCKAIBFLZAJZUCFCUBEUDCBAMBNIUBUEFOPDFBNAQRSBCATUA $.
  $}

  ${
    $d A y z $.  $d B y z $.  $d C y z $.
    $( Membership in an image of a singleton.  (Contributed by Raph Levien,
       21-Oct-2006.) $)
    elimasng $p |- ( ( B e. V /\ C e. W ) ->
                   ( C e. ( A "" { B } ) <-> <. B , C >. e. A ) ) $=
      ( vz vy cv csn cima wcel cop wceq sneq imaeq2d eleq2d eleq1d bibi12d vex
      wb opeq1 eleq1 opeq2 elimasn vtocl2g ) FHZAGHZIZJZKZUGUFLZAKZTUFABIZJZKZB
      UFLZAKZTCUNKZBCLZAKZTGFBCDEUGBMZUJUOULUQVAUIUNUFVAUHUMAUGBNOPVAUKUPAUGBUF
      UAQRUFCMZUOURUQUTUFCUNUBVBUPUSAUFCBUCQRAUGUFGSFSUDUE $.
  $}

  $( Membership in an image of a singleton.  (Contributed by NM,
     5-Aug-2010.) $)
  elimasni $p |- ( C e. ( A "" { B } ) -> B A C ) $=
    ( cvv wcel wa csn cima wbr wn c0 noel wceq snprc biimpi imaeq2d ima0 syl6eq
    eleq2d mtbiri con4i elex jca cop elimasng df-br syl6bbr biimpd mpcom ) BDEZ
    CDEZFZCABGZHZEZBCAIZUOUJUKUJUOUJJZUOCKECLUQUNKCUQUNAKHKUQUMKAUQUMKMBNOPAQRS
    TUACUNUBUCULUOUPULUOBCUDAEUPABCDDUEBCAUFUGUHUI $.

  ${
    $d y F $.  $d x y $.
    $( Two ways to express the class of unique-valued arguments of ` F ` ,
       which is the same as the domain of ` F ` whenever ` F ` is a function.
       The left-hand side of the equality is from Definition 10.2 of [Quine]
       p. 65.  Quine uses the notation ""arg ` F ` "" for this class (for which
       we have no separate notation).  Observe the resemblance to the
       alternative definition ~ dffv4 of function value, which is based on the
       idea in Quine's definition.  (Contributed by NM, 8-May-2005.) $)
    args $p |- { x | E. y ( F "" { x } ) = { y } } = { x | E! y x F y } $=
      ( cv csn cima wceq wex wbr weu cab cvv wcel vex imasng ax-mp eqeq1i exbii
      euabsn bitr4i abbii ) CADZEFZBDZEZGZBHZUBUDCIZBJZAUGUHBKZUEGZBHUIUFUKBUCU
      JUEUBLMUCUJGANBUBLCOPQRUHBSTUA $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.
    eliniseg.1 $e |- C e. _V $.
    $( Membership in an initial segment.  The idiom ` ( ``' A "" { B } ) ` ,
       meaning ` { x | x A B } ` , is used to specify an initial segment in
       (for example) Definition 6.21 of [TakeutiZaring] p. 30.  (Contributed by
       NM, 28-Apr-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    eliniseg $p |- ( B e. V -> ( C e. ( `' A "" { B } ) <-> C A B ) ) $=
      ( wcel cvv ccnv csn cima wbr wb wa cop elimasng df-br syl6bbr bitrd mpan2
      brcnvg ) BDFZCGFZCAHZBIJFZCBAKZLEUAUBMZUDBCUCKZUEUFUDBCNUCFUGUCBCDGOBCUCP
      QBCDGATRS $.
  $}

  ${
    $d A x y $.
    epini.1 $e |- A e. _V $.
    $( Any set is equal to its preimage under the converse epsilon relation.
       (Contributed by Mario Carneiro, 9-Mar-2013.) $)
    epini $p |- ( `' _E "" { A } ) = A $=
      ( vx cep ccnv csn cima cv wbr cvv wb vex eliniseg ax-mp epelc bitri eqriv
      wcel ) CDEAFGZACHZSRZTADIZTARAJRUAUBKBDATJCLMNTABOPQ $.
  $}

  ${
    $d x A $.  $d x B $.
    $( An idiom that signifies an initial segment of an ordering, used, for
       example, in Definition 6.21 of [TakeutiZaring] p. 30.  (Contributed by
       NM, 28-Apr-2004.) $)
    iniseg $p |- ( B e. V -> ( `' A "" { B } ) = { x | x A B } ) $=
      ( wcel cvv ccnv csn cima cv wbr cab wceq elex vex eliniseg abbi2dv syl )
      CDECFEZBGCHIZAJZCBKZALMCDNSUBATBCUAFAOPQR $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( Alternate definition of well-founded relation.  Definition 6.21 of
       [TakeutiZaring] p. 30.  (Contributed by NM, 23-Apr-2004.)  (Revised by
       Mario Carneiro, 23-Jun-2015.) $)
    dffr3 $p |- ( R Fr A <-> A. x ( ( x C_ A /\ x =/= (/) ) ->
                E. y e. x ( x i^i ( `' R "" { y } ) ) = (/) ) ) $=
      ( vz wfr cv wss c0 wne wa wbr crab wceq wrex wi wal ccnv cin cvv csn cima
      dffr2 cab wcel vex iniseg ax-mp ineq2i dfrab3 eqtr4i eqeq1i rexbii imbi2i
      albii bitr4i ) CDFAGZCHUQIJKZEGBGZDLZEUQMZINZBUQOZPZAQURUQDRUSUAUBZSZINZB
      UQOZPZAQABECDUCVIVDAVHVCURVGVBBUQVFVAIVFUQUTEUDZSVAVEVJUQUSTUEVEVJNBUFEDU
      STUGUHUIUTEUQUJUKULUMUNUOUP $.
  $}

  ${
    $d x y A $.  $d x y R $.  $d x V $.
    $( Alternate definition of set-like relation.  (Contributed by Mario
       Carneiro, 23-Jun-2015.) $)
    dfse2 $p |- ( R Se A <-> A. x e. A ( A i^i ( `' R "" { x } ) ) e. _V ) $=
      ( vy wse cv wbr crab cvv wcel wral ccnv csn cima cin df-se cab dfrab3 vex
      wceq iniseg ax-mp ineq2i eqtr4i eleq1i ralbii bitri ) BCEDFAFZCGZDBHZIJZA
      BKBCLUHMNZOZIJZABKADBCPUKUNABUJUMIUJBUIDQZOUMUIDBRULUOBUHIJULUOTASDCUHIUA
      UBUCUDUEUFUG $.
  $}

  $( Subset theorem for image.  (Contributed by NM, 16-Mar-2004.) $)
  imass1 $p |- ( A C_ B -> ( A "" C ) C_ ( B "" C ) ) $=
    ( wss cres crn cima ssres rnss syl df-ima 3sstr4g ) ABDZACEZFZBCEZFZACGBCGM
    NPDOQDABCHNPIJACKBCKL $.

  $( Subset theorem for image.  Exercise 22(a) of [Enderton] p. 53.
     (Contributed by NM, 22-Mar-1998.) $)
  imass2 $p |- ( A C_ B -> ( C "" A ) C_ ( C "" B ) ) $=
    ( wss cres crn cima ssres2 rnss syl df-ima 3sstr4g ) ABDZCAEZFZCBEZFZCAGCBG
    MNPDOQDABCHNPIJCAKCBKL $.

  $( The image of a singleton outside the domain is empty.  (Contributed by NM,
     22-May-1998.) $)
  ndmima $p |- ( -. A e. dom B -> ( B "" { A } ) = (/) ) $=
    ( cdm wcel wn csn cima cres crn c0 df-ima wceq cin dmres incom eqtri disjsn
    biimpri syl5eq dm0rn0 sylib ) ABCZDEZBAFZGBUDHZIZJBUDKUCUECZJLUFJLUCUGUBUDM
    ZJUGUDUBMUHBUDNUDUBOPUHJLUCUBAQRSUETUAS $.

  ${
    $d x y A $.
    $( A converse is a relation.  Theorem 12 of [Suppes] p. 62.  (Contributed
       by NM, 29-Oct-1996.) $)
    relcnv $p |- Rel `' A $=
      ( vy vx cv wbr ccnv df-cnv relopabi ) BDCDAECBAFCBAGH $.
  $}

  ${
    $( When ` R ` is a relation, the sethood assumptions on ~ brcnv can be
       omitted.  (Contributed by Mario Carneiro, 28-Apr-2015.) $)
    relbrcnvg $p |- ( Rel R -> ( A `' R B <-> B R A ) ) $=
      ( wrel cvv wcel wa ccnv wbr wi relcnv brrelex12 mpan a1i ancomd ex brcnvg
      wb pm5.21ndd ) CDZAEFZBEFZGZABCHZIZBACIZUEUCJTUDDUEUCCKABUDLMNTUFUCTUFGUB
      UABACLOPUCUEUFRJTABEECQNS $.

    $( Eliminate the class existence constraint in ~ eliniseg .  (Contributed
       by Mario Carneiro, 5-Dec-2014.)  (Revised by Mario Carneiro,
       17-Nov-2015.) $)
    eliniseg2 $p |- ( Rel A -> ( C e. ( `' A "" { B } ) <-> C A B ) ) $=
      ( ccnv csn cima wcel wbr wrel wb relcnv elrelimasn ax-mp relbrcnvg syl5bb
      ) CADZBEFGZBCPHZAICBAHPIQRJAKBCPLMBCANO $.

    relbrcnv.1 $e |- Rel R $.
    $( When ` R ` is a relation, the sethood assumptions on ~ brcnv can be
       omitted.  (Contributed by Mario Carneiro, 28-Apr-2015.) $)
    relbrcnv $p |- ( A `' R B <-> B R A ) $=
      ( wrel ccnv wbr wb relbrcnvg ax-mp ) CEABCFGBACGHDABCIJ $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.
    $( Two ways of saying that the composition of two relations is included in
       a third relation.  See its special instance ~ cotr for the main
       application.  (Contributed by NM, 27-Dec-1996.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.)  Generalized from its special instance
       ~ cotr .  (Revised by Richard Penner, 24-Dec-2019.) $)
    cotrg $p |-
      ( ( A o. B ) C_ C <-> A. x A. y A. z ( ( x B y /\ y A z ) -> x C z ) ) $=
      ( ccom wss cv cop wcel wi wal wbr wa wrel wb vex albii bitri wex relopabi
      df-co ssrel ax-mp opelco df-br bicomi imbi12i 19.23v bitr4i alcom ) DEGZF
      HZAIZCIZJZUMKZUQFKZLZCMZAMZUOBIZENVCUPDNOZUOUPFNZLZCMBMZAMUMPUNVBQVDBUAZA
      CUMACBDEUCUBACUMFUDUEVAVGAVAVFBMZCMVGUTVICUTVHVELVIURVHUSVEBUOUPDEARCRUFV
      EUSUOUPFUGUHUIVDVEBUJUKSVFCBULTST $.
  $}

  ${
    $d x y z R $.
    $( Two ways of saying a relation is transitive.  Definition of transitivity
       in [Schechter] p. 51.  Special instance of ~ cotrg .  (Contributed by
       NM, 27-Dec-1996.) $)
    cotr $p |-
      ( ( R o. R ) C_ R <-> A. x A. y A. z ( ( x R y /\ y R z ) -> x R z ) ) $=
      ( cotrg ) ABCDDDE $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z R $.  $d x y z S $.  $d z V $.
    $d z W $.
    $( Two ways to state a relation is reflexive.  Adapted from Tarski.
       (Contributed by FL, 15-Jan-2012.)  (Revised by NM, 30-Mar-2016.) $)
    issref $p |- ( ( _I |` A ) C_ R <-> A. x e. A x R x ) $=
      ( vy vz cv wbr wral wcel wi wal cop cid wss df-ral cvv vex opelresi ax-mp
      sylbi cres wb df-br bicomi imbi12i albii ralidm bitri cxp pm2.27 opelresg
      ralv wa weq ideq opeq2 eleq1d biimpcd syl6bir pm2.43i com3r sylbir syl6bi
      syl6 imp ralrimiv sps ralimi wceq eleq1 imbi12d sylibr wrel relres df-rel
      ralxp mpbi sseli ancri pm3.31 syl5 alimi syl ssel alrimiv impbii 3bitr2ri
      dfss2 ) AFZWICGZABHWIBIZWJJZAKWIWILZMBUAZIZWMCIZJZAKZWNCNZWJABOWQWLAWOWKW
      PWJWIPIZWOWKUBAQZWIBPRSWJWPWIWICUCUDUEUFWRWSWRDFZWNIZXBCIZJZDKZWSWRWQAPHZ
      APHZXFXHXGWRWQAPUGWQAULUHXHXEDPPUIZHZXFXHWIEFZLZWNIZXLCIZJZEPHZAPHXJXGXPA
      PXGWTWQJZAKXPWQAPOXQXPAWTXQXPJXAWTXQWQXPWTWQUJWQXOEPXKPIZXMWQXNXRXMXLMIZW
      KUMWQXNJZWIXKMBPUKXSWKXTXSWIXKMGZWKXTJZWIXKMUCYAAEUNZYBWIXKEQUOWKWQYCXNWK
      WQYCXNJZJZWKWKWOYEWIBBRWOWQWPYDWOWPUJYCWPXNYCWMXLCWIXKWIUPUQURVDUSUTVATVB
      VEVCVAVFVDSVGTVHXEXODAEPPXBXLVIXCXMXDXNXBXLWNVJXBXLCVJVKVPVLXJXBXIIZXEJZD
      KXFXEDXIOYGXEDXCYFXCUMYGXDXCYFWNXIXBWNVMWNXINMBVNWNVOVQVRVSYFXCXDVTWAWBTW
      CVBDWNCWHVLWSWQAWNCWMWDWEWFWG $.

    $( Two ways of saying a relation is symmetric.  Similar to definition of
       symmetry in [Schechter] p. 51.  (Contributed by NM, 28-Dec-1996.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    cnvsym $p |- ( `' R C_ R <-> A. x A. y ( x R y -> y R x ) ) $=
      ( cv cop ccnv wcel wi wal wss wbr alcom wrel relcnv ssrel ax-mp vex brcnv
      wb df-br bitr3i imbi12i 2albii 3bitr4i ) BDZADZEZCFZGZUGCGZHZAIBIZUKBIAIU
      HCJZUFUECKZUEUFCKZHZBIAIUKBALUHMUMULSCNBAUHCOPUPUKABUNUIUOUJUNUEUFUHKUIUE
      UFCBQAQRUEUFUHTUAUEUFCTUBUCUD $.

    $( Two ways of saying a relation is antisymmetric.  Definition of
       antisymmetry in [Schechter] p. 51.  (Contributed by NM, 9-Sep-2004.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    intasym $p |- ( ( R i^i `' R ) C_ _I <->
                  A. x A. y ( ( x R y /\ y R x ) -> x = y ) ) $=
      ( ccnv cin cid wss cv cop wcel wi wal wbr wa weq wrel wb df-br vex bitr3i
      relcnv relin2 ssrel mp2b elin brcnv anbi12i bitr4i imbi12i 2albii bitri
      ideq ) CCDZEZFGZAHZBHZIZUNJZURFJZKZBLALZUPUQCMZUQUPCMZNZABOZKZBLALUMPUNPU
      OVBQCUACUMUBABUNFUCUDVAVGABUSVEUTVFUSURCJZURUMJZNVEURCUMUEVCVHVDVIUPUQCRV
      DUPUQUMMVIUPUQCASBSZUFUPUQUMRTUGUHUTUPUQFMVFUPUQFRUPUQVJULTUIUJUK $.

    $( Two ways of saying a relation is antisymmetric and reflexive.
       ` U. U. R ` is the field of a relation by ~ relfld .  (Contributed by
       NM, 6-May-2008.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    asymref $p |- ( ( R i^i `' R ) = ( _I |` U. U. R ) <->
       A. x e. U. U. R A. y ( ( x R y /\ y R x ) <-> x = y ) ) $=
      ( cv wcel cid cuni wb wal wbr wa wceq wi df-br bitr3i bitri 3bitr4i albii
      vex wrel cop ccnv cin cres wral opeluu simpld adantr pm4.71ri bibi1i elin
      sylbi brcnv anbi12i bitr4i opelres ideq pm5.32 19.21v relcnv relin2 ax-mp
      anbi2ci bibi12i relres eqrel mp2an df-ral ) ADZBDZUAZCCUBZUCZEZVKFCGGZUDZ
      EZHZBIZAIZVIVOEZVIVJCJZVJVICJZKZVIVJLZHZBIZMZAIVMVPLZWGAVOUEVSWHAVSWAWFMZ
      BIWHVRWJBWDWAWEKZHWAWDKZWKHVRWJWDWLWKWDWAWBWAWCWBWAVJVOEZWBVKCEZWAWMKVIVJ
      CNZVIVJCASZBSZUFULUGUHUIUJVNWDVQWKVNWNVKVLEZKWDVKCVLUKWBWNWCWRWOWCVIVJVLJ
      WRVIVJCWPWQUMVIVJVLNOUNUOVQVKFEZWAKWKVIVJFVOWQUPWSWEWAWSVIVJFJWEVIVJFNVIV
      JWQUQOVCPVDWAWDWEURQRWAWFBUSPRVMTZVPTWIVTHVLTWTCUTCVLVAVBFVOVEABVMVPVFVGW
      GAVOVHQ $.

    $( Two ways of saying a relation is antisymmetric and reflexive.
       (Contributed by NM, 6-May-2008.)  (Proof shortened by Mario Carneiro,
       4-Dec-2016.) $)
    asymref2 $p |- ( ( R i^i `' R ) = ( _I |` U. U. R ) <->
   ( A. x e. U. U. R x R x /\ A. x A. y ( ( x R y /\ y R x ) -> x = y ) ) ) $=
      ( ccnv cin cid cuni wceq cv wbr wa wral wi ralbii albii bitri wcel 3bitri
      wal vex cres wb asymref albiim r19.26 ancom equcom imbi1i nfv breq2 breq1
      anbi12d anidm syl6bb equsal df-ral cop df-br opeluu simpld adantr pm2.24d
      wn sylbi com12 alrimiv id ja ax-1 impbii anbi12i ) CCDEFCGGZUAHAIZBIZCJZV
      NVMCJZKZVMVNHZUBBSZAVLLVQVRMZBSZVRVQMZBSZKZAVLLZVMVMCJZAVLLZWAASZKZABCUCV
      SWDAVLVQVRBUDNWEWAAVLLZWCAVLLZKWKWJKWIWAWCAVLUEWJWKUFWKWGWJWHWCWFAVLWCVNV
      MHZVQMZBSWFWBWMBVRWLVQABUGUHOVQWFBAWFBUIWLVQWFWFKWFWLVOWFVPWFVNVMVMCUJVNV
      MVMCUKULWFUMUNUOPNWJVMVLQZWAMZASWHWAAVLUPWOWAAWOWAWNWAWAWNVCZVTBVQWPVRVQW
      NVRVOWNVPVOVMVNUQCQZWNVMVNCURWQWNVNVLQVMVNCATBTUSUTVDVAVBVEVFWAVGVHWAWNVI
      VJOPVKRR $.

    $( Two ways of saying a relation is irreflexive.  Definition of
       irreflexivity in [Schechter] p. 51.  (Contributed by NM, 9-Sep-2004.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    intirr $p |- ( ( R i^i _I ) = (/) <-> A. x -. x R x ) $=
      ( vy cid cin c0 wceq cv cop wcel cvv cdif wi wal wbr wn wss incom 3bitr2i
      df-br eqeq1i disj2 wrel wb reli ssrel ax-mp 3bitri equcom vex wa biantrur
      ideq opex eldif bitr4i xchnxbir imbi12i 2albii breq2 notbid equsal albii
      nfv ) BDEZFGZAHZCHZIZDJZVIKBLZJZMZCNANZVHVGGZVGVHBOZPZMZCNZANVGVGBOZPZANV
      FDBEZFGDVKQZVNVEWBFBDRUADBUBDUCWCVNUDUEACDVKUFUGUHVRVMACVOVJVQVLVOVGVHGVG
      VHDOVJCAUIVGVHCUJUMVGVHDTSVIBJZVLVPWDPZVIKJZWEUKVLWFWEVGVHUNULVIKBUOUPVGV
      HBTUQURUSVSWAAVQWACAWACVDVOVPVTVHVGVGBUTVAVBVCS $.

    $( Two ways of saying that two elements have an upper bound.  (Contributed
       by Mario Carneiro, 3-Nov-2015.) $)
    brcodir $p |- ( ( A e. V /\ B e. W ) ->
      ( A ( `' R o. R ) B <-> E. z ( A R z /\ B R z ) ) ) $=
      ( wcel wa ccnv ccom wbr cv wex brcog wb cvv vex brcnvg mpan anbi2d adantl
      exbidv bitrd ) BEGZCFGZHZBCDIZDJKBALZDKZUHCUGKZHZAMUICUHDKZHZAMABCUGDEFNU
      FUKUMAUEUKUMOUDUEUJULUIUHPGUEUJULOAQUHCPFDRSTUAUBUC $.

    $( Two ways of saying a relation is directed.  (Contributed by Mario
       Carneiro, 22-Nov-2013.) $)
    codir $p |- ( ( A X. B ) C_ ( `' R o. R ) <-> A. x e. A A. y e. B
      E. z ( x R z /\ y R z ) ) $=
      ( cv cop cxp wcel ccnv ccom wi wal wa wbr wral cvv wb vex wex wss brcodir
      opelxp df-br mp2an bitr3i imbi12i 2albii wrel relxp ssrel ax-mp 3bitr4i
      r2al ) AGZBGZHZDEIZJZURFKFLZJZMZBNANZUPDJUQEJOZUPCGZFPUQVFFPOCUAZMZBNANUS
      VAUBZVGBEQADQVCVHABUTVEVBVGUPUQDEUDVBUPUQVAPZVGUPUQVAUEUPRJUQRJVJVGSATBTC
      UPUQFRRUCUFUGUHUIUSUJVIVDSDEUKABUSVAULUMVGABDEUOUN $.

    $( A quantifier-free way of expressing the total order predicate.
       (Contributed by Mario Carneiro, 22-Nov-2013.) $)
    qfto $p |- ( ( A X. B ) C_ ( R u. `' R ) <->
                 A. x e. A A. y e. B ( x R y \/ y R x ) ) $=
      ( cv cop cxp wcel ccnv cun wi wal wa wbr wo wss wral opelxp vex brun wrel
      df-br brcnv orbi2i 3bitr3i imbi12i 2albii relxp ssrel ax-mp r2al 3bitr4i
      wb ) AFZBFZGZCDHZIZUQEEJZKZIZLZBMAMZUOCIUPDINZUOUPEOZUPUOEOZPZLZBMAMURVAQ
      ZVHBDRACRVCVIABUSVEVBVHUOUPCDSUOUPVAOVFUOUPUTOZPVBVHUOUPEUTUAUOUPVAUCVKVG
      VFUOUPEATBTUDUEUFUGUHURUBVJVDUNCDUIABURVAUJUKVHABCDULUM $.

    $( A square Cartesian product ` ( A X. A ) ` is a transitive relation.
       (Contributed by FL, 31-Jul-2009.) $)
    xpidtr $p |- ( ( A X. A ) o. ( A X. A ) ) C_ ( A X. A ) $=
      ( vx vy vz cxp ccom wss cv wbr wa wal wcel simplbi2com adantl sylbi com12
      wi brxp adantr imp ax-gen gen2 cotr mpbir ) AAEZUEFUEGBHZCHZUEIZUGDHZUEIZ
      JUFUIUEIZQZDKZCKBKUMBCULDUHUJUKUHUFALZUGALZJUJUKQZUFUGAARUNUPUOUJUNUKUJUO
      UIALZJUNUKQZUGUIAARUQURUOUKUNUQUFUIAARMNOPSOTUAUBBCDUEUCUD $.

    $( The intersection of two transitive classes is transitive.  (Contributed
       by FL, 31-Jul-2009.) $)
    trin2 $p |- ( ( ( R o. R ) C_ R /\ ( S o. S ) C_ S )
      -> ( ( R i^i S ) o. ( R i^i S ) ) C_ ( R i^i S ) ) $=
      ( vx vy vz ccom wss wa cv cin wbr wal cotr brin simpr simpl com12 alanimi
      wi sylbi anim12d an4s syl2anb syl6ibr ex imp sylibr ) AAFAGZBBFBGZHCIZDIZ
      ABJZKZUKEIZULKZHZUJUNULKZSZELZDLZCLZULULFULGUHUIVAUHUJUKAKZUKUNAKZHZUJUNA
      KZSZELZDLZCLZUIVASCDEAMUIVIVAUIUJUKBKZUKUNBKZHZUJUNBKZSZELZDLZCLZVIVASCDE
      BMVQVIVAVPVHUTCVOVGUSDVNVFUREVNVFHZUPVEVMHZUQUPVRVSUMVBVJHVCVKHVRVSSZUOUJ
      UKABNUKUNABNVBVCVJVKVTVRVDVLHVSVRVDVEVLVMVNVFOVNVFPUAQUBUCQUJUNABNUDRRRUE
      TQTUFCDEULMUG $.

    $( A partial order relation is irreflexive.  (Contributed by Mario
       Carneiro, 2-Nov-2015.) $)
    poirr2 $p |- ( R Po A -> ( R i^i ( _I |` A ) ) = (/) ) $=
      ( vx vy wpo cid cres cin c0 wss wceq wrel relres relin2 cv wcel wbr wa wn
      syl5bi mp1i cop df-br brin bitr3i wi vex brres poirr wb ideq breq2 notbid
      sylbi syl5ibcom expimpd ancomsd con2d imnan sylib pm2.21d relssdv ss0 syl
      ) ABEZBFAGZHZIJVGIKVECDVGIVFLVGLVEFAMBVFNUACOZDOZUBZVGPZVHVIBQZVHVIVFQZRZ
      VEVJIPZVKVHVIVGQVNVHVIVGUCVHVIBVFUDUEVEVNVOVEVLVMSUFVNSVEVMVLVMVHVIFQZVHA
      PZRVEVLSZVHVIFADUGZUHVEVQVPVRVEVQVPVRVEVQRVHVHBQZSVPVRAVHBUIVPVTVLVPVHVIK
      VTVLUJVHVIVSUKVHVIVHBULUNUMUOUPUQTURVLVMUSUTVATVBVGVCVD $.
  $}

  $( The relation induced by a transitive relation on a part of its field is
     transitive.  (Taking the intersection of a relation with a square
     Cartesian product is a way to restrict it to a subset of its field.)
     (Contributed by FL, 31-Jul-2009.) $)
  trinxp $p |- ( ( R o. R ) C_ R ->
  ( ( R i^i ( A X. A ) ) o. ( R i^i ( A X. A ) ) ) C_ ( R i^i ( A X. A ) ) ) $=
    ( ccom wss cxp cin xpidtr trin2 mpan2 ) BBCBDAAEZJCJDBJFZKCKDAGBJHI $.

  ${
    soi.1 $e |- R Or S $.
    soi.2 $e |- R C_ ( S X. S ) $.
    $( A strict order relation is irreflexive.  (Contributed by NM,
       10-Feb-1996.)  (Revised by Mario Carneiro, 10-May-2013.) $)
    soirri $p |- -. A R A $=
      ( wcel wa wbr wn wor sonr mpan adantl brel con3i pm2.61i ) ACFZQGZAABHZIZ
      QTQCBJQTDCABKLMSRAACCBENOP $.

    ${
      $d A x $.  $d B x $.  $d R x $.
      $( A strict order relation is a transitive relation.  (Contributed by NM,
         10-Feb-1996.)  (Revised by Mario Carneiro, 10-May-2013.) $)
      sotri $p |- ( ( A R B /\ B R C ) -> A R C ) $=
        ( wcel wa wbr brel simpld anim12i wi wor w3a sotr mpan 3expb mpcom ) AE
        HZBEHZCEHZIZIABDJZBCDJZIZACDJZUEUAUFUDUEUAUBABEEDGKLBCEEDGKMUAUBUCUGUHN
        ZEDOUAUBUCPUIFEABCDQRST $.

      $( A strict order relation has no 2-cycle loops.  (Contributed by NM,
         10-Feb-1996.)  (Revised by Mario Carneiro, 10-May-2013.) $)
      son2lpi $p |- -. ( A R B /\ B R A ) $=
        ( wbr wa soirri sotri mto ) ABCGBACGHAACGACDEFIABACDEFJK $.

      $( A transitivity relation.  (Read ` A <_ B ` and ` B < C ` implies
         ` A < C ` .)  (Contributed by Mario Carneiro, 10-May-2013.) $)
      sotri2 $p |- ( ( A e. S /\ -. B R A /\ B R C ) -> A R C ) $=
        ( wcel wbr wn wi brel simpld wa wceq wo wor wb sotric mpan breq1 biimpd
        con2bid sotri ex jaoi syl6bir com3r mpand com3l 3imp ) AEHZBADIZJZBCDIZ
        ACDIZUOULUNUPUOBEHZULUNUPKUOUQCEHBCEEDGLMUQULNZUNUOUPURUNBAOZABDIZPZUOU
        PKZURUMVAEDQURUMVAJRFEBADSTUCUSVBUTUSUOUPBACDUAUBUTUOUPABCDEFGUDUEUFUGU
        HUIUJUK $.

      $( A transitivity relation.  (Read ` A < B ` and ` B <_ C ` implies
         ` A < C ` .)  (Contributed by Mario Carneiro, 10-May-2013.) $)
      sotri3 $p |- ( ( C e. S /\ A R B /\ -. C R B ) -> A R C ) $=
        ( wcel wbr wn wi brel simprd wa wceq wo wor wb sotric mpan breq2 expcom
        con2bid biimprd sotri jaoi syl6bir com3r mpan2d com12 3imp ) CEHZABDIZC
        BDIZJZACDIZUMULUOUPKZUMULBEHZUQUMAEHURABEEDGLMULURNZUOUMUPUSUOCBOZBCDIZ
        PZUMUPKZUSUNVBEDQUSUNVBJRFECBDSTUCUTVCVAUTUPUMCBADUAUDUMVAUPABCDEFGUEUB
        UFUGUHUIUJUK $.
    $}
  $}

  ${
    soiOLD.1 $e |- A e. _V $.
    soiOLD.2 $e |- R Or S $.
    soiOLD.3 $e |- R C_ ( S X. S ) $.
    $( A strict order relation is irreflexive.  (Contributed by NM,
       10-Feb-1996.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    soirriOLD $p |- -. A R A $=
      ( wcel wa wbr wn wor sonr mpan adantl brel con3i pm2.61i ) ACGZRHZAABIZJZ
      RUARCBKRUAECABLMNTSAACCBFOPQ $.

    ${
      sotriOLD.4 $e |- B e. _V $.
      sotriOLD.5 $e |- C e. _V $.
      $( A strict order relation is a transitive relation.  (Contributed by NM,
         10-Feb-1996.)  (Proof modification is discouraged.)
         (New usage is discouraged.) $)
      sotriOLD $p |- ( ( A R B /\ B R C ) -> A R C ) $=
        ( wcel w3a wbr wa brel wi id 3exp a1dd imp43 syl2an wor sotr mpan mpcom
        ) AEKZBEKZCEKZLZABDMZBCDMZNZACDMZUJUFUGNUGUHNUIUKABEEDHOBCEEDHOUFUGUGUH
        UIUFUGUHUIPUGUFUGUHUIUIQRSTUAEDUBUIULUMPGEABCDUCUDUE $.
    $}

    ${
      son2lpiOLD.4 $e |- B e. _V $.
      $( A strict order relation has no 2-cycle loops.  (Contributed by NM,
         10-Feb-1996.)  (Proof modification is discouraged.)
         (New usage is discouraged.) $)
      son2lpiOLD $p |- -. ( A R B /\ B R A ) $=
        ( wbr wa soirri sotri mto ) ABCIBACIJAACIACDFGKABACDFGLM $.
    $}
  $}

  $( Express ""less than or equals"" for general strict orders.  (Contributed by
     Stefan O'Rear, 17-Jan-2015.) $)
  poleloe $p |- ( B e. V -> ( A ( R u. _I ) B <-> ( A R B \/ A = B ) ) ) $=
    ( cid cun wbr wo wcel wceq brun ideqg orbi2d syl5bb ) ABCEFGABCGZABEGZHBDIZ
    OABJZHABCEKQPROABDLMN $.

  $( Transitive law for general strict orders.  (Contributed by Stefan O'Rear,
     17-Jan-2015.) $)
  poltletr $p |- ( ( R Po X /\ ( A e. X /\ B e. X /\ C e. X ) ) ->
      ( ( A R B /\ B ( R u. _I ) C ) -> A R C ) ) $=
    ( wpo wcel w3a wa wbr cid cun wceq wo poleloe 3ad2ant3 adantl anbi2d com12
    wb wi potr breq2 biimpac a1d jaodan sylbid ) EDFZAEGZBEGZCEGZHZIZABDJZBCDKL
    JZIUNBCDJZBCMZNZIZACDJZUMUOURUNULUOURTZUHUKUIVAUJBCDEOPQRUSUMUTUNUPUMUTUAUQ
    UMUNUPIUTEABCDUBSUNUQIUTUMUQUNUTBCADUCUDUEUFSUG $.

  $( Property of a minimum in a strict order.  (Contributed by Stefan O'Rear,
     17-Jan-2015.) $)
  somin1 $p |- ( ( R Or X /\ ( A e. X /\ B e. X ) ) ->
      if ( A R B , A , B ) ( R u. _I ) A ) $=
    ( wor wcel wa wbr cif cid cun wceq wo iftrue olcd adantl wn sotric mpbird
    wb orcom eqcom orbi2i bitri notbii syl6bb con2bid biimpar iffalse breq1 syl
    eqeq1 orbi12d pm2.61dan poleloe ad2antrl ) DCEZADFZBDFZGGZABCHZABIZACJKHZVB
    ACHZVBALZMZUTVAVFVAVFUTVAVEVDVAABNOPUTVAQZGVFBACHZBALZMZUTVJVGUTVAVJUTVAABL
    ZVHMZQVJQDABCRVLVJVLVHVKMVJVKVHUAVKVIVHABUBUCUDUEUFUGUHVGVFVJTZUTVGVBBLZVMV
    AABUIVNVDVHVEVIVBBACUJVBBAULUMUKPSUNURVCVFTUQUSVBACDUOUPS $.

  $( Commutativity of minimum in a total order.  (Contributed by Stefan O'Rear,
     17-Jan-2015.) $)
  somincom $p |- ( ( R Or X /\ ( A e. X /\ B e. X ) ) ->
      if ( A R B , A , B ) = if ( B R A , B , A ) ) $=
    ( wor wcel wa wbr cif wn so2nr nan mpbi iffalsed eqcomd wceq sotric con2bid
    wi wo ifeq2 ifid syl6req iftrue jaoi syl6bir imp ifeqda ) DCEADFBDFGGZABCHZ
    ABBACHZBAIZUIUJGZULAUMUKBAUIUJUKGJSUMUKJSDABCKUIUJUKLMNOUIUJJZBULPZUIUNABPZ
    UKTZUOUIUJUQDABCQRUPUOUKUPULUKBBIBUKABBUAUKBUBUCUKULBUKBAUDOUEUFUGUH $.

  $( Property of a minimum in a strict order.  (Contributed by Stefan O'Rear,
     17-Jan-2015.) $)
  somin2 $p |- ( ( R Or X /\ ( A e. X /\ B e. X ) ) ->
      if ( A R B , A , B ) ( R u. _I ) B ) $=
    ( wor wcel wa wbr cif cid cun somincom somin1 ancom2s eqbrtrd ) DCEZADFZBDF
    ZGGABCHABIBACHBAIZBCJKZABCDLPRQSBTHBACDMNO $.

  $( Being less than a minimum, for a general total order.  (Contributed by
     Stefan O'Rear, 17-Jan-2015.) $)
  soltmin $p |- ( ( R Or X /\ ( A e. X /\ B e. X /\ C e. X ) ) ->
      ( A R if ( B R C , B , C ) <-> ( A R B /\ A R C ) ) ) $=
    ( wor wcel w3a wa wbr cif wpo cid cun 3jca syl12anc poltletr syl22anc breq2
    imp sopo ad2antrr simplr1 simplr2 simplr3 ifcld simpll somin1 somin2 jca ex
    simpr ifboth impbid1 ) EDFZAEGZBEGZCEGZHZIZABCDJZBCKZDJZABDJZACDJZIZUTVCVFU
    TVCIZVDVEVGEDLZUPVBEGZUQHZVCVBBDMNZJZVDUOVHUSVCEDUAUBZVGUPVIUQUPUQURUOVCUCZ
    VGVABCEUPUQURUOVCUDZUPUQURUOVCUEZUFZVOOUTVCULZVGUOUQURVLUOUSVCUGZVOVPBCDEUH
    PVHVJIVCVLIVDAVBBDEQTRVGVHUPVIURHZVCVBCVKJZVEVMVGUPVIURVNVQVPOVRVGUOUQURWAV
    SVOVPBCDEUIPVHVTIVCWAIVEAVBCDEQTRUJUKVAVDVEVCBCBVBADSCVBADSUMUN $.

  ${
    $d x y z w $.  $d z w ph $.
    $( The converse of a class abstraction of ordered pairs.  (Contributed by
       NM, 11-Dec-2003.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    cnvopab $p |- `' { <. x , y >. | ph } = { <. y , x >. | ph } $=
      ( vz vw copab ccnv relcnv relopab cop wcel wsb opelopabsbALT sbcom2 bitri
      cv vex opelcnv 3bitr4i eqrelriiv ) DEABCFZGZACBFZUAHACBIEPZDPZJUAKZACDLBE
      LZUEUDJZUBKUHUCKUFABELCDLUGABCEDMABECDNOUEUDUADQEQRACBDEMST $.
  $}

  ${
    $d x y ph $.  $d x C $.  $d x D $.  $d y A $.  $d y B $.
    mptcnv.1 $e |- ( ph -> ( ( x e. A /\ y = B ) <-> ( y e. C /\ x = D ) ) ) $.
    $( The converse of a mapping function.  (Contributed by Thierry Arnoux,
       16-Jan-2017.) $)
    mptcnv $p |- ( ph -> `' ( x e. A |-> B ) = ( y e. C |-> D ) ) $=
      ( cv wcel wceq wa copab ccnv cmpt cnvopab opabbidv syl5eq df-mpt cnveqi
      3eqtr4g ) ABIZDJCIZEKLZBCMZNZUCFJUBGKLZCBMZBDEOZNCFGOAUFUDCBMUHUDBCPAUDUG
      CBHQRUIUEBCDESTCBFGSUA $.
  $}

  ${
    $d x y $.
    $( The converse of the empty set.  (Contributed by NM, 6-Apr-1998.) $)
    cnv0 $p |- `' (/) = (/) $=
      ( vx vy c0 ccnv relcnv rel0 cv cop wcel vex opelcnv noel 2false eqrelriiv
      bitr4i ) ABCDZCCEFAGZBGZHZPIRQHZCIZSCIZQRCAJBJKUBUASLTLMON $.

    $( The converse of the identity relation.  Theorem 3.7(ii) of [Monk1]
       p. 36.  (Contributed by NM, 26-Apr-1998.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    cnvi $p |- `' _I = _I $=
      ( vy vx cid wbr copab weq ccnv vex ideq equcom bitri opabbii df-cnv df-id
      cv 3eqtr4i ) AOZBOZCDZBAEBAFZBAECGCSTBASABFTQRBHIABJKLBACMBANP $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The converse of a union is the union of converses.  Theorem 16 of
       [Suppes] p. 62.  (Contributed by NM, 25-Mar-1998.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.) $)
    cnvun $p |- `' ( A u. B ) = ( `' A u. `' B ) $=
      ( vy vx cun ccnv cv wbr copab df-cnv unopab brun opabbii eqtr4i uneq12i
      wo ) ABEZFZCGZDGZAHZDCIZSTBHZDCIZEZAFZBFZERSTQHZDCIZUEDCQJUEUAUCPZDCIUIUA
      UCDCKUHUJDCSTABLMNNUFUBUGUDDCAJDCBJON $.

    $( Distributive law for converse over set difference.  (Contributed by
       Mario Carneiro, 26-Jun-2014.) $)
    cnvdif $p |- `' ( A \ B ) = ( `' A \ `' B ) $=
      ( vx vy cdif ccnv relcnv wss wrel difss relss mp2 cv cop wcel wn wa eldif
      vex opelcnv notbii anbi12i bitri 3bitr4i eqrelriiv ) CDABEZFZAFZBFZEZUFGU
      JUHHUHIUJIUHUIJAGUJUHKLDMZCMZNZUFOUMAOZUMBOZPZQZULUKNZUGOURUJOZUMABRULUKU
      FCSZDSZTUSURUHOZURUIOZPZQUQURUHUIRVBUNVDUPULUKAUTVATVCUOULUKBUTVATUAUBUCU
      DUE $.

    $( Distributive law for converse over intersection.  Theorem 15 of [Suppes]
       p. 62.  (Contributed by NM, 25-Mar-1998.)  (Revised by Mario Carneiro,
       26-Jun-2014.) $)
    cnvin $p |- `' ( A i^i B ) = ( `' A i^i `' B ) $=
      ( cdif ccnv cin cnvdif difeq2i eqtri dfin4 cnveqi 3eqtr4i ) AABCZCZDZADZO
      BDZCZCZABEZDOPENOLDZCRALFTQOABFGHSMABIJOPIK $.
  $}

  $( Distributive law for range over union.  Theorem 8 of [Suppes] p. 60.
     (Contributed by NM, 24-Mar-1998.) $)
  rnun $p |- ran ( A u. B ) = ( ran A u. ran B ) $=
    ( cun ccnv cdm crn cnvun dmeqi dmun eqtri df-rn uneq12i 3eqtr4i ) ABCZDZEZA
    DZEZBDZEZCZNFAFZBFZCPQSCZEUAOUDABGHQSIJNKUBRUCTAKBKLM $.

  $( The range of an intersection belongs the intersection of ranges.  Theorem
     9 of [Suppes] p. 60.  (Contributed by NM, 15-Sep-2004.) $)
  rnin $p |- ran ( A i^i B ) C_ ( ran A i^i ran B ) $=
    ( cin ccnv cdm crn cnvin dmeqi dmin eqsstri df-rn ineq12i 3sstr4i ) ABCZDZE
    ZADZEZBDZEZCZNFAFZBFZCPQSCZEUAOUDABGHQSIJNKUBRUCTAKBKLM $.

  ${
    $d x y z $.  $d y z A $.  $d y z B $.
    $( The range of an indexed union.  (Contributed by Mario Carneiro,
       29-May-2015.) $)
    rniun $p |- ran U_ x e. A B = U_ x e. A ran B $=
      ( vz vy ciun crn cv cop wcel wex wrex rexcom4 elrn2 rexbii eliun 3bitr4ri
      vex exbii 3bitr4i eqriv ) DABCFZGZABCGZFZEHDHZIZUBJZEKZUFUDJZABLZUFUCJUFU
      EJUGCJZEKZABLULABLZEKUKUIULAEBMUJUMABEUFCDRZNOUHUNEAUGBCPSQEUFUBUONAUFBUD
      PTUA $.

    $d x A $.
    $( The range of a union.  Part of Exercise 8 of [Enderton] p. 41.
       (Contributed by NM, 17-Mar-2004.)  (Revised by Mario Carneiro,
       29-May-2015.) $)
    rnuni $p |- ran U. A = U_ x e. A ran x $=
      ( cuni crn cv ciun uniiun rneqi rniun eqtri ) BCZDABAEZFZDABLDFKMABGHABLI
      J $.
  $}

  $( Distributive law for image over union.  Theorem 35 of [Suppes] p. 65.
     (Contributed by NM, 30-Sep-2002.) $)
  imaundi $p |- ( A "" ( B u. C ) ) = ( ( A "" B ) u. ( A "" C ) ) $=
    ( cun cres crn cima resundi rneqi rnun eqtri df-ima uneq12i 3eqtr4i ) ABCDZ
    EZFZABEZFZACEZFZDZAOGABGZACGZDQRTDZFUBPUEABCHIRTJKAOLUCSUDUAABLACLMN $.

  $( The image of a union.  (Contributed by Jeff Hoffman, 17-Feb-2008.) $)
  imaundir $p |- ( ( A u. B ) "" C ) = ( ( A "" C ) u. ( B "" C ) ) $=
    ( cun cima cres crn df-ima resundir rneqi rnun 3eqtri uneq12i eqtr4i ) ABDZ
    CEZACFZGZBCFZGZDZACEZBCEZDPOCFZGQSDZGUAOCHUDUEABCIJQSKLUBRUCTACHBCHMN $.

  ${
    $d x y A $.  $d x y B $.  $d x y R $.
    $( An upper bound for intersection with a domain.  Theorem 40 of [Suppes]
       p. 66, who calls it ""somewhat surprising.""  (Contributed by NM,
       11-Aug-2004.) $)
    dminss $p |- ( dom R i^i A ) C_ ( `' R "" ( R "" A ) ) $=
      ( vx vy cdm cin ccnv cima cv wbr wcel wa 19.8a ancoms elima2 sylibr simpl
      wex vex brcnv jca eximi eldm anbi1i elin 19.41v 3bitr4i 3imtr4i ssriv ) C
      BEZAFZBGZBAHZHZCIZDIZBJZUOAKZLZDRZUPUMKZUPUOULJZLZDRUOUKKZUOUNKUSVCDUSVAV
      BUSURUQLZCRZVAURUQVFVECMNCUPBADSZOPUSUQVBUQURQUPUOBVGCSZTPUAUBUOUJKZURLUQ
      DRZURLVDUTVIVJURDUOBVHUCUDUOUJAUEUQURDUFUGDUOULUMVHOUHUI $.

    $( An upper bound for intersection with an image.  Theorem 41 of [Suppes]
       p. 66.  (Contributed by NM, 11-Aug-2004.) $)
    imainss $p |- ( ( R "" A ) i^i B ) C_ ( R "" ( A i^i ( `' R "" B ) ) ) $=
      ( vy vx cima cin ccnv cv wcel wbr wa wex brcnv 19.8a sylan2br elin elima2
      vex anbi1i ancoms anim2i simprl anassrs anbi2i bitri sylibr eximi 3bitr4i
      jca 19.41v 3imtr4i ssriv ) DCAFZBGZCACHZBFZGZFZEIZAJZUTDIZCKZLZVBBJZLZEMZ
      UTURJZVCLZEMVBUOJZVBUSJVFVIEVFVAVEVBUTUPKZLZDMZLZVCLZVIVAVCVEVOVAVCVELZLV
      NVCVPVMVAVEVCVMVCVEVKVMVBUTCDSZESZNVLDOPUAUBVAVCVEUCUJUDVHVNVCVHVAUTUQJZL
      VNUTAUQQVSVMVADUTUPBVRRUEUFTUGUHVBUNJZVELVDEMZVELVJVGVTWAVEEVBCAVQRTVBUNB
      QVDVEEUKUIEVBCURVQRULUM $.
  $}

  $( The image of an intersection (Contributed by Thierry Arnoux,
     16-Dec-2017.) $)
  inimass $p |- ( ( A i^i B ) "" C ) C_ ( ( A "" C ) i^i ( B "" C ) ) $=
    ( cres cin crn cima rnin df-ima resindir rneqi eqtri ineq12i 3sstr4i ) ACDZ
    BCDZEZFZOFZPFZEABEZCGZACGZBCGZEOPHUBUACDZFRUACIUEQABCJKLUCSUDTACIBCIMN $.

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x V $.
    $( The intersection of the image of singleton (Contributed by Thierry
       Arnoux, 16-Dec-2017.) $)
    inimasn $p |- ( C e. V
      -> ( ( A i^i B ) "" { C } ) = ( ( A "" { C } ) i^i ( B "" { C } ) ) ) $=
      ( vx wcel cin csn cima cv wa elin cop a1i cvv vex elimasng mpan2 anbi12d
      wb 3bitr4rd syl5rbb eqrdv ) CDFZEABGZCHZIZAUFIZBUFIZGZEJZUJFUKUHFZUKUIFZK
      ZUDUKUGFZUKUHUILUDCUKMZUEFZUPAFZUPBFZKZUOUNUQUTTUDUPABLNUDUKOFZUOUQTEPZUE
      CUKDOQRUDULURUMUSUDVAULURTVBACUKDOQRUDVAUMUSTVBBCUKDOQRSUAUBUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The converse of a Cartesian product.  Exercise 11 of [Suppes] p. 67.
       (Contributed by NM, 14-Aug-1999.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    cnvxp $p |- `' ( A X. B ) = ( B X. A ) $=
      ( vy vx cv wcel copab ccnv cxp cnvopab ancom opabbii eqtri cnveqi 3eqtr4i
      wa df-xp ) CEAFZDEBFZPZCDGZHZSRPZDCGZABIZHBAIUBTDCGUDTCDJTUCDCRSKLMUEUACD
      ABQNDCBAQO $.
  $}

  $( The Cartesian product with the empty set is empty.  Part of Theorem
     3.13(ii) of [Monk1] p. 37.  (Contributed by NM, 12-Apr-2004.) $)
  xp0 $p |- ( A X. (/) ) = (/) $=
    ( c0 cxp ccnv 0xp cnveqi cnvxp cnv0 3eqtr3i ) BACZDBDABCBJBAEFBAGHI $.

  ${
    $d x y z A $.  $d x y z B $.
    $( The Cartesian product of nonempty classes is nonempty.  (Variation of a
       theorem contributed by Raph Levien, 30-Jun-2006.)  (Contributed by NM,
       30-Jun-2006.) $)
    xpnz $p |- ( ( A =/= (/) /\ B =/= (/) ) <-> ( A X. B ) =/= (/) ) $=
      ( vx vy vz c0 wne wa cxp cv wcel wex anbi12i eeanv bitr4i cop wceq syl6eq
      n0 necon3i opex eleq1 opelxp syl6bb spcev sylibr exlimivv sylbi xpeq1 0xp
      xpeq2 xp0 jca impbii ) AFGZBFGZHZABIZFGZUQCJZAKZDJZBKZHZDLCLZUSUQVACLZVCD
      LZHVEUOVFUPVGCASDBSMVAVCCDNOVDUSCDVDEJZURKZELUSVIVDEUTVBPZUTVBUAVHVJQVIVJ
      URKVDVHVJURUBUTVBABUCUDUEEURSUFUGUHUSUOUPAFURFAFQURFBIFAFBUIBUJRTBFURFBFQ
      URAFIFBFAUKAULRTUMUN $.
  $}

  $( At least one member of an empty Cartesian product is empty.  (Contributed
     by NM, 27-Aug-2006.) $)
  xpeq0 $p |- ( ( A X. B ) = (/) <-> ( A = (/) \/ B = (/) ) ) $=
    ( cxp c0 wceq wne wa wn wo xpnz necon2bbii ianor nne orbi12i 3bitri ) ABCZD
    EADFZBDFZGZHQHZRHZIADEZBDEZISPDABJKQRLTUBUAUCADMBDMNO $.

  $( Cartesian products with disjoint sets are disjoint.  (Contributed by NM,
     13-Sep-2004.) $)
  xpdisj1 $p |- ( ( A i^i B ) = (/) -> ( ( A X. C ) i^i ( B X. D ) ) = (/) ) $=
    ( cin c0 wceq cxp inxp xpeq1 0xp syl6eq syl5eq ) ABEZFGZACHBDHENCDEZHZFACBD
    IOQFPHFNFPJPKLM $.

  $( Cartesian products with disjoint sets are disjoint.  (Contributed by NM,
     13-Sep-2004.) $)
  xpdisj2 $p |- ( ( A i^i B ) = (/) -> ( ( C X. A ) i^i ( D X. B ) ) = (/) ) $=
    ( cin c0 wceq cxp inxp xpeq2 xp0 syl6eq syl5eq ) ABEZFGZCAHDBHECDEZNHZFCADB
    IOQPFHFNFPJPKLM $.

  $( Cartesian products with two different singletons are disjoint.
     (Contributed by NM, 28-Jul-2004.) $)
  xpsndisj $p |- ( B =/= D -> ( ( A X. { B } ) i^i ( C X. { D } ) ) = (/) ) $=
    ( wne csn cin c0 wceq cxp disjsn2 xpdisj2 syl ) BDEBFZDFZGHIANJCOJGHIBDKNOA
    CLM $.

  ${
    $d A x y $.  $d B x y $.  $d C x y $.  $d D x y $.
    $( Difference of Cartesian products, expressed in terms of a union of
       Cartesian products of differences.  (Contributed by Jeff Madsen,
       2-Sep-2009.)  (Revised by Mario Carneiro, 26-Jun-2014.) $)
    difxp $p |- ( ( C X. D ) \ ( A X. B ) ) =
                ( ( ( C \ A ) X. D ) u. ( C X. ( D \ B ) ) ) $=
      ( vx vy cxp cdif wrel relxp cv wn wa wo anbi2i bitri opelxp eldif 3bitr4i
      wcel cun wss difss relss mp2 relun mpbir2an cop ianor andi notbii anbi12i
      anbi1i an32 anass orbi12i elun eqrelriiv ) EFCDGZABGZHZCAHZDGZCDBHZGZUAZV
      AUSUBUSIVAIUSUTUCCDJVAUSUDUEVFIVCIVEIVBDJCVDJVCVEUFUGEKZFKZUHZUSTZVIUTTZL
      ZMZVIVCTZVIVETZNZVIVATVIVFTVGCTZVHDTZMZVGATZVHBTZMZLZMZVSVTLZMZVSWALZMZNZ
      VMVPWDVSWEWGNZMWIWCWJVSVTWAUIOVSWEWGUJPVJVSVLWCVGVHCDQVKWBVGVHABQUKULVNWF
      VOWHVNVGVBTZVRMZWFVGVHVBDQWLVQWEMZVRMWFWKWMVRVGCARUMVQWEVRUNPPVQVHVDTZMVQ
      VRWGMZMVOWHWNWOVQVHDBROVGVHCVDQVQVRWGUOSUPSVIUSUTRVIVCVEUQSUR $.
  $}

  $( Difference law for Cartesian product.  (Contributed by Scott Fenton,
     18-Feb-2013.)  (Revised by Mario Carneiro, 26-Jun-2014.) $)
  difxp1 $p |- ( ( A \ B ) X. C ) = ( ( A X. C ) \ ( B X. C ) ) $=
    ( cxp cdif cun c0 difxp difid xpeq2i xp0 eqtri uneq2i un0 3eqtrri ) ACDBCDE
    ABECDZACCEZDZFPGFPBCACHRGPRAGDGQGACIJAKLMPNO $.

  $( Difference law for Cartesian product.  (Contributed by Scott Fenton,
     18-Feb-2013.)  (Revised by Mario Carneiro, 26-Jun-2014.) $)
  difxp2 $p |- ( A X. ( B \ C ) ) = ( ( A X. B ) \ ( A X. C ) ) $=
    ( cxp cdif cun c0 difxp difid xpeq1i 0xp eqtri uneq1i uncom un0 3eqtrri ) A
    BDACDEAAEZBDZABCEDZFGSFZSACABHRGSRGBDGQGBAIJBKLMTSGFSGSNSOLP $.

  ${
    $d x A $.  $d y B $.
    $( Disjoint unions with disjoint index sets are disjoint.  (Contributed by
       Stefan O'Rear, 21-Nov-2014.) $)
    djudisj $p |- ( ( A i^i B ) = (/) -> ( U_ x e. A ( { x } X. C ) i^i
            U_ y e. B ( { y } X. D ) ) = (/) ) $=
      ( cin c0 wceq cv csn cxp ciun cvv wss djussxp incom syl5eq ssdisj sylancr
      xpdisj1 ) CDGHIZACAJKELMZCNLZOUDBDBJKFLMZGZHIUCUEGHIACEPUBUFUEUDGZHUDUEQU
      BUEDNLZOUHUDGZHIUGHIBDFPUBUIUDUHGHUHUDQCDNNUARUEUHUDSTRUCUDUEST $.
  $}

  ${
    $d A i j p x y $.  $d B i j p x y $.
    $( The set of distinct couples in a Cartesian product.  (Contributed by
       Thierry Arnoux, 25-May-2019.) $)
    xpdifid $p |- U_ x e. A ( { x } X. ( B \ { x } ) ) = ( ( A X. B ) \ _I ) $=
      ( vi vj vy cv csn cdif cid wcel wrex wceq wa wex wne wn necon3bbii eleq2d
      elsn cxp ciun cop elxp rexbii rexcom4 exbii 3bitri eliun eldif opelxp wbr
      vp df-br vex bitr3i anbi12i bitri anbi2i 2exbii eldifi elxpi simpl 2eximi
      ideq 3syl ancli 19.42vv sylibr ancom eleq1 adantl pm5.32da syl5bb 2exbidv
      mpbid biimpar exlimivv impbii r19.42v simprl sylib eqeltrd simprr eldifad
      eldifbd necomd eqnetrd jca31 adantll sneq difeq2d anbi12d cbvrexv r19.29a
      biimpi simpll ssnid a1i simplr simpr eldifd rspcev syl12anc 3bitr4i eqriv
      wb ) UMABAGZHZCXIIZUAZUBZBCUAZJIZUMGZXKKZABLZXODGZEGZUCZMZXRXIKZXSXJKZNZN
      ZABLZEOZDOZXOXLKXOXNKZXQYEEOZDOZABLYJABLZDOYHXPYKABDEXOXIXJUDUEYJADBUFYLY
      GDYEAEBUFUGUHAXOBXKUIYAXTXNKZNZEODOZYAXRBKZXSCKZNZXRXSPZNZNZEODOYIYHYNUUA
      DEYMYTYAYMXTXMKZXTJKZQZNYTXTXMJUJUUBYRUUDYSXRXSBCUKUUCXRXSUUCXRXSJULXRXSM
      XRXSJUNXRXSEUOVEUPRUQURUSUTYIYOYIYIYANZEODOZYOYIYIYAEODOZNUUFYIUUGYIXOXMK
      YAYRNZEODOUUGXOXMJVADEXOBCVBUUHYADEYAYRVCVDVFVGYIYADEVHVIYIUUEYNDEUUEYAYI
      NYIYNYIYAVJYIYAYIYMYAYIYMXGYIXOXTXNVKZVLVMVNVOVPYNYIDEYAYIYMUUIVQVRVSYFUU
      ADEYFYAYDABLZNUUAYAYDABVTUUJYTYAUUJYTUUJXRFGZHZKZXSCUULIZKZNZYTFBUUKBKZUU
      PYTUUJUUQUUPNZYPYQYSUURXRUUKBUURUUMXRUUKMUUQUUMUUOWADUUKTWBZUUQUUPVCWCUUR
      XSCUULUUQUUMUUOWDZWEUURXRUUKXSUUSUURXSUUKUURXSUULKZQXSUUKPUURXSCUULUUTWFU
      VAXSUUKEUUKTRWBWGWHWIWJUUJUUPFBLYDUUPAFBXHUUKMZYBUUMYCUUOUVBXIUULXRXHUUKW
      KZSUVBXJUUNXSUVBXIUULCUVCWLSWMWNWPWOYTYPXRXRHZKZXSCUVDIZKZUUJYPYQYSWQUVEY
      TDWRWSYTXSCUVDYPYQYSWTYTXSXRPXSUVDKZQYTXRXSYRYSXAWGUVHXSXREXRTRVIXBYDUVEU
      VGNAXRBXHXRMZYBUVEYCUVGUVIXIUVDXRXHXRWKZSUVIXJUVFXSUVIXIUVDCUVJWLSWMXCXDV
      SUSURUTXEXEXF $.
  $}

  $( A double restriction to disjoint classes is the empty set.  (Contributed
     by NM, 7-Oct-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  resdisj $p |- ( ( A i^i B ) = (/) -> ( ( C |` A ) |` B ) = (/) ) $=
    ( cin c0 wceq cres resres reseq2 res0 syl6eq syl5eq ) ABDZEFZCAGBGCMGZECABH
    NOCEGEMECICJKL $.

  $( The range of a Cartesian product.  Part of Theorem 3.13(x) of [Monk1]
     p. 37.  (Contributed by NM, 12-Apr-2004.) $)
  rnxp $p |- ( A =/= (/) -> ran ( A X. B ) = B ) $=
    ( c0 wne cxp crn cdm ccnv df-rn cnvxp dmeqi eqtri dmxp syl5eq ) ACDABEZFZBA
    EZGZBPOHZGROISQABJKLBAMN $.

  $( The domain of a Cartesian product is a subclass of the first factor.
     (Contributed by NM, 19-Mar-2007.) $)
  dmxpss $p |- dom ( A X. B ) C_ A $=
    ( cxp cdm wss c0 wceq xpeq2 xp0 syl6eq dm0 0ss syl6eqss wne dmxp eqimss syl
    dmeqd pm2.61ine ) ABCZDZAEZBFBFGZUAFAUCUAFDFUCTFUCTAFCFBFAHAIJRKJALMBFNUAAG
    UBABOUAAPQS $.

  $( The range of a Cartesian product is a subclass of the second factor.
     (Contributed by NM, 16-Jan-2006.)  (Proof shortened by Andrew Salmon,
     27-Aug-2011.) $)
  rnxpss $p |- ran ( A X. B ) C_ B $=
    ( cxp crn ccnv cdm df-rn cnvxp dmeqi dmxpss eqsstri ) ABCZDLEZFZBLGNBACZFBM
    OABHIBAJKK $.

  $( The range of a square Cartesian product.  (Contributed by FL,
     17-May-2010.) $)
  rnxpid $p |- ran ( A X. A ) = A $=
    ( cxp crn wceq c0 rn0 xpeq2 xp0 syl6eq rneqd id 3eqtr4a rnxp pm2.61ine ) AA
    BZCZADAEAEDZECEPAFQOEQOAEBEAEAGAHIJQKLAAMN $.

  $( A Cartesian product subclass relationship is equivalent to the
     relationship for it components.  (Contributed by NM, 17-Dec-2008.) $)
  ssxpb $p |- ( ( A X. B ) =/= (/) -> ( ( A X. B ) C_ ( C X. D ) <->
              ( A C_ C /\ B C_ D ) ) ) $=
    ( cxp c0 wne wss wa cdm wceq xpnz dmxp adantl sylbir adantr eqsstr3d syl6ss
    dmss crn dmxpss rnxp rnss rnxpss jca ex xpss12 impbid1 ) ABEZFGZUICDEZHZACH
    ZBDHZIZUJULUOUJULIZUMUNUPAUKJZCUPAUIJZUQUJURAKZULUJAFGZBFGZIZUSABLZVAUSUTAB
    MNOPULURUQHUJUIUKSNQCDUARUPBUKTZDUPBUITZVDUJVEBKZULUJVBVFVCUTVFVAABUBPOPULV
    EVDHUJUIUKUCNQCDUDRUEUFACBDUGUH $.

  $( The Cartesian product of nonempty classes is one-to-one.  (Contributed by
     NM, 31-May-2008.) $)
  xp11 $p |- ( ( A =/= (/) /\ B =/= (/) )
      -> ( ( A X. B ) = ( C X. D ) <-> ( A = C /\ B = D ) ) ) $=
    ( c0 wne wa cxp wceq wi xpnz anidm neeq1 anbi2d syl5bbr wss ssxpb syl5ibcom
    eqimss eqss eqimss2 anim12d anbi12i bitr4i syl6ib sylbid com12 sylbi xpeq12
    an4 impbid1 ) AEFBEFGZABHZCDHZIZACIZBDIZGZULUMEFZUOURJABKUOUSURUOUSUSUNEFZG
    ZURUSUSUSGUOVAUSLUOUSUTUSUMUNEMNOUOVAACPZBDPZGZCAPZDBPZGZGZURUOUSVDUTVGUOUM
    UNPUSVDUMUNSABCDQRUOUNUMPUTVGUNUMUACDABQRUBVHVBVEGZVCVFGZGURVBVCVEVFUJUPVIU
    QVJACTBDTUCUDUEUFUGUHACBDUIUK $.

  $( Cancellation law for Cartesian product.  (Contributed by NM,
     30-Aug-2011.) $)
  xpcan $p |- ( C =/= (/) -> ( ( C X. A ) = ( C X. B ) <-> A = B ) ) $=
    ( c0 wne cxp wceq wb wa xp11 eqid biantrur syl6bbr wn wi simpr xpeq2 syl6eq
    nne xp0 eqeq1d eqcom syl6bb adantl df-ne wo xpeq0 orel1 syl5bi sylbi adantr
    sylbid eqtr3 syl6an sylan2b impbid1 pm2.61dan ) CDEZADEZCAFZCBFZGZABGZHURUS
    IVBCCGZVCIVCCACBJVDVCCKLMURUSNZIVBVCVEURADGZVBVCOADSURVFIZVFVBBDGZVCURVFPVG
    VBVADGZVHVFVBVIHURVFVBDVAGVIVFUTDVAVFUTCDFDADCQCTRUADVAUBUCUDURVIVHOZVFURCD
    GZNZVJCDUEVIVKVHUFVLVHCBUGVKVHUHUIUJUKULABDUMUNUOABCQUPUQ $.

  $( Cancellation law for Cartesian product.  (Contributed by NM,
     30-Aug-2011.) $)
  xpcan2 $p |- ( C =/= (/) -> ( ( A X. C ) = ( B X. C ) <-> A = B ) ) $=
    ( c0 wne cxp wceq wb wa xp11 eqid biantru syl6bbr wn nne simpl xpeq1 syl6eq
    0xp eqeq1d eqcom syl6bb adantr wi df-ne wo xpeq0 orel2 syl5bi adantl sylbid
    sylbi eqtr3 syl6an impbid1 sylanb pm2.61ian ) ADEZCDEZACFZBCFZGZABGZHZURUSI
    VBVCCCGZIVCACBCJVEVCCKLMURNADGZUSVDADOVFUSIZVBVCVGVFVBBDGZVCVFUSPVGVBVADGZV
    HVFVBVIHUSVFVBDVAGVIVFUTDVAVFUTDCFDADCQCSRTDVAUAUBUCUSVIVHUDZVFUSCDGZNZVJCD
    UEVIVHVKUFVLVHBCUGVKVHUHUIULUJUKABDUMUNABCQUOUPUQ $.

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Subset of the range of a restriction.  (Contributed by NM,
       16-Jan-2006.) $)
    ssrnres $p |- ( B C_ ran ( C |` A ) <-> ran ( C i^i ( A X. B ) ) = B ) $=
      ( vy vx cxp cin crn wceq wss rnss ax-mp cvv cv wex wa elrn2 bitr2i 3bitri
      wcel cres inss2 rnxpss sstri eqss mpbiran ssv xpss12 mp2an sslin sseqtr4i
      ssid df-res sstr mpan2 cop ssel syl6ib ancrd opelxp anbi2i opelres anbi1i
      vex elin anass exbii 19.41v syl6ibr ssrdv impbii ) CABFZGZHZBIZBVNJZBCAUA
      ZHZJZVOVNBJVPVNVLHZBVMVLJVNVTJCVLUBVMVLKLABUCUDVNBUEUFVPVSVPVNVRJZVSVMVQJ
      WAVMCAMFZGZVQVLWBJZVMWCJAAJBMJWDAULBUGAABMUHUIVLWBCUJLCAUMUKVMVQKLBVNVRUN
      UOVSDBVNVSDNZBTZENZWEUPZVQTZEOZWFPZWEVNTZVSWFWJVSWFWEVRTWJBVRWEUQEWEVQDVD
      ZQURUSWLWHVMTZEOWIWFPZEOWKEWEVMWMQWNWOEWNWHCTZWHVLTZPWPWGATZWFPZPZWOWHCVL
      VEWQWSWPWGWEABUTVAWOWPWRPZWFPWTWIXAWFWGWECAWMVBVCWPWRWFVFRSVGWIWFEVHSVIVJ
      VKR $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.
    $( Range of the intersection with a Cartesian product.  (Contributed by NM,
       17-Jan-2006.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    rninxp $p |- ( ran ( C i^i ( A X. B ) ) = B <->
                 A. y e. B E. x e. A x C y ) $=
      ( cres crn wss wcel wral cxp cin wceq wbr wrex dfss3 ssrnres cima df-ima
      cv eleq2i vex elima bitr3i ralbii 3bitr3i ) DECFGZHBTZUGIZBDJECDKLGDMATUH
      ENACOZBDJBDUGPCDEQUIUJBDUIUHECRZIUJUKUGUHECSUAAUHECBUBUCUDUEUF $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x y C $.
    $( Domain of the intersection with a Cartesian product.  (Contributed by
       NM, 17-Jan-2006.) $)
    dminxp $p |- ( dom ( C i^i ( A X. B ) ) = A <->
                 A. x e. A E. y e. B x C y ) $=
      ( cxp cin cdm wceq ccnv crn cv wbr wrex wral dfdm4 cnvin cnvxp eqtri vex
      ineq2i rneqi eqeq1i rninxp brcnv rexbii ralbii 3bitri ) ECDFZGZHZCIEJZDCF
      ZGZKZCIBLZALZULMZBDNZACOUQUPEMZBDNZACOUKUOCUKUJJZKUOUJPVBUNVBULUIJZGUNEUI
      QVCUMULCDRUASUBSUCBADCULUDUSVAACURUTBDUPUQEBTATUEUFUGUH $.
  $}

  $( Image of a relation restricted to a rectangular region.  (Contributed by
     Stefan O'Rear, 19-Feb-2015.) $)
  imainrect $p |- ( ( G i^i ( A X. B ) ) "" Y ) =
      ( ( G "" ( Y i^i A ) ) i^i B ) $=
    ( cxp cin cres crn cima df-res rneqi df-ima eqtri ineq1i ccnv ineq2i eqtr4i
    cvv cdm 3eqtr4ri cnvin inxp inv1 incom xpeq12i eqtr2i xpindir inass 3eqtr4i
    in32 cnveqi cnvxp dmeqi dmres df-rn ) CABEZFZDGZHUQDREZFZHZUQDICDAFZIZBFZUR
    UTUQDJKUQDLVDCVBREZFZHZBFZVAVCVGBVCCVBGZHVGCVBLVIVFCVBJKMNVFOZBGZSZUTOZSVHV
    AVKVMVFRBEZFZOVJVNOZFZVMVKVFVNUAUTVOCUSFZUPFVRAREZVNFZFZUTVOUPVTVRVTARFZRBF
    ZEUPARRBUBWBAWCBAUCWCBRFBRBUDBUCMUEUFPCUPUSUJVOVRVSFZVNFWAVFWDVNVFCUSVSFZFW
    DVEWECDARUGPCUSVSUHQNVRVSVNUHMUIUKVKVJBREZFVQVJBJVPWFVJRBULPQTUMBVJSZFWGBFV
    LVHBWGUDVJBUNVGWGBVFUONTUTUOTQUI $.

  $( The image by a constant function (or other Cartesian product).
     (Contributed by Thierry Arnoux, 4-Feb-2017.) $)
  xpima $p |- ( ( A X. B ) "" C ) = if ( ( A i^i C ) = (/) , (/) , B ) $=
    ( cxp cima cin c0 wceq cif wa wn wo exmid crn cvv rneqi syl6eq syl5eq ancli
    cres df-ima df-res eqtri inxp inv1 xpeq2i 3eqtri xpeq1 0xp rneqd df-ne rnxp
    rn0 wne sylbir orim12i ax-mp eqif mpbir ) ABDZCEZACFZGHZGBIHVCVAGHZJZVCKZVA
    BHZJZLZVCVFLVIVCMVCVEVFVHVCVDVCVAVBBDZNZGVAUTCODFZNZVBBOFZDZNVKVAUTCTZNVMUT
    CUAVPVLUTCUBPUCVLVOABCOUDPVOVJVNBVBBUEUFPUGZVCVKGNGVCVJGVCVJGBDGVBGBUHBUIQU
    JUMQRSVFVGVFVAVKBVQVFVBGUNVKBHVBGUKVBBULUORSUPUQVCVAGBURUS $.

  $( The image by a Cartesian product.  (Contributed by Thierry Arnoux,
     16-Dec-2017.) $)
  xpima1 $p |- ( ( A i^i C ) = (/) -> ( ( A X. B ) "" C ) = (/) ) $=
    ( cin c0 wceq cxp cima cif xpima iftrue syl5eq ) ACDEFZABGCHMEBIEABCJMEBKL
    $.

  $( The image by a Cartesian product.  (Contributed by Thierry Arnoux,
     16-Dec-2017.) $)
  xpima2 $p |- ( ( A i^i C ) =/= (/) -> ( ( A X. B ) "" C ) = B ) $=
    ( cin c0 wne cxp cima wceq cif xpima ifnefalse syl5eq ) ACDZEFABGCHNEIEBJBA
    BCKNEEBLM $.

  $( The image of a singleton by a Cartesian product.  (Contributed by Thierry
     Arnoux, 14-Jan-2018.)  (Proof shortened by BJ, 6-Apr-2019.) $)
  xpimasn $p |- ( X e. A -> ( ( A X. B ) "" { X } ) = B ) $=
    ( wcel csn cin c0 wne cima wn disjsn necon3abii notnot bitr4i xpima2 sylbir
    cxp wceq ) CADZACEZFZGHZABQTIBRUBSJZJSUCUAGACKLSMNABTOP $.

  $( Obsolete proof of ~ xpimasn .  (Contributed by Thierry Arnoux,
     14-Jan-2018.)  (New usage is discouraged.)
     (Proof modification is discouraged.) $)
  xpimasnOLD $p |- ( X e. A -> ( ( A X. B ) "" { X } ) = B ) $=
    ( wcel csn cin wne cxp cima wceq wss snssi dfss1 sylib snnzg eqnetrd xpima2
    c0 syl ) CADZACEZFZRGABHUAIBJTUBUARTUAAKUBUAJCALUAAMNCAOPABUAQS $.

  ${
    $d x y A $.  $d x B $.  $d x y R $.  $d x V $.
    $( The base set of a strict order is contained in the field of the
       relation, except possibly for one element (note that
       ` (/) Or { B } ` ).  (Contributed by Mario Carneiro, 27-Apr-2015.) $)
    sossfld $p |- ( ( R Or A /\ B e. A ) ->
      ( A \ { B } ) C_ ( dom R u. ran R ) ) $=
      ( vx wor wcel wa csn cdif cdm crn cun cv wne eldifsn wo wi 3expia adantll
      wbr sotrieq necon2abid breldmg an32s brelrng orim12d elun syl6ibr sylbird
      wb anass1rs expimpd syl5bi ssrdv ) ACEZBAFZGZDABHIZCJZCKZLZDMZURFVBAFZVBB
      NZGUQVBVAFZVBABOUQVCVDVEUQVCGZVDVBBCTZBVBCTZPZVEUOVCUPVIVDUJUOVCUPGGVIVBB
      AVBBCUAUBUKVFVIVBUSFZVBUTFZPVEVFVGVJVHVKUOVCUPVGVJQZVCUPVLUOVCUPVGVJVBBAA
      CUCRSUDUPVCVHVKQUOUPVCVHVKBVBCAAUERSUFVBUSUTUGUHUIULUMUN $.

    $( The base set of a nonempty strict order is the same as the field of the
       relation.  (Contributed by Mario Carneiro, 15-May-2015.) $)
    sofld $p |- ( ( R Or A /\ R C_ ( A X. A ) /\ R =/= (/) ) ->
      A = ( dom R u. ran R ) ) $=
      ( vx vy wor cxp wss c0 cdm crn wa wrel ad2antlr wcel ssun1 syl6sseq unssd
      cun cv ex wne w3a wn wceq relxp relss mpi cop wbr df-br csn cdif sseqtr4i
      undif1 simpll dmxpid releldm sylancom sseldd sossfld syl2anc sseldi snssd
      dmss syl5ss syl5bir con3dimp pm2.21d relssdv ss0 syl necon1ad 3impia rnss
      rnxpid 3ad2ant2 eqssd ) ABEZBAAFZGZBHUAZUBABIZBJZRZVRVTWAAWDGZVRVTKZWEBHW
      FWEUCZBHUDZWFWGKZBHGWHWICDBHVTBLZVRWGVTVSLWJAAUEBVSUFUGZMWICSZDSZUHZBNZWN
      HNWFWOWEWOWLWMBUIZWFWEWLWMBUJWFWPWEWFWPKZAAWLUKZULZWRRZWDAAWRRWTAWROAWRUN
      UMWQWSWRWDWQVRWLANWSWDGVRVTWPUOWQWBAWLVTWBAGVRWPVTWBVSIABVSVDAUPPZMWFWPWJ
      WLWBNVTWJVRWPWKMWLWMBUQURZUSAWLBUTVAWQWLWDWQWBWDWLWBWCOXBVBVCQVETVFVGVHVI
      BVJVKTVLVMVTVRWDAGWAVTWBWCAXAVTWCVSJABVSVNAVOPQVPVQ $.
  $}

  ${
    $d x y R $.
    $( The set of all ordered pairs in a class is the same as the double
       converse.  (Contributed by Mario Carneiro, 16-Aug-2015.) $)
    cnvcnv3 $p |- `' `' R = { <. x , y >. | x R y } $=
      ( ccnv cv wbr copab df-cnv vex brcnv opabbii eqtri ) CDZDBEZAEZMFZABGONCF
      ZABGABMHPQABNOCBIAIJKL $.

    $( Alternate definition of relation.  Exercise 2 of [TakeutiZaring] p. 25.
       (Contributed by NM, 29-Dec-1996.) $)
    dfrel2 $p |- ( Rel R <-> `' `' R = R ) $=
      ( vx vy wrel ccnv wceq relcnv cv cop wcel vex opelcnv bitri eqrelriv mpan
      releq mpbii impbii ) ADZAEZEZAFZUADZSUBTGZBCUAABHZCHZIZUAJUFUEITJUGAJUEUF
      TBKZCKZLUFUEAUIUHLMNOUBUCSUDUAAPQR $.

    $( A relation can be expressed as the set of ordered pairs in it.  An
       analogue of ~ dffn5 for relations.  (Contributed by Mario Carneiro,
       16-Aug-2015.) $)
    dfrel4v $p |- ( Rel R <-> R = { <. x , y >. | x R y } ) $=
      ( wrel ccnv wceq cv wbr copab dfrel2 eqcom cnvcnv3 eqeq2i 3bitri ) CDCEEZ
      CFCOFCAGBGCHABIZFCJOCKOPCABCLMN $.
  $}

  $( The double converse of a class strips out all elements that are not
     ordered pairs.  (Contributed by NM, 8-Dec-2003.) $)
  cnvcnv $p |- `' `' A = ( A i^i ( _V X. _V ) ) $=
    ( ccnv cvv cxp cin wceq wrel relcnv df-rel mpbi relxp dfrel2 sseqtr4i cnvin
    wss dfss cnveqi inss2 mpbir eqtr3i 3eqtr2i ) ABZBZUCCCDZBZBZEZUBUEEZBZAUDEZ
    UCUFOUCUGFUCUDUFUCGUCUDOUBHUCIJUDGUFUDFCCKUDLJMUCUFPJUBUENUJBZBZUIUJUKUHAUD
    NQUJGZULUJFUMUJUDOAUDRUJISUJLJTUA $.

  $( The double converse of a class equals its restriction to the universe.
     (Contributed by NM, 8-Oct-2007.) $)
  cnvcnv2 $p |- `' `' A = ( A |` _V ) $=
    ( ccnv cvv cxp cin cres cnvcnv df-res eqtr4i ) ABBACCDEACFAGACHI $.

  $( The double converse of a class is a subclass.  Exercise 2 of
     [TakeutiZaring] p. 25.  (Contributed by NM, 23-Jul-2004.) $)
  cnvcnvss $p |- `' `' A C_ A $=
    ( ccnv cvv cxp cin cnvcnv inss1 eqsstri ) ABBACCDZEAAFAIGH $.

  $( Equality theorem for converse.  (Contributed by FL, 19-Sep-2011.) $)
  cnveqb $p |- ( ( Rel A /\ Rel B ) -> ( A = B <-> `' A = `' B ) ) $=
    ( wrel wa wceq ccnv cnveq wi dfrel2 eqeq2 syl5ibr eqcoms sylbi eqeq1 imbi2d
    imp impbid2 ) ACZBCZDABEZAFZBFZEZABGRSUCTHZRUAFZAESUDHZAIUFAUESUDAUEEZUCUEB
    EZHZSUBFZBEUIBIUIBUJUCUHBUJEUEUJEUAUBGBUJUEJKLMUGTUHUCAUEBNOKLMPQ $.

  $( A relation empty iff its converse is empty.  (Contributed by FL,
     19-Sep-2011.) $)
  cnveq0 $p |- ( Rel A -> ( A = (/) <-> `' A = (/) ) ) $=
    ( c0 ccnv wceq wrel wb wi cnv0 rel0 cnveqb mpan2 eqeq2 bibi2d syl5ibr ax-mp
    eqcoms ) BCZBDAEZABDZACZBDZFZGZHUCBQRUBBQDZSTQDZFZRBEUFIABJKUDUAUESBQTLMNPO
    $.

  $( Alternate definition of relation.  (Contributed by NM, 14-May-2008.) $)
  dfrel3 $p |- ( Rel R <-> ( R |` _V ) = R ) $=
    ( wrel ccnv wceq cvv cres dfrel2 cnvcnv2 eqeq1i bitri ) ABACCZADAEFZADAGKLA
    AHIJ $.

  $( The domain of a universal restriction.  (Contributed by NM,
     14-May-2008.) $)
  dmresv $p |- dom ( A |` _V ) = dom A $=
    ( cvv cres cdm cin dmres incom inv1 3eqtri ) ABCDBADZEJBEJABFBJGJHI $.

  $( The range of a universal restriction.  (Contributed by NM,
     14-May-2008.) $)
  rnresv $p |- ran ( A |` _V ) = ran A $=
    ( ccnv crn cvv cres cnvcnv2 rneqi rncnvcnv eqtr3i ) ABBZCADEZCACJKAFGAHI $.

  $( Range defined in terms of image.  (Contributed by NM, 14-May-2008.) $)
  dfrn4 $p |- ran A = ( A "" _V ) $=
    ( cvv cima cres crn df-ima rnresv eqtr2i ) ABCABDEAEABFAGH $.

  $( Distribute proper substitution through the range of a class.  (Contributed
     by Alan Sare, 10-Nov-2012.) $)
  csbrn $p |- [_ A / x ]_ ran B = ran [_ A / x ]_ B $=
    ( cvv cima csb crn csbima12 wcel wceq csbconstg imaeq2d wn c0 eqcomi csbprc
    0ima imaeq1d syl6eq dfrn4 3eqtr4a pm2.61i eqtri csbeq2i 3eqtr4i ) ABCDEZFZA
    BCFZDEZABCGZFUHGUGUHABDFZEZUIABDCHBDIZULUIJUMUKDUHABDDKLUMMZNNDEZULUIUONDQO
    UNULNUKENUNUHNUKABCPZRUKQSUNUHNDUPRUAUBUCABUJUFCTUDUHTUE $.

  ${
    $d A w y $.  $d B w y $.  $d V w y $.  $d x w y $.
    $( Distribute proper substitution through the range of a class.
       (Contributed by Alan Sare, 10-Nov-2012.)  Obsolete as of 23-Aug-2018.
       Use ~ csbrn instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    csbrngOLD $p |- ( A e. V -> [_ A / x ]_ ran B = ran [_ A / x ]_ B ) $=
      ( vw vy wcel cv cop wex cab csb crn csbabgOLD sbcexgOLD sbcel2gOLD exbidv
      wsbc bitrd dfrn3 abbidv eqtrd csbeq2i 3eqtr4g ) BDGZABEHFHIZCGZEJZFKZLZUF
      ABCLZGZEJZFKZABCMZLUKMUEUJUHABRZFKUNUHAFBDNUEUPUMFUEUPUGABRZEJUMUGEABDOUE
      UQULEABUFCDPQSUAUBABUOUIEFCTUCEFUKTUD $.
  $}

  $( The restriction of the double converse of a class.  (Contributed by NM,
     8-Apr-2007.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  rescnvcnv $p |- ( `' `' A |` B ) = ( A |` B ) $=
    ( ccnv cres cvv cin cnvcnv2 reseq1i resres wss wceq ssv sseqin2 mpbi 3eqtri
    reseq2i ) ACCZBDAEDZBDAEBFZDABDQRBAGHAEBISBABEJSBKBLBEMNPO $.

  $( The double converse of the restriction of a class.  (Contributed by NM,
     3-Jun-2007.) $)
  cnvcnvres $p |- `' `' ( A |` B ) = ( `' `' A |` B ) $=
    ( cres ccnv wrel wceq relres dfrel2 mpbi rescnvcnv eqtr4i ) ABCZDDZLADDBCLE
    MLFABGLHIABJK $.

  $( The image of the double converse of a class.  (Contributed by NM,
     8-Apr-2007.) $)
  imacnvcnv $p |- ( `' `' A "" B ) = ( A "" B ) $=
    ( ccnv cres crn cima rescnvcnv rneqi df-ima 3eqtr4i ) ACCZBDZEABDZEKBFABFLM
    ABGHKBIABIJ $.

  ${
    $d x y A $.
    $( The domain of a singleton is nonzero iff the singleton argument is an
       ordered pair.  (Contributed by NM, 14-Dec-2008.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.) $)
    dmsnn0 $p |- ( A e. ( _V X. _V ) <-> dom { A } =/= (/) ) $=
      ( vx vy cv cop wceq wex csn cdm wcel cvv cxp wne wbr vex eldm df-br exbii
      c0 opex elsnc eqcom 3bitri bitr2i elvv n0 3bitr4i ) ABDZCDZEZFZCGZBGUHAHZ
      IZJZBGAKKLJUNSMULUOBUOUHUIUMNZCGULCUHUMBOPUPUKCUPUJUMJUJAFUKUHUIUMQUJAUHU
      ITUAUJAUBUCRUDRBCAUEBUNUFUG $.
  $}

  $( The range of a singleton is nonzero iff the singleton argument is an
     ordered pair.  (Contributed by NM, 14-Dec-2008.) $)
  rnsnn0 $p |- ( A e. ( _V X. _V ) <-> ran { A } =/= (/) ) $=
    ( cvv cxp wcel csn cdm c0 wne crn dmsnn0 dm0rn0 necon3bii bitri ) ABBCDAEZF
    ZGHNIZGHAJOGPGNKLM $.

  $( The domain of the singleton of the empty set is empty.  (Contributed by
     NM, 30-Jan-2004.) $)
  dmsn0 $p |- dom { (/) } = (/) $=
    ( c0 csn cdm wceq cvv cxp wcel wn 0nelxp dmsnn0 necon2bbii mpbir ) ABCZADAE
    EFGZHEEINMAAJKL $.

  $( The converse of the singleton of the empty set is empty.  (Contributed by
     Mario Carneiro, 30-Aug-2015.) $)
  cnvsn0 $p |- `' { (/) } = (/) $=
    ( c0 csn ccnv wceq crn dfdm4 dmsn0 eqtr3i wrel wb relcnv relrn0 ax-mp mpbir
    cdm ) ABZCZADZQEZADZPOSAPFGHQIRTJPKQLMN $.

  $( The domain of a singleton is empty if the singleton's argument contains
     the empty set.  (Contributed by NM, 15-Dec-2008.) $)
  dmsn0el $p |- ( (/) e. A -> dom { A } = (/) ) $=
    ( c0 wcel csn cdm wne cvv cxp wn dmsnn0 0nelelxp sylbir necon4ai ) BACZADEZ
    BOBFAGGHCNIAJGGAKLM $.

  ${
    relsn2.1 $e |- A e. _V $.
    $( A singleton is a relation iff it has a nonempty domain.  (Contributed by
       NM, 25-Sep-2013.) $)
    relsn2 $p |- ( Rel { A } <-> dom { A } =/= (/) ) $=
      ( csn wrel cvv cxp wcel cdm c0 wne relsn dmsnn0 bitri ) ACZDAEEFGNHIJABKA
      LM $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x V $.
    $( The domain of a singleton of an ordered pair is the singleton of the
       first member.  (Contributed by Mario Carneiro, 26-Apr-2015.) $)
    dmsnopg $p |- ( B e. V -> dom { <. A , B >. } = { A } ) $=
      ( vx vy wcel cop csn cdm cv wceq wex vex opth1 exlimiv opeq1 opeq2 eqeq1d
      spcegv syl5 impbid2 eldm2 opex elsnc exbii bitri elsn 3bitr4g eqrdv ) BCF
      ZDABGZHZIZAHZUJDJZEJZGZUKKZELZUOAKZUOUMFZUOUNFUJUSUTURUTEUOUPABDMZEMNOUTU
      OBGZUKKZUJUSUOABPURVDEBCUPBKUQVCUKUPBUOQRSTUAVAUQULFZELUSEUOULVBUBVEUREUQ
      UKUOUPUCUDUEUFDAUGUHUI $.

    $( The domain of a singleton of an ordered pair is a subset of the
       singleton of the first member (with no sethood assumptions on ` B ` ).
       (Contributed by Mario Carneiro, 30-Apr-2015.) $)
    dmsnopss $p |- dom { <. A , B >. } C_ { A } $=
      ( cvv wcel cop csn cdm wss dmsnopg eqimss syl wn opprc2 sneqd dmeqd dmsn0
      wceq c0 syl6eq 0ss syl6eqss pm2.61i ) BCDZABEZFZGZAFZHZUCUFUGQUHABCIUFUGJ
      KUCLZUFRUGUIUFRFZGRUIUEUJUIUDRABMNOPSUGTUAUB $.

    $( The domain of an unordered pair of ordered pairs.  (Contributed by Mario
       Carneiro, 26-Apr-2015.) $)
    dmpropg $p |- ( ( B e. V /\ D e. W ) ->
        dom { <. A , B >. , <. C , D >. } = { A , C } ) $=
      ( wcel wa cop csn cdm cun cpr wceq dmsnopg uneq12 syl2an df-pr dmeqi dmun
      eqtri 3eqtr4g ) BEGZDFGZHABIZJZKZCDIZJZKZLZAJZCJZLZUEUHMZKZACMUCUGULNUJUM
      NUKUNNUDABEOCDFOUGULUJUMPQUPUFUILZKUKUOUQUEUHRSUFUITUAACRUB $.
  $}

  ${
    $d x y A $.  $d x y B $.
    dmsnop.1 $e |- B e. _V $.
    $( The domain of a singleton of an ordered pair is the singleton of the
       first member.  (Contributed by NM, 30-Jan-2004.)  (Proof shortened by
       Andrew Salmon, 27-Aug-2011.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    dmsnop $p |- dom { <. A , B >. } = { A } $=
      ( cvv wcel cop csn cdm wceq dmsnopg ax-mp ) BDEABFGHAGICABDJK $.

    dmprop.1 $e |- D e. _V $.
    $( The domain of an unordered pair of ordered pairs.  (Contributed by NM,
       13-Sep-2011.) $)
    dmprop $p |- dom { <. A , B >. , <. C , D >. } = { A , C } $=
      ( cvv wcel cop cpr cdm wceq dmpropg mp2an ) BGHDGHABICDIJKACJLEFABCDGGMN
      $.

    dmtpop.1 $e |- F e. _V $.
    $( The domain of an unordered triple of ordered pairs.  (Contributed by NM,
       14-Sep-2011.) $)
    dmtpop $p |- dom { <. A , B >. , <. C , D >. , <. E , F >. }
                        = { A , C , E } $=
      ( cop ctp cdm cpr csn cun df-tp dmeqi dmun dmprop dmsnop uneq12i 3eqtri
      eqtr4i ) ABJZCDJZEFJZKZLZACMZENZOZACEKUHUDUEMZUFNZOZLULLZUMLZOUKUGUNUDUEU
      FPQULUMRUOUIUPUJABCDGHSEFITUAUBACEPUC $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( Double converse of a singleton of an ordered pair.  (Unlike ~ cnvsn ,
       this does not need any sethood assumptions on ` A ` and ` B ` .)
       (Contributed by Mario Carneiro, 26-Apr-2015.) $)
    cnvcnvsn $p |- `' `' { <. A , B >. } = `' { <. B , A >. } $=
      ( vx vy cop csn ccnv relcnv cv wcel vex opelcnv wceq wa opth 3bitr4i opex
      ancom elsnc bitri eqrelriiv ) CDABEZFZGZGZBAEZFZGZUDHUGHCIZDIZEZUEJUJUIEZ
      UDJZUKUHJZUIUJUDCKZDKZLUKUCJZULUGJZUMUNUKUBMZULUFMZUQURUIAMZUJBMZNVBVANUS
      UTVAVBRUIUJABUOUPOUJUIBAUPUOOPUKUBUIUJQSULUFUJUIQSPUJUIUCUPUOLUIUJUGUOUPL
      PTUA $.

    $( The domain of the singleton of the singleton of a singleton.
       (Contributed by NM, 15-Sep-2004.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    dmsnsnsn $p |- dom { { { A } } } = { A } $=
      ( vx cvv wcel csn cdm wceq cv cop vex opid sneq sneqd syl5eq dmeqd dmsnop
      eqeq12d vtoclg wn c0 0ex snid dmsn0el ax-mp snprc biimpi 3eqtr4a pm2.61i
      ) ACDZAEZEZEZFZUJGZBHZUOIZEZFZUOEZGUNBACUOAGZURUMUSUJUTUQULUTUPUKUTUPUSEU
      KUOBJZKUTUSUJUOALZMNMOVBQUOUOVAPRUISZTEZEZFZTUMUJTVDDVFTGTUAUBVDUCUDVCULV
      EVCUKVDVCUJTVCUJTGAUEUFZMMOVGUGUH $.
  $}

  $( The range of a singleton of an ordered pair is the singleton of the second
     member.  (Contributed by NM, 24-Jul-2004.)  (Revised by Mario Carneiro,
     30-Apr-2015.) $)
  rnsnopg $p |- ( A e. V -> ran { <. A , B >. } = { B } ) $=
    ( wcel cop csn crn cdm ccnv df-rn dfdm4 cnvcnvsn dmeqi 3eqtri eqtr4i syl5eq
    dmsnopg ) ACDABEFZGZBAEFZHZBFSRIZHZUARJUATIZGUDIZHUCTKUDJUEUBBALMNOBACQP $.

  $( The range of a pair of ordered pairs is the pair of second members.
     (Contributed by Thierry Arnoux, 3-Jan-2017.) $)
  rnpropg $p |- ( ( A e. V /\ B e. W )
    -> ran { <. A , C >. , <. B , D >. } = { C , D } ) $=
    ( wcel cop cpr crn csn cun df-pr rneqi wceq rnsnopg adantr adantl uneq12d
    wa rnun 3eqtr4g syl5eq ) AEGZBFGZTZACHZBDHZIZJUGKZUHKZLZJZCDIZUIULUGUHMNUFU
    JJZUKJZLCKZDKZLUMUNUFUOUQUPURUDUOUQOUEACEPQUEUPUROUDBDFPRSUJUKUACDMUBUC $.

  ${
    $d x y A $.  $d x y B $.
    cnvsn.1 $e |- A e. _V $.
    $( The range of a singleton of an ordered pair is the singleton of the
       second member.  (Contributed by NM, 24-Jul-2004.)  (Revised by Mario
       Carneiro, 26-Apr-2015.) $)
    rnsnop $p |- ran { <. A , B >. } = { B } $=
      ( cvv wcel cop csn crn wceq rnsnopg ax-mp ) ADEABFGHBGICABDJK $.

    cnvsn.2 $e |- B e. _V $.
    $( Extract the first member of an ordered pair.  (See ~ op2nda to extract
       the second member, ~ op1stb for an alternate version, and ~ op1st for
       the preferred version.)  (Contributed by Raph Levien, 4-Dec-2003.) $)
    op1sta $p |- U. dom { <. A , B >. } = A $=
      ( cop csn cdm cuni dmsnop unieqi unisn eqtri ) ABEFGZHAFZHAMNABDIJACKL $.

    $( Converse of a singleton of an ordered pair.  (Contributed by NM,
       11-May-1998.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    cnvsn $p |- `' { <. A , B >. } = { <. B , A >. } $=
      ( cop csn ccnv cnvcnvsn wrel wceq relsnop dfrel2 mpbi eqtr3i ) BAEFZGGZAB
      EFGOBAHOIPOJBADCKOLMN $.

    $( Extract the second member of an ordered pair.  Theorem 5.12(ii) of
       [Monk1] p. 52.  (See ~ op1stb to extract the first member, ~ op2nda for
       an alternate version, and ~ op2nd for the preferred version.)
       (Contributed by NM, 25-Nov-2003.) $)
    op2ndb $p |- |^| |^| |^| `' { <. A , B >. } = B $=
      ( cop csn ccnv cint cnvsn inteqi opex intsn eqtri op1stb ) ABEFGZHZHZHBAE
      ZHZHBQSPRPRFZHROTABCDIJRBAKLMJJBADCNM $.

    $( Extract the second member of an ordered pair.  (See ~ op1sta to extract
       the first member, ~ op2ndb for an alternate version, and ~ op2nd for the
       preferred version.)  (Contributed by NM, 17-Feb-2004.)  (Proof shortened
       by Andrew Salmon, 27-Aug-2011.) $)
    op2nda $p |- U. ran { <. A , B >. } = B $=
      ( cop csn crn cuni rnsnop unieqi unisn eqtri ) ABEFGZHBFZHBMNABCIJBDKL $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Converse of a singleton of an ordered pair.  (Contributed by NM,
       23-Jan-2015.) $)
    cnvsng $p |- ( ( A e. V /\ B e. W ) ->
      `' { <. A , B >. } = { <. B , A >. } ) $=
      ( vx vy cv cop csn ccnv wceq opeq1 sneqd cnveqd opeq2 eqeq12d vex vtocl2g
      cnvsn ) EGZFGZHZIZJZUATHZIZKAUAHZIZJZUAAHZIZKABHZIZJZBAHZIZKEFABCDTAKZUDU
      IUFUKUQUCUHUQUBUGTAUALMNUQUEUJTAUAOMPUABKZUIUNUKUPURUHUMURUGULUABAOMNURUJ
      UOUABALMPTUAEQFQSR $.

    $( Swap the members of an ordered pair.  (Contributed by NM, 14-Dec-2008.)
       (Revised by Mario Carneiro, 30-Aug-2015.) $)
    opswap $p |- U. `' { <. A , B >. } = <. B , A >. $=
      ( cvv wcel wa cop csn ccnv cuni wceq cnvsng unieqd opex unisn syl6eq uni0
      wn c0 opprc sneqd cnveqd cnvsn0 ancom sylnbi 3eqtr4a pm2.61i ) ACDZBCDZEZ
      ABFZGZHZIZBAFZJUIUMUNGZIUNUIULUOABCCKLUNBAMNOUIQZRIRUMUNPUPULRUPULRGZHRUP
      UKUQUPUJRABSTUAUBOLUIUHUGEUNRJUGUHUCBASUDUEUF $.
  $}

  ${
    $d s t A $.  $d s t B $.  $d s t F $.
    $( An image under the converse of a restriction.  (Contributed by Jeff
       Hankins, 12-Jul-2009.) $)
    cnvresima $p |- ( `' ( F |` A ) "" B ) = ( ( `' F "" B ) i^i A ) $=
      ( vt vs cres ccnv cima cin cv cop wa wex vex elima3 anbi1i opelcnv bitr4i
      wcel bitri elin opelres anbi2i anass exbii 19.41v 3bitr4ri eqriv ) DCAFZG
      ZBHZCGZBHZAIZDJZUKSEJZBSZUPUOKZUJSZLZEMZUOUNSZEUOUJBDNZOUOUMSZUOASZLUQURU
      LSZLZEMZVELZVBVAVDVHVEEUOULBVCOPUOUMAUAVAVGVELZEMVIUTVJEUTUQVFVELZLVJUSVK
      UQUSUOUPKZUISZVKUPUOUIENZVCQVMVLCSZVELVKUOUPCAVNUBVFVOVEUPUOCVNVCQPRTUCUQ
      VFVEUDRUEVGVEEUFTUGTUH $.
  $}

  $( A class restricted to its domain equals its double converse.  (Contributed
     by NM, 8-Apr-2007.) $)
  resdm2 $p |- ( A |` dom A ) = `' `' A $=
    ( ccnv cdm cres rescnvcnv wrel relcnv resdm ax-mp dmcnvcnv reseq2i 3eqtr3ri
    wceq ) ABZBZOCZDZAPDOAACZDAPEOFQOMNGOHIPRAAJKL $.

  $( Restriction to the domain of a restriction.  (Contributed by NM,
     8-Apr-2007.) $)
  resdmres $p |- ( A |` dom ( A |` B ) ) = ( A |` B ) $=
    ( cres cdm ccnv cvv cxp in12 df-res resdm2 eqtr3i ineq2i incom 3eqtri dmres
    cin xpeq1i xpindir eqtri 3eqtr4i rescnvcnv ) AABCZDZCZAEEZBCZUBABFGZADZFGZP
    ZPZUEUGPZUDUFUKUGAUIPZPUGUEPULAUGUIHUMUEUGAUHCUMUEAUHIAJKLUGUEMNUDAUCFGZPUK
    AUCIUNUJAUNBUHPZFGUJUCUOFABOQBUHFRSLSUEBITABUAS $.

  $( The image of the domain of a restriction.  (Contributed by NM,
     8-Apr-2007.) $)
  imadmres $p |- ( A "" dom ( A |` B ) ) = ( A "" B ) $=
    ( cres cdm crn cima resdmres rneqi df-ima 3eqtr4i ) AABCZDZCZEKEALFABFMKABG
    HALIABIJ $.

  ${
    $d x y C $.  $d y A $.  $d y B $.  $d y F $.  $d x V $.
    dmmpt2.1 $e |- F = ( x e. A |-> B ) $.
    $( The preimage of a function in maps-to notation.  (Contributed by Stefan
       O'Rear, 25-Jan-2015.) $)
    mptpreima $p |- ( `' F "" C ) = { x e. A | B e. C } $=
      ( vy ccnv cima cv wcel wceq wa copab crab eqtri crn wex cab bitri cnvopab
      cmpt df-mpt cnveqi imaeq1i df-ima resopab rneqi ancom anass exbii df-clel
      cres 19.42v bicomi anbi2i abbii rnopab df-rab 3eqtr4i ) EHZDIAJBKZGJZCLZM
      ZGANZDIZCDKZABOZVAVFDVAVEAGNZHVFEVJEABCUBVJFAGBCUCPUDVEAGUAPUEVGVFDUMZQZV
      IVFDUFVLVCDKZVEMZGANZQZVIVKVOVEGADUGUHVNGRZASVBVHMZASVPVIVQVRAVQVBVDVMMZM
      ZGRZVRVNVTGVNVEVMMVTVMVEUIVBVDVMUJTUKWAVBVSGRZMVRVBVSGUNWBVHVBVHWBGCDULUO
      UPTTUQVNGAURVHABUSUTPPP $.

    $( Converse singleton image of a function defined by maps-to.  (Contributed
       by Stefan O'Rear, 25-Jan-2015.) $)
    mptiniseg $p |- ( C e. V -> ( `' F "" { C } ) = { x e. A | B = C } ) $=
      ( wcel ccnv csn cima crab wceq mptpreima elsnc2g rabbidv syl5eq ) DFHZEID
      JZKCSHZABLCDMZABLABCSEGNRTUAABCDFOPQ $.

    $( The domain of the mapping operation in general.  (Contributed by NM,
       16-May-1995.)  (Revised by Mario Carneiro, 22-Mar-2015.) $)
    dmmpt $p |- dom F = { x e. A | B e. _V } $=
      ( cdm ccnv crn cvv cima wcel crab dfdm4 dfrn4 mptpreima 3eqtri ) DFDGZHQI
      JCIKABLDMQNABCIDEOP $.

    $d x A $.
    $( The domain of a mapping is a subset of its base class.  (Contributed by
       Scott Fenton, 17-Jun-2013.) $)
    dmmptss $p |- dom F C_ A $=
      ( cdm cvv wcel crab dmmpt ssrab2 eqsstri ) DFCGHZABIBABCDEJMABKL $.
  $}

  ${
    $d A x y $.  $d B y $.
    $( The domain of the mapping operation is the stated domain, if the
       function value is always a set.  (Contributed by Mario Carneiro,
       9-Feb-2013.)  (Revised by Mario Carneiro, 14-Sep-2013.) $)
    dmmptg $p |- ( A. x e. A B e. V -> dom ( x e. A |-> B ) = A ) $=
      ( wcel wral cvv crab cmpt cdm wceq elex ralimi rabid2 eqid dmmpt syl6reqr
      sylibr ) CDEZABFZBCGEZABHZABCIZJTUAABFBUBKSUAABCDLMUAABNRABCUCUCOPQ $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w x y z C $.
    $( A composition is a relation.  Exercise 24 of [TakeutiZaring] p. 25.
       (Contributed by NM, 26-Jan-1997.) $)
    relco $p |- Rel ( A o. B ) $=
      ( vx vz vy cv wbr wa wex ccom df-co relopabi ) CFDFZBGMEFAGHDICEABJCEDABK
      L $.

    $( Alternate definition of a class composition, using only one bound
       variable.  (Contributed by NM, 19-Dec-2008.) $)
    dfco2 $p |- ( A o. B )
                = U_ x e. _V ( ( `' B "" { x } ) X. ( A "" { x } ) ) $=
      ( vy vz ccom cvv ccnv cv csn cima cxp wrel wcel cop wex vex elimasn bitri
      wa ciun relco reliun relxp a1i mprgbir wb opelco2g mp2an wrex rexv opelxp
      eliun opelcnv anbi12i exbii 3bitrri eqrelriiv ) DEBCFZAGCHZAIZJZKZBVBKZLZ
      UAZBCUBVFMVEMZAGAGVEUCVGVAGNVCVDUDUEUFDIZEIZOZUSNZVHVAOCNZVAVIOBNZTZAPZVJ
      VFNZVHGNVIGNVKVOUGDQZEQZAVHVIBCGGUHUIVPVJVENZAGUJVSAPVOAVJGVEUMVSAUKVSVNA
      VSVHVCNZVIVDNZTVNVHVIVCVDULVTVLWAVMVTVAVHOUTNVLUTVAVHAQZVQRVAVHCWBVQUNSBV
      AVIWBVRRUOSUPUQSUR $.

    $( Generalization of ~ dfco2 , where ` C ` can have any value between
       ` dom A i^i ran B ` and ` _V ` .  (Contributed by NM, 21-Dec-2008.)
       (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    dfco2a $p |- ( ( dom A i^i ran B ) C_ C -> ( A o. B )
         = U_ x e. C ( ( `' B "" { x } ) X. ( A "" { x } ) ) ) $=
      ( vy vz vw cvv cv cima ciun wcel wrex wex wa cop vex sylbi 3bitr4g eliun
      cdm crn cin wss ccom ccnv csn cxp dfco2 wceq wbr wb eliniseg ax-mp brelrn
      elimasn opeldm anim12ci adantl exlimivv elxp elin 3imtr4i pm4.71rd exbidv
      ssel syl5 rexv df-rex eqrdv syl5eq ) BUAZCUBZUCZDUDZBCUEAHCUFAIZUGZJZBVQJ
      ZUHZKZADVTKZABCUIVOEWAWBVOEIZVTLZAHMZWDADMZWCWALWCWBLVOWDANVPDLZWDOZANWEW
      FVOWDWHAVOWDWGWDVPVNLZVOWGWCFIZGIZPUJZWJVRLZWKVSLZOZOZGNFNVPVLLZVPVMLZOZW
      DWIWPWSFGWOWSWLWMWRWNWQWMWJVPCUKZWRVPHLWMWTULAQZCVPWJHFQZUMUNWJVPCXBXAUOR
      WNVPWKPBLWQBVPWKXAGQZUPVPWKBXAXCUQRURUSUTFGWCVRVSVAVPVLVMVBVCVNDVPVFVGVDV
      EWDAVHWDADVISAWCHVTTAWCDVTTSVJVK $.

    $( Class composition distributes over union.  (Contributed by NM,
       21-Dec-2008.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    coundi $p |- ( A o. ( B u. C ) ) = ( ( A o. B ) u. ( A o. C ) ) $=
      ( vx vz vy cv wbr wa wex copab cun ccom wo unopab brun anbi1i andir bitri
      df-co exbii 19.43 bitr2i opabbii eqtri uneq12i 3eqtr4ri ) DGZEGZBHZUIFGAH
      ZIZEJZDFKZUHUICHZUKIZEJZDFKZLZUHUIBCLZHZUKIZEJZDFKZABMZACMZLAUTMUSUMUQNZD
      FKVDUMUQDFOVGVCDFVCULUPNZEJVGVBVHEVBUJUONZUKIVHVAVIUKUHUIBCPQUJUOUKRSUAUL
      UPEUBUCUDUEVEUNVFURDFEABTDFEACTUFDFEAUTTUG $.

    $( Class composition distributes over union.  (Contributed by NM,
       21-Dec-2008.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    coundir $p |- ( ( A u. B ) o. C ) = ( ( A o. C ) u. ( B o. C ) ) $=
      ( vx vy vz cv wbr wa wex copab cun ccom wo unopab brun anbi2i bitri df-co
      andi exbii 19.43 bitr2i opabbii eqtri uneq12i 3eqtr4ri ) DGEGZCHZUHFGZAHZ
      IZEJZDFKZUIUHUJBHZIZEJZDFKZLZUIUHUJABLZHZIZEJZDFKZACMZBCMZLUTCMUSUMUQNZDF
      KVDUMUQDFOVGVCDFVCULUPNZEJVGVBVHEVBUIUKUONZIVHVAVIUIUHUJABPQUIUKUOTRUAULU
      PEUBUCUDUEVEUNVFURDFEACSDFEBCSUFDFEUTCSUG $.

    $( Restricted first member of a class composition.  (Contributed by NM,
       12-Oct-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    cores $p |- ( ran B C_ C -> ( ( A |` C ) o. B ) = ( A o. B ) ) $=
      ( vz vy vx crn wss cv wbr cres wa wex copab ccom wcel wb vex brelrn df-co
      ssel brres rbaib syl56 pm5.32d exbidv opabbidv 3eqtr4g ) BGZCHZDIZEIZBJZU
      LFIZACKZJZLZEMZDFNUMULUNAJZLZEMZDFNUOBOABOUJURVADFUJUQUTEUJUMUPUSUMULUIPU
      JULCPZUPUSQUKULBDRERSUICULUAUPUSVBULUNACFRUBUCUDUEUFUGDFEUOBTDFEABTUH $.

    $( Associative law for the restriction of a composition.  (Contributed by
       NM, 12-Dec-2006.) $)
    resco $p |- ( ( A o. B ) |` C ) = ( A o. ( B |` C ) ) $=
      ( vx vy vz ccom cres relres relco cv wbr wcel wex vex anbi1i 19.41v brres
      wa brco an32 bitr4i exbii 3bitr2i 3bitr4i eqbrriv ) DEABGZCHZABCHZGZUGCIA
      UIJDKZEKZUGLZUKCMZSZUKFKZUILZUPULALZSZFNZUKULUHLUKULUJLUOUKUPBLZURSZFNZUN
      SVBUNSZFNUTUMVCUNFUKULABDOZEOZTPVBUNFQVDUSFVDVAUNSZURSUSVAURUNUAUQVGURUKU
      PBCFORPUBUCUDUKULUGCVFRFUKULAUIVEVFTUEUF $.

    $( Image of the composition of two classes.  (Contributed by Jason
       Orendorff, 12-Dec-2006.) $)
    imaco $p |- ( ( A o. B ) "" C ) = ( A "" ( B "" C ) ) $=
      ( vx vy vz ccom cima cv wbr wrex wcel wa wex df-rex vex elima exbii bitri
      rexcom4 r19.41v brco rexbii anbi1i 3bitr4i 3bitr4ri eqriv ) DABGZCHZABCHZ
      HZEIZDIZAJZEUJKULUJLZUNMZENZUMUKLUMUILZUNEUJOEUMAUJDPZQFIZULBJZUNMZENZFCK
      ZVAFCKZUNMZENZURUQVDVBFCKZENVGVBFECTVHVFEVAUNFCUARSURUTUMUHJZFCKVDFUMUHCU
      SQVIVCFCEUTUMABFPUSUBUCSUPVFEUOVEUNFULBCEPQUDRUEUFUG $.

    $( The range of the composition of two classes.  (Contributed by NM,
       12-Dec-2006.) $)
    rnco $p |- ran ( A o. B ) = ran ( A |` ran B ) $=
      ( vy vx vz ccom crn cres cv wbr wex wcel wa vex exbii excom ancom 3bitr4i
      brco elrn 19.41v anbi2i brres bitr4i 3bitri eqriv ) CABFZGZABGZHZGZDIZCIZ
      UGJZDKZEIZUMUJJZEKZUMUHLUMUKLUOULUPBJZUPUMAJZMZEKZDKVADKZEKURUNVBDEULUMAB
      DNCNZSOVADEPVCUQEVCUTUPUILZMZUQUSDKZUTMUTVGMVCVFVGUTQUSUTDUAVEVGUTDUPBENT
      UBRUPUMAUIVDUCUDOUEDUMUGVDTEUMUJVDTRUF $.
  $}

  $( The range of the composition of two classes.  (Contributed by NM,
     27-Mar-2008.) $)
  rnco2 $p |- ran ( A o. B ) = ( A "" ran B ) $=
    ( ccom crn cres cima rnco df-ima eqtr4i ) ABCDABDZEDAJFABGAJHI $.

  $( The domain of a composition.  Exercise 27 of [Enderton] p. 53.
     (Contributed by NM, 4-Feb-2004.) $)
  dmco $p |- dom ( A o. B ) = ( `' B "" dom A ) $=
    ( ccom cdm ccnv crn cima dfdm4 cnvco rneqi rnco2 imaeq2i eqtr4i 3eqtri ) AB
    CZDOEZFBEZAEZCZFZQADZGZOHPSABIJTQRFZGUBQRKUAUCQAHLMN $.

  $( A composition of two relations is empty iff there is no overlap betwen the
     range of the second and the domain of the first.  Useful in combination
     with ~ coundi and ~ coundir to prune meaningless terms in the result.
     (Contributed by Stefan O'Rear, 8-Oct-2014.) $)
  coeq0 $p |- ( ( A o. B ) = (/) <-> ( dom A i^i ran B ) = (/) ) $=
    ( ccom c0 wceq crn cres cdm wrel wb relco relrn0 ax-mp eqeq1i relres reldm0
    cin rnco dmres incom eqtri 3bitr3i 3bitri ) ABCZDEZUDFZDEZABFZGZFZDEZAHZUHQ
    ZDEZUDIUEUGJABKUDLMUFUJDABRNUIDEZUIHZDEZUKUNUIIZUOUQJAUHOZUIPMURUOUKJUSUILM
    UPUMDUPUHULQUMAUHSUHULTUANUBUC $.

  ${
    $d w x y z A $.  $d w y z B $.  $d w y z C $.
    $( Composition with an indexed union.  (Contributed by NM, 21-Dec-2008.) $)
    coiun $p |- ( A o. U_ x e. C B ) = U_ x e. C ( A o. B ) $=
      ( vy vz vw ciun ccom relco wrel cv wcel wbr wa wex wrex cop eliun df-br
      reliun a1i mprgbir rexbii 3bitr4i anbi1i r19.41v bitr4i exbii rexcom4 vex
      opelco bitri eqrelriiv ) EFBADCHZIZADBCIZHZBUOJURKUQKZADADUQUAUSALDMBCJUB
      UCELZGLZUONZVAFLZBNZOZGPZUTVACNZVDOZGPZADQZUTVCRZUPMVKURMZVFVHADQZGPVJVEV
      MGVEVGADQZVDOVMVBVNVDUTVARZUOMVOCMZADQVBVNAVODCSUTVAUOTVGVPADUTVACTUDUEUF
      VGVDADUGUHUIVHAGDUJUHGUTVCBUOEUKZFUKZULVLVKUQMZADQVJAVKDUQSVSVIADGUTVCBCV
      QVRULUDUMUEUN $.
  $}

  $( A composition is not affected by a double converse of its first argument.
     (Contributed by NM, 8-Oct-2007.) $)
  cocnvcnv1 $p |- ( `' `' A o. B ) = ( A o. B ) $=
    ( ccnv ccom cvv cres cnvcnv2 coeq1i crn wss wceq ssv cores ax-mp eqtri ) AC
    CZBDAEFZBDZABDZPQBAGHBIZEJRSKTLABEMNO $.

  $( A composition is not affected by a double converse of its second
     argument.  (Contributed by NM, 8-Oct-2007.) $)
  cocnvcnv2 $p |- ( A o. `' `' B ) = ( A o. B ) $=
    ( ccnv ccom cres cnvcnv2 coeq2i resco wrel wceq relco dfrel3 mpbi 3eqtr2i
    cvv ) ABCCZDABOEZDABDZOEZRPQABFGABOHRISRJABKRLMN $.

  $( Absorption of a reverse (preimage) restriction of the second member of a
     class composition.  (Contributed by NM, 11-Dec-2006.) $)
  cores2 $p |- ( dom A C_ C -> ( A o. `' ( `' B |` C ) ) = ( A o. B ) ) $=
    ( cdm wss ccnv cres ccom wceq dfdm4 sseq1i cores sylbi cnvco cocnvcnv1 wrel
    crn relco dfrel2 mpbi eqtri 3eqtr4g cnveqd 3eqtr3g ) ADZCEZABFZCGZFZHZFZFZA
    BHZFZFZUJUMUFUKUNUFUHAFZHZUGUPHZUKUNUFUPQZCEUQURIUEUSCAJKUGUPCLMUKUIFUPHUQA
    UINUHUPOUAABNUBUCUJPULUJIAUIRUJSTUMPUOUMIABRUMSTUD $.

  ${
    $d x y z A $.
    $( Composition with the empty set.  Theorem 20 of [Suppes] p. 63.
       (Contributed by NM, 24-Apr-2004.) $)
    co02 $p |- ( A o. (/) ) = (/) $=
      ( vx vy vz c0 ccom relco rel0 cop wcel wbr wex br0 intnanr nex vex opelco
      cv wa mtbir noel 2false eqrelriiv ) BCAEFZEAEGHBRZCRZIZUDJZUGEJUHUEDRZEKZ
      UIUFAKZSZDLULDUJUKUEUIMNODUEUFAEBPCPQTUGUAUBUC $.

    $( Composition with the empty set.  (Contributed by NM, 24-Apr-2004.) $)
    co01 $p |- ( (/) o. A ) = (/) $=
      ( c0 ccnv ccom cnv0 cnvco coeq2i co02 3eqtri eqtr4i cnveqi wrel wceq rel0
      dfrel2 mpbi relco 3eqtr3ri ) BCZCZBADZCZCZBUASUBSBUBEUBACZSDUDBDBBAFSBUDE
      GUDHIJKBLTBMNBOPUALUCUAMBAQUAOPR $.

    $( Composition with the identity relation.  Part of Theorem 3.7(i) of
       [Monk1] p. 36.  (Contributed by NM, 22-Apr-2004.) $)
    coi1 $p |- ( Rel A -> ( A o. _I ) = A ) $=
      ( vx vy vz cid ccom wrel wceq relco cv cop wcel wbr wex vex opelco equcom
      wa ideq bitri anbi1i exbii breq1 ceqsexv df-br eqrelriv mpan ) AEFZGAGUHA
      HAEIBCUHABJZCJZKZUHLZUIUJAMZUKALULUIDJZEMZUNUJAMZRZDNZUMDUIUJAEBOZCOPURUN
      UIHZUPRZDNUMUQVADUOUTUPUOUIUNHUTUIUNDOSBDQTUAUBUPUMDUIUSUNUIUJAUCUDTTUIUJ
      AUETUFUG $.

    $( Composition with the identity relation.  Part of Theorem 3.7(i) of
       [Monk1] p. 36.  (Contributed by NM, 22-Apr-2004.) $)
    coi2 $p |- ( Rel A -> ( _I o. A ) = A ) $=
      ( wrel ccnv ccom cnvco wceq relcnv ax-mp cnveqi eqtr3i dfrel2 coeq2 coeq1
      cid coi1 cnvi sylan9eq mpan2 sylbi biimpi 3eqtr3a ) ABZNCZACZCZDZUENADZAU
      DNDZCUFUEUDNEUHUDUDBUHUDFAGUDOHIJUBUEAFZUFUGFZAKZUIUCNFZUJPUIULUFUCADUGUE
      AUCLUCNAMQRSUBUIUKTUA $.
  $}

  $( Composition with a restricted identity relation.  (Contributed by FL,
     19-Jun-2011.)  (Revised by Stefan O'Rear, 7-Mar-2015.) $)
  coires1 $p |- ( A o. ( _I |` B ) ) = ( A |` B ) $=
    ( ccnv cres ccom cocnvcnv1 wrel wceq relcnv coi1 ax-mp eqtr3i reseq1i resco
    cid rescnvcnv ) ACZCZBDZAOBDEZABDAOEZBDSTUARBROEZUARAOFRGUBRHQIRJKLMAOBNLAB
    PL $.

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.
    $( Associative law for class composition.  Theorem 27 of [Suppes] p. 64.
       Also Exercise 21 of [Enderton] p. 53.  Interestingly, this law holds for
       any classes whatsoever, not just functions or even relations.
       (Contributed by NM, 27-Jan-1997.) $)
    coass $p |- ( ( A o. B ) o. C ) = ( A o. ( B o. C ) ) $=
      ( vx vy vz vw ccom relco cv wbr wa wex cop wcel brco exbii opelco 3bitr4i
      vex excom anass 2exbii bitr4i anbi2i exdistr anbi1i 19.41v eqrelriiv ) DE
      ABHZCHZABCHZHZUJCIAULIDJZFJZCKZUOGJZBKZUQEJZAKZLZLZGMFMZUPURLZUTLZFMZGMZU
      NUSNZUKOZVHUMOZVCVBFMGMVGVBFGUAVEVBGFUPURUTUBUCUDUPUOUSUJKZLZFMUPVAGMZLZF
      MVIVCVLVNFVKVMUPGUOUSABFTETZPUEQFUNUSUJCDTZVORUPVAFGUFSUNUQULKZUTLZGMVDFM
      ZUTLZGMVJVGVRVTGVQVSUTFUNUQBCVPGTPUGQGUNUSAULVPVORVFVTGVDUTFUHQSSUI $.
  $}

  $( A relation is transitive iff its converse is transitive.  (Contributed by
     FL, 19-Sep-2011.) $)
  relcnvtr $p |- ( Rel R ->
     ( ( R o. R ) C_ R <-> ( `' R o. `' R ) C_ `' R ) ) $=
    ( wrel ccom wss ccnv cnvco cnvss syl5eqssr wceq wi sseq1 dfrel2 coeq1 coeq2
    eqtrd id sseq12d biimpd sylbi com12 syl6bi mpsyl impbid2 ) ABZAACZADZAEZUGC
    ZUGDZUFUHUEEUGAAFUEAGHUIUDUFUHEZUGEZUKCZIZUIUJUKDZUDUFJZUGUGFUHUGGUMUNULUKD
    ZUOUJULUKKUDUPUFUDUKAIZUPUFJALUQUPUFUQULUEUKAUQULAUKCUEUKAUKMUKAANOUQPQRSTU
    AUBTUC $.

  ${
    $d x y A $.
    $( A relation is included in the Cartesian product of its domain and
       range.  Exercise 4.12(t) of [Mendelson] p. 235.  (Contributed by NM,
       3-Aug-1994.) $)
    relssdmrn $p |- ( Rel A -> A C_ ( dom A X. ran A ) ) $=
      ( vx vy wrel cdm crn cxp id cv cop wi wex 19.8a wa opelxp vex eldm2 elrn2
      wcel anbi12i bitri sylanbrc a1i relssdv ) ADZBCAAEZAFZGZUEHBIZCIZJZASZUKU
      HSZKUEULULCLZULBLZUMULCMULBMUMUIUFSZUJUGSZNUNUONUIUJUFUGOUPUNUQUOCUIABPQB
      UJACPRTUAUBUCUD $.
  $}

  $( The converse is a subset of the cartesian product of range and domain.
     (Contributed by Mario Carneiro, 2-Jan-2017.) $)
  cnvssrndm $p |- `' A C_ ( ran A X. dom A ) $=
    ( ccnv cdm crn cxp wrel relcnv relssdmrn ax-mp df-rn dfdm4 xpeq12i sseqtr4i
    wss ) ABZOCZODZEZADZACZEOFORNAGOHISPTQAJAKLM $.

  $( Composition as a subset of the Cartesian product of factors.  (Contributed
     by Mario Carneiro, 12-Jan-2017.) $)
  cossxp $p |- ( A o. B ) C_ ( dom B X. ran A ) $=
    ( ccom cdm crn cxp wrel wss relco relssdmrn ax-mp dmcoss rncoss mp2an sstri
    xpss12 ) ABCZQDZQEZFZBDZAEZFZQGQTHABIQJKRUAHSUBHTUCHABLABMRUASUBPNO $.

  $( Two ways to describe the structure of a two-place operation.  (Contributed
     by NM, 17-Dec-2008.) $)
  relrelss $p |- ( ( Rel A /\ Rel dom A ) <-> A C_ ( ( _V X. _V ) X. _V ) ) $=
    ( wrel cdm wa cvv cxp wss df-rel anbi2i crn relssdmrn xpss12 mpan2 sylan9ss
    ssv xpss sstr sylibr dmss c0 wne wceq vn0 dmxp ax-mp syl6sseq impbii bitri
    jca ) ABZACZBZDUJUKEEFZGZDZAUMEFZGZULUNUJUKHIUOUQUJUNAUKAJZFZUPAKUNUREGUSUP
    GUROUKUMURELMNUQUJUNUQAUMGZUJUQUPUMGUTUMEPAUPUMQMAHRUQUKUPCZUMAUPSETUAVAUMU
    BUCUMEUDUEUFUIUGUH $.

  ${
    $d x y A $.  $d x y R $.
    $( The membership relation for a relation is inherited by class union.
       (Contributed by NM, 17-Sep-2006.) $)
    unielrel $p |- ( ( Rel R /\ A e. R ) -> U. A e. U. R ) $=
      ( vx vy wrel wcel wa cv cop wceq wex elrel simpr wi vex uniopel a1i eleq1
      cuni unieq eleq1d 3imtr4d exlimivv sylc ) BEZABFZGACHZDHZIZJZDKCKUFASZBSZ
      FZCDABLUEUFMUJUFUMNCDUJUIBFZUISZULFZUFUMUNUPNUJUGUHBCODOPQAUIBRUJUKUOULAU
      ITUAUBUCUD $.
  $}

  $( The double union of a relation is its field.  (Contributed by NM,
     17-Sep-2006.) $)
  relfld $p |- ( Rel R -> U. U. R = ( dom R u. ran R ) ) $=
    ( wrel cuni cdm crn cun cxp wss relssdmrn 3syl unixpss syl6ss dmrnssfld a1i
    uniss eqssd ) ABZACZCZADZAEZFZQSTUAGZCZCZUBQAUCHRUDHSUEHAIAUCORUDOJTUAKLUBS
    HQAMNP $.

  $( Restriction of a relation to its field.  (Contributed by FL,
     15-Apr-2012.) $)
  relresfld $p |- ( Rel R -> ( R |` U. U. R ) = R ) $=
    ( wrel cuni cres wceq cdm crn wi relfld reseq2d resundi wa eqtr resss resdm
    cun wss ssequn2 uneq1 eqeq2d ex syl6bi com3r sylbi syl5com sylancl pm2.43i
    mpsyl ) ABZAACCZDZAEZUIUKAAFZAGZPZDZEZUPAUMDZAUNDZPZEZUIULHUIUJUOAAIJAUMUNK
    UQVALUKUTEZUIULUKUPUTMUSAQZUIURAEZVBULHZAUNNAOVCAUSPZAEZVDVEHUSARVDVBVGULVD
    VBUKVFEZVGULHVDUTVFUKURAUSSTVHVGULUKVFAMUAUBUCUDUHUEUFUG $.

  $( Composition with the identity relation restricted to a relation's field.
     (Contributed by FL, 2-May-2011.) $)
  relcoi2 $p |- ( Rel R -> ( ( _I |` U. U. R ) o. R ) = R ) $=
    ( wrel cid cuni cres ccom crn wss wceq cdm cun dmrnssfld simpr sylbir ax-mp
    wa unss cores mp1i coi2 eqtrd ) ABZCADDZEAFZCAFZAAGZUCHZUDUEIUBAJZUFKUCHZUG
    ALUIUHUCHZUGPUGUHUFUCQUJUGMNOCAUCRSATUA $.

  $( Composition with the identity relation restricted to a relation's field.
     (Contributed by FL, 8-May-2011.) $)
  relcoi1 $p |- ( Rel R -> ( R o. ( _I |` U. U. R ) ) = R ) $=
    ( wrel cid cuni cres ccom cun wceq wi resco reseq1 wa eqtr eqeq1 syl5ibr ex
    syl com3l eqcoms mpcom cdm crn relfld resundi coeq2 coundi coi1 resdm uneq1
    uneq2d wss resss ssequn2 mpbi syl6reqr mpsyl syl5com mpi syl5eq mp2b reseq2
    coeq2d eqeq1d eqtrd ) ABZACADDZEZFZACFZAVFAUAZAUBZGZHZVEVHVIHZAUCVEVNVMACVL
    EZFZVIHZVOCVJEZCVKEZGZHVPAVTFZHZVEVQICVJVKUDVOVTAUEVEVQWBWAVIHVEWAAVRFZAVSF
    ZGZVIAVRVSUFVEVIVJEZWCHZWEVIHZACVJJVIAHZVEWGWHIZAUGZWIWFAVJEZHZVEWJVIAVJKWL
    AHZVEWMWJIAUHWMWNVEWJWMWNVEWJIZWMWNLWFAHZWOWFWLAMWGWPVEWHWPVEWHIZIWCWFWCWFH
    ZWPWQWRWPLWCAHZWQWCWFAMVIVKEZWDHZWSWEAWDGZHZWQACVKJWCAWDUIVEXAXCWHWIVEXAXCW
    HIZIZWKWIWTAVKEZHZVEXEIVIAVKKXAXGVEXDXGVEXDIZIWDWTWDWTHZXGXHXIXGLZXBAXFGZHZ
    XHXJWDXFAWDWTXFMUJXCXLVEWHXCXLWQXCXLLWEXKHZWQWEXBXKMVEWHXMXKVIHVEVIAXKWKXFA
    UKXKAHAVKULXFAUMUNUOWEXKVINOQPRQPSRQTRUPQPSRQPRTUQTURUSVPWAVINOUTVMVHVPVIVM
    VGVOAVFVLCVAVBVCOTWKVD $.

  $( The double union of the converse of a class is its field.  (Contributed by
     NM, 4-Jun-2008.) $)
  unidmrn $p |- U. U. `' A = ( dom A u. ran A ) $=
    ( ccnv cuni crn cdm cun wrel wceq relcnv ax-mp equncomi dfdm4 df-rn uneq12i
    relfld eqtr4i ) ABZCCZQDZQEZFAEZADZFRTSQGRTSFHAIQOJKUASUBTALAMNP $.

  $( if ` R ` is a relation, its double union equals the double union of its
     converse.  (Contributed by FL, 5-Jan-2009.) $)
  relcnvfld $p |- ( Rel R -> U. U. R = U. U. `' R ) $=
    ( wrel cuni cdm crn cun ccnv relfld unidmrn syl6eqr ) ABACCADAEFAGCCAHAIJ
    $.

  $( Alternate definition of domain ~ df-dm that doesn't require dummy
     variables.  (Contributed by NM, 2-Aug-2010.) $)
  dfdm2 $p |- dom A = U. U. ( `' A o. A ) $=
    ( ccnv ccom cuni cdm crn cun cnvco cocnvcnv2 eqtri unieqi eqtr3i wceq df-rn
    unidmrn eqcomi dmcoeq ax-mp rncoeq dfdm4 eqtr4i uneq12i unidm 3eqtrri ) ABZ
    ACZDZDZUFEZUFFZGZAEZULGULUFBZDZDUHUKUNUGUMUFUMUEUEBCUFUEAHUEAIJKKUFOLUIULUJ
    ULUEEZAFZMZUIULMUPUOANPZUEAQRUJUEFZULUQUJUSMURUEASRATUAUBULUCUD $.

  $( The double class union of a nonempty Cartesian product is the union of it
     members.  (Contributed by NM, 17-Sep-2006.) $)
  unixp $p |- ( ( A X. B ) =/= (/) -> U. U. ( A X. B ) = ( A u. B ) ) $=
    ( cxp c0 wne cuni cdm crn cun wrel wceq relxp relfld ax-mp xpeq2 xp0 syl6eq
    necon3i xpeq1 0xp dmxp rnxp uneq12 syl2an syl2anc syl5eq ) ABCZDEZUGFFZUGGZ
    UGHZIZABIZUGJUIULKABLUGMNUHBDEZADEZULUMKZBDUGDBDKUGADCDBDAOAPQRADUGDADKUGDB
    CDADBSBTQRUNUJAKUKBKUPUOABUAABUBUJAUKBUCUDUEUF $.

  ${
    $d x y z A $.  $d x y z B $.
    $( A Cartesian product is empty iff its union is empty.  (Contributed by
       NM, 20-Sep-2006.) $)
    unixp0 $p |- ( ( A X. B ) = (/) <-> U. ( A X. B ) = (/) ) $=
      ( vz vx vy cxp c0 wceq cuni unieq uni0 syl6eq wne cv wex n0 cop vex sylbi
      wcel elxp3 wss elssuni opnzi ssn0 sylancl adantl exlimivv exlimiv necon4i
      wa impbii ) ABFZGHZUMIZGHUNUOGIGUMGJKLUMGUOGUMGMCNZUMTZCOUOGMZCUMPUQURCUQ
      DNZENZQZUPHZVAUMTZUKZEODOURDEUPABUAVDURDEVCURVBVCVAUOUBVAGMURVAUMUCUSUTDR
      ERUDVAUOUEUFUGUHSUISUJUL $.
  $}

  $( Field of a square Cartesian product.  (Contributed by FL, 10-Oct-2009.) $)
  unixpid $p |- U. U. ( A X. A ) = A $=
    ( c0 wceq cxp cuni xpeq1 syl6eq wi unieq unieqd uni0 unieqi eqtri wa expcom
    0xp eqtr eqcoms syl5com wne sylancl mpcom wn df-ne cun unixp unidm sylancbr
    xpnz sylbi pm2.61i ) ABCZAADZEZEZACZUMBCZULUPULUMBADBABAFAPGUQUOBEZEZCZUSBC
    ZULUPHUQUNURUMBIJUSURBURBKLKMUTVANUOBCZULUPUOUSBQVBUPHBAVBBACUPUOBAQORSUAUB
    ULUCABTZVCUPABUDZVDVCVCNUMBTZUPAAUIVEUOAAUEAAAUFAUGGUJUHUK $.

  ${
    $d x y A $.  $d x y B $.
    $( Restriction of a class to a singleton.  (Contributed by Mario Carneiro,
       28-Dec-2014.) $)
    ressn $p |- ( A |` { B } ) = ( { B } X. ( A "" { B } ) ) $=
      ( vx vy csn cres cima cxp relres relxp cv cop wcel wa ancom elimasn elsni
      vex sneqd imaeq2d eleq2d syl5bbr pm5.32i opelres opelxp 3bitr4i eqrelriiv
      bitri ) CDABEZFZUIAUIGZHZAUIIUIUKJCKZDKZLZAMZUMUIMZNZUQUNUKMZNZUOUJMUOULM
      URUQUPNUTUPUQOUQUPUSUPUNAUMEZGZMUQUSAUMUNCRDRZPUQVBUKUNUQVAUIAUQUMBUMBQST
      UAUBUCUHUMUNAUIVCUDUMUNUIUKUEUFUG $.
  $}

  ${
    $d A a b x $.  $d B a b $.
    $( The converse of an intersection is the intersection of the converse.
       (Contributed by FL, 15-Oct-2012.) $)
    cnviin $p |- ( A =/= (/) -> `' |^|_ x e. A B = |^|_ x e. A `' B ) $=
      ( va vb ciin ccnv wrel relcnv cvv wss wral cv wcel df-rel cop eliin ax-mp
      wb opex c0 wne wceq cxp wrex r19.2z expcom mpbi a1i mprg iinss syl sylibr
      wi vex opelcnv ralbii bitri 3bitr4i eqrelriv sylancr ) BUAUBZABCFZGZHABCG
      ZFZHZVDVFUCVCIVBVFJJUDZKZVGVBVEVHKZABUEZVIVJVBVKUNABVBVJABLVKVJABUFUGVJAM
      BNVEHVJCIVEOUHUIUJABVEVHUKULVFOUMDEVDVFEMZDMZPZVCNZVNCNZABLZVMVLPZVDNVRVF
      NZVNJNVOVQSVLVMTAVNBCJQRVMVLVCDUOZEUOZUPVSVRVENZABLZVQVRJNVSWCSVMVLTAVRBV
      EJQRWBVPABVMVLCVTWAUPUQURUSUTVA $.
  $}

  ${
    $d x y z A $.  $d x y z R $.
    $( The converse of a partial order relation is a partial order relation.
       (Contributed by NM, 15-Jun-2005.) $)
    cnvpo $p |- ( R Po A <-> `' R Po A ) $=
      ( vx vy vz cv wbr wn wa wi wral wpo r19.26 bitri ralbii 3bitr4i vex brcnv
      c0 ralcom ccnv ralidm wb wceq rzal 2thd r19.3rzv ralbidv pm2.61ine bitr2i
      wne anbi1i breq12d syl5bb notbid cbvralv anbi12ci imbi12i anbi12i df-po
      id ) CFZVBBGZHZVBDFZBGZVEEFZBGZIZVBVGBGZJZIEAKZDAKCAKZVGVGBUAZGZHZVGVEVNG
      ZVEVBVNGZIZVGVBVNGZJZIZCAKZDAKEAKZABLAVNLVLCAKZDAKWCEAKZDAKVMWDWEWFDAWEVD
      CAKZVKEAKZIZCAKZWFVDEAKZWHIZCAKZWGCAKZWHCAKZIZWEWJWMWKCAKZWOIWPWKWHCAMWQW
      NWOWNWGWQVDCAUBWGWQUCASASUDWGWQVDCAUEWKCAUEUFASUKVDWKCAVDEAUGUHUIUJULNVLW
      LCAVDVKEAMOWGWHCAMPWJWBEAKZCAKWFWIWRCAWRVPEAKZWAEAKZIWIVPWAEAMWSWGWTWHVPV
      DECAVGVBUDZVOVCVOVGVGBGXAVCVGVGBEQZXBRXAVGVBVGVBBXAVAZXCUMUNUOUPWAVKEAVSV
      IVTVJVQVHVRVFVGVEBXBDQZRVEVBBXDCQZRUQVGVBBXBXERUROUSUJOWBCEAATNNOVLCDAATW
      CEDAATPCDEABUTEDCAVNUTP $.

    $( The converse of a strict order relation is a strict order relation.
       (Contributed by NM, 15-Jun-2005.) $)
    cnvso $p |- ( R Or A <-> `' R Or A ) $=
      ( vx vy wpo cv wbr weq w3o wral wa ccnv wor cnvpo ralcom vex brcnv equcom
      3orbi123i df-so 2ralbii bitr4i anbi12i 3bitr4i ) ABEZCFZDFZBGZCDHZUGUFBGZ
      IZDAJCAJZKABLZEZUGUFUMGZDCHZUFUGUMGZIZCAJDAJZKABMAUMMUEUNULUSABNULUKCAJDA
      JUSUKCDAAOURUKDCAAUOUHUPUIUQUJUGUFBDPZCPZQDCRUFUGBVAUTQSUAUBUCCDABTDCAUMT
      UD $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.
    $( Composition of two Cartesian products.  (Contributed by Thierry Arnoux,
       17-Nov-2017.) $)
    xpco $p |- ( B =/= (/) -> ( ( B X. C ) o. ( A X. B ) ) = ( A X. C ) ) $=
      ( vx vy vz c0 wne cv cxp wbr wa wex copab wcel ccom biimpi biantrurd brxp
      n0 ancom anbi1i anbi12i anandi 3bitr4i exbii 19.41v bitr2i opabbidv df-co
      syl6rbb df-xp 3eqtr4g ) BGHZDIZEIZABJZKZUPFIZBCJZKZLZEMZDFNUOAOZUSCOZLZDF
      NUTUQPACJUNVCVFDFUNVFUPBOZEMZVFLZVCUNVHVFUNVHEBTQRVCVGVFLZEMVIVBVJEVDVGLZ
      VGVELZLVGVDLZVLLVBVJVKVMVLVDVGUAUBURVKVAVLUOUPABSUPUSBCSUCVGVDVEUDUEUFVGV
      FEUGUHUKUIDFEUTUQUJDFACULUM $.
  $}

  ${
    $( Composition of two square Cartesian products.  (Contributed by Thierry
       Arnoux, 14-Jan-2018.) $)
    xpcoid $p |- ( ( A X. A ) o. ( A X. A ) ) = ( A X. A ) $=
      ( cxp ccom wceq c0 co01 sqxpeqd 0xp syl6eq coeq12d 3eqtr4a xpco pm2.61ine
      id ) AABZOCZODAEAEDZEECEPOEFQOEOEQOEEBEQAEQNGEHIZRJRKAAALM $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Definite description binder (inverted iota)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c iota $.
  $( Extend class notation with Russell's definition description binder
     (inverted iota). $)
  cio $a class ( iota x ph ) $.

  ${
    $d w x z $.  $d ph w z $.  $d ph w y $.  $d x y $.
    $( Soundness justification theorem for ~ df-iota .  (Contributed by Andrew
       Salmon, 29-Jun-2011.) $)
    iotajust $p |- U. { y | { x | ph } = { y } } =
       U. { z | { x | ph } = { z } } $=
      ( vw cab cv csn wceq sneq eqeq2d cbvabv eqtri unieqi ) ABFZCGZHZIZCFZODGZ
      HZIZDFZSOEGZHZIZEFUCRUFCEPUDIQUEOPUDJKLUFUBEDUDTIUEUAOUDTJKLMN $.
  $}

  ${
    $d y x $.  $d y ph $.
    $( Define Russell's definition description binder, which can be read as
       ""the unique ` x ` such that ` ph ` ,"" where ` ph ` ordinarily contains
       ` x ` as a free variable.  Our definition is meaningful only when there
       is exactly one ` x ` such that ` ph ` is true (see ~ iotaval );
       otherwise, it evaluates to the empty set (see ~ iotanul ).  Russell used
       the inverted iota symbol ` iota ` to represent the binder.

       Sometimes proofs need to expand an iota-based definition.  That is,
       given ""X = the x for which ... x ... x ..."" holds, the proof needs to
       get to ""...  X ...  X ..."".  A general strategy to do this is to use
       ~ riotacl2 (or ~ iotacl for unbounded iota), as demonstrated in the
       proof of ~ supub .  This can be easier than applying ~ riotasbc or a
       version that applies an explicit substitution, because substituting an
       iota into its own property always has a bound variable clash which must
       be first renamed or else guarded with NF.

       (Contributed by Andrew Salmon, 30-Jun-2011.) $)
    df-iota $a |- ( iota x ph ) = U. { y | { x | ph } = { y } } $.
  $}

  ${
    $d y x $.  $d y ph $.
    $( Alternate definition for descriptions.  Definition 8.18 in [Quine]
       p. 56.  (Contributed by Andrew Salmon, 30-Jun-2011.) $)
    dfiota2 $p |- ( iota x ph ) = U. { y | A. x ( ph <-> x = y ) } $=
      ( cio cab cv csn wceq cuni wb wal df-iota df-sn eqeq2i abbi bitr4i unieqi
      abbii eqtri ) ABDABEZCFZGZHZCEZIABFUAHZJBKZCEZIABCLUDUGUCUFCUCTUEBEZHUFUB
      UHTBUAMNAUEBOPRQS $.
  $}

  ${
    $d x y $.  $d y ph $.
    $( Bound-variable hypothesis builder for the ` iota ` class.  (Contributed
       by Andrew Salmon, 11-Jul-2011.)  (Revised by Mario Carneiro,
       15-Oct-2016.) $)
    nfiota1 $p |- F/_ x ( iota x ph ) $=
      ( vy cio weq wb wal cab cuni dfiota2 nfaba1 nfuni nfcxfr ) BABDABCEFZBGCH
      ZIABCJBONBCKLM $.
  $}

  ${
    $d z ps $.  $d z ph $.  $d x z $.  $d y z $.
    nfiotad.1 $e |- F/ y ph $.
    nfiotad.2 $e |- ( ph -> F/ x ps ) $.
    $( Deduction version of ~ nfiota .  (Contributed by NM, 18-Feb-2013.) $)
    nfiotad $p |- ( ph -> F/_ x ( iota y ps ) ) $=
      ( vz cio weq wb wal cab cuni dfiota2 nfv wn wa wnf adantr cv nfcvf adantl
      wnfc nfcvd nfeqd nfbid nfald2 nfabd nfunid nfcxfrd ) ACBDHBDGIZJZDKZGLZMB
      DGNACUNAUMCGAGOAULCDEACDICKPZQZBUKCABCRUOFSUPCDTZGTZUOCUQUCACDUAUBUPCURUD
      UEUFUGUHUIUJ $.
  $}

  ${
    $d w z ph $.  $d w x z $.  $d w y z $.
    nfiota.1 $e |- F/ x ph $.
    $( Bound-variable hypothesis builder for the ` iota ` class.  (Contributed
       by NM, 23-Aug-2011.) $)
    nfiota $p |- F/_ x ( iota y ph ) $=
      ( cio wnfc wtru nftru wnf a1i nfiotad trud ) BACEFGABCCHABIGDJKL $.
  $}

  ${
    $d z w x $.  $d z w y $.  $d z w ph $.  $d z w ps $.
    cbviota.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    cbviota.2 $e |- F/ y ph $.
    cbviota.3 $e |- F/ x ps $.
    $( Change bound variables in a description binder.  (Contributed by Andrew
       Salmon, 1-Aug-2011.) $)
    cbviota $p |- ( iota x ph ) = ( iota y ps ) $=
      ( vw vz weq wb wal cab cuni cio wsb nfv nfbi equequ1 bibi12d sbequ12 nfsb
      nfs1v cbval sbequ sbie syl6bb bitri abbii unieqi dfiota2 3eqtr4i ) ACHJZK
      ZCLZHMZNBDHJZKZDLZHMZNACOBDOUPUTUOUSHUOACIPZIHJZKZILUSUNVCCIUNIQVAVBCACIU
      CVBCQRCIJAVAUMVBACIUACIHSTUDVCURIDVAVBDACIDFUBVBDQRURIQIDJZVABVBUQVDVAACD
      PBAIDCUEABCDGEUFUGIDHSTUDUHUIUJACHUKBDHUKUL $.
  $}

  ${
    $d ph y $.  $d ps x $.
    cbviotav.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change bound variables in a description binder.  (Contributed by Andrew
       Salmon, 1-Aug-2011.) $)
    cbviotav $p |- ( iota x ph ) = ( iota y ps ) $=
      ( nfv cbviota ) ABCDEADFBCFG $.
  $}

  ${
    $d w z ph $.  $d w z x $.  $d w z y $.
    sb8iota.1 $e |- F/ y ph $.
    $( Variable substitution in description binder.  Compare ~ sb8eu .
       (Contributed by NM, 18-Mar-2013.) $)
    sb8iota $p |- ( iota x ph ) = ( iota y [ y / x ] ph ) $=
      ( vz vw weq wal cab cuni wsb cio nfv sb8 sbbi nfsb equsb3 nfxfr dfiota2
      wb nfbi sbequ cbval sblbis albii 3bitri abbii unieqi 3eqtr4i ) ABEGZTZBHZ
      EIZJABCKZCEGZTZCHZEIZJABLUNCLUMURULUQEULUKBFKZFHUKBCKZCHUQUKBFUKFMNUSUTFC
      USABFKZUJBFKZTCAUJBFOVAVBCABFCDPVBFEGZCFBEQVCCMRUARUTFMUKFCBUBUCUTUPCUJUO
      ABCCBEQUDUEUFUGUHABESUNCESUI $.
  $}

  ${
    $d y z $.  $d x z $.  $d ph z $.
    $( Equality theorem for descriptions.  (Contributed by Andrew Salmon,
       30-Jun-2011.) $)
    iotaeq $p |- ( A. x x = y -> ( iota x ph ) = ( iota y ph ) ) $=
      ( vz cv wceq wal cab csn cuni cio wcel drsb1 df-clab 3bitr4g eqrdv eqeq1d
      wsb abbidv df-iota unieqd 3eqtr4g ) BECEFBGZABHZDEZIZFZDHZJACHZUFFZDHZJAB
      KACKUCUHUKUCUGUJDUCUDUIUFUCDUDUIUCABDRACDRUEUDLUEUILABCDMADBNADCNOPQSUAAB
      DTACDTUB $.
  $}

  ${
    $d ph z $.  $d ps z $.  $d x y z $.
    $( Equivalence theorem for descriptions.  (Contributed by Andrew Salmon,
       30-Jun-2011.) $)
    iotabi $p |- ( A. x ( ph <-> ps ) -> ( iota x ph ) = ( iota x ps ) ) $=
      ( vz wb wal cab cv csn wceq cuni abbi biimpi eqeq1d abbidv unieqd df-iota
      cio 3eqtr4g ) ABECFZACGZDHIZJZDGZKBCGZUBJZDGZKACRBCRTUDUGTUCUFDTUAUEUBTUA
      UEJABCLMNOPACDQBCDQS $.

    $( Part of Theorem 8.17 in [Quine] p. 56.  This theorem serves as a lemma
       for the fundamental property of iota.  (Contributed by Andrew Salmon,
       11-Jul-2011.) $)
    uniabio $p |- ( A. x ( ph <-> x = y ) -> U. { x | ph } = y ) $=
      ( cv wceq wb wal cab cuni csn abbi biimpi df-sn syl6eqr unieqd vex syl6eq
      unisn ) ABDCDZEZFBGZABHZISJZISUAUBUCUAUBTBHZUCUAUBUDEATBKLBSMNOSCPRQ $.

    $( Theorem 8.19 in [Quine] p. 57.  This theorem is the fundamental property
       of iota.  (Contributed by Andrew Salmon, 11-Jul-2011.) $)
    iotaval $p |- ( A. x ( ph <-> x = y ) -> ( iota x ph ) = y ) $=
      ( vz weq wb wal cio cab cuni cv dfiota2 wceq cvv wcel vex sbeqalb equcomi
      wa wi ax-mp ex equequ2 equcoms bibi2d biimpd alimdv com12 alrimiv uniabio
      syl6 impbid syl syl5eq ) ABCEZFZBGZABHABDEZFZBGZDIJZCKZABDLUQUTDCEZFZDGVA
      VBMUQVDDUQUTVCUQUTVCVBNOZUQUTSZVCTCPVEVFCDEVCABVBDKNQCDRUKUAUBVCUQUTVCUPU
      SBVCUPUSVCUOURAUOURFCDCDBUCUDUEUFUGUHULUIUTDCUJUMUN $.

    $( Equivalence between two different forms of ` iota ` .  (Contributed by
       Andrew Salmon, 12-Jul-2011.) $)
    iotauni $p |- ( E! x ph -> ( iota x ph ) = U. { x | ph } ) $=
      ( vz weu cv wceq wb wal wex cio cuni df-eu iotaval uniabio eqtr4d exlimiv
      cab sylbi ) ABDABECEZFGBHZCIABJZABQKZFZABCLTUCCTUASUBABCMABCNOPR $.

    $( Equivalence between two different forms of ` iota ` .  (Contributed by
       Mario Carneiro, 24-Dec-2016.) $)
    iotaint $p |- ( E! x ph -> ( iota x ph ) = |^| { x | ph } ) $=
      ( weu cio cab cuni cint iotauni wceq uniintab biimpi eqtrd ) ABCZABDABEZF
      ZNGZABHMOPIABJKL $.

    $( Property of iota.  (Contributed by NM, 23-Aug-2011.)  (Revised by Mario
       Carneiro, 23-Dec-2016.) $)
    iota1 $p |- ( E! x ph -> ( ph <-> ( iota x ph ) = x ) ) $=
      ( vz weu cv wceq wb wal wex cio df-eu iotaval eqeq2d bitr4d eqcom exlimiv
      sp syl6bb sylbi ) ABDABEZCEZFZGZBHZCIAABJZTFZGZABCKUDUGCUDATUEFZUFUDAUBUH
      UCBQUDUEUATABCLMNTUEORPS $.

    $( Theorem 8.22 in [Quine] p. 57.  This theorem is the result if there
       isn't exactly one ` x ` that satisfies ` ph ` .  (Contributed by Andrew
       Salmon, 11-Jul-2011.) $)
    iotanul $p |- ( -. E! x ph -> ( iota x ph ) = (/) ) $=
      ( vz weu weq wb wal wex cio c0 wceq df-eu wn cab cuni dfiota2 alnex eqidd
      ax-1 cv impbid1 con2bid alimi abbi sylib dfnul2 sylbir unieqd uni0 syl6eq
      syl6eqr syl5eq sylnbi ) ABDABCEFBGZCHZABIZJKABCLUOMZUPUNCNZOZJABCPUQUSJOJ
      UQURJUQUNMZCGZURJKUNCQVAURCCEZMZCNZJVAUNVCFZCGURVDKUTVECUTVBUNUTVBUTUTVBS
      UTCTRUAUBUCUNVCCUDUECUFUKUGUHUIUJULUM $.

    $( The ` iota ` class is a subset of the union of all elements satisfying
       ` ph ` .  (Contributed by Mario Carneiro, 24-Dec-2016.) $)
    iotassuni $p |- ( iota x ph ) C_ U. { x | ph } $=
      ( weu cio cab cuni wss wceq iotauni eqimss syl wn c0 iotanul 0ss syl6eqss
      pm2.61i ) ABCZABDZABEFZGZRSTHUAABISTJKRLSMTABNTOPQ $.

    $( Theorem 8.23 in [Quine] p. 58.  This theorem proves the existence of the
       ` iota ` class under our definition.  (Contributed by Andrew Salmon,
       11-Jul-2011.) $)
    iotaex $p |- ( iota x ph ) e. _V $=
      ( vz weu cio cvv wcel cv wceq wb wal wex iotaval eqcomd eximi df-eu isset
      3imtr4i wn c0 iotanul 0ex syl6eqel pm2.61i ) ABDZABEZFGZABHCHZIJBKZCLUHUF
      IZCLUEUGUIUJCUIUFUHABCMNOABCPCUFQRUESUFTFABUAUBUCUD $.

    $( Theorem *14.22 in [WhiteheadRussell] p. 190.  (Contributed by Andrew
       Salmon, 12-Jul-2011.) $)
    iota4 $p |- ( E! x ph -> [. ( iota x ph ) / x ]. ph ) $=
      ( vz weu weq wb wal wex cio wsbc df-eu wsb bi2 alimi sb2 syl wceq iotaval
      wi cv eqcomd dfsbcq2 mpbid exlimiv sylbi ) ABDABCEZFZBGZCHABABIZJZABCKUHU
      JCUHABCLZUJUHUFASZBGUKUGULBAUFMNABCOPUHCTZUIQUKUJFUHUIUMABCRUAABCUIUBPUCU
      DUE $.
  $}

  $( Theorem *14.23 in [WhiteheadRussell] p. 191.  (Contributed by Andrew
     Salmon, 12-Jul-2011.) $)
  iota4an $p |- ( E! x ( ph /\ ps )
            -> [. ( iota x ( ph /\ ps ) ) / x ]. ph ) $=
    ( wa weu cio wsbc iota4 wi cvv wcel iotaex simpl sbcth ax-mp wb sbcimg mpbi
    syl ) ABDZCETCTCFZGZACUAGZTCHTAIZCUAGZUBUCIZUAJKZUETCLZUDCUAJABMNOUGUEUFPUH
    TACUAJQORS $.

  ${
    $d x y A $.  $d x V $.  $d x ph $.  $d y ps $.
    iota5.1 $e |- ( ( ph /\ A e. V ) -> ( ps <-> x = A ) ) $.
    $( A method for computing iota.  (Contributed by NM, 17-Sep-2013.) $)
    iota5 $p |- ( ( ph /\ A e. V ) -> ( iota x ps ) = A ) $=
      ( vy wcel wa cv wceq wb wal cio alrimiv wi eqeq2 bibi2d albidv imbi12d
      iotaval vtoclg adantl mpd ) ADEHZIZBCJZDKZLZCMZBCNZDKZUFUICFOUEUJULPZABUG
      GJZKZLZCMZUKUNKZPUMGDEUNDKZUQUJURULUSUPUICUSUOUHBUNDUGQRSUNDUKQTBCGUAUBUC
      UD $.
  $}

  ${
    $d x ph $.
    iotabidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building deduction rule for iota.  (Contributed by NM,
       20-Aug-2011.) $)
    iotabidv $p |- ( ph -> ( iota x ps ) = ( iota x ch ) ) $=
      ( wb wal cio wceq alrimiv iotabi syl ) ABCFZDGBDHCDHIAMDEJBCDKL $.
  $}

  ${
    iotabii.1 $e |- ( ph <-> ps ) $.
    $( Formula-building deduction rule for iota.  (Contributed by Mario
       Carneiro, 2-Oct-2015.) $)
    iotabii $p |- ( iota x ph ) = ( iota x ps ) $=
      ( wb cio wceq iotabi mpg ) ABEACFBCFGCABCHDI $.
  $}

  $( Membership law for descriptions.

     This can useful for expanding an unbounded iota-based definition (see
     ~ df-iota ).  If you have a bounded iota-based definition, ~ riotacl2 may
     be useful.

     (Contributed by Andrew Salmon, 1-Aug-2011.) $)
  iotacl $p |- ( E! x ph -> ( iota x ph ) e. { x | ph } ) $=
    ( weu cio wsbc cab wcel iota4 df-sbc sylib ) ABCABABDZEKABFGABHABKIJ $.

  ${
    $d x y $.  $d y B $.  $d y ps $.
    iota2df.1 $e |- ( ph -> B e. V ) $.
    iota2df.2 $e |- ( ph -> E! x ps ) $.
    iota2df.3 $e |- ( ( ph /\ x = B ) -> ( ps <-> ch ) ) $.
    ${
      iota2df.4 $e |- F/ x ph $.
      iota2df.5 $e |- ( ph -> F/ x ch ) $.
      iota2df.6 $e |- ( ph -> F/_ x B ) $.
      $( A condition that allows us to represent ""the unique element such that
         ` ph ` "" with a class expression ` A ` .  (Contributed by NM,
         30-Dec-2014.) $)
      iota2df $p |- ( ph -> ( ch <-> ( iota x ps ) = B ) ) $=
        ( cio cv wceq wb wa simpr eqeq2d bibi12d weu iota1 syl wnfc nfiota1 a1i
        nfeqd nfbid vtocldf ) ABBDMZDNZOZPZCUJEOZPDEFGAUKEOZQZBCULUNIUPUKEUJAUO
        RSTABDUAUMHBDUBUCJLACUNDKADUJEDUJUDABDUEUFLUGUHUI $.
    $}

    $d x B $.  $d x ph $.  $d x ch $.
    $( A condition that allows us to represent ""the unique element such that
       ` ph ` "" with a class expression ` A ` .  (Contributed by NM,
       30-Dec-2014.) $)
    iota2d $p |- ( ph -> ( ch <-> ( iota x ps ) = B ) ) $=
      ( nfv nfvd nfcvd iota2df ) ABCDEFGHIADJACDKADELM $.
  $}

  ${
    $d A x $.  $d ps x $.
    iota2.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( The unique element such that ` ph ` .  (Contributed by Jeff Madsen,
       1-Jun-2011.)  (Revised by Mario Carneiro, 23-Dec-2016.) $)
    iota2 $p |- ( ( A e. B /\ E! x ph ) -> ( ps <-> ( iota x ph ) = A ) ) $=
      ( wcel cvv weu cio wceq wb elex wa simpl simpr cv adantl nfv nfeu1 nfcvd
      nfan nfvd iota2df sylan ) DEGDHGZACIZBACJDKLDEMUFUGNZABCDHUFUGOUFUGPCQDKA
      BLUHFRUFUGCUFCSACTUBUHBCUCUHCDUAUDUE $.
  $}

  $( A class abstraction with a unique member can be expressed as a singleton.
     (Contributed by Mario Carneiro, 23-Dec-2016.) $)
  sniota $p |- ( E! x ph -> { x | ph } = { ( iota x ph ) } ) $=
    ( weu cab cio nfeu1 nfab1 nfiota1 nfsn cv wceq wcel iota1 eqcom syl6bb abid
    csn vex elsnc 3bitr4g eqrd ) ABCZBABDZABEZQZABFABGBUDABHIUBABJZUDKZUFUCLUFU
    ELUBAUDUFKUGABMUDUFNOABPUFUDBRSTUA $.

  ${
    $( The ` iota ` operation using the ` if ` operator.  (Contributed by Scott
       Fenton, 6-Oct-2017.) $)
    dfiota4 $p |- ( iota x ph ) = if ( E! x ph , U. { x | ph } , (/) ) $=
      ( weu cio cab cuni cif wceq iotauni iftrue eqtr4d iotanul iffalse pm2.61i
      c0 wn ) ABCZABDZQABEFZOGZHQRSTABIQSOJKQPROTABLQSOMKN $.
  $}

  ${
    $d A y z $.  $d x y z $.  $d ph z $.
    $( Class substitution within a description binder.  (Contributed by Scott
       Fenton, 6-Oct-2017.)  (Revised by NM, 23-Aug-2018.) $)
    csbiota $p |- [_ A / x ]_ ( iota y ph ) = ( iota y [. A / x ]. ph ) $=
      ( vz cvv wcel cio csb wsbc wceq cv wsb csbeq1 dfsbcq2 iotabidv eqeq12d wn
      c0 con3i vex nfs1v nfiota weq sbequ12 csbief vtoclg csbprc wex sbcex euex
      weu nexdv iotanul 3syl eqtr4d pm2.61i ) DFGZBDACHZIZABDJZCHZKZBELZUSIZABE
      MZCHZKVCEDFVDDKZVEUTVGVBBVDDUSNVHVFVACABEDOPQBVDUSVGEUAVFBCABEUBUCBEUDAVF
      CABEUEPUFUGURRZUTSVBBDUSUHVIVACUIZRVACULZRVBSKVIVACVAURABDUJTUMVKVJVACUKT
      VACUNUOUPUQ $.

    $( Class substitution within a description binder.  (Contributed by Scott
       Fenton, 6-Oct-2017.)  Obsolete as of 23-Aug-2018.  Use ~ csbiota
       instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    csbiotagOLD $p |- ( A e. V ->
        [_ A / x ]_ ( iota y ph ) = ( iota y [. A / x ]. ph ) ) $=
      ( vz cv cio csb wsb wceq csbeq1 dfsbcq2 iotabidv eqeq12d vex nfs1v nfiota
      wsbc weq sbequ12 csbief vtoclg ) BFGZACHZIZABFJZCHZKBDUEIZABDSZCHZKFDEUDD
      KZUFUIUHUKBUDDUELULUGUJCABFDMNOBUDUEUHFPUGBCABFQRBFTAUGCABFUANUBUC $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                                 Functions
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Introduce new constant symbols. $)
  $c : $. $( Colon $)
  $c Fun $. $( Function predicate $)
  $c Fn $. $( Function connective $)
  $c --> $. $( Domain-codomain connective $)
  $c -1-1-> $. $( 'One-to-one' domain-codomain connective $)
  $c -onto-> $. $( 'Onto' domain-codomain connective $)
  $c -1-1-onto-> $. $( 'One-to-one' and 'onto' domain-codomain connective $)
  $c ` $. $( Left apostrophe (function value symbol) $)
  $c Isom $. $( Isomorphism $)

  $( Extend the definition of a wff to include the function predicate.  (Read:
     ` A ` is a function.) $)
  wfun $a wff Fun A $.

  $( Extend the definition of a wff to include the function predicate with a
     domain.  (Read: ` A ` is a function on ` B ` .) $)
  wfn $a wff A Fn B $.

  $( Extend the definition of a wff to include the function predicate with
     domain and codomain.  (Read: ` F ` maps ` A ` into ` B ` .) $)
  wf $a wff F : A --> B $.

  $( Extend the definition of a wff to include one-to-one functions.  (Read:
     ` F ` maps ` A ` one-to-one into ` B ` .)  The notation (""1-1"" above the
     arrow) is from Definition 6.15(5) of [TakeutiZaring] p. 27. $)
  wf1 $a wff F : A -1-1-> B $.

  $( Extend the definition of a wff to include onto functions.  (Read: ` F `
     maps ` A ` onto ` B ` .)  The notation (""onto"" below the arrow) is from
     Definition 6.15(4) of [TakeutiZaring] p. 27. $)
  wfo $a wff F : A -onto-> B $.

  $( Extend the definition of a wff to include one-to-one onto functions.
     (Read: ` F ` maps ` A ` one-to-one onto ` B ` .)  The notation (""1-1""
     above the arrow and ""onto"" below the arrow) is from Definition 6.15(6) of
     [TakeutiZaring] p. 27. $)
  wf1o $a wff F : A -1-1-onto-> B $.

  $( Extend the definition of a class to include the value of a function.
     (Read:  The value of ` F ` at ` A ` , or "" ` F ` of ` A ` ."") $)
  cfv $a class ( F ` A ) $.

  $( Extend the definition of a wff to include the isomorphism property.
     (Read: ` H ` is an ` R ` , ` S ` isomorphism of ` A ` onto ` B ` .) $)
  wiso $a wff H Isom R , S ( A , B ) $.

  ${
    $d x A $.  $d x F $.
    $( Define predicate that determines if some class ` A ` is a function.
       Definition 10.1 of [Quine] p. 65.  For example, the expression
       ` Fun cos ` is true once we define cosine ( ~ df-cos ).  This is not the
       same as defining a specific function's mapping, which is typically done
       using the format of ~ cmpt with the maps-to notation (see ~ df-mpt and
       ~ df-mpt2 ).  Contrast this predicate with the predicates to determine
       if some class is a function with a given domain ( ~ df-fn ), a function
       with a given domain and codomain ( ~ df-f ), a one-to-one function
       ( ~ df-f1 ), an onto function ( ~ df-fo ), or a one-to-one onto function
       ( ~ df-f1o ).  For alternate definitions, see ~ dffun2 , ~ dffun3 ,
       ~ dffun4 , ~ dffun5 , ~ dffun6 , ~ dffun7 , ~ dffun8 , and ~ dffun9 .
       (Contributed by NM, 1-Aug-1994.) $)
    df-fun $a |- ( Fun A <-> ( Rel A /\ ( A o. `' A ) C_ _I ) ) $.

    $( Define a function with domain.  Definition 6.15(1) of [TakeutiZaring]
       p. 27.  For alternate definitions, see ~ dffn2 , ~ dffn3 , ~ dffn4 , and
       ~ dffn5 .  (Contributed by NM, 1-Aug-1994.) $)
    df-fn $a |- ( A Fn B <-> ( Fun A /\ dom A = B ) ) $.

    $( Define a function (mapping) with domain and codomain.  Definition
       6.15(3) of [TakeutiZaring] p. 27.  For alternate definitions, see
       ~ dff2 , ~ dff3 , and ~ dff4 .  (Contributed by NM, 1-Aug-1994.) $)
    df-f $a |- ( F : A --> B <-> ( F Fn A /\ ran F C_ B ) ) $.

    $( Define a one-to-one function.  For equivalent definitions see ~ dff12
       and ~ dff13 .  Compare Definition 6.15(5) of [TakeutiZaring] p. 27.  We
       use their notation (""1-1"" above the arrow).  (Contributed by NM,
       1-Aug-1994.) $)
    df-f1 $a |- ( F : A -1-1-> B <-> ( F : A --> B /\ Fun `' F ) ) $.

    $( Define an onto function.  Definition 6.15(4) of [TakeutiZaring] p. 27.
       We use their notation (""onto"" under the arrow).  For alternate
       definitions, see ~ dffo2 , ~ dffo3 , ~ dffo4 , and ~ dffo5 .
       (Contributed by NM, 1-Aug-1994.) $)
    df-fo $a |- ( F : A -onto-> B <-> ( F Fn A /\ ran F = B ) ) $.

    $( Define a one-to-one onto function.  For equivalent definitions see
       ~ dff1o2 , ~ dff1o3 , ~ dff1o4 , and ~ dff1o5 .  Compare Definition
       6.15(6) of [TakeutiZaring] p. 27.  We use their notation (""1-1"" above
       the arrow and ""onto"" below the arrow).  (Contributed by NM,
       1-Aug-1994.) $)
    df-f1o $a |- ( F : A -1-1-onto-> B <->
                ( F : A -1-1-> B /\ F : A -onto-> B ) ) $.

    $( Define the value of a function, ` ( F `` A ) ` , also known as function
       application.  For example, ` ( cos `` 0 ) = 1 ` (we prove this in ~ cos0
       after we define cosine in ~ df-cos ).  Typically, function ` F ` is
       defined using maps-to notation (see ~ df-mpt and ~ df-mpt2 ), but this
       is not required.  For example,
       ` F = { <. 2 , 6 >. , <. 3 , 9 >. } -> ( F `` 3 ) = 9 ` ( ~ ex-fv ).
       Note that ~ df-ov will define two-argument functions using ordered pairs
       as ` ( A F B ) = ( F `` <. A , B >. ) ` .  This particular definition is
       quite convenient: it can be applied to any class and evaluates to the
       empty set when it is not meaningful (as shown by ~ ndmfv and ~ fvprc ).
       The left apostrophe notation originated with Peano and was adopted in
       Definition *30.01 of [WhiteheadRussell] p. 235, Definition 10.11 of
       [Quine] p. 68, and Definition 6.11 of [TakeutiZaring] p. 26.  It means
       the same thing as the more familiar ` F ( A ) ` notation for a
       function's value at ` A ` , i.e.  "" ` F ` of ` A ` ,"" but without
       context-dependent notational ambiguity.  Alternate definitions are
       ~ dffv2 , ~ dffv3 , ~ fv2 , and ~ fv3 (the latter two previously
       required ` A ` to be a set.)  Restricted equivalents that require ` F `
       to be a function are shown in ~ funfv and ~ funfv2 .  For the familiar
       definition of function value in terms of ordered pair membership, see
       ~ funopfvb .  (Contributed by NM, 1-Aug-1994.)  Revised to use
       ` iota ` .  Original version is now theorem ~ dffv4 .  (Revised by Scott
       Fenton, 6-Oct-2017.) $)
    df-fv $a |- ( F ` A ) = ( iota x A F x ) $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.  $d x y S $.  $d x y H $.
    $( Define the isomorphism predicate.  We read this as "" ` H ` is an ` R ` ,
       ` S ` isomorphism of ` A ` onto ` B ` .""  Normally, ` R ` and ` S ` are
       ordering relations on ` A ` and ` B ` respectively.  Definition 6.28 of
       [TakeutiZaring] p. 32, whose notation is the same as ours except that
       ` R ` and ` S ` are subscripts.  (Contributed by NM, 4-Mar-1997.) $)
    df-isom $a |- ( H Isom R , S ( A , B ) <-> ( H : A -1-1-onto-> B /\
                 A. x e. A A. y e. A ( x R y <-> ( H ` x ) S ( H ` y ) ) ) ) $.
  $}

  ${
    $d x y z A $.
    $( Alternate definition of a function.  (Contributed by NM,
       29-Dec-1996.) $)
    dffun2 $p |- ( Fun A <-> ( Rel A /\
                 A. x A. y A. z ( ( x A y /\ x A z ) -> y = z ) ) ) $=
      ( wfun wrel cid wss wa cv wbr wal wex copab 3bitri vex albii alcom bitri
      wi ccnv ccom df-fun df-id sseq2i df-co sseq1i ssopab2b brcnv anbi1i exbii
      weq imbi1i 19.23v bitr4i anbi2i ) DEDFZDDUAZUBZGHZIUQAJZBJZDKZVACJDKZIZBC
      ULZTZCLZBLALZIDUCUTVIUQUTVBVAURKZVDIZAMZVFTZCLZBLZVHALZBLVIUTUSVFBCNZHVLB
      CNZVQHVOGVQUSBCUDUEUSVRVQBCADURUFUGVLVFBCUHOVNVPBVNVGALZCLVPVMVSCVMVEAMZV
      FTVSVLVTVFVKVEAVJVCVDVBVADBPAPUIUJUKUMVEVFAUNUOQVGCARSQVHBAROUPS $.

    $( Alternate definition of function.  (Contributed by NM, 29-Dec-1996.) $)
    dffun3 $p |- ( Fun A <-> ( Rel A /\
                 A. x E. z A. y ( x A y -> y = z ) ) ) $=
      ( wfun wrel cv wbr wa weq wal wex dffun2 wmo breq2 mo4 mo2v bitr3i albii
      wi anbi2i bitri ) DEDFZAGZBGZDHZUDCGZDHZIBCJZTCKBKZAKZIUCUFUITBKCLZAKZIAB
      CDMUKUMUCUJULAUJUFBNULUFUHBCUEUGUDDOPUFBCQRSUAUB $.

    $( Alternate definition of a function.  Definition 6.4(4) of
       [TakeutiZaring] p. 24.  (Contributed by NM, 29-Dec-1996.) $)
    dffun4 $p |- ( Fun A <-> ( Rel A /\
                 A. x A. y A. z ( ( <. x , y >. e. A /\ <. x , z >. e. A )
                 -> y = z ) ) ) $=
      ( wfun wrel cv wbr wa weq wal cop wcel dffun2 df-br anbi12i imbi1i 2albii
      wi albii anbi2i bitri ) DEDFZAGZBGZDHZUDCGZDHZIZBCJZSZCKZBKAKZIUCUDUELDMZ
      UDUGLDMZIZUJSZCKZBKAKZIABCDNUMUSUCULURABUKUQCUIUPUJUFUNUHUOUDUEDOUDUGDOPQ
      TRUAUB $.

    $( Alternate definition of function.  (Contributed by NM, 29-Dec-1996.) $)
    dffun5 $p |- ( Fun A <-> ( Rel A /\
                 A. x E. z A. y ( <. x , y >. e. A -> y = z ) ) ) $=
      ( wfun wrel cv wbr weq wi wal wex wa wcel dffun3 df-br imbi1i albii exbii
      cop anbi2i bitri ) DEDFZAGZBGZDHZBCIZJZBKZCLZAKZMUCUDUETDNZUGJZBKZCLZAKZM
      ABCDOUKUPUCUJUOAUIUNCUHUMBUFULUGUDUEDPQRSRUAUB $.
  $}

  ${
    $d x y w v u $.  $d A w v u $.
    dffun6f.1 $e |- F/_ x A $.
    dffun6f.2 $e |- F/_ y A $.
    $( Definition of function, using bound-variable hypotheses instead of
       distinct variable conditions.  (Contributed by NM, 9-Mar-1995.)
       (Revised by Mario Carneiro, 15-Oct-2016.) $)
    dffun6f $p |- ( Fun A <-> ( Rel A /\ A. x E* y x A y ) ) $=
      ( vw vv vu wfun wrel cv wbr weq wal wa wmo nfcv nfbr nfv albii wex dffun3
      wi breq2 cbvmo mo2v nfmo breq1 mobidv cbval 3bitr3ri anbi2i bitr4i ) CICJ
      ZFKZGKZCLZGHMUCGNHUAZFNZOUNAKZBKZCLZBPZANZOFGHCUBVDUSUNUQGPZFNUOVACLZBPZF
      NUSVDVEVGFUQVFGBBUOUPCBUOQEBUPQRVFGSUPVAUOCUDUETVEURFUQGHUFTVGVCFAVFABAUO
      VACAUOQDAVAQRUGVCFSFAMVFVBBUOUTVACUHUIUJUKULUM $.
  $}

  ${
    $d x y A $.  $d x y z F $.
    $( Alternate definition of a function using ""at most one"" notation.
       (Contributed by NM, 9-Mar-1995.) $)
    dffun6 $p |- ( Fun F <-> ( Rel F /\ A. x E* y x F y ) ) $=
      ( nfcv dffun6f ) ABCACDBCDE $.

    $( A function has at most one value for each argument.  (Contributed by NM,
       24-May-1998.) $)
    funmo $p |- ( Fun F -> E* y A F y ) $=
      ( vx wfun cv wbr cvv wcel wa wi wal wmo wrel dffun6 simplbi brrelex ancrd
      ex syl alrimiv wceq breq1 mobidv imbi2d simprbi 19.21bi vtoclg com12 moim
      moanimv sylibr sylc ) CEZBAFZCGZBHIZUPJZKZALURAMZUPAMZUNUSAUNUPUQUNCNZUPU
      QKUNVBDFZUOCGZAMZDLZDACOZPVBUPUQBUOCQSTRUAUNUQVAKUTUQUNVAUNVEKUNVAKDBHVCB
      UBZVEVAUNVHVDUPAVCBUOCUCUDUEUNVEDUNVBVFVGUFUGUHUIUQUPAUKULUPURAUJUM $.
  $}

  $( A function is a relation.  (Contributed by NM, 1-Aug-1994.) $)
  funrel $p |- ( Fun A -> Rel A ) $=
    ( wfun wrel ccnv ccom cid wss df-fun simplbi ) ABACAADEFGAHI $.

  ${
    $d x y z A $.  $d x y z B $.
    $( Subclass theorem for function predicate.  (Contributed by NM,
       16-Aug-1994.)  (Proof shortened by Mario Carneiro, 24-Jun-2014.) $)
    funss $p |- ( A C_ B -> ( Fun B -> Fun A ) ) $=
      ( wss wrel ccnv ccom cid wa wfun relss wi coss1 cnvss coss2 sstrd anim12d
      syl sstr2 df-fun 3imtr4g ) ABCZBDZBBEZFZGCZHADZAAEZFZGCZHBIAIUAUBUFUEUIAB
      JUAUHUDCUEUIKUAUHBUGFZUDABUGLUAUGUCCUJUDCABMUGUCBNQOUHUDGRQPBSAST $.
  $}

  $( Equality theorem for function predicate.  (Contributed by NM,
     16-Aug-1994.) $)
  funeq $p |- ( A = B -> ( Fun A <-> Fun B ) ) $=
    ( wceq wfun wss wi eqimss2 funss syl eqimss impbid ) ABCZADZBDZLBAEMNFBAGBA
    HILABENMFABJABHIK $.

  ${
    funeqi.1 $e |- A = B $.
    $( Equality inference for the function predicate.  (Contributed by Jonathan
       Ben-Naim, 3-Jun-2011.) $)
    funeqi $p |- ( Fun A <-> Fun B ) $=
      ( wceq wfun wb funeq ax-mp ) ABDAEBEFCABGH $.
  $}

  ${
    funeqd.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for the function predicate.  (Contributed by NM,
       23-Feb-2013.) $)
    funeqd $p |- ( ph -> ( Fun A <-> Fun B ) ) $=
      ( wceq wfun wb funeq syl ) ABCEBFCFGDBCHI $.
  $}

  ${
    nffun.1 $e |- F/_ x F $.
    $( Bound-variable hypothesis builder for a function.  (Contributed by NM,
       30-Jan-2004.) $)
    nffun $p |- F/ x Fun F $=
      ( wfun wrel ccnv ccom cid wa df-fun nfrel nfcnv nfco nfcv nfss nfan nfxfr
      wss ) BDBEZBBFZGZHRZIABJSUBAABCKAUAHABTCABCLMAHNOPQ $.
  $}

  ${
    $d A w y z $.  $d F w y z $.  $d V w y z $.  $d x w y z $.
    $( Distribute proper substitution through the function predicate.
       (Contributed by Alexander van der Vekens, 23-Jul-2017.) $)
    sbcfung $p |- ( A e. V -> ( [. A / x ]. Fun F <-> Fun [_ A / x ]_ F ) ) $=
      ( vw vz vy wrel cv wbr wi wal wex wa wsbc csb wfun sbcal csbconstg syl5bb
      wcel weq sbcan sbcrel sbcex2 sbcimg sbcbr123 breq12d imbi12d bitrd albidv
      sbcg exbidv anbi12d dffun3 sbcbii 3bitr4g ) BDUAZCHZEIZFIZCJZFGUBZKZFLZGM
      ZELZNZABOZABCPZHZUTVAVJJZVCKZFLZGMZELZNZCQZABOVJQVIUSABOZVGABOZNURVQUSVGA
      BUCURVSVKVTVPABCDUDVTVFABOZELURVPVFEABRURWAVOEWAVEABOZGMURVOVEGABUEURWBVN
      GWBVDABOZFLURVNVDFABRURWCVMFURWCVBABOZVCABOZKVMVBVCABDUFURWDVLWEVCWDABUTP
      ZABVAPZVJJURVLABUTVACUGURWFUTWGVAVJABUTDSABVADSUHTVCABDULUIUJUKTUMTUKTUNT
      VRVHABEFGCUOUPEFGVJUOUQ $.
  $}

  ${
    $d y A $.  $d y F $.
    $( There is exactly one value of a function.  (Contributed by NM,
       22-Apr-2004.)  (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
    funeu $p |- ( ( Fun F /\ A F B ) -> E! y A F y ) $=
      ( wfun wbr wa cv wex weu cdm wcel wrel funrel releldm sylan eldmg ibi syl
      wmo wi funmo adantr df-mo sylib mpd ) DEZBCDFZGZBAHDFZAIZUJAJZUIBDKZLZUKU
      GDMUHUNDNBCDOPUNUKABDUMQRSUIUJATZUKULUAUGUOUHABDUBUCUJAUDUEUF $.

    $( There is exactly one value of a function.  (Contributed by NM,
       3-Aug-1994.) $)
    funeu2 $p |- ( ( Fun F /\ <. A , B >. e. F ) -> E! y <. A , y >. e. F ) $=
      ( cop wcel wfun wbr cv weu df-br wa funeu eubii sylib sylan2br ) BCEDFDGZ
      BCDHZBAIZEDFZAJZBCDKQRLBSDHZAJUAABCDMUBTABSDKNOP $.
  $}

  ${
    $d x y A $.
    $( Alternate definition of a function.  One possibility for the definition
       of a function in [Enderton] p. 42.  (Enderton's definition is ambiguous
       because ""there is only one"" could mean either ""there is at most one"" or
       ""there is exactly one.""  However, ~ dffun8 shows that it doesn't matter
       which meaning we pick.)  (Contributed by NM, 4-Nov-2002.) $)
    dffun7 $p |- ( Fun A <-> ( Rel A /\ A. x e. dom A E* y x A y ) ) $=
      ( wfun wrel cv wbr wmo wal wa cdm wral dffun6 wcel wi wex vex eldm bitr4i
      moabs imbi1i albii df-ral anbi2i bitri ) CDCEZAFZBFCGZBHZAIZJUFUIACKZLZJA
      BCMUJULUFUJUGUKNZUIOZAIULUIUNAUIUHBPZUIOUNUHBTUMUOUIBUGCAQRUASUBUIAUKUCSU
      DUE $.

    $( Alternate definition of a function.  One possibility for the definition
       of a function in [Enderton] p. 42.  Compare ~ dffun7 .  (Contributed by
       NM, 4-Nov-2002.)  (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
    dffun8 $p |- ( Fun A <-> ( Rel A /\ A. x e. dom A E! y x A y ) ) $=
      ( wfun wrel cv wbr wmo cdm wral wa weu dffun7 wex wi wcel df-mo vex eldm
      wb pm5.5 sylbi syl5bb ralbiia anbi2i bitri ) CDCEZAFZBFCGZBHZACIZJZKUGUIB
      LZAUKJZKABCMULUNUGUJUMAUKUJUIBNZUMOZUHUKPZUMUIBQUQUOUPUMTBUHCARSUOUMUAUBU
      CUDUEUF $.

    $( Alternate definition of a function.  (Contributed by NM, 28-Mar-2007.)
       (Revised by NM, 16-Jun-2017.) $)
    dffun9 $p |- ( Fun A <->
                 ( Rel A /\ A. x e. dom A E* y e. ran A x A y ) ) $=
      ( wfun wrel cv wbr wmo cdm wral wa wrmo dffun7 wcel brelrn pm4.71ri mobii
      crn vex df-rmo bitr4i ralbii anbi2i bitri ) CDCEZAFZBFZCGZBHZACIZJZKUEUHB
      CRZLZAUJJZKABCMUKUNUEUIUMAUJUIUGULNZUHKZBHUMUHUPBUHUOUFUGCASBSOPQUHBULTUA
      UBUCUD $.
  $}

  $( An equivalence for the function predicate.  (Contributed by NM,
     13-Aug-2004.) $)
  funfn $p |- ( Fun A <-> A Fn dom A ) $=
    ( wfun cdm wceq wa wfn eqid biantru df-fn bitr4i ) ABZKACZLDZEALFMKLGHALIJ
    $.

  $( The identity relation is a function.  Part of Theorem 10.4 of [Quine]
     p. 65.  (Contributed by NM, 30-Apr-1998.) $)
  funi $p |- Fun _I $=
    ( cid wfun wrel ccnv ccom wss reli wceq relcnv coi2 ax-mp cnvi eqtri df-fun
    eqimssi mpbir2an ) ABACAADZEZAFGRARQAQCRQHAIQJKLMOANP $.

  $( The universe is not a function.  (Contributed by Raph Levien,
     27-Jan-2004.) $)
  nfunv $p |- -. Fun _V $=
    ( cvv wfun wrel cxp wcel 0nelxp 0ex wss df-rel biimpi sseld mpi mto funrel
    c0 ) ABACZPOAADZEZAAFPOAERGPAQOPAQHAIJKLMANM $.

  ${
    $d t u v w x y z A $.  $d t u v w x y z B $.
    $( A Kuratowski ordered pair is a function only if its components are
       equal.  (Contributed by NM, 5-Jun-2008.)  (Revised by Mario Carneiro,
       26-Apr-2015.) $)
    funopg $p |- ( ( A e. V /\ B e. W /\ Fun <. A , B >. ) -> A = B ) $=
      ( vu vt vx vy vz vw vv wcel cop wceq cv weq wi cpr vex cvv funeqd imbi12d
      wfun opeq1 eqeq1 opeq2 eqeq2 csn wa wex wrel funrel relop sylib opth opid
      preq1i dfop preq2i snex zfpair2 3eqtr4ri eqeq2i bitr3i wal dffun4 simprbi
      prid1 eleq2 mpbiri prid2 jca w3a opeq12 3adant3 eleq1d 3adant2 anbi12d wb
      opex eqeq12 3adant1 spc3gv mp3an syl2im syl5bi dfsn2 preq2 syl5req eqeq2d
      eqtr3 expcom syl6bi com13 imp sylcom exlimdvv mpd vtocl2g 3impia ) ACLBDL
      ABMZUCZABNZEOZFOZMZUCZEFPZQAXEMZUCZAXENZQXBXCQEFABCDXDANZXGXJXHXKXLXFXIXD
      AXEUDUAXDAXEUEUBXEBNZXJXBXKXCXMXIXAXEBAUFUAXEBAUGUBXGXDGOZUHZNZXEXNHOZRZN
      ZUIZHUJGUJZXHXGXFUKZYAXFULGHXDXEESZFSZUMUNXGXTXHGHXGXTGHPZXHXTXFXNXNMZXNX
      QMZRZNZXGYEXTXFXOXRMZNYIXDXEXOXRYCYDUOYJYHXFYFXOXRRZRXOUHZYKRYHYJYFYLYKXN
      GSZUPUQYGYKYFXNXQYMHSZURUSXOXRXNUTGHVAURVBVCVDXGIOZJOZMZXFLZYOKOZMZXFLZUI
      ZJKPZQZKVEJVEIVEZYIYFXFLZYGXFLZUIZYEXGYBUUEIJKXFVFVGYIUUFUUGYIUUFYFYHLYFY
      GXNXNVTVHXFYHYFVIVJYIUUGYGYHLYFYGXNXQVTVKXFYHYGVIVJVLXNTLZUUIXQTLUUEUUHYE
      QZQYMYMYNUUDUUJIJKXNXNXQTTTIGPZJGPZKHPZVMZUUBUUHUUCYEUUNYRUUFUUAUUGUUNYQY
      FXFUUKUULYQYFNUUMYOYPXNXNVNVOVPUUNYTYGXFUUKUUMYTYGNUULYOYSXNXQVNVQVPVRUUL
      UUMUUCYEVSUUKYPXNYSXQWAWBUBWCWDWEWFXPXSYEXHQYEXSXPXHYEXSXEXONZXPXHQYEXRXO
      XEYEXOXNXNRXRXNWGXNXQXNWHWIWJXPUUOXHXDXEXOWKWLWMWNWOWPWQWRWSWT $.
  $}

  ${
    $d x y z $.  $d z ph $.
    $( A class of ordered pairs is a function when there is at most one second
       member for each pair.  (Contributed by NM, 16-May-1995.) $)
    funopab $p |- ( Fun { <. x , y >. | ph } <-> A. x E* y ph ) $=
      ( copab wfun wbr wmo wal wrel relopab nfopab1 nfopab2 dffun6f mpbiran cop
      cv wcel df-br opabid bitri mobii albii ) ABCDZEZBPZCPZUCFZCGZBHZACGZBHUDU
      CIUIABCJBCUCABCKABCLMNUHUJBUGACUGUEUFOUCQAUEUFUCRABCSTUAUBT $.
  $}

  ${
    $d x y $.  $d y A $.
    $( A class of ordered pairs of values is a function.  (Contributed by NM,
       14-Nov-1995.) $)
    funopabeq $p |- Fun { <. x , y >. | y = A } $=
      ( cv wceq copab wfun wmo funopab moeq mpgbir ) BDCEZABFGLBHALABIBCJK $.

    $( A class of ordered pairs of values in the form used by ~ df-mpt is a
       function.  (Contributed by NM, 17-Feb-2013.) $)
    funopab4 $p |- Fun { <. x , y >. | ( ph /\ y = A ) } $=
      ( cv wceq wa copab wss wfun simpr ssopab2i funopabeq funss mp2 ) ACEDFZGZ
      BCHZPBCHZISJRJQPBCAPKLBCDMRSNO $.
  $}

  ${
    $d A y $.  $d B y $.  $d x y $.
    $( A function in maps-to notation is a function.  (Contributed by Mario
       Carneiro, 13-Jan-2013.) $)
    funmpt $p |- Fun ( x e. A |-> B ) $=
      ( vy cmpt wfun cv wcel wceq wa copab funopab4 df-mpt funeqi mpbir ) ABCEZ
      FAGBHZDGCIJADKZFQADCLPRADBCMNO $.
  $}

  ${
    funmpt2.1 $e |- F = ( x e. A |-> B ) $.
    $( Functionality of a class given by a ""maps to"" notation.  (Contributed by
       FL, 17-Feb-2008.)  (Revised by Mario Carneiro, 31-May-2014.) $)
    funmpt2 $p |- Fun F $=
      ( wfun cmpt funmpt funeqi mpbir ) DFABCGZFABCHDKEIJ $.
  $}

  ${
    $d x y z F $.  $d x y z G $.
    $( The composition of two functions is a function.  Exercise 29 of
       [TakeutiZaring] p. 25.  (Contributed by NM, 26-Jan-1997.)  (Proof
       shortened by Andrew Salmon, 17-Sep-2011.) $)
    funco $p |- ( ( Fun F /\ Fun G ) -> Fun ( F o. G ) ) $=
      ( vx vz vy wfun wa cv wbr wex copab wmo wal funmo alrimiv moexexv syl2anr
      ccom funopab sylibr df-co funeqi ) AFZBFZGZCHZDHZBIZUGEHAIZGDJZCEKZFZABRZ
      FUEUJELZCMULUEUNCUDUHDLUIELZDMUNUCDUFBNUCUODEUGANOUHUIDEPQOUJCESTUMUKCEDA
      BUAUBT $.
  $}

  $( A restriction of a function is a function.  Compare Exercise 18 of
     [TakeutiZaring] p. 25.  (Contributed by NM, 16-Aug-1994.) $)
  funres $p |- ( Fun F -> Fun ( F |` A ) ) $=
    ( cres wss wfun wi resss funss ax-mp ) BACZBDBEJEFBAGJBHI $.

  ${
    $d x y F $.  $d x y G $.  $d x y A $.
    $( The restriction of a function to the domain of a subclass equals the
       subclass.  (Contributed by NM, 15-Aug-1994.) $)
    funssres $p |- ( ( Fun F /\ G C_ F ) -> ( F |` dom G ) = G ) $=
      ( vx vy wfun wss wa cdm cres wceq cv cop wcel wb wal wi vex wex imp wrel
      ssel opeldm a1i adantl weu funeu2 eldm2 ancrd eximdv syl5bi eupick syl2an
      jcad exp43 com23 com34 pm2.43d impd impbid opelres syl6rbbr relres funrel
      alrimivv relss mpan9 eqrel sylancr mpbird ) AEZBAFZGZABHZIZBJZCKZDKZLZVNM
      ZVRBMZNZDOCOZVLWACDVLVTVRAMZVPVMMZGZVSVLVTWEVKVTWEPVJVKVTWCWDBAVRUAZVTWDP
      VKVPVQBCQZDQZUBUCUMUDVLWCWDVTVLWCWDVTPVLWCWDWCVTVJVKWCWDWCVTPZPZPVJWCVKWJ
      VJWCVKWDWIVJWCGWCDUEWCVTGZDRZWIVKWDGDVPVQAUFVKWDWLWDVTDRVKWLDVPBWGUGVKVTW
      KDVKVTWCWFUHUIUJSWCVTDUKULUNUOSUPUQURUSVPVQAVMWHUTVAVDVLVNTBTZVOWBNAVMVBV
      JATVKWMAVCBAVEVFCDVNBVGVHVI $.
  $}

  $( Equality of restrictions of a function and a subclass.  (Contributed by
     NM, 16-Aug-1994.) $)
  fun2ssres $p |- ( ( Fun F /\ G C_ F /\ A C_ dom G ) ->
                  ( F |` A ) = ( G |` A ) ) $=
    ( wfun wss cdm cres wceq wa resabs1 eqcomd funssres reseq1d sylan9eqr 3impa
    ) BDZCBEZACFZEZBAGZCAGZHSPQIZTBRGZAGZUASUDTBARJKUBUCCABCLMNO $.

  ${
    $d x y z F $.  $d x y z G $.
    $( The union of functions with disjoint domains is a function.  Theorem 4.6
       of [Monk1] p. 43.  (Contributed by NM, 12-Aug-1994.) $)
    funun $p |- ( ( ( Fun F /\ Fun G ) /\ ( dom F i^i dom G ) = (/) ) ->
                Fun ( F u. G ) ) $=
      ( vx vy vz wfun wa cdm wrel cv wi wal anim12i wo wn 19.21bi opeldm dffun4
      wcel vex cin c0 wceq cun cop funrel relun sylibr elun anbi12i anddi bitri
      adantr disj1 biimpi imnan sylib nsyl orel2 syl con2d orel1 orim12d adantl
      syl5bi simprbi 19.21bbi jaao syld alrimiv alrimivv sylanbrc ) AFZBFZGZAHZ
      BHZUAUBUCZGZABUDZIZCJZDJZUEZVTSZWBEJZUEZVTSZGZWCWFUCZKZELZDLCLVTFVOWAVRVO
      AIZBIZGWAVMWMVNWNAUFBUFMABUGUHUMVSWLCDVSWKEVSWIWDASZWGASZGZWDBSZWGBSZGZNZ
      WJWIWQWOWSGZNZWRWPGZWTNZNZVSXAWIWOWRNZWPWSNZGXFWEXGWHXHWDABUIWGABUIUJWOWR
      WPWSUKULVRXFXAKVOVRXCWQXEWTVRXBOXCWQKVRWBVPSZWBVQSZGZXBVRXIXJOKZXKOVRXLCV
      RXLCLCVPVQUNUOPZXIXJUPUQWOXIWSXJWBWCACTZDTZQWBWFBXNETZQMURXBWQUSUTVRXDOXE
      WTKVRXJXIGZXDVRXJXIOKXQOVRXIXJXMVAXJXIUPUQWRXJWPXIWBWCBXNXOQWBWFAXNXPQMUR
      XDWTVBUTVCVDVEVOXAWJKVRVMWQWJVNWTVMWQWJKZDEVMXRELDLZCVMWMXSCLCDEARVFPVGVN
      WTWJKZDEVNXTELDLZCVNWNYACLCDEBRVFPVGVHUMVIVJVKCDEVTRVL $.
  $}

  ${
    $d x y $.  $d F y $.  $d G y $.
    $( If the union of classes is a function, there is at most one element in
       relation to an arbitrary element regarding one of these classes.
       (Contributed by AV, 18-Jul-2019.) $)
    fununmo $p |- ( Fun ( F u. G ) -> E* y x F y ) $=
      ( cun wfun cv wbr wmo funmo wo orc brun sylibr moimi syl ) CDEZFAGZBGZQHZ
      BIRSCHZBIBRQJUATBUAUARSDHZKTUAUBLRSCDMNOP $.
  $}

  ${
    $d F x y $.  $d G x y $.
    $( If the union of classes is a function, the classes itselves are
       functions.  (Contributed by AV, 18-Jul-2019.) $)
    fununfun $p |- ( Fun ( F u. G ) -> ( Fun F /\ Fun G ) ) $=
      ( vx vy wrel wa cun funrel relun sylib cv wbr wmo fununmo alrimiv anim12i
      wfun wal dffun6 sylibr simpl simpr uncom funeqi sylbi jca mpancom ) AEZBE
      ZFZABGZQZAQZBQZFULUKEUJUKHABIJUJULFZUMUNUOUHCKZDKZALDMZCRZFUMUJUHULUSUHUI
      UAULURCCDABNOPCDASTUOUIUPUQBLDMZCRZFUNUJUIULVAUHUIUBULUTCULBAGZQUTUKVBABU
      CUDCDBANUEOPCDBSTUFUG $.
  $}

  ${
    $d x y A $.  $d x y B $.
    $( The converse singleton of an ordered pair is a function.  This is
       equivalent to ~ funsn via ~ cnvsn , but stating it this way allows us to
       skip the sethood assumptions on ` A ` and ` B ` .  (Contributed by NM,
       30-Apr-2015.) $)
    funcnvsn $p |- Fun `' { <. A , B >. } $=
      ( vx vy cop csn ccnv wfun wrel cv wbr wmo wal relcnv wceq moeq wcel brcnv
      vex df-br bitri elsni opth1 syl sylbi moimi ax-mp ax-gen dffun6 mpbir2an
      ) ABEZFZGZHUMICJZDJZUMKZDLZCMULNUQCUOAOZDLUQDAPUPURDUPUOUNEZULQZURUPUOUNU
      LKUTUNUOULCSZDSZRUOUNULTUAUTUSUKOURUSUKUBUOUNABVBVAUCUDUEUFUGUHCDUMUIUJ
      $.

    $( A singleton of an ordered pair is a function.  Theorem 10.5 of [Quine]
       p. 65.  (Contributed by NM, 28-Jun-2011.) $)
    funsng $p |- ( ( A e. V /\ B e. W ) -> Fun { <. A , B >. } ) $=
      ( wcel wa cop csn ccnv wfun funcnvsn wceq cnvsng ancoms funeqd mpbii ) AC
      EZBDEZFZBAGHIZJABGHZJBAKSTUARQTUALBADCMNOP $.

    $( Functionality and domain of the singleton of an ordered pair.
       (Contributed by Mario Carneiro, 30-Apr-2015.) $)
    fnsng $p |- ( ( A e. V /\ B e. W ) -> { <. A , B >. } Fn { A } ) $=
      ( wcel wa cop csn wfun cdm wceq wfn funsng dmsnopg adantl df-fn sylanbrc
      ) ACEZBDEZFABGHZITJAHZKZTUALABCDMSUBRABDNOTUAPQ $.

    funsn.1 $e |- A e. _V $.
    funsn.2 $e |- B e. _V $.
    $( A singleton of an ordered pair is a function.  Theorem 10.5 of [Quine]
       p. 65.  (Contributed by NM, 12-Aug-1994.) $)
    funsn $p |- Fun { <. A , B >. } $=
      ( cvv wcel cop csn wfun funsng mp2an ) AEFBEFABGHICDABEEJK $.
  $}

  $( A set of two pairs is a function if their first members are different.
     (Contributed by FL, 26-Jun-2011.) $)
  funprg $p |- ( ( ( A e. V /\ B e. W ) /\ ( C e. X /\ D e. Y ) /\ A =/= B )
     -> Fun { <. A , C >. , <. B , D >. } ) $=
    ( wcel wa cop csn wfun cdm cin c0 wceq funsng syl2anc dmsnopg simp1l simp2l
    wne w3a cun cpr simp1r simp2r ineq12d disjsn2 3ad2ant3 eqtrd funun syl21anc
    syl df-pr funeqi sylibr ) AEIZBFIZJZCGIZDHIZJZABUCZUDZACKZLZBDKZLZUEZMZVGVI
    UFZMVFVHMZVJMZVHNZVJNZOZPQVLVFUSVBVNUSUTVDVEUAVAVBVCVEUBZACEGRSVFUTVCVOUSUT
    VDVEUGVAVBVCVEUHZBDFHRSVFVRALZBLZOZPVFVPWAVQWBVFVBVPWAQVSACGTUOVFVCVQWBQVTB
    DHTUOUIVEVAWCPQVDABUJUKULVHVJUMUNVMVKVGVIUPUQUR $.

  $( A set of three pairs is a function if their first members are different.
     (Contributed by Alexander van der Vekens, 5-Dec-2017.) $)
  funtpg $p |- ( ( ( X e. U /\ Y e. V /\ Z e. W )
                   /\ ( A e. F /\ B e. G /\ C e. H )
                   /\ ( X =/= Y /\ X =/= Z /\ Y =/= Z ) )
                 -> Fun { <. X , A >. , <. Y , B >. , <. Z , C >. } ) $=
    ( wcel w3a wne cop wfun c0 wceq wn cpr csn cun ctp cdm cin wa 3simpa funprg
    syl3an simp13 simp23 funsng syl2anc 3ad2ant2 dmpropg syl dmsnopg ineq12d wo
    simp1 elpri w3o nne biimpri eqcoms 3mix2d 3mix3d 3ianor sylibr con2i disjsn
    jaoi 3ad2ant3 eqtrd funun syl21anc df-tp funeqi ) JDMZKHMZLIMZNZAEMZBFMZCGM
    ZNZJKOZJLOZKLOZNZNZJAPZKBPZUAZLCPZUBZUCZQZWMWNWPUDZQWLWOQZWQQZWOUEZWQUEZUFZ
    RSWSWCVTWAUGWGWDWEUGZWKWHXAVTWAWBUHWDWEWFUHZWHWIWJVAJKABDHEFUIUJWLWBWFXBVTW
    AWBWGWKUKWCWDWEWFWKULZLCIGUMUNWLXEJKUAZLUBZUFZRWLXCXIXDXJWLXFXCXISWGWCXFWKX
    GUOJAKBEFUPUQWLWFXDXJSXHLCGURUQUSWKWCXKRSZWGWKLXIMZTXLXMWKXMLJSZLKSZUTZWKTZ
    LJKVBXPWHTZWITZWJTZVCZXQXNYAXOXNXSXRXTXSJLXSJLSJLVDVEVFVGXOXTXRXSXTKLXTKLSK
    LVDVEVFVHVMWHWIWJVIVJUQVKXILVLVJVNVOWOWQVPVQWTWRWMWNWPVRVSVJ $.

  ${
    funpr.1 $e |- A e. _V $.
    funpr.2 $e |- B e. _V $.
    funpr.3 $e |- C e. _V $.
    funpr.4 $e |- D e. _V $.
    $( A function with a domain of two elements.  (Contributed by Jeff Madsen,
       20-Jun-2010.) $)
    funpr $p |- ( A =/= B -> Fun { <. A , C >. , <. B , D >. } ) $=
      ( cvv wcel wa wne cop cpr wfun pm3.2i funprg mp3an12 ) AIJZBIJZKCIJZDIJZK
      ABLACMBDMNOSTEFPUAUBGHPABCDIIIIQR $.
  $}

  ${
    funtp.1 $e |- A e. _V $.
    funtp.2 $e |- B e. _V $.
    funtp.3 $e |- C e. _V $.
    funtp.4 $e |- D e. _V $.
    funtp.5 $e |- E e. _V $.
    funtp.6 $e |- F e. _V $.
    $( A function with a domain of three elements.  (Contributed by NM,
       14-Sep-2011.) $)
    funtp $p |- ( ( A =/= B /\ A =/= C /\ B =/= C )
                    -> Fun { <. A , D >. , <. B , E >. , <. C , F >. } ) $=
      ( wne cop csn wfun wa cin c0 wceq w3a cpr cun ctp funpr funsn jctir df-pr
      cdm dmprop eqtri dmsnop ineq12i disjsn2 anim12i sylib syl5eq funun syl2an
      undisj1 3impb df-tp funeqi sylibr ) ABMZACMZBCMZUAADNZBENZUBZCFNZOZUCZPZV
      HVIVKUDZPVEVFVGVNVEVJPZVLPZQVJUIZVLUIZRZSTVNVFVGQZVEVPVQABDEGHJKUECFILUFU
      GWAVTAOZBOZUCZCOZRZSVRWDVSWEVRABUBWDADBEJKUJABUHUKCFLULUMWAWBWERSTZWCWERS
      TZQWFSTVFWGVGWHACUNBCUNUOWBWCWEUTUPUQVJVLURUSVAVOVMVHVIVKVBVCVD $.
  $}

  ${
    fnsn.1 $e |- A e. _V $.
    fnsn.2 $e |- B e. _V $.
    $( Functionality and domain of the singleton of an ordered pair.
       (Contributed by Jonathan Ben-Naim, 3-Jun-2011.) $)
    fnsn $p |- { <. A , B >. } Fn { A } $=
      ( cvv wcel cop csn wfn fnsng mp2an ) AEFBEFABGHAHICDABEEJK $.
  $}

  $( Function with a domain of two different values.  (Contributed by FL,
     26-Jun-2011.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
  fnprg $p |- ( ( ( A e. V /\ B e. W ) /\ ( C e. X /\ D e. Y ) /\ A =/= B )
         -> { <. A , C >. , <. B , D >. } Fn { A , B } ) $=
    ( wcel wa wne w3a cop cpr wfun cdm wceq wfn funprg dmpropg 3ad2ant2 df-fn
    sylanbrc ) AEIBFIJZCGIDHIJZABKZLACMBDMNZOUGPABNZQZUGUHRABCDEFGHSUEUDUIUFACB
    DGHTUAUGUHUBUC $.

  $( Function with a domain of three different values.  (Contributed by
     Alexander van der Vekens, 5-Dec-2017.) $)
  fntpg $p |- ( ( ( X e. U /\ Y e. V /\ Z e. W )
                  /\ ( A e. F /\ B e. G /\ C e. H )
                  /\ ( X =/= Y /\ X =/= Z /\ Y =/= Z ) )
           -> { <. X , A >. , <. Y , B >. , <. Z , C >. } Fn { X , Y , Z } ) $=
    ( wcel w3a wne cop cdm wceq csn cun ctp wfun wfn funtpg wa dmsnopg 3ad2ant1
    cpr 3ad2ant2 jca uneq12 syl df-pr syl6eqr dmeqi eqeq1i dmun sylibr 3ad2ant3
    bitri uneq12d df-tp eqtri 3eqtr4g df-fn sylanbrc ) JDMKHMLIMNZAEMZBFMZCGMZN
    ZJKOJLOKLONZNZJAPZKBPZLCPZUAZUBVQQZJKLUAZRVQVSUCABCDEFGHIJKLUDVMVNVOUHZQZVP
    SZQZTZJKUHZLSZTVRVSVMWAWEWCWFVMVNSZQZVOSZQZTZWERZWAWERZVMWKJSZKSZTZWEVMWHWN
    RZWJWORZUEZWKWPRVKVGWSVLVKWQWRVHVIWQVJJAEUFUGVIVHWRVJKBFUFUIUJUIWHWNWJWOUKU
    LJKUMUNWMWGWITZQZWERWLWAXAWEVTWTVNVOUMUOUPXAWKWEWGWIUQUPUTURVKVGWCWFRZVLVJV
    HXBVILCGUFUSUIVAVRVTWBTZQWDVQXCVNVOVPVBUOVTWBUQVCJKLVBVDVQVSVEVF $.

  ${
    fntp.1 $e |- A e. _V $.
    fntp.2 $e |- B e. _V $.
    fntp.3 $e |- C e. _V $.
    fntp.4 $e |- D e. _V $.
    fntp.5 $e |- E e. _V $.
    fntp.6 $e |- F e. _V $.
    $( A function with a domain of three elements.  (Contributed by NM,
       14-Sep-2011.)  (Revised by Mario Carneiro, 26-Apr-2015.) $)
    fntp $p |- ( ( A =/= B /\ A =/= C /\ B =/= C )
          -> { <. A , D >. , <. B , E >. , <. C , F >. } Fn { A , B , C } ) $=
      ( wne w3a cop ctp wfun cdm wceq wfn funtp dmtpop a1i df-fn sylanbrc ) ABM
      ACMBCMNZADOBEOCFOPZQUGRABCPZSZUGUHTABCDEFGHIJKLUAUIUFADBECFJKLUBUCUGUHUDU
      E $.
  $}

  $( The empty set is a function.  Theorem 10.3 of [Quine] p. 65.  (Contributed
     by NM, 7-Apr-1998.) $)
  fun0 $p |- Fun (/) $=
    ( c0 cop csn wss wfun 0ss 0ex funsn funss mp2 ) AAABCZDKEAEKFAAGGHAKIJ $.

  $( The double converse of a function is a function.  (Contributed by NM,
     21-Sep-2004.) $)
  funcnvcnv $p |- ( Fun A -> Fun `' `' A ) $=
    ( ccnv wss wfun wi cnvcnvss funss ax-mp ) ABBZACADIDEAFIAGH $.

  ${
    $d f g x y z w v A $.  $d x y B $.  $d x y R $.
    $( A simpler equivalence for single-rooted (see ~ funcnv ).  (Contributed
       by NM, 9-Aug-2004.) $)
    funcnv2 $p |- ( Fun `' A <-> A. y E* x x A y ) $=
      ( ccnv wfun cv wbr wmo wrel relcnv dffun6 mpbiran brcnv mobii albii bitri
      wal vex ) CDZEZBFZAFZSGZAHZBQZUBUACGZAHZBQTSIUECJBASKLUDUGBUCUFAUAUBCBRAR
      MNOP $.

    $( The converse of a class is a function iff the class is single-rooted,
       which means that for any ` y ` in the range of ` A ` there is at most
       one ` x ` such that ` x A y ` .  Definition of single-rooted in
       [Enderton] p. 43.  See ~ funcnv2 for a simpler version.  (Contributed by
       NM, 13-Aug-2004.) $)
    funcnv $p |- ( Fun `' A <-> A. y e. ran A E* x x A y ) $=
      ( cv wbr wmo wal crn wcel wi ccnv wfun wral wa vex pm4.71ri mobii moanimv
      brelrn bitri albii funcnv2 df-ral 3bitr4i ) ADZBDZCEZAFZBGUFCHZIZUHJZBGCK
      LUHBUIMUHUKBUHUJUGNZAFUKUGULAUGUJUEUFCAOBOSPQUJUGARTUAABCUBUHBUIUCUD $.

    $( A condition showing a class is single-rooted.  (See ~ funcnv ).
       (Contributed by NM, 26-May-2006.) $)
    funcnv3 $p |- ( Fun `' A <-> A. y e. ran A E! x e. dom A x A y ) $=
      ( cv wbr wmo crn wral wex ccnv wfun cdm wreu wcel dfrn2 abeq2i biimpi weu
      wa vex biantrurd ralbiia funcnv df-reu breldm pm4.71ri eu5 3bitr2i ralbii
      eubii 3bitr4i ) ADZBDZCEZAFZBCGZHUNAIZUOSZBUPHCJKUNACLZMZBUPHUOURBUPUMUPN
      ZUQUOVAUQUQBUPABCOPQUAUBABCUCUTURBUPUTULUSNZUNSZARUNARURUNAUSUDUNVCAUNVBU
      LUMCATBTUEUFUJUNAUGUHUIUK $.

    $( The double converse of a class is a function iff the class is
       single-valued.  Each side is equivalent to Definition 6.4(2) of
       [TakeutiZaring] p. 23, who use the notation ""Un(A)"" for single-valued.
       Note that ` A ` is not necessarily a function.  (Contributed by NM,
       13-Aug-2004.) $)
    fun2cnv $p |- ( Fun `' `' A <-> A. x E* y x A y ) $=
      ( ccnv wfun cv wbr wmo wal funcnv2 vex brcnv mobii albii bitri ) CDZDEBFZ
      AFZPGZBHZAIRQCGZBHZAIBAPJTUBASUABQRCBKAKLMNO $.

    $( A single-valued relation is a function.  (See ~ fun2cnv for
       ""single-valued."") Definition 6.4(4) of [TakeutiZaring] p. 24.
       (Contributed by NM, 17-Jan-2006.) $)
    svrelfun $p |- ( Fun A <-> ( Rel A /\ Fun `' `' A ) ) $=
      ( vx vy wfun wrel cv wbr wmo wal wa ccnv dffun6 fun2cnv anbi2i bitr4i ) A
      DAEZBFCFAGCHBIZJPAKKDZJBCALRQPBCAMNO $.

    $( Single-rootedness (see ~ funcnv ) of a class cut down by a Cartesian
       product.  (Contributed by NM, 5-Mar-2007.) $)
    fncnv $p |- ( `' ( R i^i ( A X. B ) ) Fn B <->
                  A. y e. B E! x e. A x R y ) $=
      ( cxp cin ccnv wfn wfun cdm wceq wa cv wbr wral wmo wcel wi 3bitr4i df-fn
      crn wreu df-rn eqeq1i anbi2i wrex wrmo rninxp anbi1i funcnv raleq moanimv
      biimt w3a brinxp2 3anan12 bitri mobii df-rmo imbi2i ralbiia syl6bb syl5bb
      syl6rbbr pm5.32i r19.26 ancom reu5 ralbii 3bitr2i ) ECDFGZHZDIVMJZVMKZDLZ
      MVNVLUBZDLZMZANZBNZEOZACUCZBDPZVMDUAVRVPVNVQVODVLUDUEUFVRVNMZWBACUGZWBACU
      HZMZBDPZVSWDVRWGBDPZMWFBDPZWJMWEWIVRWKWJABCDEUIUJVRVNWJVNVTWAVLOZAQZBVQPZ
      VRWJABVLUKVRWNWMBDPWJWMBVQDULWMWGBDWADRZWGWOWGSZWMWOWGUNWOVTCRZWBMZMZAQWO
      WRAQZSWMWPWOWRAUMWLWSAWLWQWOWBUOWSVTWACDEUPWQWOWBUQURUSWGWTWOWBACUTVATVEV
      BVCVDVFWFWGBDVGTVNVRVHWCWHBDWBACVIVJTVK $.

    $( Two ways of stating that ` A ` is one-to-one (but not necessarily a
       function).  Each side is equivalent to Definition 6.4(3) of
       [TakeutiZaring] p. 24, who use the notation ""Un_2 (A)"" for one-to-one
       (but not necessarily a function).  (Contributed by NM, 17-Jan-2006.) $)
    fun11 $p |- ( ( Fun `' `' A /\ Fun `' A ) <->
         A. x A. y A. z A. w ( ( x A y /\ z A w ) -> ( x = z <-> y = w ) ) ) $=
      ( cv wbr wa weq wi wal ccnv wfun bi2.04 anbi12i 2albii alcom albii 3bitri
      19.26-2 wb dfbi2 imbi2i pm4.76 nfv breq1 anbi1d imbi1d equsal bitri breq2
      3bitr2i bitr2i wmo fun2cnv mo4 funcnv2 alrot4 3bitr4i ) CFZBFZEGZUTDFZEGZ
      HZBDIZJZBKZDKZCKZAFZVCEGZVDHZACIZJZAKZDKCKZHZVKVAEGZVDHZVNVFUAZJZBKAKZDKC
      KZELZLMZWEMZHWBDKCKBKAKWDVHVPHZDKCKVRWCWHCDWCVNVTVFJZJZVFVTVNJZJZHZBKAKWJ
      BKAKZWLBKZAKZHWHWBWMABWBVTVNVFJZVFVNJZHZJVTWQJZVTWRJZHWMWAWSVTVNVFUBUCVTW
      QWRUDWTWJXAWLVTVNVFNVTVFVNNOULPWJWLABTWNVHWPVPWNWJAKZBKVHWJABQXBVGBWIVGAC
      VGAUEVNVTVEVFVNVSVBVDVKUTVAEUFUGUHUIRUJWOVOAWKVOBDVOBUEVFVTVMVNVFVSVLVDVA
      VCVKEUKUGUHUIROSPVHVPCDTUMWFVJWGVQWFVBBUNZCKVGDKBKZCKVJCBEUOXCXDCVBVDBDVA
      VCUTEUKUPRXDVICVGBDQRSWGVLAUNZDKVOCKAKZDKZVQADEUQXEXFDVLVDACVKUTVCEUFUPRX
      GVPCKZDKVQXFXHDVOACQRVPDCQUJSOWBABCDURUS $.

    $( The union of a chain (with respect to inclusion) of functions is a
       function.  (Contributed by NM, 10-Aug-2004.) $)
    fununi $p |- ( A. f e. A ( Fun f /\ A. g e. A ( f C_ g \/ g C_ f ) ) ->
                 Fun U. A ) $=
      ( vx vy vz vw vv cv wfun wss wo wral wa wrel wcel weq wi wal wex cuni cop
      funrel adantr ralimi reluni sylibr r19.28av anim1d dffun4 simprbi 19.21bi
      ssel 19.21bbi syl9r adantl anim2d jaod funeq sseq1 orbi12d anbi12d anbi2d
      sseq2 cbvral2v ralcom orcom syl5bb bitri anbi12i anandir 2ralbii r19.26-2
      imp anidm bitr2i 3bitr3i eluni eeanv an4 ancom 2exbii 3bitr2i imbi1i r2al
      19.23v impexp 2albii albii 3bitr2ri 3imtr4i alrimiv alrimivv syl sylanbrc
      ) BIZJZWPCIZKZWRWPKZLZCAMZNZBAMZAUAZOZDIZEIUBZXEPZXGFIUBZXEPZNZEFQZRZFSZE
      SDSZXEJXDWPOZBAMXFXCXQBAWQXQXBWPUCUDUEBAUFUGXDWQXANZCAMZBAMZXPXCXSBAWQXAC
      AUHUEXTXODEXTXNFGIZJZHIZJZNZYAYCKZYCYAKZLZNZHAMZGAMZXHYAPZXJYCPZNZXMRZHAM
      ZGAMZXTXNYJYPGAYIYOHAYEYHYOYEYFYOYGYDYFYORYBYFYNXHYCPZYMNZYDXMYFYLYRYMYAY
      CXHUMUIYDYSXMRZFYDYTFSZDEYDYCOUUAESDSDEFYCUJUKUNULUOUPYBYGYORYDYGYNYLXJYA
      PZNZYBXMYGYMUUBYLYCYAXJUMUQYBUUCXMRZFYBUUDFSZDEYBYAOUUEESDSDEFYAUJUKUNULU
      OUDURVNUEUEXTXTNYBYHNZHAMGAMZYDYHNZHAMGAMZNZXTYKXTUUGXTUUIXRUUFYBYAWRKZWR
      YAKZLZNBCGHAABGQZWQYBXAUUMWPYAUSUUNWSUUKWTUULWPYAWRUTWPYAWRVDVAVBCHQZUUMY
      HYBUUOUUKYFUULYGWRYCYAVDWRYCYAUTVAVCVEXTXRBAMCAMUUIXRBCAAVFXRUUHWQYAWPKZW
      PYAKZLZNCBGHAACGQZXAUURWQXAWTWSLUUSUURWSWTVGUUSWTUUPWSUUQWRYAWPUTWRYAWPVD
      VAVHVCBHQZWQYDUURYHWPYCUSUUTUUPYFUUQYGWPYCYAVDWPYCYAUTVAVBVEVIVJXTVOYKUUF
      UUHNZHAMGAMUUJYIUVAGHAAYBYDYHVKVLUUFUUHGHAAVMVPVQXNYAAPZYCAPZNZYNNZHTZGTZ
      XMRUVFXMRZGSZYQXLUVGXMXLYLUVBNZGTZYMUVCNZHTZNUVJUVLNZHTGTUVGXIUVKXKUVMGXH
      AVRHXJAVRVJUVJUVLGHVSUVNUVEGHUVNYNUVDNUVEYLUVBYMUVCVTYNUVDWAVIWBWCWDUVFXM
      GWFYQUVDYORZHSGSUVEXMRZHSZGSUVIYOGHAAWEUVPUVOGHUVDYNXMWGWHUVQUVHGUVEXMHWF
      WIWJWCWKWLWMWNDEFXEUJWO $.
  $}

  ${
    $d x y F $.  $d x y G $.
    $( The intersection with a function is a function.  Exercise 14(a) of
       [Enderton] p. 53.  (Contributed by NM, 19-Mar-2004.)  (Proof shortened
       by Andrew Salmon, 17-Sep-2011.) $)
    funin $p |- ( Fun F -> Fun ( F i^i G ) ) $=
      ( cin wss wfun wi inss1 funss ax-mp ) ABCZADAEJEFABGJAHI $.
  $}

  $( The restriction of a one-to-one function is one-to-one.  (Contributed by
     NM, 25-Mar-1998.) $)
  funres11 $p |- ( Fun `' F -> Fun `' ( F |` A ) ) $=
    ( cres wss ccnv wfun wi resss cnvss funss mp2b ) BACZBDLEZBEZDNFMFGBAHLBIMN
    JK $.

  $( The converse of a restricted function.  (Contributed by NM,
     27-Mar-1998.) $)
  funcnvres $p |- ( Fun `' F -> `' ( F |` A ) = ( `' F |` ( F "" A ) ) ) $=
    ( ccnv wfun cima cres cdm df-ima df-rn eqtri reseq2i wceq resss cnvss ax-mp
    crn wss funssres mpan2 syl5req ) BCZDZUABAEZFUABAFZCZGZFZUEUCUFUAUCUDPUFBAH
    UDIJKUBUEUAQZUGUELUDBQUHBAMUDBNOUAUERST $.

  $( Converse of a restricted identity function.  (Contributed by FL,
     4-Mar-2007.) $)
  cnvresid $p |- `' ( _I |` A ) = ( _I |` A ) $=
    ( cid ccnv wceq wfun cres cnvi eqcomi funi funeq cima funcnvres imai syl6eq
    mpbii reseq12i mp2b ) BBCZDZREZBAFZCZUADRBGHSBETIBRJOTUBRBAKZFUAABLRBUCAGAM
    PNQ $.

  $( The converse of a restriction of the converse of a function equals the
     function restricted to the image of its converse.  (Contributed by NM,
     4-May-2005.) $)
  funcnvres2 $p |- ( Fun F -> `' ( `' F |` A ) = ( F |` ( `' F "" A ) ) ) $=
    ( wfun ccnv cres cima wceq funcnvcnv funcnvres syl wrel funrel dfrel2 sylib
    reseq1d eqtrd ) BCZBDZAEDZRDZRAFZEZBUAEQTCSUBGBHARIJQTBUAQBKTBGBLBMNOP $.

  $( The image of the preimage of a function.  (Contributed by NM,
     25-May-2004.) $)
  funimacnv $p |- ( Fun F -> ( F "" ( `' F "" A ) ) = ( A i^i ran F ) ) $=
    ( wfun ccnv cima cres crn cin funcnvres2 rneqd df-ima syl6reqr df-rn ineq2i
    cdm dmres dfdm4 3eqtr2ri syl6eq ) BCZBBDZAEZEZUAAFZDZGZABGZHZTUFBUBFZGUCTUE
    UIABIJBUBKLUHAUAOZHUDOUFUGUJABMNUAAPUDQRS $.

  $( A kind of contraposition law that infers a subclass of an image from a
     preimage subclass.  (Contributed by NM, 25-May-2004.) $)
  funimass1 $p |- ( ( Fun F /\ A C_ ran F ) ->
                 ( ( `' F "" A ) C_ B -> A C_ ( F "" B ) ) ) $=
    ( ccnv cima wss wfun crn wa imass2 funimacnv wceq dfss biimpi eqcomd sseq1d
    cin sylan9eq syl5ib ) CDAEZBFCTEZCBEZFCGZACHZFZIZAUBFTBCJUFUAAUBUCUEUAAUDQZ
    AACKUEAUGUEAUGLAUDMNORPS $.

  $( A kind of contraposition law that infers an image subclass from a subclass
     of a preimage.  (Contributed by NM, 25-May-2004.) $)
  funimass2 $p |- ( ( Fun F /\ A C_ ( `' F "" B ) ) -> ( F "" A ) C_ B ) $=
    ( ccnv cima wss wfun imass2 crn cin funimacnv sseq2d inss1 sstr2 mpi syl6bi
    imp sylan2 ) ACDBEZFCGZCAEZCSEZFZUABFZASCHTUCUDTUCUABCIZJZFZUDTUBUFUABCKLUG
    UFBFUDBUEMUAUFBNOPQR $.

  ${
    $d x y A $.  $d x y B $.  $d x y F $.
    $( The image of a difference is the difference of images.  (Contributed by
       NM, 24-May-1998.) $)
    imadif $p |- ( Fun `' F ->
                 ( F "" ( A \ B ) ) = ( ( F "" A ) \ ( F "" B ) ) ) $=
      ( vy vx cdif cima cv wcel wbr wa wex wn exbii wi wmo vex sylib wo elima2
      ccnv wfun anandir 19.40 sylbi wal nfv nfe1 funmo brcnv mobii mopick sylan
      nfan con2d imnan alrimi exancom alnex 3imtr3g anim2d syl5 19.29r sylan2br
      ex andi ianor anbi2i an32 pm3.24 intnan anass mtbir bitri 3bitr4i impbid1
      biorfi eldif anbi1i notbii anbi12i 3bitr4g eqrdv ) CUAZUBZDCABFZGZCAGZCBG
      ZFZWEEHZWFIZWKDHZCJZKZELZWMWHIZWMWIIZMZKZWMWGIWMWJIWEWKAIZWKBIZMZKZWNKZEL
      ZXAWNKZELZXBWNKZELZMZKZWPWTWEXFXLXFXHXCWNKZELZKZWEXLXFXGXMKZELXOXEXPEXAXC
      WNUCNXGXMEUDUEWEXNXKXHWEWNXCKZELZXIMZEUFZXNXKWEXRXTWEXRKZXSEWEXREWEEUGXQE
      UHUNYAXBWNMZOXSYAWNXBWEWNEPZXRWNXCOWEWMWKWDJZEPYCEWMWDUIYDWNEWMWKCDQZEQUJ
      UKRWNXCEULUMUOXBWNUPRUQVEWNXCEURXIEUSZUTVAVBXLXGXSKZELZXFXKXHXTYHYFXGXSEV
      CVDYGXEEXGXCYBSZKXGXCKZXGYBKZSZYGXEXGXCYBVFXSYIXGXBWNVGVHXEYJYLXAXCWNVIYK
      YJYKXAWNYBKZKYMXAWNVJVKXAWNYBVLVMVQVNVONRVPWOXEEWLXDWNWKABVRVSNWQXHWSXKEW
      MCAYETWRXJEWMCBYETVTWAWBEWMCWFYETWMWHWIVRWBWC $.
  $}

  $( The image of an intersection is the intersection of images.  (Contributed
     by Paul Chapman, 11-Apr-2009.) $)
  imain $p |- ( Fun `' F ->
                ( F "" ( A i^i B ) ) = ( ( F "" A ) i^i ( F "" B ) ) ) $=
    ( ccnv wfun cdif cima cin imadif difeq2d eqtrd dfin4 imaeq2i 3eqtr4g ) CDEZ
    CAABFZFZGZCAGZSCBGZFZFZCABHZGSTHORSCPGZFUBAPCIOUDUASABCIJKUCQCABLMSTLN $.

  ${
    $d w B $.  $d x y z w A $.
    $( Axiom of Replacement using abbreviations.  Axiom 39(vi) of [Quine]
       p. 284.  Compare Exercise 9 of [TakeutiZaring] p. 29.  (Contributed by
       NM, 10-Sep-2006.) $)
    funimaexg $p |- ( ( Fun A /\ B e. C ) -> ( A "" B ) e. _V ) $=
      ( vw vx vy vz wcel wfun cima cvv cv wceq imaeq2 eleq1d wal wex wel bitri
      wi imbi2d cop wrel dffun5 simprbi wa wb nfv axrep4 isset cab dfima3 abeq2
      eqeq2i exbii sylibr syl vtoclg impcom ) BCHAIZABJZKHZUTADLZJZKHZTUTVBTDBC
      VCBMZVEVBUTVFVDVAKVCBANOUAUTELFLZUBAHZVGGLZMTFPGQEPZVEUTAUCVJEFGAUDUEVJFG
      REDRVHUFEQZUGFPZGQZVEVHEFGDVHGUHUIVEVIVDMZGQVMGVDUJVNVLGVNVIVKFUKZMVLVDVO
      VIEFAVCULUNVKFVIUMSUOSUPUQURUS $.
  $}

  ${
    zfrep5.1 $e |- B e. _V $.
    $( The image of a set under any function is also a set.  Equivalent of
       Axiom of Replacement ~ ax-rep .  Axiom 39(vi) of [Quine] p. 284.
       Compare Exercise 9 of [TakeutiZaring] p. 29.  (Contributed by NM,
       17-Nov-2002.) $)
    funimaex $p |- ( Fun A -> ( A "" B ) e. _V ) $=
      ( wfun cvv wcel cima funimaexg mpan2 ) ADBEFABGEFCABEHI $.
  $}

  ${
    $d x z A $.  $d b x y z $.  $d z ph $.
    $( Part of a study of the Axiom of Replacement used by the Isabelle
       prover.  The object PrimReplace is apparently the image of the function
       encoded by ` ph ( x , y ) ` i.e. the class
       ` ( { <. x , y >. | ph } "" A ) ` .  If so, we can prove Isabelle's
       ""Axiom of Replacement"" conclusion without using the Axiom of
       Replacement, for which I (N. Megill) currently have no explanation.
       (Contributed by NM, 26-Oct-2006.)  (Proof shortened by Mario Carneiro,
       4-Dec-2016.) $)
    isarep1 $p |- ( b e. ( { <. x , y >. | ph } "" A ) <->
                 E. x e. A [ b / y ] ph ) $=
      ( vz copab cima wcel wbr wrex wsb vex elima cop wsbc df-br sbsbc 3bitri
      cv opelopabsb sbbii bitr2i rexbii nfs1v nfv sbequ12r cbvrex ) ETZABCGZDHI
      FTZUIUJJZFDKACELZBFLZFDKUMBDKFUIUJDEMNULUNFDULUKUIOUJIACUIPZBUKPZUNUKUIUJ
      QABCUKUIUAUNUOBFLUPUMUOBFACERUBUOBFRUCSUDUNUMFBDUMBFUEUMFUFUMFBUGUHS $.
  $}

  ${
    $d w x y A $.  $d b x y $.  $d y z $.  $d w ph $.  $d z ph $.
    isarep2.1 $e |- A e. _V $.
    isarep2.2 $e |- A. x e. A A. y A. z ( ( ph /\ [ z / y ] ph ) -> y = z ) $.
    $( Part of a study of the Axiom of Replacement used by the Isabelle
       prover.  In Isabelle, the sethood of PrimReplace is apparently
       postulated implicitly by its type signature "" ` [ ` i, ` [ ` i, i ` ] `
       => o ` ] ` => i"", which automatically asserts that it is a set without
       using any axioms.  To prove that it is a set in Metamath, we need the
       hypotheses of Isabelle's ""Axiom of Replacement"" as well as the Axiom of
       Replacement in the form ~ funimaex .  (Contributed by NM,
       26-Oct-2006.) $)
    isarep2 $p |- E. w w = ( { <. x , y >. | ph } "" A ) $=
      ( copab cima cv wcel wa cvv cres resima resopab wmo wi wal imaeq1i eqtr3i
      wfun funopab wsb weq rspec nfv sylibr moanimv mpbir mpgbir funimaex ax-mp
      mo3 eqeltri isseti ) EABCIZFJZUSBKFLZAMZBCIZFJZNURFOZFJUSVCURFPVDVBFABCFQ
      UAUBVBUCZVCNLVEVACRZBVABCUDVFUTACRZSUTAACDUEMCDUFSDTCTZVGVHBFHUGACDADUHUO
      UIUTACUJUKULVBFGUMUNUPUQ $.
  $}

  $( Equality theorem for function predicate with domain.  (Contributed by NM,
     1-Aug-1994.) $)
  fneq1 $p |- ( F = G -> ( F Fn A <-> G Fn A ) ) $=
    ( wceq wfun cdm wa wfn funeq dmeq eqeq1d anbi12d df-fn 3bitr4g ) BCDZBEZBFZ
    ADZGCEZCFZADZGBAHCAHOPSRUABCIOQTABCJKLBAMCAMN $.

  $( Equality theorem for function predicate with domain.  (Contributed by NM,
     1-Aug-1994.) $)
  fneq2 $p |- ( A = B -> ( F Fn A <-> F Fn B ) ) $=
    ( wceq wfun cdm wa wfn eqeq2 anbi2d df-fn 3bitr4g ) ABDZCEZCFZADZGNOBDZGCAH
    CBHMPQNABOIJCAKCBKL $.

  ${
    fneq1d.1 $e |- ( ph -> F = G ) $.
    $( Equality deduction for function predicate with domain.  (Contributed by
       Paul Chapman, 22-Jun-2011.) $)
    fneq1d $p |- ( ph -> ( F Fn A <-> G Fn A ) ) $=
      ( wceq wfn wb fneq1 syl ) ACDFCBGDBGHEBCDIJ $.
  $}

  ${
    fneq2d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for function predicate with domain.  (Contributed by
       Paul Chapman, 22-Jun-2011.) $)
    fneq2d $p |- ( ph -> ( F Fn A <-> F Fn B ) ) $=
      ( wceq wfn wb fneq2 syl ) ABCFDBGDCGHEBCDIJ $.
  $}

  ${
    fneq12d.1 $e |- ( ph -> F = G ) $.
    fneq12d.2 $e |- ( ph -> A = B ) $.
    $( Equality deduction for function predicate with domain.  (Contributed by
       NM, 26-Jun-2011.) $)
    fneq12d $p |- ( ph -> ( F Fn A <-> G Fn B ) ) $=
      ( wfn fneq1d fneq2d bitrd ) ADBHEBHECHABDEFIABCEGJK $.
  $}

  $( Equality theorem for function predicate with domain.  (Contributed by
     Thierry Arnoux, 31-Jan-2017.) $)
  fneq12 $p |- ( ( F = G /\ A = B ) -> ( F Fn A <-> G Fn B ) ) $=
    ( wceq wa simpl simpr fneq12d ) CDEZABEZFABCDJKGJKHI $.

  ${
    fneq1i.1 $e |- F = G $.
    $( Equality inference for function predicate with domain.  (Contributed by
       Paul Chapman, 22-Jun-2011.) $)
    fneq1i $p |- ( F Fn A <-> G Fn A ) $=
      ( wceq wfn wb fneq1 ax-mp ) BCEBAFCAFGDABCHI $.
  $}

  ${
    fneq2i.1 $e |- A = B $.
    $( Equality inference for function predicate with domain.  (Contributed by
       NM, 4-Sep-2011.) $)
    fneq2i $p |- ( F Fn A <-> F Fn B ) $=
      ( wceq wfn wb fneq2 ax-mp ) ABECAFCBFGDABCHI $.
  $}

  ${
    nffn.1 $e |- F/_ x F $.
    nffn.2 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for a function with domain.
       (Contributed by NM, 30-Jan-2004.) $)
    nffn $p |- F/ x F Fn A $=
      ( wfn wfun cdm wceq wa df-fn nffun nfdm nfeq nfan nfxfr ) CBFCGZCHZBIZJAC
      BKQSAACDLARBACDMENOP $.
  $}

  $( A function with domain is a function.  (Contributed by NM, 1-Aug-1994.) $)
  fnfun $p |- ( F Fn A -> Fun F ) $=
    ( wfn wfun cdm wceq df-fn simplbi ) BACBDBEAFBAGH $.

  $( A function with domain is a relation.  (Contributed by NM, 1-Aug-1994.) $)
  fnrel $p |- ( F Fn A -> Rel F ) $=
    ( wfn wfun wrel fnfun funrel syl ) BACBDBEABFBGH $.

  $( The domain of a function.  (Contributed by NM, 2-Aug-1994.) $)
  fndm $p |- ( F Fn A -> dom F = A ) $=
    ( wfn wfun cdm wceq df-fn simprbi ) BACBDBEAFBAGH $.

  ${
    funfni.1 $e |- ( ( Fun F /\ B e. dom F ) -> ph ) $.
    $( Inference to convert a function and domain antecedent.  (Contributed by
       NM, 22-Apr-2004.) $)
    funfni $p |- ( ( F Fn A /\ B e. A ) -> ph ) $=
      ( wfn wcel wa wfun cdm fnfun adantr fndm eleq2d biimpar syl2anc ) DBFZCBG
      ZHDIZCDJZGZAQSRBDKLQUARQTBCBDMNOEP $.
  $}

  $( A function has a unique domain.  (Contributed by NM, 11-Aug-1994.) $)
  fndmu $p |- ( ( F Fn A /\ F Fn B ) -> A = B ) $=
    ( wfn cdm fndm sylan9req ) CADCBDACEBACFBCFG $.

  $( The first argument of binary relation on a function belongs to the
     function's domain.  (Contributed by NM, 7-May-2004.) $)
  fnbr $p |- ( ( F Fn A /\ B F C ) -> B e. A ) $=
    ( wfn wbr cdm wcel wrel fnrel releldm sylan fndm eleq2d biimpa syldan ) DAE
    ZBCDFZBDGZHZBAHZQDIRTADJBCDKLQTUAQSABADMNOP $.

  $( The first argument of an ordered pair in a function belongs to the
     function's domain.  (Contributed by NM, 8-Aug-1994.) $)
  fnop $p |- ( ( F Fn A /\ <. B , C >. e. F ) -> B e. A ) $=
    ( cop wcel wfn wbr df-br fnbr sylan2br ) BCEDFDAGBCDHBAFBCDIABCDJK $.

  ${
    $d x y F $.  $d x y B $.  $d x A $.
    $( There is exactly one value of a function.  (Contributed by NM,
       22-Apr-2004.)  (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
    fneu $p |- ( ( F Fn A /\ B e. A ) -> E! y B F y ) $=
      ( cv wbr weu wfun cdm wa wmo funmo adantr wex wb eldmg ibi adantl exmoeu2
      wcel syl mpbid funfni ) CAEDFZAGZBCDDHZCDIZTZJZUDAKZUEUFUJUHACDLMUIUDANZU
      JUEOUHUKUFUHUKACDUGPQRUDASUAUBUC $.

    $( There is exactly one value of a function.  (Contributed by NM,
       7-Nov-1995.) $)
    fneu2 $p |- ( ( F Fn A /\ B e. A ) -> E! y <. B , y >. e. F ) $=
      ( wfn wcel wa cv wbr weu cop fneu df-br eubii sylib ) DBECBFGCAHZDIZAJCPK
      DFZAJABCDLQRACPDMNO $.
  $}

  $( The union of two functions with disjoint domains.  (Contributed by NM,
     22-Sep-2004.) $)
  fnun $p |- ( ( ( F Fn A /\ G Fn B ) /\ ( A i^i B ) = (/) ) ->
             ( F u. G ) Fn ( A u. B ) ) $=
    ( wfn wa cin c0 wceq cun wfun cdm wi df-fn ineq12 eqeq1d funun syl6bir dmun
    anbi2d uneq12 syl5eq jctird syl6ibr expd impcom an4s syl2anb imp ) CAEZDBEZ
    FABGZHIZCDJZABJZEZUJCKZCLZAIZFDKZDLZBIZFUMUPMZUKCANDBNUQUTUSVBVCUSVBFZUQUTF
    ZVCVDVEUMUPVDVEUMFZUNKZUNLZUOIZFUPVDVFVGVIVDVFVEURVAGZHIZFVGVDVKUMVEVDVJULH
    URAVABOPTCDQRVDVHURVAJUOCDSURAVABUAUBUCUNUONUDUEUFUGUHUI $.

  ${
    fnunop.x $e |- ( ph -> X e. _V ) $.
    fnunop.y $e |- ( ph -> Y e. _V ) $.
    fnunop.f $e |- ( ph -> F Fn D ) $.
    fnunop.g $e |- G = ( F u. { <. X , Y >. } ) $.
    fnunop.e $e |- E = ( D u. { X } ) $.
    fnunop.d $e |- ( ph -> -. X e. D ) $.
    $( Extension of a function with a new ordered pair.  (Contributed by NM,
       28-Sep-2013.)  (Revised by Mario Carneiro, 30-Apr-2015.) $)
    fnunsn $p |- ( ph -> G Fn E ) $=
      ( cop csn cun wfn cvv wcel sylibr cin c0 fnsng syl2anc wn disjsn syl21anc
      wceq fnun fneq1i fneq2i bitri ) ADFGNOZPZBFOZPZQZECQZADBQUMUOQZBUOUAUBUHZ
      UQJAFRSGRSUSHIFGRRUCUDAFBSUEUTMBFUFTBUODUMUIUGURUNCQUQCEUNKUJCUPUNLUKULT
      $.
  $}

  $( Composition of two functions.  (Contributed by NM, 22-May-2006.) $)
  fnco $p |- ( ( F Fn A /\ G Fn B /\ ran G C_ A ) -> ( F o. G ) Fn B ) $=
    ( wfn crn wss w3a ccom wfun cdm wceq fnfun funco syl2an 3adant3 fndm sseq2d
    wa biimpar dmcosseq syl 3adant2 3ad2ant2 eqtrd df-fn sylanbrc ) CAEZDBEZDFZ
    AGZHZCDIZJZUMKZBLUMBEUHUIUNUKUHCJDJUNUIACMBDMCDNOPULUODKZBUHUKUOUPLZUIUHUKS
    UJCKZGZUQUHUSUKUHURAUJACQRTCDUAUBUCUIUHUPBLUKBDQUDUEUMBUFUG $.

  $( A function does not change when restricted to its domain.  (Contributed by
     NM, 5-Sep-2004.) $)
  fnresdm $p |- ( F Fn A -> ( F |` A ) = F ) $=
    ( wfn wrel cdm wss cres wceq fnrel fndm eqimss syl relssres syl2anc ) BACZB
    DBEZAFZBAGBHABIOPAHQABJPAKLBAMN $.

  $( A function restricted to a class disjoint with its domain is empty.
     (Contributed by NM, 23-Sep-2004.) $)
  fnresdisj $p |- ( F Fn A -> ( ( A i^i B ) = (/) <-> ( F |` B ) = (/) ) ) $=
    ( cres c0 wceq cdm wfn wrel wb relres reldm0 ax-mp dmres incom eqtri ineq1d
    cin fndm syl5eq eqeq1d syl5rbb ) CBDZEFZUCGZEFZCAHZABRZEFUCIUDUFJCBKUCLMUGU
    EUHEUGUECGZBRZUHUEBUIRUJCBNBUIOPUGUIABACSQTUAUB $.

  $( Membership in two functions restricted by each other's domain.
     (Contributed by NM, 8-Aug-1994.) $)
  2elresin $p |- ( ( F Fn A /\ G Fn B ) ->
                 ( ( <. x , y >. e. F /\ <. x , z >. e. G ) <->
                   ( <. x , y >. e. ( F |` ( A i^i B ) ) /\
                     <. x , z >. e. ( G |` ( A i^i B ) ) ) ) ) $=
    ( wfn wa cv cop wcel cin cres fnop anim12i vex opres resss sseli wi anbi12d
    an4s elin sylibr biimprd syl ex pm2.43d impbid1 ) FDHZGEHZIZAJZBJZKZFLZUNCJ
    ZKZGLZIZUPFDEMZNZLZUSGVBNZLZIZUMVAVGUMVAVAVGUAZUMVAIZUNVBLZVHVIUNDLZUNELZIZ
    VJUKUQULUTVMUKUQIVKULUTIVLDUNUOFOEUNURGOPUCUNDEUDUEVJVGVAVJVDUQVFUTUNUOFVBB
    QRUNURGVBCQRUBUFUGUHUIVDUQVFUTVCFUPFVBSTVEGUSGVBSTPUJ $.

  $( Restriction of a function with a subclass of its domain.  (Contributed by
     NM, 10-Oct-2007.) $)
  fnssresb $p |- ( F Fn A -> ( ( F |` B ) Fn B <-> B C_ A ) ) $=
    ( cres wfn wfun cdm wceq wa wss df-fn fnfun funres biantrurd ssdmres sseq2d
    syl fndm syl5bbr bitr3d syl5bb ) CBDZBEUBFZUBGBHZIZCAEZBAJZUBBKUFUDUEUGUFUC
    UDUFCFUCACLBCMQNUDBCGZJUFUGBCOUFUHABACRPSTUA $.

  $( Restriction of a function with a subclass of its domain.  (Contributed by
     NM, 2-Aug-1994.) $)
  fnssres $p |- ( ( F Fn A /\ B C_ A ) -> ( F |` B ) Fn B ) $=
    ( wfn cres wss fnssresb biimpar ) CADCBEBDBAFABCGH $.

  $( Restriction of a function's domain with an intersection.  (Contributed by
     NM, 9-Aug-1994.) $)
  fnresin1 $p |- ( F Fn A -> ( F |` ( A i^i B ) ) Fn ( A i^i B ) ) $=
    ( wfn cin wss cres inss1 fnssres mpan2 ) CADABEZAFCKGKDABHAKCIJ $.

  $( Restriction of a function's domain with an intersection.  (Contributed by
     NM, 9-Aug-1994.) $)
  fnresin2 $p |- ( F Fn A -> ( F |` ( B i^i A ) ) Fn ( B i^i A ) ) $=
    ( wfn cin wss cres inss2 fnssres mpan2 ) CADBAEZAFCKGKDBAHAKCIJ $.

  ${
    $d x y A $.  $d x y F $.
    $( An equivalence for functionality of a restriction.  Compare ~ dffun8 .
       (Contributed by Mario Carneiro, 20-May-2015.) $)
    fnres $p |- ( ( F |` A ) Fn A <-> A. x e. A E! y x F y ) $=
      ( cres wfun cdm wa cv wbr wmo wral ancom wal wcel vex mpbiran 3bitr4i wss
      bitri wceq wex wfn wi brres mobii moanimv albii wrel relres dffun6 df-ral
      weu dmres inss1 eqsstri eqss dfss3 elin2 baib eldm syl6bb ralbiia anbi12i
      cin r19.26 df-fn eu5 ralbii ) DCEZFZVJGZCUAZHZAIZBIZDJZBUBZVQBKZHZACLZVJC
      UCVQBUMZACLVSACLZVRACLZHWDWCHVNWAWCWDMVKWCVMWDVOVPVJJZBKZANZVOCOZVSUDZANV
      KWCWFWIAWFWHVQHZBKWIWEWJBWEVQWHHWJVOVPDCBPUEVQWHMTUFWHVQBUGTUHVKVJUIWGDCU
      JABVJUKQVSACULRVMCVLSZWDVMVLCSWKVLCDGZVECDCUNZCWLUOUPVLCUQQWKVOVLOZACLWDA
      CVLURWNVRACWHWNVOWLOZVRWNWHWOVOCWLVLWMUSUTBVODAPVAVBVCTTVDVRVSACVFRVJCVGW
      BVTACVQBVHVIR $.
  $}

  $( Functionality and domain of restricted identity.  (Contributed by NM,
     27-Aug-2004.) $)
  fnresi $p |- ( _I |` A ) Fn A $=
    ( cid cres wfn wfun cdm wceq funi funres ax-mp dmresi df-fn mpbir2an ) BACZ
    ADNEZNFAGBEOHABIJAKNALM $.

  $( The image of a function's domain is its range.  (Contributed by NM,
     4-Nov-2004.)  (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
  fnima $p |- ( F Fn A -> ( F "" A ) = ran F ) $=
    ( wfn cima cres crn df-ima fnresdm rneqd syl5eq ) BACZBADBAEZFBFBAGKLBABHIJ
    $.

  ${
    $d x y F $.
    $( A function with empty domain is empty.  (Contributed by NM,
       15-Apr-1998.)  (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
    fn0 $p |- ( F Fn (/) <-> F = (/) ) $=
      ( wfn wceq wrel cdm fnrel fndm reldm0 biimpar syl2anc wfun fun0 dm0 df-fn
      c0 mpbir2an fneq1 mpbiri impbii ) AOBZAOCZTADZAEOCZUAOAFOAGUBUAUCAHIJUATO
      OBZUDOKOEOCLMOONPOAOQRS $.
  $}

  $( A class that is disjoint with the domain of a function has an empty image
     under the function.  (Contributed by FL, 24-Jan-2007.) $)
  fnimadisj $p |- ( ( F Fn A /\ ( A i^i C ) = (/) ) -> ( F "" C ) = (/) ) $=
    ( wfn cin c0 wceq wa cdm cima fndm ineq1d eqeq1d biimpar imadisj sylibr ) C
    ADZABEZFGZHCIZBEZFGZCBJFGQUBSQUARFQTABACKLMNCBOP $.

  $( Images under a function never map nonempty sets to empty sets.
     _EDITORIAL_: usable in ~ fnwe2lem2 .  (Contributed by Stefan O'Rear,
     21-Jan-2015.) $)
  fnimaeq0 $p |- ( ( F Fn A /\ B C_ A ) ->
      ( ( F "" B ) = (/) <-> B = (/) ) ) $=
    ( cima c0 wceq cdm cin wfn wa imadisj incom fndm sseq2d biimpar df-ss sylib
    wss syl5eq eqeq1d syl5bb ) CBDEFCGZBHZEFCAIZBARZJZBEFCBKUFUCBEUFUCBUBHZBUBB
    LUFBUBRZUGBFUDUHUEUDUBABACMNOBUBPQSTUA $.

  ${
    $d y z A $.  $d y z B $.  $d x y z $.
    $( Alternate definition for the ""maps to"" notation ~ df-mpt .  (Contributed
       by Mario Carneiro, 30-Dec-2016.) $)
    dfmpt3 $p |- ( x e. A |-> B ) = U_ x e. A ( { x } X. { B } ) $=
      ( vy vz cmpt cv wcel wceq copab csn cxp ciun df-mpt cop wex anbi2i 2exbii
      wa elsn eliunxp elopab 3bitr4i eqriv eqtr4i ) ABCFAGZBHZDGZCIZSZADJZABUFK
      CKZLMZADBCNEUMUKEGZUFUHOIZUGUHULHZSZSZDPAPUOUJSZDPAPUNUMHUNUKHURUSADUQUJU
      OUPUIUGDCTQQRADBULUNUAUJADUNUBUCUDUE $.
  $}

  ${
    $d x y z A $.  $d z F $.  $d x y z w $.
    fnopabg.1 $e |- F = { <. x , y >. | ( x e. A /\ ph ) } $.
    $( Functionality and domain of an ordered-pair class abstraction.
       (Contributed by NM, 30-Jan-2004.)  (Proof shortened by Mario Carneiro,
       4-Dec-2016.) $)
    fnopabg $p |- ( A. x e. A E! y ph <-> F Fn A ) $=
      ( wmo wex wa wral cv wcel copab wfn weu wfun cdm wceq wal 3bitr4i moanimv
      wi albii funopab df-ral 3bitr4ri dmopab3 anbi12i r19.26 df-fn ancom bitri
      eu5 ralbii fneq1i ) ACGZACHZIZBDJZBKDLZAIZBCMZDNZACOZBDJEDNUPBDJZUQBDJZIV
      BPZVBQDRZIUSVCVEVGVFVHVACGZBSUTUPUBZBSVGVEVIVJBUTACUAUCVABCUDUPBDUEUFABCD
      UGUHUPUQBDUIVBDUJTVDURBDVDUQUPIURACUMUQUPUKULUNDEVBFUOT $.
  $}

  ${
    $d x y A $.
    fnopab.1 $e |- ( x e. A -> E! y ph ) $.
    fnopab.2 $e |- F = { <. x , y >. | ( x e. A /\ ph ) } $.
    $( Functionality and domain of an ordered-pair class abstraction.
       (Contributed by NM, 5-Mar-1996.) $)
    fnopab $p |- F Fn A $=
      ( weu wral wfn rgen fnopabg mpbi ) ACHZBDIEDJNBDFKABCDEGLM $.
  $}

  ${
    $d x y A $.  $d y B $.
    mptfng.1 $e |- F = ( x e. A |-> B ) $.
    $( The maps-to notation defines a function with domain.  (Contributed by
       Scott Fenton, 21-Mar-2011.) $)
    mptfng $p |- ( A. x e. A B e. _V <-> F Fn A ) $=
      ( vy cvv wcel wral cv wceq weu wfn eueq ralbii cmpt wa copab df-mpt eqtri
      fnopabg bitri ) CGHZABIFJCKZFLZABIDBMUCUEABFCNOUDAFBDDABCPAJBHUDQAFREAFBC
      STUAUB $.

    $( The maps-to notation defines a function with domain.  (Contributed by
       NM, 9-Apr-2013.) $)
    fnmpt $p |- ( A. x e. A B e. V -> F Fn A ) $=
      ( wcel wral cvv wfn elex ralimi mptfng sylib ) CEGZABHCIGZABHDBJOPABCEKLA
      BCDFMN $.
  $}

  $( A mapping operation with empty domain.  (Contributed by Mario Carneiro,
     28-Dec-2014.) $)
  mpt0 $p |- ( x e. (/) |-> A ) = (/) $=
    ( c0 cmpt wfn wceq cvv wcel wral ral0 eqid fnmpt ax-mp fn0 mpbi ) ACBDZCEZP
    CFBGHZACIQRAJACBPGPKLMPNO $.

  ${
    $d x y A $.  $d y B $.
    fnmpti.1 $e |- B e. _V $.
    fnmpti.2 $e |- F = ( x e. A |-> B ) $.
    $( Functionality and domain of an ordered-pair class abstraction.
       (Contributed by NM, 29-Jan-2004.)  (Revised by Mario Carneiro,
       31-Aug-2015.) $)
    fnmpti $p |- F Fn A $=
      ( cvv wcel wral wfn rgenw mptfng mpbi ) CGHZABIDBJNABEKABCDFLM $.

    $( Domain of the mapping operation.  (Contributed by NM, 6-Sep-2005.)
       (Revised by Mario Carneiro, 31-Aug-2015.) $)
    dmmpti $p |- dom F = A $=
      ( wfn cdm wceq fnmpti fndm ax-mp ) DBGDHBIABCDEFJBDKL $.
  $}

  ${
    $d B x $.  $d ph x $.
    dmmptd.a $e |- A = ( x e. B |-> C ) $.
    dmmptd.c $e |- ( ( ph /\ x e. B ) -> C e. V ) $.
    $( The domain of the mapping operation, deduction form.  (Contributed by
       Glauco Siliprandi, 11-Dec-2019.) $)
    dmmptd $p |- ( ph -> dom A = B ) $=
      ( cvv wcel crab cdm wral wceq cv wa elex syl ralrimiva rabid2 syl6reqr
      sylibr dmmpt ) ADEIJZBDKZCLAUDBDMDUENAUDBDABODJPEFJUDHEFQRSUDBDTUBBDECGUC
      UA $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.
    $( Union of mappings which are mutually compatible.  (Contributed by Mario
       Carneiro, 31-Aug-2015.) $)
    mptun $p |- ( x e. ( A u. B ) |-> C ) =
        ( ( x e. A |-> C ) u. ( x e. B |-> C ) ) $=
      ( vy cmpt cv wcel wceq wa copab df-mpt uneq12i wo elun anbi1i andir bitri
      cun eqtr4i opabbii unopab ) ABCSZDFAGZUCHZEGDIZJZAEKZABDFZACDFZSZAEUCDLUK
      UDBHZUFJZAEKZUDCHZUFJZAEKZSZUHUIUNUJUQAEBDLAECDLMUHUMUPNZAEKURUGUSAEUGULU
      ONZUFJUSUEUTUFUDBCOPULUOUFQRUAUMUPAEUBTTT $.
  $}

  $( Equality theorem for functions.  (Contributed by NM, 1-Aug-1994.) $)
  feq1 $p |- ( F = G -> ( F : A --> B <-> G : A --> B ) ) $=
    ( wceq wfn crn wss wa wf fneq1 rneq sseq1d anbi12d df-f 3bitr4g ) CDEZCAFZC
    GZBHZIDAFZDGZBHZIABCJABDJQRUATUCACDKQSUBBCDLMNABCOABDOP $.

  $( Equality theorem for functions.  (Contributed by NM, 1-Aug-1994.) $)
  feq2 $p |- ( A = B -> ( F : A --> C <-> F : B --> C ) ) $=
    ( wceq wfn crn wss wa wf fneq2 anbi1d df-f 3bitr4g ) ABEZDAFZDGCHZIDBFZQIAC
    DJBCDJOPRQABDKLACDMBCDMN $.

  $( Equality theorem for functions.  (Contributed by NM, 1-Aug-1994.) $)
  feq3 $p |- ( A = B -> ( F : C --> A <-> F : C --> B ) ) $=
    ( wceq wfn crn wss wa wf sseq2 anbi2d df-f 3bitr4g ) ABEZDCFZDGZAHZIPQBHZIC
    ADJCBDJORSPABQKLCADMCBDMN $.

  $( Equality theorem for functions.  (Contributed by FL, 14-Jul-2007.)  (Proof
     shortened by Andrew Salmon, 17-Sep-2011.) $)
  feq23 $p |- ( ( A = C /\ B = D ) -> ( F : A --> B <-> F : C --> D ) ) $=
    ( wceq wf feq2 feq3 sylan9bb ) ACFABEGCBEGBDFCDEGACBEHBDCEIJ $.

  ${
    feq1d.1 $e |- ( ph -> F = G ) $.
    $( Equality deduction for functions.  (Contributed by NM, 19-Feb-2008.) $)
    feq1d $p |- ( ph -> ( F : A --> B <-> G : A --> B ) ) $=
      ( wceq wf wb feq1 syl ) ADEGBCDHBCEHIFBCDEJK $.
  $}

  ${
    feq2d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for functions.  (Contributed by Paul Chapman,
       22-Jun-2011.) $)
    feq2d $p |- ( ph -> ( F : A --> C <-> F : B --> C ) ) $=
      ( wceq wf wb feq2 syl ) ABCGBDEHCDEHIFBCDEJK $.

    $( Equality deduction for functions.  (Contributed by AV, 1-Jan-2020.) $)
    feq3d $p |- ( ph -> ( F : X --> A <-> F : X --> B ) ) $=
      ( wceq wf wb feq3 syl ) ABCGEBDHECDHIFBCEDJK $.
  $}

  ${
    feq12d.1 $e |- ( ph -> F = G ) $.
    feq12d.2 $e |- ( ph -> A = B ) $.
    $( Equality deduction for functions.  (Contributed by Paul Chapman,
       22-Jun-2011.) $)
    feq12d $p |- ( ph -> ( F : A --> C <-> G : B --> C ) ) $=
      ( wf feq1d feq2d bitrd ) ABDEIBDFICDFIABDEFGJABCDFHKL $.

    feq123d.3 $e |- ( ph -> C = D ) $.
    $( Equality deduction for functions.  (Contributed by Paul Chapman,
       22-Jun-2011.) $)
    feq123d $p |- ( ph -> ( F : A --> C <-> G : B --> D ) ) $=
      ( wf feq12d feq3d bitrd ) ABDFKCDGKCEGKABCDFGHILADEGCJMN $.
  $}

  $( Equality theorem for functions.  (Contributed by FL, 16-Nov-2008.) $)
  feq123 $p |- ( ( F = G /\ A = C /\ B = D ) ->
    ( F : A --> B <-> G : C --> D ) ) $=
    ( wceq w3a simp1 simp2 simp3 feq123d ) EFGZACGZBDGZHACBDEFMNOIMNOJMNOKL $.

  ${
    feq1i.1 $e |- F = G $.
    $( Equality inference for functions.  (Contributed by Paul Chapman,
       22-Jun-2011.) $)
    feq1i $p |- ( F : A --> B <-> G : A --> B ) $=
      ( wceq wf wb feq1 ax-mp ) CDFABCGABDGHEABCDIJ $.
  $}

  ${
    feq2i.1 $e |- A = B $.
    $( Equality inference for functions.  (Contributed by NM, 5-Sep-2011.) $)
    feq2i $p |- ( F : A --> C <-> F : B --> C ) $=
      ( wceq wf wb feq2 ax-mp ) ABFACDGBCDGHEABCDIJ $.
  $}

  ${
    feq23i.1 $e |- A = C $.
    feq23i.2 $e |- B = D $.
    $( Equality inference for functions.  (Contributed by Paul Chapman,
       22-Jun-2011.) $)
    feq23i $p |- ( F : A --> B <-> F : C --> D ) $=
      ( wceq wf wb feq23 mp2an ) ACHBDHABEICDEIJFGABCDEKL $.
  $}

  ${
    feq23d.1 $e |- ( ph -> A = C ) $.
    feq23d.2 $e |- ( ph -> B = D ) $.
    $( Equality deduction for functions.  (Contributed by NM, 8-Jun-2013.) $)
    feq23d $p |- ( ph -> ( F : A --> B <-> F : C --> D ) ) $=
      ( eqidd feq123d ) ABDCEFFAFIGHJ $.
  $}

  ${
    $d y F $.  $d y A $.  $d y B $.  $d x y $.
    nff.1 $e |- F/_ x F $.
    nff.2 $e |- F/_ x A $.
    nff.3 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for a mapping.  (Contributed by NM,
       29-Jan-2004.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nff $p |- F/ x F : A --> B $=
      ( wf wfn crn wss wa df-f nffn nfrn nfss nfan nfxfr ) BCDHDBIZDJZCKZLABCDM
      SUAAABDEFNATCADEOGPQR $.
  $}

  ${
    $d V x $.  $d X x $.
    $( Distribute proper substitution through the function predicate with a
       domain.  (Contributed by Alexander van der Vekens, 15-Jul-2018.) $)
    sbcfng $p |- ( X e. V -> ( [. X / x ]. F Fn A
                              <-> [_ X / x ]_ F Fn [_ X / x ]_ A ) ) $=
      ( wcel wfn wsbc wfun cdm wa csb wb df-fn a1i sbcbidv sbcfung sbceqg csbdm
      wceq eqeq1i syl6bb anbi12d sbcan 3bitr4g bitrd ) EDFZCBGZAEHCIZCJZBTZKZAE
      HZAECLZAEBLZGZUGUHULAEUHULMUGCBNOPUGUIAEHZUKAEHZKUNIZUNJZUOTZKUMUPUGUQUSU
      RVAAECDQUGURAEUJLZUOTVAAEUJBDRVBUTUOAECSUAUBUCUIUKAEUDUNUONUEUF $.

    $( Distribute proper substitution through the function predicate with
       domain and codomain.  (Contributed by Alexander van der Vekens,
       15-Jul-2018.) $)
    sbcfg $p |- ( X e. V -> ( [. X / x ]. F : A --> B
                 <-> [_ X / x ]_ F : [_ X / x ]_ A --> [_ X / x ]_ B ) ) $=
      ( wcel wf wsbc wfn crn wss wa csb wb df-f a1i sbcbidv sbcfng sbcssg csbrn
      sseq1i syl6bb anbi12d sbcan 3bitr4g bitrd ) FEGZBCDHZAFIDBJZDKZCLZMZAFIZA
      FBNZAFCNZAFDNZHZUHUIUMAFUIUMOUHBCDPQRUHUJAFIZULAFIZMUQUOJZUQKZUPLZMUNURUH
      USVAUTVCABDEFSUHUTAFUKNZUPLVCAFUKCETVDVBUPAFDUAUBUCUDUJULAFUEUOUPUQPUFUG
      $.
  $}

  ${
    elimf.1 $e |- G : A --> B $.
    $( Eliminate a mapping hypothesis for the weak deduction theorem ~ dedth ,
       when a special case ` G : A --> B ` is provable, in order to convert
       ` F : A --> B ` from a hypothesis to an antecedent.  (Contributed by NM,
       24-Aug-2006.) $)
    elimf $p |- if ( F : A --> B , F , G ) : A --> B $=
      ( wf cif feq1 elimhyp ) ABCFZABJCDGZFABDFCDABCKHABDKHEI $.
  $}

  $( A mapping is a function.  (Contributed by NM, 2-Aug-1994.) $)
  ffn $p |- ( F : A --> B -> F Fn A ) $=
    ( wf wfn crn wss df-f simplbi ) ABCDCAECFBGABCHI $.

  $( Any function is a mapping into ` _V ` .  (Contributed by NM,
     31-Oct-1995.)  (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
  dffn2 $p |- ( F Fn A <-> F : A --> _V ) $=
    ( wfn crn cvv wss wa wf ssv biantru df-f bitr4i ) BACZMBDZEFZGAEBHOMNIJAEBK
    L $.

  $( A mapping is a function.  (Contributed by NM, 3-Aug-1994.) $)
  ffun $p |- ( F : A --> B -> Fun F ) $=
    ( wf wfn wfun ffn fnfun syl ) ABCDCAECFABCGACHI $.

  $( A mapping is a relation.  (Contributed by NM, 3-Aug-1994.) $)
  frel $p |- ( F : A --> B -> Rel F ) $=
    ( wf wfn wrel ffn fnrel syl ) ABCDCAECFABCGACHI $.

  $( The domain of a mapping.  (Contributed by NM, 2-Aug-1994.) $)
  fdm $p |- ( F : A --> B -> dom F = A ) $=
    ( wf wfn cdm wceq ffn fndm syl ) ABCDCAECFAGABCHACIJ $.

  ${
    fdmi.1 $e |- F : A --> B $.
    $( The domain of a mapping.  (Contributed by NM, 28-Jul-2008.) $)
    fdmi $p |- dom F = A $=
      ( wf cdm wceq fdm ax-mp ) ABCECFAGDABCHI $.
  $}

  $( The range of a mapping.  (Contributed by NM, 3-Aug-1994.) $)
  frn $p |- ( F : A --> B -> ran F C_ B ) $=
    ( wf wfn crn wss df-f simprbi ) ABCDCAECFBGABCHI $.

  $( A function maps to its range.  (Contributed by NM, 1-Sep-1999.) $)
  dffn3 $p |- ( F Fn A <-> F : A --> ran F ) $=
    ( wfn crn wss wa wf ssid biantru df-f bitr4i ) BACZLBDZMEZFAMBGNLMHIAMBJK
    $.

  $( Expanding the codomain of a mapping.  (Contributed by NM, 10-May-1998.)
     (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
  fss $p |- ( ( F : A --> B /\ B C_ C ) -> F : A --> C ) $=
    ( wss wf wfn crn wa sstr2 com12 anim2d df-f 3imtr4g impcom ) BCEZABDFZACDFZ
    PDAGZDHZBEZISTCEZIQRPUAUBSUAPUBTBCJKLABDMACDMNO $.

  ${
    fssd.f $e |- ( ph -> F : A --> B ) $.
    fssd.b $e |- ( ph -> B C_ C ) $.
    $( Expanding the codomain of a mapping, deduction form.  (Contributed by
       Glauco Siliprandi, 11-Dec-2019.) $)
    fssd $p |- ( ph -> F : A --> C ) $=
      ( wf wss fss syl2anc ) ABCEHCDIBDEHFGBCDEJK $.
  $}

  $( Composition of two mappings.  (Contributed by NM, 29-Aug-1999.)  (Proof
     shortened by Andrew Salmon, 17-Sep-2011.) $)
  fco $p |- ( ( F : B --> C /\ G : A --> B ) -> ( F o. G ) : A --> C ) $=
    ( wf wa ccom wfn crn wss df-f wi fnco 3expib adantr rncoss sstr mpan adantl
    jctird imp syl2anb sylibr ) BCDFZABEFZGDEHZAIZUGJZCKZGZACUGFUEDBIZDJZCKZGZE
    AIZEJBKZGZUKUFBCDLABELUOURUKUOURUHUJULURUHMUNULUPUQUHBADENOPUNUJULUIUMKUNUJ
    DEQUIUMCRSTUAUBUCACUGLUD $.

  $( Functionality of a composition with weakened out of domain condition on
     the first argument.  (Contributed by Stefan O'Rear, 11-Mar-2015.) $)
  fco2 $p |- ( ( ( F |` B ) : B --> C /\ G : A --> B ) ->
      ( F o. G ) : A --> C ) $=
    ( cres wf wa ccom fco wceq crn wss frn cores syl adantl feq1d mpbid ) BCDBF
    ZGZABEGZHZACTEIZGACDEIZGABCTEJUCACUDUEUBUDUEKZUAUBELBMUFABENDEBOPQRS $.

  $( A mapping is a class of ordered pairs.  (Contributed by NM, 3-Aug-1994.)
     (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
  fssxp $p |- ( F : A --> B -> F C_ ( A X. B ) ) $=
    ( wf cdm crn cxp wrel wss frel relssdmrn syl wceq fdm eqimss xpss12 syl2anc
    frn sstrd ) ABCDZCCEZCFZGZABGZTCHCUCIABCJCKLTUAAIZUBBIUCUDITUAAMUEABCNUAAOL
    ABCRUAAUBBPQS $.

  $( Two ways of specifying a partial function from ` A ` to ` B ` .
     (Contributed by NM, 13-Nov-2007.) $)
  funssxp $p |- ( ( Fun F /\ F C_ ( A X. B ) ) <->
             ( F : dom F --> B /\ dom F C_ A ) ) $=
    ( wfun cxp wss wa cdm wf wfn funfn biimpi rnss rnxpss syl6ss anim12i sylibr
    crn df-f jca dmss dmxpss adantl ffun adantr fssxp xpss1 sylan9ss impbii ) C
    DZCABEZFZGZCHZBCIZUNAFZGZUMUOUPUMCUNJZCRZBFZGUOUJURULUTUJURCKLULUSUKRBCUKMA
    BNOPUNBCSQULUPUJULUNUKHACUKUAABUBOUCTUQUJULUOUJUPUNBCUDUEUOUPCUNBEUKUNBCUFU
    NABUGUHTUI $.

  $( A mapping is a partial function.  (Contributed by NM, 25-Nov-2007.) $)
  ffdm $p |- ( F : A --> B -> ( F : dom F --> B /\ dom F C_ A ) ) $=
    ( wf cdm wss fdm feq2d ibir wceq eqimss syl jca ) ABCDZCEZBCDZOAFZNPNOABCAB
    CGZHINOAJQROAKLM $.

  $( A different way to write ` F ` is a function.  (Contributed by Thierry
     Arnoux, 7-Dec-2016.) $)
  fdmrn $p |- ( Fun F <-> F : dom F --> ran F ) $=
    ( cdm crn wf wfn wfun wss ssid df-f mpbiran2 wceq eqid df-fn bitr2i ) ABZAC
    ZADZAOEZAFZQRPPGPHOPAIJRSOOKOLAOMJN $.

  $( The members of an ordered pair element of a mapping belong to the
     mapping's domain and codomain.  (Contributed by NM, 10-Dec-2003.)
     (Revised by Mario Carneiro, 26-Apr-2015.) $)
  opelf $p |- ( ( F : A --> B /\ <. C , D >. e. F ) ->
              ( C e. A /\ D e. B ) ) $=
    ( wf cop wcel wa cxp fssxp sseld opelxp syl6ib imp ) ABEFZCDGZEHZCAHDBHIZPR
    QABJZHSPETQABEKLCDABMNO $.

  $( The union of two functions with disjoint domains.  (Contributed by NM,
     22-Sep-2004.) $)
  fun $p |- ( ( ( F : A --> C /\ G : B --> D ) /\ ( A i^i B ) = (/) ) ->
             ( F u. G ) : ( A u. B ) --> ( C u. D ) ) $=
    ( cin c0 wceq wf wa cun wfn crn wss fnun expcom wi rnun df-f unss12 anim12d
    syl5eqss a1i anbi12i an4 bitri 3imtr4g impcom ) ABGHIZACEJZBDFJZKZABLZCDLZE
    FLZJZUJEAMZFBMZKZENZCOZFNZDOZKZKZUPUNMZUPNZUOOZKUMUQUJUTVGVEVIUTUJVGABEFPQV
    EVIRUJVEVHVAVCLUOEFSVACVCDUAUCUDUBUMURVBKZUSVDKZKVFUKVJULVKACETBDFTUEURVBUS
    VDUFUGUNUOUPTUHUI $.

  $( The union of two functions with disjoint domains.  (Contributed by Mario
     Carneiro, 12-Mar-2015.) $)
  fun2 $p |- ( ( ( F : A --> C /\ G : B --> C ) /\ ( A i^i B ) = (/) ) ->
             ( F u. G ) : ( A u. B ) --> C ) $=
    ( wf wa cin c0 wceq cun fun wb unidm feq3 ax-mp sylib ) ACDFBCEFGABHIJGABKZ
    CCKZDEKZFZRCTFZABCCDELSCJUAUBMCNSCRTOPQ $.

  $( Composition of two functions.  (Contributed by NM, 22-May-2006.) $)
  fnfco $p |- ( ( F Fn A /\ G : B --> A ) -> ( F o. G ) Fn B ) $=
    ( wf wfn crn wss wa ccom df-f fnco 3expb sylan2b ) BADECAFZDBFZDGAHZICDJBFZ
    BADKOPQRABCDLMN $.

  $( Restriction of a function with a subclass of its domain.  (Contributed by
     NM, 23-Sep-2004.) $)
  fssres $p |- ( ( F : A --> B /\ C C_ A ) -> ( F |` C ) : C --> B ) $=
    ( wf wss cres wfn crn df-f fnssres resss rnss ax-mp sstr mpan anim12i an32s
    wa sylanb sylibr ) ABDEZCAFZSDCGZCHZUDIZBFZSZCBUDEUBDAHZDIZBFZSUCUHABDJUIUC
    UKUHUIUCSUEUKUGACDKUFUJFZUKUGUDDFULDCLUDDMNUFUJBOPQRTCBUDJUA $.

  ${
    fssresd.1 $e |- ( ph -> F : A --> B ) $.
    fssresd.2 $e |- ( ph -> C C_ A ) $.
    $( Restriction of a function with a subclass of its domain, deduction
       form.  (Contributed by Glauco Siliprandi, 11-Dec-2019.) $)
    fssresd $p |- ( ph -> ( F |` C ) : C --> B ) $=
      ( wf wss cres fssres syl2anc ) ABCEHDBIDCEDJHFGBCDEKL $.
  $}

  $( Restriction of a restricted function with a subclass of its domain.
     (Contributed by NM, 21-Jul-2005.) $)
  fssres2 $p |- ( ( ( F |` A ) : A --> B /\ C C_ A ) ->
                ( F |` C ) : C --> B ) $=
    ( cres wf wss wa fssres wb resabs1 feq1d adantl mpbid ) ABDAEZFZCAGZHCBOCEZ
    FZCBDCEZFZABCOIQSUAJPQCBRTDCAKLMN $.

  $( An identity for the mapping relationship under restriction.  (Contributed
     by Scott Fenton, 4-Sep-2011.)  (Proof shortened by Mario Carneiro,
     26-May-2016.) $)
  fresin $p |- ( F : A --> B -> ( F |` X ) : ( A i^i X ) --> B ) $=
    ( wf cin cres wss inss1 fssres mpan2 resres wfn ffn fnresdm reseq1d syl5eqr
    wceq syl feq1d mpbid ) ABCEZADFZBCUCGZEZUCBCDGZEUBUCAHUEADIABUCCJKUBUCBUDUF
    UBUDCAGZDGUFCADLUBUGCDUBCAMUGCRABCNACOSPQTUA $.

  $( If two functions agree on their common domain, express their union as a
     union of three functions with pairwise disjoint domains.  (Contributed by
     Stefan O'Rear, 9-Oct-2014.) $)
  resasplit $p |- ( ( F Fn A /\ G Fn B /\
      ( F |` ( A i^i B ) ) = ( G |` ( A i^i B ) ) ) -> ( F u. G ) =
  ( ( F |` ( A i^i B ) ) u. ( ( F |` ( A \ B ) ) u. ( G |` ( B \ A ) ) ) ) ) $=
    ( wfn cin cres w3a cun fnresdm uneq12 syl2an inundif reseq2i resundi eqtr3i
    wceq cdif uneq1i syl6eq 3adant3 simp3 uneq1d uneq2d incom eqtri uneq12i un4
    syl6reqr unidm eqtr3d ) CAEZDBEZCABFZGZDUNGZQZHZCAGZDBGZIZCDIZUOCABRZGZDBAR
    ZGZIZIZULUMVAVBQZUQULUSCQUTDQVIUMACJBDJUSCUTDKLUAURVAUOUOIZVGIZVHURVAUOVDIZ
    UOVFIZIZVKURVNVLUPVFIZIVAURVMVOVLURUOUPVFULUMUQUBUCUDUSVLUTVOCUNVCIZGUSVLVP
    ACABMNCUNVCOPDUNVEIZGUTVOVQBDVQBAFZVEIBUNVRVEABUESBAMUFNDUNVEOPUGUIUOVDUOVF
    UHTVJUOVGUOUJSTUK $.

  $( The union of two functions which agree on their common domain is a
     function.  (Contributed by Stefan O'Rear, 9-Oct-2014.) $)
  fresaun $p |- ( ( F : A --> C /\ G : B --> C /\
      ( F |` ( A i^i B ) ) = ( G |` ( A i^i B ) ) ) ->
    ( F u. G ) : ( A u. B ) --> C ) $=
    ( wf cin cres wceq cdif cun c0 wss fssres sylancl difss disjdif 3eqtri fun2
    a1i w3a simp1 inss1 simp2 indifdir difeq1i 0dif syl21anc inass ineq2i incom
    indi in0 ineq1i eqtri uneq12i un0 wfn id resasplit syl3an feq1d un12 uneq1i
    ffn inundif uneq2i undif1 feq2i syl6rbbr mpbid ) ACDFZBCEFZDABGZHZEVNHIZUAZ
    VNABJZBAJZKZKZCVODVRHZEVSHZKZKZFZABKZCDEKZFZVQVNCVOFZVTCWDFZVNVTGZLIZWFVQVL
    VNAMWJVLVMVPUBZABUCACVNDNOVQVRCWBFZVSCWCFZVRVSGZLIZWKVQVLVRAMWOWNABPACVRDNO
    VQVMVSBMWPVLVMVPUDBAPBCVSENOWRVQWQAVSGZBVSGZJLWTJLABVSUEWSLWTABQZUFWTUGRTVR
    VSCWBWCSUHWMVQWLVNVRGZVNVSGZKLLKLVNVRVSULXBLXCLXBABVRGZGALGLABVRUIXDLABAQUJ
    AUMRXCBAGZVSGZLVNXEVSABUKZUNXFBWSGBLGLBAVSUIWSLBXAUJBUMRUOUPLUQRTVNVTCVOWDS
    UHVQWIWGCWEFWFVQWGCWHWEVLDAURVMEBURVPVPWHWEIACDVEBCEVEVPUSABDEUTVAVBWAWGCWE
    WAVRVNVSKZKVRBKWGVNVRVSVCXHBVRXHXEVSKBVNXEVSXGVDBAVFUOVGABVHRVIVJVK $.

  $( From the union of two functions that agree on the domain overlap, either
     component can be recovered by restriction.  (Contributed by Stefan O'Rear,
     9-Oct-2014.) $)
  fresaunres2 $p |- ( ( F : A --> C /\ G : B --> C /\
      ( F |` ( A i^i B ) ) = ( G |` ( A i^i B ) ) ) ->
    ( ( F u. G ) |` B ) = G ) $=
    ( wf cin cres wceq cun cdif wfn ffn resundir wss ax-mp c0 cdm eqtri syl5eq
    w3a id resasplit syl3an reseq1d inss2 resabs2 uneq12i ineq2i disjdif ineq1i
    dmres inass inss1 0ss eqssi 3eqtr3i wrel wb relres reldm0 mpbir difss simp3
    uneq2i uneq1d wa uncom un0 resundi incom uneq1i inundif reseq2i fnresdm syl
    adantl syl5eqr 3adant3 eqtrd ) ACDFZBCEFZDABGZHZEWCHZIZUAZDEJZBHWDDABKZHZEB
    AKZHZJZJZBHZEWGWHWNBWADALWBEBLZWFWFWHWNIACDMBCEMZWFUBABDEUCUDUEWGWOWDBHZWMB
    HZJZEWDWMBNWGWTWDWJBHZWLBHZJZJZEWRWDWSXCWCBOWRWDIABUFDWCBUGPWJWLBNUHWGXDWDQ
    WLJZJZEXCXEWDXAQXBWLXAQIZXARZQIZXHBWJRZGZQWJBULXKBWIDRZGZGZQXJXMBDWIULUIBWI
    GZXLGQXLGZXNQXOQXLBAUJUKBWIXLUMXPQQXLUNXPUOUPUQSSXAURXGXIUSWJBUTXAVAPVBWKBO
    XBWLIBAVCEWKBUGPUHVEWGXFWEXEJZEWGWDWEXEWAWBWFVDVFWAWBXQEIWFWAWBVGZXQWEWLJZE
    XEWLWEXEWLQJWLQWLVHWLVISVEXRXSEWCWKJZHZEEWCWKVJXRYAEBHZEXTBEXTBAGZWKJBWCYCW
    KABVKVLBAVMSVNWBYBEIZWAWBWPYDWQBEVOVPVQTVRTVSVTTTTVT $.

  $( From the union of two functions that agree on the domain overlap, either
     component can be recovered by restriction.  (Contributed by Mario
     Carneiro, 16-Feb-2015.) $)
  fresaunres1 $p |- ( ( F : A --> C /\ G : B --> C /\
      ( F |` ( A i^i B ) ) = ( G |` ( A i^i B ) ) ) ->
    ( ( F u. G ) |` A ) = F ) $=
    ( wf cin cres w3a cun uncom reseq1i incom reseq2i eqeq12i eqcom fresaunres2
    wceq bitri 3com12 syl3an3b syl5eq ) ACDFZBCEFZDABGZHZEUEHZRZIDEJZAHEDJZAHZD
    UIUJADEKLUHUCUDEBAGZHZDULHZRZUKDRZUHUNUMRUOUFUNUGUMUEULDABMZNUEULEUQNOUNUMP
    SUDUCUOUPBACEDQTUAUB $.

  ${
    $d x y z A $.  $d x y z B $.  $d x y z F $.
    $( Composition of a mapping and restricted identity.  (Contributed by NM,
       13-Dec-2003.)  (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
    fcoi1 $p |- ( F : A --> B -> ( F o. ( _I |` A ) ) = F ) $=
      ( wf wfn cid cres ccom wceq ffn wfun cdm wa df-fn wss eqimss ccnv reseq1i
      cnvi syl cnveqi cnvresid eqtr2i coeq2i cores2 syl5eq wrel sylan9eqr sylbi
      funrel coi1 ) ABCDCAEZCFAGZHZCIZABCJULCKZCLZAIZMUOCANURUPUNCFHZCURUQAOZUN
      USIUQAPUTUNCFQZAGZQZHUSUMVCCVCUMQUMVBUMVAFASRUAAUBUCUDCFAUEUFTUPCUGUSCICU
      JCUKTUHUIT $.

    $( Composition of restricted identity and a mapping.  (Contributed by NM,
       13-Dec-2003.)  (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
    fcoi2 $p |- ( F : A --> B -> ( ( _I |` B ) o. F ) = F ) $=
      ( wf wfn crn wss wa cid cres ccom wceq df-f cores wrel coi2 syl sylan9eqr
      fnrel sylbi ) ABCDCAEZCFBGZHIBJCKZCLABCMUBUAUCICKZCICBNUACOUDCLACSCPQRT
      $.
  $}

  ${
    $d y F $.  $d y A $.  $d y B $.  $d y C $.
    $( There is exactly one value of a function in its codomain.  (Contributed
       by NM, 10-Dec-2003.) $)
    feu $p |- ( ( F : A --> B /\ C e. A ) -> E! y e. B <. C , y >. e. F ) $=
      ( wf wcel wa cv cop weu wreu wfn ffn fneu2 sylan wb opelf simprd ex mpbid
      pm4.71rd eubidv adantr df-reu sylibr ) BCEFZDBGZHZAIZCGZDUJJEGZHZAKZULACL
      UIULAKZUNUGEBMUHUOBCENABDEOPUGUOUNQUHUGULUMAUGULUKUGULUKUGULHUHUKBCDUJERS
      TUBUCUDUAULACUEUF $.
  $}

  ${
    $d x y F $.  $d x y A $.  $d x y B $.
    $( The converse of a restriction of a function.  (Contributed by NM,
       26-Mar-1998.) $)
    fcnvres $p |- ( F : A --> B -> `' ( F |` A ) = ( `' F |` B ) ) $=
      ( vy vx wf cres ccnv relcnv cv cop wcel wa ex pm4.71d vex opelcnv opelres
      bitri syl6bbr relres opelf simpld simprd anbi1i bitr3d eqrelrdv ) ABCFZDE
      CAGZHZCHZBGZUIIUKBUAUHEJZDJZKZCLZUNUMKZUJLZUQULLZUHUPUPUMALZMZURUHUPUTUHU
      PUTUHUPMZUTUNBLZABUMUNCUBZUCNOURUOUILVAUNUMUIDPZEPZQUMUNCAVERSTUHUPUPVCMZ
      USUHUPVCUHUPVCVBUTVCVDUDNOUSUQUKLZVCMVGUNUMUKBVFRVHUPVCUNUMCVEVFQUESTUFUG
      $.
  $}

  $( The preimage of a class disjoint with a mapping's codomain is empty.
     (Contributed by FL, 24-Jan-2007.) $)
  fimacnvdisj $p |- ( ( F : A --> B /\ ( B i^i C ) = (/) ) ->
    ( `' F "" C ) = (/) ) $=
    ( wf cin c0 wceq wa ccnv cdm cima wss crn df-rn frn adantr syl5eqssr ssdisj
    sylancom imadisj sylibr ) ABDEZBCFGHZIZDJZKZCFGHZUFCLGHUCUDUGBMUHUEUGDNZBDO
    UCUIBMUDABDPQRUGBCSTUFCUAUB $.

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x F $.
    fint.1 $e |- B =/= (/) $.
    $( Function into an intersection.  (Contributed by NM, 14-Oct-1999.)
       (Proof shortened by Andrew Salmon, 17-Sep-2011.) $)
    fint $p |- ( F : A --> |^| B <-> A. x e. B F : A --> x ) $=
      ( wfn crn cint wss wa cv wral wf ssint anbi2i c0 wne wb r19.28zv df-f
      ax-mp bitr4i ralbii 3bitr4i ) DBFZDGZCHZIZJZUEUFAKZIZJZACLZBUGDMBUJDMZACL
      UIUEUKACLZJZUMUHUOUEAUFCNOCPQUMUPREUEUKACSUAUBBUGDTUNULACBUJDTUCUD $.
  $}

  $( Mapping into an intersection.  (Contributed by NM, 14-Sep-1999.)  (Proof
     shortened by Andrew Salmon, 17-Sep-2011.) $)
  fin $p |- ( F : A --> ( B i^i C ) <-> ( F : A --> B /\ F : A --> C ) ) $=
    ( wfn crn cin wss wa wf ssin anbi2i anandi bitr3i df-f anbi12i 3bitr4i ) DA
    EZDFZBCGZHZIZRSBHZIZRSCHZIZIZATDJABDJZACDJZIUBRUCUEIZIUGUJUARSBCKLRUCUEMNAT
    DOUHUDUIUFABDOACDOPQ $.

  $( The empty function.  (Contributed by NM, 14-Aug-1999.) $)
  f0 $p |- (/) : (/) --> A $=
    ( c0 wf wfn crn wss wceq eqid fn0 mpbir rn0 0ss eqsstri df-f mpbir2an ) BAB
    CBBDZBEZAFPBBGBHBIJQBAKALMBABNO $.

  $( A class is a function with empty codomain iff it and its domain are
     empty.  (Contributed by NM, 10-Dec-2003.) $)
  f00 $p |- ( F : A --> (/) <-> ( F = (/) /\ A = (/) ) ) $=
    ( c0 wf wceq wa wfn wfun cdm ffun crn wss frn ss0 syl dm0rn0 df-fn sylanbrc
    sylibr fn0 sylib fdm eqtr3d jca f0 feq1 feq2 sylan9bb mpbiri impbii ) ACBDZ
    BCEZACEZFZUKULUMUKBCGZULUKBHBIZCEZUOACBJUKBKZCEZUQUKURCLUSACBMURNOBPSZBCQRB
    TUAUKUPACACBUBUTUCUDUNUKCCCDZCUEULUKACCDUMVAACBCUFACCCUGUHUIUJ $.

  $( A function with empty domain is empty.  (Contributed by Alexander van der
     Vekens, 30-Jun-2018.) $)
  f0bi $p |- ( F : (/) --> X <-> F = (/) ) $=
    ( c0 wf wceq wfn ffn fn0 sylib f0 feq1 mpbiri impbii ) CBADZACEZNACFOCBAGAH
    IONCBCDBJCBACKLM $.

  $( A function is empty iff it has an empty domain.  (Contributed by AV,
     10-Feb-2019.) $)
  f0dom0 $p |- ( F : X --> Y -> ( X = (/) <-> F = (/) ) ) $=
    ( wf c0 wceq feq2 f0bi biimpi syl6bi com12 feq1 cdm dm0 fdm syl5reqr impbid
    ) BCADZBEFZAEFZSRTSRECADZTBECAGUATACHIJKTRSTRBCEDZSBCAELUBEEMBNBCEOPJKQ $.

  ${
    $d E y $.  $d Y y $.
    $( If there is no element in the range of a function, its domain must be
       empty.  (Contributed by Alexander van der Vekens, 12-Jul-2018.) $)
    f0rn0 $p |- ( ( E : X --> Y /\ -. E. y e. Y y e. ran E ) -> X = (/) ) $=
      ( wf cv crn wcel wrex wn c0 wceq cdm wi fdm wa cin sylbi syl5bir imp wral
      wss frn ralnex df-ss incom eqeq1i eqtr2 ex syl adantl dm0rn0 sylibr eqeq1
      disj wb eqcoms adantr mpbird exp32 mpcom ) CDBEZAFBGZHZADIJZCKLZBMZCLZVBV
      EVFNCDBOVHVBVEVFVHVBVEPZPZVFVGKLZVJVCKLZVKVIVLVHVBVEVLVBVCDUBZVEVLNCDBUCV
      EVDJADUAZVMVLVDADUDVNDVCQZKLZVMVLADVCUOVMVCDQZVCLZVPVLNZVCDUEVRVOVCLZVSVQ
      VOVCVCDUFUGVTVPVLVOVCKUHUIRRSSUJTUKBULUMVHVFVKUPZVIWACVGCVGKUNUQURUSUTVAT
      $.
  $}

  ${
    $d x y A $.  $d x y B $.
    fconst.1 $e |- B e. _V $.
    $( A Cartesian product with a singleton is a constant function.
       (Contributed by NM, 14-Aug-1999.)  (Proof shortened by Andrew Salmon,
       17-Sep-2011.) $)
    fconst $p |- ( A X. { B } ) : A --> { B } $=
      ( vx csn cxp wf wfn crn wss fconstmpt fnmpti rnxpss df-f mpbir2an ) ABEZA
      PFZGQAHQIPJDABQCDABKLAPMAPQNO $.
  $}

  ${
    $d x A $.  $d x B $.
    $( A Cartesian product with a singleton is a constant function.
       (Contributed by NM, 19-Oct-2004.) $)
    fconstg $p |- ( B e. V -> ( A X. { B } ) : A --> { B } ) $=
      ( vx cv csn cxp wf wceq sneq xpeq2d feq1 feq3 sylan9bb syl2anc vex fconst
      wb vtoclg ) ADEZFZAUAGZHZABFZAUDGZHZDBCTBIZUBUEIZUAUDIZUCUFRUGUAUDATBJZKU
      JUHUCAUAUEHUIUFAUAUBUELUAUDAUEMNOATDPQS $.
  $}

  $( A Cartesian product with a singleton is a constant function.  (Contributed
     by NM, 24-Jul-2014.) $)
  fnconstg $p |- ( B e. V -> ( A X. { B } ) Fn A ) $=
    ( wcel csn cxp wf wfn fconstg ffn syl ) BCDABEZALFZGMAHABCIALMJK $.

  $( Constant function with loose range.  (Contributed by Stefan O'Rear,
     1-Feb-2015.) $)
  fconst6g $p |- ( B e. C -> ( A X. { B } ) : A --> C ) $=
    ( wcel csn cxp fconstg snssi fssd ) BCDABEZCAJFABCGBCHI $.

  ${
    fconst6.1 $e |- B e. C $.
    $( A constant function as a mapping.  (Contributed by Jeff Madsen,
       30-Nov-2009.)  (Revised by Mario Carneiro, 22-Apr-2015.) $)
    fconst6 $p |- ( A X. { B } ) : A --> C $=
      ( wcel csn cxp wf fconst6g ax-mp ) BCEACABFGHDABCIJ $.
  $}

  $( Equality theorem for one-to-one functions.  (Contributed by NM,
     10-Feb-1997.) $)
  f1eq1 $p |- ( F = G -> ( F : A -1-1-> B <-> G : A -1-1-> B ) ) $=
    ( wceq wf ccnv wfun wa wf1 feq1 cnveq funeqd anbi12d df-f1 3bitr4g ) CDEZAB
    CFZCGZHZIABDFZDGZHZIABCJABDJQRUATUCABCDKQSUBCDLMNABCOABDOP $.

  $( Equality theorem for one-to-one functions.  (Contributed by NM,
     10-Feb-1997.) $)
  f1eq2 $p |- ( A = B -> ( F : A -1-1-> C <-> F : B -1-1-> C ) ) $=
    ( wceq wf ccnv wfun wa wf1 feq2 anbi1d df-f1 3bitr4g ) ABEZACDFZDGHZIBCDFZQ
    IACDJBCDJOPRQABCDKLACDMBCDMN $.

  $( Equality theorem for one-to-one functions.  (Contributed by NM,
     10-Feb-1997.) $)
  f1eq3 $p |- ( A = B -> ( F : C -1-1-> A <-> F : C -1-1-> B ) ) $=
    ( wceq wf ccnv wfun wa wf1 feq3 anbi1d df-f1 3bitr4g ) ABEZCADFZDGHZICBDFZQ
    ICADJCBDJOPRQABCDKLCADMCBDMN $.

  ${
    $d y F $.  $d y A $.  $d y B $.  $d x y $.
    nff1.1 $e |- F/_ x F $.
    nff1.2 $e |- F/_ x A $.
    nff1.3 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for a one-to-one function.
       (Contributed by NM, 16-May-2004.) $)
    nff1 $p |- F/ x F : A -1-1-> B $=
      ( wf1 wf ccnv wfun wa df-f1 nff nfcnv nffun nfan nfxfr ) BCDHBCDIZDJZKZLA
      BCDMSUAAABCDEFGNATADEOPQR $.
  $}

  ${
    $d x y F $.
    $( Alternate definition of a one-to-one function.  (Contributed by NM,
       31-Dec-1996.) $)
    dff12 $p |- ( F : A -1-1-> B <-> ( F : A --> B /\ A. y E* x x F y ) ) $=
      ( wf1 wf ccnv wfun wa cv wbr wmo wal df-f1 funcnv2 anbi2i bitri ) CDEFCDE
      GZEHIZJSAKBKELAMBNZJCDEOTUASABEPQR $.
  $}

  $( A one-to-one mapping is a mapping.  (Contributed by NM, 31-Dec-1996.) $)
  f1f $p |- ( F : A -1-1-> B -> F : A --> B ) $=
    ( wf1 wf ccnv wfun df-f1 simplbi ) ABCDABCECFGABCHI $.

  $( A one-to-one mapping is a function on its domain.  (Contributed by NM,
     8-Mar-2014.) $)
  f1fn $p |- ( F : A -1-1-> B -> F Fn A ) $=
    ( wf1 wf wfn f1f ffn syl ) ABCDABCECAFABCGABCHI $.

  $( A one-to-one mapping is a function.  (Contributed by NM, 8-Mar-2014.) $)
  f1fun $p |- ( F : A -1-1-> B -> Fun F ) $=
    ( wf1 wfn wfun f1fn fnfun syl ) ABCDCAECFABCGACHI $.

  $( A one-to-one onto mapping is a relation.  (Contributed by NM,
     8-Mar-2014.) $)
  f1rel $p |- ( F : A -1-1-> B -> Rel F ) $=
    ( wf1 wfn wrel f1fn fnrel syl ) ABCDCAECFABCGACHI $.

  $( The domain of a one-to-one mapping.  (Contributed by NM, 8-Mar-2014.) $)
  f1dm $p |- ( F : A -1-1-> B -> dom F = A ) $=
    ( wf1 wfn cdm wceq f1fn fndm syl ) ABCDCAECFAGABCHACIJ $.

  $( A function that is one-to-one is also one-to-one on some superset of its
     codomain.  (Contributed by Mario Carneiro, 12-Jan-2013.) $)
  f1ss $p |- ( ( F : A -1-1-> B /\ B C_ C ) -> F : A -1-1-> C ) $=
    ( wf1 wss wa wf ccnv wfun f1f fss sylan df-f1 simprbi adantr sylanbrc ) ABD
    EZBCFZGACDHZDIJZACDERABDHZSTABDKABCDLMRUASRUBUAABDNOPACDNQ $.

  $( A function that is one-to-one is also one-to-one on some superset of its
     range.  (Contributed by Stefan O'Rear, 20-Feb-2015.) $)
  f1ssr $p |- ( ( F : A -1-1-> B /\ ran F C_ C ) -> F : A -1-1-> C ) $=
    ( wf1 crn wss wa wf ccnv wfun f1fn adantr simpr df-f sylanbrc df-f1 simprbi
    wfn ) ABDEZDFCGZHZACDIZDJKZACDEUBDASZUAUCTUEUAABDLMTUANACDOPTUDUATABDIUDABD
    QRMACDQP $.

  $( A function that is one-to-one is also one-to-one on some subset of its
     domain.  (Contributed by Mario Carneiro, 17-Jan-2015.) $)
  f1ssres $p |- ( ( F : A -1-1-> B /\ C C_ A ) -> ( F |` C ) : C -1-1-> B ) $=
    ( wf1 wss wa cres wf ccnv wfun f1f fssres sylan simprbi funres11 syl adantr
    df-f1 sylanbrc ) ABDEZCAFZGCBDCHZIZUCJKZCBUCEUAABDIZUBUDABDLABCDMNUAUEUBUAD
    JKZUEUAUFUGABDSOCDPQRCBUCST $.

  $( Two ways to express that a set ` A ` (not necessarily a function) is
     one-to-one.  Each side is equivalent to Definition 6.4(3) of
     [TakeutiZaring] p. 24, who use the notation ""Un_2 (A)"" for one-to-one.  We
     do not introduce a separate notation since we rarely use it.  (Contributed
     by NM, 13-Aug-2004.) $)
  f1cnvcnv $p |- ( `' `' A : dom A -1-1-> _V
             <-> ( Fun `' A /\ Fun `' `' A ) ) $=
    ( cdm cvv ccnv wf1 wf wfun wa df-f1 wfn dffn2 wceq dmcnvcnv mpbiran2 bitr3i
    df-fn wrel relcnv dfrel2 mpbi funeqi anbi12ci bitri ) ABZCADZDZEUDCUFFZUFDZ
    GZHUEGZUFGZHUDCUFIUGUKUIUJUGUFUDJZUKUDUFKULUKUFBUDLAMUFUDPNOUHUEUEQUHUELARU
    ESTUAUBUC $.

  $( Composition of one-to-one functions.  Exercise 30 of [TakeutiZaring]
     p. 25.  (Contributed by NM, 28-May-1998.) $)
  f1co $p |- ( ( F : B -1-1-> C /\ G : A -1-1-> B ) ->
              ( F o. G ) : A -1-1-> C ) $=
    ( wf1 wa ccom wf ccnv wfun df-f1 fco funco cnvco funeqi sylibr anim12i an4s
    ancoms syl2anb ) BCDFZABEFZGACDEHZIZUDJZKZGZACUDFUBBCDIZDJZKZGABEIZEJZKZGUH
    UCBCDLABELUIULUKUNUHUIULGUEUKUNGUGABCDEMUNUKUGUNUKGUMUJHZKUGUMUJNUFUODEOPQT
    RSUAACUDLQ $.

  $( Equality theorem for onto functions.  (Contributed by NM, 1-Aug-1994.) $)
  foeq1 $p |- ( F = G -> ( F : A -onto-> B <-> G : A -onto-> B ) ) $=
    ( wceq wfn crn wa wfo fneq1 rneq eqeq1d anbi12d df-fo 3bitr4g ) CDEZCAFZCGZ
    BEZHDAFZDGZBEZHABCIABDIPQTSUBACDJPRUABCDKLMABCNABDNO $.

  $( Equality theorem for onto functions.  (Contributed by NM, 1-Aug-1994.) $)
  foeq2 $p |- ( A = B -> ( F : A -onto-> C <-> F : B -onto-> C ) ) $=
    ( wceq wfn crn wa wfo fneq2 anbi1d df-fo 3bitr4g ) ABEZDAFZDGCEZHDBFZPHACDI
    BCDINOQPABDJKACDLBCDLM $.

  $( Equality theorem for onto functions.  (Contributed by NM, 1-Aug-1994.) $)
  foeq3 $p |- ( A = B -> ( F : C -onto-> A <-> F : C -onto-> B ) ) $=
    ( wceq wfn crn wa wfo eqeq2 anbi2d df-fo 3bitr4g ) ABEZDCFZDGZAEZHOPBEZHCAD
    ICBDINQROABPJKCADLCBDLM $.

  ${
    $d y F $.  $d y A $.  $d y B $.  $d x y $.
    nffo.1 $e |- F/_ x F $.
    nffo.2 $e |- F/_ x A $.
    nffo.3 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for an onto function.  (Contributed by
       NM, 16-May-2004.) $)
    nffo $p |- F/ x F : A -onto-> B $=
      ( wfo wfn crn wceq wa df-fo nffn nfrn nfeq nfan nfxfr ) BCDHDBIZDJZCKZLAB
      CDMSUAAABDEFNATCADEOGPQR $.
  $}

  $( An onto mapping is a mapping.  (Contributed by NM, 3-Aug-1994.) $)
  fof $p |- ( F : A -onto-> B -> F : A --> B ) $=
    ( wfn crn wceq wa wss wfo wf eqimss anim2i df-fo df-f 3imtr4i ) CADZCEZBFZG
    PQBHZGABCIABCJRSPQBKLABCMABCNO $.

  $( An onto mapping is a function.  (Contributed by NM, 29-Mar-2008.) $)
  fofun $p |- ( F : A -onto-> B -> Fun F ) $=
    ( wfo wf wfun fof ffun syl ) ABCDABCECFABCGABCHI $.

  $( An onto mapping is a function on its domain.  (Contributed by NM,
     16-Dec-2008.) $)
  fofn $p |- ( F : A -onto-> B -> F Fn A ) $=
    ( wfo wf wfn fof ffn syl ) ABCDABCECAFABCGABCHI $.

  $( The codomain of an onto function is its range.  (Contributed by NM,
     3-Aug-1994.) $)
  forn $p |- ( F : A -onto-> B -> ran F = B ) $=
    ( wfo wfn crn wceq df-fo simprbi ) ABCDCAECFBGABCHI $.

  $( Alternate definition of an onto function.  (Contributed by NM,
     22-Mar-2006.) $)
  dffo2 $p |- ( F : A -onto-> B <-> ( F : A --> B /\ ran F = B ) ) $=
    ( wfo wf crn wceq wa fof forn jca wfn ffn df-fo biimpri sylan impbii ) ABCD
    ZABCEZCFBGZHRSTABCIABCJKSCALZTRABCMRUATHABCNOPQ $.

  $( The image of the domain of an onto function.  (Contributed by NM,
     29-Nov-2002.) $)
  foima $p |- ( F : A -onto-> B -> ( F "" A ) = B ) $=
    ( wfo cdm cima crn imadmrn wf wceq fof fdm syl imaeq2d forn 3eqtr3a ) ABCDZ
    CCEZFCGCAFBCHQRACQABCIRAJABCKABCLMNABCOP $.

  $( A function maps onto its range.  (Contributed by NM, 10-May-1998.) $)
  dffn4 $p |- ( F Fn A <-> F : A -onto-> ran F ) $=
    ( wfn crn wceq wa wfo eqid biantru df-fo bitr4i ) BACZLBDZMEZFAMBGNLMHIAMBJ
    K $.

  $( A function maps its domain onto its range.  (Contributed by NM,
     23-Jul-2004.) $)
  funforn $p |- ( Fun A <-> A : dom A -onto-> ran A ) $=
    ( wfun cdm wfn crn wfo funfn dffn4 bitri ) ABAACZDJAEAFAGJAHI $.

  $( An onto function has unique domain and range.  (Contributed by NM,
     5-Nov-2006.) $)
  fodmrnu $p |- ( ( F : A -onto-> B /\ F : C -onto-> D ) ->
                ( A = C /\ B = D ) ) $=
    ( wfo wa wceq wfn fofn fndmu syl2an crn forn sylan9req jca ) ABEFZCDEFZGACH
    ZBDHQEAIECISRABEJCDEJACEKLQRBEMDABENCDENOP $.

  $( Restriction of a function.  (Contributed by NM, 4-Mar-1997.) $)
  fores $p |- ( ( Fun F /\ A C_ dom F ) ->
              ( F |` A ) : A -onto-> ( F "" A ) ) $=
    ( wfun cdm wss cres cima wfo funres anim1i wfn wceq df-fn crn df-ima eqcomi
    wa df-fo mpbiran2 ssdmres anbi2i 3bitr4i sylibr ) BCZABDEZQBAFZCZUEQZABAGZU
    FHZUDUGUEABIJUFAKZUGUFDALZQUJUHUFAMUJUKUFNZUILUIUMBAOPAUIUFRSUEULUGABTUAUBU
    C $.

  $( Composition of onto functions.  (Contributed by NM, 22-Mar-2006.) $)
  foco $p |- ( ( F : B -onto-> C /\ G : A -onto-> B ) ->
             ( F o. G ) : A -onto-> C ) $=
    ( wfo wa ccom crn wceq dffo2 fco ad2ant2r cdm fdm eqtr3 sylan rncoeq eqeq1d
    wf biimpar an32s adantrl jca syl2anb sylibr ) BCDFZABEFZGACDEHZTZUIIZCJZGZA
    CUIFUGBCDTZDIZCJZGZABETZEIZBJZGZUMUHBCDKABEKUQVAGUJULUNURUJUPUTABCDELMUQUTU
    LURUNUTUPULUNUTGDNZUSJZUPULUNVBBJUTVCBCDOVBUSBPQVCULUPVCUKUOCDERSUAQUBUCUDU
    EACUIKUF $.

  $( A nonzero constant function is onto.  (Contributed by NM, 12-Jan-2007.) $)
  foconst $p |- ( ( F : A --> { B } /\ F =/= (/) ) -> F : A -onto-> { B } ) $=
    ( csn wf c0 wne wa crn wceq wfo wn wrel wb frel relrn0 necon3abid syl wss
    wo frn sssn sylib ord sylbid imdistani dffo2 sylibr ) ABDZCEZCFGZHUJCIZUIJZ
    HAUICKUJUKUMUJUKULFJZLZUMUJCMZUKUONAUICOUPUNCFCPQRUJUNUMUJULUISUNUMTAUICUAU
    LBUBUCUDUEUFAUICUGUH $.

  $( Equality theorem for one-to-one onto functions.  (Contributed by NM,
     10-Feb-1997.) $)
  f1oeq1 $p |- ( F = G -> ( F : A -1-1-onto-> B <-> G : A -1-1-onto-> B ) ) $=
    ( wceq wf1 wfo wa wf1o f1eq1 foeq1 anbi12d df-f1o 3bitr4g ) CDEZABCFZABCGZH
    ABDFZABDGZHABCIABDIOPRQSABCDJABCDKLABCMABDMN $.

  $( Equality theorem for one-to-one onto functions.  (Contributed by NM,
     10-Feb-1997.) $)
  f1oeq2 $p |- ( A = B -> ( F : A -1-1-onto-> C <-> F : B -1-1-onto-> C ) ) $=
    ( wceq wf1 wfo wa wf1o f1eq2 foeq2 anbi12d df-f1o 3bitr4g ) ABEZACDFZACDGZH
    BCDFZBCDGZHACDIBCDIOPRQSABCDJABCDKLACDMBCDMN $.

  $( Equality theorem for one-to-one onto functions.  (Contributed by NM,
     10-Feb-1997.) $)
  f1oeq3 $p |- ( A = B -> ( F : C -1-1-onto-> A <-> F : C -1-1-onto-> B ) ) $=
    ( wceq wf1 wfo wa wf1o f1eq3 foeq3 anbi12d df-f1o 3bitr4g ) ABEZCADFZCADGZH
    CBDFZCBDGZHCADICBDIOPRQSABCDJABCDKLCADMCBDMN $.

  $( Equality theorem for one-to-one onto functions.  (Contributed by FL,
     14-Jul-2012.) $)
  f1oeq23 $p |- ( ( A = B /\ C = D ) ->
   ( F : A -1-1-onto-> C <-> F : B -1-1-onto-> D ) ) $=
    ( wceq wf1o f1oeq2 f1oeq3 sylan9bb ) ABFACEGBCEGCDFBDEGABCEHCDBEIJ $.

  ${
    f1eq123d.1 $e |- ( ph -> F = G ) $.
    f1eq123d.2 $e |- ( ph -> A = B ) $.
    f1eq123d.3 $e |- ( ph -> C = D ) $.
    $( Equality deduction for one-to-one functions.  (Contributed by Mario
       Carneiro, 27-Jan-2017.) $)
    f1eq123d $p |- ( ph -> ( F : A -1-1-> C <-> G : B -1-1-> D ) ) $=
      ( wf1 wceq wb f1eq1 syl f1eq2 f1eq3 3bitrd ) ABDFKZBDGKZCDGKZCEGKZAFGLSTM
      HBDFGNOABCLTUAMIBCDGPOADELUAUBMJDECGQOR $.

    $( Equality deduction for onto functions.  (Contributed by Mario Carneiro,
       27-Jan-2017.) $)
    foeq123d $p |- ( ph -> ( F : A -onto-> C <-> G : B -onto-> D ) ) $=
      ( wfo wceq wb foeq1 syl foeq2 foeq3 3bitrd ) ABDFKZBDGKZCDGKZCEGKZAFGLSTM
      HBDFGNOABCLTUAMIBCDGPOADELUAUBMJDECGQOR $.

    $( Equality deduction for one-to-one onto functions.  (Contributed by Mario
       Carneiro, 27-Jan-2017.) $)
    f1oeq123d $p |- ( ph ->
      ( F : A -1-1-onto-> C <-> G : B -1-1-onto-> D ) ) $=
      ( wf1o wceq wb f1oeq1 syl f1oeq2 f1oeq3 3bitrd ) ABDFKZBDGKZCDGKZCEGKZAFG
      LSTMHBDFGNOABCLTUAMIBCDGPOADELUAUBMJDECGQOR $.
  $}

  ${
    $d y F $.  $d y A $.  $d y B $.  $d x y $.
    nff1o.1 $e |- F/_ x F $.
    nff1o.2 $e |- F/_ x A $.
    nff1o.3 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for a one-to-one onto function.
       (Contributed by NM, 16-May-2004.) $)
    nff1o $p |- F/ x F : A -1-1-onto-> B $=
      ( wf1o wf1 wfo wa df-f1o nff1 nffo nfan nfxfr ) BCDHBCDIZBCDJZKABCDLQRAAB
      CDEFGMABCDEFGNOP $.
  $}

  $( A one-to-one onto mapping is a one-to-one mapping.  (Contributed by NM,
     12-Dec-2003.) $)
  f1of1 $p |- ( F : A -1-1-onto-> B -> F : A -1-1-> B ) $=
    ( wf1o wf1 wfo df-f1o simplbi ) ABCDABCEABCFABCGH $.

  $( A one-to-one onto mapping is a mapping.  (Contributed by NM,
     12-Dec-2003.) $)
  f1of $p |- ( F : A -1-1-onto-> B -> F : A --> B ) $=
    ( wf1o wf1 wf f1of1 f1f syl ) ABCDABCEABCFABCGABCHI $.

  $( A one-to-one onto mapping is function on its domain.  (Contributed by NM,
     12-Dec-2003.) $)
  f1ofn $p |- ( F : A -1-1-onto-> B -> F Fn A ) $=
    ( wf1o wf wfn f1of ffn syl ) ABCDABCECAFABCGABCHI $.

  $( A one-to-one onto mapping is a function.  (Contributed by NM,
     12-Dec-2003.) $)
  f1ofun $p |- ( F : A -1-1-onto-> B -> Fun F ) $=
    ( wf1o wfn wfun f1ofn fnfun syl ) ABCDCAECFABCGACHI $.

  $( A one-to-one onto mapping is a relation.  (Contributed by NM,
     13-Dec-2003.) $)
  f1orel $p |- ( F : A -1-1-onto-> B -> Rel F ) $=
    ( wf1o wfun wrel f1ofun funrel syl ) ABCDCECFABCGCHI $.

  $( The domain of a one-to-one onto mapping.  (Contributed by NM,
     8-Mar-2014.) $)
  f1odm $p |- ( F : A -1-1-onto-> B -> dom F = A ) $=
    ( wf1o wfn cdm wceq f1ofn fndm syl ) ABCDCAECFAGABCHACIJ $.

  $( Alternate definition of one-to-one onto function.  (Contributed by NM,
     10-Feb-1997.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.) $)
  dff1o2 $p |- ( F : A -1-1-onto-> B
        <-> ( F Fn A /\ Fun `' F /\ ran F = B ) ) $=
    ( wf1o wf1 wfo wa wfn ccnv wfun crn w3a df-f1o wf df-f1 df-fo anbi12i anass
    wceq bitri 3anan12 anbi1i eqimss df-f biimpri sylan2 3adant2 ancom 3bitr4ri
    wss pm4.71i ) ABCDABCEZABCFZGZCAHZCIJZCKZBSZLZABCMUNABCNZUPGZUOURGZGZUSULVA
    UMVBABCOABCPQVCUTUPVBGZGZUSUTUPVBRUSUTGVDUTGUSVEUSVDUTUOUPURUAUBUSUTUOURUTU
    PURUOUQBUJZUTUQBUCUTUOVFGABCUDUEUFUGUKUTVDUHUITTT $.

  $( Alternate definition of one-to-one onto function.  (Contributed by NM,
     25-Mar-1998.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.) $)
  dff1o3 $p |- ( F : A -1-1-onto-> B <-> ( F : A -onto-> B /\ Fun `' F ) ) $=
    ( wfn ccnv wfun crn wceq w3a wf1o wfo 3anan32 dff1o2 df-fo anbi1i 3bitr4i
    wa ) CADZCEFZCGBHZIRTQZSQABCJABCKZSQRSTLABCMUBUASABCNOP $.

  $( A one-to-one onto function is an onto function.  (Contributed by NM,
     28-Apr-2004.) $)
  f1ofo $p |- ( F : A -1-1-onto-> B -> F : A -onto-> B ) $=
    ( wf1o wfo ccnv wfun dff1o3 simplbi ) ABCDABCECFGABCHI $.

  $( Alternate definition of one-to-one onto function.  (Contributed by NM,
     25-Mar-1998.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.) $)
  dff1o4 $p |- ( F : A -1-1-onto-> B <-> ( F Fn A /\ `' F Fn B ) ) $=
    ( wf1o wfn ccnv wfun crn w3a wa dff1o2 3anass cdm df-rn eqeq1i anbi2i df-fn
    wceq bitr4i 3bitri ) ABCDCAEZCFZGZCHZBRZIUAUCUEJZJUAUBBEZJABCKUAUCUELUFUGUA
    UFUCUBMZBRZJUGUEUIUCUDUHBCNOPUBBQSPT $.

  $( Alternate definition of one-to-one onto function.  (Contributed by NM,
     10-Dec-2003.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.) $)
  dff1o5 $p |- ( F : A -1-1-onto-> B <-> ( F : A -1-1-> B /\ ran F = B ) ) $=
    ( wf1o wf1 wfo wa crn wceq df-f1o wf biantrurd dffo2 syl6rbbr pm5.32i bitri
    f1f ) ABCDABCEZABCFZGRCHBIZGABCJRSTRTABCKZTGSRUATABCQLABCMNOP $.

  $( A one-to-one function maps onto its range.  (Contributed by NM,
     13-Aug-2004.) $)
  f1orn $p |- ( F : A -1-1-onto-> ran F <-> ( F Fn A /\ Fun `' F ) ) $=
    ( crn wf1o wfn ccnv wfun wceq w3a wa dff1o2 eqid df-3an mpbiran2 bitri ) AB
    CZBDBAEZBFGZPPHZIZQRJZAPBKTUASPLQRSMNO $.

  $( A one-to-one function maps one-to-one onto its range.  (Contributed by NM,
     4-Sep-2004.) $)
  f1f1orn $p |- ( F : A -1-1-> B -> F : A -1-1-onto-> ran F ) $=
    ( wf1 wfn ccnv wfun crn wf1o f1fn wf df-f1 simprbi f1orn sylanbrc ) ABCDZCA
    ECFGZACHCIABCJPABCKQABCLMACNO $.

  $( The converse of a one-to-one onto function is also one-to-one onto.
     (Contributed by NM, 11-Feb-1997.)  (Proof shortened by Andrew Salmon,
     22-Oct-2011.) $)
  f1ocnv $p |- ( F : A -1-1-onto-> B -> `' F : B -1-1-onto-> A ) $=
    ( wfn ccnv wa wf1o wrel fnrel wceq dfrel2 fneq1 biimprd sylbi anim2i ancoms
    wi mpcom dff1o4 3imtr4i ) CADZCEZBDZFUCUBEZADZFZABCGBAUBGUCUAUFUAUEUCCHZUAU
    EACIUGUDCJZUAUEQCKUHUEUAAUDCLMNROPABCSBAUBST $.

  $( A relation is a one-to-one onto function iff its converse is a one-to-one
     onto function with domain and range interchanged.  (Contributed by NM,
     8-Dec-2003.) $)
  f1ocnvb $p |- ( Rel F ->
                ( F : A -1-1-onto-> B <-> `' F : B -1-1-onto-> A ) ) $=
    ( wrel wf1o ccnv f1ocnv wceq wb dfrel2 f1oeq1 sylbi syl5ib impbid2 ) CDZABC
    EZBACFZEZABCGRABQFZEZOPBAQGOSCHTPICJABSCKLMN $.

  $( The restriction of a one-to-one function maps one-to-one onto the image.
     (Contributed by NM, 25-Mar-1998.) $)
  f1ores $p |- ( ( F : A -1-1-> B /\ C C_ A ) -> ( F |` C ) : C -1-1-onto->
            ( F "" C ) ) $=
    ( wf1 wss wa cres crn wf1o cima f1ssres f1f1orn wceq wb df-ima f1oeq3 ax-mp
    syl sylibr ) ABDECAFGZCDCHZIZUBJZCDCKZUBJZUACBUBEUDABCDLCBUBMSUEUCNUFUDODCP
    UEUCCUBQRT $.

  $( The converse of a one-to-one-onto restricted function.  (Contributed by
     Paul Chapman, 21-Apr-2008.) $)
  f1orescnv $p |- ( ( Fun `' F /\ ( F |` R ) : R -1-1-onto-> P ) ->
                    ( `' F |` P ) : P -1-1-onto-> R ) $=
    ( ccnv wfun cres wf1o wa f1ocnv adantl wceq wb cima funcnvres df-ima dff1o5
    crn wf1 simprbi syl5eq reseq2d sylan9eq f1oeq1 syl mpbid ) CDZEZBACBFZGZHZA
    BUHDZGZABUFAFZGZUIULUGBAUHIJUJUKUMKULUNLUGUIUKUFCBMZFUMBCNUIUOAUFUIUOUHQZAC
    BOUIBAUHRUPAKBAUHPSTUAUBABUKUMUCUDUE $.

  $( Preimage of an image.  (Contributed by NM, 30-Sep-2004.) $)
  f1imacnv $p |- ( ( F : A -1-1-> B /\ C C_ A )
                 -> ( `' F "" ( F "" C ) ) = C ) $=
    ( wf1 wss wa ccnv cima cres resima wfun wceq df-f1 simprbi adantr funcnvres
    wf syl wf1o imaeq1d f1ores f1ocnv cdm crn imadmrn f1odm imaeq2d wfo 3eqtr3a
    f1ofo forn eqtr3d syl5eqr ) ABDEZCAFZGZDHZDCIZIURUSJZUSIZCURUSKUQDCJZHZUSIZ
    VACUQVCUTUSUQURLZVCUTMUOVEUPUOABDRVEABDNOPCDQSUAUQUSCVCTZVDCMUQCUSVBTVFABCD
    UBCUSVBUCSVFVCVCUDZIVCUEZVDCVCUFVFVGUSVCUSCVCUGUHVFUSCVCUIVHCMUSCVCUKUSCVCU
    LSUJSUMUN $.

  $( A reverse version of ~ f1imacnv .  (Contributed by Jeff Hankins,
     16-Jul-2009.) $)
  foimacnv $p |- ( ( F : A -onto-> B /\ C C_ B )
                 -> ( F "" ( `' F "" C ) ) = C ) $=
    ( wfo wss wa ccnv cima cres resima wfun wceq fofun adantr syl crn cdm df-rn
    syl5eqr funcnvres2 imaeq1d wfn resss cnvss ax-mp cnvcnvss sstri funss mpsyl
    df-ima eqtr2i jctir df-fn sylibr dfdm4 forn sseq2d biimpar syl6sseq ssdmres
    sylib df-fo sylanbrc foima eqtr3d ) ABDEZCBFZGZDDHZCIZIDVKJZVKIZCDVKKVIVJCJ
    ZHZVKIZVMCVIVOVLVKVIDLZVOVLMVGVQVHABDNZOCDUAPUBVIVKCVOEZVPCMVIVOVKUCZVOQZCM
    VSVIVOLZVORZVKMZGVTVIWBWDVGWBVHVODFVGVQWBVOVJHZDVNVJFVOWEFVJCUDVNVJUEUFDUGU
    HVRVODUIUJOVKVNQWCVJCUKVNSULUMVOVKUNUOVIWAVNRZCVNUPVICVJRZFWFCMVICDQZWGVGCW
    HFVHVGWHBCABDUQURUSDSUTCVJVAVBTVKCVOVCVDVKCVOVEPVFT $.

  $( The union of two onto functions with disjoint domains is an onto
     function.  (Contributed by Mario Carneiro, 22-Jun-2016.) $)
  foun $p |- ( ( ( F : A -onto-> B /\ G : C -onto-> D )
            /\ ( A i^i C ) = (/) )
           -> ( F u. G ) : ( A u. C ) -onto-> ( B u. D ) ) $=
    ( wfo wa cin c0 wceq cun wfn crn fofn anim12i fnun sylan rnun forn ad2antrr
    ad2antlr uneq12d syl5eq df-fo sylanbrc ) ABEGZCDFGZHZACIJKZHZEFLZACLZMZULNZ
    BDLZKUMUPULGUIEAMZFCMZHUJUNUGUQUHURABEOCDFOPACEFQRUKUOENZFNZLUPEFSUKUSBUTDU
    GUSBKUHUJABETUAUHUTDKUGUJCDFTUBUCUDUMUPULUEUF $.

  $( The union of two one-to-one onto functions with disjoint domains and
     ranges.  (Contributed by NM, 26-Mar-1998.) $)
  f1oun $p |- ( ( ( F : A -1-1-onto-> B /\ G : C -1-1-onto-> D )
            /\ ( ( A i^i C ) = (/) /\ ( B i^i D ) = (/) ) )
           -> ( F u. G ) : ( A u. C ) -1-1-onto-> ( B u. D ) ) $=
    ( wf1o wa cin c0 wceq cun wfn ccnv wi dff1o4 fnun ex cnvun fneq1i im2anan9
    sylibr an4s syl2anb syl6ibr imp ) ABEGZCDFGZHZACIJKZBDIJKZHZACLZBDLZEFLZGZU
    IULUOUMMZUONZUNMZHZUPUGEAMZENZBMZHFCMZFNZDMZHULUTOZUHABEPCDFPVAVDVCVFVGVAVD
    HZUJUQVCVFHZUKUSVHUJUQACEFQRVIUKUSVIUKHVBVELZUNMUSBDVBVEQUNURVJEFSTUBRUAUCU
    DUMUNUOPUEUF $.

  $( The restriction of a one-to-one onto function to a difference maps onto
     the difference of the images.  (Contributed by Paul Chapman,
     11-Apr-2009.) $)
  resdif $p |- ( ( Fun `' F /\ ( F |` A ) : A -onto-> C /\
                               ( F |` B ) : B -onto-> D ) ->
                 ( F |` ( A \ B ) ) : ( A \ B ) -1-1-onto-> ( C \ D ) ) $=
    ( ccnv wfun cres wfo cdif cima wf1o wceq syl wb ax-mp crn df-ima wa forn wf
    w3a cdm wss fofun difss fof fdm syl5sseqr fores syl2anc indif reseq2i eqtri
    cin resres foeq1 rneqi 3eqtr4i foeq3 bitri funres11 biimpri syl2anr 3adant3
    sylib dff1o3 syl5eq anim12i imadif difeq12 sylan9eq sylan2 3impb f1oeq3
    mpbid ) EFGZACEAHZIZBDEBHZIZUBZABJZEWCKZEWCHZLZWCCDJZWELZVQVSWFWAVSWCWDWEIZ
    WEFGZWFVQVSWCVRWCKZVRWCHZIZWIVSVRGWCVRUCZUDWMACVRUEVSAWCWNABUFVSACVRUAWNAMA
    CVRUGACVRUHNUIWCVRUJUKWMWCWKWEIZWIWLWEMWMWOOWLEAWCUOZHWEEAWCUPWPWCEABULUMUN
    ZWCWKWLWEUQPWKWDMWOWIOWLQWEQWKWDWLWEWQURVRWCREWCRUSWKWDWCWEUTPVAVFWCEVBWFWI
    WJSWCWDWEVGVCVDVEWBWDWGMZWFWHOVQVSWAWRVSWASVQEAKZCMZEBKZDMZSZWRVSWTWAXBVSWS
    VRQCEARACVRTVHWAXAVTQDEBRBDVTTVHVIVQXCWDWSXAJWGABEVJWSCXADVKVLVMVNWDWGWCWEV
    ONVP $.

  $( The restriction of a one-to-one onto function to an intersection maps onto
     the intersection of the images.  (Contributed by Paul Chapman,
     11-Apr-2009.) $)
  resin $p |- ( ( Fun `' F /\ ( F |` A ) : A -onto-> C /\
                               ( F |` B ) : B -onto-> D ) ->
      ( F |` ( A i^i B ) ) : ( A i^i B ) -1-1-onto-> ( C i^i D ) ) $=
    ( ccnv wfun cres wfo w3a cdif wf1o cin resdif f1ofo syl wceq wb dfin4 ax-mp
    syld3an3 f1oeq3 f1oeq2 reseq2i f1oeq1 3bitrri sylib ) EFGZACEAHIZBDEBHIZJZA
    ABKZKZCCDKZKZEUMHZLZABMZCDMZEURHZLZUHUIUJULUNEULHZIZUQUKULUNVBLVCABCDENULUN
    VBOPAULCUNENUAVAURUOUTLZUMUOUTLZUQUSUOQVAVDRCDSUSUOURUTUBTURUMQVDVERABSZURU
    MUOUTUCTUTUPQVEUQRURUMEVFUDUMUOUTUPUETUFUG $.

  $( Composition of one-to-one onto functions.  (Contributed by NM,
     19-Mar-1998.) $)
  f1oco $p |- ( ( F : B -1-1-onto-> C /\ G : A -1-1-onto-> B ) ->
              ( F o. G ) : A -1-1-onto-> C ) $=
    ( wf1o wa ccom wf1 wfo df-f1o f1co foco anim12i an4s syl2anb sylibr ) BCDFZ
    ABEFZGACDEHZIZACTJZGZACTFRBCDIZBCDJZGABEIZABEJZGUCSBCDKABEKUDUFUEUGUCUDUFGU
    AUEUGGUBABCDELABCDEMNOPACTKQ $.

  $( The converse of an injective function is bijective.  (Contributed by FL,
     11-Nov-2011.) $)
  f1cnv $p |- ( F : A -1-1-> B -> `' F : ran F -1-1-onto-> A ) $=
    ( wf1 crn wf1o ccnv f1f1orn f1ocnv syl ) ABCDACEZCFKACGFABCHAKCIJ $.

  $( Composition with the converse.  (Contributed by Jeff Madsen,
     2-Sep-2009.) $)
  funcocnv2 $p |- ( Fun F -> ( F o. `' F ) = ( _I |` ran F ) ) $=
    ( wfun ccnv ccom cid wss crn cres wceq wrel df-fun simprbi cdm dfdm4 dmcoeq
    iss ax-mp df-rn eqtr4i a1i reseq2d eqeq2d syl5bb mpbid ) ABZAACZDZEFZUGEAGZ
    HZIZUEAJUHAKLUHUGEUGMZHZIUEUKUGPUEUMUJUGUEULUIEULUIIUEULUFMZUIAMUFGIULUNIAN
    AUFOQARSTUAUBUCUD $.

  $( The composition of an onto function and its converse.  (Contributed by
     Stefan O'Rear, 12-Feb-2015.) $)
  fococnv2 $p |- ( F : A -onto-> B -> ( F o. `' F ) = ( _I |` B ) ) $=
    ( wfo ccnv ccom cid crn cres wfun wceq fofun funcocnv2 forn reseq2d eqtrd
    syl ) ABCDZCCEFZGCHZIZGBIRCJSUAKABCLCMQRTBGABCNOP $.

  $( The composition of a one-to-one onto function and its converse equals the
     identity relation restricted to the function's range.  (Contributed by NM,
     13-Dec-2003.)  (Proof shortened by Stefan O'Rear, 12-Feb-2015.) $)
  f1ococnv2 $p |- ( F : A -1-1-onto-> B -> ( F o. `' F ) = ( _I |` B ) ) $=
    ( wf1o wfo ccnv ccom cid cres wceq f1ofo fococnv2 syl ) ABCDABCECCFGHBIJABC
    KABCLM $.

  $( Composition of an injective function with its converse.  (Contributed by
     FL, 11-Nov-2011.) $)
  f1cocnv2 $p |- ( F : A -1-1-> B -> ( F o. `' F ) = ( _I |` ran F ) ) $=
    ( wf1 wfun ccnv ccom cid crn cres wceq f1fun funcocnv2 syl ) ABCDCECCFGHCIJ
    KABCLCMN $.

  $( The composition of a one-to-one onto function's converse and itself equals
     the identity relation restricted to the function's domain.  (Contributed
     by NM, 13-Dec-2003.) $)
  f1ococnv1 $p |- ( F : A -1-1-onto-> B -> ( `' F o. F ) = ( _I |` A ) ) $=
    ( wf1o ccnv ccom cres wrel wceq f1orel dfrel2 sylib coeq2d f1ocnv f1ococnv2
    cid syl eqtr3d ) ABCDZCEZTEZFZTCFPAGZSUACTSCHUACIABCJCKLMSBATDUBUCIABCNBATO
    QR $.

  $( Composition of an injective function with its converse.  (Contributed by
     FL, 11-Nov-2011.) $)
  f1cocnv1 $p |- ( F : A -1-1-> B -> ( `' F o. F ) = ( _I |` A ) ) $=
    ( wf1 crn wf1o ccnv ccom cid cres wceq f1f1orn f1ococnv1 syl ) ABCDACEZCFCG
    CHIAJKABCLAOCMN $.

  $( Re-express a constraint on a composition as a constraint on the
     composand.  (Contributed by Stefan O'Rear, 7-Mar-2015.) $)
  funcoeqres $p |- ( ( Fun G /\ ( F o. G ) = H ) ->
      ( F |` ran G ) = ( H o. `' G ) ) $=
    ( wfun ccom wceq crn cres cid funcocnv2 coeq2d coass eqcomi coires1 3eqtr3g
    ccnv coeq1 sylan9req ) BDZABEZCFABGZHZTBPZEZCUCESABUCEZEZAIUAHZEUDUBSUEUGAB
    JKUDUFABUCLMAUANOTCUCQR $.

  $( The empty set maps one-to-one into any class.  (Contributed by NM,
     7-Apr-1998.) $)
  f10 $p |- (/) : (/) -1-1-> A $=
    ( c0 wf1 wf ccnv wfun f0 fun0 cnv0 funeqi mpbir df-f1 mpbir2an ) BABCBABDBE
    ZFZAGOBFHNBIJKBABLM $.

  $( One-to-one onto mapping of the empty set.  (Contributed by NM,
     15-Apr-1998.) $)
  f1o00 $p |- ( F : (/) -1-1-onto-> A <-> ( F = (/) /\ A = (/) ) ) $=
    ( c0 wf1o wfn ccnv wceq dff1o4 fn0 biimpi adantr cdm dm0 cnveq syl6eq sylbi
    wa cnv0 fneq1d jca biimpa fndm syl syl5reqr biimpri eqid mpbir fneq2 mpbiri
    sylan9bb impbii bitri ) CABDBCEZBFZAEZQZBCGZACGZQZCABHUPUSUPUQURUMUQUOUMUQB
    IZJKUPCCLZAMUPCAEZVAAGUMUOVBUMAUNCUMUQUNCGUTUQUNCFCBCNROZPSUAACUBUCUDTUSUMU
    OUQUMURUMUQUTUEKUSUOCCEZVDCCGCUFCIUGUQUOVBURVDUQAUNCVCSACCUHUJUITUKUL $.

  $( Onto mapping of the empty set.  (Contributed by NM, 22-Mar-2006.) $)
  fo00 $p |- ( F : (/) -onto-> A <-> ( F = (/) /\ A = (/) ) ) $=
    ( c0 wfo wf1o wceq wf1 wfn fofn fn0 f10 f1eq1 mpbiri sylbi syl ancri df-f1o
    wa sylibr f1ofo impbii f1o00 bitri ) CABDZCABEZBCFZACFRUDUEUDCABGZUDRUEUDUG
    UDBCHZUGCABIUHUFUGBJUFUGCACGAKCABCLMNOPCABQSCABTUAABUBUC $.

  $( One-to-one onto mapping of the empty set.  (Contributed by NM,
     10-Sep-2004.) $)
  f1o0 $p |- (/) : (/) -1-1-onto-> (/) $=
    ( c0 wf1o wceq eqid f1o00 mpbir2an ) AAABAACZGADZHAAEF $.

  $( A restriction of the identity relation is a one-to-one onto function.
     (Contributed by NM, 30-Apr-1998.)  (Proof shortened by Andrew Salmon,
     22-Oct-2011.) $)
  f1oi $p |- ( _I |` A ) : A -1-1-onto-> A $=
    ( cid cres wf1o wfn ccnv fnresi cnvresid fneq1i mpbir dff1o4 mpbir2an ) AAB
    ACZDMAEZMFZAEZAGZPNQAOMAHIJAAMKL $.

  $( The identity relation is a one-to-one onto function on the universe.
     (Contributed by NM, 16-May-2004.) $)
  f1ovi $p |- _I : _V -1-1-onto-> _V $=
    ( cvv cid cres wf1o f1oi wceq wb wrel reli dfrel3 mpbi f1oeq1 ax-mp ) AABAC
    ZDZAABDZAENBFZOPGBHQIBJKAANBLMK $.

  ${
    f1osn.1 $e |- A e. _V $.
    f1osn.2 $e |- B e. _V $.
    $( A singleton of an ordered pair is one-to-one onto function.
       (Contributed by NM, 18-May-1998.)  (Proof shortened by Andrew Salmon,
       22-Oct-2011.) $)
    f1osn $p |- { <. A , B >. } : { A } -1-1-onto-> { B } $=
      ( csn cop wf1o wfn ccnv fnsn cnvsn fneq1i mpbir dff1o4 mpbir2an ) AEZBEZA
      BFEZGRPHRIZQHZABCDJTBAFEZQHBADCJQSUAABCDKLMPQRNO $.
  $}

  ${
    $d A a b $.  $d B b $.
    $( A singleton of an ordered pair is one-to-one onto function.
       (Contributed by Mario Carneiro, 12-Jan-2013.) $)
    f1osng $p |- ( ( A e. V /\ B e. W ) ->
                   { <. A , B >. } : { A } -1-1-onto-> { B } ) $=
      ( va vb cv csn cop wf1o wceq sneq f1oeq2 syl opeq1 sneqd f1oeq1 bitrd vex
      wb f1oeq3 opeq2 f1osn vtocl2g ) EGZHZFGZHZUEUGIZHZJZAHZUHAUGIZHZJZULBHZAB
      IZHZJZEFABCDUEAKZUKULUHUJJZUOUTUFULKUKVATUEALUFULUHUJMNUTUJUNKVAUOTUTUIUM
      UEAUGOPULUHUJUNQNRUGBKZUOULUPUNJZUSVBUHUPKUOVCTUGBLUHUPULUNUANVBUNURKVCUS
      TVBUMUQUGBAUBPULUPUNURQNRUEUGESFSUCUD $.
  $}

  ${
    $d A a b $.  $d B b $.
    $( A two-element swap is a bijection on a pair.  (Contributed by Mario
       Carneiro, 23-Jan-2015.) $)
    f1oprswap $p |- ( ( A e. V /\ B e. W ) ->
      { <. A , B >. , <. B , A >. } : { A , B } -1-1-onto-> { A , B } ) $=
      ( wcel cpr cop wf1o wceq csn f1osng anidms ad2antrr dfsn2 syl5eq wfn ccnv
      wa cun cnvsng opeq2 opeq1 preq12d preq2 f1oeq123d adantl mpbid wne simpll
      wb simplr simpr fnprg syl221anc ancoms uneq12d uncom syl6eq adantr cnveqi
      df-pr cnvun eqtri 3eqtr4g fneq1d mpbird dff1o4 sylanbrc pm2.61dane ) ACEZ
      BDEZRZABFZVMABGZBAGZFZHZABVLABIZRAJZVSAAGZJZHZVQVJWBVKVRVJWBAACCKLMVRWBVQ
      UJVLVRVSVMVSVMWAVPVRWAVTVTFVPVTNVRVTVNVTVOABAUAABAUBUCOVRVSAAFVMANABAUDOZ
      WCUEUFUGVLABUHZRZVPVMPZVPQZVMPZVQWEVJVKVKVJWDWFVJVKWDUIZVJVKWDUKZWJWIVLWD
      ULABBACDDCUMUNZWEWHWFWKWEVMWGVPWEVNJZQZVOJZQZSZWLWNSZWGVPVLWPWQIWDVLWPWNW
      LSWQVLWMWNWOWLABCDTVKVJWOWLIBADCTUOUPWNWLUQURUSWGWQQWPVPWQVNVOVAZUTWLWNVB
      VCWRVDVEVFVMVMVPVGVHVI $.
  $}

  $( An unordered pair of ordered pairs with different elements is a one-to-one
     onto function, analogous to ~ f1oprswap .  (Contributed by Alexander van
     der Vekens, 14-Aug-2017.) $)
  f1oprg $p |- ( ( ( A e. V /\ B e. W ) /\ ( C e. X /\ D e. Y ) )
      -> ( ( A =/= C /\ B =/= D )
      -> { <. A , B >. , <. C , D >. } : { A , C } -1-1-onto-> { B , D } ) ) $=
    ( wcel wa wne cpr cop wf1o csn cun wceq df-pr eqcomi a1i c0 f1osng ad2antrr
    cin ad2antlr disjsn2 ad2antrl ad2antll f1oun syl22anc f1oeq123d mpbid ex )
    AEIBFIJZCGIDHIJZJZACKZBDKZJZACLZBDLZABMZCDMZLZNZUPUSJZAOZCOZPZBOZDOZPZVBOZV
    COZPZNZVEVFVGVJVMNZVHVKVNNZVGVHUDUAQZVJVKUDUAQZVPUNVQUOUSABEFUBUCUOVRUNUSCD
    GHUBUEUQVSUPURACUFUGURVTUPUQBDUFUHVGVJVHVKVMVNUIUJVFVIUTVLVAVOVDVOVDQVFVDVO
    VBVCRSTVIUTQVFUTVIACRSTVLVAQVFVAVLBDRSTUKULUM $.

  ${
    $d x F $.  $d x A $.
    $( Function value when ` F ` is not a function.  Theorem 6.12(2) of
       [TakeutiZaring] p. 27.  (Contributed by NM, 30-Apr-2004.)  (Proof
       shortened by Mario Carneiro, 31-Aug-2015.) $)
    tz6.12-2 $p |- ( -. E! x A F x -> ( F ` A ) = (/) ) $=
      ( cv wbr weu wn cfv cio c0 df-fv iotanul syl5eq ) BADCEZAFGBCHNAIJABCKNAL
      M $.

    $( The value of a function at a unique point.  (Contributed by Scott
       Fenton, 6-Oct-2017.) $)
    fveu $p |- ( E! x A F x -> ( F ` A ) = U. { x | A F x } ) $=
      ( cv wbr weu cfv cio cab cuni df-fv iotauni syl5eq ) BADCEZAFBCGNAHNAIJAB
      CKNALM $.
  $}

  ${
    $d x y A $.  $d x y F $.
    $( If ` A ` is a proper class, then there is no unique binary relationship
       with ` A ` as the first element.  (Contributed by Scott Fenton,
       7-Oct-2017.) $)
    brprcneu $p |- ( -. A e. _V -> -. E! x A F x ) $=
      ( vy wcel wn cv wbr wex wi wa weq cop c0 exnal sylibr opprc1 eleq1d df-br
      wal cvv wmo weu dtru equcom albii xchbinx mpbir jctr 19.42v anbi12d anidm
      syl6bb anbi1d exbidv imbi12d mpbiri anbi12i anbi1i 3imtr4g eximdv exanali
      exbii breq2 mo4 notbii 3bitr4ri syl6ibr eu5 imnan bitr4i ) BUAEFZBAGZCHZA
      IZVNAUBZFZJZVNAUCZFZVLVOVNBDGZCHZKZADLZFZKZDIZAIZVQVLVNWGAVLBVMMZCEZWJBWA
      MZCEZKZWEKZDIZVNWGVLWJWOJNCEZWPWEKZDIZJWPWPWEDIZKWRWPWSWSDALZDTZFDAUDWSWD
      DTXAWDDOWDWTDADUEUFUGUHUIWPWEDUJPVLWJWPWOWRVLWINCBVMQRZVLWNWQDVLWMWPWEVLW
      MWPWPKWPVLWJWPWLWPXBVLWKNCBWAQRUKWPULUMUNUOUPUQBVMCSZWFWNDWCWMWEVNWJWBWLX
      CBWACSURUSVCUTVAWCWDJDTZFZAIXDATZFWHVQXDAOWGXEAWCWDDVBVCVPXFVNWBADVMWABCV
      DVEVFVGVHVTVOVPKZFVRVSXGVNAVIVFVOVPVJVKP $.
  $}

  ${
    $d x y A $.  $d x y F $.
    $( A function's value at a proper class is the empty set.  (Contributed by
       NM, 20-May-1998.) $)
    fvprc $p |- ( -. A e. _V -> ( F ` A ) = (/) ) $=
      ( vx cvv wcel wn cv wbr weu cfv c0 wceq brprcneu tz6.12-2 syl ) ADEFACGBH
      CIFABJKLCABMCABNO $.
  $}

  ${
    $d x y A $.  $d x y F $.
    $( Alternate definition of function value.  Definition 10.11 of [Quine]
       p. 68.  (Contributed by NM, 30-Apr-2004.)  (Proof shortened by Andrew
       Salmon, 17-Sep-2011.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    fv2 $p |- ( F ` A ) = U. { x | A. y ( A F y <-> y = x ) } $=
      ( cfv cv wbr cio weq wb wal cab cuni df-fv dfiota2 eqtri ) CDECBFDGZBHQBA
      IJBKALMBCDNQBAOP $.
  $}

  ${
    $d F x y $.  $d A x y $.
    $( A definition of function value in terms of iota.  (Contributed by Scott
       Fenton, 19-Feb-2013.) $)
    dffv3 $p |- ( F ` A ) = ( iota x x e. ( F "" { A } ) ) $=
      ( cvv wcel cfv cv csn cima cio wceq wbr wb vex wa cop iotabidv wn syl6eq
      c0 elimasng df-br syl6bbr mpan2 df-fv syl6reqr fvprc snprc biimpi imaeq2d
      ima0 eleq2d weu wex noel nex euex mto iotanul ax-mp eqtr4d pm2.61i ) BDEZ
      BCFZAGZCBHZIZEZAJZKVCVIBVECLZAJVDVCVHVJAVCVEDEZVHVJMANVCVKOVHBVEPCEVJCBVE
      DDUABVECUBUCUDQABCUEUFVCRZVDTVIBCUGVLVIVETEZAJZTVLVHVMAVLVGTVEVLVGCTITVLV
      FTCVLVFTKBUHUIUJCUKSULQVMAUMZRVNTKVOVMAUNVMAVEUOUPVMAUQURVMAUSUTSVAVB $.
  $}

  ${
    $d x y A $.  $d x y F $.
    $( The previous definition of function value, from before the ` iota `
       operator was introduced.  Although based on the idea embodied by
       Definition 10.2 of [Quine] p. 65 (see ~ args ), this definition
       apparently does not appear in the literature.  (Contributed by NM,
       1-Aug-1994.) $)
    dffv4 $p |- ( F ` A ) = U. { x | ( F "" { A } ) = { x } } $=
      ( vy cfv csn cima wcel cio cab wceq cuni dffv3 df-iota abid2 eqeq1i abbii
      cv unieqi 3eqtri ) BCEDRCBFGZHZDIUBDJZARFZKZAJZLUAUDKZAJZLDBCMUBDANUFUHUE
      UGAUCUAUDDUAOPQST $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x y F $.
    $( Membership in a function value.  (Contributed by NM, 30-Apr-2004.) $)
    elfv $p |- ( A e. ( F ` B ) <->
               E. x ( A e. x /\ A. y ( B F y <-> y = x ) ) ) $=
      ( cfv wcel cv wbr weq wb wal cab cuni wa wex fv2 eleq2i eluniab bitri ) C
      DEFZGCDBHEIBAJKBLZAMNZGCAHGUBOAPUAUCCABDEQRUBACST $.
  $}

  ${
    $d x A $.  $d x B $.  $d x F $.  $d x G $.
    $( Equality theorem for function value.  (Contributed by NM,
       29-Dec-1996.) $)
    fveq1 $p |- ( F = G -> ( F ` A ) = ( G ` A ) ) $=
      ( vx wceq cv wbr cio cfv breq iotabidv df-fv 3eqtr4g ) BCEZADFZBGZDHAOCGZ
      DHABIACINPQDAOBCJKDABLDACLM $.

    $( Equality theorem for function value.  (Contributed by NM,
       29-Dec-1996.) $)
    fveq2 $p |- ( A = B -> ( F ` A ) = ( F ` B ) ) $=
      ( vx wceq cv wbr cio cfv breq1 iotabidv df-fv 3eqtr4g ) ABEZADFZCGZDHBOCG
      ZDHACIBCINPQDABOCJKDACLDBCLM $.
  $}

  ${
    fveq1i.1 $e |- F = G $.
    $( Equality inference for function value.  (Contributed by NM,
       2-Sep-2003.) $)
    fveq1i $p |- ( F ` A ) = ( G ` A ) $=
      ( wceq cfv fveq1 ax-mp ) BCEABFACFEDABCGH $.
  $}

  ${
    fveq1d.1 $e |- ( ph -> F = G ) $.
    $( Equality deduction for function value.  (Contributed by NM,
       2-Sep-2003.) $)
    fveq1d $p |- ( ph -> ( F ` A ) = ( G ` A ) ) $=
      ( wceq cfv fveq1 syl ) ACDFBCGBDGFEBCDHI $.
  $}

  ${
    fveq2i.1 $e |- A = B $.
    $( Equality inference for function value.  (Contributed by NM,
       28-Jul-1999.) $)
    fveq2i $p |- ( F ` A ) = ( F ` B ) $=
      ( wceq cfv fveq2 ax-mp ) ABEACFBCFEDABCGH $.
  $}

  ${
    fveq2d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for function value.  (Contributed by NM,
       29-May-1999.) $)
    fveq2d $p |- ( ph -> ( F ` A ) = ( F ` B ) ) $=
      ( wceq cfv fveq2 syl ) ABCFBDGCDGFEBCDHI $.
  $}

  ${
    fveq12i.1 $e |- F = G $.
    fveq12i.2 $e |- A = B $.
    $( Equality deduction for function value.  (Contributed by FL,
       27-Jun-2014.) $)
    fveq12i $p |- ( F ` A ) = ( G ` B ) $=
      ( cfv fveq1i fveq2i eqtri ) ACGADGBDGACDEHABDFIJ $.
  $}

  ${
    fveq12d.1 $e |- ( ph -> F = G ) $.
    fveq12d.2 $e |- ( ph -> A = B ) $.
    $( Equality deduction for function value.  (Contributed by FL,
       22-Dec-2008.) $)
    fveq12d $p |- ( ph -> ( F ` A ) = ( G ` B ) ) $=
      ( cfv fveq1d fveq2d eqtrd ) ABDHBEHCEHABDEFIABCEGJK $.
  $}

  ${
    $d y z F $.  $d y z A $.  $d x y z $.
    nffv.1 $e |- F/_ x F $.
    nffv.2 $e |- F/_ x A $.
    $( Bound-variable hypothesis builder for function value.  (Contributed by
       NM, 14-Nov-1995.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nffv $p |- F/_ x ( F ` A ) $=
      ( vy cfv cv wbr cio df-fv nfcv nfbr nfiota nfcxfr ) ABCGBFHZCIZFJFBCKQAFA
      BPCEDAPLMNO $.
  $}

  ${
    $d x C $.
    $( Bound-variable hypothesis builder for mapping, special case.
       (Contributed by Mario Carneiro, 25-Dec-2016.) $)
    nffvmpt1 $p |- F/_ x ( ( x e. A |-> B ) ` C ) $=
      ( cmpt nfmpt1 nfcv nffv ) ADABCEABCFADGH $.
  $}

  ${
    $d y z A $.  $d y z F $.  $d y ph $.  $d x y z $.
    nffvd.2 $e |- ( ph -> F/_ x F ) $.
    nffvd.3 $e |- ( ph -> F/_ x A ) $.
    $( Deduction version of bound-variable hypothesis builder ~ nffv .
       (Contributed by NM, 10-Nov-2005.)  (Revised by Mario Carneiro,
       15-Oct-2016.) $)
    nffvd $p |- ( ph -> F/_ x ( F ` A ) ) $=
      ( vz cv wcel wal cab cfv wnfc nfaba1 nffv wb wa nfnfc1 wceq abidnf adantr
      nfan adantl fveq12d nfceqdf syl2anc mpbii ) ABGHZCIZBJGKZUHDIZBJGKZLZMZBC
      DLZMZBUJULUKBGNUIBGNOABDMZBCMZUNUPPEFUQURQZBUMUOUQURBBDRBCRUBUSUJCULDUQUL
      DSURBGDTUAURUJCSUQBGCTUCUDUEUFUG $.
  $}

  ${
    $d x A $.  $d x F $.
    $( The value of a class exists.  Corollary 6.13 of [TakeutiZaring] p. 27.
       (Contributed by NM, 30-Dec-1996.) $)
    fvex $p |- ( F ` A ) e. _V $=
      ( vx cfv cv wbr cio cvv df-fv iotaex eqeltri ) ABDACEBFZCGHCABILCJK $.
  $}

  $( Move a conditional outside of a function.  (Contributed by Jeff Madsen,
     2-Sep-2009.) $)
  fvif $p |- ( F ` if ( ph , A , B ) ) = if ( ph , ( F ` A ) , ( F ` B ) ) $=
    ( cif cfv fveq2 ifsb ) ABCABCEZDFBDFCDFIBDGICDGH $.

  $( Move a conditional outside of a function.  (Contributed by Thierry Arnoux,
     28-Sep-2018.) $)
  iffv $p |- ( if ( ph , F , G ) ` A ) = if ( ph , ( F ` A ) , ( G ` A ) ) $=
    ( cif cfv fveq1 ifsb ) ACDBACDEZFBCFBDFBICGBIDGH $.

  ${
    $d x y z F $.  $d x y z A $.
    $( Alternate definition of the value of a function.  Definition 6.11 of
       [TakeutiZaring] p. 26.  (Contributed by NM, 30-Apr-2004.)  (Revised by
       Mario Carneiro, 31-Aug-2015.) $)
    fv3 $p |- ( F ` A ) = { x | ( E. y ( x e. y /\ A F y ) /\
              E! y A F y ) } $=
      ( vz cv wcel wbr wa wex weu cfv weq wb wal elfv wi bi2 breq2 sylib anim2i
      alimi vex ceqsalv eximi elequ2 anbi12d cbvexv exsimpr df-eu jca nfeu1 nfv
      sylibr nfa1 nfan nfex nfim bi1 ax-9 syl6 com23 anc2ri com12 eximdv syl5bi
      impd sps exlimi imp impbii bitri abbi2i ) AFZBFZGZCVODHZIZBJZVQBKZIZACDLZ
      VNWBGVNEFZGZVQBEMZNZBOZIZEJZWAEBVNCDPWIWAWIVSVTWIWDCWCDHZIZEJVSWHWKEWGWJW
      DWGWEVQQZBOWJWFWLBVQWERUBVQWJBWCEUCVOWCCDSUDTUAUEWKVREBEBMWDVPWJVQEBAUFWC
      VOCDSUGUHTWIWGEJZVTWDWGEUIVQBEUJZUNUKVSVTWIVRVTWIQBVTWIBVQBULWHBEWDWGBWDB
      UMWFBUOUPUQURVTWMVRWIWNVRWGWHEWGVRWHWGVRWDWFVRWDQBWFVPVQWDWFVQVPWDWFVQWEV
      PWDQVQWEUSBEAUTVAVBVGVHVCVDVEVFVIVJVKVLVM $.
  $}

  ${
    $d x F $.  $d x A $.  $d x B $.
    $( The value of a restricted function.  (Contributed by NM, 2-Aug-1994.) $)
    fvres $p |- ( A e. B -> ( ( F |` B ) ` A ) = ( F ` A ) ) $=
      ( vx wcel cv cres wbr cio cfv vex brres rbaib iotabidv df-fv 3eqtr4g ) AB
      EZADFZCBGZHZDIARCHZDIASJACJQTUADTUAQARCBDKLMNDASODACOP $.
  $}

  $( The value of a member of the domain of a subclass of a function.
     (Contributed by NM, 15-Aug-1994.) $)
  funssfv $p |- ( ( Fun F /\ G C_ F /\ A e. dom G ) ->
                ( F ` A ) = ( G ` A ) ) $=
    ( wfun wss cdm wcel cfv wceq wa cres fvres eqcomd funssres fveq1d sylan9eqr
    3impa ) BDZCBEZACFZGZABHZACHZIUARSJZUBABTKZHZUCUAUFUBATBLMUDAUECBCNOPQ $.

  ${
    $d y z F $.  $d y z A $.
    $( Function value.  Theorem 6.12(1) of [TakeutiZaring] p. 27.  (Contributed
       by NM, 30-Apr-2004.) $)
    tz6.12-1 $p |- ( ( A F y /\ E! y A F y ) -> ( F ` A ) = y ) $=
      ( cv wbr weu wa cfv cio df-fv wceq iota1 biimpac syl5eq ) BADZCEZPAFZGBCH
      PAIZOABCJQPROKPALMN $.

    $( Function value.  Theorem 6.12(1) of [TakeutiZaring] p. 27.  (Contributed
       by NM, 10-Jul-1994.) $)
    tz6.12 $p |- ( ( <. A , y >. e. F /\ E! y <. A , y >. e. F ) ->
                 ( F ` A ) = y ) $=
      ( cv cop wcel wbr weu cfv wceq df-br eubii tz6.12-1 syl2anbr ) BADZECFZBO
      CGZQAHBCIOJPAHBOCKZQPARLABCMN $.
  $}

  ${
    $d A y z w $.  $d z w v F $.
    tz6.12f.1 $e |- F/_ y F $.
    $( Function value, using bound-variable hypotheses instead of distinct
       variable conditions.  (Contributed by NM, 30-Aug-1999.) $)
    tz6.12f $p |- ( ( <. A , y >. e. F /\ E! y <. A , y >. e. F ) ->
                 ( F ` A ) = y ) $=
      ( vz cv cop wcel weu wa cfv wceq wi opeq2 eleq1d wb nfel2 nfv cbveu a1i
      anbi12d eqeq2 imbi12d tz6.12 chvarv ) BEFZGZCHZUHEIZJZBCKZUFLZMBAFZGZCHZU
      OAIZJZUKUMLZMEAUFUMLZUJUQULURUSUHUOUIUPUSUGUNCUFUMBNOZUIUPPUSUHUOEAAUGCDQ
      UOERUTSTUAUFUMUKUBUCEBCUDUE $.
  $}

  ${
    $d y F $.  $d y A $.
    $( Corollary of Theorem 6.12(1) of [TakeutiZaring] p. 27.  (Contributed by
       NM, 30-Apr-2004.) $)
    tz6.12c $p |- ( E! y A F y -> ( ( F ` A ) = y <-> A F y ) ) $=
      ( cv wbr weu cfv wceq wex euex wi nfeu1 nfv tz6.12-1 expcom breq2 biimprd
      nfim syli com12 exlimi mpcom syl5ibcom impbid ) BADZCEZAFZBCGZUEHZUFUGBUH
      CEZUIUFUFAIUGUJUFAJUFUGUJKAUGUJAUFALUJAMRUGUFUJUFUGUIUJUFUGUIABCNOZUIUJUF
      UHUEBCPZQSTUAUBULUCUKUD $.
  $}

  ${
    $d x y F $.  $d x y A $.  $d y B $.
    $( Corollary of Theorem 6.12(2) of [TakeutiZaring] p. 27.  (Contributed by
       Mario Carneiro, 17-Nov-2014.) $)
    tz6.12i $p |- ( B =/= (/) -> ( ( F ` A ) = B -> A F B ) ) $=
      ( vy cfv wceq c0 wne wbr wi fvex cv neeq1 tz6.12-2 necon1ai tz6.12c breq2
      weu wb 3imtr3d syl biimpcd sylbird eqcoms vtocle a1i com12 ) ACEZBFZBGHZA
      BCIZUIUHGHZAUHCIZUJUKULUMJZUIUNDUHACKDLZUHFUOGHZAUOCIZULUMUPUQJUHUOUHUOFZ
      UPULUQUHUOGMULURUQULUQDRZURUQSUSUHGDACNODACPUAUBUCUDUOUHGMUOUHACQTUEUFUHB
      GMUHBACQTUG $.
  $}

  $( Two possibilities for the behavior of a function value.  (Contributed by
     Stefan O'Rear, 2-Nov-2014.)  (Proof shortened by Mario Carneiro,
     31-Aug-2015.) $)
  fvbr0 $p |- ( X F ( F ` X ) \/ ( F ` X ) = (/) ) $=
    ( cfv wbr c0 wceq wne eqid tz6.12i mpi necon1bi orri ) BBACZADZMEFNMEMEGMMF
    NMHBMAIJKL $.

  $( A function value is a member of the range plus null.  (Contributed by
     Scott Fenton, 8-Jun-2011.)  (Revised by Stefan O'Rear, 3-Jan-2015.) $)
  fvrn0 $p |- ( F ` X ) e. ( ran F u. { (/) } ) $=
    ( cfv c0 wceq crn csn cun wcel id ssun2 0ex snid sselii syl6eqel wn cvv wbr
    ssun1 con1i fvprc fvex a1i fvbr0 ori brelrng syl3anc sseldi pm2.61i ) BACZD
    EZUJAFZDGZHZIUKUJDUNUKJUMUNDUMULKDLMNOUKPZULUNUJULUMSUOBQIZUJQIZBUJARZUJULI
    UPUKBAUATUQUOBAUBUCURUKURUKABUDUETBUJAQQUFUGUHUI $.

  $( The result of a function value is always a subset of the union of the
     range, even if it is invalid and thus empty.  (Contributed by Stefan
     O'Rear, 2-Nov-2014.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
  fvssunirn $p |- ( F ` X ) C_ U. ran F $=
    ( cfv crn c0 csn cun cuni wcel wss fvrn0 elssuni ax-mp uniun 0ex uneq2i un0
    unisn 3eqtri sseqtri ) BACZADZEFZGZHZUBHZUAUDIUAUEJABKUAUDLMUEUFUCHZGUFEGUF
    UBUCNUGEUFEORPUFQST $.

  ${
    $d x y A $.  $d x y F $.
    $( The value of a class outside its domain is the empty set.  (Contributed
       by NM, 24-Aug-1995.) $)
    ndmfv $p |- ( -. A e. dom F -> ( F ` A ) = (/) ) $=
      ( vx cvv wcel cdm wn cfv c0 wceq wi cv wbr weu wex eldmg syl5ibr tz6.12-2
      euex con3d syl6 fvprc a1d pm2.61i ) ADEZABFEZGZABHIJZKUEUGACLBMZCNZGUHUEU
      JUFUJUFUEUICOUICSCABDPQTCABRUAUEGUHUGABUBUCUD $.
  $}

  ${
    ndmfvrcl.1 $e |- dom F = S $.
    ndmfvrcl.2 $e |- -. (/) e. S $.
    $( Reverse closure law for function with the empty set not in its domain.
       (Contributed by NM, 26-Apr-1996.) $)
    ndmfvrcl $p |- ( ( F ` A ) e. S -> A e. S ) $=
      ( cfv wcel cdm wn c0 ndmfv eleq1d mtbiri con4i syl6eleq ) ACFZBGZACHZBARG
      ZQSIZQJBGETPJBACKLMNDO $.
  $}

  $( If a function value has a member, the argument belongs to the domain.
     (Contributed by NM, 12-Feb-2007.) $)
  elfvdm $p |- ( A e. ( F ` B ) -> B e. dom F ) $=
    ( cfv wcel c0 wne cdm ne0i ndmfv necon1ai syl ) ABCDZEMFGBCHEZMAINMFBCJKL
    $.

  $( If a function value has a member, the argument is a set.  (Contributed by
     Mario Carneiro, 6-Nov-2015.) $)
  elfvex $p |- ( A e. ( F ` B ) -> B e. _V ) $=
    ( cfv wcel cdm cvv elfvdm elex syl ) ABCDEBCFZEBGEABCHBKIJ $.

  ${
    elfvexd.1 $e |- ( ph -> A e. ( B ` C ) ) $.
    $( If a function value is nonempty, its argument is a set.  Deduction form
       of ~ elfvex .  (Contributed by David Moews, 1-May-2017.) $)
    elfvexd $p |- ( ph -> C e. _V ) $=
      ( cfv wcel cvv elfvex syl ) ABDCFGDHGEBDCIJ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x F $.
    $( A non-nul function value is an element of the image of the function.
       (Contributed by Thierry Arnoux, 25-Jun-2019.) $)
    eliman0 $p |- ( ( A e. B /\ -. ( F ` A ) = (/) )
      -> ( F ` A ) e. ( F "" B ) ) $=
      ( vx wcel cfv c0 wceq wn wa cv wbr wrex cima fvbr0 orcom mpbi ori breq1
      wo rspcev sylan2 fvex elima sylibr ) ABEZACFZGHZIZJDKZUGCLZDBMZUGCBNEUIUF
      AUGCLZULUHUMUMUHTUHUMTCAOUMUHPQRUKUMDABUJAUGCSUAUBDUGCBACUCUDUE $.
  $}

  $( The value of a non-member of a restriction is the empty set.  (Contributed
     by NM, 13-Nov-1995.) $)
  nfvres $p |- ( -. A e. B -> ( ( F |` B ) ` A ) = (/) ) $=
    ( wcel wn cres cdm cfv wceq cin dmres inss1 eqsstri sseli con3i ndmfv syl
    c0 ) ABDZEACBFZGZDZEATHRIUBSUABAUABCGZJBCBKBUCLMNOATPQ $.

  ${
    $d x y A $.  $d x y F $.
    $( If the restriction of a class to a singleton is not a function, its
       value is the empty set.  (Contributed by NM, 8-Aug-2010.)  (Proof
       shortened by Andrew Salmon, 22-Oct-2011.) $)
    nfunsn $p |- ( -. Fun ( F |` { A } ) -> ( F ` A ) = (/) ) $=
      ( vx vy cfv c0 wceq csn cres wfun wn wrel cv wbr wmo wal weu eumo sylbi
      wa wcel vex brres wb elsn breq1 biimpac moimi syl tz6.12-2 alrimiv relres
      nsyl4 jctil dffun6 sylibr con1i ) ABEFGZBAHZIZJZURKZUTLZCMZDMZUTNZDOZCPZT
      VAVBVHVCVBVGCAVEBNZDQZVGURVJVIDOVGVIDRVFVIDVFVDVEBNZVDUSUAZTVIVDVEBUSDUBU
      CVLVKVIVLVDAGVKVIUDCAUEVDAVEBUFSUGSUHUIDABUJUMUKBUSULUNCDUTUOUPUQ $.
  $}

  $( If a class' value at an argument is not the empty set, the argument is
     contained in the domain of the class, and the class restricted to the
     argument is a function.  (Contributed by Alexander van der Vekens,
     26-May-2017.) $)
  fvfundmfvn0 $p |- ( ( F ` A ) =/= (/)
                      -> ( A e. dom F /\ Fun ( F |` { A } ) ) ) $=
    ( cdm wcel csn cres wfun wa cfv c0 wn wo wceq ianor ndmfv nfunsn jaoi sylbi
    necon1ai ) ABCDZBAEFGZHZABIZJUBKTKZUAKZLUCJMZTUANUDUFUEABOABPQRS $.

  $( Function value of the empty set.  (Contributed by Stefan O'Rear,
     26-Nov-2014.) $)
  0fv $p |- ( (/) ` A ) = (/) $=
    ( c0 cdm wcel wn cfv wceq noel dm0 eleq2i mtbir ndmfv ax-mp ) ABCZDZEABFBGO
    ABDAHNBAIJKABLM $.

  $( Equal values imply equal values in a restriction.  (Contributed by NM,
     13-Nov-1995.) $)
  fveqres $p |- ( ( F ` A ) = ( G ` A ) ->
                ( ( F |` B ) ` A ) = ( ( G |` B ) ` A ) ) $=
    ( wcel cfv wceq cres wi fvres eqeq12d biimprd wn nfvres eqtr4d a1d pm2.61i
    c0 ) ABEZACFZADFZGZACBHFZADBHFZGZISUEUBSUCTUDUAABCJABDJKLSMZUEUBUFUCRUDABCN
    ABDNOPQ $.

  ${
    $d y z A $.  $d y z B $.  $d y z C $.  $d y z F $.  $d x y z $.
    $( Move class substitution in and out of a function value.  (Contributed by
       NM, 11-Nov-2005.)  (Revised by NM, 20-Aug-2018.) $)
    csbfv12 $p |- [_ A / x ]_ ( F ` B ) = ( [_ A / x ]_ F ` [_ A / x ]_ B ) $=
      ( vy cvv wcel cfv csb wceq cv wbr cio csbiota sbcbr123 csbconstg df-fv c0
      wsbc csbprc breq2d syl5bb iotabidv syl5eq csbeq2i 3eqtr4g wn fveq1d eqtrd
      0fv syl6req pm2.61i ) BFGZABCDHZIZABCIZABDIZHZJUMABCEKZDLZEMZIZUPUSUQLZEM
      ZUOURUMVBUTABSZEMVDUTAEBNUMVEVCEVEUPABUSIZUQLUMVCABCUSDOUMVFUSUPUQABUSFPU
      AUBUCUDABUNVAECDQUEEUPUQQUFUMUGZUORURABUNTVGURUPRHRVGUPUQRABDTUHUPUJUKUIU
      L $.

    $( Move class substitution in and out of a function value.  (Contributed by
       NM, 11-Nov-2005.)  Obsolete as of 20-Aug-2018.  Use ~ csbfv12 instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbfv12gOLD $p |- ( A e. C ->
                 [_ A / x ]_ ( F ` B ) = ( [_ A / x ]_ F ` [_ A / x ]_ B ) ) $=
      ( vy wcel cv wbr cio csb cfv csbiotagOLD sbcbrgOLD csbconstg breq2d bitrd
      wsbc iotabidv df-fv eqtrd csbeq2i 3eqtr4g ) BDGZABCFHZEIZFJZKZABCKZUEABEK
      ZIZFJZABCELZKUIUJLUDUHUFABRZFJULUFAFBDMUDUNUKFUDUNUIABUEKZUJIUKABCUEDENUD
      UOUEUIUJABUEDOPQSUAABUMUGFCETUBFUIUJTUC $.
  $}

  ${
    $d y A $.  $d y C $.  $d x y F $.
    $( Move class substitution in and out of a function value.  (Contributed by
       NM, 10-Nov-2005.) $)
    csbfv2g $p |- ( A e. C -> [_ A / x ]_ ( F ` B ) =
                  ( F ` [_ A / x ]_ B ) ) $=
      ( wcel cfv csb csbfv12 csbconstg fveq1d syl5eq ) BDFZABCEGHABCHZABEHZGNEG
      ABCEIMNOEABEDJKL $.

    $( Substitution for a function value.  (Contributed by NM, 1-Jan-2006.)
       (Revised by NM, 20-Aug-2018.) $)
    csbfv $p |- [_ A / x ]_ ( F ` x ) = ( F ` A ) $=
      ( cvv wcel cv cfv csb csbfv2g csbvarg fveq2d eqtrd wn csbprc fvprc eqtr4d
      wceq c0 pm2.61i ) BDEZABAFZCGZHZBCGZQTUCABUAHZCGUDABUADCITUEBCABDJKLTMUCR
      UDABUBNBCOPS $.

    $( Substitution for a function value.  (Contributed by NM, 1-Jan-2006.)
       Obsolete as of 20-Aug-2018.  Use ~ csbfv instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbfvgOLD $p |- ( A e. C -> [_ A / x ]_ ( F ` x ) = ( F ` A ) ) $=
      ( wcel cv cfv csb csbfv2g csbvarg fveq2d eqtrd ) BCEZABAFZDGHABNHZDGBDGAB
      NCDIMOBDABCJKL $.
  $}

  ${
    $d x y A $.  $d x y F $.  $d x y B $.
    $( The second argument of a binary relation on a function is the function's
       value.  (Contributed by NM, 30-Apr-2004.)  (Revised by Mario Carneiro,
       28-Apr-2015.) $)
    funbrfv $p |- ( Fun F -> ( A F B -> ( F ` A ) = B ) ) $=
      ( vy wfun wbr cfv wceq cvv wcel wa wrel funrel brrelex2 sylan cv wi breq2
      anbi2d eqeq2 imbi12d weu funeu tz6.12-1 sylan2 anabss7 vtoclg mpcom ex )
      CEZABCFZACGZBHZBIJZUJUKKZUMUJCLUKUNCMABCNOUJADPZCFZKZULUPHZQUOUMQDBIUPBHZ
      URUOUSUMUTUQUKUJUPBACRSUPBULTUAUJUQUSURUQUQDUBUSDAUPCUCDACUDUEUFUGUHUI $.
  $}

  ${
    $d x y A $.  $d x y F $.  $d x y B $.
    $( The second element in an ordered pair member of a function is the
       function's value.  (Contributed by NM, 19-Jul-1996.) $)
    funopfv $p |- ( Fun F -> ( <. A , B >. e. F -> ( F ` A ) = B ) ) $=
      ( cop wcel wbr wfun cfv wceq df-br funbrfv syl5bir ) ABDCEABCFCGACHBIABCJ
      ABCKL $.
  $}

  ${
    $d x y F $.  $d x A $.  $d x y B $.  $d x C $.
    $( Equivalence of function value and binary relation.  (Contributed by NM,
       19-Apr-2004.)  (Revised by Mario Carneiro, 28-Apr-2015.) $)
    fnbrfvb $p |- ( ( F Fn A /\ B e. A ) ->
                   ( ( F ` B ) = C <-> B F C ) ) $=
      ( vx wfn wcel wa cfv wceq wbr eqid cv wb wi fvex eqeq2 breq2 bibi12d syl
      imbi2d weu fneu tz6.12c vtocl mpbii syl5ibcom fnfun funbrfv adantr impbid
      wfun ) DAFZBAGZHZBDIZCJZBCDKZUOBUPDKZUQURUOUPUPJZUSUPLUOUPEMZJZBVADKZNZOU
      OUTUSNZOEUPBDPVAUPJZVDVEUOVFVBUTVCUSVAUPUPQVAUPBDRSUAUOVCEUBVDEABDUCEBDUD
      TUEUFUPCBDRUGUMURUQOZUNUMDULVGADUHBCDUITUJUK $.

    $( Equivalence of function value and ordered pair membership.  (Contributed
       by NM, 7-Nov-1995.) $)
    fnopfvb $p |- ( ( F Fn A /\ B e. A ) ->
                   ( ( F ` B ) = C <-> <. B , C >. e. F ) ) $=
      ( wfn wcel wa cfv wceq wbr cop fnbrfvb df-br syl6bb ) DAEBAFGBDHCIBCDJBCK
      DFABCDLBCDMN $.
  $}

  ${
    $( Equivalence of function value and binary relation.  (Contributed by NM,
       26-Mar-2006.) $)
    funbrfvb $p |- ( ( Fun F /\ A e. dom F ) ->
                   ( ( F ` A ) = B <-> A F B ) ) $=
      ( wfun cdm wfn wcel cfv wceq wbr wb funfn fnbrfvb sylanb ) CDCCEZFAOGACHB
      IABCJKCLOABCMN $.

    $( Equivalence of function value and ordered pair membership.  Theorem
       4.3(ii) of [Monk1] p. 42.  (Contributed by NM, 26-Jan-1997.) $)
    funopfvb $p |- ( ( Fun F /\ A e. dom F ) ->
                   ( ( F ` A ) = B <-> <. A , B >. e. F ) ) $=
      ( wfun cdm wfn wcel cfv wceq cop wb funfn fnopfvb sylanb ) CDCCEZFAOGACHB
      IABJCGKCLOABCMN $.
  $}

  ${
    $d x y z w A $.  $d x y B $.  $d x y z w F $.  $d x y C $.  $d x Y $.
    $( Function value in terms of a binary relation.  (Contributed by Mario
       Carneiro, 19-Mar-2014.) $)
    funbrfv2b $p |- ( Fun F ->
                       ( A F B <-> ( A e. dom F /\ ( F ` A ) = B ) ) ) $=
      ( wfun wbr cdm wcel wa cfv wceq wrel funrel releldm syl pm4.71rd funbrfvb
      wi ex pm5.32da bitr4d ) CDZABCEZACFGZUBHUCACIBJZHUAUBUCUACKZUBUCQCLUEUBUC
      ABCMRNOUAUCUDUBABCPST $.

    $( Representation of a function in terms of its values.  (Contributed by
       FL, 14-Sep-2013.)  (Proof shortened by Mario Carneiro, 31-Aug-2015.) $)
    dffn5 $p |- ( F Fn A <-> F = ( x e. A |-> ( F ` x ) ) ) $=
      ( vy wfn cv cfv cmpt wceq wcel wa copab wbr wrel fnrel dfrel4v sylib fnbr
      ex pm4.71rd eqcom fnbrfvb syl5bb pm5.32da bitr4d opabbidv eqtrd fvex eqid
      df-mpt syl6eqr fnmpti fneq1 mpbiri impbii ) CBEZCABAFZCGZHZIZUPCUQBJZDFZU
      RIZKZADLZUSUPCUQVBCMZADLZVEUPCNCVGIBCOADCPQUPVFVDADUPVFVAVFKVDUPVFVAUPVFV
      ABUQVBCRSTUPVAVCVFVCURVBIUPVAKVFVBURUABUQVBCUBUCUDUEUFUGADBURUJUKUTUPUSBE
      ABURUSUQCUHUSUIULBCUSUMUNUO $.

    $( The range of a function expressed as a collection of the function's
       values.  (Contributed by NM, 20-Oct-2005.)  (Proof shortened by Mario
       Carneiro, 31-Aug-2015.) $)
    fnrnfv $p |- ( F Fn A -> ran F = { y | E. x e. A y = ( F ` x ) } ) $=
      ( wfn crn cv cfv cmpt wceq wrex cab dffn5 rneq sylbi eqid rnmpt syl6eq )
      DCEZDFZACAGDHZIZFZBGUAJACKBLSDUBJTUCJACDMDUBNOABCUAUBUBPQR $.

    $( A member of a function's range is a value of the function.  (Contributed
       by NM, 31-Oct-1995.) $)
    fvelrnb $p |- ( F Fn A -> ( B e. ran F <-> E. x e. A ( F ` x ) = B ) ) $=
      ( vy wfn crn wcel cv cfv wceq wrex cab fnrnfv eleq2d cvv fvex eleq1 mpbii
      syl6bb rexlimivw eqeq1 eqcom rexbidv elab3 ) DBFZCDGZHCEIZAIZDJZKZABLZEMZ
      HUJCKZABLZUFUGUMCAEBDNOULUOECUNCPHZABUNUJPHUPUIDQUJCPRSUAUHCKZUKUNABUQUKC
      UJKUNUHCUJUBCUJUCTUDUET $.

    $( A member of a surjective function's codomain is a value of the
       function.  (Contributed by Thierry Arnoux, 23-Jan-2020.) $)
    foelrni $p |- ( ( F : A -onto-> B /\ Y e. B ) -> E. x e. A ( F ` x ) = Y )
      $=
      ( wfo wcel cv cfv wceq wrex crn forn eleq2d wfn fofn fvelrnb syl bitr3d
      wb biimpa ) BCDFZECGZAHDIEJABKZUBEDLZGZUCUDUBUECEBCDMNUBDBOUFUDTBCDPABEDQ
      RSUA $.

    $( Alternate definition of the image of a function.  (Contributed by Raph
       Levien, 20-Nov-2006.) $)
    dfimafn $p |- ( ( Fun F /\ A C_ dom F ) ->
                  ( F "" A ) = { y | E. x e. A ( F ` x ) = y } ) $=
      ( wfun cdm wss wa cv cfv wceq wrex cab wbr cima wcel wb ssel funbrfvb ex
      syl9r imp31 rexbidva abbidv dfima2 syl6reqr ) DEZCDFZGZHZAIZDJBIZKZACLZBM
      UKULDNZACLZBMDCOUJUNUPBUJUMUOACUGUIUKCPZUMUOQZUIUQUKUHPZUGURCUHUKRUGUSURU
      KULDSTUAUBUCUDABDCUEUF $.

    $( Alternate definition of the image of a function as an indexed union of
       singletons of function values.  (Contributed by Raph Levien,
       20-Nov-2006.) $)
    dfimafn2 $p |- ( ( Fun F /\ A C_ dom F ) ->
                   ( F "" A ) = U_ x e. A { ( F ` x ) } ) $=
      ( vy wfun cdm wss wa cima cv cfv wceq cab ciun wrex dfimafn iunab syl6eqr
      csn wcel df-sn eqcom abbii eqtri a1i iuneq2i ) CEBCFGHZCBIZABAJZCKZDJZLZD
      MZNZABUJSZNUGUHULABODMUNADBCPULADBQRABUOUMUOUMLUIBTUOUKUJLZDMUMDUJUAUPULD
      UKUJUBUCUDUEUFR $.

    $( Membership relation for the values of a function whose image is a
       subclass.  (Contributed by Raph Levien, 20-Nov-2006.) $)
    funimass4 $p |- ( ( Fun F /\ A C_ dom F ) ->
                    ( ( F "" A ) C_ B <-> A. x e. A ( F ` x ) e. B ) ) $=
      ( vy cdm wss wfun cima cv cfv wcel wral wb wi wal wa wceq wrex syl5bb wbr
      dfss2 eqcom ssel funbrfvb ex syl9 imp31 rexbidva vex elima imbi1d r19.23v
      syl6rbbr syl6bbr albidv ralcom4 eleq1 ceqsalv ralbii bitr3i syl6bb ancoms
      fvex ) BDFZGZDHZDBIZCGZAJZDKZCLZABMZNVIEJZVHLZVNCLZOZEPZVFVGQZVMEVHCUBVSV
      RVNVKRZVPOZABMZEPZVMVSVQWBEVSVQVTABSZVPOWBVSVOWDVPVSWDVJVNDUAZABSVOVSVTWE
      ABVTVKVNRZVSVJBLZQWEVNVKUCVFVGWGWFWENZVFWGVJVELZVGWHBVEVJUDVGWIWHVJVNDUEU
      FUGUHTUIAVNDBEUJUKUNULVTVPABUMUOUPWCWAEPZABMVMWAAEBUQWJVLABVPVLEVKVJDVDVN
      VKCURUSUTVAVBTVC $.

    $( Function value in an image.  Part of Theorem 4.4(iii) of [Monk1] p. 42.
       (Contributed by NM, 29-Apr-2004.)  (Proof shortened by Andrew Salmon,
       22-Oct-2011.) $)
    fvelima $p |- ( ( Fun F /\ A e. ( F "" B ) ) ->
                  E. x e. B ( F ` x ) = A ) $=
      ( wfun cima wcel cv cfv wceq wrex wbr elimag ibi funbrfv reximdv syl5 imp
      ) DEZBDCFZGZAHZDIBJZACKZUAUBBDLZACKZSUDUAUFABDCTMNSUEUCACUBBDOPQR $.
  $}

  ${
    $d x y A $.  $d x C $.  $d x y F $.
    feqmptd.1 $e |- ( ph -> F : A --> B ) $.
    $( Deduction form of ~ dffn5 .  (Contributed by Mario Carneiro,
       8-Jan-2015.) $)
    feqmptd $p |- ( ph -> F = ( x e. A |-> ( F ` x ) ) ) $=
      ( wfn cv cfv cmpt wceq wf ffn syl dffn5 sylib ) AECGZEBCBHEIJKACDELQFCDEM
      NBCEOP $.

    feqresmpt.2 $e |- ( ph -> C C_ A ) $.
    $( Express a restricted function as a mapping.  (Contributed by Mario
       Carneiro, 18-May-2016.) $)
    feqresmpt $p |- ( ph -> ( F |` C ) = ( x e. C |-> ( F ` x ) ) ) $=
      ( cres cv cfv cmpt fssresd feqmptd fvres mpteq2ia syl6eq ) AFEIZBEBJZRKZL
      BESFKZLABEDRACDEFGHMNBETUASEFOPQ $.
  $}

  ${
    $d x z $.  $d x z A $.  $d z F $.
    dffn5f.1 $e |- F/_ x F $.
    $( Representation of a function in terms of its values.  (Contributed by
       Mario Carneiro, 3-Jul-2015.) $)
    dffn5f $p |- ( F Fn A <-> F = ( x e. A |-> ( F ` x ) ) ) $=
      ( vz wfn cv cfv cmpt wceq dffn5 nfcv nffv fveq2 cbvmpt eqeq2i bitri ) CBF
      CEBEGZCHZIZJCABAGZCHZIZJEBCKTUCCEABSUBARCDARLMEUBLRUACNOPQ $.
  $}

  ${
    $d y A $.  $d x y B $.  $d x y C $.  $d x y F $.
    $( Function value in an image.  (Contributed by NM, 20-Jan-2007.)  (Proof
       shortened by Andrew Salmon, 22-Oct-2011.)  (Revised by David Abernethy,
       17-Dec-2011.) $)
    fvelimab $p |- ( ( F Fn A /\ B C_ A ) -> ( C e. ( F "" B ) <->
                  E. x e. B ( F ` x ) = C ) ) $=
      ( vy wfn wss wa cima wcel cv cfv wceq wrex cvv anim2i eleq1 wb wi rexbidv
      elex fvex mpbii rexlimivw eqeq2 bibi12d imbi2d wfun cdm fnfun adantr fndm
      cab sseq2d biimpar dfimafn syl2anc abeq2d vtoclg impcom pm5.21nd ) EBGZCB
      HZIZDECJZKZALZEMZDNZACOZVEDPKZIVGVLVEDVFUBQVKVLVEVJVLACVJVIPKVLVHEUCVIDPR
      UDUEQVLVEVGVKSZVEFLZVFKZVIVNNZACOZSZTVEVMTFDPVNDNZVRVMVEVSVOVGVQVKVNDVFRV
      SVPVJACVNDVIUFUAUGUHVEVQFVFVEEUIZCEUJZHZVFVQFUNNVCVTVDBEUKULVCWBVDVCWABCB
      EUMUOUPAFCEUQURUSUTVAVB $.
  $}

  $( The value of the identity function.  (Contributed by NM, 1-May-2004.)
     (Revised by Mario Carneiro, 28-Apr-2015.) $)
  fvi $p |- ( A e. V -> ( _I ` A ) = A ) $=
    ( cid wfun wcel wbr cfv wceq funi ididg funbrfv mpsyl ) CDABEAACFACGAHIABJA
    ACKL $.

  ${
    $d x y A $.  $d y B $.  $d x y F $.
    $( The value of the identity function is a subset of the argument.
       (Contributed by Mario Carneiro, 27-Feb-2016.) $)
    fviss $p |- ( _I ` A ) C_ A $=
      ( vx cid cfv cv wcel id cvv wceq elfvex fvi syl eleqtrd ssriv ) BACDZABEZ
      OFZPOAQGQAHFOAIPACJAHKLMN $.

    $( The indexed intersection of a function's values is the intersection of
       its range.  (Contributed by NM, 20-Oct-2005.) $)
    fniinfv $p |- ( F Fn A -> |^|_ x e. A ( F ` x ) = |^| ran F ) $=
      ( vy wfn crn cint cv cfv wceq wrex cab ciin fnrnfv inteqd dfiin2 syl6reqr
      fvex ) CBEZCFZGDHAHZCIZJABKDLZGABUBMSTUCADBCNOADBUBUACRPQ $.

    $( Singleton of function value.  (Contributed by NM, 22-May-1998.) $)
    fnsnfv $p |- ( ( F Fn A /\ B e. A ) -> { ( F ` B ) } = ( F "" { B } ) ) $=
      ( vy wfn wcel wa cv cfv wceq cab wbr csn cima eqcom fnbrfvb syl5bb abbidv
      df-sn a1i wrel fnrel relimasn syl adantr 3eqtr4d ) CAEZBAFZGZDHZBCIZJZDKZ
      BUJCLZDKZUKMZCBMNZUIULUNDULUKUJJUIUNUJUKOABUJCPQRUPUMJUIDUKSTUGUQUOJZUHUG
      CUAURACUBDBCUCUDUEUF $.
  $}

  ${
    $d x y z B $.  $d x y z F $.  $d z ph $.  $d x z ps $.
    opabiota.1 $e |- F = { <. x , y >. | { y | ph } = { y } } $.
    $( Define a function whose value is ""the unique ` y ` such that
       ` ph ( x , y ) ` "".  (Contributed by NM, 19-May-2015.) $)
    opabiotafun $p |- Fun F $=
      ( vz wfun cab cv csn wceq copab wmo funopab cuni mo2icl unieq vex mpbir
      wi unisn syl6req mpg nfv nfab1 nfeq1 sneq eqeq2d cbvmo mpgbir funeqi ) DG
      ACHZCIZJZKZBCLZGZUQUOCMZBUOBCNURULFIZJZKZFMZVAUSULOZKTVBFVAFVCPVAVCUTOUSU
      LUTQUSFRUAUBUCUOVACFUOFUDCULUTACUEUFUMUSKUNUTULUMUSUGUHUISUJDUPEUKS $.

    $( Define a function whose value is ""the unique ` y ` such that
       ` ph ( x , y ) ` "".  (Contributed by NM, 16-Nov-2013.) $)
    opabiotadm $p |- dom F = { x | E! y ph } $=
      ( cab cv csn wceq copab cdm wex weu dmopab dmeqi euabsn abbii 3eqtr4i ) A
      CFCGHIZBCJZKSCLZBFDKACMZBFSBCNDTEOUBUABACPQR $.

    opabiota.2 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( Define a function whose value is ""the unique ` y ` such that
       ` ph ( x , y ) ` "".  (Contributed by NM, 16-Nov-2013.) $)
    opabiota $p |- ( B e. dom F -> ( F ` B ) = ( iota y ps ) ) $=
      ( cv cfv cio wceq cdm fveq2 iotabidv eqeq12d wcel vex sylib sylbi wbr wex
      eldm nfiota1 nfeq2 wfun opabiotafun funbrfv ax-mp cab csn cop copab df-br
      wi eleq2i opabid 3bitri ssnid syl5eleqr abid weu breldm opabiotadm abeq2i
      id wb iota1 syl mpbid eqtr4d exlimi vtoclga ) CIZFJZADKZLZEFJZBDKZLCEFMZV
      NELZVOVRVPVSVNEFNWAABDHOPVNVTQZVNDIZFUAZDUBVQDVNFCRZUCWDVQDDVOVPADUDUEWDV
      OWCVPFUFWDVOWCLUOACDFGUGVNWCFUHUIWDAVPWCLZWDADUJZWCUKZLZAWDVNWCULZFQWJWIC
      DUMZQWIVNWCFUNFWKWJGUPWICDUQURWIWCWGQAWIWCWHWGDUSWIVFUTADVASTWDADVBZAWFVG
      WDWBWLVNWCFWEDRVCWLCVTACDFGVDVESADVHVIVJVKVLTVM $.
  $}

  $( The image of a pair under a function.  (Contributed by Jeff Madsen,
     6-Jan-2011.) $)
  fnimapr $p |- ( ( F Fn A /\ B e. A /\ C e. A ) ->
                          ( F "" { B , C } ) = { ( F ` B ) , ( F ` C ) } ) $=
    ( wfn wcel w3a csn cima cun cfv fnsnfv 3adant3 3adant2 uneq12d eqcomd df-pr
    cpr wceq imaeq2i imaundi eqtri 3eqtr4g ) DAEZBAFZCAFZGZDBHZIZDCHZIZJZBDKZHZ
    CDKZHZJZDBCRZIZUMUORUGUQULUGUNUIUPUKUDUEUNUISUFABDLMUDUFUPUKSUEACDLNOPUSDUH
    UJJZIULURUTDBCQTDUHUJUAUBUMUOQUC $.

  ${
    $d w x y z A $.  $d w x y z B $.  $d w x y z F $.
    ssimaex.1 $e |- A e. _V $.
    $( The existence of a subimage.  (Contributed by NM, 8-Apr-2007.) $)
    ssimaex $p |- ( ( Fun F /\ B C_ ( F "" A ) ) ->
                 E. x ( x C_ A /\ B = ( F "" x ) ) ) $=
      ( vy vz vw cima wss cdm cv wceq wa wex cfv wcel wi ex adantr wfun imaeq2i
      cin cres dmres imadmres eqtr3i sseq2i ssrab2 ssel2 adantll fvelima eleq1a
      crab wrex anim2d fveq2 eleq1d elrab syl6ibr simpr jcad reximdv2 adantl wb
      a1i wfn funfn inss2 sstri fvelimab mpan2 sylbi sylibrd syld adantlr eleq1
      mpd biimpcd rexlimiv impbid eqrdv inex1 rabex sseq1 imaeq2 eqeq2d anbi12d
      syl6 spcev sylancr inss1 sstr anim1i eximi syl sylan2br ) CDBIZJDUAZCDBDK
      ZUCZIZJZALZBJZCDXDIZMZNZAOZXBWRCDDBUDKZIXBWRXJXADDBUEUBDBUFUGUHWSXCNZXDXA
      JZXGNZAOZXIXKFLZDPZCQZFXAUNZXAJZCDXRIZMZXNXQFXAUIZXKGCXTXKGLZCQZYCXTQZXKY
      DYEXKYDNYCXBQZYEXCYDYFWSCXBYCUJUKWSYDYFYERXCWSYDNZYFHLZDPZYCMZHXAUOZYEWSY
      FYKRYDWSYFYKHYCXADULSTYGYKYJHXRUOZYEYDYKYLRWSYDYJYJHXAXRYDYHXAQZYJNZYHXRQ
      ZYJYDYNYMYICQZNZYOYDYJYPYMYCCYIUMUPXQYPFYHXAXOYHMXPYICXOYHDUQURUSZUTYNYJR
      YDYMYJVAVFVBVCVDWSYEYLVEZYDWSDWTVGZYSDVHYTXRWTJYSXRXAWTYBBWTVIVJHWTXRYCDV
      KVLVMTVNVOVPVRSWSYEYDRXCWSYEYLYDWSYEYLHYCXRDULSYJYDHXRYOYQYJYDRZYRYPUUAYM
      YJYPYDYIYCCVQVSVDVMVTWITWAWBXMXSYANAXRXQFXABWTEWCWDXDXRMZXLXSXGYAXDXRXAWE
      UUBXFXTCXDXRDWFWGWHWJWKXMXHAXLXEXGXLXABJXEBWTWLXDXABWMVLWNWOWPWQ $.
  $}

  ${
    $d A x y $.  $d B x y $.  $d F x y $.
    $( The existence of a subimage.  (Contributed by FL, 15-Apr-2007.) $)
    ssimaexg $p |- ( ( A e. C /\ Fun F /\ B C_ ( F "" A ) ) ->
                 E. x ( x C_ A /\ B = ( F "" x ) ) ) $=
      ( vy wcel wfun cima wss cv wceq wa wex imaeq2 sseq2d anbi2d sseq2 anbi1d
      wi exbidv imbi12d vex ssimaex vtoclg 3impib ) BDGEHZCEBIZJZAKZBJZCEUJILZM
      ZANZUGCEFKZIZJZMZUJUOJZULMZANZTUGUIMZUNTFBDUOBLZURVBVAUNVCUQUIUGVCUPUHCUO
      BEOPQVCUTUMAVCUSUKULUOBUJRSUAUBAUOCEFUCUDUEUF $.
  $}

  $( A simplified expression for the value of a function when we know it's a
     function.  (Contributed by NM, 22-May-1998.) $)
  funfv $p |- ( Fun F -> ( F ` A ) = U. ( F "" { A } ) ) $=
    ( wfun cdm wcel cfv csn cima cuni wceq fvex unisn wfn df-fn mpbiran2 fnsnfv
    wa eqid unieqd c0 sylanbr syl5eqr ex wn ndmfv ndmima syl6eq eqtr4d pm2.61d1
    uni0 ) BCZABDZEZABFZBAGHZIZJZUKUMUQUKUMQZUNUNGZIUPUNABKLURUSUOUKBULMZUMUSUO
    JUTUKULULJULRBULNOULABPUASUBUCUMUDZUNTUPABUEVAUPTITVAUOTABUFSUJUGUHUI $.

  ${
    $d y A $.  $d y F $.
    $( The value of a function.  Definition of function value in [Enderton]
       p. 43.  (Contributed by NM, 22-May-1998.) $)
    funfv2 $p |- ( Fun F -> ( F ` A ) = U. { y | A F y } ) $=
      ( wfun cfv csn cima cuni cv wbr cab funfv wrel funrel relimasn syl unieqd
      wceq eqtrd ) CDZBCECBFGZHBAICJAKZHBCLTUAUBTCMUAUBRCNABCOPQS $.
  $}

  ${
    $d w z A $.  $d w z F $.  $d w y z $.
    funfv2f.1 $e |- F/_ y A $.
    funfv2f.2 $e |- F/_ y F $.
    $( The value of a function.  Version of ~ funfv2 using a bound-variable
       hypotheses instead of distinct variable conditions.  (Contributed by NM,
       19-Feb-2006.) $)
    funfv2f $p |- ( Fun F -> ( F ` A ) = U. { y | A F y } ) $=
      ( vw wfun cfv wbr cab cuni funfv2 nfcv nfbr nfv breq2 cbvab unieqi syl6eq
      cv ) CGBCHBFTZCIZFJZKBATZCIZAJZKFBCLUCUFUBUEFAABUACDEAUAMNUEFOUAUDBCPQRS
      $.
  $}

  $( Value of the union of two functions when the domains are separate.
     (Contributed by FL, 7-Nov-2011.) $)
  fvun $p |- ( ( ( Fun F /\ Fun G ) /\ ( dom F i^i dom G ) = (/) ) ->
                ( ( F u. G ) ` A ) = ( ( F ` A ) u. ( G ` A ) ) ) $=
    ( wfun wa cdm cin c0 wceq cun cfv csn cima cuni funun funfv imaundir eqcomd
    syl a1i unieqd uniun anim12i adantr uneq12 syl5eq 3eqtrd ) BDZCDZEZBFCFGHIZ
    EZABCJZKZUMALZMZNZBUOMZCUOMZJZNZABKZACKZJZULUMDUNUQIBCOAUMPSULUPUTUPUTIULBC
    UOQTUAULVAURNZUSNZJZVDURUSUBULVEVBIZVFVCIZEZVGVDIUJVJUKUHVHUIVIUHVBVEABPRUI
    VCVFACPRUCUDVEVBVFVCUESUFUG $.

  ${
    $d A x $.  $d B x $.  $d X x $.
    $( The value of a union when the argument is in the first domain.
       (Contributed by Scott Fenton, 29-Jun-2013.) $)
    fvun1 $p |- ( ( F Fn A /\ G Fn B /\ ( ( A i^i B ) = (/) /\ X e. A ) ) ->
    ( ( F u. G ) ` X ) = ( F ` X ) ) $=
      ( wfn cin c0 wceq wcel wa w3a cun cfv wfun cdm fnfun 3ad2ant1 fndm wn syl
      3ad2ant2 eqeq1d biimprd adantrd 3impia fvun syl21anc disjel adantl eleq2d
      ineqan12d wb adantr mtbird 3adant1 ndmfv uneq2d un0 syl6eq eqtrd ) CAFZDB
      FZABGZHIZEAJZKZLZECDMNZECNZEDNZMZVJVHCOZDOZCPZDPZGZHIZVIVLIVBVCVMVGACQRVC
      VBVNVGBDQUBVBVCVGVRVBVCKZVEVRVFVSVRVEVSVQVDHVBVCVOAVPBACSBDSZULUCUDUEUFEC
      DUGUHVHVLVJHMVJVHVKHVJVHEVPJZTZVKHIVCVGWBVBVCVGKWAEBJZVGWCTVCABEUIUJVCWAW
      CUMVGVCVPBEVTUKUNUOUPEDUQUAURVJUSUTVA $.
  $}

  $( The value of a union when the argument is in the second domain.
     (Contributed by Scott Fenton, 29-Jun-2013.) $)
  fvun2 $p |- ( ( F Fn A /\ G Fn B /\ ( ( A i^i B ) = (/) /\ X e. B ) ) ->
    ( ( F u. G ) ` X ) = ( G ` X ) ) $=
    ( wfn cin c0 wceq wcel w3a cun cfv uncom fveq1i incom eqeq1i anbi1i fvun1
    wa syl3an3b 3com12 syl5eq ) CAFZDBFZABGZHIZEBJZTZKECDLZMEDCLZMZEDMZEUJUKCDN
    OUEUDUIULUMIZUIUEUDBAGZHIZUHTUNUGUPUHUFUOHABPQRBADCESUAUBUC $.

  ${
    $d x y z A $.  $d x y z F $.
    $( Alternate definition of function value ~ df-fv that doesn't require
       dummy variables.  (Contributed by NM, 4-Aug-2010.) $)
    dffv2 $p |- ( F ` A ) = U. ( ( F "" { A } )
            \ U. U. ( ( ( F |` { A } ) o. `' ( F |` { A } ) ) \ _I ) ) $=
      ( vy vz vx cid cdif cuni wceq cvv wcel wn c0 wss unieqd syl6eq wa wbr wex
      wal csn cres wfun cfv cima ccnv ccom snidb fvres sylbi fvprc eqtr4d funfv
      pm2.61i wrel df-fun simprbi ssdif0 sylib uni0 resima dif0 eqtr4i syl6reqr
      difeq2d eqtrd syl5eqr nfunsn cdm cv weq relres dffun3 mpbiran albii alnex
      wi iman bitri exbii exnal 3bitrri con1bii eximi snssi residm dmeqi biimpi
      sp ssdmres syl vex breldm elsn syl6bb biimpa syl2an breq1d biimpd pm2.43d
      eleq2 ex anim1d eximdv exlimdv mpan9 eleq2i elimasni sylbir cpr cop uniop
      opex unisn wrex brrelexi brcnvg sylancr biimpar adantl breq2 breq1 rspcev
      anbi12d mpancom ancoms syldan anim1i an32s eldif rexv brco df-br 3bitr2ri
      wb ideq equcom 3bitr3i notbii syl5eqssr anbi12i bitr2i 3syl unissd sylibr
      uniss prss simpld syl5 exlimiv ssrdv ndmima difeq1d 0dif pm2.61d1 ) BAUAZ
      UBZUCZABUDZBUUPUEZUUQUUQUFZUGZFGZHZHZGZHZIUURUUSAUUQUDZUVGAJKZUVHUUSIZUVI
      AUUPKUVJAUHAUUPBUIUJUVILUVHMUUSAUUQUKABUKULUNUURUVHUUQUUPUEZHUVGAUUQUMUUR
      UVKUVFUURUVFUUTMGZUVKUURUVEMUUTUURUVEMHZMUURUVDMUURUVDUVMMUURUVCMUURUVBFN
      ZUVCMIUURUUQUOZUVNUUQUPUQUVBFURUSOUTPOUTPVEUVKUUTUVLBUUPVAZUUTVBVCVDOVFVG
      UURLZUUSMUVGABVHUVQUVGUVMMUVQUVFMUVQAUUQVIZKZUVFMIZUVQUVSUVTUVQUVSQZUUTUV
      ENUVTUWACUUTUVEUWAADVJZUUQRZDCVKZLZQZDSZCVJZUUTKZUWHUVEKZVQZUVQEVJZUWBUUQ
      RZUWEQZDSZESZUVSUWGUVQUWOCTZESZUWPUWRUURUURUWMUWDVQZDTZCSZETZUWQLZETUWRLU
      URUVOUXBBUUPVLZEDCUUQVMVNUXAUXCEUXAUWOLZCSUXCUWTUXECUWTUWNLZDTUXEUWSUXFDU
      WMUWDVRVOUWNDVPVSVTUWOCWAVSVOUWQEVPWBWCUWQUWOEUWOCWIWDUJUVSUWOUWGEUVSUWNU
      WFDUVSUWMUWCUWEUVSUWMUWCUVSUWMUWMUWCVQUVSUWMQZUWMUWCUXGUWLAUWBUUQUVSUVRUU
      PIZUWLUVRKZUWLAIZUWMUVSUUPUVRNZUXHAUVRWEUXKUVRUUQUUPUBZVIZUUPUXLUUQBUUPWF
      WGUXKUXMUUPIUUPUUQWJWHVGWKUWLUWBUUQEWLDWLZWMUXHUXIUXJUXHUXIUWLUUPKUXJUVRU
      UPUWLXAEAWNWOWPWQWRWSXBWTXCXDXEXFUWFUWKDUWIAUWHUUQRZUWFUWJUWIUWHUVKKUXOUV
      KUUTUWHUVPXGUUQAUWHXHXIUWFUXOUWJUWFUXOQZUWJUWBUVEKZUXPUWHUWBXJZUVENUWJUXQ
      QUXPUXRUWHUWBXKZHUVEUWHUWBCWLZUXNXLUXPUXSUVDUXPUXSUXSUAZHZUVDUXSUWHUWBXMX
      NUXPUXSUVCKZUYAUVCNUYBUVDNUXPUWHUWLUVARZUWMQZEJXOZUWEQZUYCUWCUXOUWEUYGUWC
      UXOQUYFUWEUWCUXOUWHAUVARZUYFUWCUYHUXOUWCUWHJKUVIUYHUXOYOUXTAUWBUUQUXDXPZU
      WHAJJUUQXQXRXSUYHUWCUYFUVIUYHUWCQZUYFUWCUVIUYHUYIXTUYEUYJEAJUXJUYDUYHUWMU
      WCUWLAUWHUVAYAUWLAUWBUUQYBYDYCYEYFYGYHYIUYCUXSUVBKZUXSFKZLZQUYGUXSUVBFYJU
      YKUYFUYMUWEUYFUYEESUWHUWBUVBRUYKUYEEYKEUWHUWBUUQUVAUXTUXNYLUWHUWBUVBYMYNU
      YLUWDUWHUWBFRCDVKUYLUWDUWHUWBUXNYPUWHUWBFYMCDYQYRYSUUAUUBUSUXSUVCWEUYAUVC
      UUFUUCYTUUDYTUWHUWBUVEUXTUXNUUGUUEUUHXBUUIUUJWKUUKUUTUVEURUSXBUVSLZUVFMUV
      EGMUYNUUTMUVEUYNUUTUVKMUVPAUUQUULVGUUMUVEUUNPUUOOUTPULUN $.
  $}

  ${
    $d x y A $.  $d x y F $.  $d x y G $.  $d x X $.
    $( Domains of a function composition.  (Contributed by NM, 27-Jan-1997.) $)
    dmfco $p |- ( ( Fun G /\ A e. dom G ) ->
               ( A e. dom ( F o. G ) <-> ( G ` A ) e. dom F ) ) $=
      ( vx vy wfun cdm wcel wa ccom cv cop wex cfv wb eldm2g exbidv wceq syl5bb
      cvv vex opelco2g mpan2 bitrd adantl fvex eldm2 opeq1 eleq1d ceqsexv eqcom
      funopfvb anbi1d syl5bbr bitr4d ) CFZACGZHZIZABCJZGHZADKZLCHZVBEKZLZBHZIZD
      MZEMZACNZBGHZURVAVIOUPURVAAVDLUTHZEMVIEAUTUQPURVLVHEURVDTHVLVHOEUADAVDBCU
      QTUBUCQUDUEVKVJVDLZBHZEMUSVIEVJBACUFZUGUSVNVHEVNVBVJRZVFIZDMUSVHVFVNDVJVO
      VPVEVMBVBVJVDUHUIUJUSVQVGDUSVPVCVFVPVJVBRUSVCVBVJUKAVBCULSUMQUNQSUO $.

    $( Value of a function composition.  Similar to second part of Theorem 3H
       of [Enderton] p. 47.  (Contributed by NM, 9-Oct-2004.)  (Proof shortened
       by Andrew Salmon, 22-Oct-2011.)  (Revised by Stefan O'Rear,
       16-Oct-2014.) $)
    fvco2 $p |- ( ( G Fn A /\ X e. A ) -> ( ( F o. G ) ` X ) =
          ( F ` ( G ` X ) ) ) $=
      ( vx wfn wcel wa cv ccom csn cio cfv fnsnfv imaeq2d imaco syl6reqr eleq2d
      cima dffv3 iotabidv 3eqtr4g ) CAFDAGHZEIZBCJZDKZSZGZELUDBDCMZKZSZGZELDUEM
      UIBMUCUHULEUCUGUKUDUCUKBCUFSZSUGUCUJUMBADCNOBCUFPQRUAEDUETEUIBTUB $.
  $}

  $( Value of a function composition.  Similar to Exercise 5 of [TakeutiZaring]
     p. 28.  (Contributed by NM, 22-Apr-2006.)  (Proof shortened by Mario
     Carneiro, 26-Dec-2014.) $)
  fvco $p |- ( ( Fun G /\ A e. dom G ) ->
               ( ( F o. G ) ` A ) = ( F ` ( G ` A ) ) ) $=
    ( wfun cdm wfn wcel ccom cfv wceq funfn fvco2 sylanb ) CDCCEZFANGABCHIACIBI
    JCKNBCALM $.

  $( Value of a function composition.  (Contributed by NM, 3-Jan-2004.)
     (Revised by Mario Carneiro, 26-Dec-2014.) $)
  fvco3 $p |- ( ( G : A --> B /\ C e. A ) ->
             ( ( F o. G ) ` C ) = ( F ` ( G ` C ) ) ) $=
    ( wf wfn wcel ccom cfv wceq ffn fvco2 sylan ) ABEFEAGCAHCDEIJCEJDJKABELADEC
    MN $.

  ${
    fvco4i.a $e |- (/) = ( F ` (/) ) $.
    fvco4i.b $e |- Fun G $.
    $( Conditions for a composition to be expandable without conditions on the
       argument.  (Contributed by Stefan O'Rear, 31-Mar-2015.) $)
    fvco4i $p |- ( ( F o. G ) ` X ) = ( F ` ( G ` X ) ) $=
      ( cdm wcel ccom cfv wceq wfn wfun funfn mpbi fvco2 mpan wn dmcoss ndmfv
      c0 sseli con3i syl fveq2d 3eqtr4a pm2.61i ) CBFZGZCABHZIZCBIZAIZJZBUGKZUH
      UMBLUNEBMNUGABCOPUHQZTTAIUJULDUOCUIFZGZQUJTJUQUHUPUGCABRUAUBCUISUCUOUKTAC
      BSUDUEUF $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y ch $.
    fvopab3g.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    fvopab3g.3 $e |- ( y = B -> ( ps <-> ch ) ) $.
    fvopab3g.4 $e |- ( x e. C -> E! y ph ) $.
    fvopab3g.5 $e |- F = { <. x , y >. | ( x e. C /\ ph ) } $.
    $( Value of a function given by ordered-pair class abstraction.
       (Contributed by NM, 6-Mar-1996.)  (Revised by Mario Carneiro,
       28-Apr-2015.) $)
    fvopab3g $p |- ( ( A e. C /\ B e. D ) -> ( ( F ` A ) = B <-> ch ) ) $=
      ( wcel wa cv wceq wb adantr cop copab cfv anbi12d anbi2d opelopabg fnopab
      eleq1 wfn fnopfvb mpan eleq2i syl6bb ibar 3bitr4d ) FHOZGIOZPFGUAZDQZHOZA
      PZDEUBZOZUPCPZFJUCGRZCVAUPBPVDDEFGHIUSFRUTUPABUSFHUHKUDEQGRBCUPLUEUFUPVEV
      CSUQUPVEURJOZVCJHUIUPVEVFSADEHJMNUGHFGJUJUKJVBURNULUMTUPCVDSUQUPCUNTUO $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y ch $.
    fvopab3ig.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    fvopab3ig.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    fvopab3ig.3 $e |- ( x e. C -> E* y ph ) $.
    fvopab3ig.4 $e |- F = { <. x , y >. | ( x e. C /\ ph ) } $.
    $( Value of a function given by ordered-pair class abstraction.
       (Contributed by NM, 23-Oct-1999.) $)
    fvopab3ig $p |- ( ( A e. C /\ B e. D ) -> ( ch -> ( F ` A ) = B ) ) $=
      ( wcel wa cv cfv wceq wi cop copab eleq1 anbi12d anbi2d opelopabg biimpar
      exp43 pm2.43a imp fveq1i wfun funopab moanimv mpbir mpgbir funopfv syl5eq
      wmo ax-mp syl6 ) FHOZGIOZPZCFGUADQZHOZAPZDEUBZOZFJRZGSVBVCCVITZVCVBVKVBVC
      VBCVIVDVIVBCPZVGVBBPVLDEFGHIVEFSVFVBABVEFHUCKUDEQGSBCVBLUEUFUGUHUIUJVIVJF
      VHRZGFJVHNUKVHULZVIVMGSTVNVGEUSZDVGDEUMVOVFAEUSTMVFAEUNUOUPFGVHUQUTURVA
      $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x C y $.  $d x D y $.
    fvmptg.1 $e |- ( x = A -> B = C ) $.
    fvmptg.2 $e |- F = ( x e. D |-> B ) $.
    $( Value of a function given in maps-to notation.  (Contributed by NM,
       2-Oct-2007.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    fvmptg $p |- ( ( A e. D /\ C e. R ) -> ( F ` A ) = C ) $=
      ( vy wcel wa wceq cfv eqid cv eqeq2d eqeq1 wmo moeq a1i cmpt copab df-mpt
      eqtri fvopab3ig mpi ) BEKDFKLDDMZBGNDMDOJPZCMZUIDMUHAJBDEFGAPZBMCDUIHQUID
      DRUJJSUKEKZJCTUAGAECUBULUJLAJUCIAJECUDUEUFUG $.

    $( Value of a function given in maps-to notation.  (Contributed by Mario
       Carneiro, 23-Apr-2014.) $)
    fvmpti $p |- ( A e. D -> ( F ` A ) = ( _I ` C ) ) $=
      ( wcel cvv cfv cid wceq wa fvmptg fvi adantl eqtr4d wn c0 cv eleq1d dmmpt
      cdm elrab2 baib notbid ndmfv syl6bir imp fvprc pm2.61dan ) BEIZDJIZBFKZDL
      KZMUMUNNUODUPABCDEJFGHOUNUPDMUMDJPQRUMUNSZNUOTUPUMUQUOTMZUMUQBFUDZIZSURUM
      UTUNUTUMUNCJIUNABEUSAUABMCDJGUBAECFHUCUEUFUGBFUHUIUJUQUPTMUMDLUKQRUL $.

    ${
      fvmpt.3 $e |- C e. _V $.
      $( Value of a function given in maps-to notation.  (Contributed by NM,
         17-Aug-2011.) $)
      fvmpt $p |- ( A e. D -> ( F ` A ) = C ) $=
        ( wcel cvv cfv wceq fvmptg mpan2 ) BEJDKJBFLDMIABCDEKFGHNO $.
    $}
  $}

  ${
    $d B x $.  $d V x $.  $d X x $.
    fvtresfn.f $e |- F = ( x e. B |-> ( x |` V ) ) $.
    $( Functionality of a tuple-restriction function.  (Contributed by Stefan
       O'Rear, 24-Jan-2015.) $)
    fvtresfn $p |- ( X e. B -> ( F ` X ) = ( X |` V ) ) $=
      ( wcel cres cvv cfv wceq resexg cv reseq1 fvmptg mpdan ) EBGEDHZIGECJQKED
      BLAEAMZDHQBICREDNFOP $.
  $}

  ${
    $d y A $.  $d y z B $.  $d x y z C $.
    fvmpts.1 $e |- F = ( x e. C |-> B ) $.
    $( Value of a function given in maps-to notation, using explicit class
       substitution.  (Contributed by Scott Fenton, 17-Jul-2013.)  (Revised by
       Mario Carneiro, 31-Aug-2015.) $)
    fvmpts $p |- ( ( A e. C /\ [_ A / x ]_ B e. V ) ->
        ( F ` A ) = [_ A / x ]_ B ) $=
      ( vy cv csb csbeq1 cmpt nfcv nfcsb1v csbeq1a cbvmpt eqtri fvmptg ) HBAHIZ
      CJZABCJDFEASBCKEADCLHDTLGAHDCTHCMASCNASCOPQR $.
  $}

  ${
    $d x A $.  $d x C $.  $d x D $.  $d x V $.
    fvmpt3.a $e |- ( x = A -> B = C ) $.
    fvmpt3.b $e |- F = ( x e. D |-> B ) $.
    ${
      fvmpt3.c $e |- ( x e. D -> B e. V ) $.
      $( Value of a function given in maps-to notation, with a slightly
         different sethood condition.  (Contributed by Stefan O'Rear,
         30-Jan-2015.) $)
      fvmpt3 $p |- ( A e. D -> ( F ` A ) = C ) $=
        ( wcel cfv wceq cv eleq1d vtoclga fvmptg mpdan ) BEKDGKZBFLDMCGKSABEANB
        MCDGHOJPABCDEGFHIQR $.
    $}

    fvmpt3i.c $e |- B e. _V $.
    $( Value of a function given in maps-to notation, with a slightly different
       sethood condition.  (Contributed by Mario Carneiro, 11-Sep-2015.) $)
    fvmpt3i $p |- ( A e. D -> ( F ` A ) = C ) $=
      ( cvv wcel cv a1i fvmpt3 ) ABCDEFJGHCJKALEKIMN $.
  $}

  ${
    $d x A $.  $d x C $.  $d x D $.  $d x ph $.
    fvmptd.1 $e |- ( ph -> F = ( x e. D |-> B ) ) $.
    fvmptd.2 $e |- ( ( ph /\ x = A ) -> B = C ) $.
    fvmptd.3 $e |- ( ph -> A e. D ) $.
    fvmptd.4 $e |- ( ph -> C e. V ) $.
    $( Deduction version of ~ fvmpt .  (Contributed by Scott Fenton,
       18-Feb-2013.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    fvmptd $p |- ( ph -> ( F ` A ) = C ) $=
      ( cfv cmpt csb fveq1d wcel wceq csbied eqeltrd eqid fvmpts syl2anc 3eqtrd
      ) ACGMCBFDNZMZBCDOZEACGUEIPACFQUGHQUFUGRKAUGEHABCDEFKJSZLTBCDFUEHUEUAUBUC
      UHUD $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d y D $.  $d y z F $.
    fvmpt2.1 $e |- F = ( x e. A |-> B ) $.
    $( Value of a function given by the ""maps to"" notation.  (Contributed by
       Mario Carneiro, 23-Apr-2014.) $)
    fvmpt2i $p |- ( x e. A -> ( F ` x ) = ( _I ` B ) ) $=
      ( vy cv csb weq csbeq1 csbid syl6eq cmpt nfcv nfcsb1v cbvmpt eqtri fvmpti
      csbeq1a ) FAGZAFGZCHZCBDFAIUBATCHCAUATCJACKLDABCMFBUBMEAFBCUBFCNAUACOAUAC
      SPQR $.

    $( Value of a function given by the ""maps to"" notation.  (Contributed by
       FL, 21-Jun-2010.) $)
    fvmpt2 $p |- ( ( x e. A /\ B e. C ) -> ( F ` x ) = B ) $=
      ( cv wcel cfv cid fvmpt2i fvi sylan9eq ) AGZBHCDHNEICJICABCEFKCDLM $.

    $d x y z C $.
    $( If all the values of the mapping are subsets of a class ` C ` , then so
       is any evaluation of the mapping, even if ` D ` is not in the base set
       ` A ` .  (Contributed by Mario Carneiro, 13-Feb-2015.) $)
    fvmptss $p |- ( A. x e. A B C_ C -> ( F ` D ) C_ C ) $=
      ( vy wss wcel cfv cv wi wceq fveq2 sseq1d imbi2d nfcv wa c0 dmmptss sseli
      wral cdm nfra1 cmpt nfmpt1 nfcxfr nffv nfss nfim cvv dmmpt rabeq2i fvmpt2
      eqimss syl sylbi wn ndmfv 0ss syl6eqss pm2.61i rsp impcom syl5ss vtoclgaf
      ex vtoclga sylan2 adantl pm2.61dan ) CDIZABUCZEFUDZJZEFKZDIZVPVNEBJZVRVOB
      EABCFGUAUBVSVNVRVNHLZFKZDIZMZVNVRMHEBVTENZWBVRVNWDWAVQDVTEFOPQVNALZFKZDIZ
      MWCAVTBAVTRZVNWBAVMABUEAWADAVTFAFABCUFGABCUGUHWHUIADRUJUKWEVTNZWGWBVNWIWF
      WADWEVTFOPQWEBJZVNWGWJVNSWFCDWEVOJZWFCIZWKWJCULJZSZWLWMAVOBABCFGUMUNWNWFC
      NWLABCULFGUOWFCUPUQURWKUSWFTCWEFUTCVAVBVCVNWJVMVMABVDVEVFVHVGVIVEVJVNVPUS
      ZSVQTDWOVQTNVNEFUTVKDVAVBVL $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d y D $.  $d y z F $.
    fvmpt2d.1 $e |- ( ph -> F = ( x e. A |-> B ) ) $.
    fvmpt2d.4 $e |- ( ( ph /\ x e. A ) -> B e. V ) $.
    $( Deduction version of ~ fvmpt2 .  (Contributed by Thierry Arnoux,
       8-Dec-2016.) $)
    fvmpt2d $p |- ( ( ph /\ x e. A ) -> ( F ` x ) = B ) $=
      ( cv wcel wa cfv cmpt wceq fveq1d adantr simpr eqid fvmpt2 syl2anc eqtrd
      ) ABIZCJZKZUBELZUBBCDMZLZDAUEUGNUCAUBEUFGOPUDUCDFJUGDNAUCQHBCDFUFUFRSTUA
      $.
  $}

  ${
    $d x z $.  $d x y A $.  $d y z B $.  $d y C $.
    fvmptex.1 $e |- F = ( x e. A |-> B ) $.
    fvmptex.2 $e |- G = ( x e. A |-> ( _I ` B ) ) $.
    $( Express a function ` F ` whose value ` B ` may not always be a set in
       terms of another function ` G ` for which sethood is guaranteed.  (Note
       that ` ( _I `` B ) ` is just shorthand for
       ` if ( B e. _V , B , (/) ) ` , and it is always a set by ~ fvex .)  Note
       also that these functions are not the same; wherever ` B ( C ) ` is not
       a set, ` C ` is not in the domain of ` F ` (so it evaluates to the empty
       set), but ` C ` is in the domain of ` G ` , and ` G ( C ) ` is defined
       to be the empty set.  (Contributed by Mario Carneiro, 14-Jul-2013.)
       (Revised by Mario Carneiro, 23-Apr-2014.) $)
    fvmptex $p |- ( F ` C ) = ( G ` C ) $=
      ( vy wcel cfv wceq csb cid cv cmpt nfcv cbvmpt eqtri c0 nfcsb1v nffv fvex
      csbeq1 csbeq1a fvmpti fveq2d fvmpt eqtr4d wn cdm sseli con3i ndmfv dmmpti
      dmmptss syl eleq2i sylnbir pm2.61i ) DBJZDEKZDFKZLVAVBADCMZNKZVCIDAIOZCMZ
      VDBEAVFDCUDZEABCPIBVGPGAIBCVGICQAVFCUAZAVFCUEZRSUFIDVGNKZVEBFVFDLVGVDNVHU
      GFABCNKZPIBVKPHAIBVLVKIVLQAVGNANQVIUBAOVFLCVGNVJUGRSVDNUCUHUIVAUJZVBTVCVM
      DEUKZJZUJVBTLVOVAVNBDABCEGUPULUMDEUNUQVADFUKZJVCTLVPBDABVLFCNUCHUOURDFUNU
      SUIUT $.
  $}

  ${
    $d x A $.  $d x D $.  $d x ph $.
    fvmptdf.1 $e |- ( ph -> A e. D ) $.
    fvmptdf.2 $e |- ( ( ph /\ x = A ) -> B e. V ) $.
    fvmptdf.3 $e |- ( ( ph /\ x = A ) -> ( ( F ` A ) = B -> ps ) ) $.
    ${
      fvmptdf.4 $e |- F/_ x F $.
      fvmptdf.5 $e |- F/ x ps $.
      $( Alternate deduction version of ~ fvmpt , suitable for iteration.
         (Contributed by Mario Carneiro, 7-Jan-2017.) $)
      fvmptdf $p |- ( ph -> ( F = ( x e. D |-> B ) -> ps ) ) $=
        ( cv wceq cmpt wi nfv wcel cfv nfmpt1 nfeq nfim cvv wex syl isset sylib
        elex fveq1 simpr fveq2d adantr eqeltrd eqid fvmpt2 eqtr3d eqeq2d sylbid
        wa syl2anc syl5 exlimdd ) ACNZDOZGCFEPZOZBQCACRVGBCCGVFLCFEUAUBMUCADUDS
        ZVECUEADFSZVHIDFUIUFCDUGUHVGDGTZDVFTZOZAVEUTZBDGVFUJVMVLVJEOBVMVKEVJVMV
        DVFTZVKEVMVDDVFAVEUKZULVMVDFSEHSVNEOVMVDDFVOAVIVEIUMUNJCFEHVFVFUOUPVAUQ
        URKUSVBVC $.
    $}

    $d x F $.  $d x ps $.
    $( Alternate deduction version of ~ fvmpt , suitable for iteration.
       (Contributed by Mario Carneiro, 7-Jan-2017.) $)
    fvmptdv $p |- ( ph -> ( F = ( x e. D |-> B ) -> ps ) ) $=
      ( nfcv nfv fvmptdf ) ABCDEFGHIJKCGLBCMN $.
  $}

  ${
    $d x A $.  $d x C $.  $d x D $.  $d x ph $.
    fvmptdv2.1 $e |- ( ph -> A e. D ) $.
    fvmptdv2.2 $e |- ( ( ph /\ x = A ) -> B e. V ) $.
    fvmptdv2.3 $e |- ( ( ph /\ x = A ) -> B = C ) $.
    $( Alternate deduction version of ~ fvmpt , suitable for iteration.
       (Contributed by Mario Carneiro, 7-Jan-2017.) $)
    fvmptdv2 $p |- ( ph -> ( F = ( x e. D |-> B ) -> ( F ` A ) = C ) ) $=
      ( cfv wceq cmpt cvv eqidd cv wcel elex syl wex isset wa eqeltrrd exlimddv
      sylib fvmptd fveq1 eqeq1d syl5ibrcom ) ACGLZEMGBFDNZMZCULLZEMABCDEFULOAUL
      PKIABQCMZEORBACORZUOBUAACFRUPICFSTBCUBUFAUOUCZDEOKUQDHRDORJDHSTUDUEUGUMUK
      UNECGULUHUIUJ $.
  $}

  ${
    $d x y A $.  $d y B $.  $d y C $.
    $( Bidirectional equality theorem for a mapping abstraction.  Equivalent to
       ~ eqfnfv .  (Contributed by Mario Carneiro, 14-Nov-2014.) $)
    mpteqb $p |- ( A. x e. A B e. V ->
      ( ( x e. A |-> B ) = ( x e. A |-> C ) <->
        A. x e. A B = C ) ) $=
      ( wcel wral cvv cmpt wceq wb wfn eqid mptfng wa wi nfmpt1 cfv fvmpt2 syl
      elex ralimi fneq1 3bitr4g biimpd r19.26 nfeq cv simpll ad2ant2lr ad2ant2l
      fveq1d 3eqtr3d exp31 ralrimi ralim syl5bir expd mpdd mpteq12 mpan impbid1
      com12 ) CEFZABGCHFZABGZABCIZABDIZJZCDJZABGZKVDVEABCEUAUBVFVIVKVIVFVKVIVFD
      HFZABGZVKVIVFVMVIVGBLVHBLVFVMBVGVHUCABCVGVGMZNABDVHVHMZNUDUEVIVFVMVKVFVMO
      VEVLOZABGZVIVKVEVLABUFVIVPVJPZABGVQVKPVIVRABAVGVHABCQABDQUGVIAUHZBFZVPVJV
      IVTOVPOZVSVGRZVSVHRZCDWAVSVGVHVIVTVPUIULVTVEWBCJVIVLABCHVGVNSUJVTVLWCDJVI
      VEABDHVHVOSUKUMUNUOVPVJABUPTUQURUSVCBBJVKVIBMABCBDUTVAVBT $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x y D $.
    $( Closed theorem form of ~ fvmpt .  (Contributed by Scott Fenton,
       21-Feb-2013.)  (Revised by Mario Carneiro, 11-Sep-2015.) $)
    fvmptt $p |- ( ( A. x ( x = A -> B = C ) /\
      F = ( x e. D |-> B ) /\ ( A e. D /\ C e. V ) ) -> ( F ` A ) = C ) $=
      ( cv wceq wi wal cmpt wcel wa w3a cfv simp2 fveq1d wrex cvv elex nfa1 nfv
      risset nfeq1 nfim simprl simplr simprr eqeltrd eqid fvmpt2 syl2anc simpll
      nffvmpt1 fveq2d 3eqtr3d exp43 a2i com23 rexlimd syl7 syl5bi imp32 3adant2
      sps eqtrd ) AHZBIZCDIZJZAKZFAECLZIZBEMZDGMZNZOZBFPBVMPZDVRBFVMVLVNVQQRVLV
      QVSDIZVNVLVOVPVTVOVIAESZVLVPVTJABEUDVPDTMZVLWAVTDGUAVLVIWBVTJZAEVKAUBWBVT
      AWBAUCAVSDAECBUOUEUFVKVHEMZVIWCJJAVKVIWDWCVIVJWDWCJVIVJWDWBVTVIVJNZWDWBNZ
      NZVHVMPZCVSDWGWDCTMWHCIWEWDWBUGWGCDTVIVJWFUHZWEWDWBUIUJAECTVMVMUKULUMWGVH
      BVMVIVJWFUNUPWIUQURUSUTVFVAVBVCVDVEVG $.
  $}

  ${
    $d x y $.  $d y A $.  $d y B $.  $d y C $.  $d x y D $.  $d y F $.
    fvmptf.1 $e |- F/_ x A $.
    fvmptf.2 $e |- F/_ x C $.
    fvmptf.3 $e |- ( x = A -> B = C ) $.
    fvmptf.4 $e |- F = ( x e. D |-> B ) $.
    $( Value of a function given by an ordered-pair class abstraction.  This
       version of ~ fvmptg uses bound-variable hypotheses instead of distinct
       variable conditions.  (Contributed by NM, 8-Nov-2005.)  (Revised by
       Mario Carneiro, 15-Oct-2016.) $)
    fvmptf $p |- ( ( A e. D /\ C e. V ) -> ( F ` A ) = C ) $=
      ( wcel cfv wceq cvv elex cv wi nfel1 cmpt nfmpt1 nfcxfr nffv eleq1d fveq2
      nfeq nfim eqeq12d imbi12d fvmpt2 ex vtoclgaf syl5 imp ) BELZDGLZBFMZDNZUP
      DOLZUOURDGPCOLZAQZFMZCNZRUSURRABEHUSURAADOISAUQDABFAFAECTKAECUAUBHUCIUFUG
      VABNZUTUSVCURVDCDOJUDVDVBUQCDVABFUEJUHUIVAELUTVCAECOFKUJUKULUMUN $.

    $( The value of a function given by an ordered-pair class abstraction is
       the empty set when the class it would otherwise map to is a proper
       class.  This version of ~ fvmptn uses bound-variable hypotheses instead
       of distinct variable conditions.  (Contributed by NM, 21-Oct-2003.)
       (Revised by Mario Carneiro, 11-Sep-2015.) $)
    fvmptnf $p |- ( -. C e. _V -> ( F ` A ) = (/) ) $=
      ( cvv wcel wn cdm cfv c0 wceq dmmptss sseli cid cmpt eqid fvmptex fvex cv
      nfcv nffv fveq2d fvmptf mpan2 syl5eq fvprc sylan9eq expcom ndmfv pm2.61d1
      syl5 ) DKLMZBFNZLZBFOZPQZUTBELZURVBUSEBAECFJRSVCURVBVCURVADTOZPVCVABAECTO
      ZUAZOZVDAECBFVFJVFUBZUCVCVDKLVGVDQDTUDABVEVDEVFKGADTATUFHUGAUEBQCDTIUHVHU
      IUJUKDTULUMUNUQBFUOUP $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x y D $.  $d y F $.
    fvmptn.1 $e |- ( x = D -> B = C ) $.
    fvmptn.2 $e |- F = ( x e. A |-> B ) $.
    $( This somewhat non-intuitive theorem tells us the value of its function
       is the empty set when the class ` C ` it would otherwise map to is a
       proper class.  This is a technical lemma that can help eliminate
       redundant sethood antecedents otherwise required by ~ fvmptg .
       (Contributed by NM, 21-Oct-2003.)  (Revised by Mario Carneiro,
       9-Sep-2013.) $)
    fvmptn $p |- ( -. C e. _V -> ( F ` D ) = (/) ) $=
      ( nfcv fvmptnf ) AECDBFAEIADIGHJ $.

    $( A mapping always evaluates to a subset of the substituted expression in
       the mapping, even if this is a proper class, or we are out of the
       domain.  (Contributed by Mario Carneiro, 13-Feb-2015.) $)
    fvmptss2 $p |- ( F ` D ) C_ C $=
      ( cdm wcel cfv wss cvv wa cv wceq eleq1d dmmpt elrab2 fvmptg eqimss sylbi
      syl wn c0 ndmfv 0ss syl6eqss pm2.61i ) EFIZJZEFKZDLZUKEBJDMJZNZUMCMJUNAEB
      UJAOEPCDMGQABCFHRSUOULDPUMAECDBMFGHTULDUAUCUBUKUDULUEDEFUFDUGUHUI $.
  $}

  ${
    $d M x y $.  $d V x $.  $d X x y $.  $d Y y $.  $d m y $.
    elfvmptrab1.f $e |- F = ( x e. V |-> { y e. [_ x / m ]_ M | ph } ) $.
    elfvmptrab1.v $e |- ( X e. V -> [_ X / m ]_ M e. _V ) $.
    $( Implications for the value of a function defined by the maps-to notation
       with a class abstraction as a result having an element.  Here, the base
       set of the class abstraction depends on the argument of the function.
       (Contributed by Alexander van der Vekens, 15-Jul-2018.) $)
    elfvmptrab1 $p |- ( Y e. ( F ` X )
                        -> ( X e. V /\ Y e. [_ X / m ]_ M ) ) $=
      ( cfv wcel csb c0 crab cvv wceq 3syl nfcv wa wne ne0i ndmfv necon1ai wsbc
      cdm wi dmmptss sseli rabexg nfsbc1v nfcsb csbeq1 sbceq1a rabeqbidv fvmptf
      cv nfrab syl2anc eleq2d elrabi anim12i ex sylbid pm2.43i ) IHELZMZHGMZIDH
      FNZMZUAZVHVGOUBHEUGZMZVHVLUHVGIUCVNVGOHEUDUEVNVHIABHUFZCVJPZMZVLVNVGVPIVN
      VIVPQMZVGVPRVMGHBGACDBURZFNZPZEJUIUJZVNVIVJQMVRWBKVOCVJQUKSBHWAVPGEQBHTZV
      OBCVJABHULBDHFWCBFTUMUSVSHRAVOCVTVJDVSHFUNABHUOUPJUQUTVAVNVQVLVNVIVQVKWBV
      OCIVJVBVCVDVESVF $.
  $}

  ${
    $d M m x y $.  $d V x $.  $d X x y $.  $d Y y $.
    elfvmptrab.f $e |- F = ( x e. V |-> { y e. M | ph } ) $.
    elfvmptrab.v $e |- ( X e. V -> M e. _V ) $.
    $( Implications for the value of a function defined by the maps-to notation
       with a class abstraction as a result having an element.  (Contributed by
       Alexander van der Vekens, 15-Jul-2018.) $)
    elfvmptrab $p |- ( Y e. ( F ` X ) -> ( X e. V /\ Y e. M ) ) $=
      ( vm cfv wcel csb wa crab cmpt wceq csbconstg syl cv rabeq mpteq2ia eqtri
      eqcomd cvv eqeltrd elfvmptrab1 eleq2d biimpd imdistani ) HGDLMGFMZHKGENZM
      ZOULHEMZOABCKDEFGHDBFACEPZQBFACKBUAZENZPZQIBFUPUSUQFMZEURRUPUSRUTUREKUQEF
      SUEACEURUBTUCUDULUMEUFKGEFSZJUGUHULUNUOULUNUOULUMEHVAUIUJUKT $.
  $}

  ${
    $d x y A $.
    fvopab4ndm.1 $e |- F = { <. x , y >. | ( x e. A /\ ph ) } $.
    $( Value of a function given by an ordered-pair class abstraction, outside
       of its domain.  (Contributed by NM, 28-Mar-2008.) $)
    fvopab4ndm $p |- ( -. B e. A -> ( F ` B ) = (/) ) $=
      ( wcel wn cdm cfv c0 wceq cv wa copab dmeqi dmopabss eqsstri sseli con3i
      ndmfv syl ) EDHZIEFJZHZIEFKLMUFUDUEDEUEBNDHAOBCPZJDFUGGQABCDRSTUAEFUBUC
      $.
  $}

  ${
    $d w x y z A $.  $d w z F $.  $d x ps $.
    fvopab5.1 $e |- F = { <. x , y >. | ph } $.
    fvopab5.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( The value of a function that is expressed as an ordered pair
       abstraction.  (Contributed by NM, 19-Feb-2006.)  (Revised by Mario
       Carneiro, 11-Sep-2015.) $)
    fvopab5 $p |- ( A e. V -> ( F ` A ) = ( iota y ps ) ) $=
      ( vz wcel cvv cio wceq cv wbr nfcv nfcxfr nfbr nfv elex df-fv breq2 copab
      cfv nfopab2 cbviota eqtri wb nfopab1 nfbi breq1 bibi12d cop eleq2i opabid
      df-br 3bitri vtoclg1f iotabidv syl5eq syl ) EGKELKZEFUEZBDMZNEGUAVCVDEDOZ
      FPZDMZVEVDEJOZFPZJMVHJEFUBVJVGJDVIVFEFUCDEVIFDEQDFACDUDZHACDUFRDVIQSVGJTU
      GUHVCVGBDCOZVFFPZAUIVGBUICELVGBCCEVFFCEQCFVKHACDUJRCVFQSBCTUKVLENVMVGABVL
      EVFFULIUMVMVLVFUNZFKVNVKKAVLVFFUQFVKVNHUOACDUPURUSUTVAVB $.
  $}

  ${
    $d A x y $.  $d ps x y $.  $d B y $.  $d C x y $.
    fvopab6.1 $e |- F = { <. x , y >. | ( ph /\ y = B ) } $.
    fvopab6.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    fvopab6.3 $e |- ( x = A -> B = C ) $.
    $( Value of a function given by ordered-pair class abstraction.
       (Contributed by Jeff Madsen, 2-Sep-2009.)  (Revised by Mario Carneiro,
       11-Sep-2015.) $)
    fvopab6 $p |- ( ( A e. D /\ C e. R /\ ps ) -> ( F ` A ) = C ) $=
      ( wcel cfv wceq cvv cv wa copab elex eqeq2d anbi12d iba bicomd moeq moani
      wi wmo a1i vex biantrur opabbii eqtri fvopab3ig sylan 3impia ) EHNZGINZBE
      JOGPZUREQNUSBUTUHEHUAADRZFPZSZBVAGPZSZBCDEGQIJCRZEPZABVBVDLVGFGVAMUBUCVDB
      VEVDBUDUEVCDUIVFQNZVBADDFUFUGUJJVCCDTVHVCSZCDTKVCVICDVHVCCUKULUMUNUOUPUQ
      $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y F $.  $d x y G $.  $d x ph $.
    $( Equality of functions is determined by their values.  Special case of
       Exercise 4 of [TakeutiZaring] p. 28 (with domain equality omitted).
       (Contributed by NM, 3-Aug-1994.)  (Proof shortened by Andrew Salmon,
       22-Oct-2011.)  (Proof shortened by Mario Carneiro, 31-Aug-2015.) $)
    eqfnfv $p |- ( ( F Fn A /\ G Fn A ) -> ( F = G <->
                 A. x e. A ( F ` x ) = ( G ` x ) ) ) $=
      ( wfn wa wceq cv cfv cmpt wral dffn5 eqeq12 syl2anb cvv wcel rgenw mpteqb
      wb fvex ax-mp syl6bb ) CBEZDBEZFCDGZABAHZCIZJZABUFDIZJZGZUGUIGABKZUCCUHGD
      UJGUEUKSUDABCLABDLCUHDUJMNUGOPZABKUKULSUMABUFCTQABUGUIORUAUB $.

    $( Equality of functions is determined by their values.  Exercise 4 of
       [TakeutiZaring] p. 28.  (Contributed by NM, 3-Aug-1994.)  (Revised by
       Mario Carneiro, 31-Aug-2015.) $)
    eqfnfv2 $p |- ( ( F Fn A /\ G Fn B ) -> ( F = G <->
                 ( A = B /\ A. x e. A ( F ` x ) = ( G ` x ) ) ) ) $=
      ( wfn wa wceq cv cfv wral dmeq fndm eqeqan12d syl5ib pm4.71rd wb biimparc
      cdm fneq2 eqfnfv sylan2 anassrs pm5.32da bitrd ) DBFZECFZGZDEHZBCHZUIGUJA
      IZDJUKEJHABKZGUHUIUJUIDSZESZHUHUJDELUFUGUMBUNCBDMCEMNOPUHUJUIULUFUGUJUIUL
      QZUGUJGUFEBFZUOUJUPUGBCETRABDEUAUBUCUDUE $.

    $d x B $.
    $( Derive equality of functions from equality of their values.
       (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    eqfnfv3 $p |- ( ( F Fn A /\ G Fn B ) -> ( F = G <-> ( B C_ A /\ A. x e. A
                                  ( x e. B /\ ( F ` x ) = ( G ` x ) ) ) ) ) $=
      ( wfn wa wceq cv cfv wral wss wcel eqfnfv2 ancom bitri anbi1i anass dfss3
      eqss r19.26 bitr4i anbi2i syl6bb ) DBFECFGDEHBCHZAIZDJUFEJHZABKZGZCBLZUFC
      MZUGGABKZGZABCDENUIUJBCLZGZUHGZUMUEUOUHUEUNUJGUOBCTUNUJOPQUPUJUNUHGZGUMUJ
      UNUHRUQULUJUQUKABKZUHGULUNURUHABCSQUKUGABUAUBUCPPUD $.

    eqfnfvd.1 $e |- ( ph -> F Fn A ) $.
    eqfnfvd.2 $e |- ( ph -> G Fn A ) $.
    eqfnfvd.3 $e |- ( ( ph /\ x e. A ) -> ( F ` x ) = ( G ` x ) ) $.
    $( Deduction for equality of functions.  (Contributed by Mario Carneiro,
       24-Jul-2014.) $)
    eqfnfvd $p |- ( ph -> F = G ) $=
      ( wceq cv cfv wral ralrimiva wfn wb eqfnfv syl2anc mpbird ) ADEIZBJZDKTEK
      IZBCLZAUABCHMADCNECNSUBOFGBCDEPQR $.
  $}

  ${
    $d x z A $.  $d y z F $.  $d y z G $.  $d x y $.
    eqfnfv2f.1 $e |- F/_ x F $.
    eqfnfv2f.2 $e |- F/_ x G $.
    $( Equality of functions is determined by their values.  Special case of
       Exercise 4 of [TakeutiZaring] p. 28 (with domain equality omitted).
       This version of ~ eqfnfv uses bound-variable hypotheses instead of
       distinct variable conditions.  (Contributed by NM, 29-Jan-2004.) $)
    eqfnfv2f $p |- ( ( F Fn A /\ G Fn A ) -> ( F = G <->
                 A. x e. A ( F ` x ) = ( G ` x ) ) ) $=
      ( vz wfn wa wceq cv cfv wral eqfnfv nfcv nffv nfeq nfv fveq2 eqeq12d
      cbvral syl6bb ) CBHDBHICDJGKZCLZUCDLZJZGBMAKZCLZUGDLZJZABMGBCDNUFUJGABAUD
      UEAUCCEAUCOZPAUCDFUKPQUJGRUCUGJUDUHUEUIUCUGCSUCUGDSTUAUB $.
  $}

  ${
    $d F x $.  $d G x $.
    $( Equality of functions is determined by their values.  (Contributed by
       Scott Fenton, 19-Jun-2011.) $)
    eqfunfv $p |- ( ( Fun F /\ Fun G ) -> ( F = G <->
                    ( dom F = dom G /\
                      A. x e. dom F ( F ` x ) = ( G ` x ) ) ) ) $=
      ( wfun cdm wfn wceq cv cfv wral wa wb funfn eqfnfv2 syl2anb ) BDBBEZFCCEZ
      FBCGPQGAHZBIRCIGAPJKLCDBMCMAPQBCNO $.
  $}

  ${
    $d x B $.  $d x F $.  $d x G $.
    $( Equality of restricted functions is determined by their values (for
       functions with different domains).  (Contributed by AV, 6-Jan-2019.) $)
    fvreseq0 $p |- ( ( ( F Fn A /\ G Fn C ) /\ ( B C_ A /\ B C_ C ) ) ->
           ( ( F |` B ) = ( G |` B ) <-> A. x e. B ( F ` x ) = ( G ` x ) ) ) $=
      ( wfn wa wss cres wceq cv cfv wral fnssres ad2ant2r ad2ant2l eqfnfv fvres
      wb wcel eqeq12d ralbiia syl6bb syl2anc ) EBGZFDGZHCBIZCDIZHHECJZCGZFCJZCG
      ZUJULKZALZEMZUOFMZKZACNZTUFUHUKUGUIBCEOPUGUIUMUFUHDCFOQUKUMHUNUOUJMZUOULM
      ZKZACNUSACUJULRVBURACUOCUAUTUPVAUQUOCESUOCFSUBUCUDUE $.

    $( Equality of a function restricted to the domain of another function.
       (Contributed by AV, 6-Jan-2019.) $)
    fvreseq1 $p |- ( ( ( F Fn A /\ G Fn B ) /\ B C_ A ) ->
                    ( ( F |` B ) = G <-> A. x e. B ( F ` x ) = ( G ` x ) ) ) $=
      ( wfn wa wss cres wceq cv cfv wral fnresdm ad2antlr eqcomd eqeq2d wb ssid
      fvreseq0 mpanr2 bitrd ) DBFZECFZGZCBHZGZDCIZEJUHECIZJZAKZDLUKELJACMZUGEUI
      UHUGUIEUDUIEJUCUFCENOPQUEUFCCHUJULRCSABCCDETUAUB $.
  $}

  ${
    $d x B $.  $d x F $.  $d x G $.
    $( Equality of restricted functions is determined by their values.
       (Contributed by NM, 3-Aug-1994.)  (Prove shortened by AV,
       4-Mar-2019.) $)
    fvreseq $p |- ( ( ( F Fn A /\ G Fn A ) /\ B C_ A ) ->
         ( ( F |` B ) = ( G |` B ) <-> A. x e. B ( F ` x ) = ( G ` x ) ) ) $=
      ( wfn wa wss cres wceq cv cfv wral wb fvreseq0 anabsan2 ) DBFEBFGCBHDCIEC
      IJAKZDLQELJACMNABCBDEOP $.
  $}

  ${
    $d A a i $.  $d C i $.  $d D a $.  $d M a i $.  $d U a i $.  $d V a i $.
    $d ph a i $.
    fnmptfvd.m $e |- ( ph -> M Fn A ) $.
    fnmptfvd.s $e |- ( i = a -> D = C ) $.
    fnmptfvd.d $e |- ( ( ph /\ i e. A ) -> D e. U ) $.
    fnmptfvd.c $e |- ( ( ph /\ a e. A ) -> C e. V ) $.
    $( A function with a given domain is a mapping defined by its function
       values.  (Contributed by AV, 1-Mar-2019.) $)
    fnmptfvd $p |- ( ph -> ( M = ( a e. A |-> C )
                              <-> A. i e. A ( M ` i ) = D ) ) $=
      ( cmpt wceq cfv wral wfn wcel eqid cv ralrimiva fnmpt syl syl2anc cbvmptv
      wb eqfnfv eqcomi a1i fveq1d eqeq2d ralbidv simpr fvmpt2 ralbidva 3bitrd
      wa ) AGIBCNZOZFUAZGPZVAUSPZOZFBQZVBVAFBDNZPZOZFBQVBDOZFBQAGBRUSBRZUTVEUGJ
      ACHSZIBQVJAVKIBMUBIBCUSHUSTUCUDFBGUSUHUEAVDVHFBAVCVGVBAVAUSVFUSVFOAVFUSFI
      BDCKUFUIUJUKULUMAVHVIFBAVABSZURZVGDVBVMVLDESVGDOAVLUNLFBDEVFVFTUOUEULUPUQ
      $.
  $}

  ${
    $d F x y $.  $d G x y $.  $d A x y $.
    $( Two ways to express the locus of differences between two functions.
       (Contributed by Stefan O'Rear, 17-Jan-2015.) $)
    fndmdif $p |- ( ( F Fn A /\ G Fn A ) -> dom ( F \ G ) =
          { x e. A | ( F ` x ) =/= ( G ` x ) } ) $=
      ( vy wfn wa cdm cv cfv wss wceq wcel wbr wex wn wb eqcom fnbrfvb syl5bb
      cdif cin wne crab difss dmss ax-mp fndm adantr syl5sseq dfss1 vex adantll
      sylib necon3abid breq2 notbid ceqsexv syl6bbr adantlr anbi1d brdif exbidv
      eldm fvex bitr2d rabbi2dva eqtr3d ) CBFZDBFZGZBCDUAZHZUBZVMAIZCJZVODJZUCZ
      ABUDVKVMBKVNVMLVKCHZVMBVLCKVMVSKCDUEVLCUFUGVIVSBLVJBCUHUIUJVMBUKUNVKVRABV
      MVOVMMVOEIZVLNZEOZVKVOBMZGZVREVOVLAULVDWDVRVTVPLZVOVTDNZPZGZEOZWBWDVRVOVP
      DNZPZWIWDWJVPVQVJWCVPVQLZWJQVIWLVQVPLVJWCGWJVPVQRBVOVPDSTUMUOWGWKEVPVOCVE
      WEWFWJVTVPVODUPUQURUSWDWHWAEWDWHVOVTCNZWGGWAWDWEWMWGVIWCWEWMQVJWEVPVTLVIW
      CGWMVTVPRBVOVTCSTUTVAVOVTCDVBUSVCVFTVGVH $.

    $( The difference set between two functions is commutative.  (Contributed
       by Stefan O'Rear, 17-Jan-2015.) $)
    fndmdifcom $p |- ( ( F Fn A /\ G Fn A ) ->
        dom ( F \ G ) = dom ( G \ F ) ) $=
      ( vx wfn wa cv cfv wne crab cdif cdm wb wcel necom rabbiia fndmdif ancoms
      a1i wceq 3eqtr4a ) BAEZCAEZFDGZBHZUDCHZIZDAJUFUEIZDAJZBCKLCBKLZUGUHDAUGUH
      MUDANUEUFOSPDABCQUCUBUJUITDACBQRUA $.

    $( The difference set of two functions is empty if and only if the
       functions are equal.  (Contributed by Stefan O'Rear, 17-Jan-2015.) $)
    fndmdifeq0 $p |- ( ( F Fn A /\ G Fn A ) ->
        ( dom ( F \ G ) = (/) <-> F = G ) ) $=
      ( vx wfn wa cdif cdm c0 wceq cv cfv wne crab fndmdif eqeq1d eqfnfv rabeq0
      wral wn nne ralbii bitri syl6rbbr bitrd ) BAECAEFZBCGHZIJDKZBLZUHCLZMZDAN
      ZIJZBCJZUFUGULIDABCOPUFUNUIUJJZDASZUMDABCQUMUKTZDASUPUKDARUQUODAUIUJUAUBU
      CUDUE $.

    $( Two ways to express the locus of equality between two functions.
       (Contributed by Stefan O'Rear, 17-Jan-2015.) $)
    fndmin $p |- ( ( F Fn A /\ G Fn A ) -> dom ( F i^i G ) =
          { x e. A | ( F ` x ) = ( G ` x ) } ) $=
      ( vy wfn wa cin cdm cv cfv wceq copab cmpt dffn5 biimpi df-mpt syl6eq wex
      cab wcel ineqan12d inopab dmeqd 19.42v anandi exbii eqeq1 ceqsexv 3bitr3i
      crab fvex anbi2i abbii dmopab df-rab 3eqtr4i ) CBFZDBFZGZCDHZIAJZBUAZEJZV
      BCKZLZGZVCVDVBDKZLZGZGZAEMZIZVEVHLZABUKZUTVAVLUTVAVGAEMZVJAEMZHVLURUSCVPD
      VQURCABVENZVPURCVRLABCOPAEBVEQRUSDABVHNZVQUSDVSLABDOPAEBVHQRUBVGVJAEUCRUD
      VKESZATVCVNGZATVMVOVTWAAVCVFVIGZGZESVCWBESZGVTWAVCWBEUEWCVKEVCVFVIUFUGWDV
      NVCVIVNEVEVBCULVDVEVHUHUIUMUJUNVKAEUOVNABUPUQR $.
  $}

  ${
    $d F x $.  $d G x $.  $d A x $.
    $( Two functions are equal iff their equalizer is the whole domain.
       (Contributed by Stefan O'Rear, 7-Mar-2015.) $)
    fneqeql $p |- ( ( F Fn A /\ G Fn A ) ->
        ( F = G <-> dom ( F i^i G ) = A ) ) $=
      ( vx wfn wa wceq cfv crab cin cdm wral eqfnfv eqcom rabid2 syl6bbr fndmin
      cv bitri eqeq1d bitr4d ) BAECAEFZBCGZDRZBHUDCHGZDAIZAGZBCJKZAGUBUCUEDALZU
      GDABCMUGAUFGUIUFANUEDAOSPUBUHUFADABCQTUA $.

    $( Two functions are equal iff their equalizer contains the whole domain.
       (Contributed by Stefan O'Rear, 9-Mar-2015.) $)
    fneqeql2 $p |- ( ( F Fn A /\ G Fn A ) ->
        ( F = G <-> A C_ dom ( F i^i G ) ) ) $=
      ( wfn wceq cin cdm wss fneqeql inss1 dmss ax-mp adantr syl5sseq biantrurd
      wa fndm eqss syl6rbbr bitrd ) BADZCADZPZBCEBCFZGZAEZAUEHZABCIUCUGUEAHZUGP
      UFUCUHUGUCBGZUEAUDBHUEUIHBCJUDBKLUAUIAEUBABQMNOUEARST $.

    $( Two functions are equal on a subset iff their equalizer contains that
       subset.  (Contributed by Stefan O'Rear, 7-Mar-2015.) $)
    fnreseql $p |- ( ( F Fn A /\ G Fn A /\ X C_ A ) ->
        ( ( F |` X ) = ( G |` X ) <-> X C_ dom ( F i^i G ) ) ) $=
      ( wfn wss w3a cin cdm wb fnssres 3adant2 3adant1 fneqeql syl2anc resindir
      cres wceq dmeqi dmres eqtr3i eqeq1i df-ss bitr4i syl6bb ) BAEZCAEZDAFZGZB
      DQZCDQZRZUJUKHZIZDRZDBCHZIZFZUIUJDEZUKDEZULUOJUFUHUSUGADBKLUGUHUTUFADCKMD
      UJUKNOUODUQHZDRURUNVADUPDQZIUNVAVBUMBCDPSUPDTUAUBDUQUCUDUE $.
  $}

  ${
    $d x y A $.  $d x y F $.
    $( The range of a choice function (a function that chooses an element from
       each member of its domain) is included in the union of its domain.
       (Contributed by NM, 31-Aug-1999.) $)
    chfnrn $p |- ( ( F Fn A /\ A. x e. A ( F ` x ) e. x ) -> ran F C_ U. A ) $=
      ( vy wfn cv cfv wcel wral wa crn cuni wrex wceq fvelrnb biimpd wi biimpcd
      eleq1 ralimi rexim syl sylan9 eluni2 syl6ibr ssrdv ) CBEZAFZCGZUHHZABIZJZ
      DCKZBLZULDFZUMHZUOUHHZABMZUOUNHUGUPUIUONZABMZUKURUGUPUTABUOCOPUKUSUQQZABI
      UTURQUJVAABUSUJUQUIUOUHSRTUSUQABUAUBUCAUOBUDUEUF $.
  $}

  ${
    $d x F $.  $d x A $.
    $( Ordered pair with function value.  Part of Theorem 4.3(i) of [Monk1]
       p. 41.  (Contributed by NM, 14-Oct-1996.) $)
    funfvop $p |- ( ( Fun F /\ A e. dom F ) -> <. A , ( F ` A ) >. e. F ) $=
      ( wfun cdm wcel wa cfv wceq cop eqid funopfvb mpbii ) BCABDEFABGZMHAMIBEM
      JAMBKL $.
  $}

  $( Two ways to say that ` A ` is in the domain of ` F ` .  (Contributed by
     Mario Carneiro, 1-May-2014.) $)
  funfvbrb $p |- ( Fun F -> ( A e. dom F <-> A F ( F ` A ) ) ) $=
    ( wfun cdm wcel cfv wbr wa funfvop df-br sylibr wrel funrel releldm impbida
    cop sylan ) BCZABDEZAABFZBGZRSHATPBEUAABIATBJKRBLUASBMATBNQO $.

  $( A member of a preimage is a function value argument.  (Contributed by NM,
     4-May-2007.) $)
  fvimacnvi $p |- ( ( Fun F /\ A e. ( `' F "" B ) ) -> ( F ` A ) e. B ) $=
    ( wfun ccnv cima wcel cfv csn wss snssi funimass2 sylan2 fvex snss cdm wceq
    wa cnvimass sseli wfn funfn fnsnfv sylanb sseq1d syl5bb mpbird ) CDZACEBFZG
    ZRZACHZBGZCAIZFZBJZUJUHUNUIJUPAUIKUNBCLMUMULIZBJUKUPULBACNOUKUQUOBUJUHACPZG
    ZUQUOQZUIURACBSTUHCURUAUSUTCUBURACUCUDMUEUFUG $.

  $( The argument of a function value belongs to the preimage of any class
     containing the function value.  Raph Levien remarks:  ""This proof is
     unsatisfying, because it seems to me that ~ funimass2 could probably be
     strengthened to a biconditional.""  (Contributed by Raph Levien,
     20-Nov-2006.) $)
  fvimacnv $p |- ( ( Fun F /\ A e. dom F ) ->
                 ( ( F ` A ) e. B <-> A e. ( `' F "" B ) ) ) $=
    ( wfun cdm wcel wa cfv ccnv cima csn cop funfvop wb fvex mpan adantl mpbird
    cvv wss opelcnvg elimasng imass2 sylbi sseld syl5com wi fvimacnvi ex adantr
    snss impbid ) CDZACEZFZGZACHZBFZACIZBJZFZUPAUSUQKZJZFZURVAUPVDUQALUSFZUPVEA
    UQLCFZACMUOVEVFNZUMUQSFZUOVGACOZUQASUNCUAPQRUOVDVENZUMVHUOVJVIUSUQASUNUBPQR
    URVCUTAURVBBTVCUTTUQBVIUKVBBUSUCUDUEUFUMVAURUGUOUMVAURABCUHUIUJUL $.

  ${
    $d F x $.  $d A x $.  $d B x $.
    $( A kind of contraposition law that infers an image subclass from a
       subclass of a preimage.  Raph Levien remarks:  ""Likely this could be
       proved directly, and ~ fvimacnv would be the special case of ` A ` being
       a singleton, but it works this way round too.""  (Contributed by Raph
       Levien, 20-Nov-2006.) $)
    funimass3 $p |- ( ( Fun F /\ A C_ dom F ) ->
                    ( ( F "" A ) C_ B <-> A C_ ( `' F "" B ) ) ) $=
      ( vx wfun cdm wss wa cima cv ccnv wcel wral funimass4 wb ssel fvimacnv ex
      cfv syl9r imp31 ralbidva bitrd dfss3 syl6bbr ) CEZACFZGZHZCAIBGZDJZCKBIZL
      ZDAMZAULGUIUJUKCSBLZDAMUNDABCNUIUOUMDAUFUHUKALZUOUMOZUHUPUKUGLZUFUQAUGUKP
      UFURUQUKBCQRTUAUBUCDAULUDUE $.

    $( A subclass of a preimage in terms of function values.  (Contributed by
       NM, 15-May-2007.) $)
    funimass5 $p |- ( ( Fun F /\ A C_ dom F ) ->
                    ( A C_ ( `' F "" B ) <-> A. x e. A ( F ` x ) e. B ) ) $=
      ( wfun cdm wss wa cima ccnv cv cfv wcel wral funimass3 funimass4 bitr3d )
      DEBDFGHDBICGBDJCIGAKDLCMABNBCDOABCDPQ $.

    $( Two ways of specifying that a function is constant on a subdomain.
       (Contributed by NM, 8-Mar-2007.) $)
    funconstss $p |- ( ( Fun F /\ A C_ dom F ) ->
                     ( A. x e. A ( F ` x ) = B <-> A C_ ( `' F "" { B } ) ) ) $=
      ( wfun cdm wss wa cfv wceq wral cima csn ccnv wcel funimass4 elsnc ralbii
      cv fvex syl6rbb funimass3 bitrd ) DEBDFGHZASZDIZCJZABKZDBLCMZGZBDNUILGUDU
      JUFUIOZABKUHABUIDPUKUGABUFCUEDTQRUABUIDUBUC $.
  $}

  $( Alternate proof of ~ fvimacnv , based on ~ funimass3 .  If ~ funimass3 is
     ever proved directly, as opposed to using ~ funimacnv pointwise, then the
     proof of ~ funimacnv should be replaced with this one.  (Contributed by
     Raph Levien, 20-Nov-2006.)  (Proof modification is discouraged.)
     (New usage is discouraged.) $)
  fvimacnvALT $p |- ( ( Fun F /\ A e. dom F ) ->
                    ( ( F ` A ) e. B <-> A e. ( `' F "" B ) ) ) $=
    ( wfun cdm wcel wa csn cima wss ccnv cfv wb snssi funimass3 sylan2 fvex wfn
    snss wceq eqid df-fn biimpri mpan2 fnsnfv sylan sseq1d syl5bb snssg 3bitr4d
    adantl ) CDZACEZFZGZCAHZIZBJZUPCKBIZJZACLZBFZAUSFZUNULUPUMJURUTMAUMNUPBCOPV
    BVAHZBJUOURVABACQSUOVDUQBULCUMRZUNVDUQTULUMUMTZVEUMUAVEULVFGCUMUBUCUDUMACUE
    UFUGUHUNVCUTMULAUSUMUIUKUJ $.

  $( Membership in the preimage of a set under a function.  (Contributed by
     Jeff Madsen, 2-Sep-2009.) $)
  elpreima $p |- ( F Fn A -> ( B e. ( `' F "" C )
                              <-> ( B e. A /\ ( F ` B ) e. C ) ) ) $=
    ( wfn ccnv cima wcel cfv wa cdm cnvimass sseli fndm eleq2d syl5ib fvimacnvi
    wfun fnfun sylan ex jcad wb fvimacnv funfni biimpd expimpd impbid ) DAEZBDF
    CGZHZBAHZBDICHZJUIUKULUMUKBDKZHUIULUJUNBDCLMUIUNABADNOPUIUKUMUIDRUKUMADSBCD
    QTUAUBUIULUMUKUIULJUMUKUMUKUCABDBCDUDUEUFUGUH $.

  ${
    $d x B $.  $d x C $.  $d x F $.  $d x V $.
    $( Membership in the preimage of a singleton, under a function.
       (Contributed by Mario Carneiro, 12-May-2014.)  (Proof shortened by Mario
       Carneiro, 28-Apr-2015.) $)
    fniniseg $p |- ( F Fn A -> ( C e. ( `' F "" { B } ) <->
                     ( C e. A /\ ( F ` C ) = B ) ) ) $=
      ( wfn ccnv csn cima wcel cfv wa wceq elpreima fvex elsnc anbi2i syl6bb )
      DAECDFBGZHICAIZCDJZRIZKSTBLZKACRDMUAUBSTBCDNOPQ $.
  $}

  ${
    $d x A $.  $d x F $.  $d x B $.
    $( Inverse images under functions expressed as abstractions.  (Contributed
       by Stefan O'Rear, 1-Feb-2015.) $)
    fncnvima2 $p |- ( F Fn A -> ( `' F "" B ) = { x e. A | ( F ` x ) e. B } ) $=
      ( wfn ccnv cima cv wcel cfv wa cab crab elpreima abbi2dv df-rab syl6eqr )
      DBEZDFCGZAHZBITDJCIZKZALUAABMRUBASBTCDNOUAABPQ $.

    $( Inverse point images under functions expressed as abstractions.
       (Contributed by Stefan O'Rear, 1-Feb-2015.) $)
    fniniseg2 $p |- ( F Fn A -> ( `' F "" { B } ) =
          { x e. A | ( F ` x ) = B } ) $=
      ( wfn ccnv csn cima cv cfv wcel crab wceq fncnvima2 wb fvex elsnc rabbiia
      a1i syl6eq ) DBEDFCGZHAIZDJZUAKZABLUCCMZABLABUADNUDUEABUDUEOUBBKUCCUBDPQS
      RT $.

    $( Support sets of functions expressed as abstractions.  (Contributed by
       Stefan O'Rear, 1-Feb-2015.)  Obsolete version of ~ suppvalfn as of
       22-Apr-2019.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    fnniniseg2OLD $p |- ( F Fn A -> ( `' F "" ( _V \ { B } ) ) =
          { x e. A | ( F ` x ) =/= B } ) $=
      ( wfn ccnv cvv csn cdif cima cv cfv wcel wne fncnvima2 wb eldifsn mpbiran
      crab fvex a1i rabbiia syl6eq ) DBEDFGCHIZJAKZDLZUDMZABSUFCNZABSABUDDOUGUH
      ABUGUHPUEBMUGUFGMUHUEDTUFGCQRUAUBUC $.
  $}

  ${
    $d F x $.  $d A x $.
    $( Existential quantification restricted to a support.  (Contributed by
       Stefan O'Rear, 23-Mar-2015.)  Obsolete version of ~ rexsupp as of
       27-May-2019.  ( (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    rexsuppOLD $p |- ( F Fn A -> ( E. x e. ( `' F "" ( _V \ { Z } ) ) ph <->
          E. x e. A ( ( F ` x ) =/= Z /\ ph ) ) ) $=
      ( wfn cv cfv wne ccnv cvv csn cdif cima wcel elpreima fvex eldifsn syl6bb
      wa mpbiran anbi2i anbi1d anass rexbidv2 ) DCFZABGZDHZEIZATZBDJKELMZNZCUFU
      GULOZATUGCOZUITZATUNUJTUFUMUOAUFUMUNUHUKOZTUOCUGUKDPUPUIUNUPUHKOUIUGDQUHK
      ERUAUBSUCUNUIAUDSUE $.
  $}

  ${
    $d x F $.  $d x A $.  $d x B $.
    $( Preimage of a union.  (Contributed by Jeff Madsen, 2-Sep-2009.) $)
    unpreima $p |- ( Fun F -> ( `' F "" ( A u. B ) )
                                  = ( ( `' F "" A ) u. ( `' F "" B ) ) ) $=
      ( vx wfun cdm wfn ccnv cun cima wceq funfn cv wcel wa elpreima wo orbi12d
      cfv elun syl5bb anbi2i andi bitri syl6rbbr bitrd eqrdv sylbi ) CECCFZGZCH
      ZABIZJZUKAJZUKBJZIZKCLUJDUMUPUJDMZUMNUQUINZUQCSZULNZOZUQUPNZUIUQULCPUJVBU
      RUSANZOZURUSBNZOZQZVAVBUQUNNZUQUONZQUJVGUQUNUOTUJVHVDVIVFUIUQACPUIUQBCPRU
      AVAURVCVEQZOVGUTVJURUSABTUBURVCVEUCUDUEUFUGUH $.

    $( Preimage of an intersection.  (Contributed by Jeff Madsen, 2-Sep-2009.)
       (Proof shortened by Mario Carneiro, 14-Jun-2016.) $)
    inpreima $p |- ( Fun F -> ( `' F "" ( A i^i B ) )
                                  = ( ( `' F "" A ) i^i ( `' F "" B ) ) ) $=
      ( wfun ccnv cin cima wceq funcnvcnv imain syl ) CDCEZEDLABFGLAGLBGFHCIABL
      JK $.

    $( Preimage of a difference.  (Contributed by Mario Carneiro,
       14-Jun-2016.) $)
    difpreima $p |- ( Fun F -> ( `' F "" ( A \ B ) )
                                  = ( ( `' F "" A ) \ ( `' F "" B ) ) ) $=
      ( wfun ccnv cdif cima wceq funcnvcnv imadif syl ) CDCEZEDLABFGLAGLBGFHCIA
      BLJK $.

    $( The preimage of a restricted function.  (Contributed by Jeff Madsen,
       2-Sep-2009.) $)
    respreima $p |- ( Fun F -> ( `' ( F |` B ) "" A )
                                    = ( ( `' F "" A ) i^i B ) ) $=
      ( vx wfun cres ccnv cima cin cdm wfn cv wcel wb cfv wa bitri syl elpreima
      elin funfn ancom anbi1i fvres eleq1d adantl pm5.32i a1i an32 syl6bb fnfun
      wceq funres dmres jctir df-fn sylibr anbi1d syl5bb 3bitr4d sylbi eqrdv )
      CEZDCBFZGAHZCGAHZBIZVCCCJZKZDLZVEMZVJVGMZNCUAVIVJBVHIZMZVJVDOZAMZPZVJVHMZ
      VJCOZAMZPZVJBMZPZVKVLVIVQVRWBPZVTPZWCVQWENVIVQWDVPPWEVNWDVPVNWBVRPWDVJBVH
      TWBVRUBQUCWDVPVTWBVPVTNVRWBVOVSAVJBCUDUEUFUGQUHVRWBVTUIUJVIVDVMKZVKVQNVIV
      DEZVDJVMULZPWFVIWGWHVIVCWGVHCUKBCUMRCBUNUOVDVMUPUQVMVJAVDSRVLVJVFMZWBPVIW
      CVJVFBTVIWIWAWBVHVJACSURUSUTVAVB $.
  $}

  ${
    $d A x y $.  $d B y $.  $d F x y $.
    $( Preimage of an intersection.  (Contributed by FL, 16-Apr-2012.) $)
    iinpreima $p |- ( ( Fun F /\ A =/= (/) )
        -> ( `' F "" |^|_ x e. A B ) = |^|_ x e. A ( `' F "" B ) ) $=
      ( vy ciin cima wcel wral simpll cnvimass sseli adantl cvv fvimacnvi eliin
      wa wb ax-mp wi wfun wne ccnv cdm cfv fvex adantlr biimpa sylancr fvimacnv
      c0 cv ralbidv syl21anc vex sylibr biimpd ralimdv sylc wrex r19.2zb biimpi
      ex rexlimivw syl6 syl5bi imp syl2anc mpbid impbida eqrdv ) DUAZBUKUBZQZED
      UCZABCFZGZABVOCGZFZVNEULZVQHZVTVSHZVNWAQZVTVRHZABIZWBWCVLVTDUDZHZVTDUEZCH
      ZABIZWEVLVMWAJWAWGVNVQWFVTDVPKLMWCWHNHZWHVPHZWJVTDUFZVLWAWLVMVTVPDOUGWKWL
      WJAWHBCNPZUHUIVLWGQZWJWEWOWIWDABVTCDUJUMUHUNVTNHZWBWEREUOZAVTBVRNPZSZUPVN
      WBQZWLWAWTWJWLWTVLWEWJVLVMWBJZWBWEVNWPWBWETWQWPWBWEWRUQSMVLWDWIABVLWDWIVT
      CDOVCURUSWKWLWJRWMWNSUPWTVLWGWLWARXAVNWBWGVMWBWGTVLWBWEVMWGWSVMWEWDABUTZW
      GVMWEXBTWDABVAVBWDWGABVRWFVTDCKLVDVEVFMVGVTVPDUJVHVIVJVK $.

    $( Preimage of an intersection.  (Contributed by FL, 28-Apr-2012.) $)
    intpreima $p |- ( ( Fun F /\ A =/= (/) )
        -> ( `' F "" |^| A ) = |^|_ x e. A ( `' F "" x ) ) $=
      ( wfun c0 wne wa ccnv cint cima cv ciin intiin imaeq2i iinpreima syl5eq )
      CDBEFGCHZBIZJQABAKZLZJABQSJLRTQABMNABSCOP $.
  $}

  $( The preimage of the codomain of a mapping is the mapping's domain.
     (Contributed by FL, 25-Jan-2007.) $)
  fimacnv $p |- ( F : A --> B -> ( `' F "" B ) = A ) $=
    ( wf ccnv cima crn imassrn cdm dfdm4 fdm ssid syl6eqss syl5eqssr syl5ss wss
    frn wfun wb ffun syl5sseqr funimass3 syl2anc mpbid eqssd ) ABCDZCEZBFZAUFUH
    UGGZAUGBHUFUICIZACJUFUJAAABCKZALZMNOUFCAFZBPZAUHPZUFUMCGBCAHABCQOUFCRAUJPUN
    UOSABCTUFAAUJULUKUAABCUBUCUDUE $.

  ${
    $d k F $.  $d k ph $.  $d k W $.  $d k Z $.
    suppssOLD.f $e |- ( ph -> F : A --> B ) $.
    suppssOLD.n $e |- ( ( ph /\ k e. ( A \ W ) ) -> ( F ` k ) = Z ) $.
    $( Show that the support of a function is contained in a set.  (Contributed
       by Mario Carneiro, 19-Dec-2014.)  Obsolete version of ~ suppss as of
       28-May-2019.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    suppssOLD $p |- ( ph -> ( `' F "" ( _V \ { Z } ) ) C_ W ) $=
      ( ccnv cvv csn cdif cima cv wcel cfv wa wf wfn ffn elpreima 3syl wne fvex
      wb eldifsn mpbiran wceq eldif sylan2br expr necon1ad syl5bi expimpd ssrdv
      wn sylbid ) ADEJKGLMZNZFADOZUTPZVABPZVAEQZUSPZRZVAFPZABCESEBTVBVFUFHBCEUA
      BVAUSEUBUCAVCVEVGVEVDGUDZAVCRZVGVEVDKPVHVAEUEVDKGUGUHVIVGVDGAVCVGUQZVDGUI
      ZVCVJRAVABFMPVKVABFUJIUKULUMUNUOURUP $.
  $}

  ${
    suppssrOLD.f $e |- ( ph -> F : A --> B ) $.
    suppssrOLD.n $e |- ( ph -> ( `' F "" ( _V \ { Z } ) ) C_ W ) $.
    $( A function is zero outside its support.  (Contributed by Mario Carneiro,
       19-Dec-2014.)  Obsolete version of ~ suppssr as of 28-May-2019.
       (New usage is discouraged.) $)
    suppssrOLD $p |- ( ( ph /\ X e. ( A \ W ) ) -> ( F ` X ) = Z ) $=
      ( cdif wcel wn wa cfv wceq eldif wne cvv csn fvex eldifsn mpbiran ccnv wf
      cima wfn wb ffn elpreima 3syl sseld sylbird expdimp syl5bir necon1bd impr
      sylan2b ) FBEJKAFBKZFEKZLZMFDNZGOZFBEPAURUTVBAURMZUSVAGVAGQZVARGSJZKZVCUS
      VFVARKVDFDTVARGUAUBAURVFUSAURVFMZFDUCVEUEZKZUSABCDUDDBUFVIVGUGHBCDUHBFVED
      UIUJAVHEFIUKULUMUNUOUPUQ $.
  $}

  ${
    $d D a p $.  $d D x y z $.  $d F p $.  $d F a w x y z $.
    $( If a class' function values for certain arguments is not the empty set,
       the arguments are contained in the domain of the class, and the class
       restricted to the arguments is a function, analogous to ~ fvfundmfvn0 .
       (Contributed by AV, 27-Jan-2020.) $)
    fvn0ssdmfun $p |- ( A. a e. D ( F ` a ) =/= (/)
                        -> ( D C_ dom F /\ Fun ( F |` D ) ) ) $=
      ( vx vz vy vw cv wral wcel cres wfun wa wceq wal wex sylibr albii exbii
      wi vp cfv c0 wne cdm csn wss fvfundmfvn0 ralimi r19.26 eleq1 rspccv ssrdv
      ciun wrel cop funrel reliun sneq reseq2d funeqd rspcva dffun5 vex elsnres
      imbi1i equcom opeq12 ex syl5bi adantr impcom opeq2 equcoms eleq1d biimpcd
      adantl jca spimev imim1d alimdv eximdv spimvw sylbi expcom ancomst impexp
      bitri 19.21v 19.37v 3bitri alrimiv resiun2 eqcomi eleq2i reseq2i sylanbrc
      syl iunid opelres funeqi anim12i ) CHZBUBUCUDZCAIXCBUEZJZBXCUFZKZLZMZCAIZ
      AXEUGZBAKZLZMZXDXJCAXCBUHUIXKXFCAIZXICAIZMXOXFXICAUJXPXLXQXNXPUAAXEXFUAHZ
      XEJCXRAXCXRXEUKULUMXQCAXHUNZLZXNXQXSUOZDHZEHZUPZXSJZYCFHNZTZEOZFPZDOZXTXQ
      XHUOZCAIYAXIYKCAXHUQUICAXHURQXQYDBJZYBAJZMZYFTZEOZFPZDOYJXQYQDXQYMYLYFTZE
      OZFPZTZYQYMXQYTYMXQMBYBUFZKZLZYTXIUUDCYBAXCYBNZXHUUCUUEXGUUBBXCYBUSUTVAVB
      UUDUUCUOZGHZYCUPZUUCJZYFTZEOZFPZGOZMYTGEFUUCVCUUMYTUUFUUMUUHYBXCUPZNZUUNB
      JZMZCPZYFTZEOZFPZGOYTUULUVAGUUKUUTFUUJUUSEUUIUURYFCUUHBYBDVDVEVFRSRUVAYTG
      DUUGYBNZUUTYSFUVBUUSYREUVBYLUURYFUVBYLUURUVBYLMZUUQCEXCYCNZUVCUUQUVDUVCMU
      UOUUPUVCUVDUUOUVBUVDUUOTYLUVDYCXCNZUVBUUOCEVGUVBUVEUUOUUGYCYBXCVHVIVJVKVL
      UVCUVDUUPYLUVDUUPTUVBUVDYLUUPUVDYDUUNBYDUUNNECYCXCYBVMVNVOVPVQVLVRVIVSVIV
      TWAWBWCWDVQWDWRWEYQYMYRTZEOZFPYMYSTZFPUUAYPUVGFYOUVFEYOYMYLMYFTUVFYLYMYFW
      FYMYLYFWGWHRSUVGUVHFYMYREWISYMYSFWJWKQWLYIYQDYHYPFYGYOEYEYNYFYEYDBCAXGUNZ
      KZJYDXMJYNXSUVJYDUVJXSCAXGBWMZWNWOUVJXMYDUVIABCAWSZWPWOYBYCBAEVDWTWKVFRSR
      QDEFXSVCWQXNUVJLXTXMUVJAUVIBUVIAUVLWNWPXAUVJXSUVKXAWHQXBWDWR $.
  $}

  $( Ordered pair with function value.  Part of Theorem 4.3(i) of [Monk1]
     p. 41.  (Contributed by NM, 30-Sep-2004.) $)
  fnopfv $p |- ( ( F Fn A /\ B e. A ) -> <. B , ( F ` B ) >. e. F ) $=
    ( cfv cop wcel funfvop funfni ) BBCDECFABCBCGH $.

  ${
    $d x y F $.  $d x A $.
    $( A function's value belongs to its range.  (Contributed by NM,
       14-Oct-1996.) $)
    fvelrn $p |- ( ( Fun F /\ A e. dom F ) -> ( F ` A ) e. ran F ) $=
      ( vx vy wfun cdm wcel cfv cv wa wi wceq eleq1 anbi2d fveq2 eleq1d imbi12d
      crn cop wex funfvop vex opeq1 spcev syl fvex elrn2 sylibr vtoclg anabsi7
      ) BEZABFZGZABHZBRZGZUKCIZULGZJZUQBHZUOGZKUKUMJZUPKCAULUQALZUSVBVAUPVCURUM
      UKUQAULMNVCUTUNUOUQABOPQUSDIZUTSZBGZDTZVAUSUQUTSZBGZVGUQBUAVFVIDUQCUBVDUQ
      LVEVHBVDUQUTUCPUDUEDUTBUQBUFUGUHUIUJ $.
  $}

  $( A function value cannot be any element not contained in the range of the
     function.  (Contributed by AV, 28-Jan-2020.) $)
  nelrnfvne $p |- ( ( Fun F /\ X e. dom F /\ Y e/ ran F )
                    -> ( F ` X ) =/= Y ) $=
    ( wfun cdm wcel cfv crn wnel wne fvelrn elnelne2 stoic3 ) ADBAEFBAGZAHZFCOI
    NCJBAKNCOLM $.

  ${
    $d A a b x $.  $d B a b x $.  $d D a x $.
    fveqdmss.1 $e |- D = dom B $.
    $( If the empty set is not contained in the range of a function, and the
       function values of another class (not necessarily a function) are equal
       to the function values of the function for all elements of the domain of
       the function, then the domain of the function is contained in the domain
       of the class.  (Contributed by AV, 28-Jan-2020.) $)
    fveqdmss $p |- ( ( Fun B /\ (/) e/ ran B
                       /\ A. x e. D ( A ` x ) = ( B ` x ) ) -> D C_ dom A ) $=
      ( va vb wfun c0 crn wnel cv cfv wceq w3a cdm wcel wi fveq2 com12 wral weq
      wa eqeq12d rspcva wne nelrnfvne wex n0 eleq2 eqcoms elfvdm syl6bi exlimiv
      wb sylbi syl 3exp eleq2s com24 adantr mpd ex com23 com14 3imp ssrdv ) CHZ
      ICJKZALZBMZVJCMZNZADUAZOFDBPZVHVIVNFLZDQZVPVOQZRVQVIVNVHVRVQVNVIVHVRRZVQV
      NVIVSRZVQVNUCVPBMZVPCMZNZVTVMWCAVPDAFUBVKWAVLWBVJVPBSVJVPCSUDUEVQWCVTRVNV
      QVHVIWCVRVHVIWCVRRZRZRVPCPZDVHVPWFQZWEVHWGVIWDVHWGVIOWBIUFZWDCVPIUGWHGLZW
      BQZGUHWDGWBUIWJWDGWCWJVRWCWJWIWAQZVRWJWKUOWBWAWBWAWIUJUKWIVPBULUMTUNUPUQU
      RTEUSUTVAVBVCVDVEVFVG $.

    $( If the empty set is not contained in the range of a function, and the
       function values of another class (not necessarily a function) are equal
       to the function values of the function for all elements of the domain of
       the function, then the class restricted to the domain of the function is
       the function itself.  (Contributed by AV, 28-Jan-2020.) $)
    fveqressseq $p |- ( ( Fun B /\ (/) e/ ran B
                    /\ A. x e. D ( A ` x ) = ( B ` x ) ) -> ( A |` D ) = B ) $=
      ( wfun c0 cfv wceq wral cdm cin biimpi syl5eq wa wcel adantl adantr simpr
      syl crn wnel cv w3a cres dmres fveqdmss incom dfss1 syl6eq fvres eqtrd ex
      wss ralimdva 3impia raleqdv mpbird wb wne simpll eleq2i nelrnfvne syl3anc
      neeq1 syl5ibrcom fvn0ssdmfun simprd simp1 eqfunfv syl2anc mpbir2and ) CFZ
      GCUAUBZAUCZBHZVOCHZIZADJZUDZBDUEZCIZWAKZCKZIZVOWAHZVQIZAWCJZVTWCDBKZLZWDB
      DUFZVTDWIUNZWJWDIABCDEUGZWLWJDWDWLWJWIDLZDDWIUHWLWNDIDWIUIMNZEUJTNVTWHWGA
      DJZVMVNVSWPVMVNOZVRWGADWQVODPZOZVRWGWSVROWFVPVQWSWFVPIZVRWRWTWQVODBUKQRWS
      VRSULUMUOUPVTWGAWCDVTWCWJDWKVTWLWJDIWMWOTNUQURVTWAFZVMWBWEWHOUSVTVPGUTZAD
      JZXAVMVNVSXCWQVRXBADWSXBVRVQGUTZWSVMVOWDPZVNXDVMVNWRVAWRXEWQWRXEDWDVOEVBM
      QWQVNWRVMVNSRCVOGVCVDVPVQGVEVFUOUPXCWLXADBAVGVHTVMVNVSVIAWACVJVKVL $.
  $}

  $( A function's value belongs to its range.  (Contributed by NM,
     15-Oct-1996.) $)
  fnfvelrn $p |- ( ( F Fn A /\ B e. A ) -> ( F ` B ) e. ran F ) $=
    ( cfv crn wcel fvelrn funfni ) BCDCEFABCBCGH $.

  $( A function's value belongs to its codomain.  (Contributed by NM,
     12-Aug-1999.) $)
  ffvelrn $p |- ( ( F : A --> B /\ C e. A ) -> ( F ` C ) e. B ) $=
    ( wf wcel wa cfv crn wfn ffn fnfvelrn sylan wi frn sseld adantr mpd ) ABDEZ
    CAFZGCDHZDIZFZUABFZSDAJTUCABDKACDLMSUCUDNTSUBBUAABDOPQR $.

  ${
    ffvrni.1 $e |- F : A --> B $.
    $( A function's value belongs to its codomain.  (Contributed by NM,
       6-Apr-2005.) $)
    ffvelrni $p |- ( C e. A -> ( F ` C ) e. B ) $=
      ( wf wcel cfv ffvelrn mpan ) ABDFCAGCDHBGEABCDIJ $.
  $}

  ${
    ffvelrnd.1 $e |- ( ph -> F : A --> B ) $.
    $( A function's value belongs to its codomain.  (Contributed by Mario
       Carneiro, 29-Dec-2016.) $)
    ffvelrnda $p |- ( ( ph /\ C e. A ) -> ( F ` C ) e. B ) $=
      ( wf wcel cfv ffvelrn sylan ) ABCEGDBHDEICHFBCDEJK $.

    ffvelrnd.2 $e |- ( ph -> C e. A ) $.
    $( A function's value belongs to its codomain.  (Contributed by Mario
       Carneiro, 29-Dec-2016.) $)
    ffvelrnd $p |- ( ph -> ( F ` C ) e. B ) $=
      ( wcel cfv ffvelrnda mpdan ) ADBHDEICHGABCDEFJK $.
  $}

  ${
    $d x y A $.  $d x y F $.  $d x ps $.  $d y ph $.
    rexrn.1 $e |- ( x = ( F ` y ) -> ( ph <-> ps ) ) $.
    $( Restricted existential quantification over the range of a function.
       (Contributed by Mario Carneiro, 24-Dec-2013.)  (Revised by Mario
       Carneiro, 20-Aug-2014.) $)
    rexrn $p |- ( F Fn A -> ( E. x e. ran F ph <-> E. y e. A ps ) ) $=
      ( wfn cv cfv crn cvv wcel wa fvex a1i wceq wrex fvelrnb eqcom wb rexxfr2d
      rexbii syl6bb adantl ) FEHZABCDDIZFJZFKZELUHLMUFUGEMNUGFOPUFCIZUIMUHUJQZD
      ERUJUHQZDERDEUJFSUKULDEUHUJTUCUDULABUAUFGUEUB $.

    $( Restricted universal quantification over the range of a function.
       (Contributed by Mario Carneiro, 24-Dec-2013.)  (Revised by Mario
       Carneiro, 20-Aug-2014.) $)
    ralrn $p |- ( F Fn A -> ( A. x e. ran F ph <-> A. y e. A ps ) ) $=
      ( wfn cv cfv crn cvv wcel wa fvex a1i wceq wrex fvelrnb eqcom wb ralxfr2d
      rexbii syl6bb adantl ) FEHZABCDDIZFJZFKZELUHLMUFUGEMNUGFOPUFCIZUIMUHUJQZD
      ERUJUHQZDERDEUJFSUKULDEUHUJTUCUDULABUAUFGUEUB $.
  $}

  ${
    $d F x y $.  $d Y x y $.
    $( For any element in the range of a function there is an element in the
       domain of the function for which the function value is the element of
       the range.  (Contributed by Alexander van der Vekens, 8-Dec-2017.) $)
    elrnrexdm $p |- ( Fun F -> ( Y e. ran F
                                 -> E. x e. dom F Y = ( F ` x ) ) ) $=
      ( vy wfun crn wcel cv wceq cfv cdm wa eqidd ancli adantl eqeq2 rspcev syl
      wrex ex wfn wb funfn rexrn sylbi sylibd ) BEZCBFZGZCDHZIZDUHSZCAHBJZIZABK
      ZSZUGUIULUGUILUICCIZLZULUIURUGUIUQUICMNOUKUQDCUHUJCCPQRTUGBUOUAULUPUBBUCU
      KUNDAUOBUJUMCPUDUEUF $.

    $( For any element in the range of a function there is an element in the
       domain of the function for which the function value is the element of
       the range.  (Contributed by Alexander van der Vekens, 17-Dec-2017.) $)
    elrnrexdmb $p |- ( Fun F -> ( Y e. ran F
                                 <-> E. x e. dom F Y = ( F ` x ) ) ) $=
      ( wfun crn wcel cv cfv wceq cdm wrex wfn funfn fvelrnb sylbi eqcom rexbii
      wb syl6bbr ) BDZCBEFZAGBHZCIZABJZKZCUBIZAUDKTBUDLUAUERBMAUDCBNOUFUCAUDCUB
      PQS $.

    $( For any element in the domain of a function there is an element in the
       range of the function which is the function value for the element of the
       domain.  (Contributed by Alexander van der Vekens, 8-Dec-2017.) $)
    eldmrexrn $p |- ( Fun F -> ( Y e. dom F
                                 -> E. x e. ran F x = ( F ` Y ) ) ) $=
      ( wfun cdm wcel cv cfv wceq crn wrex wa fvelrn eqid eqeq1 rspcev sylancl
      ex ) BDZCBEFZAGZCBHZIZABJZKZSTLUBUDFUBUBIZUECBMUBNUCUFAUBUDUAUBUBOPQR $.

    $( For any element in the domain of a function, there is an element in the
       range of the function which is the value of the function at that
       element.  Because of the definition ~ df-fv of the value of a function,
       the theorem is only valid in general if the empty set is not contained
       in the range of the function (the implication ""to the right"" is always
       valid).  Indeed, with the definition ~ df-fv of the value of a function,
       ` ( F `` Y ) = (/) ` may mean that the value of ` F ` at ` Y ` is the
       empty set or that ` F ` is not defined at ` Y ` .  (Contributed by
       Alexander van der Vekens, 17-Dec-2017.) $)
    eldmrexrnb $p |- ( ( Fun F /\ (/) e/ ran F )
                         -> ( Y e. dom F <-> E. x e. ran F x = ( F ` Y ) ) ) $=
      ( vy wfun c0 crn wnel wa cdm wcel cv cfv wceq wrex eldmrexrn adantr eleq1
      wi wne elnelne2 wex n0 elfvdm exlimiv sylbi syl expcom adantl com12 com13
      syl6bi rexlimdv impbid ) BEZFBGZHZIZCBJKZALZCBMZNZAUPOZUOUSVCSUQABCPQURVB
      USAUPVBUTUPKZURUSVBVDVAUPKZURUSSUTVAUPRURVEUSUQVEUSSUOVEUQUSVEUQIVAFTZUSV
      AFUPUAVFDLZVAKZDUBUSDVAUCVHUSDVGCBUDUEUFUGUHUIUJULUKUMUN $.
  $}

  ${
    $d x F $.  $d x G $.  $d x H $.  $d x K $.  $d x X $.
    $( The values of two function compositions are equal if the values of the
       composed functions are pairwise equal.  (Contributed by AV,
       26-Jan-2019.) $)
    fvcofneq $p |- ( ( G Fn A /\ K Fn B )
                  -> ( ( X e. ( A i^i B ) /\ ( G ` X ) = ( K ` X )
                         /\ A. x e. ( ran G i^i ran K ) ( F ` x ) = ( H ` x ) )
                       -> ( ( F o. G ) ` X ) = ( ( H o. K ) ` X ) ) ) $=
      ( wfn wa cin wcel cfv wceq crn ccom simpl elin fveq2 ex cv wral w3a sylbi
      3ad2ant1 fvco2 syl2an simpr eqcoms 3ad2ant2 adantl wi id fnfvelrn syl2anr
      anim12d wb eleq1 anbi2d biimpri syl6bi sylan9 eqeq12d rspcva eqcomd com23
      syl6 3impia impcom 3eqtrrd eqtrd ) EBIZGCIZJZHBCKLZHEMZHGMZNZAUAZDMZVSFMZ
      NZAEOZGOZKZUBZUCZHDEPMZHFGPMZNVNWGJZWHVPDMZWIVNVLHBLZWHWKNWGVLVMQVOVRWLWF
      VOWLHCLZJZWLHBCRZWLWMQUDZUEBDEHUFUGWJWIVQFMZVPFMZWKVNVMWMWIWQNWGVLVMUHVOV
      RWMWFVOWNWMWOWLWMUHUDZUECFGHUFUGWGWQWRNZVNVRVOWTWFWTVQVPVQVPFSUIUJUKWGVNW
      RWKNZVOVRWFVNXAULVOVRJZVNWFXAXBVNVPWELZWFXAULVOVNVPWCLZVQWDLZJZVRXCVOVLXD
      VMXEVOVLXDVLVLWLXDVOVLUMWPBHEUNUOTVOVMXEVMVMWMXEVOVMUMWSCHGUNUOTUPVRXFXDV
      PWDLZJZXCVRXEXGXDXEXGUQVQVPVQVPWDURUIUSXCXHVPWCWDRUTVAVBXCWFXAXCWFJWKWRWB
      WKWRNAVPWEVSVPNVTWKWAWRVSVPDSVSVPFSVCVDVETVGVFVHVIVJVKT $.
  $}

  ${
    $d w x z A $.  $d y B $.  $d y ch $.  $d w y z F $.  $d w x z ps $.
    ralrnmpt.1 $e |- F = ( x e. A |-> B ) $.
    ralrnmpt.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    $( A restricted quantifier over an image set.  (Contributed by Mario
       Carneiro, 20-Aug-2015.) $)
    ralrnmpt $p |- ( A. x e. A B e. V ->
      ( A. y e. ran F ps <-> A. x e. A ch ) ) $=
      ( vw vz wcel wral cv cfv wsbc wb syl nfv crn fnmpt dfsbcq nfsbc1v sbceq1a
      wfn ralrn cbvral bicomi cmpt nfmpt1 nfcxfr nfcv nfsbc weq sbceq1d 3bitr3g
      nffv fveq2 wa fvmpt2 sbcieg adantl bitrd ralimiaa ralbi ) FHMZCENZADGUAZN
      ZADCOZGPZQZCENZBCENZVHADKOZQZKVINZADLOZGPZQZLENZVJVNVHGEUFVRWBRCEFGHIUBVQ
      WAKLEGADVPVTUCUGSVJVRAVQDKVIAKTADVPUDADVPUEUHUIWAVMLCEACDVTCVSGCGCEFUJICE
      FUKULCVSUMURACTUNVMLTLCUOADVTVLVSVKGUSUPUHUQVHVMBRZCENVNVORVGWCCEVKEMZVGU
      TZVMADFQZBWEADVLFCEFHGIVAUPVGWFBRWDABDFHJVBVCVDVEVMBCEVFSVD $.

    $( A restricted quantifier over an image set.  (Contributed by Mario
       Carneiro, 20-Aug-2015.) $)
    rexrnmpt $p |- ( A. x e. A B e. V ->
      ( E. y e. ran F ps <-> E. x e. A ch ) ) $=
      ( wcel wral wn crn wrex cv wceq notbid ralrnmpt dfrex2 3bitr4g ) FHKCELZA
      MZDGNZLZMBMZCELZMADUDOBCEOUBUEUGUCUFCDEFGHIDPFQABJRSRADUDTBCETUA $.
  $}

  ${
    $d x y A $.  $d x y C $.  $d x y D $.  $d y B $.
    f0cl.1 $e |- F : A --> B $.
    f0cl.2 $e |- (/) e. B $.
    $( Unconditional closure of a function when the range includes the empty
       set.  (Contributed by Mario Carneiro, 12-Sep-2013.) $)
    f0cli $p |- ( F ` C ) e. B $=
      ( wcel cfv ffvelrni cdm fdmi eleq2i wn c0 ndmfv syl6eqel sylnbir pm2.61i
      ) CAGZCDHZBGZABCDEISCDJZGZUAUBACABDEKLUCMTNBCDOFPQR $.
  $}

  $( Alternate definition of a mapping.  (Contributed by NM, 14-Nov-2007.) $)
  dff2 $p |- ( F : A --> B <-> ( F Fn A /\ F C_ ( A X. B ) ) ) $=
    ( wf wfn cxp wss wa ffn fssxp jca crn rnss rnxpss syl6ss anim2i df-f sylibr
    impbii ) ABCDZCAEZCABFZGZHZTUAUCABCIABCJKUDUACLZBGZHTUCUFUAUCUEUBLBCUBMABNO
    PABCQRS $.

  ${
    $d f g x y z A $.  $d f g x y z B $.  $d x y z F $.
    $( Alternate definition of a mapping.  (Contributed by NM, 20-Mar-2007.) $)
    dff3 $p |- ( F : A --> B <->
              ( F C_ ( A X. B ) /\ A. x e. A E! y x F y ) ) $=
      ( vz cxp wss cv wbr weu wa wcel wex cop adantr sylibr sylanbrc wi syl6 wf
      wral fssxp wmo cfv wfun cdm ffun fdm eleq2d biimpar funfvop syl2anc df-br
      fvex breq2 spcev syl funmo eu5 ralrimiva jca wfn crn wceq wrel xpss mpan2
      wal cvv sstr df-rel df-ral eumo imim2i adantl ssel syl5bi opelxp1 exlimdv
      wn con3d exmo ori pm2.61d ex alimdv imp dffun6 dmxpss syl6ss breq1 eubidv
      dmss rspccv euex eldm ssrdv anim12i eqss df-fn rnss rnxpss df-f impbii
      vex ) CDEUAZECDGZHZAIZBIZEJZBKZACUBZLZXGXIXNCDEUCXGXMACXGXJCMZLZXLBNZXLBU
      DZXMXQXJXJEUEZEJZXRXQXJXTOEMZYAXQEUFZXJEUGZMZYBXGYCXPCDEUHZPXGYEXPXGYDCXJ
      CDEUIUJUKXJEULUMXJXTEUNQXLYABXTXJEUOXKXTXJEUPUQURXGXSXPXGYCXSYFBXJEUSURPX
      LBUTRVAVBXOECVCZEVDZDHZXGXOYCYDCVEZYGXOEVFZXSAVIZYCXIYKXNXIEVJVJGZHZYKXIX
      HYMHYNCDVGEXHYMVKVHEVLQPXIXNYLXNXPXMSZAVIXIYLXMACVMXIYOXSAXIYOXSXIYOLXPXS
      YOXPXSSXIXMXSXPXLBVNVOVPXIXPWAZXSSYOXIYPXRWAXSXIXRXPXIXLXPBXIXLXJXKOZXHMZ
      XPXLYQEMXIYRXJXKEUNEXHYQVQVRXJXKCDVSTVTWBXRXSXLBWCWDTPWEWFWGVRWHABEWIRXOY
      DCHZCYDHZLYJXIYSXNYTXIYDXHUGCEXHWNCDWJWKXNFCYDXNFIZCMUUAXKEJZBKZUUAYDMZXM
      UUCAUUACXJUUAVEXLUUBBXJUUAXKEWLWMWOUUCUUBBNUUDUUBBWPBUUAEFXFWQQTWRWSYDCWT
      QECXARXIYIXNXIYHXHVDDEXHXBCDXCWKPCDEXDRXE $.

    $( Alternate definition of a mapping.  (Contributed by NM, 20-Mar-2007.) $)
    dff4 $p |- ( F : A --> B <->
              ( F C_ ( A X. B ) /\ A. x e. A E! y e. B x F y ) ) $=
      ( wf cxp wss cv wbr weu wral wa wreu dff3 wcel cop df-br ssel opelxp2
      syl6 syl5bi pm4.71rd eubidv df-reu syl6bbr ralbidv pm5.32i bitri ) CDEFEC
      DGZHZAIZBIZEJZBKZACLZMUKUNBDNZACLZMABCDEOUKUPURUKUOUQACUKUOUMDPZUNMZBKUQU
      KUNUTBUKUNUSUNULUMQZEPZUKUSULUMERUKVBVAUJPUSEUJVASULUMCDTUAUBUCUDUNBDUEUF
      UGUHUI $.

    $( An onto mapping expressed in terms of function values.  (Contributed by
       NM, 29-Oct-2006.) $)
    dffo3 $p |- ( F : A -onto-> B <-> ( F : A --> B /\
                  A. y e. B E. x e. A y = ( F ` x ) ) ) $=
      ( wfo wf crn wceq wa cv cfv wrex wral dffo2 cab wb wcel wal wi wfn fnrnfv
      ffn eqeq1d simpr ffvelrn adantr eqeltrd exp31 rexlimdv biantrurd syl6rbbr
      syl dfbi2 albidv abeq1 df-ral 3bitr4g bitrd pm5.32i bitri ) CDEFCDEGZEHZD
      IZJVBBKZAKZELZIZACMZBDNZJCDEOVBVDVJVBVDVIBPZDIZVJVBECUAZVDVLQCDEUCVMVCVKD
      ABCEUBUDUMVBVIVEDRZQZBSVNVITZBSVLVJVBVOVPBVBVPVIVNTZVPJVOVBVQVPVBVHVNACVB
      VFCRZVHVNVBVRJZVHJVEVGDVSVHUEVSVGDRVHCDVFEUFUGUHUIUJUKVIVNUNULUOVIBDUPVIB
      DUQURUSUTVA $.

    $( Alternate definition of an onto mapping.  (Contributed by NM,
       20-Mar-2007.) $)
    dffo4 $p |- ( F : A -onto-> B <->
                ( F : A --> B /\ A. y e. B E. x e. A x F y ) ) $=
      ( wfo wf cv wbr wrex wral wa crn wceq dffo2 simpl wcel wex vex wi syl5bbr
      elrn eleq2 biimpar adantll wfn ffn fnbr syl ancrd eximdv syl6ibr ad2antrr
      ex df-rex mpd ralrimiva jca sylbi cfv fnbrfvb eqcom syl6ib sylan reximdva
      biimprd ralimdv imdistani dffo3 sylibr impbii ) CDEFZCDEGZAHZBHZEIZACJZBD
      KZLZVLVMEMZDNZLZVSCDEOWBVMVRVMWAPWBVQBDWBVODQZLVPARZVQWAWCWDVMWAWDWCWDVOV
      TQWAWCAVOEBSUBVTDVOUCUAUDUEVMWDVQTWAWCVMWDVNCQZVPLZARVQVMVPWFAVMVPWEVMECU
      FZVPWETCDEUGZWGVPWECVNVOEUHUNUIUJUKVPACUOULUMUPUQURUSVSVMVOVNEUTZNZACJZBD
      KZLVLVMVRWLVMVQWKBDVMVPWJACVMWGWEVPWJTWHWGWELZVPWIVONZWJWMWNVPCVNVOEVAVFW
      IVOVBVCVDVEVGVHABCDEVIVJVK $.

    $( Alternate definition of an onto mapping.  (Contributed by NM,
       20-Mar-2007.) $)
    dffo5 $p |- ( F : A -onto-> B <->
                ( F : A --> B /\ A. y e. B E. x x F y ) ) $=
      ( wfo wf cv wbr wrex wral wa wex dffo4 rexex ralimi anim2i wcel wfn wi ex
      ffn fnbr syl ancrd eximdv df-rex syl6ibr ralimdv imdistani impbii bitri )
      CDEFCDEGZAHZBHZEIZACJZBDKZLZUMUPAMZBDKZLZABCDENUSVBURVAUMUQUTBDUPACOPQUMV
      AURUMUTUQBDUMUTUNCRZUPLZAMUQUMUPVDAUMUPVCUMECSZUPVCTCDEUBVEUPVCCUNUOEUCUA
      UDUEUFUPACUGUHUIUJUKUL $.

    $( A relation equivalent to the existence of an onto mapping.  The
       right-hand ` f ` is not necessarily a function.  (Contributed by NM,
       20-Mar-2007.) $)
    exfo $p |- ( E. f f : A -onto-> B <->
           E. f ( A. x e. A E! y e. B x f y /\ A. x e. B E. y e. A y f x ) ) $=
      ( vg cv wfo wex wbr wreu wral wrex wa wf dffo4 wss dff4 sylibr foeq1 wceq
      cxp simprbi anim1i sylbi eximi cin crn wcel brinxp reubidva ralimia inss2
      biimpd jctil rninxp biimpri anim12i dffo2 vex inex1 exlimiv cbvexv impbii
      spcev syl sylib ) CDEGZHZEIZAGZBGZVHJZBDKZACLZVLVKVHJBCMADLZNZEIZVIVQEVIC
      DVHOZVPNVQBACDVHPVSVOVPVSVHCDUBZQVOABCDVHRUCUDUEUFVRCDFGZHZFIZVJVQWCEVQCD
      VHVTUGZHZWCVQCDWDOZWDUHDUAZNWEVOWFVPWGVOWDVTQZVKVLWDJZBDKZACLZNWFVOWKWHVN
      WJACVKCUIZVNWJWLVMWIBDVKVLCDVHUJUKUNULVHVTUMUOABCDWDRSWGVPBACDVHUPUQURCDW
      DUSSWBWEFWDVHVTEUTVACDWAWDTVEVFVBWBVIFECDWAVHTVCVGVD $.
  $}

  ${
    $d F x y $.  $d A x y $.  $d B x y $.  $d C x y $.
    $( Property of a surjective function.  (Contributed by Jeff Madsen,
       4-Jan-2011.) $)
    foelrn $p |- ( ( F : A -onto-> B /\ C e. B )
                                  -> E. x e. A C = ( F ` x ) ) $=
      ( vy wfo cv wceq wrex wral wcel dffo3 simprbi eqeq1 rexbidv rspccva sylan
      cfv wf ) BCEGZFHZAHESZIZABJZFCKZDCLDUCIZABJZUABCETUFAFBCEMNUEUHFDCUBDIUDU
      GABUBDUCOPQR $.
  $}

  ${
    $d F x y z $.  $d G x y z $.  $d A y z $.  $d B x y z $.  $d C x y z $.
    $( If a composition of two functions is surjective, then the function on
       the left is surjective.  (Contributed by Jeff Madsen, 16-Jun-2011.) $)
    foco2 $p |- ( ( F : B --> C /\ G : A --> B /\
                        ( F o. G ) : A -onto-> C ) -> F : B -onto-> C ) $=
      ( vy vx vz wf ccom wfo w3a cv cfv wceq wrex wral wa wcel adantll sylanbrc
      simp1 foelrn ffvelrn fvco3 fveq2 eqeq2d rspcev syl2anc rexbidv syl5ibrcom
      eqeq1 rexlimdva syl5 impl ralrimiva 3impa dffo3 ) BCDIZABEIZACDEJZKZLUSFM
      ZGMZDNZOZGBPZFCQZBCDKUSUTVBUBUSUTVBVHUSUTRZVBRVGFCVIVBVCCSZVGVBVJRVCHMZVA
      NZOZHAPVIVGHACVCVAUCVIVMVGHAVIVKASZRZVGVMVLVEOZGBPZVOVKENZBSZVLVRDNZOZVQU
      TVNVSUSABVKEUDTUTVNWAUSABVKDEUETVPWAGVRBVDVROVEVTVLVDVRDUFUGUHUIVMVFVPGBV
      CVLVEULUJUKUMUNUOUPUQGFBCDURUA $.
  $}

  ${
    $d w x y z A $.  $d x y z B $.  $d y z C $.  $d w y z F $.
    fmpt.1 $e |- F = ( x e. A |-> C ) $.
    $( Functionality of the mapping operation.  (Contributed by Mario Carneiro,
       26-Jul-2013.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    fmpt $p |- ( A. x e. A C e. B <-> F : A --> B ) $=
      ( vy wcel wral wf wfn crn wss fnmpt cv wceq wrex cab rnmpt wa biimparc ex
      r19.29 rexlimivw syl abssdv syl5eqss df-f sylanbrc crab ccnv cima fimacnv
      eleq1 mptpreima syl5reqr rabid2 sylib impbii ) DCHZABIZBCEJZVAEBKELZCMVBA
      BDECFNVAVCGOZDPZABQZGRCAGBDEFSVAVFGCVAVFVDCHZVAVFTUTVETZABQVGUTVEABUCVHVG
      ABVEVGUTVDDCUNUAUDUEUBUFUGBCEUHUIVBBUTABUJZPVAVBVIEUKCULBABDCEFUOBCEUMUPU
      TABUQURUS $.

    $( Express bijection for a mapping operation.  (Contributed by Mario
       Carneiro, 30-May-2015.)  (Revised by Mario Carneiro, 4-Dec-2016.) $)
    f1ompt $p |- ( F : A -1-1-onto-> B <->
        ( A. x e. A C e. B /\ A. y e. B E! x e. A y = C ) ) $=
      ( vz wa cv wceq wral wcel wfn wbr weu nfcv bitri vex 3bitr4i wf wf1o wreu
      ccnv wb ffn dff1o4 baib syl cres fnres cmpt nfmpt1 nfcxfr nfv breq1 copab
      nfbr df-mpt eqtri breqi cop df-br opabid syl6bb cbveu brcnv df-reu ralbii
      eubii wrel cdm wss relcnv crn df-rn frn syl5eqssr relssres sylancr fneq1d
      syl5bbr bitr4d pm5.32i f1of pm4.71ri fmpt anbi1i ) CDFUAZCDFUBZIWIBJZEKZA
      CUCZBDLZIWJEDMACLZWNIWIWJWNWIWJFUDZDNZWNWIFCNZWJWQUECDFUFWJWRWQCDFUGUHUIW
      NWPDUJZDNZWIWQWTWKHJZWPOZHPZBDLWNBHDWPUKXCWMBDXAWKFOZHPAJZCMWLIZAPXCWMXDX
      FHAAXAWKFAXAQAFACEULZGACEUMUNAWKQURXFHUOXAXEKXDXEWKFOZXFXAXEWKFUPXHXEWKXF
      ABUQZOZXFXEWKFXIFXGXIGABCEUSUTVAXJXEWKVBXIMXFXEWKXIVCXFABVDRRVEVFXBXDHWKX
      AFBSHSVGVJWLACVHTVIRWIDWSWPWIWPVKWPVLZDVMWSWPKFVNWIXKFVODFVPCDFVQVRWPDVSV
      TWAWBWCWDWJWICDFWEWFWOWIWNACDEFGWGWHT $.

    fmpti.2 $e |- ( x e. A -> C e. B ) $.
    $( Functionality of the mapping operation.  (Contributed by NM,
       19-Mar-2005.)  (Revised by Mario Carneiro, 1-Sep-2015.) $)
    fmpti $p |- F : A --> B $=
      ( wcel wral wf rgen fmpt mpbi ) DCHZABIBCEJNABGKABCDEFLM $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x ph $.
    fmptd.1 $e |- ( ( ph /\ x e. A ) -> B e. C ) $.
    fmptd.2 $e |- F = ( x e. A |-> B ) $.
    $( Domain and codomain of the mapping operation; deduction form.
       (Contributed by Mario Carneiro, 13-Jan-2013.) $)
    fmptd $p |- ( ph -> F : A --> C ) $=
      ( wcel wral wf ralrimiva fmpt sylib ) ADEIZBCJCEFKAOBCGLBCEDFHMN $.
  $}

  ${
    $d A x $.  $d C x $.
    fmptdf.1 $e |- F/ x ph $.
    fmptdf.2 $e |- ( ( ph /\ x e. A ) -> B e. C ) $.
    fmptdf.3 $e |- F = ( x e. A |-> B ) $.
    $( A version of ~ fmptd using bound-variable hypothesis instead of a
       distinct variable condition for ` ph ` .  (Contributed by Glauco
       Siliprandi, 29-Jun-2017.) $)
    fmptdf $p |- ( ph -> F : A --> C ) $=
      ( wcel wral wf cv ex ralrimi fmpt sylib ) ADEJZBCKCEFLARBCGABMCJRHNOBCEDF
      IPQ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y F $.
    $( A function maps to a class to which all values belong.  (Contributed by
       NM, 3-Dec-2003.) $)
    ffnfv $p |- ( F : A --> B <-> ( F Fn A /\ A. x e. A ( F ` x ) e. B ) ) $=
      ( vy wf wfn cv cfv wcel wral ffn ffvelrn ralrimiva jca crn wss simpl wceq
      wa wrex fvelrnb biimpd nfra1 nfv wi rsp eleq1 biimpcd syl6 rexlimd sylan9
      ssrdv df-f sylanbrc impbii ) BCDFZDBGZAHZDIZCJZABKZTZUQURVBBCDLUQVAABBCUS
      DMNOVCURDPZCQUQURVBRVCEVDCUREHZVDJZUTVESZABUAZVBVECJZURVFVHABVEDUBUCVBVGV
      IABVAABUDVIAUEVBUSBJVAVGVIUFVAABUGVGVAVIUTVECUHUIUJUKULUMBCDUNUOUP $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d y z F $.  $d x y z $.
    ffnfvf.1 $e |- F/_ x A $.
    ffnfvf.2 $e |- F/_ x B $.
    ffnfvf.3 $e |- F/_ x F $.
    $( A function maps to a class to which all values belong.  This version of
       ~ ffnfv uses bound-variable hypotheses instead of distinct variable
       conditions.  (Contributed by NM, 28-Sep-2006.) $)
    ffnfvf $p |- ( F : A --> B <-> ( F Fn A /\ A. x e. A ( F ` x ) e. B ) ) $=
      ( vz wf wfn cv cfv wcel wral wa ffnfv nfcv nffv nfel nfv weq fveq2 eleq1d
      cbvralf anbi2i bitri ) BCDIDBJZHKZDLZCMZHBNZOUGAKZDLZCMZABNZOHBCDPUKUOUGU
      JUNHABHBQEAUICAUHDGAUHQRFSUNHTHAUAUIUMCUHULDUBUCUDUEUF $.
  $}

  ${
    $d x y A $.  $d x B $.  $d x y F $.
    $( An upper bound for range determined by function values.  (Contributed by
       NM, 8-Oct-2004.) $)
    fnfvrnss $p |- ( ( F Fn A /\ A. x e. A ( F ` x ) e. B ) -> ran F C_ B ) $=
      ( wfn cv cfv wcel wral wa wf crn wss ffnfv frn sylbir ) DBEAFDGCHABIJBCDK
      DLCMABCDNBCDOP $.
  $}

  ${
    $d x A $.  $d x C $.
    rnmptss.1 $e |- F = ( x e. A |-> B ) $.
    $( The range of an operation given by the ""maps to"" notation as a subset.
       (Contributed by Thierry Arnoux, 24-Sep-2017.) $)
    rnmptss $p |- ( A. x e. A B e. C -> ran F C_ C ) $=
      ( wcel wral wf crn wss fmpt frn sylbi ) CDGABHBDEIEJDKABDCEFLBDEMN $.
  $}

  ${
    $d x A $.  $d y A $.  $d y C $.  $d y F $.  $d x ph $.  $d y ph $.
    fmpt2d.2 $e |- ( ( ph /\ x e. A ) -> B e. V ) $.
    fmpt2d.1 $e |- ( ph -> F = ( x e. A |-> B ) ) $.
    fmpt2d.3 $e |- ( ( ph /\ y e. A ) -> ( F ` y ) e. C ) $.
    $( Domain and codomain of the mapping operation; deduction form.
       (Contributed by NM, 27-Dec-2014.) $)
    fmpt2d $p |- ( ph -> F : A --> C ) $=
      ( wfn cv cfv wcel wral wf cmpt ralrimiva eqid fnmpt fneq1d ffnfv sylanbrc
      syl mpbird ) AGDLZCMGNFOZCDPDFGQAUGBDERZDLZAEHOZBDPUJAUKBDISBDEUIHUITUAUE
      ADGUIJUBUFAUHCDKSCDFGUCUD $.
  $}

  ${
    $d x A $.  $d x B $.  $d x F $.
    $( A necessary and sufficient condition for a restricted function.
       (Contributed by Mario Carneiro, 14-Nov-2013.) $)
    ffvresb $p |- ( Fun F -> ( ( F |` A ) : A --> B <->
        A. x e. A ( x e. dom F /\ ( F ` x ) e. B ) ) ) $=
      ( wfun cres wf cv cdm wcel cfv wa wral fdm cin dmres inss2 adantl wfn wss
      eqsstri syl6eqssr sselda wceq fvres ffvelrn eqeltrrd jca ralrimiva ralimi
      crn simpl dfss3 sylibr funfn fnssres sylanb sylan2 eleq1d syl5ibr ralimia
      simpr fnfvrnss syl2anc df-f sylanbrc ex impbid2 ) DEZBCDBFZGZAHZDIZJZVLDK
      ZCJZLZABMZVKVQABVKVLBJZLZVNVPVKBVMVLVKBVJIZVMBCVJNWABVMOVMDBPBVMQUAUBUCVT
      VLVJKZVOCVSWBVOUDVKVLBDUEZRBCVLVJUFUGUHUIVIVRVKVIVRLZVJBSZVJUKCTZVKVRVIBV
      MTZWEVRVNABMWGVQVNABVNVPULUJABVMUMUNVIDVMSWGWEDUOVMBDUPUQURZWDWEWBCJZABMZ
      WFWHVRWJVIVQWIABVQWIVSVPVNVPVBVSWBVOCWCUSUTVARABCVJVCVDBCVJVEVFVGVH $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.  $d x y ph $.  $d y ps $.  $d x ch $.
    f1oresrab.1 $e |- F = ( x e. A |-> C ) $.
    f1oresrab.2 $e |- ( ph -> F : A -1-1-onto-> B ) $.
    f1oresrab.3 $e |- ( ( ph /\ x e. A /\ y = C ) -> ( ch <-> ps ) ) $.
    $( Build a bijection between restricted abstract builders, given a
       bijection between the base classes, deduction version.  (Contributed by
       Thierry Arnoux, 17-Aug-2018.) $)
    f1oresrab $p |- ( ph -> ( F |` { x e. A | ps } ) :
                               { x e. A | ps } -1-1-onto-> { y e. B | ch } ) $=
      ( crab ccnv cres wf1o wfun wceq wb wcel f1ofun funcnvcnv 3syl cima f1ocnv
      wf1 wss f1of1 ssrab2 f1ores sylancl mptpreima cv wa wi wal 3expia alrimiv
      wral f1of syl fmpt sylibr r19.21bi elrab3t syl2anc rabbidva syl5eq f1oeq3
      wf mpbid f1orescnv rescnvcnv f1oeq1 ax-mp sylib ) ABDFMZCEGMZINZNZVQOZPZV
      QVRIVQOZPZAVTQZVRVQVSVROZPZWBAFGIPZIQWEKFGIUAIUBUCAVRVSVRUDZWFPZWGAGFVSUF
      ZVRGUGWJAWHGFVSPWKKFGIUEGFVSUHUCCEGUIGFVRVSUJUKAWIVQRWJWGSAWIHVRTZDFMVQDF
      HVRIJULAWLBDFADUMFTZUNZEUMHRZCBSZUOZEUPHGTZWLBSWNWQEAWMWOWPLUQURAWRDFAFGI
      VJZWRDFUSAWHWSKFGIUTVADFGHIJVBVCVDCBEHGVEVFVGVHWIVQVRWFVIVAVKVQVRVSVLVFWA
      WCRWBWDSIVQVMVQVRWAWCVNVOVP $.
  $}

  ${
    $d u v w x z A $.  $d u x y B $.  $d u w z F $.  $d u w z G $.  $d u y R $.
    $d u w x z ph $.  $d u x S $.  $d u v w y z T $.
    fmptco.1 $e |- ( ( ph /\ x e. A ) -> R e. B ) $.
    fmptco.2 $e |- ( ph -> F = ( x e. A |-> R ) ) $.
    fmptco.3 $e |- ( ph -> G = ( y e. B |-> S ) ) $.
    fmptco.4 $e |- ( y = R -> S = T ) $.
    $( Composition of two functions expressed as ordered-pair class
       abstractions.  If ` F ` has the equation ` ( x + 2 ) ` and ` G ` the
       equation ` ( 3 * z ) ` then ` ( G o. F ) ` has the equation
       ` ( 3 * ( x + 2 ) ) ` .  (Contributed by FL, 21-Jun-2012.)  (Revised by
       Mario Carneiro, 24-Jul-2014.) $)
    fmptco $p |- ( ph -> ( G o. F ) = ( x e. A |-> T ) ) $=
      ( vu cv wbr wa wcel wceq vz vw vv ccom cmpt relco wfun wrel funmpt funrel
      ax-mp wex csb cop cfv eqid fmptd feq1d mpbird ffun syl funbrfv imp eqcomd
      wf sylan a1d expimpd pm4.71rd exbidv fvex breq2 breq1 anbi12d ceqsexv cdm
      wb funfvbrb fdm eleq2d bitr3d fveq1d eqidd breq123d wi nfcv nffvmpt1 nfbr
      nfv nfcsb1v nfeq2 nfbi fveq2 breq1d csbeq1a eqeq2d bibi12d imbi2d cvv vex
      simpl eleq1d simpr adantr eqeq12d df-mpt brabga sylancl syl2anc biantrurd
      fvmpt2 3bitr4d expcom vtoclgaf impcom pm5.32da bitrd syl5bb opelco eleq2i
      nfim copab nfan eleq1 eqeq1 anbi2d opelopabf bitri 3bitr4g eqrelrdv ) AUA
      UBJIUDZBDHUEZJIUFYLUGYLUHBDHUIYLUJUKAUAPZOPZIQZYNUBPZJQZRZOULZYMDSZYPBYMH
      UMZTZRZYMYPUNZYKSUUDYLSZAYSYNYMIUOZTZYRRZOULZUUCAYRUUHOAYRUUGAYOYQUUGAYOR
      ZUUGYQUUJUUFYNAIUGZYOUUFYNTZADEIVEZUUKAUUMDEBDFUEZVEABDFEUUNKUUNUPZUQADEI
      UUNLURUSZDEIUTVAZUUKYOUULYMYNIVBVCVFVDVGVHVIVJUUIYMUUFIQZUUFYPJQZRZAUUCYR
      UUTOUUFYMIVKUUGYOUURYQUUSYNUUFYMIVLYNUUFYPJVMVNVOAUUTYTYMUUNUOZYPCEGUEZQZ
      RUUCAUURYTUUSUVCAYMIVPZSZUURYTAUUKUVEUURVQUUQYMIVRVAAUVDDYMAUUMUVDDTUUPDE
      IVSVAVTWAAUUFUVAYPYPJUVBAYMIUUNLWBMAYPWCWDVNAYTUVCUUBYTAUVCUUBVQZABPZUUNU
      OZYPUVBQZYPHTZVQZWEAUVFWEBYMDBYMWFAUVFBABWIUVCUUBBBUVAYPUVBBDFYMWGBUVBWFB
      YPWFWHBYPUUABYMHWJZWKWLYAUVGYMTZUVKUVFAUVMUVIUVCUVJUUBUVMUVHUVAYPUVBUVGYM
      UUNWMWNUVMHUUAYPBYMHWOZWPWQWRAUVGDSZUVKAUVORZFYPUVBQZFESZUVJRZUVIUVJUVPUV
      RYPWSSUVQUVSVQKUBWTZCPZESZYNGTZRUVSCOFYPUVBEWSUWAFTZYNYPTZRZUWBUVRUWCUVJU
      WFUWAFEUWDUWEXAXBUWFYNYPGHUWDUWEXCUWDGHTUWENXDXEVNCOEGXFXGXHUVPUVHFYPUVBU
      VPUVOUVRUVHFTAUVOXCKBDFEUUNUUOXKXIWNUVPUVRUVJKXJXLXMXNXOXPXQXRXQOYMYPJIUA
      WTZUVTXSUUEUUDUVOUCPZHTZRZBUCYBZSUUCYLUWKUUDBUCDHXFXTUWJYTUWHUUATZRUUCBUC
      YMYPYTUWLBYTBWIBUWHUUAUVLWKYCUUCUCWIUWGUVTUVMUVOYTUWIUWLUVGYMDYDUVMHUUAUW
      HUVNWPVNUWHYPTUWLUUBYTUWHYPUUAYEYFYGYHYIYJ $.
  $}

  ${
    $d w x y z B $.  $d w y z R $.  $d w x z S $.  $d x z A $.  $d y z T $.
    $d z ph $.
    fmptcof.1 $e |- ( ph -> A. x e. A R e. B ) $.
    fmptcof.2 $e |- ( ph -> F = ( x e. A |-> R ) ) $.
    fmptcof.3 $e |- ( ph -> G = ( y e. B |-> S ) ) $.
    ${
      fmptcof.4 $e |- ( y = R -> S = T ) $.
      $( Version of ~ fmptco where ` ph ` needn't be distinct from ` x ` .
         (Contributed by NM, 27-Dec-2014.) $)
      fmptcof $p |- ( ph -> ( G o. F ) = ( x e. A |-> T ) ) $=
        ( vz vw csb cmpt wceq nfcv ccom cv wcel wral nfcsb1v nfel1 csbeq1a rspc
        eleq1d mpan9 cbvmpt syl6eq csbeq1 fmptco csbeq1d syl6eqr csbiegf ralimi
        nfcsb eqid nfcvd mpteq12 sylancr syl eqtrd ) AJIUAZBDCFGQZRZBDHRZAVFODC
        BOUBZFQZGQZRVHAOPDEVKCPUBZGQZVLIJAFEUCZBDUDZVJDUCVKEUCZKVOVQBVJDBVKEBVJ
        FUEZUFBUBVJSZFVKEBVJFUGZUIUHUJAIBDFRODVKRLBODFVKOFTVRVTUKULAJCEGRPEVNRM
        CPEGVNPGTCVMGUECVMGUGUKULCVMVKGUMUNBODVGVLOVGTBCVKGVRBGTUSVSCFVKGVTUOUK
        UPAVPVHVISZKVPDDSVGHSZBDUDWADUTVOWBBDCFGHEVOCHVANUQURBDVGDHVBVCVDVE $.
    $}

    $( Composition of two functions expressed as mapping abstractions.
       (Contributed by NM, 22-May-2006.)  (Revised by Mario Carneiro,
       31-Aug-2015.) $)
    fmptcos $p |- ( ph -> ( G o. F ) = ( x e. A |-> [_ R / y ]_ S ) ) $=
      ( vz cv csb cmpt nfcv nfcsb1v csbeq1a cbvmpt syl6eq csbeq1 fmptcof ) ABMD
      EFCMNZGOZCFGOHIJKAICEGPMEUEPLCMEGUEMGQCUDGRCUDGSTUACUDFGUBUC $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x C $.  $d x y D $.  $d x E $.
    $( Express composition of two functions as a maps-to applying both in
       sequence.  (Contributed by Stefan O'Rear, 5-Oct-2014.)  (Proof shortened
       by Mario Carneiro, 27-Dec-2014.) $)
    fcompt $p |- ( ( A : D --> E /\ B : C --> D ) -> ( A o. B ) = ( x e. C |->
        ( A ` ( B ` x ) ) ) ) $=
      ( vy wf wa cv cfv wcel ffvelrn adantll wfn cmpt wceq ffn dffn5 sylib
      adantl adantr fveq2 fmptco ) EFBHZDECHZIZAGDEAJZCKZGJZBKZUIBKCBUFUHDLUIEL
      UEDEUHCMNUGCDOZCADUIPQUFULUEDECRUAADCSTUGBEOZBGEUKPQUEUMUFEFBRUBGEBSTUJUI
      BUCUD $.
  $}

  ${
    $d F x y $.  $d I x $.  $d X x y $.  $d Y x y $.
    $( Composition with a constant function.  (Contributed by Stefan O'Rear,
       11-Mar-2015.) $)
    fcoconst $p |- ( ( F Fn X /\ Y e. X ) ->
        ( F o. ( I X. { Y } ) ) = ( I X. { ( F ` Y ) } ) ) $=
      ( vx vy wfn wcel wa csn cxp ccom cfv cmpt simplr wceq fconstmpt a1i cvv
      cv wf simpl dffn2 sylib feqmptd fveq2 fmptco syl6eqr ) ACGZDCHZIZABDJKZLE
      BDAMZNBUMJKUKEFBCDFTZAMUMULAUIUJETBHOULEBDNPUKEBDQRUKFCSAUKUICSAUAUIUJUBC
      AUCUDUEUNDAUFUGEBUMQUH $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y F $.
    fsn.1 $e |- A e. _V $.
    fsn.2 $e |- B e. _V $.
    $( A function maps a singleton to a singleton iff it is the singleton of an
       ordered pair.  (Contributed by NM, 10-Dec-2003.) $)
    fsn $p |- ( F : { A } --> { B } <-> F = { <. A , B >. } ) $=
      ( vx vy csn cop wceq cv wcel wb wal wa elsn weu eleq1d bitr4i bitr2i wreu
      wf opelf anbi12i sylib ex snid feu mpan2 anbi1i opeq2 pm5.32i ancom eubii
      eueq1 biantru euanv df-reu 3bitr4i sylibr opeq12 syl5ibrcom impbid syl6bb
      opex elsnc opth2 wrel frel relsnop eqrel sylancl mpbird wf1o f1osn f1oeq1
      alrimivv mpbiri f1of syl impbii ) AHZBHZCUBZCABIZHZJZWDWGFKZGKZIZCLZWJWFL
      ZMZGNFNZWDWMFGWDWKWHAJZWIBJZOZWLWDWKWQWDWKWQWDWKOWHWBLZWIWCLZOWQWBWCWHWIC
      UCWRWOWSWPFAPGBPZUDUEUFWDWKWQWECLZWDAWIIZCLZGWCUAZXAWDAWBLXDADUGGWBWCACUH
      UIXAWPOZGQZWSXCOZGQXAXDXEXGGXGWPXCOZXEWSWPXCWTUJXHWPXAOXEWPXCXAWPXBWECWIB
      AUKRULXAWPUMSTUNXAXAWPGQZOXFXIXAGBEUOUPXAWPGUQSXCGWCURUSUTWQWJWECWHWIABVA
      RVBVCWLWJWEJWQWJWEWHWIVEVFWHWIABDEVGTVDVQWDCVHWFVHWGWNMWBWCCVIABDEVJFGCWF
      VKVLVMWGWBWCCVNZWDWGXJWBWCWFVNABDEVOWBWCCWFVPVRWBWCCVSVTWA $.
  $}

  ${
    $d A a b $.  $d B b $.  $d F a b $.
    $( A function maps a singleton to a singleton iff it is the singleton of an
       ordered pair.  (Contributed by NM, 26-Oct-2012.) $)
    fsng $p |- ( ( A e. C /\ B e. D ) ->
                 ( F : { A } --> { B } <-> F = { <. A , B >. } ) ) $=
      ( va vb cv csn wf cop wceq wb sneq feq2d opeq1 sneqd eqeq2d bibi12d vex
      feq3d opeq2 fsn vtocl2g ) FHZIZGHZIZEJZEUEUGKZIZLZMAIZUHEJZEAUGKZIZLZMUMB
      IZEJZEABKZIZLZMFGABCDUEALZUIUNULUQVCUFUMUHEUEANOVCUKUPEVCUJUOUEAUGPQRSUGB
      LZUNUSUQVBVDUHUREUMUGBNUAVDUPVAEVDUOUTUGBAUBQRSUEUGEFTGTUCUD $.
  $}

  ${
    fsn2.1 $e |- A e. _V $.
    $( A function that maps a singleton to a class is the singleton of an
       ordered pair.  (Contributed by NM, 19-May-2004.) $)
    fsn2 $p |- ( F : { A } --> B <->
               ( ( F ` A ) e. B /\ F = { <. A , ( F ` A ) >. } ) ) $=
      ( csn wf cfv wcel wa cop wceq snid ffvelrn mpan2 wfn ffn crn dffn3 biimpi
      cima cdm imadmrn fndm imaeq2d syl5eqr fnsnfv eqtr4d feq3d mpbid syl snssi
      jca wss fss ancoms sylan impbii fvex fsn anbi2i bitri ) AEZBCFZACGZBHZVBV
      DEZCFZIZVECAVDJEKZIVCVHVCVEVGVCAVBHZVEADLZVBBACMNVCCVBOZVGVBBCPVLVBCQZCFZ
      VGVLVNVBCRSVLVMVFCVBVLVMCVBTZVFVLVMCCUAZTVOCUBVLVPVBCVBCUCUDUEVLVJVFVOKVK
      VBACUFNUGUHUIUJULVEVFBUMZVGVCVDBUKVGVQVCVBVFBCUNUOUPUQVGVIVEAVDCDACURUSUT
      VA $.
  $}

  $( The Cartesian product of two singletons.  (Contributed by Mario Carneiro,
     30-Apr-2015.) $)
  xpsng $p |- ( ( A e. V /\ B e. W ) ->
    ( { A } X. { B } ) = { <. A , B >. } ) $=
    ( wcel wa csn cxp wf cop wceq fconstg adantl fsng mpbid ) ACEZBDEZFAGZBGZRS
    HZIZTABJGKQUAPRBDLMABCDTNO $.

  ${
    xpsn.1 $e |- A e. _V $.
    xpsn.2 $e |- B e. _V $.
    $( The Cartesian product of two singletons.  (Contributed by NM,
       4-Nov-2006.) $)
    xpsn $p |- ( { A } X. { B } ) = { <. A , B >. } $=
      ( cvv wcel csn cxp cop wceq xpsng mp2an ) AEFBEFAGBGHABIGJCDABEEKL $.
  $}

  $( A singleton with a nested ordered pair is a 1-1 function of the cartesian
     product of two singleton onto a singleton.  (Contributed by AV,
     15-Aug-2019.) $)
  f1o2sn $p |- ( ( E e. V /\ X e. W )
       -> { <. <. E , E >. , X >. } : ( { E } X. { E } ) -1-1-onto-> { X } ) $=
    ( wcel wa cop csn wf1o cxp cvv opex simpr f1osng sylancr wceq anidms eqcomd
    wb xpsng adantr f1oeq2 syl mpbid ) ABEZDCEZFZAAGZHZDHZUHDGHZIZAHZUMJZUJUKIZ
    UGUHKEUFULAALUEUFMUHDKCNOUGUIUNPZULUOSUEUPUFUEUNUIUEUNUIPAABBTQRUAUIUNUJUKU
    BUCUD $.

  $( Restriction of the identity to a pair.  (Contributed by AV,
     11-Dec-2018.) $)
  residpr $p |- ( ( A e. V /\ B e. W ) -> ( _I |` { A , B } )
                                          = { <. A , A >. , <. B , B >. } ) $=
    ( wcel cid cpr cres csn cun cop df-pr reseq2i resundi cxp wceq xpsng anidms
    wa restidsing eqtri adantr adantl uneq12d uneq12i 3eqtr4g syl5eq ) ACEZBDEZ
    SZFABGZHZFAIZHZFBIZHZJZAAKZBBKZGZULFUMUOJZHUQUKVAFABLMFUMUONUAUJUMUMOZUOUOO
    ZJURIZUSIZJUQUTUJVBVDVCVEUHVBVDPZUIUHVFAACCQRUBUIVCVEPZUHUIVGBBDDQRUCUDUNVB
    UPVCATBTUEURUSLUFUG $.

  ${
    dfmpt.1 $e |- B e. _V $.
    $( Alternate definition for the ""maps to"" notation ~ df-mpt (although it
       requires that ` B ` be a set).  (Contributed by NM, 24-Aug-2010.)
       (Revised by Mario Carneiro, 30-Dec-2016.) $)
    dfmpt $p |- ( x e. A |-> B ) = U_ x e. A { <. x , B >. } $=
      ( cmpt cv csn cxp ciun cop dfmpt3 wceq wcel vex xpsn a1i iuneq2i eqtri )
      ABCEABAFZGCGHZIABSCJGZIABCKABTUATUALSBMSCANDOPQR $.

    $d x y $.  $d y A $.  $d y B $.
    $( A function expressed as the range of another function.  (Contributed by
       Mario Carneiro, 22-Jun-2013.)  (Proof shortened by Mario Carneiro,
       31-Aug-2015.) $)
    fnasrn $p |- ( x e. A |-> B ) = ran ( x e. A |-> <. x , B >. ) $=
      ( vy cmpt cv cop csn ciun crn dfmpt wcel wrex wceq eqid rnmpt elsn eqtr4i
      cab rexbii abbii df-iun ) ABCFABAGCHZIZJZABUDFZKZABCDLUHEGZUEMZABNZETZUFU
      HUIUDOZABNZETULAEBUDUGUGPQUKUNEUJUMABEUDRUAUBSAEBUEUCSS $.
  $}

  $( If ` A ` is not in ` C ` , then the restriction of a singleton of
     ` <. A , B >. ` to ` C ` is null.  (Contributed by Scott Fenton,
     15-Apr-2011.) $)
  ressnop0 $p |- ( -. A e. C -> ( { <. A , B >. } |` C ) = (/) ) $=
    ( wcel wn cop cvv cxp csn cres c0 wceq opelxp1 con3i cin df-res incom eqtri
    disjsn biimpri syl5eq syl ) ACDZEABFZCGHZDZEZUDIZCJZKLUFUCABCGMNUGUIUEUHOZK
    UIUHUEOUJUHCPUHUEQRUJKLUGUEUDSTUAUB $.

  ${
    fpr.1 $e |- A e. _V $.
    fpr.2 $e |- B e. _V $.
    fpr.3 $e |- C e. _V $.
    fpr.4 $e |- D e. _V $.
    $( A function with a domain of two elements.  (Contributed by Jeff Madsen,
       20-Jun-2010.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.) $)
    fpr $p |- ( A =/= B
                -> { <. A , C >. , <. B , D >. } : { A , B } --> { C , D } ) $=
      ( wne cop cpr wfn crn wa jctir sylibr csn cun df-pr rnsnop wss wfun funpr
      wf cdm wceq dmprop df-fn rneqi rnun uneq12i eqtr4i 3eqtri eqimssi df-f )
      ABIZACJZBDJZKZABKZLZUSMZCDKZUAZNUTVCUSUDUPVAVDUPUSUBZUSUEUTUFZNVAUPVEVFAB
      CDEFGHUCACBDGHUGOUSUTUHPVBVCVBUQQZURQZRZMVGMZVHMZRZVCUSVIUQURSUIVGVHUJVLC
      QZDQZRVCVJVMVKVNACETBDFTUKCDSULUMUNOUTVCUSUOP $.
  $}

  $( A function with a domain of two elements.  (Contributed by FL,
     2-Feb-2014.) $)
  fprg $p |- ( ( ( A e. E /\ B e. F ) /\ ( C e. G /\ D e. H ) /\ A =/= B )
                -> { <. A , C >. , <. B , D >. } : { A , B } --> { C , D } ) $=
    ( wcel wa cpr cop wf cvv wi elex c0 cif wceq 0ex anim12i neeq1 opeq1 preq1d
    wne preq1 feq12d imbi12d neeq2 preq2d preq2 opeq2 feq123d imbi2d elimel fpr
    eqidd dedth4h syl2an 3impia ) AEIZBFIZJZCGIZDHIZJZABUEZABKZCDKZACLZBDLZKZMZ
    VCANIZBNIZJCNIZDNIZJVGVMOZVFVAVNVBVOAEPBFPUAVDVPVEVQCGPDHPUAVNVOVPVQVRVNAQR
    ZBUEZVSBKZVIVSCLZVKKZMZOVSVOBQRZUEZVSWEKZVIWBWEDLZKZMZOWFWGVPCQRZDKZVSWKLZW
    HKZMZOWFWGWKVQDQRZKZWMWEWPLZKZMZOABCDQQQQAVSSZVGVTVMWDAVSBUBXAVHWAVIVLWCXAV
    JWBVKAVSCUCUDAVSBUFUGUHBWESZVTWFWDWJBWEVSUIXBWAWGVIWCWIXBVKWHWBBWEDUCUJBWEV
    SUKUGUHCWKSZWJWOWFXCWGWGVIWLWIWNXCWBWMWHCWKVSULUDXCWGUQCWKDUFUMUNDWPSZWOWTW
    FXDWGWGWLWQWNWSXDWHWRWMDWPWEULUJXDWGUQDWPWKUKUMUNVSWEWKWPAQNTUOBQNTUOCQNTUO
    DQNTUOUPURUSUT $.

  $( A function with a domain of three elements.  (Contributed by Alexander van
     der Vekens, 4-Dec-2017.) $)
  ftpg $p |- ( ( ( X e. U /\ Y e. V /\ Z e. W )
                 /\ ( A e. F /\ B e. G /\ C e. H )
                 /\ ( X =/= Y /\ X =/= Z /\ Y =/= Z ) )
               -> { <. X , A >. , <. Y , B >. , <. Z , C >. } :
                  { X , Y , Z } --> { A , B , C } ) $=
    ( wcel w3a wne cpr wf wceq wa wn csn cun cop ctp cin c0 3simpa simp1 syl3an
    fprg eqidd wb simp3 anim12i 3adant3 fsng syl mpbird elpri eqcom nne orbi12i
    bitr4i biimpi ianor sylibr con2i 3adant1 3ad2ant3 disjsn fun syl21anc df-tp
    wo feq1i feq23i bitri ) JDMZKHMZLIMZNZAEMZBFMZCGMZNZJKOZJLOZKLOZNZNZJKPZLUA
    ZUBZABPZCUAZUBZJAUCZKBUCZPZLCUCZUAZUBZQZJKLUDZABCUDZWQWRWTUDZQZWJWKWNWSQZWL
    WOXAQZWKWLUEUFRZXCWAVRVSSWEWBWCSWIWFXHVRVSVTUGWBWCWDUGWFWGWHUHJKABDHEFUJUIW
    JXIXAXARZWJXAUKWJVTWDSZXIXKULWAWEXLWIWAVTWEWDVRVSVTUMWBWCWDUMUNUOLCIGXAUPUQ
    URWJLWKMZTZXJWIWAXNWEWGWHXNWFXMWGWHSZXMLJRZLKRZVNZXOTZLJKUSXRWGTZWHTZVNZXSX
    RYBXPXTXQYAXPJLRXTLJUTJLVAVCXQKLRYALKUTKLVAVCVBVDWGWHVEVFUQVGVHVIWKLVJVFWKW
    LWNWOWSXAVKVLXGXDXEXBQXCXDXEXFXBWQWRWTVMVOXDXEWMWPXBJKLVMABCVMVPVQVF $.

  ${
    ftp.a $e |- A e. _V $.
    ftp.b $e |- B e. _V $.
    ftp.c $e |- C e. _V $.
    ftp.d $e |- X e. _V $.
    ftp.e $e |- Y e. _V $.
    ftp.f $e |- Z e. _V $.
    ftp.g $e |- A =/= B $.
    ftp.h $e |- A =/= C $.
    ftp.i $e |- B =/= C $.
    $( A function with a domain of three elements.  (Contributed by Stefan
       O'Rear, 17-Oct-2014.)  (Proof shortened by Alexander van der Vekens,
       23-Jan-2018.) $)
    ftp $p |- { <. A , X >. , <. B , Y >. , <. C , Z >. } : { A , B , C } -->
        { X , Y , Z } $=
      ( cvv wcel w3a wne ctp cop wf 3pm3.2i ftpg mp3an ) APQZBPQZCPQZRDPQZEPQZF
      PQZRABSZACSZBCSZRABCTDEFTADUABEUACFUATUBUFUGUHGHIUCUIUJUKJKLUCULUMUNMNOUC
      DEFPPPPPPABCUDUE $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x F $.
    $( A function restricted to a singleton.  (Contributed by NM,
       9-Oct-2004.) $)
    fnressn $p |- ( ( F Fn A /\ B e. A ) ->
                  ( F |` { B } ) = { <. B , ( F ` B ) >. } ) $=
      ( vx wcel wfn csn cres cfv cop wceq cv wi sneq reseq2d fveq2 opeq12 mpdan
      wa cvv sneqd eqeq12d imbi2d wss vex snss fnssres sylan2b wf fsn2 biantrur
      dffn2 ssnid fvres ax-mp opeq2i eqeq2i bitr3i 3bitri expcom vtoclga impcom
      fvex sneqi sylib ) BAECAFZCBGZHZBBCIZJZGZKZVFCDLZGZHZVMVMCIZJZGZKZMVFVLMD
      BAVMBKZVSVLVFVTVOVHVRVKVTVNVGCVMBNOVTVQVJVTVPVIKVQVJKVMBCPVMVPBVIQRUAUBUC
      VFVMAEZVSVFWASVOVNFZVSWAVFVNAUDWBVMADUEZUFAVNCUGUHWBVNTVOUIVMVOIZTEZVOVMW
      DJZGZKZSZVSVNVOULVMTVOWCUJWIWHVSWEWHVMVOVCUKWGVRVOWFVQWDVPVMVMVNEWDVPKDUM
      VMVNCUNUOUPVDUQURUSVEUTVAVB $.

    $( A function restricted to a singleton.  (Contributed by Mario Carneiro,
       16-Nov-2014.) $)
    funressn $p |- ( Fun F -> ( F |` { B } ) C_ { <. B , ( F ` B ) >. } ) $=
      ( wfun cdm wcel csn cres cfv cop wss wceq wfn funfn fnressn sylanb eqimss
      wa syl wn c0 cin disjsn fnresdisj sylbi syl5bbr biimpa syl6eqss pm2.61dan
      wb 0ss ) BCZABDZEZBAFZGZAABHIFZJZUKUMQUOUPKZUQUKBULLZUMURBMZULABNOUOUPPRU
      KUMSZQUOTUPUKVAUOTKZVAULUNUATKZUKVBULAUBUKUSVCVBUIUTULUNBUCUDUEUFUPUJUGUH
      $.

    $( The value of a function restricted to a singleton.  (Contributed by NM,
       9-Oct-2004.) $)
    fressnfv $p |- ( ( F Fn A /\ B e. A ) ->
                 ( ( F |` { B } ) : { B } --> C <-> ( F ` B ) e. C ) ) $=
      ( vx wcel wfn csn cres wf cfv wb cv wi wceq sneq reseq2 syl wa cop eleq1d
      feq1d feq2 bitrd fveq2 bibi12d imbi2d fnressn ssnid fvres ax-mp sneqi vex
      opeq2i eqeq2i fsn2 eleq1i syl5rbbr syl5bb sylbir expcom vtoclga impcom
      iba ) BAFDAGZBHZCDVFIZJZBDKZCFZLZVEEMZHZCDVMIZJZVLDKZCFZLZNVEVKNEBAVLBOZV
      RVKVEVSVOVHVQVJVSVMVFOZVOVHLVLBPVTVOVMCVGJVHVTVMCVNVGVMVFDQUBVMVFCVGUCUDR
      VSVPVICVLBDUEUAUFUGVEVLAFZVRVEWASVNVLVPTZHZOZVRAVLDUHWDVNVLVLVNKZTZHZOZVR
      WGWCVNWFWBWEVPVLVLVMFWEVPOEUIVLVMDUJUKZUNULUOVOWECFZWHSZWHVQVLCVNEUMUPVQW
      JWHWKWEVPCWIUQWHWJVDURUSUTRVAVBVC $.
  $}

  ${
    $d F x $.  $d X x $.
    $( If the value of a function is in the range of the function restricted to
       the singleton containing the argument, then the value of the function is
       in the range of the function.  (Contributed by Alexander van der Vekens,
       22-Jul-2018.) $)
    fvrnressn $p |- ( X e. V -> ( ( F ` X ) e. ran ( F |` { X } )
                                  -> ( F ` X ) e. ran F ) ) $=
      ( vx cfv csn cres crn wcel cima df-ima eleq2i cop cv wex opeq1 eleq1d cvv
      wceq wb spcegv fvex elimasng mpan2 elrn2g mp1i 3imtr4d syl5bir ) CAEZACFZ
      GHZIUIAUJJZIZCBIZUIAHIZULUKUIAUJKLUNCUIMZAIZDNZUIMZAIZDOZUMUOUTUQDCBURCSU
      SUPAURCUIPQUAUNUIRIZUMUQTCAUBZACUIBRUCUDVBUOVATUNVCDUIARUEUFUGUH $.
  $}

  $( The value of a function restricted to the singleton containing the
     argument equals the value of the function for this argument.  (Contributed
     by Alexander van der Vekens, 22-Jul-2018.) $)
  fvressn $p |- ( X e. V -> ( ( F |` { X } ) ` X ) = ( F ` X ) ) $=
    ( wcel csn cres cfv wceq snidg fvres syl ) CBDCCEZDCALFGCAGHCBICLAJK $.

  $( If the value of a function is not null, the value is an element of the
     range of the function.  (Contributed by Alexander van der Vekens,
     22-Jul-2018.) $)
  fvn0fvelrn $p |- ( ( F ` X ) =/= (/) -> ( F ` X ) e. ran F ) $=
    ( cfv c0 wne cdm wcel csn cres wfun wa crn fvfundmfvn0 wi eldmressnsn pm3.2
    fvelrn syl ex com13 mpd imp fvressn eleq1d fvrnressn sylbid impcom 3syl ) B
    ACZDEBAFZGZABHIZJZKBULCZULLZGZUKKZUIALGZBAMUKUMUQUKBULFGZUMUQNBAOUMUSUKUQUM
    USUKUQNZUMUSKUPUTBULQUPUKPRSTUAUBUKUPURUKUPUIUOGURUKUNUIUOAUJBUCUDAUJBUEUFU
    GUH $.

  $( The value of a constant function.  (Contributed by NM, 30-May-1999.) $)
  fvconst $p |- ( ( F : A --> { B } /\ C e. A ) -> ( F ` C ) = B ) $=
    ( csn wf wcel wa cfv wceq ffvelrn elsni syl ) ABEZDFCAGHCDIZNGOBJANCDKOBLM
    $.

  ${
    $d x A $.  $d x F $.
    fnsnb.1 $e |- A e. _V $.
    $( A function whose domain is a singleton can be represented as a singleton
       of an ordered pair.  (Contributed by Jonathan Ben-Naim, 3-Jun-2011.)
       Revised to add reverse implication.  (Revised by NM, 29-Dec-2018.) $)
    fnsnb $p |- ( F Fn { A } <-> F = { <. A , ( F ` A ) >. } ) $=
      ( vx csn wfn cfv cop wceq cv wcel cres fnresdm wfun wss fnfun funressn wa
      syl mpbiri eqsstr3d sseld elsni syl6 cdm df-fn eleq2 anim2i sylbi funfvop
      snid eleq1 syl5ibrcom impbid elsn syl6bbr eqrdv fvex fnsn fneq1 impbii )
      BAEZFZBAABGZHZEZIZVCDBVFVCDJZBKZVHVEIZVHVFKZVCVIVJVCVIVKVJVCBVFVHVCBBVBLZ
      VFVBBMVCBNZVLVFOVBBPABQSUAUBVHVEUCUDVCVIVJVEBKZVCVMABUEZKZRZVNVCVMVOVBIZR
      VQBVBUFVRVPVMVRVPAVBKACUKVOVBAUGTUHUIABUJSVHVEBULUMUNDVEUOUPUQVGVCVFVBFAV
      DCABURUSVBBVFUTTVA $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Express a singleton function in maps-to notation.  (Contributed by NM,
       6-Jun-2006.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.)  (Revised
       by Stefan O'Rear, 28-Feb-2015.) $)
    fmptsn $p |- ( ( A e. V /\ B e. W ) ->
        { <. A , B >. } = ( x e. { A } |-> B ) ) $=
      ( wcel wa csn cmpt cxp cop fconstmpt xpsng syl5reqr ) BDFCEFGABHZCIOCHJBC
      KHAOCLBCDEMN $.
  $}

  ${
    $d A p x y $.  $d B p y $.  $d C p x y $.  $d V p $.  $d W p $.
    fmptsng.1 $e |- ( x = A -> B = C ) $.
    $( Express a singleton function in maps-to notation.  Version of ~ fmptsn
       allowing the mapping value to depend on the mapping variable (usual
       case).  (Contributed by AV, 27-Feb-2019.) $)
    fmptsng $p |- ( ( A e. V /\ C e. W ) ->
        { <. A , C >. } = ( x e. { A } |-> B ) ) $=
      ( vy vp wcel wa cv wceq copab csn cop elsn eqidd eqeq1 adantr cmpt bicomi
      anbi1i opabbii wb sylan9bbr anbi12d opelopabga mpbir2and eleq1 syl5ibrcom
      eqeq2d syl5bi wex elopab opeq12 opeq2d opex snid syl6eqel sylbid exlimivv
      wi impcom a1i impbid eqrdv df-mpt 3eqtr4a ) BEJDFJKZALZBMZHLZCMZKZAHNZVKB
      OZJZVNKZAHNZBDPZOZAVQCUAZVOVSAHVLVRVNVRVLABQUBUCUDVJIWBVPVJILZWBJZWDVPJZW
      EWDWAMZVJWFIWAQVJWFWGWAVPJZVJWHBBMZDDMZVJBRVJDRVOWIWJKAHBDEFVLVMDMZKVLWIV
      NWJVLVLWIUEWKVKBBSTWKVNDCMVLWJVMDCSVLCDDGULUFUGUHUIWDWAVPUJUKUMWFWDVKVMPZ
      MZVOKZHUNAUNZVJWEVOAHWDUOWOWEVCVJWNWEAHVOWMWEVOWMWDBCPZMZWEVOWLWPWDVKVMBC
      UPULVOWEWQWPWBJVOWPWAWBVOCDBVLCDMVNGTUQWABDURUSUTWDWPWBUJUKVAVDVBVEUMVFVG
      WCVTMVJAHVQCVHVEVI $.
  $}

  ${
    $d A p x y $.  $d B p y $.  $d C p x y $.  $d V p $.  $d W p $.
    $d ph p x y $.
    fmptsnd.1 $e |- ( ( ph /\ x = A ) -> B = C ) $.
    fmptsnd.2 $e |- ( ph -> A e. V ) $.
    fmptsnd.3 $e |- ( ph -> C e. W ) $.
    $( Express a singleton function in maps-to notation.  Deduction form of
       ~ fmptsng .  (Contributed by AV, 4-Aug-2019.) $)
    fmptsnd $p |- ( ph -> { <. A , C >. } = ( x e. { A } |-> B ) ) $=
      ( vy vp cv wceq wa copab wcel cop wsbc wb cmpt elsn bicomi anbi1i opabbii
      csn eqidd sbcan sbcg syl eqsbc3 anbi12d syl5bb eqeq1 adantl eqeq2d sbcied
      sbcbidv bitrd mpbir2and opelopabsb sylibr syl5ibrcom syl5bi wex elopab wi
      eleq1 opeq12 adantrr opeq2d opex snid syl6eqel sylbid com23 impd exlimdvv
      ex impbid eqrdv df-mpt a1i 3eqtr4a ) ABMZCNZKMZDNZOZBKPZWECUFZQZWHOZBKPZC
      ERZUFZBWKDUAZWIWMBKWFWLWHWLWFBCUBUCUDUEALWPWJALMZWPQZWRWJQZWSWRWONZAWTLWO
      UBAWTXAWOWJQZAWIKESZBCSZXBAXDCCNZEENZACUGAEUGAXDWFEDNZOZBCSXEXFOZAXCXHBCX
      CWFKESZWHKESZOAXHWFWHKEUHAXJWFXKXGAEGQZXJWFTJWFKEGUIUJAXLXKXGTJKEDGUKUJUL
      UMURAXHXIBCFIAWFOZWFXEXGXFWFWFXETAWECCUNUOXMDEEHUPULUQUSUTWIBKCEVAVBWRWOW
      JVHVCVDWTWRWEWGRZNZWIOZKVEBVEAWSWIBKWRVFAXPWSBKAXOWIWSAWIXOWSAWIXOWSVGAWI
      OZXOWRCDRZNZWSXQXNXRWRWIXNXRNAWEWGCDVIUOUPXQWSXSXRWPQXQXRWOWPXQDECAWFDENW
      HHVJVKWOCEVLVMVNWRXRWPVHVCVOVSVPVQVRVDVTWAWQWNNABKWKDWBWCWD $.
  $}

  ${
    $d x A $.  $d x B $.  $d x R $.  $d x S $.
    fmptap.0a $e |- A e. _V $.
    fmptap.0b $e |- B e. _V $.
    fmptap.1 $e |- ( R u. { A } ) = S $.
    fmptap.2 $e |- ( x = A -> C = B ) $.
    $( Append an additional value to a function.  (Contributed by NM,
       6-Jun-2006.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    fmptap $p |- ( ( x e. R |-> C ) u. { <. A , B >. } ) = ( x e. S |-> C ) $=
      ( cmpt cop csn cun cvv wcel wceq fmptsn mp2an cv elsni syl mpteq2ia mptun
      eqtr4i uneq2i mpteq1 ax-mp 3eqtr2i ) AEDKZBCLMZNUJABMZDKZNAEULNZDKZAFDKZU
      KUMUJUKAULCKZUMBOPCOPUKUQQGHABCOORSAULDCATZULPURBQDCQURBUAJUBUCUEUFAEULDU
      DUNFQUOUPQIAUNFDUGUHUI $.
  $}

  ${
    $d x A $.  $d x B $.  $d x R $.  $d x S $.  $d x ph $.
    fmptapd.0a $e |- ( ph -> A e. _V ) $.
    fmptapd.0b $e |- ( ph -> B e. _V ) $.
    fmptapd.1 $e |- ( ph -> ( R u. { A } ) = S ) $.
    fmptapd.2 $e |- ( ( ph /\ x = A ) -> C = B ) $.
    $( Append an additional value to a function.  (Contributed by Thierry
       Arnoux, 3-Jan-2017.) $)
    fmptapd $p |- ( ph ->
      ( ( x e. R |-> C ) u. { <. A , B >. } ) = ( x e. S |-> C ) ) $=
      ( cmpt cop csn cun cvv fmptsnd uneq2d wceq mptun a1i mpteq1d 3eqtr2d ) AB
      FELZCDMNZOUDBCNZELZOZBFUFOZELZBGELAUEUGUDABCEDPPKHIQRUJUHSABFUFETUAABUIGE
      JUBUC $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x D $.  $d x ph $.
    fmptpr.1 $e |- ( ph -> A e. V ) $.
    fmptpr.2 $e |- ( ph -> B e. W ) $.
    fmptpr.3 $e |- ( ph -> C e. X ) $.
    fmptpr.4 $e |- ( ph -> D e. Y ) $.
    fmptpr.5 $e |- ( ( ph /\ x = A ) -> E = C ) $.
    fmptpr.6 $e |- ( ( ph /\ x = B ) -> E = D ) $.
    $( Express a pair function in maps-to notation.  (Contributed by Thierry
       Arnoux, 3-Jan-2017.) $)
    fmptpr $p |- ( ph ->
      { <. A , C >. , <. B , D >. } = ( x e. { A , B } |-> E ) ) $=
      ( csn cun wcel cop cpr cmpt wceq df-pr a1i fmptsnd uneq1d cvv elex eqcomi
      syl fmptapd 3eqtrd ) ACEUAZDFUAZUBZUORZUPRZSZBCRZGUCZUSSBCDUBZGUCUQUTUDAU
      OUPUEUFAURVBUSABCGEHJPLNUGUHABDFGVAVCADITDUITMDIUJULAFKTFUITOFKUJULVADRSZ
      VCUDAVCVDCDUEUKUFQUMUN $.
  $}

  $( The value of a restricted identity function.  (Contributed by NM,
     19-May-2004.) $)
  fvresi $p |- ( B e. A -> ( ( _I |` A ) ` B ) = B ) $=
    ( wcel cid cres cfv fvres fvi eqtrd ) BACBDAEFBDFBBADGBAHI $.

  ${
    $d F x y $.  $d A x y $.  $d X x y $.
    $( Express the class of fixed points of a function.  (Contributed by Stefan
       O'Rear, 1-Feb-2015.) $)
    fninfp $p |- ( F Fn A -> dom ( F i^i _I ) = { x e. A | ( F ` x ) = x } ) $=
      ( wfn cid cin cdm cres cv cfv wceq crab inres incom reseq1i eqtri 3eqtr4i
      fnresdm ineq1d syl5reqr dmeqd fnresi fndmin mpan2 wcel fvresi rabbiia a1i
      eqeq2d 3eqtrd ) CBDZCEFZGCEBHZFZGZAIZCJZUPUMJZKZABLZUQUPKZABLZUKULUNUKUNC
      BHZEFZULEVCFZULBHZVDUNVEECFZBHVFECBMVGULBECNOPVCENCEBMQUKVCCEBCRSTUAUKUMB
      DUOUTKBUBABCUMUCUDUTVBKUKUSVAABUPBUEURUPUQBUPUFUIUGUHUJ $.

    $( Property of a fixed point of a function.  (Contributed by Stefan O'Rear,
       1-Feb-2015.) $)
    fnelfp $p |- ( ( F Fn A /\ X e. A ) -> ( X e. dom ( F i^i _I ) <->
          ( F ` X ) = X ) ) $=
      ( vx wfn cid cin cdm wcel cv cfv wceq crab fninfp eleq2d fveq2 id eqeq12d
      elrab3 sylan9bb ) BAEZCBFGHZICDJZBKZUCLZDAMZICAICBKZCLZUAUBUFCDABNOUEUHDC
      AUCCLZUDUGUCCUCCBPUIQRST $.

    $( Express the class of non-fixed points of a function.  (Contributed by
       Stefan O'Rear, 14-Aug-2015.) $)
    fndifnfp $p |- ( F Fn A -> dom ( F \ _I ) =
          { x e. A | ( F ` x ) =/= x } ) $=
      ( wfn cid cdif cdm cres cv cfv wne crab cvv cxp cun c0 wss wceq wf dffn2
      fssxp sylbi ssdif0 sylib uneq2d un0 syl6req difeq2i difindi eqtri syl6eqr
      cin df-res dmeqd fnresi fndmdif mpan2 wcel fvresi neeq2d rabbiia 3eqtrd
      a1i ) CBDZCEFZGCEBHZFZGZAIZCJZVIVFJZKZABLZVJVIKZABLZVDVEVGVDVEVECBMNZFZOZ
      VGVDVRVEPOVEVDVQPVEVDCVPQZVQPRVDBMCSVSBCTBMCUAUBCVPUCUDUEVEUFUGVGCEVPULZF
      VRVFVTCEBUMUHCEVPUIUJUKUNVDVFBDVHVMRBUOABCVFUPUQVMVORVDVLVNABVIBURVKVIVJB
      VIUSUTVAVCVB $.

    $( Property of a non-fixed point of a function.  (Contributed by Stefan
       O'Rear, 15-Aug-2015.) $)
    fnelnfp $p |- ( ( F Fn A /\ X e. A ) -> ( X e. dom ( F \ _I ) <->
          ( F ` X ) =/= X ) ) $=
      ( vx wfn cid cdif cdm wcel cv cfv crab fndifnfp eleq2d wceq fveq2 neeq12d
      wne id elrab3 sylan9bb ) BAEZCBFGHZICDJZBKZUDRZDALZICAICBKZCRZUBUCUGCDABM
      NUFUIDCAUDCOZUEUHUDCUDCBPUJSQTUA $.

    $( A function is the identity iff it moves no points.  (Contributed by
       Stefan O'Rear, 25-Aug-2015.) $)
    fnnfpeq0 $p |- ( F Fn A -> ( dom ( F \ _I ) = (/) <->
          F = ( _I |` A ) ) ) $=
      ( vx wfn cv cfv wne crab c0 wceq cid cres wral cdif cdm wn rabeq0 wcel wa
      wb fvresi eqeq2d adantl nne syl6rbbr ralbidva syl5bb eqeq1d fnresi eqfnfv
      fndifnfp mpan2 3bitr4d ) BADZCEZBFZUOGZCAHZIJZUPUOKALZFZJZCAMZBKNOZIJBUTJ
      ZUSUQPZCAMUNVCUQCAQUNVFVBCAUNUOARZSVBUPUOJZVFVGVBVHTUNVGVAUOUPAUOUAUBUCUP
      UOUDUEUFUGUNVDURICABUKUHUNUTADVEVCTAUICABUTUJULUM $.
  $}

  $( Remove an ordered pair not participating in a function value.
     (Contributed by NM, 1-Oct-2013.)  (Revised by Mario Carneiro,
     28-May-2014.) $)
  fvunsn $p |- ( B =/= D
       -> ( ( A u. { <. B , C >. } ) ` D ) = ( A ` D ) ) $=
    ( wne cop csn cun cres cfv resundir c0 wcel wceq cvv fvressn eqtr4d pm2.61i
    wn fvprc elsni necon3ai ressnop0 syl uneq2d syl6eq syl5eq fveq1d 3eqtr3g
    un0 ) BDEZDABCFGZHZDGZIZJZDAUNIZJZDUMJZDAJZUKDUOUQUKUOUQULUNIZHZUQAULUNKUKV
    BUQLHUQUKVALUQUKBUNMZSVALNVCBDBDUAUBBCUNUCUDUEUQUJUFUGUHDOMZUPUSNUMODPVDSZU
    PLUSDUOTDUMTQRVDURUTNAODPVEURLUTDUQTDATQRUI $.

  ${
    fvsn.1 $e |- A e. _V $.
    fvsn.2 $e |- B e. _V $.
    $( The value of a singleton of an ordered pair is the second member.
       (Contributed by NM, 12-Aug-1994.) $)
    fvsn $p |- ( { <. A , B >. } ` A ) = B $=
      ( cop csn wfun wcel cfv wceq funsn opex snid funopfv mp2 ) ABEZFZGPQHAQIB
      JABCDKPABLMABQNO $.
  $}

  ${
    $d A a b $.  $d B b $.
    $( The value of a singleton of an ordered pair is the second member.
       (Contributed by NM, 26-Oct-2012.) $)
    fvsng $p |- ( ( A e. V /\ B e. W ) -> ( { <. A , B >. } ` A ) = B ) $=
      ( va vb cv cop csn cfv opeq1 sneqd id fveq12d eqeq1d opeq2 fveq1d eqeq12d
      wceq vex fvsn vtocl2g ) EGZUCFGZHZIZJZUDSAAUDHZIZJZUDSAABHZIZJZBSEFABCDUC
      ASZUGUJUDUNUCAUFUIUNUEUHUCAUDKLUNMNOUDBSZUJUMUDBUOAUIULUOUHUKUDBAPLQUOMRU
      CUDETFTUAUB $.
  $}

  ${
    fvsnun.1 $e |- A e. _V $.
    fvsnun.2 $e |- B e. _V $.
    fvsnun.3 $e |- G = ( { <. A , B >. } u. ( F |` ( C \ { A } ) ) ) $.
    $( The value of a function with one of its ordered pairs replaced, at the
       replaced ordered pair.  See also ~ fvsnun2 .  (Contributed by NM,
       23-Sep-2007.) $)
    fvsnun1 $p |- ( G ` A ) = B $=
      ( csn cres cfv cop cdif cun c0 cin wceq eqtri ax-mp fvres reseq1i disjdif
      resundir incom resdisj uneq2i un0 fveq1i wcel snid fvsn 3eqtr3i ) AEAIZJZ
      KZAABLIZUMJZKZAEKZBAUNUQUNUPDCUMMZJZNZUMJZUQEVBUMHUAVCUQVAUMJZNZUQUPVAUMU
      CVEUQONUQVDOUQUTUMPZOQVDOQVFUMUTPOUTUMUDUMCUBRUTUMDUESUFUQUGRRRUHAUMUIZUO
      USQAFUJZAUMETSURAUPKZBVGURVIQVHAUMUPTSABFGUKRUL $.

    $( The value of a function with one of its ordered pairs replaced, at
       arguments other than the replaced one.  See also ~ fvsnun1 .
       (Contributed by NM, 23-Sep-2007.) $)
    fvsnun2 $p |- ( D e. ( C \ { A } ) -> ( G ` D ) = ( F ` D ) ) $=
      ( csn cdif wcel cres cfv cop cun c0 wceq 3eqtri fvres reseq1i cin disjdif
      resundir wfn wb fnsn fnresdisj ax-mp mpbi residm uneq12i uncom un0 fveq1i
      3eqtr3a ) DCAJZKZLDFURMZNDEURMZNDFNDENDUSUTUSABOJZUTPZURMVAURMZUTURMZPZUT
      FVBURIUAVAUTURUDVEQUTPUTQPUTVCQVDUTUQURUBQRZVCQRZUQCUCVAUQUEVFVGUFABGHUGU
      QURVAUHUIUJEURUKULQUTUMUTUNSSUODURFTDURETUP $.
  $}

  $( Split a function into a single point and all the rest.  (Contributed by
     Stefan O'Rear, 27-Feb-2015.) $)
  fnsnsplit $p |- ( ( F Fn A /\ X e. A ) ->
      F = ( ( F |` ( A \ { X } ) ) u. { <. X , ( F ` X ) >. } ) ) $=
    ( wfn wcel wa cres csn cdif cfv cop cun wceq fnresdm adantr resundi difsnid
    adantl reseq2d fnressn uneq2d 3eqtr3a eqtr3d ) BADZCAEZFZBAGZBBACHZIZGZCCBJ
    KHZLZUDUGBMUEABNOUFBUIUHLZGUJBUHGZLUGULBUIUHPUFUMABUEUMAMUDACQRSUFUNUKUJACB
    TUAUBUC $.

  $( Adjoining a point to a function gives a function.  (Contributed by Stefan
     O'Rear, 28-Feb-2015.) $)
  fsnunf $p |- ( ( F : S --> T /\ ( X e. V /\ -. X e. S ) /\ Y e. T ) ->
      ( F u. { <. X , Y >. } ) : ( S u. { X } ) --> T ) $=
    ( wf wcel wn wa w3a csn cun cop cin c0 wceq simp1 wf1o simp2l simp3 syl2anc
    f1osng f1of syl simp2r disjsn fun syl21anc wss snssi 3ad2ant3 ssequn2 sylib
    sylibr feq3d mpbid ) ABCGZEDHZEAHIZJZFBHZKZAELZMZBFLZMZCEFNLZMZGZVEBVIGVCUR
    VDVFVHGZAVDOPQZVJURVAVBRVCVDVFVHSZVKVCUSVBVMURUSUTVBTURVAVBUAEFDBUCUBVDVFVH
    UDUEVCUTVLURUSUTVBUFAEUGUOAVDBVFCVHUHUIVCVGBVIVEVCVFBUJZVGBQVBURVNVAFBUKULV
    FBUMUNUPUQ $.

  $( Adjoining a point to a punctured function gives a function.  (Contributed
     by Stefan O'Rear, 28-Feb-2015.) $)
  fsnunf2 $p |- ( ( F : ( S \ { X } ) --> T /\ X e. S /\ Y e. T ) ->
      ( F u. { <. X , Y >. } ) : S --> T ) $=
    ( csn cdif wf wcel w3a cun cop simp1 simp2 neldifsnd simp3 fsnunf syl121anc
    wn wceq difsnid 3ad2ant2 feq2d mpbid ) ADFZGZBCHZDAIZEBIZJZUFUEKZBCDELFKZHZ
    ABULHUJUGUHDUFISUIUMUGUHUIMUGUHUINUJDAOUGUHUIPUFBCADEQRUJUKABULUHUGUKATUIAD
    UAUBUCUD $.

  $( Recover the added point from a point-added function.  (Contributed by
     Stefan O'Rear, 28-Feb-2015.)  (Revised by NM, 18-May-2017.) $)
  fsnunfv $p |- ( ( X e. V /\ Y e. W /\ -. X e. dom F ) ->
      ( ( F u. { <. X , Y >. } ) ` X ) = Y ) $=
    ( wcel cdm wn w3a cop csn cun cres cfv c0 wceq cin dmres 3adant3 syl disjsn
    incom eqtri biimpri syl5eq 3ad2ant3 wb relres reldm0 ax-mp sylibr wfn fnsng
    wrel fnresdm uneq12d resundir uncom un0 eqtr2i 3eqtr4g snidg 3ad2ant1 fvres
    fveq1d fvsng 3eqtr3d ) DBFZECFZDAGZFHZIZDADEJKZLZDKZMZNZDVMNZDVNNZEVLDVPVMV
    LAVOMZVMVOMZLOVMLZVPVMVLVTOWAVMVLVTGZOPZVTOPZVKVHWDVIVKWCVJVOQZOWCVOVJQWFAV
    ORVOVJUBUCWFOPVKVJDUAUDUEUFVTUNWEWDUGAVOUHVTUIUJUKVLVMVOULZWAVMPVHVIWGVKDEB
    CUMSVOVMUOTUPAVMVOUQWBVMOLVMOVMURVMUSUTVAVEVLDVOFZVQVSPVHVIWHVKDBVBVCDVOVNV
    DTVHVIVREPVKDEBCVFSVG $.

  $( Recover the original function from a point-added function.  (Contributed
     by Stefan O'Rear, 28-Feb-2015.) $)
  fsnunres $p |- ( ( F Fn S /\ -. X e. S ) ->
      ( ( F u. { <. X , Y >. } ) |` S ) = F ) $=
    ( wfn wcel wn wa cres cop csn cun c0 fnresdm adantr ressnop0 adantl uneq12d
    wceq resundir un0 eqcomi 3eqtr4g ) BAEZCAFGZHZBAIZCDJKZAIZLBMLZBUHLAIBUFUGB
    UIMUDUGBSUEABNOUEUIMSUDCDAPQRBUHATUJBBUAUBUC $.

  $( Restricting a function to a domain without one element of the domain of
     the function, and adding a pair of this element and the function value of
     the element results in the function itself.  (Contributed by AV,
     2-Dec-2018.) $)
  funresdfunsn $p |- ( ( Fun F /\ X e. dom F ) ->
                ( ( F |` ( _V \ { X } ) ) u. { <. X , ( F ` X ) >. } ) = F ) $=
    ( wfun cdm wcel wa cvv csn cdif cres cfv cop cun wceq wrel funrel resdmdfsn
    syl adantr uneq1d wfn funfn fnsnsplit sylanb eqtr4d ) ACZBADZEZFZAGBHZIJZBB
    AKLHZMAUGUJIJZULMZAUIUKUMULUFUKUMNZUHUFAOUOAPABQRSTUFAUGUAUHAUNNAUBUGABUCUD
    UE $.

  ${
    fvpr1.1 $e |- A e. _V $.
    fvpr1.2 $e |- C e. _V $.
    $( The value of a function with a domain of two elements.  (Contributed by
       Jeff Madsen, 20-Jun-2010.) $)
    fvpr1 $p |- ( A =/= B -> ( { <. A , C >. , <. B , D >. } ` A ) = C ) $=
      ( wne cop cpr cfv csn df-pr fveq1i wceq necom fvunsn sylbi syl5eq fvsn
      cun syl6eq ) ABGZAACHZBDHZIZJZAUCKZJZCUBUFAUGUDKTZJZUHAUEUIUCUDLMUBBAGUJU
      HNABOUGBDAPQRACEFSUA $.
  $}

  ${
    fvpr2.1 $e |- B e. _V $.
    fvpr2.2 $e |- D e. _V $.
    $( The value of a function with a domain of two elements.  (Contributed by
       Jeff Madsen, 20-Jun-2010.) $)
    fvpr2 $p |- ( A =/= B -> ( { <. A , C >. , <. B , D >. } ` B ) = D ) $=
      ( wne cop cpr cfv prcom fveq1i wceq necom fvpr1 sylbi syl5eq ) ABGZBACHZB
      DHZIZJBTSIZJZDBUAUBSTKLRBAGUCDMABNBADCEFOPQ $.
  $}

  $( The value of a function with a domain of (at most) two elements.
     (Contributed by Alexander van der Vekens, 3-Dec-2017.) $)
  fvpr1g $p |- ( ( A e. V /\ C e. W /\ A =/= B )
                 -> ( { <. A , C >. , <. B , D >. } ` A ) = C ) $=
    ( wcel wne w3a cop cpr cfv csn wceq cun df-pr fveq1i necom fvunsn sylbi
    syl5eq 3ad2ant3 fvsng 3adant3 eqtrd ) AEGZCFGZABHZIAACJZBDJZKZLZAUIMZLZCUHU
    FULUNNUGUHULAUMUJMOZLZUNAUKUOUIUJPQUHBAHUPUNNABRUMBDASTUAUBUFUGUNCNUHACEFUC
    UDUE $.

  $( The value of a function with a domain of (at most) two elements.
     (Contributed by Alexander van der Vekens, 3-Dec-2017.) $)
  fvpr2g $p |- ( ( B e. V /\ D e. W /\ A =/= B )
                 -> ( { <. A , C >. , <. B , D >. } ` B ) = D ) $=
    ( wcel wne w3a cop cpr cfv csn wceq cun prcom df-pr eqtri fveq1i fvunsn
    syl5eq 3ad2ant3 fvsng 3adant3 eqtrd ) BEGZDFGZABHZIBACJZBDJZKZLZBUJMZLZDUHU
    FULUNNUGUHULBUMUIMOZLUNBUKUOUKUJUIKUOUIUJPUJUIQRSUMACBTUAUBUFUGUNDNUHBDEFUC
    UDUE $.

  ${
    fvtp1.1 $e |- A e. _V $.
    fvtp1.4 $e |- D e. _V $.
    $( The first value of a function with a domain of three elements.
       (Contributed by NM, 14-Sep-2011.) $)
    fvtp1 $p |- ( ( A =/= B /\ A =/= C )
             -> ( { <. A , D >. , <. B , E >. , <. C , F >. } ` A ) = D ) $=
      ( wne wa cop ctp cfv cpr csn cun df-tp fveq1i wceq necom fvunsn sylan9eqr
      sylbi fvpr1 syl5eq ) ABIZACIZJAADKZBEKZCFKZLZMAUHUINZUJOPZMZDAUKUMUHUIUJQ
      RUGUFUNAULMZDUGCAIUNUOSACTULCFAUAUCABDEGHUDUBUE $.
  $}

  ${
    fvtp2.1 $e |- B e. _V $.
    fvtp2.4 $e |- E e. _V $.
    $( The second value of a function with a domain of three elements.
       (Contributed by NM, 14-Sep-2011.) $)
    fvtp2 $p |- ( ( A =/= B /\ B =/= C )
             -> ( { <. A , D >. , <. B , E >. , <. C , F >. } ` B ) = E ) $=
      ( wne wa cop ctp cfv tprot fveq1i wceq necom fvtp1 ancoms sylanb syl5eq )
      ABIZBCIZJBADKZBEKZCFKZLZMBUEUFUDLZMZEBUGUHUDUEUFNOUBBAIZUCUIEPZABQUCUJUKB
      CAEFDGHRSTUA $.
  $}

  ${
    fvtp3.1 $e |- C e. _V $.
    fvtp3.4 $e |- F e. _V $.
    $( The third value of a function with a domain of three elements.
       (Contributed by NM, 14-Sep-2011.) $)
    fvtp3 $p |- ( ( A =/= C /\ B =/= C )
             -> ( { <. A , D >. , <. B , E >. , <. C , F >. } ` C ) = F ) $=
      ( wne wa cop ctp cfv tprot fveq1i wceq necom fvtp2 sylan2b ancoms syl5eq
      ) ACIZBCIZJCADKZBEKZCFKZLZMCUEUFUDLZMZFCUGUHUDUEUFNOUCUBUIFPZUBUCCAIUJACQ
      BCAEFDGHRSTUA $.
  $}

  $( The value of a function with a domain of (at most) three elements.
     (Contributed by Alexander van der Vekens, 4-Dec-2017.) $)
  fvtp1g $p |- ( ( ( A e. V /\ D e. W ) /\ ( A =/= B /\ A =/= C ) )
                -> ( { <. A , D >. , <. B , E >. , <. C , F >. } ` A ) = D ) $=
    ( wcel wa wne cop ctp cfv cpr csn cun df-tp fveq1i wceq necom fvunsn fvpr1g
    sylbi ad2antll 3expa adantrr eqtrd syl5eq ) AGIZDHIZJZABKZACKZJJZAADLZBELZC
    FLZMZNAUPUQOZURPQZNZDAUSVAUPUQURRSUOVBAUTNZDUNVBVCTZULUMUNCAKVDACUAUTCFAUBU
    DUEULUMVCDTZUNUJUKUMVEABDEGHUCUFUGUHUI $.

  $( The value of a function with a domain of (at most) three elements.
     (Contributed by Alexander van der Vekens, 4-Dec-2017.) $)
  fvtp2g $p |- ( ( ( B e. V /\ E e. W ) /\ ( A =/= B /\ B =/= C ) )
                -> ( { <. A , D >. , <. B , E >. , <. C , F >. } ` B ) = E ) $=
    ( wcel wa wne cop ctp cfv tprot fveq1i wceq wi necom fvtp1g expcom ancoms
    sylanb impcom syl5eq ) BGIEHIJZABKZBCKZJZJBADLZBELZCFLZMZNBUKULUJMZNZEBUMUN
    UJUKULOPUIUFUOEQZUGBAKZUHUFUPRZABSUHUQURUFUHUQJUPBCAEFDGHTUAUBUCUDUE $.

  $( The value of a function with a domain of (at most) three elements.
     (Contributed by Alexander van der Vekens, 4-Dec-2017.) $)
  fvtp3g $p |- ( ( ( C e. V /\ F e. W ) /\ ( A =/= C /\ B =/= C ) )
                -> ( { <. A , D >. , <. B , E >. , <. C , F >. } ` C ) = F ) $=
    ( wcel wa wne cop ctp cfv tprot fveq1i wceq wi necom fvtp2g expcom sylan2b
    ancoms impcom syl5eq ) CGIFHIJZACKZBCKZJZJCADLZBELZCFLZMZNCUKULUJMZNZFCUMUN
    UJUKULOPUIUFUOFQZUHUGUFUPRZUGUHCAKZUQACSUFUHURJUPBCAEFDGHTUAUBUCUDUE $.

  $( The value of a constant function.  (Contributed by NM, 20-Aug-2005.) $)
  fvconst2g $p |- ( ( B e. D /\ C e. A ) -> ( ( A X. { B } ) ` C ) = B ) $=
    ( wcel csn cxp wf cfv wceq fconstg fvconst sylan ) BDEABFZANGZHCAECOIBJABDK
    ABCOLM $.

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x F $.
    $( A constant function expressed as a Cartesian product.  (Contributed by
       NM, 27-Nov-2007.) $)
    fconst2g $p |- ( B e. C -> ( F : A --> { B } <-> F = ( A X. { B } ) ) ) $=
      ( vx wcel csn wf cxp wceq wa cv cfv wral fvconst adantlr fvconst2g eqtr4d
      adantll wfn ralrimiva wb ffn fnconstg eqfnfv syl2an mpbird expcom fconstg
      feq1 syl5ibrcom impbid ) BCFZABGZDHZDAUNIZJZUOUMUQUOUMKZUQELZDMZUSUPMZJZE
      ANZURVBEAURUSAFZKUTBVAUOVDUTBJUMABUSDOPUMVDVABJUOABUSCQSRUAUODATUPATUQVCU
      BUMAUNDUCABCUDEADUPUEUFUGUHUMUOUQAUNUPHABCUIAUNDUPUJUKUL $.
  $}

  ${
    $d x A $.  $d x B $.  $d x F $.
    fvconst2.1 $e |- B e. _V $.
    $( The value of a constant function.  (Contributed by NM, 16-Apr-2005.) $)
    fvconst2 $p |- ( C e. A -> ( ( A X. { B } ) ` C ) = B ) $=
      ( cvv wcel csn cxp cfv wceq fvconst2g mpan ) BEFCAFCABGHIBJDABCEKL $.

    $( A constant function expressed as a Cartesian product.  (Contributed by
       NM, 20-Aug-1999.) $)
    fconst2 $p |- ( F : A --> { B } <-> F = ( A X. { B } ) ) $=
      ( cvv wcel csn wf cxp wceq wb fconst2g ax-mp ) BEFABGZCHCANIJKDABECLM $.
  $}

  $( Two ways to express that a function is constant.  (Contributed by NM,
     27-Nov-2007.) $)
  fconst5 $p |- ( ( F Fn A /\ A =/= (/) ) -> ( F = ( A X. { B } ) <->
                 ran F = { B } ) ) $=
    ( wfn c0 wne wa csn cxp wceq crn wi eqeq2d syl5ib adantl cvv adantrd adantr
    rneq wb rnxp wcel wf wfo df-fo fof sylbir fconst2g expd wn wrel fnrel snprc
    relrn0 biimprd eqeq2 xpeq2 xp0 syl6eq 3imtr4d ex sylbi syl5 pm2.61i impbid
    ) CADZAEFZGZCABHZIZJZCKZVIJZVGVKVMLVFVKVLVJKZJVGVMCVJSVGVNVIVLAVIUAMNOBPUBZ
    VHVMVKLZLVOVFVPVGVOVFVMVKVFVMGZAVICUCZVOVKVQAVICUDVRAVICUEAVICUFUGABPCUHNUI
    QVOUJZVFVPVGVFCUKZVSVPACULVSVIEJZVTVPLBUMWAVTVPWAVTGVLEJZCEJZVMVKVTWBWCLWAV
    TWCWBCUNUOOWAVMWBTVTVIEVLUPRWAVKWCTVTWAVJECWAVJAEIEVIEAUQAURUSMRUTVAVBVCQVD
    VE $.

  ${
    $d F x $.  $d A x $.  $d B x $.
    fnprb.1 $e |- A e. _V $.
    fnprb.2 $e |- B e. _V $.
    $( A function whose domain has at most two elements can be represented as a
       set of at most two ordered pairs.  (Contributed by FL, 26-Jun-2011.)
       (Proof shortened by Scott Fenton, 12-Oct-2017.)  Revised to eliminate
       unnecessary antecedent ` A =/= B ` .  (Revised by NM, 29-Dec-2018.) $)
    fnprb $p |- ( F Fn { A , B }
        <-> F = { <. A , ( F ` A ) >. , <. B , ( F ` B ) >. } ) $=
      ( vx cpr wfn cfv cop wceq wb csn dfsn2 a1i fveq2 wa cdm fvex adantl fnsnb
      fneq2i eqeq2i 3bitr3i preq2 fneq2d opeq12d preq2d eqeq2d 3bitr3d wne wral
      id cv fndm dmprop syl6eqr wcel eleq2d wo elpr fvpr1 adantr eqcomd eqeq12d
      vex syl5ibrcom fvpr2 jaod syl5bi sylbid ralrimiv wfun fnfun funpr eqfunfv
      syl2anr mpbir2and df-fn sylanbrc fneq1 biimprd mpan9 impbida pm2.61ine )
      CABGZHZCAACIZJZBBCIZJZGZKZLABABKZCAAGZHZCWIWIGZKZWGWMWPWRLWNCAMZHCWIMZKWP
      WRACDUAWSWOCANUBWTWQCWINUCUDOWNWOWFCABAUEUFWNWQWLCWNWIWKWIWNABWHWJWNUMABC
      PUGUHUIUJABUKZWGWMXAWGQZWMCRZWLRZKZFUNZCIZXFWLIZKZFXCULZWGXEXAWGXCWFXDWFC
      UOZAWHBWJACSZBCSZUPZUQTXBXIFXCXBXFXCURXFWFURZXIXBXCWFXFWGXCWFKXAXKTUSXOXF
      AKZXFBKZUTXBXIXFABFVFVAXBXPXIXQXBXIXPWHAWLIZKXBXRWHXAXRWHKWGABWHWJDXLVBVC
      VDXPXGWHXHXRXFACPXFAWLPVEVGXBXIXQWJBWLIZKXBXSWJXAXSWJKWGABWHWJEXMVHVCVDXQ
      XGWJXHXSXFBCPXFBWLPVEVGVIVJVKVLWGCVMWLVMZWMXEXJQLXAWFCVNABWHWJDEXLXMVOZFC
      WLVPVQVRXAWLWFHZWMWGXAXTXDWFKZYBYAYCXAXNOWLWFVSVTWMWGYBWFCWLWAWBWCWDWE $.
  $}

  ${
    $d F x $.  $d I x $.  $d J x $.
    fnprOLD.1 $e |- I e. _V $.
    fnprOLD.2 $e |- J e. _V $.
    $( Obsolete version of ~ fnprb as of 29-Dec-2018.  Representation as a set
       of pairs of a function whose domain has two distinct elements.
       (Contributed by FL, 26-Jun-2011.)  (Proof shortened by Scott Fenton,
       12-Oct-2017.)  (Revised by NM, 10-Dec-2017.)
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    fnprOLD $p |- ( I =/= J -> ( F Fn { I , J } <->
       F = { <. I , ( F ` I ) >. , <. J , ( F ` J ) >. } ) ) $=
      ( vx cpr wfn cfv cop wceq wa fvex adantl wcel adantr eqcomd fveq2 eqeq12d
      cdm wne cv wral fndm dmprop syl6eqr eleq2d wo elpr fvpr1 syl5ibrcom fvpr2
      jaod syl5bi sylbid ralrimiv wfun wb fnfun funpr eqfunfv syl2anr mpbir2and
      vex a1i df-fn sylanbrc fneq1 biimprd mpan9 impbida ) BCUAZABCGZHZABBAIZJC
      CAIZJGZKZVLVNLZVRATZVQTZKZFUBZAIZWCVQIZKZFVTUCZVNWBVLVNVTVMWAVMAUDZBVOCVP
      BAMZCAMZUEZUFNVSWFFVTVSWCVTOWCVMOZWFVSVTVMWCVNVTVMKVLWHNUGWLWCBKZWCCKZUHV
      SWFWCBCFVDUIVSWMWFWNVSWFWMVOBVQIZKVSWOVOVLWOVOKVNBCVOVPDWIUJPQWMWDVOWEWOW
      CBARWCBVQRSUKVSWFWNVPCVQIZKVSWPVPVLWPVPKVNBCVOVPEWJULPQWNWDVPWEWPWCCARWCC
      VQRSUKUMUNUOUPVNAUQVQUQZVRWBWGLURVLVMAUSBCVOVPDEWIWJUTZFAVQVAVBVCVLVQVMHZ
      VRVNVLWQWAVMKZWSWRWTVLWKVEVQVMVFVGVRVNWSVMAVQVHVIVJVK $.
  $}

  ${
    $d F a $.  $d V a $.  $d A a $.  $d B a $.  $d Z a $.
    $( Two ways to express restriction of a support set.  (Contributed by
       Stefan O'Rear, 5-Feb-2015.)  Obsolete version of ~ fnsuppres as of
       28-May-2019.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    fnsuppresOLD $p |- ( ( F Fn ( A u. B ) /\ ( A i^i B ) = (/) /\ Z e. V ) ->
        ( ( `' F "" ( _V \ { Z } ) ) C_ A <-> ( F |` B ) = ( B X. { Z } ) ) ) $=
      ( va cun wfn wceq wcel cfv crab wss wral wa wn wb a1i syl5bb syl2anc cres
      cin w3a wne csn cxp ccnv cvv cdif cima unss ssrab2 biantrur rabun2 sseq1i
      c0 cv 3bitr4ri wi rabss fvres adantl fvconst2g 3ad2antl3 eqeq12d id simp2
      nne minel syl2anr mtt syl 3bitr2rd ralbidva fnniniseg2OLD 3ad2ant1 sseq1d
      simp1 ssun2 fnssres fnconstg 3ad2ant3 eqfnfv 3bitr4d ) CABGZHZABUBUPIZEDJ
      ZUCZFUQZCKZEUDZFWELZAMZWJCBUAZKZWJBEUEZUFZKZIZFBNZCUGUHWQUIUJZAMWOWRIZWNW
      LFBLZAMZWIXAWLFALZAMZXEOXFXDGZAMXEWNXFXDAUKXGXEWLFAULUMWMXHAWLFABUNUOURXE
      WLWJAJZUSZFBNWIXAWLFBAUTWIXJWTFBWIWJBJZOZWTWKEIZWLPZXJXLWPWKWSEXKWPWKIWIW
      JBCVAVBWHWFXKWSEIWGBEWJDVCVDVEXNXMQXLWKEVHRXLXIPZXNXJQXKXKWGXOWIXKVFWFWGW
      HVGWJBAVIVJXIWLVKVLVMVNSSWIXBWMAWFWGXBWMIWHFWEECVOVPVQWIWOBHZWRBHZXCXAQWI
      WFBWEMZXPWFWGWHVRXRWIBAVSRWEBCVTTWHWFXQWGBEDWAWBFBWOWRWCTWD $.

    $( The support of a function is empty iff it is identically zero.
       (Contributed by Stefan O'Rear, 22-Mar-2015.)  Obsolete version of
       ~ fnsuppeq0 as of 28-May-2019.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    fnsuppeq0OLD $p |- ( ( F Fn A /\ Z e. V ) ->
        ( ( `' F "" ( _V \ { Z } ) ) = (/) <-> F = ( A X. { Z } ) ) ) $=
      ( wfn wcel wa ccnv cvv csn cdif cima c0 wceq cres cxp wss cun cin adantr
      ss0b wb un0 uncom eqtr3i fneq2i biimpi incom in0 eqtri simpr fnsuppresOLD
      a1i syl3anc syl5bbr fnresdm eqeq1d bitrd ) BAEZDCFZGZBHIDJZKLZMNZBAOZAVBP
      ZNZBVFNVDVCMQZVAVGVCUAVABMARZEZMASZMNZUTVHVGUBUSVJUTUSVJAVIBAMRAVIAUCAMUD
      UEUFUGTVLVAVKAMSMMAUHAUIUJUMUSUTUKMABCDULUNUOVAVEBVFUSVEBNUTABUPTUQUR $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z F $.
    $( A constant function expressed in terms of its functionality, domain, and
       value.  See also ~ fconst2 .  (Contributed by NM, 27-Aug-2004.)  (Proof
       shortened by OpenAI, 25-Mar-2020.) $)
    fconstfv $p |- ( F : A --> { B } <->
                   ( F Fn A /\ A. x e. A ( F ` x ) = B ) ) $=
      ( csn wf wfn cv cfv wcel wral wceq ffnfv fvex elsnc ralbii anbi2i bitri
      wa ) BCEZDFDBGZAHZDIZTJZABKZSUAUCCLZABKZSABTDMUEUGUAUDUFABUCCUBDNOPQR $.

    $( A constant function expressed in terms of its functionality, domain, and
       value.  See also ~ fconst2 .  (Contributed by NM, 27-Aug-2004.)
       Obsolete version of ~ fconstfv as of 25-Mar-2020.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    fconstfvOLD $p |- ( F : A --> { B } <->
                   ( F Fn A /\ A. x e. A ( F ` x ) = B ) ) $=
      ( vy vz csn wf wfn cv cfv wceq wral wa syl6bb wcel wrex eqeq1d sylan9bbr
      c0 ffn fvconst ralrimiva jca wi fneq2 fn0 feq1 mpbiri syl6bi feq2 sylibrd
      adantrd wne crn fvelrnb fveq2 rspccva rexbidva r19.9rzv bicomd elsn eqcom
      f0 bitr2i eqrdv an32s exp31 imdistand wfo df-fo fof sylbir syl6 pm2.61ine
      impbii ) BCGZDHZDBIZAJZDKZCLZABMZNZVRVSWCBVQDUAVRWBABBCVTDUBUCUDWDVRUEBTB
      TLZVSVRWCWEVSTVQDHZVRWEVSDTLZWFWEVSDTIWGBTDUFDUGOWGWFTVQTHVQVDTVQDTUHUIUJ
      BTVQDUKULUMBTUNZWDVSDUOZVQLZNZVRWHVSWCWJWHVSWCWJWHWCVSWJWHWCNZVSNZEWIVQWM
      EJZWIPZCWNLZWNVQPZVSWOFJZDKZWNLZFBQZWLWPFBWNDUPWCXAWPFBQZWHWPWCWTWPFBWCWR
      BPNWSCWNWBWSCLAWRBVTWRLWAWSCVTWRDUQRURRUSWHWPXBWPFBUTVASSWQWNCLWPECVBWNCV
      CVEOVFVGVHVIWKBVQDVJVRBVQDVKBVQDVLVMVNVOVP $.

    $( Two ways to express a constant function.  (Contributed by NM,
       15-Mar-2007.) $)
    fconst3 $p |- ( F : A --> { B } <->
                  ( F Fn A /\ A C_ ( `' F "" { B } ) ) ) $=
      ( vx csn wf wfn cv cfv wceq wral wa ccnv cima wss fconstfv wfun cdm fnfun
      wb fndm eqimss2 syl funconstss syl2anc pm5.32i bitri ) ABEZCFCAGZDHCIBJDA
      KZLUIACMUHNOZLDABCPUIUJUKUICQACRZOZUJUKTACSUIULAJUMACUAAULUBUCDABCUDUEUFU
      G $.
  $}

  $( Two ways to express a constant function.  (Contributed by NM,
     8-Mar-2007.) $)
  fconst4 $p |- ( F : A --> { B } <->
                ( F Fn A /\ ( `' F "" { B } ) = A ) ) $=
    ( csn wf wfn ccnv cima wss wa wceq fconst3 cnvimass fndm syl5sseq biantrurd
    cdm eqss syl6bbr pm5.32i bitri ) ABDZCECAFZACGUBHZIZJUCUDAKZJABCLUCUEUFUCUE
    UDAIZUEJUFUCUGUEUCCQUDACUBMACNOPUDARSTUA $.

  ${
    $d x y A $.  $d x y B $.
    $( The restriction of a function to a set exists.  Compare Proposition 6.17
       of [TakeutiZaring] p. 28.  (Contributed by NM, 7-Apr-1995.)  (Revised by
       Mario Carneiro, 22-Jun-2013.) $)
    resfunexg $p |- ( ( Fun A /\ B e. C ) -> ( A |` B ) e. _V ) $=
      ( vx wfun wcel wa cres cdm cv cfv cop cmpt cima cvv crn wceq funres sylib
      wfn adantr funfn dffn5 fvex fnasrn syl6eq opex eqid dmmpti imaeq2i eqtr3i
      imadmrn syl6eqr funmpt dmresexg adantl funimaexg sylancr eqeltrd ) AEZBCF
      ZGZABHZDVCIZDJZVEVCKZLZMZVDNZOVBVCVHPZVIVBVCDVDVFMZVJVBVCVDTZVCVKQVBVCEZV
      LUTVMVABARUAVCUBSDVDVCUCSDVDVFVEVCUDUEUFVHVHIZNVIVJVNVDVHDVDVGVHVEVFUGVHU
      HUIUJVHULUKUMVBVHEVDOFZVIOFDVDVGUNVAVOUTABCUOUPVHVDOUQURUS $.
  $}

  ${
    resiexd.b $e |- ( ph -> B e. V ) $.
    $( The restriction of the identity relation to a set is a set.
       (Contributed by AV, 15-Feb-2020.) $)
    resiexd $p |- ( ph -> ( _I |` B ) e. _V ) $=
      ( cid wfun wcel cres cvv funi resfunexg sylancr ) AEFBCGEBHIGJDEBCKL $.
  $}

  $( If the domain of a function is a set, the function is a set.  Theorem
     6.16(1) of [TakeutiZaring] p. 28.  This theorem is derived using the Axiom
     of Replacement in the form of ~ resfunexg .  See ~ fnexALT for alternate
     proof.  (Contributed by NM, 14-Aug-1994.)  (Proof shortened by Andrew
     Salmon, 17-Sep-2011.) $)
  fnex $p |- ( ( F Fn A /\ A e. B ) -> F e. _V ) $=
    ( wfn wcel wrel cdm cres cvv fnrel adantr wfun wceq eleq1a impcom resfunexg
    wa df-fn sylan2 anassrs sylanb resdm eleq1d biimpa syl2anc ) CADZABEZQCFZCC
    GZHZIEZCIEZUFUHUGACJKUFCLZUIAMZQUGUKCARUMUNUGUKUNUGQUMUIBEZUKUGUNUOABUINOCU
    IBPSTUAUHUKULUHUJCICUBUCUDUE $.

  $( If the domain of a function exists, so the function.  Part of Theorem
     4.15(v) of [Monk1] p. 46.  This theorem is derived using the Axiom of
     Replacement in the form of ~ fnex .  (Note:  Any resemblance between
     F.U.N.E.X. and ""Have You Any Eggs"" is purely a coincidence originated by
     Swedish chefs.)  (Contributed by NM, 11-Nov-1995.) $)
  funex $p |- ( ( Fun F /\ dom F e. B ) -> F e. _V ) $=
    ( wfun cdm wfn wcel cvv funfn fnex sylanb ) BCBBDZEKAFBGFBHKABIJ $.

  ${
    $d x y A $.
    opabex.1 $e |- A e. _V $.
    opabex.2 $e |- ( x e. A -> E* y ph ) $.
    $( Existence of a function expressed as class of ordered pairs.
       (Contributed by NM, 21-Jul-1996.) $)
    opabex $p |- { <. x , y >. | ( x e. A /\ ph ) } e. _V $=
      ( cv wcel wa copab wfun cdm cvv wmo funopab moanimv mpbir mpgbir dmopabss
      wi ssexi funex mp2an ) BGDHZAIZBCJZKZUFLZMHUFMHUGUECNZBUEBCOUIUDACNTFUDAC
      PQRUHDEABCDSUAMUFUBUC $.
  $}

  ${
    $d x y A $.  $d y B $.
    $( If the domain of a function given by maps-to notation is a set, the
       function is a set.  (Contributed by FL, 6-Jun-2011.)  (Revised by Mario
       Carneiro, 31-Aug-2015.) $)
    mptexg $p |- ( A e. V -> ( x e. A |-> B ) e. _V ) $=
      ( wcel cmpt wfun cdm cvv funmpt wss eqid dmmptss ssexg mpan funex sylancr
      ) BDEZABCFZGSHZIEZSIEABCJTBKRUAABCSSLMTBDNOISPQ $.
  $}

  ${
    $d x y A $.
    mptex.1 $e |- A e. _V $.
    $( If the domain of a function given by maps-to notation is a set, the
       function is a set.  (Contributed by NM, 22-Apr-2005.)  (Revised by Mario
       Carneiro, 20-Dec-2013.) $)
    mptex $p |- ( x e. A |-> B ) e. _V $=
      ( cvv wcel cmpt mptexg ax-mp ) BEFABCGEFDABCEHI $.
  $}

  ${
    $d x y A $.  $d x ph $.
    mptrabex.1 $e |- A e. V $.
    $( If the domain of a function given by maps-to notation is a class
       abstraction based on a set, the function is a set.  (Contributed by AV,
       16-Jul-2019.) $)
    mptrabex $p |- ( x e. { y e. A | ph } |-> B ) e. _V $=
      ( crab elexi rabex mptex ) BACDHEACDDFGIJK $.
  $}

  $( If the domain of a mapping is a set, the function is a set.  (Contributed
     by NM, 3-Oct-1999.) $)
  fex $p |- ( ( F : A --> B /\ A e. C ) -> F e. _V ) $=
    ( wf wfn wcel cvv ffn fnex sylan ) ABDEDAFACGDHGABDIACDJK $.

  ${
    $d f x y z A $.  $d f y z B $.
    eufnfv.1 $e |- A e. _V $.
    eufnfv.2 $e |- B e. _V $.
    $( A function is uniquely determined by its values.  (Contributed by NM,
       31-Aug-2011.) $)
    eufnfv $p |- E! f ( f Fn A /\ A. x e. A ( f ` x ) = B ) $=
      ( vz cv wfn cfv wceq wral wa weu wb wal wex cmpt mptex cvv eqeq2 pm4.71ri
      bibi2d albidv spcev eqid fnmpti fneq1 mpbiri dffn5 eqeq1 sylbi wcel rgenw
      fvex mpteqb ax-mp syl6bb pm5.32i bitr2i mpg df-eu mpbir ) DHZBIZAHZVDJZCK
      ABLZMZDNVIVDGHZKZOZDPZGQZVIVDABCRZKZOZVNDVMVQDPGVOABCESVJVOKZVLVQDVRVKVPV
      IVJVOVDUAUCUDUEVPVEVPMVIVPVEVPVEVOBIABCVOFVOUFUGBVDVOUHUIUBVEVPVHVEVPABVG
      RZVOKZVHVEVDVSKVPVTOABVDUJVDVSVOUKULVGTUMZABLVTVHOWAABVFVDUOUNABVGCTUPUQU
      RUSUTVAVIDGVBVC $.
  $}

  $( A function's value in a preimage belongs to the image.  (Contributed by
     NM, 23-Sep-2003.) $)
  funfvima $p |- ( ( Fun F /\ B e. dom F ) -> ( B e. A ->
                 ( F ` B ) e. ( F "" A ) ) ) $=
    ( wfun cdm wcel wa cfv cima cres dmres elin2 crn funres fvelrn sylan eleq1d
    wi fvres df-ima eleq2i syl6rbbr syl5ibrcom syl5bir expd com12 impd pm2.43b
    ex ) CDZBCEZFZGBAFZBCHZCAIZFZUMUJULUMUPRZUJUMULUQRUJUMULUQUMULGBCAJZEZFZUJU
    QBAUKUSCAKLUJUTUQUJUTGUPUMBURHZURMZFZUJURDUTVCACNBUROPUMVCUNVBFUPUMVAUNVBBA
    CSQUOVBUNCATUAUBUCUIUDUEUFUGUH $.

  $( A function's value in an included preimage belongs to the image.
     (Contributed by NM, 3-Feb-1997.) $)
  funfvima2 $p |- ( ( Fun F /\ A C_ dom F ) -> ( B e. A ->
                  ( F ` B ) e. ( F "" A ) ) ) $=
    ( wfun cdm wss wcel cfv cima wi ssel funfvima ex com23 a2d syl5 imp ) CDZAC
    EZFZBAGZBCHCAIGZJZTUABSGZJRUCASBKRUAUDUBRUDUAUBRUDUCABCLMNOPQ $.

  ${
    $d x A $.  $d x F $.  $d x G $.
    $( A class including a function contains the function's value in the image
       of the singleton of the argument.  (Contributed by NM, 23-Mar-2004.) $)
    funfvima3 $p |- ( ( Fun F /\ F C_ G ) -> ( A e. dom F ->
                    ( F ` A ) e. ( G "" { A } ) ) ) $=
      ( vx wss wfun cdm wcel cfv csn cima wi wa cop funfvop ssel syl5 imp wb cv
      wceq sneq imaeq2d eleq2d opeq1 eleq1d vex elimasn vtoclbg ad2antll mpbird
      fvex exp32 impcom ) BCEZBFZABGZHZABIZCAJZKZHZLUOUPURVBUOUPURMZMVBAUSNZCHZ
      UOVCVEVCVDBHUOVEABOBCVDPQRURVBVESUOUPUSCDTZJZKZHVFUSNZCHVBVEDAUQVFAUAZVHV
      AUSVJVGUTCVFAUBUCUDVJVIVDCVFAUSUEUFCVFUSDUGABULUHUIUJUKUMUN $.
  $}

  $( The function value of an operand in a set is contained in the image of
     that set, using the ` Fn ` abbreviation.  (Contributed by Stefan O'Rear,
     10-Mar-2015.) $)
  fnfvima $p |- ( ( F Fn A /\ S C_ A /\ X e. S ) -> ( F ` X ) e. ( F "" S ) ) $=
    ( wfn wss wcel w3a wfun cdm wa cima fnfun 3ad2ant1 simp2 wceq fndm sseqtr4d
    cfv jca simp3 funfvima2 sylc ) CAEZBAFZDBGZHZCIZBCJZFZKUFDCSCBLGUGUHUJUDUEU
    HUFACMNUGBAUIUDUEUFOUDUEUIAPUFACQNRTUDUEUFUABDCUBUC $.

  ${
    $d ph y $.  $d ps x $.  $d F x y $.  $d B x y $.  $d A x y $.
    rexima.x $e |- ( x = ( F ` y ) -> ( ph <-> ps ) ) $.
    $( Existential quantification under an image in terms of the base set.
       (Contributed by Stefan O'Rear, 21-Jan-2015.) $)
    rexima $p |- ( ( F Fn A /\ B C_ A ) ->
        ( E. x e. ( F "" B ) ph <-> E. y e. B ps ) ) $=
      ( wfn wss wa cv cfv cima cvv wcel fvex a1i wceq wrex rexbii syl6bb adantl
      fvelimab eqcom wb rexxfr2d ) GEIFEJKZABCDDLZGMZGFNZFOUJOPUHUIFPKUIGQRUHCL
      ZUKPUJULSZDFTULUJSZDFTDEFULGUDUMUNDFUJULUEUAUBUNABUFUHHUCUG $.

    $( Universal quantification under an image in terms of the base set.
       (Contributed by Stefan O'Rear, 21-Jan-2015.) $)
    ralima $p |- ( ( F Fn A /\ B C_ A ) ->
        ( A. x e. ( F "" B ) ph <-> A. y e. B ps ) ) $=
      ( wfn wss wa cv cfv cima cvv wcel fvex a1i wceq wrex rexbii syl6bb adantl
      fvelimab eqcom wb ralxfr2d ) GEIFEJKZABCDDLZGMZGFNZFOUJOPUHUIFPKUIGQRUHCL
      ZUKPUJULSZDFTULUJSZDFTDEFULGUDUMUNDFUJULUEUAUBUNABUFUHHUCUG $.
  $}

  ${
    $d A u x y $.  $d R u x y $.
    $( TODO:  This is the same as ~ issref (which has a much longer proof).
       Should we replace ~ issref with this one? - NM 9-May-2016.

       Two ways to state a relation is reflexive.  (Adapted from Tarski.)
       (Contributed by FL, 15-Jan-2012.)  (Proof shortened by Mario Carneiro,
       3-Nov-2015.)  (Proof modification is discouraged.) $)
    idref $p |- ( ( _I |` A ) C_ R <-> A. x e. A x R x ) $=
      ( cv cop wcel wral cmpt crn wss wbr cid cres wf eqid fmpt wfn opex fnmpti
      df-f mpbiran bitri df-br ralbii mptresid fnasrn eqtr3i sseq1i 3bitr4ri
      vex ) ADZUKEZCFZABGZABULHZIZCJZUKUKCKZABGLBMZCJUNBCUONZUQABCULUOUOOZPUTUO
      BQUQABULUOUKUKRVASBCUOTUAUBURUMABUKUKCUCUDUSUPCABUKHUSUPABUEABUKAUJUFUGUH
      UI $.
  $}

  ${
    $d x y F $.
    $( Upper bound for the class of values of a class.  (Contributed by NM,
       9-Nov-1995.) $)
    fvclss $p |- { y | E. x y = ( F ` x ) } C_ ( ran F u. { (/) } ) $=
      ( cv cfv wceq wex cab crn wcel c0 csn wo cun wn wne eqcom tz6.12i syl6ibr
      wbr syl5bi eximdv vex elrn com12 necon1bd elsn orrd ss2abi df-un sseqtr4i
      ) BDZADZCEZFZAGZBHULCIZJZULKLZJZMZBHUQUSNUPVABUPURUTUPUROULKFUTUPURULKULK
      PZUPURVBUPUMULCTZAGURVBUOVCAUOUNULFVBVCULUNQUMULCRUAUBAULCBUCUDSUEUFBKUGS
      UHUIBUQUSUJUK $.
  $}

  ${
    $d w y z B $.  $d w x y z A $.
    elabrex.1 $e |- B e. _V $.
    $( Elementhood in an image set.  (Contributed by Mario Carneiro,
       14-Jan-2014.) $)
    elabrex $p |- ( x e. A -> B e. { y | E. x e. A y = B } ) $=
      ( vz cv wcel csb wceq wrex cab wtru tru csbeq1a equcoms a1tru 2thd rspcev
      mpan2 eqeq1 rexbidv elab sylibr nfv nfcsb1v nfeq2 eqeq2d cbvrex syl6eleqr
      abbii ) AGZCHZDBGZAFGZDIZJZFCKZBLZUNDJZACKZBLUMDUPJZFCKZDUSHUMMVCNVBMFULC
      UOULJZVBMVBAFAUODOZPVDQRSTURVCBDEUTUQVBFCUNDUPUAUBUCUDVAURBUTUQAFCUTFUEAU
      NUPAUODUFUGULUOJDUPUNVEUHUIUKUJ $.
  $}

  ${
    $d A y z $.  $d B y z $.  $d C w $.  $d D y $.  $d w x y $.  $d w z y $.
    abrexco.1 $e |- B e. _V $.
    abrexco.2 $e |- ( y = B -> C = D ) $.
    $( Composition of two image maps ` C ( y ) ` and ` B ( w ) ` .
       (Contributed by NM, 27-May-2013.) $)
    abrexco $p |- { x | E. y e. { z | E. w e. A z = B } x = C } =
        { x | E. w e. A x = D } $=
      ( cv wceq wrex cab wa wex wcel df-rex bitr4i bitri vex eqeq1 rexbidv elab
      anbi1i r19.41v exbii rexcom4 eqeq2d ceqsexv rexbii abbii ) AKZGLZBCKZFLZD
      EMZCNZMZUMHLZDEMZAUSBKZFLZUNOZBPZDEMZVAUSVDDEMZBPZVFUSVBURQZUNOZBPVHUNBUR
      RVJVGBVJVCDEMZUNOVGVIVKUNUQVKCVBBUAUOVBLUPVCDEUOVBFUBUCUDUEVCUNDEUFSUGTVD
      DBEUHSVEUTDEUNUTBFIVCGHUMJUIUJUKTUL $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d y z C $.
    $( The image of an indexed union is the indexed union of the images.
       (Contributed by Mario Carneiro, 18-Jun-2014.) $)
    imaiun $p |- ( A "" U_ x e. B C ) = U_ x e. B ( A "" C ) $=
      ( vy vz ciun cima cv wcel cop wa wex wrex rexcom4 vex elima3 rexbii eliun
      anbi1i r19.41v bitr4i exbii 3bitr4ri 3bitr4i eqriv ) EBACDGZHZACBDHZGZFIZ
      UGJZUKEIZKBJZLZFMZUMUIJZACNZUMUHJUMUJJUKDJZUNLZFMZACNUTACNZFMURUPUTAFCOUQ
      VAACFUMBDEPZQRUOVBFUOUSACNZUNLVBULVDUNAUKCDSTUSUNACUAUBUCUDFUMBUGVCQAUMCU
      ISUEUF $.
  $}

  ${
    $d x y z A $.  $d x y z B $.
    $( The image of a union is the indexed union of the images.  Theorem 3K(a)
       of [Enderton] p. 50.  (Contributed by NM, 9-Aug-2004.)  (Proof shortened
       by Mario Carneiro, 18-Jun-2014.) $)
    imauni $p |- ( A "" U. B ) = U_ x e. B ( A "" x ) $=
      ( cuni cima cv ciun uniiun imaeq2i imaiun eqtri ) BCDZEBACAFZGZEACBMEGLNB
      ACHIABCMJK $.
  $}

  ${
    $d w x y z A $.  $d w x y z F $.
    $( The indexed union of a function's values is the union of its range.
       Compare Definition 5.4 of [Monk1] p. 50.  (Contributed by NM,
       27-Sep-2004.) $)
    fniunfv $p |- ( F Fn A -> U_ x e. A ( F ` x ) = U. ran F ) $=
      ( vy wfn crn cuni cv cfv wceq wrex cab ciun fnrnfv unieqd dfiun2 syl6reqr
      fvex ) CBEZCFZGDHAHZCIZJABKDLZGABUBMSTUCADBCNOADBUBUACRPQ $.

    $( The indexed union of a function's values is the union of its image under
       the index class.

       Note:  This theorem depends on the fact that our function value is the
       empty set outside of its domain.  If the antecedent is changed to
       ` F Fn A ` , the theorem can be proved without this dependency.
       (Contributed by NM, 26-Mar-2006.)  (Proof shortened by Mario Carneiro,
       31-Aug-2015.) $)
    funiunfv $p |- ( Fun F -> U_ x e. A ( F ` x ) = U. ( F "" A ) ) $=
      ( wfun cres cdm cv cfv ciun crn cuni cima wfn wceq syl eqtri wcel iuneq2i
      cun c0 funres funfn sylib fniunfv cdif undif2 wss cin dmres inss1 eqsstri
      ssequn1 mpbi iuneq1 ax-mp iunxun wn eldifn ndmfv iun0 uneq2i un0 3eqtr3ri
      fvres df-ima unieqi 3eqtr4g ) CDZACBEZFZAGZVIHZIZVIJZKZABVKCHZIZCBLZKVHVI
      VJMZVMVONVHVIDVSBCUAVIUBUCAVJVIUDOAVJBVJUEZSZVLIZABVLIZVMVQWABNWBWCNWAVJB
      SZBVJBUFVJBUGWDBNVJBCFZUHBCBUIBWEUJUKVJBULUMPAWABVLUNUOWBVMAVTVLIZSZVMAVJ
      VTVLUPWGVMTSVMWFTVMWFAVTTITAVTVLTVKVTQVKVJQUQVLTNVKBVJURVKVIUSORAVTUTPVAV
      MVBPPABVLVPVKBCVDRVCVRVNCBVEVFVG $.
  $}

  ${
    $d x z A $.  $d y z F $.  $d x y $.
    funiunfvf.1 $e |- F/_ x F $.
    $( The indexed union of a function's values is the union of its image under
       the index class.  This version of ~ funiunfv uses a bound-variable
       hypothesis in place of a distinct variable condition.  (Contributed by
       NM, 26-Mar-2006.)  (Revised by David Abernethy, 15-Apr-2013.) $)
    funiunfvf $p |- ( Fun F -> U_ x e. A ( F ` x ) = U. ( F "" A ) ) $=
      ( vz wfun cv cfv ciun cima cuni nfcv nffv fveq2 cbviun funiunfv syl5eqr )
      CFABAGZCHZIEBEGZCHZICBJKEABUASATCDATLMESLTRCNOEBCPQ $.
  $}

  ${
    $d x A $.  $d x B $.  $d x F $.
    $( Membership in the union of an image of a function.  (Contributed by NM,
       28-Sep-2006.) $)
    eluniima $p |- ( Fun F ->
                   ( B e. U. ( F "" A ) <-> E. x e. A B e. ( F ` x ) ) ) $=
      ( cv cfv wcel wrex ciun wfun cima cuni eliun funiunfv eleq2d syl5rbbr ) C
      AEDFZGABHCABQIZGDJZCDBKLZGACBQMSRTCABDNOP $.
  $}

  ${
    $d x y A $.  $d x y F $.
    $( Membership in the union of the range of a function.  See ~ elunirnALT
       for a shorter proof which uses ~ ax-pow .  (Contributed by NM,
       24-Sep-2006.) $)
    elunirn $p |- ( Fun F ->
                        ( A e. U. ran F <-> E. x e. dom F A e. ( F ` x ) ) ) $=
      ( vy crn cuni wcel cv wa wex wfun cfv cdm wrex eluni wceq wfn funfn eleq2
      wb fvelrnb sylbi anbi2d r19.42v syl6bbr biimparc reximi syl6bi fvelrn a1d
      exlimdv ancld fvex eleq1 anbi12d spcev syl6 rexlimdva impbid syl5bb ) BCE
      ZFGBDHZGZVBVAGZIZDJZCKZBAHZCLZGZACMZNZDBVAOVGVFVLVGVEVLDVGVEVCVIVBPZIZAVK
      NZVLVGVEVCVMAVKNZIVOVGVDVPVCVGCVKQVDVPTCRAVKVBCUAUBUCVCVMAVKUDUEVNVJAVKVM
      VJVCVIVBBSUFUGUHUKVGVJVFAVKVGVHVKGIZVJVJVIVAGZIZVFVQVJVRVQVRVJVHCUIUJULVE
      VSDVIVHCUMVBVIPVCVJVDVRVBVIBSVBVIVAUNUOUPUQURUSUT $.
  $}

  ${
    $d x A $.  $d x F $.
    $( Alternate proof of ~ elunirn .  It is shorter but requires ~ ax-pow
       (through ~ eluniima , ~ funiunfv , ~ ndmfv ).  (Contributed by NM,
       24-Sep-2006.)  (Proof modification is discouraged.)
       (New usage is discouraged.) $)
    elunirnALT $p |- ( Fun F ->
                        ( A e. U. ran F <-> E. x e. dom F A e. ( F ` x ) ) ) $=
      ( crn cuni wcel cdm cima wfun cv cfv wrex imadmrn unieqi eluniima syl5bbr
      eleq2i ) BCDZEZFBCCGZHZEZFCIBAJCKFATLUBSBUARCMNQATBCOP $.
  $}

  ${
    $d x A $.  $d x I $.  $d x F $.
    $( Membership in a union of some function-defined family of sets.
       (Contributed by Stefan O'Rear, 30-Jan-2015.) $)
    fnunirn $p |- ( F Fn I -> ( A e. U. ran F <->
        E. x e. I A e. ( F ` x ) ) ) $=
      ( wfn crn cuni wcel cv cfv cdm wrex wfun fnfun elunirn fndm rexeqdv bitrd
      wb syl ) CDEZBCFGHZBAICJHZACKZLZUCADLUACMUBUESDCNABCOTUAUCAUDDDCPQR $.
  $}

  ${
    $d x y z A $.  $d z B $.  $d x y z F $.
    $( A one-to-one function in terms of function values.  Compare Theorem
       4.8(iv) of [Monk1] p. 43.  (Contributed by NM, 29-Oct-1996.) $)
    dff13 $p |- ( F : A -1-1-> B <-> ( F : A --> B /\
             A. x e. A A. y e. A ( ( F ` x ) = ( F ` y ) -> x = y ) ) ) $=
      ( vz cv wbr wal wa cfv wceq wi wral wb wcel vex breldm eleq2d bitri dff12
      wf1 wf wmo wfn ffn cdm fndm syl5ib anim12d pm4.71rd eqcom syl5bb bi2anan9
      fnbrfvb anandis pm5.32da bitr4d imbi1d impexp syl6bb albidv 19.21v 19.23v
      wex fvex eqvinc imbi1i bitr4i imbi2i 2albidv breq1 mo4 albii r2al 3bitr4g
      alrot3 syl pm5.32i ) CDEUBCDEUCZAGZFGZEHZAUDZFIZJVTWAEKZBGZEKZLZWAWGLZMZB
      CNACNZJAFCDEUAVTWEWLVTECUEZWEWLOCDEUFWMWCWGWBEHZJZWJMZFIZBIAIZWACPZWGCPZJ
      ZWKMZBIAIWEWLWMWQXBABWMWQXAWBWFLZWBWHLZJZWJMZMZFIZXBWMWPXGFWMWPXAXEJZWJMX
      GWMWOXIWJWMWOXAWOJXIWMWOXAWMWCWSWNWTWCWAEUGZPWMWSWAWBEAQFQZRWMXJCWACEUHZS
      UIWNWGXJPWMWTWGWBEBQXKRWMXJCWGXLSUIUJUKWMXAXEWOWMWSWTXEWOOWMWSJZXCWCWMWTJ
      ZXDWNXCWFWBLXMWCWBWFULCWAWBEUOUMXDWHWBLXNWNWBWHULCWGWBEUOUMUNUPUQURUSXAXE
      WJUTVAVBXHXAXFFIZMXBXAXFFVCXOWKXAXOXEFVEZWJMWKXEWJFVDWIXPWJFWFWHWAEVFVGVH
      VIVJTVAVKWEWPBIAIZFIWRWDXQFWCWNABWAWGWBEVLVMVNWPFABVQTWKABCCVOVPVRVST $.
  $}

  ${
    $d x y w v A $.  $d w v B $.  $d z w v F $.  $d x y z $.
    dff13f.1 $e |- F/_ x F $.
    dff13f.2 $e |- F/_ y F $.
    $( A one-to-one function in terms of function values.  Compare Theorem
       4.8(iv) of [Monk1] p. 43.  (Contributed by NM, 31-Jul-2003.) $)
    dff13f $p |- ( F : A -1-1-> B <-> ( F : A --> B /\
             A. x e. A A. y e. A ( ( F ` x ) = ( F ` y ) -> x = y ) ) ) $=
      ( vw vv cv cfv wceq weq wi wral wa nfcv nffv nfeq nfv wf dff13 nfim fveq2
      eqeq2d equequ2 imbi12d cbvral ralbii nfral eqeq1d equequ1 ralbidv anbi2i
      wf1 bitri ) CDEUOCDEUAZHJZEKZIJZEKZLZHIMZNZICOZHCOZPUQAJZEKZBJZEKZLZABMZN
      ZBCOZACOZPHICDEUBVFVOUQVFUSVJLZHBMZNZBCOZHCOVOVEVSHCVDVRIBCVBVCBBUSVABURE
      GBURQRBUTEGBUTQRSVCBTUCVRITIBMZVBVPVCVQVTVAVJUSUTVIEUDUEIBHUFUGUHUIVSVNHA
      CVRABCACQVPVQAAUSVJAUREFAURQRAVIEFAVIQRSVQATUCUJVNHTHAMZVRVMBCWAVPVKVQVLW
      AUSVHVJURVGEUDUKHABULUGUMUHUPUNUP $.
  $}

  ${
    $d A c d $.  $d C c d $.  $d D d $.  $d F c d $.
    $( If the values of a one-to-one function for two arguments are equal, the
       arguments themselves must be equal.  (Contributed by Alexander van der
       Vekens, 12-Nov-2017.) $)
    f1veqaeq $p |- ( ( F : A -1-1-> B /\ ( C e. A /\ D e. A ) ) ->
                     ( ( F ` C ) = ( F ` D ) -> C = D ) ) $=
      ( vc vd wf1 wcel wa cfv wceq wi wf cv weq wral dff13 fveq2 imbi12d eqeq1d
      eqeq1 eqeq2d eqeq2 rspc2v com12 adantl sylbi imp ) ABEHZCAIDAIJZCEKZDEKZL
      ZCDLZMZUJABENZFOZEKZGOZEKZLZFGPZMZGAQFAQZJUKUPMZFGABERVEVFUQUKVEUPVDUPULV
      ALZCUTLZMFGCDAAURCLZVBVGVCVHVIUSULVAURCESUAURCUTUBTUTDLZVGUNVHUOVJVAUMULU
      TDESUCUTDCUDTUEUFUGUHUI $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.  $d x D $.  $d y F $.
    f1mpt.1 $e |- F = ( x e. A |-> C ) $.
    f1mpt.2 $e |- ( x = y -> C = D ) $.
    $( Express injection for a mapping operation.  (Contributed by Mario
       Carneiro, 2-Jan-2017.) $)
    f1mpt $p |- ( F : A -1-1-> B <->
      ( A. x e. A C e. B /\ A. x e. A A. y e. A ( C = D -> x = y ) ) ) $=
      ( wf1 wf cv cfv wceq wi wral wa wcel wb ralbi nfmpt1 nfcxfr dff13f anbi1i
      cmpt nfcv fmpt eleq1d raaanv fvmpt2 fvmptg eqeqan12d an4s imbi1d ralimdva
      cbvralv ex syl6 ralimia syl sylbir sylan2b anidms pm5.32i 3bitr2i ) CDGJC
      DGKZALZGMZBLZGMZNZVGVINZOZBCPZACPZQEDRZACPZVOQVQEFNZVLOZBCPZACPZQABCDGAGA
      CEUEHACEUAUBBGUFUCVQVFVOACDEGHUGUDVQVOWAVQVOWASZVQVQFDRZBCPZWBVPWCABCVLEF
      DIUHUPVQWDQVPWCQZBCPZACPZWBVPWCABCUIWGVNVTSZACPWBWFWHACVGCRZWFVMVSSZBCPWH
      WIWEWJBCWIVICRZQZWEWJWLWEQVKVRVLWIVPWKWCVKVRSWIVPQWKWCQVHEVJFACEDGHUJAVIE
      FCDGIHUKULUMUNUQUOVMVSBCTURUSVNVTACTUTVAVBVCVDVE $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y F $.
    $( Equality of function values for a one-to-one function.  (Contributed by
       NM, 11-Feb-1997.) $)
    f1fveq $p |- ( ( F : A -1-1-> B /\ ( C e. A /\ D e. A ) ) ->
                 ( ( F ` C ) = ( F ` D ) <-> C = D ) ) $=
      ( wf1 wcel wa cfv wceq f1veqaeq fveq2 impbid1 ) ABEFCAGDAGHHCEIDEIJCDJABC
      DEKCDELM $.
  $}

  ${
    $d F z $.  $d A z $.  $d Y z $.  $d X z $.  $d B z $.
    $( Membership in the image of a 1-1 map.  (Contributed by Jeff Madsen,
       2-Sep-2009.) $)
    f1elima $p |- ( ( F : A -1-1-> B /\ X e. A /\ Y C_ A )
                                -> ( ( F ` X ) e. ( F "" Y ) <-> X e. Y ) ) $=
      ( vz wf1 wcel wss w3a cfv cima cv wceq wrex wb wfn wi wa anassrs fvelimab
      f1fn sylan 3adant2 ssel impac f1fveq ancom2s biimpd biimpcd sylan9 anasss
      eleq1 sylan2 rexlimdva 3impa eqid fveq2 eqeq1d rspcev mpan2 impbid1 bitrd
      ) ABCGZDAHZEAIZJZDCKZCELHZFMZCKZVHNZFEOZDEHZVDVFVIVMPZVEVDCAQVFVOABCUBFAE
      VHCUAUCUDVGVMVNVDVEVFVMVNRVDVESZVFSVLVNFEVPVFVJEHZVLVNRZVFVQSVPVJAHZVQSVR
      VFVQVSEAVJUEUFVPVSVQVRVPVSSVLVJDNZVQVNVDVEVSVLVTRVDVEVSSSVLVTVDVSVEVLVTPA
      BVJDCUGUHUITVTVQVNVJDEUMUJUKULUNTUOUPVNVHVHNZVMVHUQVLWAFDEVTVKVHVHVJDCURU
      SUTVAVBVC $.
  $}

  ${
    $d F a b $.  $d A a b $.  $d B a b $.  $d C a b $.  $d D a b $.
    $( Taking images under a one-to-one function preserves subsets.
       (Contributed by Stefan O'Rear, 30-Oct-2014.) $)
    f1imass $p |- ( ( F : A -1-1-> B /\ ( C C_ A /\ D C_ A ) ) ->
      ( ( F "" C ) C_ ( F "" D ) <-> C C_ D ) ) $=
      ( va wf1 wss wa cima cv wcel wi simplrl sseld wb 3expa f1elima syl3anc ex
      simplr simplll simpr simp1rl simp1rr 3imtr3d pm2.43d ssrdv imass2 impbid1
      cfv syld ) ABEGZCAHZDAHZIZIZECJZEDJZHZCDHZUQUTVAUQUTIZFCDVBFKZCLZVCDLZVBV
      DVCALZVDVEMZVBCAVCUMUNUOUTNOVBVFVGVBVFIZVCEUKZURLZVIUSLZVDVEVHURUSVIUQUTV
      FUAOVHUMVFUNVJVDPUMUPUTVFUBZVBVFUCZUQUTVFUNUNUOUMUTVFUDQABEVCCRSVHUMVFUOV
      KVEPVLVMUQUTVFUOUNUOUMUTVFUEQABEVCDRSUFTULUGUHTCDEUIUJ $.

    $( Taking images under a one-to-one function preserves equality.
       (Contributed by Stefan O'Rear, 30-Oct-2014.) $)
    f1imaeq $p |- ( ( F : A -1-1-> B /\ ( C C_ A /\ D C_ A ) ) ->
      ( ( F "" C ) = ( F "" D ) <-> C = D ) ) $=
      ( wf1 wss wa cima wceq f1imass wb ancom2s anbi12d eqss 3bitr4g ) ABEFZCAG
      ZDAGZHHZECIZEDIZGZUBUAGZHCDGZDCGZHUAUBJCDJTUCUEUDUFABCDEKQSRUDUFLABDCEKMN
      UAUBOCDOP $.

    $( Taking images under a one-to-one function preserves proper subsets.
       (Contributed by Stefan O'Rear, 30-Oct-2014.) $)
    f1imapss $p |- ( ( F : A -1-1-> B /\ ( C C_ A /\ D C_ A ) ) ->
      ( ( F "" C ) C. ( F "" D ) <-> C C. D ) ) $=
      ( wf1 wss wa cima wceq wpss f1imass f1imaeq notbid anbi12d dfpss2 3bitr4g
      wn ) ABEFCAGDAGHHZECIZEDIZGZTUAJZRZHCDGZCDJZRZHTUAKCDKSUBUEUDUGABCDELSUCU
      FABCDEMNOTUAPCDPQ $.
  $}

  ${
    f1dom3fv3dif.v $e |- ( ph -> ( A e. X /\ B e. Y /\ C e. Z ) ) $.
    f1dom3fv3dif.n $e |- ( ph -> ( A =/= B /\ A =/= C /\ B =/= C ) ) $.
    f1dom3fv3dif.f $e |- ( ph -> F : { A , B , C } -1-1-> R ) $.
    $( The function values for a 1-1 function from a set with three different
       elements are different.  (Contributed by AV, 20-Mar-2019.) $)
    f1dom3fv3dif $p |- ( ph -> ( ( F ` A ) =/= ( F ` B )
                   /\ ( F ` A ) =/= ( F ` C ) /\ ( F ` B ) =/= ( F ` C ) ) ) $=
      ( cfv wne wcel wceq wb syl mpbird f1fveq simp1d ctp wf1 w3o 3mix1d 3mix2d
      eqidd eltpg simp2d syl12anc necon3bid simp3d tpid3g 3jca ) ABFMZCFMZNZUOD
      FMZNZUPURNZAUQBCNZAVABDNZCDNZKUAAUOUPBCABCDUBZEFUCZBVDOZCVDOZUOUPPBCPZQLA
      VFBBPZVHBDPZUDZAVIVHVJABUGUEABGOZVFVKQAVLCHOZDIOZJUABBCDGUHRSZAVGCBPZCCPZ
      CDPZUDZAVQVPVRACUGUFAVMVGVSQAVLVMVNJUICBCDHUHRSZVDEBCFTUJUKSAUSVBAVAVBVCK
      UIAUOURBDAVEVFDVDOZUOURPVJQLVOAVNWAAVLVMVNJULDIBCUMRZVDEBDFTUJUKSAUTVCAVA
      VBVCKULAUPURCDAVEVGWAUPURPVRQLVTWBVDECDFTUJUKSUN $.

    $d A x y z $.  $d B x y z $.  $d C x y z $.  $d F x y z $.  $d R x y z $.
    $( The range of a 1-1 function from a set with three different elements has
       (at least) three different elements.  (Contributed by AV,
       20-Mar-2019.) $)
    f1dom3el3dif $p |- ( ph -> E. x e. R E. y e. R E. z e. R
                               ( x =/= y /\ x =/= z /\ y =/= z ) ) $=
      ( wcel w3a wne wceq syl cfv cv wrex ctp wf1 wf wi f1f wa simpr w3o 3mix1d
      eqidd wb simp1d mpbird adantr ffvelrnd 3mix2d simp2d simp3d tpid3g expcom
      eltpg mpcom f1dom3fv3dif neeq1 3anbi12d 3anbi13d 3anbi23d rspc3ev syl2anc
      3jca neeq2 ) AEIUAZHPZFIUAZHPZGIUAZHPZQZVOVQRZVOVSRZVQVSRZQZBUBZCUBZRZWFD
      UBZRZWGWIRZQZDHUCCHUCBHUCEFGUDZHIUEZAWAOWNWMHIUFZAWAUGWMHIUHAWOWAAWOUIZVP
      VRVTWPWMHEIAWOUJZAEWMPZWOAWREESZEFSZEGSZUKZAWSWTXAAEUMULAEJPZWRXBUNAXCFKP
      ZGLPZMUOEEFGJVDTUPUQURWPWMHFIWQAFWMPZWOAXFFESZFFSZFGSZUKZAXHXGXIAFUMUSAXD
      XFXJUNAXCXDXEMUTFEFGKVDTUPUQURWPWMHGIWQAGWMPZWOAXEXKAXCXDXEMVAGLEFVBTUQUR
      VMVCTVEAEFGHIJKLMNOVFWLWEVOWGRZVOWIRZWKQWBXMVQWIRZQBCDVOVQVSHHHWFVOSWHXLW
      JXMWKWFVOWGVGWFVOWIVGVHWGVQSXLWBWKXNXMWGVQVOVNWGVQWIVGVIWIVSSXMWCXNWDWBWI
      VSVOVNWIVSVQVNVJVKVL $.
  $}

  ${
    $d x y A $.  $d x y F $.
    $( A one-to-one function in terms of different function values for
       different arguments.  (Contributed by Alexander van der Vekens,
       26-Jan-2018.) $)
    dff14a $p |- ( F : A -1-1-> B <-> ( F : A --> B /\
             A. x e. A A. y e. A ( x =/= y -> ( F ` x ) =/= ( F ` y ) ) ) ) $=
      ( wf1 wf cv cfv wceq weq wi wral wa wne dff13 wn df-ne bicomi bitri
      con34b imbi12i 2ralbii anbi2i ) CDEFCDEGZAHZEIZBHZEIZJZABKZLZBCMACMZNUEUF
      UHOZUGUIOZLZBCMACMZNABCDEPUMUQUEULUPABCCULUKQZUJQZLUPUJUKUAURUNUSUOUNURUF
      UHRSUOUSUGUIRSUBTUCUDT $.

    $( A one-to-one function in terms of different function values for
       different arguments.  (Contributed by Alexander van der Vekens,
       26-Jan-2018.) $)
    dff14b $p |- ( F : A -1-1-> B <-> ( F : A --> B /\
             A. x e. A A. y e. ( A \ { x } ) ( F ` x ) =/= ( F ` y ) ) ) $=
      ( wf1 wf cv wne cfv wi wral wa csn cdif dff14a necom imbi1i ralbii bitri
      raldifsnb anbi2i ) CDEFCDEGZAHZBHZIZUDEJUEEJIZKZBCLZACLZMUCUGBCUDNOLZACLZ
      MABCDEPUJULUCUIUKACUIUEUDIZUGKZBCLUKUHUNBCUFUMUGUDUEQRSUGBCUDUATSUBT $.
  $}

  ${
    $d x y A $.  $d x y F $.  $d x y X $.  $d x y Y $.
    f12dfv.a $e |- A = { X , Y } $.
    $( A one-to-one function with a domain with at least two different elements
       in terms of function values.  (Contributed by Alexander van der Vekens,
       2-Mar-2018.) $)
    f12dfv $p |- ( ( ( X e. U /\ Y e. V ) /\ X =/= Y )
      -> ( F : A -1-1-> B <-> ( F : A --> B /\ ( F ` X ) =/= ( F ` Y ) ) ) ) $=
      ( vx vy cfv wne csn cdif wral wa wb wceq fveq2 adantr wf1 wcel dff14b cpr
      wf cv raleqi sneq difeq2d neeq1d raleqbidv ralprg difeq1i difprsn1 syl5eq
      adantl raleqdv neeq2d ralsng bitrd difprsn2 anbi12d necom pm4.71i syl6bbr
      biimpi syl5bb anbi2d ) ABDUAABDUEZIUFZDKZJUFZDKZLZJAVJMZNZOZIAOZPFCUBZGEU
      BZPZFGLZPZVIFDKZGDKZLZPIJABDUCWCVRWFVIVRVQIFGUDZOZWCWFVQIAWGHUGWCWHWDVMLZ
      JAFMZNZOZWEVMLZJAGMZNZOZPZWFWAWHWQQWBVQWLWPIFGCEVJFRZVNWIJVPWKWRVOWJAVJFU
      HUIWRVKWDVMVJFDSUJUKVJGRZVNWMJVPWOWSVOWNAVJGUHUIWSVKWEVMVJGDSUJUKULTWCWQW
      FWEWDLZPWFWCWLWFWPWTWCWLWIJWNOZWFWCWIJWKWNWBWKWNRWAWBWKWGWJNWNAWGWJHUMFGU
      NUOUPUQWAXAWFQZWBVTXBVSWIWFJGEVLGRVMWEWDVLGDSURUSUPTUTWCWPWMJWJOZWTWCWMJW
      OWJWBWOWJRWAWBWOWGWNNWJAWGWNHUMFGVAUOUPUQWAXCWTQZWBVSXDVTWMWTJFCVLFRVMWDW
      EVLFDSURUSTTUTVBWFWTWFWTWDWEVCVFVDVEUTVGVHVG $.
  $}

  ${
    $d x y A $.  $d x y F $.  $d x y X $.  $d x y Y $.  $d x y Z $.
    f13dfv.a $e |- A = { X , Y , Z } $.
    $( A one-to-one function with a domain with at least three different
       elements in terms of function values.  (Contributed by Alexander van der
       Vekens, 26-Jan-2018.) $)
    f13dfv $p |- ( ( ( X e. U /\ Y e. V /\ Z e. W )
                     /\ ( X =/= Y /\ X =/= Z /\ Y =/= Z ) )
        -> ( F : A -1-1-> B <-> ( F : A --> B /\ ( ( F ` X ) =/= ( F ` Y )
              /\ ( F ` X ) =/= ( F ` Z ) /\ ( F ` Y ) =/= ( F ` Z ) ) ) ) ) $=
      ( vx vy wne cdif wral wa w3a wceq fveq2 necom wf1 cfv csn wcel dff14b ctp
      wf cv raleqi wb sneq difeq2d neeq1d raleqbidv raltpg adantr difeq1i tprot
      cpr anbi12i biimpi 3adant3 diftpsn3 syl syl5eq adantl neeq2d ralprg bitrd
      raleqdv 3adant1 tpcomb anim2i 3adant2 3anbi123d ancom 3anbi2i 3an6 3anrot
      bicomi 3anbi123i anidm 3ancoma bitri 3bitri syl6bb syl5bb anbi2d ) ABDUAA
      BDUGZKUHZDUBZLUHZDUBZMZLAWJUCZNZOZKAOZPGCUDZHEUDZIFUDZQZGHMZGIMZHIMZQZPZW
      IGDUBZHDUBZMZXHIDUBZMZXIXKMZQZPKLABDUEXGWRXNWIWRWQKGHIUFZOZXGXNWQKAXOJUIX
      GXPXHWMMZLAGUCZNZOZXIWMMZLAHUCZNZOZXKWMMZLAIUCZNZOZQZXNXBXPYIUJXFWQXTYDYH
      KGHICEFWJGRZWNXQLWPXSYJWOXRAWJGUKULYJWKXHWMWJGDSUMUNWJHRZWNYALWPYCYKWOYBA
      WJHUKULYKWKXIWMWJHDSUMUNWJIRZWNYELWPYGYLWOYFAWJIUKULYLWKXKWMWJIDSUMUNUOUP
      XGYIXJXLPZXIXHMZXMPZXKXHMZXKXIMZPZQZXNXGXTYMYDYOYHYRXGXTXQLHIUSZOZYMXGXQL
      XSYTXFXSYTRXBXFXSXOXRNZYTAXOXRJUQXFUUBHIGUFZXRNZYTXOUUCXRGHIURUQXFHGMZIGM
      ZPZUUDYTRXCXDUUGXEXCXDPUUGXCUUEXDUUFGHTGITUTVAVBHIGVCVDVEVEVFVJXBUUAYMUJZ
      XFWTXAUUHWSXQXJXLLHIEFWLHRZWMXIXHWLHDSZVGWLIRZWMXKXHWLIDSZVGVHVKUPVIXGYDY
      ALGIUSZOZYOXGYALYCUUMXFYCUUMRXBXFYCXOYBNZUUMAXOYBJUQXFUUOGIHUFZYBNZUUMXOU
      UPYBGHIVLUQXFXCIHMZPZUUQUUMRXCXEUUSXDXEUURXCXEUURHITVAVMVNGIHVCVDVEVEVFVJ
      XBUUNYOUJZXFWSXAUUTWTYAYNXMLGICFWLGRZWMXHXIWLGDSZVGUUKWMXKXIUULVGVHVNUPVI
      XGYHYELGHUSZOZYRXGYELYGUVCXFYGUVCRXBXFYGXOYFNZUVCAXOYFJUQXDXEUVEUVCRXCGHI
      VCVKVEVFVJXBUVDYRUJZXFWSWTUVFXAYEYPYQLGHCEUVAWMXHXKUVBVGUUIWMXIXKUUJVGVHV
      BUPVIVOYSYMXMYNPZYRQXJXMYPQZXLYNYQQZPZXNYOUVGYMYRYNXMVPVQXJXLXMYNYPYQVRUV
      JYPXJXMQZUVKPUVKXNUVHUVKUVIUVKUVKUVHYPXJXMVSVTXLYPYNXJYQXMXHXKTXIXHTXKXIT
      WAUTUVKWBUVKXJYPXMQXNYPXJXMWCYPXLXJXMXKXHTVQWDWEWEWFVIWGWHWG $.
  $}

  ${
    $d x y A $.  $d x y F $.
    $( A one-to-one onto function in terms of function values.  (Contributed by
       NM, 29-Mar-2008.) $)
    dff1o6 $p |- ( F : A -1-1-onto-> B <-> ( F Fn A /\ ran F = B /\
             A. x e. A A. y e. A ( ( F ` x ) = ( F ` y ) -> x = y ) ) ) $=
      ( wf1o wf1 wfo wa wf cv cfv wceq wi wral wfn crn w3a df-f1o dff13 anbi12i
      df-fo df-3an wss eqimss anim2i df-f sylibr pm4.71ri anbi1i 3bitrri 3bitri
      an32 ) CDEFCDEGZCDEHZICDEJZAKZELBKZELMUQURMNBCOACOZIZECPZEQZDMZIZIZVAVCUS
      RZCDESUNUTUOVDABCDETCDEUBUAVFVDUSIUPVDIZUSIVEVAVCUSUCVDVGUSVDUPVDVAVBDUDZ
      IUPVCVHVAVBDUEUFCDEUGUHUIUJUPVDUSUMUKUL $.
  $}

  $( The converse value of the value of a one-to-one onto function.
     (Contributed by NM, 20-May-2004.) $)
  f1ocnvfv1 $p |- ( ( F : A -1-1-onto-> B /\ C e. A ) ->
                 ( `' F ` ( F ` C ) ) = C ) $=
    ( wf1o wcel wa ccnv ccom cfv cid cres wceq f1ococnv1 fveq1d adantr wf fvco3
    f1of sylan fvresi adantl 3eqtr3d ) ABDEZCAFZGCDHZDIZJZCKALZJZCDJUFJZCUDUHUJ
    MUEUDCUGUIABDNOPUDABDQUEUHUKMABDSABCUFDRTUEUJCMUDACUAUBUC $.

  $( The value of the converse value of a one-to-one onto function.
     (Contributed by NM, 20-May-2004.) $)
  f1ocnvfv2 $p |- ( ( F : A -1-1-onto-> B /\ C e. B ) ->
                 ( F ` ( `' F ` C ) ) = C ) $=
    ( wf1o wcel ccnv ccom cfv cid cres wceq f1ococnv2 fveq1d adantr f1ocnv f1of
    wa wf syl fvco3 sylan fvresi adantl 3eqtr3d ) ABDEZCBFZRCDDGZHZIZCJBKZIZCUH
    IDIZCUFUJULLUGUFCUIUKABDMNOUFBAUHSZUGUJUMLUFBAUHEUNABDPBAUHQTBACDUHUAUBUGUL
    CLUFBCUCUDUE $.

  $( Relationship between the value of a one-to-one onto function and the value
     of its converse.  (Contributed by Raph Levien, 10-Apr-2004.) $)
  f1ocnvfv $p |- ( ( F : A -1-1-onto-> B /\ C e. A ) ->
                  ( ( F ` C ) = D -> ( `' F ` D ) = C ) ) $=
    ( cfv wceq ccnv wf1o wcel wa fveq2 eqcoms f1ocnvfv1 eqeq2d syl5ib ) CEFZDGD
    EHZFZQRFZGZABEICAJKZSCGUADQDQRLMUBTCSABCENOP $.

  $( Relationship between the value of a one-to-one onto function and the value
     of its converse.  (Contributed by NM, 20-May-2004.) $)
  f1ocnvfvb $p |- ( ( F : A -1-1-onto-> B /\ C e. A /\ D e. B ) ->
                  ( ( F ` C ) = D <-> ( `' F ` D ) = C ) ) $=
    ( wf1o wcel w3a cfv wceq ccnv wi f1ocnvfv 3adant3 wa fveq2 eqcoms f1ocnvfv2
    eqeq2d syl5ib 3adant2 impbid ) ABEFZCAGZDBGZHCEIZDJZDEKIZCJZUCUDUGUILUEABCD
    EMNUCUEUIUGLUDUIUFUHEIZJZUCUEOZUGUKCUHCUHEPQULUJDUFABDERSTUAUB $.

  $( An involution is a bijection.  (Contributed by Thierry Arnoux,
     7-Dec-2016.) $)
  nvof1o $p |- ( ( F Fn A /\ `' F = F ) -> F : A -1-1-onto-> A ) $=
    ( wfn ccnv wceq wa wf1 wfo wf1o wfun cdm crn fnfun fdmrn sylib adantr df-rn
    wf fndm sylanbrc syl5eq sylan9eqr feq23d mpbid wb funeq adantl mpbird df-f1
    dmeq simpl df-fo df-f1o ) BACZBDZBEZFZAABGZAABHZAABIUQAABRZUOJZURUQBKZBLZBR
    ZUTUNVDUPUNBJZVDABMZBNOPUQVBVCAABUNVBAEUPABSZPUPUNVCVBAUPVCUOKVBBQUOBUJUAVG
    UBZUCUDUQVAVEUNVEUPVFPUPVAVEUEUNUOBUFUGUHAABUITUQUNVCAEUSUNUPUKVHAABULTAABU
    MT $.

  ${
    $d x y z A $.  $d x y z F $.
    $( The converse of an involution is the function itself.  (Contributed by
       Thierry Arnoux, 7-May-2019.) $)
    nvocnv $p |- ( ( F : A --> A /\ A. x e. A ( F ` ( F ` x ) ) = x )
      -> `' F = F ) $=
      ( vz vy cv cfv wceq wa cmpt ccnv wcel simprr simpll simprl eqeltrd fveq2d
      ffvelrnd simplr fveq2 wf wral id eqeq12d rspcv sylc eqtr2d impbida mptcnv
      jca wfn ffn dffn5 biimpi adantr sylan cnveqd 3eqtr4d ) BBCUAZAFZCGZCGZUTH
      ZABUBZIZDBDFZCGZJZKEBEFZCGZJZCKCVEDEBVGBVJVEVFBLZVIVGHZIZVIBLZVFVJHZIZVEV
      NIZVOVPVRVIVGBVEVLVMMZVRBBVFCUSVDVNNVEVLVMOZRPVRVJVGCGZVFVRVIVGCVSQVRVLVD
      WAVFHZVTUSVDVNSVCWBAVFBUTVFHZVBWAUTVFWCVAVGCUTVFCTQWCUCUDUEUFUGUJVEVQIZVL
      VMWDVFVJBVEVOVPMZWDBBVICUSVDVQNVEVOVPOZRPWDVGVJCGZVIWDVFVJCWEQWDVOVDWGVIH
      ZWFUSVDVQSVCWHAVIBUTVIHZVBWGUTVIWIVAVJCUTVICTQWIUCUDUEUFUGUJUHUIVECVHUSCB
      UKZVDCVHHZBBCULZWJWKVDWJWKDBCUMUNUOUPUQUSWJVDCVKHZWLWJWMVDWJWMEBCUMUNUOUP
      UR $.
  $}

  $( The value of the converse of a one-to-one onto function belongs to its
     domain.  (Contributed by NM, 26-May-2006.) $)
  f1ocnvdm $p |- ( ( F : A -1-1-onto-> B /\ C e. B ) ->
                    ( `' F ` C ) e. A ) $=
    ( wf1o ccnv wf f1ocnv f1of syl ffvelrnda ) ABDEZBACDFZLBAMEBAMGABDHBAMIJK
    $.

  $( If the values of a one-to-one function for two arguments from the range of
     the function are equal, the arguments themselves must be equal.
     (Contributed by Alexander van der Vekens, 12-Nov-2017.) $)
  f1ocnvfvrneq $p |- ( ( F : A -1-1-> B /\ ( C e. ran F /\ D e. ran F ) ) ->
                  ( ( `' F ` C ) = ( `' F ` D ) -> C = D ) ) $=
    ( wf1 crn wcel wa ccnv cfv wceq wi wf1o f1f1orn f1ocnv f1of1 f1veqaeq 4syl
    ex imp ) ABEFZCEGZHDUCHIZCEJZKDUEKLCDLMZUBAUCENUCAUENUCAUEFZUDUFMABEOAUCEPU
    CAUEQUGUDUFUCACDUERTSUA $.

  ${
    $d A x y $.  $d B x y $.  $d F x y $.  $d R x y $.
    $( An application is injective if a retraction exists.  Proposition 8 of
       [BourbakiEns] p.  E.II.18.  (Contributed by FL, 11-Nov-2011.)  (Revised
       by Mario Carneiro, 27-Dec-2014.) $)
    fcof1 $p |- ( ( F : A --> B /\ ( R o. F ) = ( _I |` A ) )
         -> F : A -1-1-> B ) $=
      ( vx vy wf ccom wceq wa cfv wral wcel fvco3 syl2anc fveq1d 3eqtr3d fvresi
      cv syl cid cres wi wf1 simpl simprr fveq2d simpll simprll simprlr 3eqtr4d
      simplr expr ralrimivva dff13 sylanbrc ) ABDGZCDHZUAAUBZIZJZUQESZDKZFSZDKZ
      IZVBVDIZUCZFALEALABDUDUQUTUEVAVHEFAAVAVBAMZVDAMZJZVFVGVAVKVFJZJZVBUSKZVDU
      SKZVBVDVMVBURKZVDURKZVNVOVMVCCKZVECKZVPVQVMVCVECVAVKVFUFUGVMUQVIVPVRIUQUT
      VLUHZVAVIVJVFUIZABVBCDNOVMUQVJVQVSIVTVAVIVJVFUJZABVDCDNOUKVMVBURUSUQUTVLU
      LZPVMVDURUSWCPQVMVIVNVBIWAAVBRTVMVJVOVDIWBAVDRTQUMUNEFABDUOUP $.
  $}

  ${
    $d A x y $.  $d B x y $.  $d F x y $.  $d S x y $.
    $( An application is surjective if a section exists.  Proposition 8 of
       [BourbakiEns] p.  E.II.18.  (Contributed by FL, 17-Nov-2011.)  (Proof
       shortened by Mario Carneiro, 27-Dec-2014.) $)
    fcofo $p |- ( ( F : A --> B /\ S : B --> A /\ ( F o. S ) = ( _I |` B ) )
         -> F : A -onto-> B ) $=
      ( vy vx wf ccom cid cres wceq w3a cfv wrex wral wfo simp1 wcel 3ad2antl2
      cv ffvelrn simpl3 fveq1d fvco3 fvresi adantl 3eqtr3rd fveq2 eqeq2d rspcev
      wa syl2anc ralrimiva dffo3 sylanbrc ) ABDGZBACGZDCHZIBJZKZLZUPETZFTZDMZKZ
      FANZEBOABDPUPUQUTQVAVFEBVAVBBRZUKZVBCMZARZVBVIDMZKZVFUQUPVGVJUTBAVBCUASVH
      VBURMZVBUSMZVKVBVHVBURUSUPUQUTVGUBUCUQUPVGVMVKKUTBAVBDCUDSVGVNVBKVABVBUEU
      FUGVEVLFVIAVCVIKVDVKVBVCVIDUHUIUJULUMFEABDUNUO $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y F $.  $d y ph $.  $d x ps $.
    cbvfo.1 $e |- ( ( F ` x ) = y -> ( ph <-> ps ) ) $.
    $( Change bound variable between domain and range of function.
       (Contributed by NM, 23-Feb-1997.)  (Proof shortened by Mario Carneiro,
       21-Mar-2015.) $)
    cbvfo $p |- ( F : A -onto-> B -> ( A. x e. A ph <-> A. y e. B ps ) ) $=
      ( wfo crn wral wfn wb fofn cv cfv wceq bicomd eqcoms ralrn raleqdv bitr3d
      syl forn ) EFGIZBDGJZKZACEKZBDFKUEGELUGUHMEFGNBADCEGBAMCOGPZDOZUIUJQABHRS
      TUCUEBDUFFEFGUDUAUB $.

    $( Change bound variable between domain and range of function.
       (Contributed by NM, 23-Feb-1997.) $)
    cbvexfo $p |- ( F : A -onto-> B -> ( E. x e. A ph <-> E. y e. B ps ) ) $=
      ( wfo wn wral wrex cv cfv wceq notbid cbvfo dfrex2 3bitr4g ) EFGIZAJZCEKZ
      JBJZDFKZJACELBDFLTUBUDUAUCCDEFGCMGNDMOABHPQPACERBDFRS $.
  $}

  ${
    $d A x $.  $d B x $.  $d C x $.  $d F x $.  $d H x $.  $d K x $.
    $( An injection is left-cancelable.  (Contributed by FL, 2-Aug-2009.)
       (Revised by Mario Carneiro, 21-Mar-2015.) $)
    cocan1 $p |- ( ( F : B -1-1-> C /\ H : A --> B /\ K : A --> B ) ->
      ( ( F o. H ) = ( F o. K ) <-> H = K ) ) $=
      ( vx wf ccom cfv wceq wral wcel fvco3 3ad2antl2 wb wfn ffn syl syl2anc cv
      wf1 wa 3ad2antl3 eqeq12d simpl1 ffvelrn f1fveq syl12anc ralbidva 3ad2ant1
      w3a bitrd f1f simp2 fnfco simp3 eqfnfv 3bitr4d ) BCDUBZABEHZABFHZULZGUAZD
      EIZJZVDDFIZJZKZGALZVDEJZVDFJZKZGALZVEVGKZEFKZVCVIVMGAVCVDAMZUCZVIVKDJZVLD
      JZKZVMVRVFVSVHVTVAUTVQVFVSKVBABVDDENOVBUTVQVHVTKVAABVDDFNUDUEVRUTVKBMZVLB
      MZWAVMPUTVAVBVQUFVAUTVQWBVBABVDEUGOVBUTVQWCVAABVDFUGUDBCVKVLDUHUIUMUJVCVE
      AQZVGAQZVOVJPVCDBQZVAWDVCBCDHZWFUTVAWGVBBCDUNUKBCDRSZUTVAVBUOZBADEUPTVCWF
      VBWEWHUTVAVBUQZBADFUPTGAVEVGURTVCEAQZFAQZVPVNPVCVAWKWIABERSVCVBWLWJABFRSG
      AEFURTUS $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y F $.  $d x y H $.  $d x y K $.
    $( A surjection is right-cancelable.  (Contributed by FL, 21-Nov-2011.)
       (Proof shortened by Mario Carneiro, 21-Mar-2015.) $)
    cocan2 $p |- ( ( F : A -onto-> B /\ H Fn B /\ K Fn B ) ->
      ( ( H o. F ) = ( K o. F ) <-> H = K ) ) $=
      ( vy vx wfn cv ccom cfv wceq wral 3ad2ant1 fvco3 sylan eqeq12d wb syl2anc
      fveq2 wfo w3a wcel wa fof ralbidva cbvfo bitrd simp2 fnfco eqfnfv 3bitr4d
      wf simp3 ) ABCUAZDBHZEBHZUBZFIZDCJZKZUSECJZKZLZFAMZGIZDKZVFEKZLZGBMZUTVBL
      ZDELZURVEUSCKZDKZVMEKZLZFAMZVJURVDVPFAURUSAUCZUDVAVNVCVOURABCUMZVRVAVNLUO
      UPVSUQABCUENZABUSDCOPURVSVRVCVOLVTABUSECOPQUFUOUPVQVJRUQVPVIFGABCVMVFLVNV
      GVOVHVMVFDTVMVFETQUGNUHURUTAHZVBAHZVKVERURUPVSWAUOUPUQUIZVTBADCUJSURUQVSW
      BUOUPUQUNZVTBAECUJSFAUTVBUKSURUPUQVLVJRWCWDGBDEUKSUL $.
  $}

  ${
    fcof1oinvd.f $e |- ( ph -> F : A -1-1-onto-> B ) $.
    fcof1oinvd.g $e |- ( ph -> G : B --> A ) $.
    fcof1oinvd.b $e |- ( ph -> ( F o. G ) = ( _I |` B ) ) $.
    $( Show that a function is the inverse of a bijective function if their
       composition is the identity function.  Formerly part of proof of
       ~ fcof1o .  (Contributed by Mario Carneiro, 21-Mar-2015.)  (Revised by
       AV, 15-Dec-2019.) $)
    fcof1oinvd $p |- ( ph -> `' F = G ) $=
      ( ccnv ccom cid cres coeq2d coass wf1o wceq f1ococnv1 syl coeq1d wf fcoi2
      eqtrd syl5eqr f1ocnv f1of fcoi1 3eqtr3rd ) ADIZDEJZJZUHKCLZJZEUHAUIUKUHHM
      AUJUHDJZEJZEUHDENAUNKBLZEJZEAUMUOEABCDOZUMUOPFBCDQRSACBETUPEPGCBEUARUBUCA
      CBUHTZULUHPACBUHOZURAUQUSFBCDUDRCBUHUERCBUHUFRUG $.
  $}

  ${
    fcof1od.f $e |- ( ph -> F : A --> B ) $.
    fcof1od.g $e |- ( ph -> G : B --> A ) $.
    fcof1od.a $e |- ( ph -> ( G o. F ) = ( _I |` A ) ) $.
    fcof1od.b $e |- ( ph -> ( F o. G ) = ( _I |` B ) ) $.
    $( A function is bijective if a ""retraction"" and a ""section"" exist, see
       comments for ~ fcof1 and ~ fcofo .  Formerly part of proof of
       ~ fcof1o .  (Contributed by Mario Carneiro, 21-Mar-2015.)  (Revised by
       AV, 15-Dec-2019.) $)
    fcof1od $p |- ( ph -> F : A -1-1-onto-> B ) $=
      ( wf1 wfo wf1o wf ccom cid cres wceq fcof1 syl2anc fcofo syl3anc sylanbrc
      df-f1o ) ABCDJZBCDKZBCDLABCDMZEDNOBPQUDFHBCEDRSAUFCBEMDENOCPQUEFGIBCEDTUA
      BCDUCUB $.

    $( Show that a function is the inverse of a function if their compositions
       are the identity functions.  (Contributed by Mario Carneiro,
       21-Mar-2015.)  (Revised by AV, 15-Dec-2019.) $)
    2fcoidinvd $p |- ( ph -> `' F = G ) $=
      ( fcof1od fcof1oinvd ) ABCDEABCDEFGHIJGIK $.
  $}

  $( Show that two functions are inverse to each other by computing their
     compositions.  (Contributed by Mario Carneiro, 21-Mar-2015.)  (Proof
     shortened by AV, 15-Dec-2019.) $)
  fcof1o $p |- ( ( ( F : A --> B /\ G : B --> A ) /\
      ( ( F o. G ) = ( _I |` B ) /\ ( G o. F ) = ( _I |` A ) ) ) ->
      ( F : A -1-1-onto-> B /\ `' F = G ) ) $=
    ( wf wa ccom cid cres wceq wf1o ccnv simpll simplr simprr simprl 2fcoidinvd
    fcof1od jca ) ABCEZBADEZFZCDGHBIJZDCGHAIJZFZFZABCKCLDJUFABCDTUAUEMZTUAUENZU
    BUCUDOZUBUCUDPZRUFABCDUGUHUIUJQS $.

  ${
    $d A a x $.  $d B x $.  $d F a x $.  $d G a x $.  $d ph x $.
    2fvcoidd.f $e |- ( ph -> F : A --> B ) $.
    2fvcoidd.g $e |- ( ph -> G : B --> A ) $.
    2fvcoidd.i $e |- ( ph -> A. a e. A ( G ` ( F ` a ) ) = a ) $.
    $( Show that the composition of two functions is the identity function by
       applying both functions to each value of the domain of the first
       function.  (Contributed by AV, 15-Dec-2019.) $)
    2fvcoidd $p |- ( ph -> ( G o. F ) = ( _I |` A ) ) $=
      ( vx ccom cv cfv cmpt cid cres wf wceq fcompt syl2anc wcel wral weq fveq2
      wi fveq2d id eqeq12d rspccv syl imp mpteq2dva mptresid syl6eq eqtrd ) AED
      KZJBJLZDMZEMZNZOBPZACBEQBCDQUPUTRHGJEDBCBSTAUTJBUQNVAAJBUSUQAUQBUAZUSUQRZ
      AFLZDMZEMZVDRZFBUBVBVCUEIVGVCFUQBFJUCZVFUSVDUQVHVEUREVDUQDUDUFVHUGUHUIUJU
      KULJBUMUNUO $.

    $d B b $.  $d F b $.  $d G b $.
    2fvidf1od.i $e |- ( ph -> A. b e. B ( F ` ( G ` b ) ) = b ) $.
    $( A function is bijective if it has an inverse function.  (Contributed by
       AV, 15-Dec-2019.) $)
    2fvidf1od $p |- ( ph -> F : A -1-1-onto-> B ) $=
      ( 2fvcoidd fcof1od ) ABCDEHIABCDEFHIJLACBEDGIHKLM $.

    $( Show that two functions are inverse to each other by applying them twice
       to each value of their domains.  (Contributed by AV, 13-Dec-2019.) $)
    2fvidinvd $p |- ( ph -> `' F = G ) $=
      ( 2fvcoidd 2fcoidinvd ) ABCDEHIABCDEFHIJLACBEDGIHKLM $.
  $}

  ${
    $d F x y $.  $d G x y $.  $d A x y $.  $d B x y $.
    $( Condition for function equality in terms of vanishing of the composition
       with the converse. _EDITORIAL_:  Is there a relation-algebraic proof of
       this?  (Contributed by Stefan O'Rear, 12-Feb-2015.) $)
    foeqcnvco $p |- ( ( F : A -onto-> B /\ G : A -onto-> B ) ->
        ( F = G <-> ( F o. `' G ) = ( _I |` B ) ) ) $=
      ( vx vy wfo wa wceq ccnv ccom adantr wfn fofn ad2antlr cv wcel cfv sylibr
      wbr cid wi fococnv2 cnveq coeq2d eqeq1d syl5ibcom ad2antrr wex cop adantl
      cres fnopfv sylan vex brcnv df-br bitri breq2 breq1 anbi12d spcev syl2anc
      fvex weq brco adantlr wb breq mpbid wf ffvelrnda resieq eqcomd eqfnfvd ex
      fof impbid ) ABCGZABDGZHZCDIZCDJZKZUABULZIZVSWBWFUBVTVSCCJZKZWEIWBWFABCUC
      WBWHWDWEWBWGWCCCDUDUEUFUGLWAWFWBWAWFHZEACDVSCAMZVTWFABCNZUHVTDAMZVSWFABDN
      ZOWIEPZAQZHZWNDRZWNCRZWPWQWRWETZWQWRIZWPWQWRWDTZWSWAWOXAWFWAWOHZWQFPZWCTZ
      XCWRCTZHZFUIZXAXBWQWNWCTZWNWRCTZXGXBWNWQUJDQZXHWAWLWOXJVTWLVSWMUKAWNDUMUN
      XHWNWQDTXJWQWNDWNDVDZEUOZUPWNWQDUQURSXBWNWRUJCQZXIWAWJWOXMVSWJVTWKLAWNCUM
      UNWNWRCUQSXFXHXIHFWNXLFEVEXDXHXEXIXCWNWQWCUSXCWNWRCUTVAVBVCFWQWRCWCXKWNCV
      DVFSVGWFXAWSVHWAWOWQWRWDWEVIOVJWAWOWSWTVHZWFXBWQBQWRBQXNWAABWNDVTABDVKVSA
      BDVQUKVLWAABWNCVSABCVKVTABCVQLVLBWQWRVMVCVGVJVNVOVPVR $.

    $( Condition for function equality in terms of vanishing of the composition
       with the inverse.  (Contributed by Stefan O'Rear, 12-Feb-2015.) $)
    f1eqcocnv $p |- ( ( F : A -1-1-> B /\ G : A -1-1-> B ) ->
        ( F = G <-> ( `' F o. G ) = ( _I |` A ) ) ) $=
      ( vx vy wf1 wa wceq ccom wi adantr wfn f1fn adantl cv wcel wbr wb syl cid
      ccnv cres f1cocnv1 coeq2 eqeq1d syl5ibcom equid resieq mpbiri anidms breq
      cfv ad2antlr mpbird wex cop wfun cdm fndm eleq2d biimpar funopfvb syl2anc
      fnfun bicomd df-br eqcom 3bitr4g biimpd syl6rbbr vex brcnv anim12d eximdv
      brco fvex eqvinc 3imtr4g adantlr mpd eqfnfvd eqcomd ex impbid ) ABCGZABDG
      ZHZCDIZCUBZDJZUAAUCZIZWFWIWMKWGWFWJCJZWLIWIWMABCUDWIWNWKWLCDWJUEUFUGLWHWM
      WIWHWMHZDCWOEADCWHDAMZWMWGWPWFABDNOZLWHCAMZWMWFWRWGABCNLZLWOEPZAQZHZWTWTW
      KRZWTDUMZWTCUMZIZXBXCWTWTWLRZXAXGWOXAXGXAXAHXGWTWTIEUHAWTWTUIUJUKOWMXCXGS
      WHXAWTWTWKWLULUNUOWHXAXCXFKWMWHXAHZWTFPZDRZXIWTWJRZHZFUPXIXDIZXIXEIZHZFUP
      XCXFXHXLXOFXHXJXMXKXNXHXJXMXHWTXIUQZDQZXDXIIZXJXMXHXRXQXHDURZWTDUSZQZXRXQ
      SWHXSXAWHWPXSWQADVETLWHYAXAWHXTAWTWHWPXTAIWQADUTTVAVBWTXIDVCVDVFWTXIDVGXI
      XDVHVIVJXHXKXNXHWTXICRZXEXIIZXKXNXHYCXPCQZYBXHCURZWTCUSZQZYCYDSWHYEXAWHWR
      YEWSACVETLWHYGXAWHYFAWTWHWRYFAIWSACUTTVAVBWTXICVCVDWTXICVGVKXIWTCFVLEVLZV
      MXIXEVHVIVJVNVOFWTWTWJDYHYHVPFXDXEWTDVQVRVSVTWAWBWCWDWE $.
  $}

  ${
    fveqf1o.1 $e |- G = ( F o. ( ( _I |` ( A \ { C , ( `' F ` D ) } ) ) u.
      { <. C , ( `' F ` D ) >. , <. ( `' F ` D ) , C >. } ) ) $.
    $( Given a bijection ` F ` , produce another bijection ` G ` which
       additionally maps two specified points.  (Contributed by Mario Carneiro,
       30-May-2015.) $)
    fveqf1o $p |- ( ( F : A -1-1-onto-> B /\ C e. A /\ D e. B ) ->
      ( G : A -1-1-onto-> B /\ ( G ` C ) = D ) ) $=
      ( wf1o wcel cfv wceq cpr cop cun cin a1i syl2anc wb syl eqtrd w3a ccnv c0
      cid cdif cres ccom simp1 f1oi simp2 wf f1of 3syl simp3 ffvelrnd f1oprswap
      f1ocnv incom disjdif eqtri f1oun syl22anc uncom prssi undif syl5eq f1oeq2
      wss sylib mpbid f1oeq3 f1oco f1oeq1 ax-mp sylibr fveq1i wfn fnresi prid1g
      fvco3 f1ofn fvun2 syl112anc wfun f1ofun opex funopfv mpisyl f1ocnvfv2 jca
      prid1 fveq2d ) ABEHZCAIZDBIZUAZABFHZCFJZDKWPABEUDACDEUBZJZLZUEZUFZCWTMZWT
      CMZLZNZUGZHZWQWPWMAAXGHZXIWMWNWOUHZWPAXBXANZXGHZXJWPXLXLXGHZXMWPXBXBXCHZX
      AXAXFHZXBXAOZUCKZXRXNXOWPXBUIPWPWNWTAIZXPWMWNWOUJZWPBADWSWPWMBAWSHBAWSUKX
      KABEUQBAWSULUMWMWNWOUNZUOZCWTAAUPQZXRWPXQXAXBOUCXBXAURXAAUSUTPZYDXBXBXAXA
      XCXFVAVBWPXLAKZXNXMRWPXLXAXBNZAXBXAVCWPXAAVHZYFAKWPWNXSYGXTYBCWTAVDQXAAVE
      VIVFZXLAXLXGVGSVJWPYEXMXJRYHXLAAXGVKSVJZAABEXGVLQFXHKWQXIRGABFXHVMVNVOWPW
      RCXGJZEJZDWPWRCXHJZYKCFXHGVPWPAAXGUKZWNYLYKKWPXJYMYIAAXGULSXTAACEXGVTQVFW
      PYKWTEJZDWPYJWTEWPYJCXFJZWTWPXCXBVQZXFXAVQZXRCXAIZYJYOKYPWPXBVRPWPXPYQYCX
      AXAXFWASYDWPWNYRXTCWTAVSSXBXAXCXFCWBWCWPXFWDZXDXFIYOWTKWPXPYSYCXAXAXFWESX
      DXECWTWFWKCWTXFWGWHTWLWPWMWOYNDKXKYAABDEWIQTTWJ $.
  $}

  ${
    $d u v y z A $.  $d u v y z B $.  $d u v x z C $.  $d x y z R $.  $d x Y $.
    $d u v x z D $.  $d u v y z F $.  $d u v x y z ph $.  $d u v x y z X $.
    $d x y z S $.
    flift.1 $e |- F = ran ( x e. X |-> <. A , B >. ) $.
    flift.2 $e |- ( ( ph /\ x e. X ) -> A e. R ) $.
    flift.3 $e |- ( ( ph /\ x e. X ) -> B e. S ) $.
    $( ` F ` , a function lift, is a subset of ` R X. S ` .  (Contributed by
       Mario Carneiro, 23-Dec-2016.) $)
    fliftrel $p |- ( ph -> F C_ ( R X. S ) ) $=
      ( cop cmpt crn cxp wf wss cv wcel wa opelxpi syl2anc eqid fmptd syl5eqss
      frn syl ) AGBHCDLZMZNZEFOZIAHUKUIPUJUKQABHUHUKUIABRHSTCESDFSUHUKSJKCDEFUA
      UBUIUCUDHUKUIUFUGUE $.

    $( Elementhood in the relation ` F ` .  (Contributed by Mario Carneiro,
       23-Dec-2016.) $)
    fliftel $p |- ( ph -> ( C F D <-> E. x e. X ( C = A /\ D = B ) ) ) $=
      ( wbr cop wceq wrex wa wcel cmpt crn df-br eleq2i eqid elrnmpti 3bitri cv
      opex wb opthg2 syl2anc rexbidva syl5bb ) EFINZEFOZCDOZPZBJQZAECPFDPRZBJQU
      NUOISUOBJUPTZUAZSUREFIUBIVAUOKUCBJUPUOUTUTUDCDUHUEUFAUQUSBJABUGJSRCGSDHSU
      QUSUILMEFCDGHUJUKULUM $.

    $( Elementhood in the relation ` F ` .  (Contributed by Mario Carneiro,
       23-Dec-2016.) $)
    fliftel1 $p |- ( ( ph /\ x e. X ) -> A F B ) $=
      ( cv wcel wa cop wbr cmpt crn cvv opex eqid mpan2 adantl syl6eleqr sylibr
      elrnmpt1 df-br ) ABLHMZNZCDOZGMCDGPUIUJBHUJQZRZGUHUJULMZAUHUJSMUMCDTBHUJU
      KSUKUAUFUBUCIUDCDGUGUE $.

    $( Converse of the relation ` F ` .  (Contributed by Mario Carneiro,
       23-Dec-2016.) $)
    fliftcnv $p |- ( ph -> `' F = ran ( x e. X |-> <. B , A >. ) ) $=
      ( vy vz wrel cop wa wceq cv wbr wcel ccnv cmpt crn cxp wss fliftrel relxp
      eqid relss mpisyl relcnv jctil wrex fliftel vex brcnv ancom rexbii bitr4d
      3bitr4g df-br 3bitr3g eqrelrdv2 mpancom ) GUAZNZBHDCOUBUCZNZPAVEVGQAVHVFA
      VGFEUDZUEVINVHABDCFEVGHVGUHZKJUFFEUGVGVIUIUJGUKULALMVEVGALRZMRZVESZVKVLVG
      SZVKVLOZVETVOVGTAVMVKDQZVLCQZPZBHUMZVNAVLVKGSVQVPPZBHUMVMVSABCDVLVKEFGHIJ
      KUNVKVLGLUOMUOUPVRVTBHVPVQUQURUTABDCVKVLFEVGHVJKJUNUSVKVLVEVAVKVLVGVAVBVC
      VD $.

    ${
      fliftfun.4 $e |- ( x = y -> A = C ) $.
      fliftfun.5 $e |- ( x = y -> B = D ) $.
      $( The function ` F ` is the unique function defined by ` F `` A = B ` ,
         provided that the well-definedness condition holds.  (Contributed by
         Mario Carneiro, 23-Dec-2016.) $)
      fliftfun $p |- ( ph -> ( Fun F <->
        A. x e. X A. y e. X ( A = C -> B = D ) ) ) $=
        ( wceq cv wa wrex vz vu vv wfun wi wral nfv cop cmpt nfmpt1 nfrn nfcxfr
        crn nffun wcel cfv fveq2 wbr simplr fliftel1 ad2ant2r sylc simprr eqidd
        funbrfv eqeq2d anbi12d rspcev syl12anc wb fliftel mpbird eqeq12d syl5ib
        anassrs ralrimiva exp31 ralrimd wal cbvrexv syl6bb biimpd reeanv r19.29
        ad2antrr eqtr2 imim1i imp simprlr simprrr 3eqtr4d rexlimivw syl syl5bir
        ex syl9 alrimdv wrel cxp wss fliftrel relxp relss mpisyl dffun2 sylibrd
        baib impbid ) AJUDZDFQZEGQZUEZCKUFZBKUFZAXIXMBKABUGBJBJBKDEUHZUIZUMLBXP
        BKXOUJUKULUNAXIBRZKUOZXMAXISZXRSXLCKXSXRCRZKUOZXLXJDJUPZFJUPZQXSXRYASZS
        ZXKDFJUQYEYBEYCGYEXIDEJURZYBEQAXIYDUSZAXRYFXIYAABDEHIJKLMNUTVADEJVEVBYE
        XIFGJURZYCGQYGYEYHFDQZGEQZSZBKTZYEYAFFQZGGQZYLXSXRYAVCYEFVDYEGVDYKYMYNS
        BXTKXQXTQZYIYMYJYNYODFFOVFYOEGGPVFVGVHVIAYHYLVJXIYDABDEFGHIJKLMNVKWEVLF
        GJVEVBVMVNVOVPVQVRAXNUARZUBRZJURZYPUCRZJURZSZYQYSQZUEZUCVSZUBVSZUAVSZXI
        AXNUUEUAAXNUUDUBAXNUUCUCAUUAYPDQZYQEQZSZBKTZYPFQZYSGQZSZCKTZSZXNUUBAUUA
        UUOAYRUUJYTUUNABDEYPYQHIJKLMNVKAYTUUGYSEQZSZBKTUUNABDEYPYSHIJKLMNVKUUQU
        UMBCKYOUUGUUKUUPUULYODFYPOVFYOEGYSPVFVGVTWAVGWBUUOUUIUUMSZCKTZBKTZXNUUB
        UUIUUMBCKKWCXNUUTUUBXNUUTSXMUUSSZBKTUUBXMUUSBKWDUVAUUBBKUVAXLUURSZCKTUU
        BXLUURCKWDUVBUUBCKUVBEGYQYSXLUURXKUURXJXKUUGUUKXJUUHUULYPDFWFVAWGWHXLUU
        GUUHUUMWIXLUUIUUKUULWJWKWLWMWLWMWOWNWPWQWQWQAJWRZXIUUFVJAJHIWSZWTUVDWRU
        VCABDEHIJKLMNXAHIXBJUVDXCXDXIUVCUUFUAUBUCJXEXGWMXFXH $.

      fliftfund.6 $e |- ( ( ph /\ ( x e. X /\ y e. X /\ A = C ) ) -> B = D ) $.
      $( The function ` F ` is the unique function defined by ` F `` A = B ` ,
         provided that the well-definedness condition holds.  (Contributed by
         Mario Carneiro, 23-Dec-2016.) $)
      fliftfund $p |- ( ph -> Fun F ) $=
        ( wceq wral cv wfun wi wcel 3exp2 imp32 ralrimivva fliftfun mpbird ) AJ
        UADFRZEGRZUBZCKSBKSAUKBCKKABTKUCZCTKUCZUKAULUMUIUJQUDUEUFABCDEFGHIJKLMN
        OPUGUH $.
    $}

    $( The function ` F ` is the unique function defined by ` F `` A = B ` ,
       provided that the well-definedness condition holds.  (Contributed by
       Mario Carneiro, 23-Dec-2016.) $)
    fliftfuns $p |- ( ph -> ( Fun F <-> A. y e. X A. z e. X
      ( [_ y / x ]_ A = [_ z / x ]_ A -> [_ y / x ]_ B = [_ z / x ]_ B ) ) ) $=
      ( cv csb cop cmpt crn nfcsb1v wcel nfcv nfop csbeq1a opeq12d cbvmpt rneqi
      weq eqtri wral ralrimiva nfel1 eleq1d rspc mpan9 csbeq1 fliftfun ) ACDBCN
      ZEOZBUQFOZBDNZEOBUTFOGHIJIBJEFPZQZRCJURUSPZQZRKVBVDBCJVAVCCVAUABURUSBUQES
      ZBUQFSZUBBCUGZEURFUSBUQEUCZBUQFUCZUDUEUFUHAEGTZBJUIUQJTZURGTZAVJBJLUJVJVL
      BUQJBURGVEUKVGEURGVHULUMUNAFHTZBJUIVKUSHTZAVMBJMUJVMVNBUQJBUSHVFUKVGFUSHV
      IULUMUNBUQUTEUOBUQUTFUOUP $.

    $( The domain and range of the function ` F ` .  (Contributed by Mario
       Carneiro, 23-Dec-2016.) $)
    fliftf $p |- ( ph -> ( Fun F <-> F : ran ( x e. X |-> A ) --> S ) ) $=
      ( vy vz crn wa wss wceq cv wex wrex wfun cmpt wf wfn cdm simpr wbr cab wb
      fliftel exbidv adantr rexcom4 wcel elisset syl biantrud syl6rbbr rexbidva
      19.42v syl5bbr bitrd df-dm eqid rnmpt 3eqtr4g df-fn sylanbrc cxp fliftrel
      abbidv rnss rnxpss syl6ss df-f ex ffun impbid1 ) AGUAZBHCUBZNZFGUCZAVSWBA
      VSOZGWAUDZGNZFPWBWCVSGUEZWAQWDAVSUFWCLRZMRZGUGZMSZLUHWGCQZBHTZLUHWFWAWCWJ
      WLLWCWJWKWHDQZOZBHTZMSZWLAWJWPUIVSAWIWOMABCDWGWHEFGHIJKUJUKULWPWNMSZBHTZW
      CWLWNBMHUMAWRWLUIVSAWQWKBHABRHUNOZWKWKWMMSZOWQWSWTWKWSDFUNWTKMDFUOUPUQWKW
      MMUTURUSULVAVBVKLMGVCBLHCVTVTVDVEVFGWAVGVHWCWEEFVIZNZFWCGXAPZWEXBPAXCVSAB
      CDEFGHIJKVJULGXAVLUPEFVMVNWAFGVOVHVPWAFGVQVR $.

    fliftval.4 $e |- ( x = Y -> A = C ) $.
    fliftval.5 $e |- ( x = Y -> B = D ) $.
    fliftval.6 $e |- ( ph -> Fun F ) $.
    $( The value of the function ` F ` .  (Contributed by Mario Carneiro,
       23-Dec-2016.) $)
    fliftval $p |- ( ( ph /\ Y e. X ) -> ( F ` C ) = D ) $=
      ( wa wceq adantr wcel wfun wbr cfv simpr eqidd anim12ci cv eqeq2d anbi12d
      wrex rspcev syl2anc wb fliftel mpbird funbrfv sylc ) AKJUAZRZIUBZEFIUCZEI
      UDFSAVAUSQTUTVBECSZFDSZRZBJUKZUTUSEESZFFSZRZVFAUSUEAVHUSVGAFUFUSEUFUGVEVI
      BKJBUHKSZVCVGVDVHVJCEEOUIVJDFFPUIUJULUMAVBVFUNUSABCDEFGHIJLMNUOTUPEFIUQUR
      $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y H $.  $d x y G $.
    $d x y R $.  $d x y S $.  $d x y T $.
    $( Equality theorem for isomorphisms.  (Contributed by NM, 17-May-2004.) $)
    isoeq1 $p |- ( H = G ->
          ( H Isom R , S ( A , B ) <-> G Isom R , S ( A , B ) ) ) $=
      ( vx vy wceq wf1o cv wbr cfv wb wral wa wiso f1oeq1 fveq1 df-isom breq12d
      bibi2d 2ralbidv anbi12d 3bitr4g ) FEIZABFJZGKZHKZCLZUHFMZUIFMZDLZNZHAOGAO
      ZPABEJZUJUHEMZUIEMZDLZNZHAOGAOZPABCDFQABCDEQUFUGUPUOVAABFERUFUNUTGHAAUFUM
      USUJUFUKUQULURDUHFESUIFESUAUBUCUDGHABCDFTGHABCDETUE $.

    $( Equality theorem for isomorphisms.  (Contributed by NM, 17-May-2004.) $)
    isoeq2 $p |- ( R = T ->
          ( H Isom R , S ( A , B ) <-> H Isom T , S ( A , B ) ) ) $=
      ( vx vy wceq wf1o cv wbr cfv wb wral wa wiso breq bibi1d df-isom 2ralbidv
      anbi2d 3bitr4g ) CEIZABFJZGKZHKZCLZUFFMUGFMDLZNZHAOGAOZPUEUFUGELZUINZHAOG
      AOZPABCDFQABEDFQUDUKUNUEUDUJUMGHAAUDUHULUIUFUGCERSUAUBGHABCDFTGHABEDFTUC
      $.

    $( Equality theorem for isomorphisms.  (Contributed by NM, 17-May-2004.) $)
    isoeq3 $p |- ( S = T ->
          ( H Isom R , S ( A , B ) <-> H Isom R , T ( A , B ) ) ) $=
      ( vx vy wceq wf1o cv wbr cfv wb wral wa wiso breq bibi2d df-isom 2ralbidv
      anbi2d 3bitr4g ) DEIZABFJZGKZHKZCLZUFFMZUGFMZDLZNZHAOGAOZPUEUHUIUJELZNZHA
      OGAOZPABCDFQABCEFQUDUMUPUEUDULUOGHAAUDUKUNUHUIUJDERSUAUBGHABCDFTGHABCEFTU
      C $.

    $( Equality theorem for isomorphisms.  (Contributed by NM, 17-May-2004.) $)
    isoeq4 $p |- ( A = C ->
          ( H Isom R , S ( A , B ) <-> H Isom R , S ( C , B ) ) ) $=
      ( vx vy wceq wf1o cv wbr cfv wb wral wa wiso f1oeq2 raleq df-isom anbi12d
      raleqbi1dv 3bitr4g ) ACIZABFJZGKZHKZDLUFFMUGFMELNZHAOZGAOZPCBFJZUHHCOZGCO
      ZPABDEFQCBDEFQUDUEUKUJUMACBFRUIULGACUHHACSUBUAGHABDEFTGHCBDEFTUC $.

    $( Equality theorem for isomorphisms.  (Contributed by NM, 17-May-2004.) $)
    isoeq5 $p |- ( B = C ->
          ( H Isom R , S ( A , B ) <-> H Isom R , S ( A , C ) ) ) $=
      ( vx vy wceq wf1o cv wbr cfv wb wral wa wiso f1oeq3 anbi1d df-isom
      3bitr4g ) BCIZABFJZGKZHKZDLUDFMUEFMELNHAOGAOZPACFJZUFPABDEFQACDEFQUBUCUGU
      FBCAFRSGHABDEFTGHACDEFTUA $.
  $}

  ${
    $d y z w H $.  $d y z w R $.  $d y z w S $.  $d y z w A $.  $d y z w B $.
    $d x y z w $.
    nfiso.1 $e |- F/_ x H $.
    nfiso.2 $e |- F/_ x R $.
    nfiso.3 $e |- F/_ x S $.
    nfiso.4 $e |- F/_ x A $.
    nfiso.5 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for an isomorphism.  (Contributed by
       NM, 17-May-2004.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.) $)
    nfiso $p |- F/ x H Isom R , S ( A , B ) $=
      ( vy vz cv wbr cfv wral nfcv nfbr nffv wiso wf1o wb wa df-isom nff1o nfbi
      nfral nfan nfxfr ) BCDEFUABCFUBZLNZMNZDOZULFPZUMFPZEOZUCZMBQZLBQZUDALMBCD
      EFUEUKUTAABCFGJKUFUSALBJURAMBJUNUQAAULUMDAULRZHAUMRZSAUOUPEAULFGVATIAUMFG
      VBTSUGUHUHUIUJ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.  $d x y S $.  $d x y H $.
    $( An isomorphism is a one-to-one onto function.  (Contributed by NM,
       27-Apr-2004.) $)
    isof1o $p |- ( H Isom R , S ( A , B ) -> H : A -1-1-onto-> B ) $=
      ( vx vy wiso wf1o cv wbr cfv wb wral df-isom simplbi ) ABCDEHABEIFJZGJZCK
      QELRELDKMGANFANFGABCDEOP $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.  $d x y S $.  $d x y H $.
    $d x y C $.  $d x y D $.
    $( An isomorphism connects binary relations via its function values.
       (Contributed by NM, 27-Apr-2004.) $)
    isorel $p |- ( ( H Isom R , S ( A , B ) /\ ( C e. A /\ D e. A ) ) ->
                 ( C R D <-> ( H ` C ) S ( H ` D ) ) ) $=
      ( vx vy wiso cv wbr cfv wb wral wcel wa wceq fveq2 bibi12d df-isom breq1d
      wf1o simprbi breq1 breq2 breq2d rspc2v mpan9 ) ABEFGJZHKZIKZELZUKGMZULGMZ
      FLZNZIAOHAOZCAPDAPQCDELZCGMZDGMZFLZNZUJABGUCURHIABEFGUAUDUQVCCULELZUTUOFL
      ZNHICDAAUKCRZUMVDUPVEUKCULEUEVFUNUTUOFUKCGSUBTULDRZVDUSVEVBULDCEUFVGUOVAU
      TFULDGSUGTUHUI $.
  $}

  ${
    $d w x y z A $.  $d w z B $.  $d w z C $.  $d w x y z F $.  $d w x y z R $.
    $d w x y z S $.
    $( Express the condition of isomorphism on two strict orders for a
       function's restriction.  (Contributed by Mario Carneiro,
       22-Jan-2015.) $)
    soisores $p |- ( ( ( R Or B /\ S Or C ) /\ ( F : B --> C /\ A C_ B ) ) ->
      ( ( F |` A ) Isom R , S ( A , ( F "" A ) ) <->
        A. x e. A A. y e. A ( x R y -> ( F ` x ) S ( F ` y ) ) ) ) $=
      ( vz vw wa cv wbr cfv wi wral wcel wb weq fveq2 wor wf wss cima cres wiso
      isorel fvres breqan12d adantl biimpd ralrimivva w3a wf1o wfn crn wceq ffn
      bitrd ad2antrl simprr fnssres syl2anc 3adant3 df-ima eqcomi a1i eqeqan12d
      wo simprl simpl3 breq1 breq1d imbi12d breq2 breq2d rspc2va syl21anc con3d
      orim12d simpl1r simpl2l simpl2r ffvelrnd sotrieq syl12anc simpl1l 3imtr4d
      sseldd sylbid dff1o6 sotric impbid bitr4d df-isom sylanbrc 3expia impbid2
      wn syl3anbrc ) DFUAZEGUAZKZDEHUBZCDUCZKZKZCHCUDZFGHCUEZUFZALZBLZFMZXKHNZX
      LHNZGMZOZBCPACPZXJXQABCCXJXKCQZXLCQZKZKZXMXPYBXMXKXINZXLXINZGMZXPCXHXKXLF
      GXIUGYAYEXPRXJXSXTYCXNYDXOGXKCHUHXLCHUHUIUJUSUKULXCXFXRXJXCXFXRUMZCXHXIUN
      ZILZJLZFMZYHXINZYIXINZGMZRZJCPICPXJYFXICUOZXIUPZXHUQZYKYLUQZIJSZOZJCPICPY
      GXCXFYOXRXGHDUOZXEYOXDUUAXCXEDEHURUTXCXDXEVADCHVBVCVDYQYFXHYPHCVEVFVGYFYT
      IJCCYFYHCQZYICQZKZKZYRYHHNZYIHNZUQZYSUUDYRUUHRYFUUBUUCYKUUFYLUUGYHCHUHZYI
      CHUHZVHUJUUEUUFUUGGMZUUGUUFGMZVIZWSZYJYIYHFMZVIZWSZUUHYSUUEUUPUUMUUEYJUUK
      UUOUULUUEUUBUUCXRYJUUKOZYFUUBUUCVJZYFUUBUUCVAZXCXFXRUUDVKZXQUURYHXLFMZUUF
      XOGMZOABYHYICCAISZXMUVBXPUVCXKYHXLFVLUVDXNUUFXOGXKYHHTVMVNBJSZUVBYJUVCUUK
      XLYIYHFVOUVEXOUUGUUFGXLYIHTVPVNVQVRZUUEUUCUUBXRUUOUULOZUUTUUSUVAXQUVGYIXL
      FMZUUGXOGMZOABYIYHCCAJSZXMUVHXPUVIXKYIXLFVLUVJXNUUGXOGXKYIHTVMVNBISZUVHUU
      OUVIUULXLYHYIFVOUVKXOUUFUUGGXLYHHTVPVNVQVRZVTVSUUEXBUUFEQZUUGEQZUUHUUNRXA
      XBXFXRUUDWAZUUEDEYHHXDXEXCXRUUDWBZUUECDYHXDXEXCXRUUDWCZUUSWIZWDZUUEDEYIHU
      VPUUECDYIUVQUUTWIZWDZEUUFUUGGWEWFUUEXAYHDQZYIDQZYSUUQRXAXBXFXRUUDWGZUVRUV
      TDYHYIFWEWFWHWJULIJCXHXIWKWTYFYNIJCCUUEYJUUKYMUUEYJUUKUVFUUEUUHUULVIZWSZY
      SUUOVIZWSZUUKYJUUEUWGUWEUUEYSUUHUUOUULYSUUHOUUEYHYIHTVGUVLVTVSUUEXBUVMUVN
      UUKUWFRUVOUVSUWAEUUFUUGGWLWFUUEXAUWBUWCYJUWHRUWDUVRUVTDYHYIFWLWFWHWMUUDYM
      UUKRYFUUBUUCYKUUFYLUUGGUUIUUJUIUJWNULIJCXHFGXIWOWPWQWR $.
  $}

  ${
    $d R x y a b $.  $d S x y a b $.  $d H x y a b $.  $d A x y a b $.
    $d B x y a b $.
    $( Infer isomorphism from one direction of an order proof for isomorphisms
       between strict orders.  (Contributed by Stefan O'Rear, 2-Nov-2014.) $)
    soisoi $p |- ( ( ( R Or A /\ S Po B ) /\ ( H : A -onto-> B /\
          A. x e. A A. y e. A ( x R y -> ( H ` x ) S ( H ` y ) ) ) ) ->
        H Isom R , S ( A , B ) ) $=
      ( va vb wa cv wbr cfv wi wral weq wcel wn sylan fveq2 wor wpo wfo wf1o wb
      wiso wf1 wf wceq simprl fof wo simpll sotrieq con2bid simprr breq1 breq1d
      imbi12d breq2 breq2d rspc2va ancoms simpllr simplrl ffvelrnd poirr notbid
      syl5ibrcom syl2anc con2d syld ancom2s jaod sylbird con4d ralrimivva dff13
      syl sylanbrc df-f1o sotric po2nr imnan sylibr syl12anc impcon4bid df-isom
      ) CEUAZDFUBZJZCDGUCZAKZBKZELZWMGMZWNGMZFLZNZBCOACOZJZJZCDGUDZHKZIKZELZXDG
      MZXEGMZFLZUEZICOHCOCDEFGUFXBCDGUGZWLXCXBCDGUHZXGXHUIZHIPZNZICOHCOXKXBWLXL
      WKWLWTUJZCDGUKZVSXBXOHICCXBXDCQZXECQZJZJZXNXMYAXNRZXFXEXDELZULZXMRZXBWIXT
      YDYBUEWIWJXAUMZWIXTJZXNYDCXDXEEUNUOSYAXFYEYCYAXFXIYEXBWTXTXFXINZWKWLWTUPZ
      XTWTYHWSYHXDWNELZXGWQFLZNABXDXECCAHPZWOYJWRYKWMXDWNEUQYLWPXGWQFWMXDGTURUS
      BIPZYJXFYKXIWNXEXDEUTYMWQXHXGFWNXEGTVAUSVBVCSZYAXMXIYAWJXHDQZXMXIRZNWIWJX
      AXTVDZYACDXEGYAWLXLWKWLWTXTVEXQVSZXBXRXSUPVFZWJYOJZYPXMXHXHFLZRZDXHFVGZXM
      XIUUAXGXHXHFUQVHVIVJVKVLYAYCXHXGFLZYEXBWTXTYCUUDNZYIWTXSXRUUEXSXRJWTUUEWS
      UUEXEWNELZXHWQFLZNABXEXDCCAIPZWOUUFWRUUGWMXEWNEUQUUHWPXHWQFWMXEGTURUSBHPZ
      UUFYCUUGUUDWNXDXEEUTUUIWQXGXHFWNXDGTVAUSVBVCVMSZYAXMUUDYAWJYOXMUUDRZNYQYS
      YTUUKXMUUBUUCXMUUDUUAXGXHXHFUTVHVIVJVKVLVNVOVPVQHICDGVRVTXPCDGWAVTXBXJHIC
      CYAXFXIYNYAXFRZXNYCULZYPXBWIXTUUMUULUEYFYGXFUUMCXDXEEWBUOSYAXNYPYCYAWJYOX
      NYPNYQYSYTYPXNUUBUUCXNXIUUAXNXGXHXHFXDXEGTURVHVIVJYAYCUUDYPUUJYAWJYOXGDQZ
      UUDYPNZYQYSYACDXDGYRXBXRXSUJVFWJYOUUNJJUUDXIJRUUODXHXGFWCUUDXIWDWEWFVLVNV
      OWGVQHICDEFGWHVT $.
  $}

  ${
    $d x y A $.  $d x y R $.
    $( Identity law for isomorphism.  Proposition 6.30(1) of [TakeutiZaring]
       p. 33.  (Contributed by NM, 27-Apr-2004.) $)
    isoid $p |- ( _I |` A ) Isom R , R ( A , A ) $=
      ( vx vy cid cres wiso wf1o wbr cfv wral f1oi wcel fvresi breqan12d bicomd
      cv wb wa rgen2a df-isom mpbir2an ) AABBEAFZGAAUCHCQZDQZBIZUDUCJZUEUCJZBIZ
      RZDAKCAKALUJCDAUDAMZUEAMZSUIUFUKULUGUDUHUEBAUDNAUENOPTCDAABBUCUAUB $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d x y C $.  $d x y D $.  $d w x y z H $.
    $d w x y z R $.  $d w x y z S $.
    $( Converse law for isomorphism.  Proposition 6.30(2) of [TakeutiZaring]
       p. 33.  (Contributed by NM, 27-Apr-2004.) $)
    isocnv $p |- ( H Isom R , S ( A , B ) -> `' H Isom S , R ( B , A ) ) $=
      ( vx vy vz vw wf1o cv wbr cfv wb wral wa wiso wcel wceq f1ocnvfv2 adantrr
      ccnv f1ocnv adantr adantrl breq12d adantlr wf syl ffvelrn anim12dan breq1
      f1of fveq2 breq1d bibi12d bicom syl6bb breq2d breq2 rspc2va sylan sylanl1
      an32s bitr3d ralrimivva jca df-isom 3imtr4i ) ABEJZFKZGKZCLZVKEMZVLEMZDLZ
      NZGAOFAOZPZBAEUBZJZHKZIKZDLZWBVTMZWCVTMZCLZNZIBOHBOZPABCDEQBADCVTQVSWAWIV
      JWAVRABEUCZUDVSWHHIBBVSWBBRZWCBRZPZPWEEMZWFEMZDLZWDWGVJWMWPWDNVRVJWMPWNWB
      WOWCDVJWKWNWBSWLABWBETUAVJWLWOWCSWKABWCETUEUFUGVJBAVTUHZVRWMWPWGNZVJWAWQW
      JBAVTUMUIWQWMVRWRWQWMPWEARZWFARZPVRWRWQWKWSWLWTBAWBVTUJBAWCVTUJUKVQWRWNVO
      DLZWEVLCLZNZFGWEWFAAVKWESZVQXBXANXCXDVMXBVPXAVKWEVLCULXDVNWNVODVKWEEUNUOU
      PXBXAUQURVLWFSZXAWPXBWGXEVOWOWNDVLWFEUNUSVLWFWECUTUPVAVBVDVCVEVFVGFGABCDE
      VHHIBADCVTVHVI $.

    $( Converse law for isomorphism.  (Contributed by Mario Carneiro,
       30-Jan-2014.) $)
    isocnv2 $p |- ( H Isom R , S ( A , B ) <->
                    H Isom `' R , `' S ( A , B ) ) $=
      ( vy vx wf1o cv wbr cfv wb wral wa ccnv wiso vex brcnv fvex df-isom
      ralcom bibi12i 2ralbii bitr4i anbi2i 3bitr4i ) ABEHZFIZGIZCJZUHEKZUIEKZDJ
      ZLZGAMFAMZNUGUIUHCOZJZULUKDOZJZLZFAMGAMZNABCDEPABUPUREPUOVAUGUOUNFAMGAMVA
      UNFGAAUAUTUNGFAAUQUJUSUMUIUHCGQFQRULUKDUIESUHESRUBUCUDUEFGABCDETGFABUPURE
      TUF $.

    isocnv3.1 $e |- C = ( ( A X. A ) \ R ) $.
    isocnv3.2 $e |- D = ( ( B X. B ) \ S ) $.
    $( Complementation law for isomorphism.  (Contributed by Mario Carneiro,
       9-Sep-2015.) $)
    isocnv3 $p |- ( H Isom R , S ( A , B ) <-> H Isom C , D ( A , B ) ) $=
      ( vx vy cv wbr cfv wb wral wa wiso wcel wn wf1o cxp brxp cdif breqi brdif
      bitri baib sylbir adantl wf f1of ffvelrn anim12dan sylibr sylan syl notbi
      bibi12d syl6rbbr 2ralbidva pm5.32i df-isom 3bitr4i ) ABGUAZJLZKLZEMZVFGNZ
      VGGNZFMZOZKAPJAPZQVEVFVGCMZVIVJDMZOZKAPJAPZQABEFGRABCDGRVEVMVQVEVLVPJKAAV
      EVFASZVGASZQZQZVPVHTZVKTZOVLWAVNWBVOWCVTVNWBOZVEVTVFVGAAUBZMZWDVFVGAAUCVN
      WFWBVNVFVGWEEUDZMWFWBQVFVGCWGHUEVFVGWEEUFUGUHUIUJWAVIVJBBUBZMZVOWCOVEABGU
      KZVTWIABGULWJVTQVIBSZVJBSZQWIWJVRWKVSWLABVFGUMABVGGUMUNVIVJBBUCUOUPVOWIWC
      VOVIVJWHFUDZMWIWCQVIVJDWMIUEVIVJWHFUFUGUHUQUSVHVKURUTVAVBJKABEFGVCJKABCDG
      VCVD $.
  $}

  ${
    $d A x y $.  $d B x y $.  $d H x y $.  $d R x y $.  $d S x y $.
    $( An isomorphism from one well-order to another can be restricted on
       either well-order.  (Contributed by Mario Carneiro, 15-Jan-2013.) $)
    isores2 $p |- ( H Isom R , S ( A , B ) <->
                      H Isom R , ( S i^i ( B X. B ) ) ( A , B ) ) $=
      ( vx vy wf1o cv wbr cfv wb wral wa cxp wiso wcel ffvelrn ralbidva df-isom
      cin wf f1of adantrr adantrl brinxp syl2anc anassrs bibi2d pm5.32i 3bitr4i
      sylan ) ABEHZFIZGIZCJZUNEKZUOEKZDJZLZGAMZFAMZNUMUPUQURDBBOUAZJZLZGAMZFAMZ
      NABCDEPABCVCEPUMVBVGUMVAVFFAUMUNAQZNZUTVEGAVIUOAQZNUSVDUPUMVHVJUSVDLZUMAB
      EUBZVHVJNZVKABEUCVLVMNUQBQZURBQZVKVLVHVNVJABUNERUDVLVJVOVHABUOERUEUQURBBD
      UFUGULUHUISSUJFGABCDETFGABCVCETUK $.
  $}

  ${
    $( An isomorphism from one well-order to another can be restricted on
       either well-order.  (Contributed by Mario Carneiro, 15-Jan-2013.) $)
    isores1 $p |- ( H Isom R , S ( A , B ) <->
                      H Isom ( R i^i ( A X. A ) ) , S ( A , B ) ) $=
      ( wiso cxp cin ccnv isocnv isores2 sylib wf1o wb isof1o isoeq1 sylbi 3syl
      syl mpbid wrel f1orel wceq dfrel2 sylibr impbii ) ABCDEFZABCAAGHZDEFZUGAB
      UHDEIZIZFZUIUGBADUHUJFZULUGBADCUJFZUMABCDEJBADCUJKZLBADUHUJJSUGABEMZEUAZU
      LUINZABCDEOABEUBZUQUKEUCZUREUDZABUHDEUKPQRTUIABCDUKFZUGUIUNVBUIUMUNABUHDE
      JUOUEBADCUJJSUIUPUQVBUGNZABUHDEOUSUQUTVCVAABCDEUKPQRTUF $.
  $}

  ${
    $d H a b c $.  $d R a b c $.  $d S a b c $.  $d K a b c $.  $d A a b c $.
    $d B a b c $.  $d X a b c $.
    $( Induced isomorphism on a subset.  (Contributed by Stefan O'Rear,
       5-Nov-2014.) $)
    isores3 $p |- ( ( H Isom R , S ( A , B ) /\ K C_ A /\ X = ( H "" K ) ) ->
        ( H |` K ) Isom R , S ( K , X ) ) $=
      ( va vb wiso wa wf1o cv wbr cfv wb wral ssralv wcel fvres cima wceq f1of1
      wss cres wf1 f1ores expcom syl5 adantr breqan12d adantll biimprd ralimdva
      wi bibi2d syld anim12d df-isom 3imtr4g impcom isoeq5 syl5ibrcom 3impia )
      ABCDEJZFAUDZGEFUAZUBZFGCDEFUEZJZVEVFKVJVHFVGCDVIJZVFVEVKVFABELZHMZIMZCNZV
      MEOZVNEOZDNZPZIAQZHAQZKFVGVILZVOVMVIOZVNVIOZDNZPZIFQZHFQZKVEVKVFVLWBWAWHV
      LABEUFZVFWBABEUCWIVFWBABFEUGUHUIVFWAVTHFQWHVTHFARVFVTWGHFVFVMFSZKZVTVSIFQ
      ZWGVFVTWLUOWJVSIFARUJWKVSWFIFWKVNFSZKZWFVSWNWEVRVOWJWMWEVRPVFWJWMWCVPWDVQ
      DVMFETVNFETUKULUPUMUNUQUNUQURHIABCDEUSHIFVGCDVIUSUTVAFGVGCDVIVBVCVD $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d x y z w R $.
    $d x y z w S $.  $d x y z w T $.  $d x y z w G $.  $d x y z w H $.
    $( Composition (transitive) law for isomorphism.  Proposition 6.30(3) of
       [TakeutiZaring] p. 33.  (Contributed by NM, 27-Apr-2004.)  (Proof
       shortened by Mario Carneiro, 5-Dec-2016.) $)
    isotr $p |- ( ( H Isom R , S ( A , B ) /\ G Isom S , T ( B , C ) ) ->
               ( G o. H ) Isom R , T ( A , C ) ) $=
      ( vx vy vz vw cv wbr cfv wb wral wa wcel wceq wf1o simpl f1oco syl2anr wf
      ccom wiso f1of ad2antrr simprl ffvelrnd simprr simplrr breq1 fveq2 breq1d
      bibi12d breq2 breq2d rspc2va syl21anc fvco3 syl2anc breq12d bitr4d bibi2d
      2ralbidva biimpd impancom imp jca df-isom anbi12i 3imtr4i ) ABHUAZIMZJMZD
      NZVPHOZVQHOZENZPZJAQIAQZRZBCGUAZKMZLMZENZWFGOZWGGOZFNZPZLBQKBQZRZRZACGHUF
      ZUAZVRVPWPOZVQWPOZFNZPZJAQIAQZRABDEHUGZBCEFGUGZRACDFWPUGWOWQXBWNWEVOWQWDW
      EWMUBVOWCUBABCGHUCUDWDWNXBVOWNWCXBVOWNRZWCXBXEWBXAIJAAXEVPASZVQASZRZRZWAW
      TVRXIWAVSGOZVTGOZFNZWTXIVSBSVTBSWMWAXLPZXIABVPHVOABHUEZWNXHABHUHUIZXEXFXG
      UJZUKXIABVQHXOXEXFXGULZUKVOWEWMXHUMWLXMVSWGENZXJWJFNZPKLVSVTBBWFVSTZWHXRW
      KXSWFVSWGEUNXTWIXJWJFWFVSGUOUPUQWGVTTZXRWAXSXLWGVTVSEURYAWJXKXJFWGVTGUOUS
      UQUTVAXIWRXJWSXKFXIXNXFWRXJTXOXPABVPGHVBVCXIXNXGWSXKTXOXQABVQGHVBVCVDVEVF
      VGVHVIVJVKXCWDXDWNIJABDEHVLKLBCEFGVLVMIJACDFWPVLVN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.  $d x y S $.  $d x y H $.
    $d x y C $.  $d x y D $.
    $( Isomorphisms preserve minimal elements.  Note that ` ( ``' R "" { D } ) `
       is Takeuti and Zaring's idiom for the initial segment
       ` { x | x R D } ` .  Proposition 6.31(1) of [TakeutiZaring] p. 33.
       (Contributed by NM, 19-Apr-2004.) $)
    isomin $p |- ( ( H Isom R , S ( A , B ) /\ ( C C_ A /\ D e. A ) ) ->
               ( ( C i^i ( `' R "" { D } ) ) = (/) <->
               ( ( H "" C ) i^i ( `' S "" { ( H ` D ) } ) ) = (/) ) ) $=
      ( vy vx wcel wa cima wceq wex wrex wbr wb wi syl9r cvv wss csn cin c0 cfv
      wiso ccnv wn cv neq0 ssel wf1o wfn isof1o f1ofn fnbrfvb ex imp31 rexbidva
      3syl vex syl6rbbr fvex eliniseg mp1i anbi12d elin r19.41v 3bitr4g adantrr
      elima breq1 biimpar ad2antll isorel bitrd syl5ibr exp32 com34 imp32 exbii
      reximdvai sylbid df-rex 3bitr4i syl6ibr exlimdv syl5bi syl fnfvima 3expia
      con4d sylan adantrd biimpd ax-mp impd jcad 3imtr4g n0i syl6 impcon4bid )
      ABEFGUFZCAUAZDAJZKZKZCEUGDUBLZUCZUDMZGCLZFUGDGUEZUBLZUCZUDMZXGXOXJXOUHZHU
      IZXNJZHNXGXJUHZHXNUJXGXRXSHXGXRIUIZXHJZICOZXSXGXRXTGUEZXQMZXQXLFPZKZICOZY
      BXCXDXRYGQXEXCXDKZXQXKJZXQXMJZKYDICOZYEKXRYGYHYIYKYJYEYHYKXTXQGPZICOYIYHY
      DYLICXCXDXTCJZYDYLQZXDYMXTAJZXCYNCAXTUKZXCABGULZGAUMZYOYNRABEFGUNZABGUOZY
      RYOYNAXTXQGUPUQUTSURUSIXQGCHVAZVKVBXLTJZYJYEQYHDGVCZFXLXQTUUAVDVEVFXQXKXM
      VGYDYEICVHVIVJXGYFYAICXCXDXEYMYFYARZRXCXDYMXEUUDXDYMYOXCXEUUDRYPXCYOXEUUD
      YFYAXCYOXEKKZYCXLFPZYDUUFYEYCXQXLFVLVMUUEYAXTDEPZUUFXEYAUUGQXCYOEDXTAIVAV
      DVNZABXTDEFGVOZVPVQVRSVSVTWBWCXTXIJZINZYMYAKZINXSYBUUJUULIXTCXHVGZWAIXIUJ
      ZYAICWDWEWFWGWHWLXSUUKXGXPUUNXGUUJXPIXGUUJYCXNJZXPXGUULYCXKJZYCXMJZKUUJUU
      OXGUULUUPUUQXGYMUUPYAXCYRXFYMUUPRZXCYQYRYSYTWIYRXDUURXEYRXDYMUUPACGXTWJWK
      VJWMWNXGYMYAUUQXCXDXEYMYAUUQRZRXCXDYMXEUUSXDYMYOXCXEUUSRYPXCYOXEUUSUUEYAU
      UGUUQUUHUUEUUGUUFUUQUUEUUGUUFUUIWOUUBUUQUUFQUUCFXLYCTXTGVCVDWPWFWCVRSVSVT
      WQWRUUMYCXKXMVGWSXNYCWTXAWGWHXB $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y R $.  $d x y S $.  $d x y H $.
    $d x y D $.
    $( Isomorphisms preserve initial segments.  Proposition 6.31(2) of
       [TakeutiZaring] p. 33.  (Contributed by NM, 20-Apr-2004.) $)
    isoini $p |- ( ( H Isom R , S ( A , B ) /\ D e. A ) ->
               ( H "" ( A i^i ( `' R "" { D } ) ) ) =
               ( B i^i ( `' S "" { ( H ` D ) } ) ) ) $=
      ( vx vy wcel wa ccnv cfv csn cima cin cv wbr wrex wb syl6bb wiso cab elin
      wceq crn wf1o wfo isof1o f1ofo forn eleq2d 3syl f1ofn fvelrnb bitr3d fvex
      wfn cvv eliniseg mp1i anbi12d adantr anbi2d syl5bb anbi1d anass adantl wi
      vex isorel syl fnbrfvb bicomd sylan adantrr ancom breq1 bitri exp32 com23
      pm5.32i imp pm5.32d bitrd rexbidv2 r19.41v bitr4d abbi2dv dfima2 syl6reqr
      ) ABDEFUAZCAIZJZBEKCFLZMNZOZGPZHPZFQZGADKCMNZOZRZHUBFXANWMXBHWPWRWPIWRBIZ
      WRWOIZJZWMXBWRBWOUCWMXEWQFLZWRUDZGARZWRWNEQZJZXBWKXEXJSWLWKXCXHXDXIWKWRFU
      EZIZXCXHWKABFUFZABFUGZXLXCSABDEFUHZABFUIXNXKBWRABFUJUKULWKXMFAUQZXLXHSXOA
      BFUMZGAWRFUNULUOWNURIXDXISWKCFUPEWNWRURHVIUSUTVAVBWMXBXGXIJZGARXJWMWSXRGX
      AAWMWQXAIZWSJZWQAIZWQCDQZWSJZJZYAXRJWLXTYDSWKWLXTYAYBJZWSJYDWLXSYEWSXSYAW
      QWTIZJWLYEWQAWTUCWLYFYBYADCWQAGVIUSVCVDVEYAYBWSVFTVGWMYAYCXRWKWLYAYCXRSZV
      HWKYAWLYGWKYAWLYGWKYAWLJJZYCXFWNEQZXGJZXRYHYBYIWSXGABWQCDEFVJWKYAWSXGSZWL
      WKXPYAYKWKXMXPXOXQVKXPYAJXGWSAWQWRFVLVMVNVOVAYJXGYIJXRYIXGVPXGYIXIXFWRWNE
      VQWAVRTVSVTWBWCWDWEXGXIGAWFTWGVDWHGHFXAWIWJ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y H $.
    $d x y R $.  $d x y S $.
    isoini2.1 $e |- C = ( A i^i ( `' R "" { X } ) ) $.
    isoini2.2 $e |- D = ( B i^i ( `' S "" { ( H ` X ) } ) ) $.
    $( Isomorphisms are isomorphisms on their initial segments.  (Contributed
       by Mario Carneiro, 29-Mar-2014.) $)
    isoini2 $p |- ( ( H Isom R , S ( A , B ) /\ X e. A ) ->
                    ( H |` C ) Isom R , S ( C , D ) ) $=
      ( vx vy wiso wcel wf1o wbr cfv wb wral cima wa cres cv wf1 wss isof1o syl
      f1of1 adantr ccnv csn inss1 eqsstri f1ores sylancl isoini imaeq2i 3eqtr4g
      cin wceq f1oeq3 mpbid df-isom simprbi ssralv mpsyl fvres breqan12d bibi2d
      ralimdv ralbidva ralbiia sylibr sylanbrc ) ABEFGMZHANZUAZCDGCUBZOZKUCZLUC
      ZEPZVTVRQZWAVRQZFPZRZLCSZKCSZCDEFVRMVQCGCTZVROZVSVQABGUDZCAUEZWJVOWKVPVOA
      BGOZWKABEFGUFABGUHUGUICAEUJHUKTZUSZAIAWNULUMZABCGUNUOVQWIDUTWJVSRVQGWOTBF
      UJHGQUKTUSWIDABHEFGUPCWOGIUQJURWIDCVRVAUGVBVQWBVTGQZWAGQZFPZRZLCSZKCSZWHW
      LVQXAKASZXBWPWLVQWTLASZKASZXCWPVOXEVPVOWMXEKLABEFGVCVDUIWLXDXAKAWTLCAVEVJ
      VFXAKCAVEVFWGXAKCVTCNZWFWTLCXFWACNZUAWEWSWBXFXGWCWQWDWRFVTCGVGWACGVGVHVIV
      KVLVMKLCDEFVRVCVN $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w x y z H $.  $d w x y z ph $.
    $d w x y z R $.  $d w x y z S $.
    isofrlem.1 $e |- ( ph -> H Isom R , S ( A , B ) ) $.
    isofrlem.2 $e |- ( ph -> ( H "" x ) e. _V ) $.
    $( Lemma for ~ isofr .  (Contributed by NM, 29-Apr-2004.)  (Revised by
       Mario Carneiro, 18-Nov-2014.) $)
    isofrlem $p |- ( ph -> ( S Fr B -> R Fr A ) ) $=
      ( vy vw vz cv c0 wa cima wceq wi syl wcel wfr wss wne ccnv wrex wf1o wiso
      csn cin wal isof1o wfn f1ofn wex n0 w3a cfv fnfvima 3expia exlimdv syl5bi
      ne0i expimpd wfo f1ofo crn imassrn forn syl5sseq jctild dffr3 sseq1 neeq1
      cvv anbi12d ineq1 eqeq1d rexeqbi1dv imbi12d spcgv syl5d wfun adantr simpl
      f1ofun fvelima syl2an simpr wb ssel imdistani isomin sneq ineq2d sylan9bb
      imaeq2d syl5ibr exp42 imp com3l com4t reximdvai mpd rexlimdvaa ex adantrd
      a2d syld alrimdv syl6ibr ) ADFUAZBMZCUBZXLNUCZOZXLEUDJMZUHPUINQZJXLUEZRZB
      UJCEUAAXKXSBAXKXOGXLPZFUDZKMZUHZPZUIZNQZKXTUEZRXSAXOXTDUBZXTNUCZOZXKYGACD
      GUFZXOYJRACDEFGUGZYKHCDEFGUKSZYKXOYIYHYKGCULZXOYIRCDGUMYNXMXNYIXNXPXLTZJU
      NYNXMOZYIJXLUOYPYOYIJYNXMYOYIYNXMYOUPXPGUQZXTTYICXLGXPURXTYQVBSUSUTVAVCSY
      KCDGVDZYHCDGVEYRGVFXTDGXLVGCDGVHVISVJSXKLMZDUBZYSNUCZOZYSYDUIZNQZKYSUEZRZ
      LUJZAYJYGRZLKDFVKAXTVNTUUGUUHRIUUFUUHLXTVNYSXTQZUUBYJUUEYGUUIYTYHUUAYIYSX
      TDVLYSXTNVMVOUUDYFKYSXTUUIUUCYENYSXTYDVPVQVRVSVTSVAWAAXOYGXRAXMYGXRRZXNAX
      MUUJAXMOZYFXRKXTUUKYBXTTZYFOZOZYQYBQZJXLUEZXRUUKGWBZUULUUPUUMUUKYKUUQAYKX
      MYMWCCDGWESUULYFWDJYBXLGWFWGUUNUUOXQJXLUUKUUMYOUUOXQRRYOUUOUUKUUMXQUUKYOU
      UOUUMXQRZAXMYOUUOUURRRAXMYOUUOUURUUMXQAXMYOOZOZUUOOYFUULYFWHUUTXQXTYAYQUH
      ZPZUIZNQZUUOYFAYLXMXPCTZOXQUVDWIUUSHXMYOUVEXLCXPWJWKCDXLXPEFGWLWGUUOUVCYE
      NUUOUVBYDXTUUOUVAYCYAYQYBWMWPWNVQWOWQWRWSWTXAWSXBXCXDXEXFXGXHXIBJCEVKXJ
      $.

    $( Lemma for ~ isose .  (Contributed by Mario Carneiro, 23-Jun-2015.) $)
    isoselem $p |- ( ph -> ( R Se A -> S Se B ) ) $=
      ( vy vz cv csn cima cin cvv wcel wral wi wceq wse ccnv cfv dfse2 r19.21bi
      biimpi expcom adantl imaeq2 eleq1d imbi2d vtoclg com12 adantr wiso isoini
      wa sylan sylibd syld ralrimdva crn wf1o wfn wb isof1o sneq imaeq2d ineq2d
      f1ofn ralrn 4syl wfo f1ofo forn raleqdv bitr3d syl6ibr ) ACEUAZDFUBZJLZMZ
      NZOZPQZJDRZDFUAAVSDVTKLZGUCZMZNZOZPQZKCRZWFAVSWLKCAWGCQZUQZVSCEUBWGMNOZPQ
      ZWLWNVSWQSAVSWNWQVSWQKCVSWQKCRKCEUDUFUEUGUHWOWQGWPNZPQZWLAWQWSSWNWQAWSAGB
      LZNZPQZSAWSSBWPPWTWPTZXBWSAXCXAWRPWTWPGUIUJUKIULUMUNWOWRWKPACDEFGUOZWNWRW
      KTHCDWGEFGUPURUJUSUTVAAWEJGVBZRZWMWFAXDCDGVCZGCVDXFWMVEHCDEFGVFZCDGVJWEWL
      JKCGWAWHTZWDWKPXIWCWJDXIWBWIVTWAWHVGVHVIUJVKVLAWEJXEDAXDXGCDGVMXEDTHXHCDG
      VNCDGVOVLVPVQUSJDFUDVR $.
  $}

  ${
    $d x A $.  $d x B $.  $d x H $.  $d x R $.  $d x S $.  $d x V $.
    $( An isomorphism preserves well-foundedness.  Proposition 6.32(1) of
       [TakeutiZaring] p. 33.  (Contributed by NM, 30-Apr-2004.)  (Revised by
       Mario Carneiro, 18-Nov-2014.) $)
    isofr $p |- ( H Isom R , S ( A , B ) -> ( R Fr A <-> S Fr B ) ) $=
      ( vx wiso wfr ccnv id wf1o wfun cima cvv wcel isof1o f1ofun funimaex 3syl
      isofrlem wi isocnv cv vex syl impbid ) ABCDEGZACHZBDHZUGBADCEIZGZUHUIUAAB
      CDEUBUKFBADCUJUKJUKBAUJKUJLUJFUCZMNOBADCUJPBAUJQUJULFUDZRSTUEUGFABCDEUGJU
      GABEKELEULMNOABCDEPABEQEULUMRSTUF $.

    $( An isomorphism preserves set-like relations.  (Contributed by Mario
       Carneiro, 23-Jun-2015.) $)
    isose $p |- ( H Isom R , S ( A , B ) -> ( R Se A <-> S Se B ) ) $=
      ( vx wiso wse wf1o wfun cima cvv wcel isof1o f1ofun vex funimaex isoselem
      id cv 3syl ccnv isocnv 4syl impbid ) ABCDEGZACHBDHUFFABCDEUFSUFABEIEJEFTZ
      KLMABCDENABEOEUGFPZQUARUFFBADCEUBZABCDEUCZUFBADCUIGBAUIIUIJUIUGKLMUJBADCU
      INBAUIOUIUGUHQUDRUE $.

    $( A weak form of ~ isofr that does not need Replacement.  (Contributed by
       Mario Carneiro, 18-Nov-2014.) $)
    isofr2 $p |- ( ( H Isom R , S ( A , B ) /\ B e. V ) ->
                   ( S Fr B -> R Fr A ) ) $=
      ( vx wiso wcel wa simpl cv cima wss cvv crn imassrn wf1o wf isof1o syl5ss
      f1of frn 3syl ssexg sylan isofrlem ) ABCDEHZBFIZJGABCDEUHUIKUHEGLZMZBNUIU
      KOIUHUKEPZBEUJQUHABERABESULBNABCDETABEUBABEUCUDUAUKBFUEUFUG $.
  $}

  ${
    $d H a b c d e f $.  $d R a b c d e f $.  $d S a b c d e f $.
    $d A a b c d e f $.  $d B a b c d e f $.
    $( Lemma for ~ isopo .  (Contributed by Stefan O'Rear, 16-Nov-2014.) $)
    isopolem $p |- ( H Isom R , S ( A , B ) -> ( S Po B -> R Po A ) ) $=
      ( va vb vc vd ve vf cv wbr wa wi wral wcel ex wb anbi12d wiso wpo w3a cfv
      wn wf1o isof1o f1of ffvelrn 3anim123d 3syl imp breq12 anidms notbid breq1
      wf wceq anbi1d imbi12d breq2 imbi1d anbi2d rspc3v syl simpl simpr1 isorel
      syl12anc simpr2 simpr3 sylibrd com23 imp31 ralrimivvva df-po 3imtr4g ) AB
      CDEUAZFLZVSDMZUEZVSGLZDMZWBHLZDMZNZVSWDDMZOZNZHBPGBPFBPZILZWKCMZUEZWKJLZC
      MZWNKLZCMZNZWKWPCMZOZNZKAPJAPIAPZBDUBACUBVRWJXBVRWJNXAIJKAAAVRWJWKAQZWNAQ
      ZWPAQZUCZXAVRXFWJXAVRXFWJXAOVRXFNZWJWKEUDZXHDMZUEZXHWNEUDZDMZXKWPEUDZDMZN
      ZXHXMDMZOZNZXAXGXHBQZXKBQZXMBQZUCZWJXROVRXFYBVRABEUFABEUQZXFYBOABCDEUGABE
      UHYCXCXSXDXTXEYAYCXCXSABWKEUIRYCXDXTABWNEUIRYCXEYAABWPEUIRUJUKULWIXRXJXHW
      BDMZWENZXHWDDMZOZNXJXLXKWDDMZNZYFOZNFGHXHXKXMBBBVSXHURZWAXJWHYGYKVTXIYKVT
      XISVSXHVSXHDUMUNUOYKWFYEWGYFYKWCYDWEVSXHWBDUPUSVSXHWDDUPUTTWBXKURZYGYJXJY
      LYEYIYFYLYDXLWEYHWBXKXHDVAWBXKWDDUPTVBVCWDXMURZYJXQXJYMYIXOYFXPYMYHXNXLWD
      XMXKDVAVCWDXMXHDVAUTVCVDVEXGWMXJWTXQXGWLXIXGVRXCXCWLXISVRXFVFZVRXCXDXEVGZ
      YOABWKWKCDEVHVIUOXGWRXOWSXPXGWOXLWQXNXGVRXCXDWOXLSYNYOVRXCXDXEVJZABWKWNCD
      EVHVIXGVRXDXEWQXNSYNYPVRXCXDXEVKZABWNWPCDEVHVITXGVRXCXEWSXPSYNYOYQABWKWPC
      DEVHVIUTTVLRVMVNVORFGHBDVPIJKACVPVQ $.

    $( An isomorphism preserves partial ordering.  (Contributed by Stefan
       O'Rear, 16-Nov-2014.) $)
    isopo $p |- ( H Isom R , S ( A , B ) -> ( R Po A <-> S Po B ) ) $=
      ( wiso wpo ccnv wi isocnv isopolem syl impbid ) ABCDEFZACGZBDGZNBADCEHZFO
      PIABCDEJBADCQKLABCDEKM $.

    $( Lemma for ~ isoso .  (Contributed by Stefan O'Rear, 16-Nov-2014.) $)
    isosolem $p |- ( H Isom R , S ( A , B ) -> ( S Or B -> R Or A ) ) $=
      ( va vb vc vd wpo cv wbr weq w3o wral wa wor wcel wceq 3orbi123d isopolem
      wiso cfv wi wf1o wf isof1o f1of ffvelrn ex anim12d 3syl breq1 eqeq1 breq2
      imp eqeq2 rspc2v syl isorel wf1 f1of1 f1fveq sylan bicomd ancom2s sylibrd
      wb ralrimdvva df-so 3imtr4g ) ABCDEUBZBDJZFKZGKZDLZFGMZVOVNDLZNZGBOFBOZPA
      CJZHKZIKZCLZHIMZWCWBCLZNZIAOHAOZPBDQACQVLVMWAVTWHABCDEUAVLVTWGHIAAVLWBARZ
      WCARZPZPZVTWBEUCZWCEUCZDLZWMWNSZWNWMDLZNZWGWLWMBRZWNBRZPZVTWRUDVLWKXAVLAB
      EUEZABEUFZWKXAUDABCDEUGZABEUHXCWIWSWJWTXCWIWSABWBEUIUJXCWJWTABWCEUIUJUKUL
      UPVSWRWMVODLZWMVOSZVOWMDLZNFGWMWNBBVNWMSVPXEVQXFVRXGVNWMVODUMVNWMVOUNVNWM
      VODUOTVOWNSXEWOXFWPXGWQVOWNWMDUOVOWNWMUQVOWNWMDUMTURUSWLWDWOWEWPWFWQABWBW
      CCDEUTWLWPWEVLABEVAZWKWPWEVHVLXBXHXDABEVBUSABWBWCEVCVDVEVLWJWIWFWQVHABWCW
      BCDEUTVFTVGVIUKFGBDVJHIACVJVK $.

    $( An isomorphism preserves strict ordering.  (Contributed by Stefan
       O'Rear, 16-Nov-2014.) $)
    isoso $p |- ( H Isom R , S ( A , B ) -> ( R Or A <-> S Or B ) ) $=
      ( wiso wor ccnv wi isocnv isosolem syl impbid ) ABCDEFZACGZBDGZNBADCEHZFO
      PIABCDEJBADCQKLABCDEKM $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y R $.  $d x y z w S $.
    $d x y z w H $.
    $( An isomorphism preserves well-ordering.  Proposition 6.32(3) of
       [TakeutiZaring] p. 33.  (Contributed by NM, 30-Apr-2004.)  (Revised by
       Mario Carneiro, 18-Nov-2014.) $)
    isowe $p |- ( H Isom R , S ( A , B ) -> ( R We A <-> S We B ) ) $=
      ( wiso wfr wor wa wwe isofr isoso anbi12d df-we 3bitr4g ) ABCDEFZACGZACHZ
      IBDGZBDHZIACJBDJPQSRTABCDEKABCDELMACNBDNO $.

    $( A weak form of ~ isowe that does not need Replacement.  (Contributed by
       Mario Carneiro, 18-Nov-2014.) $)
    isowe2 $p |- ( ( H Isom R , S ( A , B ) /\ A. x ( H "" x ) e. _V ) ->
                   ( S We B -> R We A ) ) $=
      ( vy wiso cv cima cvv wcel wal wa wfr wor wwe simpl weq df-we isofrlem wi
      imaeq2 eleq1d spv adantl isosolem adantr anim12d 3imtr4g ) BCDEFHZFAIZJZK
      LZAMZNZCEOZCEPZNBDOZBDPZNCEQBDQUPUQUSURUTUPGBCDEFUKUORUOFGIZJZKLZUKUNVCAG
      AGSUMVBKULVAFUCUDUEUFUAUKURUTUBUOBCDEFUGUHUICETBDTUJ $.
  $}

  ${
    $d x y z w v u A $.  $d x y v u B $.  $d x y z w v u H $.
    $d x y z w v u R $.  $d v u S $.
    $( Any one-to-one onto function determines an isomorphism with an induced
       relation ` S ` .  Proposition 6.33 of [TakeutiZaring] p. 34.
       (Contributed by NM, 30-Apr-2004.) $)
    f1oiso $p |- ( ( H : A -1-1-onto-> B /\ S = { <. z , w >. |
     E. x e. A E. y e. A ( ( z = ( H ` x ) /\ w = ( H ` y ) ) /\ x R y ) } ) ->
                  H Isom R , S ( A , B ) ) $=
      ( vv vu cv cfv wceq wa wbr wrex wb wcel anbi1d wf1o copab wral wiso simpl
      wf1 f1of1 cop df-br eleq2 eqeq1 2rexbidv anbi2d opelopab weq anass f1fveq
      fvex equcom syl6bb anassrs syl5bb rexbidv r19.42v rexbidva breq1 ceqsrexv
      adantl bitrd breq2 sylan9bb anandis sylan9bbr an32s syl5rbb sylan df-isom
      ralrimivva sylanbrc ) EFIUAZHCLZALZIMZNZDLZBLZIMZNZOZWBWFGPZOZBEQAEQZCDUB
      ZNZOVTJLZKLZGPZWOIMZWPIMZHPZRZKEUCJEUCZEFGHIUDVTWNUEVTEFIUFZWNXBEFIUGXCWN
      OZXAJKEEWTWRWSUHZHSZXDWOESZWPESZOZOWQWRWSHUIXCXIWNXFWQRWNXFXEWMSZXCXIOZWQ
      HWMXEUJXJWRWCNZWSWGNZOZWJOZBEQZAEQZXKWQWLXLWHOZWJOZBEQAEQXQCDWRWSWOIURWPI
      URWAWRNZWKXSABEEXTWIXRWJXTWDXLWHWAWRWCUKTTULWEWSNZXSXOABEEYAXRXNWJYAWHXMX
      LWEWSWGUKUMTULUNXCXGXHXQWQRXCXGOZXQXMWOWFGPZOZBEQZXCXHOZWQYBXQAJUOZXMWJOZ
      BEQZOZAEQZYEYBXPYJAEYBWBESZOZXPYGYHOZBEQYJYMXOYNBEXOXLYHOYMYNXLXMWJUPYMXL
      YGYHXCXGYLXLYGRXCXGYLOOXLJAUOYGEFWOWBIUQJAUSUTVATVBVCYGYHBEVDUTVEXGYKYERX
      CYIYEAWOEYGYHYDBEYGWJYCXMWBWOWFGVFUMVCVGVHVIYFYEBKUOZYCOZBEQZWQYFYDYPBEYF
      WFESZOXMYOYCXCXHYRXMYORXCXHYROOXMKBUOYOEFWPWFIUQKBUSUTVATVEXHYQWQRXCYCWQB
      WPEWFWPWOGVJVGVHVIVKVLVBVMVNVOVRVPJKEFGHIVQVS $.
  $}

  ${
    $d A w x y z $.  $d B w x y z $.  $d H w x y z $.  $d R w x y z $.
    f1oiso2.1 $e |- S = { <. x , y >. |
      ( ( x e. B /\ y e. B ) /\ ( `' H ` x ) R ( `' H ` y ) ) } $.
    $( Any one-to-one onto function determines an isomorphism with an induced
       relation ` S ` .  (Contributed by Mario Carneiro, 9-Mar-2013.) $)
    f1oiso2 $p |- ( H : A -1-1-onto-> B -> H Isom R , S ( A , B ) ) $=
      ( vz vw cv cfv wceq wa wbr wrex wcel 3adant3 eqcomd syl2anc wf1o wiso w3a
      copab ccnv f1ocnvdm adantrr f1ocnvfv2 anim12dan simp3 fveq2 eqeq2d anbi2d
      adantrl breq2 anbi12d rspcev syl12anc anbi1d breq1 rexbidv 3expib simp3ll
      simp1 simp2l f1of ffvelrnda eqeltrd simp3lr simp2r simp3r wi f1ocnvfv mpd
      3brtr4d jca31 3exp rexlimdvv impbid opabbidv syl5eq f1oiso mpdan ) CDGUAZ
      FAKZIKZGLZMZBKZJKZGLZMZNZWFWJEOZNZJCPZICPZABUDZMCDEFGUBWDFWEDQZWIDQZNZWEG
      UEZLZWIXBLZEOZNZABUDWRHWDXFWQABWDXFWQWDXAXEWQWDXAXEUCZXCCQZWEXCGLZMZWLNZX
      CWJEOZNZJCPZWQWDXAXHXEWDWSXHWTCDWEGUFUGRXGXDCQZXJWIXDGLZMZNZXEXNWDXAXOXEW
      DWTXOWSCDWIGUFUNRWDXAXRXEWDWSXJWTXQWDWSNXIWECDWEGUHSWDWTNXPWICDWIGUHSUIRW
      DXAXEUJXMXRXENJXDCWJXDMZXKXRXLXEXSWLXQXJXSWKXPWIWJXDGUKULUMWJXDXCEUOUPUQU
      RWPXNIXCCWFXCMZWOXMJCXTWMXKWNXLXTWHXJWLXTWGXIWEWFXCGUKULUSWFXCWJEUTUPVAUQ
      TVBWDWOXFIJCCWDWFCQZWJCQZNZWOXFWDYCWOUCZWSWTXEYDWEWGDWHWLWNWDYCVCZYDWDYAW
      GDQWDYCWOVDZWDYAYBWOVEZWDCDWFGCDGVFZVGTVHYDWIWKDWHWLWNWDYCVIZYDWDYBWKDQYF
      WDYAYBWOVJZWDCDWJGYHVGTVHYDWFWJXCXDEWDYCWMWNVKYDWGWEMZXCWFMZYDWEWGYESYDWD
      YAYKYLVLYFYGCDWFWEGVMTVNYDWKWIMZXDWJMZYDWIWKYISYDWDYBYMYNVLYFYJCDWJWIGVMT
      VNVOVPVQVRVSVTWAIJABCDEFGWBWC $.
  $}

  ${
    $d z w R $.  $d x y z w S $.  $d z w A $.  $d z w B $.  $d x y z w F $.
    f1owe.1 $e |- R = { <. x , y >. | ( F ` x ) S ( F ` y ) } $.
    $( Well-ordering of isomorphic relations.  (Contributed by NM,
       4-Mar-1997.) $)
    f1owe $p |- ( F : A -1-1-onto-> B -> ( S We B -> R We A ) ) $=
      ( vz vw wf1o wwe cv wbr cfv wb wral weq fveq2 breq1d breq2d brabg wa wiso
      rgen2a df-isom isowe sylbir mpan2 biimprd ) CDGKZCELZDFLZUKIMZJMZENUNGOZU
      OGOZFNZPZJCQICQZULUMPZUSIJCAMZGOZBMZGOZFNUPVEFNURABUNUOCCEAIRVCUPVEFVBUNG
      STBJRVEUQUPFVDUOGSUAHUBUEUKUTUCCDEFGUDVAIJCDEFGUFCDEFGUGUHUIUJ $.
  $}

  ${
    $d A a b c $.  $d R b c $.  $d F a b c $.
    $( A set-like well-ordering has no nontrivial automorphisms.  (Contributed
       by Stefan O'Rear, 16-Nov-2014.)  (Revised by Mario Carneiro,
       25-Jun-2015.) $)
    weniso $p |- ( ( R We A /\ R Se A /\ F Isom R , R ( A , A ) ) ->
        F = ( _I |` A ) ) $=
      ( va vc vb wceq cfv wral wn wbr wa syl wcel wi fveq2 id eqeq12d wb adantr
      wwe wse wiso w3a cid cres cv crab c0 wne wrex rabn0 rexnal bitri wreu wss
      simpl1 simpl2 ssrab2 a1i simpr wereu2 syl22anc reurex notbid elrab ralrab
      ex con34b bicomi ralbii wf1o wf simpl3 isof1o f1of ffvelrnd breq1 imbi12d
      simprl rspcv com23 f1of1 f1fveq syl12anc pm2.21 ad2antll sylbid syld ccnv
      imp wf1 f1ocnv 3syl isorel f1ocnvfv2 syl2anc breq1d bitr2d biimpa simplrr
      sylc adantl fveq2d 3eqtr3d wo simprr weso sotrieq con2bid mpbird mpjaodan
      wor syl5bi rexlimdv syl5bir pm2.18d fvresi biimprd ralimia 3ad2ant3 f1ofn
      eqeq2d wfn fnresi eqfnfv ) ABUAZABUBZAABBCUCZUDZCUEAUFZGZDUGZCHZYMYKHZGZD
      AIZYJYNYMGZDAIZYQYJYSYSJZYRJZDAUHZUIUJZYJYSUUCUUADAUKYTUUADAULYRDAUMUNYJU
      UCEUGZFUGZBKZJZEUUBIZFUUBUKZYSYJUUCUUIYJUUCLZUUHFUUBUOZUUIUUJYGYHUUBAUPZU
      UCUUKYGYHYIUUCUQYGYHYIUUCURUULUUJUUADAUSUTYJUUCVAFEAUUBBVBVCUUHFUUBVDMVHY
      JUUHYSFUUBUUEUUBNUUEANZUUECHZUUEGZJZLZYJUUHYSOZUUAUUPDUUEAYMUUEGZYRUUOUUS
      YNUUNYMUUEYMUUECPUUSQRVEVFYJUUQUURUUHUUFUUDCHZUUDGZOZEAIZYJUUQLZYSUUHUVAJ
      ZUUGOZEAIUVCUUAUVEUUGEDAYMUUDGZYRUVAUVGYNUUTYMUUDYMUUDCPUVGQRVEVGUVFUVBEA
      UVBUVFUUFUVAVIVJVKUNUVDUUNUUEBKZUVCYSOUUEUUNBKZUVDUVHLUVCUUNCHZUUNGZYSUVD
      UVHUVCUVKOUVDUVCUVHUVKUVDUUNANZUVCUVHUVKOZOUVDAAUUECUVDAACVLZAACVMUVDYIUV
      NYGYHYIUUQVNZAABBCVOZMZAACVPMYJUUMUUPVTZVQZUVBUVMEUUNAUUDUUNGZUUFUVHUVAUV
      KUUDUUNUUEBVRUVTUUTUVJUUDUUNUUDUUNCPUVTQRVSWAMWBWKUVDUVKYSOUVHUVDUVKUUOYS
      UVDAACWLZUVLUUMUVKUUOSUVDUVNUWAUVQAACWCMUVSUVRAAUUNUUECWDWEUUPUUOYSOYJUUM
      UUOYSWFZWGWHTWIUVDUVILZUVCUUECWJZHZCHZUWEGZYSUWCUWEANZUWEUUEBKZUVCUWGOUVD
      UWHUVIUVDAAUUEUWDUVDUVNAAUWDVLAAUWDVMUVQAACWMAAUWDVPWNUVRVQZTUVDUVIUWIUVD
      UWIUWFUUNBKZUVIUVDYIUWHUUMUWIUWKSUVOUWJUVRAAUWEUUEBBCWOWEUVDUWFUUEUUNBUVD
      UVNUUMUWFUUEGZUVQUVRAAUUECWPWQZWRWSWTUWHUVCUWIUWGUVBUWIUWGOEUWEAUUDUWEGZU
      UFUWIUVAUWGUUDUWEUUEBVRUWNUUTUWFUUDUWEUUDUWECPUWNQRVSWAWBXBUVDUWGYSOUVIUV
      DUWGYSUVDUWGLZUUPUUOYSYJUUMUUPUWGXAUWOUWFCHZUWFUUNUUEUWGUWPUWFGUVDUWFUWEC
      PXCUVDUWPUUNGUWGUVDUWFUUECUWMXDTUVDUWLUWGUWMTXEUWBXBVHTWIUVDUVHUVIXFZUUPY
      JUUMUUPXGUVDUUOUWQUVDABXMZUVLUUMUUOUWQJSUVDYGUWRYGYHYIUUQUQABXHMUVSUVRAUU
      NUUEBXIWEXJXKXLXNVHXNXOWIXPXQYRYPDAYMANZYPYRUWSYOYMYNAYMXRYCXSXTMYJCAYDZY
      KAYDZYLYQSYJUVNUWTYIYGUVNYHUVPYAAACYBMUXAYJAYEUTDACYKYFWQXK $.

    $( Thus, there is at most one isomorphism between any two set-like
       well-ordered classes.  Class version of ~ wemoiso .  (Contributed by
       Mario Carneiro, 25-Jun-2015.) $)
    weisoeq $p |- ( ( ( R We A /\ R Se A ) /\
      ( F Isom R , S ( A , B ) /\ G Isom R , S ( A , B ) ) ) -> F = G ) $=
      ( wwe wse wa wiso wceq ccnv ccom cid cres wf1 wf1o isof1o f1of1 3syl id
      isocnv isotr syl2anr weniso sylan2 simprl simprr f1eqcocnv syl2anc mpbird
      3expa wb ) ACGZACHZIZABCDEJZABCDFJZIZIZEFKZELZFMZNAOKZUSUPAACCVCJZVDURURB
      ADCVBJVEUQURUAABCDEUBABACDCVBFUCUDUNUOVEVDACVCUEULUFUTABEPZABFPZVAVDUMUTU
      QABEQVFUPUQURUGABCDERABESTUTURABFQVGUPUQURUHABCDFRABFSTABEFUIUJUK $.

    $( Thus, there is at most one isomorphism between any two set-like
       well-ordered classes.  Class version of ~ wemoiso2 .  (Contributed by
       Mario Carneiro, 25-Jun-2015.) $)
    weisoeq2 $p |- ( ( ( S We B /\ S Se B ) /\
      ( F Isom R , S ( A , B ) /\ G Isom R , S ( A , B ) ) ) -> F = G ) $=
      ( wwe wse wa wiso wceq ccnv isocnv anim12i weisoeq wrel wf1o isof1o 3syl
      f1orel sylan2 wb simprl simprr cnveqb syl2anc mpbird ) BDGBDHIZABCDEJZABC
      DFJZIZIZEFKZELZFLZKZUKUHBADCUNJZBADCUOJZIUPUIUQUJURABCDEMABCDFMNBADCUNUOO
      UAULEPZFPZUMUPUBULUIABEQUSUHUIUJUCABCDERABETSULUJABFQUTUHUIUJUDABCDFRABFT
      SEFUEUFUG $.
  $}

  ${
    $d w x y z A $.  $d w x y z F $.  $d w V $.  $d w x y X $.
    knatar.1 $e |- X = |^| { z e. ~P A | ( F ` z ) C_ z } $.
    $( The Knaster-Tarski theorem says that every monotone function over a
       complete lattice has a (least) fixpoint.  Here we specialize this
       theorem to the case when the lattice is the powerset lattice ` ~P A ` .
       (Contributed by Mario Carneiro, 11-Jun-2015.) $)
    knatar $p |- ( ( A e. V /\ ( F ` A ) C_ A /\
        A. x e. ~P A A. y e. ~P x ( F ` y ) C_ ( F ` x ) ) ->
      ( X C_ A /\ ( F ` X ) = X ) ) $=
      ( vw wcel cfv wss cv cpw wral wceq fveq2 sylibr rspcv sylc w3a crab pwidg
      cint 3ad2ant1 simp2 id sseq12d intminss syl2anc syl5eqss wi wa adantl vex
      elpw2 simprl simpl3 pweq sseq2d raleqbidv sseq1d sstrd ralrimiva ssintrab
      simprr expr cbvrabv inteqi eqtri syl6sseqr elpw2g mpbird simp3 fvex eqssd
      wb elpw jca ) DFJZDEKZDLZBMZEKZAMZEKZLZBWENZOZADNZOZUAZGDLZGEKZGPWLGCMZEK
      ZWOLZCWJUBZUDZDHWLDWJJZWBWSDLVTWBWTWKDFUCUEZVTWBWKUFZWQWBCDWJWODPZWPWAWOD
      WODEQXCUGUHUIUJUKZWLWNGWLWNIMZEKZXELZIWJUBZUDZGWLXGWNXELZULZIWJOWNXILWLXK
      IWJWLXEWJJZXGXJWLXLXGUMZUMZWNXFXEXNGXENZJZWDXFLZBXOOZWNXFLZXNGXELXPXNGWSX
      EHXMWSXELWLWQXGCXEWJWOXEPZWPXFWOXEWOXEEQXTUGUHZUIUNUKGXEIUOUPRXNXLWKXRWLX
      LXGUQVTWBWKXMURWIXRAXEWJWEXEPZWGXQBWHXOWEXEUSYBWFXFWDWEXEEQUTVASTXQXSBGXO
      WCGPZWDWNXFWCGEQZVBSTWLXLXGVFVCVGVDXGIWNWJVERGWSXIHWRXHWQXGCIWJYAVHVIVJZV
      KZWLGXIWNYEWLWNWJJZWNEKZWNLZXIWNLWLWNDLYGWLWNWADWLGWJJZWDWALZBWJOZWNWALZW
      LYJWMXDVTWBYJWMVQWKGDFVLUEVMZWLWTWKYLXAVTWBWKVNZWIYLADWJWEDPZWGYKBWHWJWED
      USYPWFWAWDWEDEQUTVASTYKYMBGWJYCWDWNWAYDVBSTXBVCWNDGEVOZVRRWLWNGNZJZWDWNLZ
      BYROZYIWLWNGLYSYFWNGYQVRRWLYJWKUUAYNYOWIUUAAGWJWEGPZWGYTBWHYRWEGUSUUBWFWN
      WDWEGEQUTVASTYTYIBWNYRWCWNPWDYHWNWCWNEQVBSTXGYIIWNWJXEWNPZXFYHXEWNXEWNEQU
      UCUGUHUIUJUKVPVS $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Cantor's Theorem
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y A $.  $d x y F $.
    canth.1 $e |- A e. _V $.
    $( No set ` A ` is equinumerous to its power set (Cantor's theorem), i.e.
       no function can map ` A ` it onto its power set.  Compare Theorem 6B(b)
       of [Enderton] p. 132.  For the equinumerosity version, see ~ canth2 .
       Note that ` A ` must be a set: this theorem does not hold when ` A ` is
       too large to be a set; see ~ ncanth for a counterexample.  (Use ~ nex if
       you want the form ` -. E. f f : A -onto-> ~P A ` .)  (Contributed by NM,
       7-Aug-1994.)  (Proof shortened by Mario Carneiro, 7-Jun-2016.) $)
    canth $p |- -. F : A -onto-> ~P A $=
      ( vx vy cpw wfo cv cfv wcel wn crab crn wss ssrab2 elpw2 mpbir forn wceq
      wb syl5eleqr wrex id fveq2 eleq12d elrab baibr nbbn sylib eleq2 nsyl nrex
      notbid wfn fofn fvelrnb syl mtbiri pm2.65i ) AAFZBGZDHZVBBIZJZKZDALZBMZJZ
      VAVFUTVGVFUTJVFANVEDAOVFACPQAUTBRUAVAVHEHZBIZVFSZEAUBZVKEAVIAJZVIVJJZVIVF
      JZTZVKVMVNKZVOTVPKVOVMVQVEVQDVIAVBVISZVDVNVRVBVIVCVJVRUCVBVIBUDUEUMUFUGVN
      VOUHUIVJVFVIUJUKULVABAUNVHVLTAUTBUOEAVFBUPUQURUS $.
  $}

  $( Cantor's theorem fails for the universal class (which is not a set but a
     proper class by ~ vprc ).  Specifically, the identity function maps the
     universe onto its power class.  Compare ~ canth that works for sets.  See
     also the remark in ~ ru about NF, in which Cantor's theorem fails for sets
     that are ""too large.""  This theorem gives some intuition behind that
     failure: in NF the universal class is a set, and it equals its own power
     set.  (Contributed by NM, 29-Jun-2004.) $)
  ncanth $p |- _I : _V -onto-> ~P _V $=
    ( cvv cpw cid wf1o wfo f1ovi wceq wb pwv f1oeq3 ax-mp mpbir f1ofo ) AABZCDZ
    ANCEOAACDZFNAGOPHINAACJKLANCMK $.


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
      Restricted iota (description binder)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c iota_ $.

  $( Extend class notation with restricted description binder. $)
  crio $a class ( iota_ x e. A ph ) $.

  $( Define restricted description binder.  In case there is no unique ` x `
     such that ` ( x e. A /\ ph ) ` holds, it evaluates to the empty set.  See
     also comments for ~ df-iota .  (Contributed by NM, 15-Sep-2011.)  (Revised
     by Mario Carneiro, 15-Oct-2016.)  (Revised by NM, 2-Sep-2018.) $)
  df-riota $a |- ( iota_ x e. A ph ) = ( iota x ( x e. A /\ ph ) ) $.

  ${
    $d x ph $.
    riotaeqdv.1 $e |- ( ph -> A = B ) $.
    $( Formula-building deduction rule for iota.  (Contributed by NM,
       15-Sep-2011.) $)
    riotaeqdv $p |- ( ph -> ( iota_ x e. A ps ) = ( iota_ x e. B ps ) ) $=
      ( cv wcel wa cio crio eleq2d anbi1d iotabidv df-riota 3eqtr4g ) ACGZDHZBI
      ZCJQEHZBIZCJBCDKBCEKASUACARTBADEQFLMNBCDOBCEOP $.
  $}

  ${
    $d x ph $.
    riotabidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Formula-building deduction rule for restricted iota.  (Contributed by
       NM, 15-Sep-2011.) $)
    riotabidv $p |- ( ph -> ( iota_ x e. A ps ) = ( iota_ x e. A ch ) ) $=
      ( cv wcel wa cio crio anbi2d iotabidv df-riota 3eqtr4g ) ADGEHZBIZDJPCIZD
      JBDEKCDEKAQRDABCPFLMBDENCDENO $.
  $}

  ${
    $d x ph $.
    riotaeqbidv.1 $e |- ( ph -> A = B ) $.
    riotaeqbidv.2 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equality deduction for restricted universal quantifier.  (Contributed by
       NM, 15-Sep-2011.) $)
    riotaeqbidv $p |- ( ph -> ( iota_ x e. A ps ) = ( iota_ x e. B ch ) ) $=
      ( crio riotabidv riotaeqdv eqtrd ) ABDEICDEICDFIABCDEHJACDEFGKL $.
  $}

  $( Restricted iota is a set.  (Contributed by NM, 15-Sep-2011.) $)
  riotaex $p |- ( iota_ x e. A ps ) e. _V $=
    ( crio cv wcel wa cio cvv df-riota iotaex eqeltri ) ABCDBECFAGZBHIABCJMBKL
    $.

  $( An iota restricted to the universe is unrestricted.  (Contributed by NM,
     18-Sep-2011.) $)
  riotav $p |- ( iota_ x e. _V ph ) = ( iota x ph ) $=
    ( cvv crio cv wcel wa cio df-riota vex biantrur iotabii eqtr4i ) ABCDBECFZA
    GZBHABHABCIAOBNABJKLM $.

  $( Restricted iota in terms of class union.  (Contributed by NM,
     11-Oct-2011.) $)
  riotauni $p |- ( E! x e. A ph
                    -> ( iota_ x e. A ph ) = U. { x e. A | ph } ) $=
    ( wreu cv wcel wa cio cab cuni crio crab wceq df-reu iotauni sylbi df-riota
    weu df-rab unieqi 3eqtr4g ) ABCDZBECFAGZBHZUCBIZJZABCKABCLZJUBUCBRUDUFMABCN
    UCBOPABCQUGUEABCSTUA $.

  ${
    $d x y A $.  $d y ph $.
    $( The abstraction variable in a restricted iota descriptor isn't free.
       (Contributed by NM, 12-Oct-2011.)  (Revised by Mario Carneiro,
       15-Oct-2016.) $)
    nfriota1 $p |- F/_ x ( iota_ x e. A ph ) $=
      ( crio cv wcel wa cio df-riota nfiota1 nfcxfr ) BABCDBECFAGZBHABCILBJK $.
  $}

  ${
    nfriotad.1 $e |- F/ y ph $.
    nfriotad.2 $e |- ( ph -> F/ x ps ) $.
    nfriotad.3 $e |- ( ph -> F/_ x A ) $.
    $( Deduction version of ~ nfriota .  (Contributed by NM, 18-Feb-2013.)
       (Revised by Mario Carneiro, 15-Oct-2016.) $)
    nfriotad $p |- ( ph -> F/_ x ( iota_ y e. A ps ) ) $=
      ( crio cv wcel wa cio df-riota weq wal wnfc wn nfnae adantr nfcvf nfiotad
      nfan adantl nfeld wnf nfand nfiota1 eqidd drnfc1 mpbiri pm2.61d2 nfcxfrd
      ex ) ACBDEIDJZEKZBLZDMZBDENACDOCPZCURQZAUSRZUTAVALZUQCDAVADFCDDSUCVBUPBCV
      BCUOEVACUOQACDUAUDACEQVAHTUEABCUFVAGTUGUBUNUSUTDURQUQDUHCDURURUSURUIUJUKU
      LUM $.
  $}

  ${
    $d x y z $.  $d z A $.  $d z ph $.
    nfriota.1 $e |- F/ x ph $.
    nfriota.2 $e |- F/_ x A $.
    $( A variable not free in a wff remains so in a restricted iota
       descriptor.  (Contributed by NM, 12-Oct-2011.) $)
    nfriota $p |- F/_ x ( iota_ y e. A ph ) $=
      ( crio wnfc wtru nftru wnf a1i nfriotad trud ) BACDGHIABCDCJABKIELBDHIFLM
      N $.
  $}

  ${
    $d x z A $.  $d y z A $.  $d z ph $.  $d z ps $.
    cbvriota.1 $e |- F/ y ph $.
    cbvriota.2 $e |- F/ x ps $.
    cbvriota.3 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change bound variable in a restricted description binder.  (Contributed
       by NM, 18-Mar-2013.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    cbvriota $p |- ( iota_ x e. A ph ) = ( iota_ y e. A ps ) $=
      ( vz cv wcel wa cio crio wsb weq eleq1 anbi12d nfv nfan nfs1v sbie syl6bb
      sbequ12 cbviota sbequ nfsb eqtri df-riota 3eqtr4i ) CJZEKZALZCMZDJZEKZBLZ
      DMZACENBDENUNIJZEKZACIOZLZIMURUMVBCICIPULUTAVAUKUSEQACIUDRUMISUTVACUTCSAC
      IUATUEVBUQIDIDPZUTUPVABUSUOEQVCVAACDOBAIDCUFABCDGHUBUCRUTVADUTDSACIDFUGTU
      QISUEUHACEUIBDEUIUJ $.
  $}

  ${
    $d x A $.  $d y A $.  $d y ph $.  $d x ps $.
    cbvriotav.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( Change bound variable in a restricted description binder.  (Contributed
       by NM, 18-Mar-2013.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    cbvriotav $p |- ( iota_ x e. A ph ) = ( iota_ y e. A ps ) $=
      ( nfv cbvriota ) ABCDEADGBCGFH $.
  $}

  ${
    $d y z A $.  $d x z w B $.  $d w z ph $.  $d w x y $.
    $( Interchange class substitution and restricted description binder.
       (Contributed by NM, 24-Feb-2013.)  (Revised by NM, 2-Sep-2018.) $)
    csbriota $p |- [_ A / x ]_ ( iota_ y e. B ph )
          = ( iota_ y e. B [. A / x ]. ph ) $=
      ( vz cvv wcel crio csb wsbc wceq cv wsb csbeq1 dfsbcq2 riotabidv wn syl
      c0 eqeq12d vex nfs1v nfcv nfriota weq sbequ12 csbief vtoclg csbprc wa cio
      df-riota weu wex sbcex adantl exlimiv con3i iotanul syl5req eqtrd pm2.61i
      euex ) DGHZBDACEIZJZABDKZCEIZLZBFMZVFJZABFNZCEIZLVJFDGVKDLZVLVGVNVIBVKDVF
      OVOVMVHCEABFDPQUABVKVFVNFUBVMBCEABFUCBEUDUEBFUFAVMCEABFUGQUHUIVERZVGTVIBD
      VFUJVPVICMEHZVHUKZCULZTVHCEUMVPVRCUNZRVSTLVTVEVTVRCUOVEVRCVDVRVECVHVEVQAB
      DUPUQURSUSVRCUTSVAVBVC $.

    $( Interchange class substitution and restricted description binder.
       (Contributed by NM, 24-Feb-2013.)  Obsolete as of 2-Sep-2018.  Use
       ~ csbriota instead.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    csbriotagOLD $p |- ( A e. V
    -> [_ A / x ]_ ( iota_ y e. B ph ) = ( iota_ y e. B [. A / x ]. ph ) ) $=
      ( crio csb wsbc wceq wcel csbriota a1i ) BDACEGHABDICEGJDFKABCDELM $.
  $}

  $( Membership law for ""the unique element in ` A ` such that ` ph ` .""

     (Contributed by NM, 21-Aug-2011.)  (Revised by Mario Carneiro,
     23-Dec-2016.) $)
  riotacl2 $p |- ( E! x e. A ph -> ( iota_ x e. A ph ) e. { x e. A | ph } ) $=
    ( wreu cv wcel wa cio cab crio crab weu df-reu iotacl sylbi df-riota df-rab
    3eltr4g ) ABCDZBECFAGZBHZTBIZABCJABCKSTBLUAUBFABCMTBNOABCPABCQR $.

  ${
    $d x A $.
    $( Closure of restricted iota.  (Contributed by NM, 21-Aug-2011.) $)
    riotacl $p |- ( E! x e. A ph -> ( iota_ x e. A ph ) e. A ) $=
      ( wreu crab crio ssrab2 riotacl2 sseldi ) ABCDABCECABCFABCGABCHI $.
  $}

  $( Substitution law for descriptions.  Compare ~ iotasbc .  (Contributed by
     NM, 23-Aug-2011.)  (Proof shortened by Mario Carneiro, 24-Dec-2016.) $)
  riotasbc $p |- ( E! x e. A ph -> [. ( iota_ x e. A ph ) / x ]. ph ) $=
    ( wreu crio cab wcel wsbc crab rabssab riotacl2 sseldi df-sbc sylibr ) ABCD
    ZABCEZABFZGABPHOABCIQPABCJABCKLABPMN $.

  ${
    $d x ph $.
    riotabidva.1 $e |- ( ( ph /\ x e. A ) -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal restricted class abstractions (deduction
       rule).  ( ~ rabbidva analog.)  (Contributed by NM, 17-Jan-2012.) $)
    riotabidva $p |- ( ph -> ( iota_ x e. A ps ) = ( iota_ x e. A ch ) ) $=
      ( cv wcel wa cio crio pm5.32da iotabidv df-riota 3eqtr4g ) ADGEHZBIZDJPCI
      ZDJBDEKCDEKAQRDAPBCFLMBDENCDENO $.
  $}

  ${
    riotabiia.1 $e |- ( x e. A -> ( ph <-> ps ) ) $.
    $( Equivalent wff's yield equal restricted iotas (inference rule).
       ( ~ rabbiia analog.)  (Contributed by NM, 16-Jan-2012.) $)
    riotabiia $p |- ( iota_ x e. A ph ) = ( iota_ x e. A ps ) $=
      ( cvv wceq crio eqid cv wcel wb adantl riotabidva ax-mp ) FFGZACDHBCDHGFI
      PABCDCJDKABLPEMNO $.
  $}

  ${
    $d x y A $.
    $( Property of restricted iota.  Compare ~ iota1 .  (Contributed by Mario
       Carneiro, 15-Oct-2016.) $)
    riota1 $p |- ( E! x e. A ph ->
      ( ( x e. A /\ ph ) <-> ( iota_ x e. A ph ) = x ) ) $=
      ( wreu cv wcel wa cio wceq crio weu wb df-reu iota1 sylbi df-riota eqeq1i
      syl6bbr ) ABCDZBEZCFAGZUABHZTIZABCJZTISUABKUAUCLABCMUABNOUDUBTABCPQR $.
  $}

  $( Property of iota.  (Contributed by NM, 23-Aug-2011.) $)
  riota1a $p |- ( ( x e. A /\ E! x e. A ph ) ->
          ( ph <-> ( iota x ( x e. A /\ ph ) ) = x ) ) $=
    ( cv wcel wa wreu cio wceq ibar weu wb df-reu iota1 sylbi sylan9bb ) BDZCEZ
    ARAFZABCGZSBHQIZRAJTSBKSUALABCMSBNOP $.

  ${
    $d x A $.
    riota2df.1 $e |- F/ x ph $.
    riota2df.2 $e |- ( ph -> F/_ x B ) $.
    riota2df.3 $e |- ( ph -> F/ x ch ) $.
    riota2df.4 $e |- ( ph -> B e. A ) $.
    riota2df.5 $e |- ( ( ph /\ x = B ) -> ( ps <-> ch ) ) $.
    $( A deduction version of ~ riota2f .  (Contributed by NM, 17-Feb-2013.)
       (Revised by Mario Carneiro, 15-Oct-2016.) $)
    riota2df $p |- ( ( ph /\ E! x e. A ps ) ->
            ( ch <-> ( iota_ x e. A ps ) = B ) ) $=
      ( wreu wa cv wcel cio wceq crio adantr simpr weu df-reu eqeltrd biantrurd
      sylib adantlr bitr3d nfreu1 nfan wnf wnfc iota2df df-riota eqeq1i syl6bbr
      wb ) ABDELZMZCDNZEOZBMZDPZFQBDERZFQURVACDFEAFEOZUQJSZURUQVADUAAUQTBDEUBUE
      URUSFQZMZBVACVGUTBVGUSFEURVFTURVDVFVESUCUDAVFBCUPUQKUFUGAUQDGBDEUHUIACDUJ
      UQISADFUKUQHSULVCVBFBDEUMUNUO $.
  $}

  ${
    $d y ph $.  $d x y A $.  $d y B $.
    riota2f.1 $e |- F/_ x B $.
    riota2f.2 $e |- F/ x ps $.
    riota2f.3 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( This theorem shows a condition that allows us to represent a descriptor
       with a class expression ` B ` .  (Contributed by NM, 23-Aug-2011.)
       (Revised by Mario Carneiro, 15-Oct-2016.) $)
    riota2f $p |- ( ( B e. A /\ E! x e. A ph ) ->
            ( ps <-> ( iota_ x e. A ph ) = B ) ) $=
      ( wcel nfel1 wnfc a1i wnf id cv wceq wb adantl riota2df ) EDIZABCDECEDFJC
      EKTFLBCMTGLTNCOEPABQTHRS $.
  $}

  ${
    $d x ps $.  $d x A $.  $d x B $.
    riota2.1 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( This theorem shows a condition that allows us to represent a descriptor
       with a class expression ` B ` .  (Contributed by NM, 23-Aug-2011.)
       (Revised by Mario Carneiro, 10-Dec-2016.) $)
    riota2 $p |- ( ( B e. A /\ E! x e. A ph ) ->
            ( ps <-> ( iota_ x e. A ph ) = B ) ) $=
      ( nfcv nfv riota2f ) ABCDECEGBCHFI $.
  $}

  ${
    $d y ph $.  $d x y A $.  $d y B $.
    riotaprop.0 $e |- F/ x ps $.
    riotaprop.1 $e |- B = ( iota_ x e. A ph ) $.
    riotaprop.2 $e |- ( x = B -> ( ph <-> ps ) ) $.
    $( Properties of a restricted definite description operator.  Todo
       ( ~ df-riota update): can some uses of ~ riota2f be shortened with
       this?  (Contributed by NM, 23-Nov-2013.) $)
    riotaprop $p |- ( E! x e. A ph -> ( B e. A /\ ps ) ) $=
      ( wreu wcel crio riotacl syl5eqel wa wceq eqcomi nfriota1 nfcxfr riota2f
      mpbiri mpancom jca ) ACDIZEDJZBUCEACDKZDGACDLMZUDUCBUFUDUCNBUEEOEUEGPABCD
      ECEUEGACDQRFHSTUAUB $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y ph $.  $d y ps $.
    riota5f.1 $e |- ( ph -> F/_ x B ) $.
    riota5f.2 $e |- ( ph -> B e. A ) $.
    riota5f.3 $e |- ( ( ph /\ x e. A ) -> ( ps <-> x = B ) ) $.
    $( A method for computing restricted iota.  (Contributed by NM,
       16-Apr-2013.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    riota5f $p |- ( ph -> ( iota_ x e. A ps ) = B ) $=
      ( vy cv wceq wb wral ralrimiva wi wcel wa wtru a1tru nfv crio wsbc adantl
      wreu reu6i nfra1 nfan nfcvd nfvd simprl simpr simplrr simplrl eqeltrd rsp
      sylc mpbird 2thd mpdan mpbid expr rspsbc nfeqd nfan1 eqeq2d bibi2d ralbid
      riota2df imbi12d sbcied mpd ) ABCJZEKZLZCDMZBCDUAZEKZAVNCDHNABVLIJZKZLZCD
      MZVPVRKZOZIEUBZVOVQOZAEDPWCIDMWDGAWCIDAVRDPZWAWBAWFWAQZQZRWBWHSWHBCDUDZRW
      BLWGWIABCDVRUEUCWHBRCDVRAWGCACTZWFWACWFCTVTCDUFUGUGWHCVRUHWHRCUIAWFWAUJWH
      VSQZBRWKBVSWHVSUKZWKWAVLDPVTAWFWAVSULWKVLVRDWLAWFWAVSUMUNVTCDUOUPUQWKSURV
      HUSUTVANWCIEDVBUPAWCWEIEDGAVREKZQZWAVOWBVQWNVTVNCDAWMCWJACVREACVRUHFVCVDW
      NVSVMBWNVREVLAWMUKZVEVFVGWNVREVPWOVEVIVJUTVK $.
  $}

  ${
    $d x A $.  $d x B $.  $d x ph $.
    riota5.1 $e |- ( ph -> B e. A ) $.
    riota5.2 $e |- ( ( ph /\ x e. A ) -> ( ps <-> x = B ) ) $.
    $( A method for computing restricted iota.  (Contributed by NM,
       20-Oct-2011.)  (Revised by Mario Carneiro, 6-Dec-2016.) $)
    riota5 $p |- ( ph -> ( iota_ x e. A ps ) = B ) $=
      ( nfcvd riota5f ) ABCDEACEHFGI $.
  $}

  ${
    $d x A $.  $d x B $.
    $( Restriction of a unique element to a smaller class.  (Contributed by NM,
       21-Aug-2011.)  (Revised by NM, 22-Mar-2013.) $)
    riotass2 $p |- ( ( ( A C_ B /\ A. x e. A ( ph -> ps ) )
           /\ ( E. x e. A ph /\ E! x e. B ps ) )
         -> ( iota_ x e. A ph ) = ( iota_ x e. B ps ) ) $=
      ( wi wral wa wrex wreu crio wsbc wceq reuss2 simplr riotasbc wcel riotacl
      wss syl rspsbc sbcimg sylibd mpid sylc wb ssel ad2antrr mpd simprr nfsbc1
      nfriota1 sbceq1a riota2f syl2anc mpbid eqcomd ) DESZABFZCDGZHZACDIZBCEJZH
      ZHZBCEKZACDKZVEBCVGLZVFVGMZVEACDJZUTVHABCDENZURUTVDOVJUTACVGLZVHACDPVJVGD
      QZUTVLVHFZFACDRZVMUTUSCVGLVNUSCVGDUAABCVGDUBUCTUDUEVEVGEQZVCVHVIUFVEVMVPV
      EVJVMVKVOTURVMVPFUTVDDEVGUGUHUIVAVBVCUJBVHCEVGACDULZBCVGVQUKBCVGUMUNUOUPU
      Q $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y ph $.
    $( Restriction of a unique element to a smaller class.  (Contributed by NM,
       19-Oct-2005.)  (Revised by Mario Carneiro, 24-Dec-2016.) $)
    riotass $p |- ( ( A C_ B /\ E. x e. A ph /\ E! x e. B ph ) ->
                ( iota_ x e. A ph ) = ( iota_ x e. B ph ) ) $=
      ( wss wrex wreu w3a crio wsbc wceq reuss riotasbc syl wcel riotacl sseldd
      wb simp1 simp3 nfriota1 nfsbc1 sbceq1a riota2f syl2anc mpbid eqcomd ) CDE
      ZABCFZABDGZHZABDIZABCIZUKABUMJZULUMKZUKABCGZUNABCDLZABCMNUKUMDOUJUNUORUKC
      DUMUHUIUJSUKUPUMCOUQABCPNQUHUIUJTAUNBDUMABCUAZABUMURUBABUMUCUDUEUFUG $.

    $( Restriction of a unique element to a smaller class.  (Contributed by NM,
       19-Feb-2006.)  (Revised by NM, 16-Jun-2017.) $)
    moriotass $p |- ( ( A C_ B /\ E. x e. A ph /\ E* x e. B ph ) ->
                ( iota_ x e. A ph ) = ( iota_ x e. B ph ) ) $=
      ( wss wrex wrmo wreu crio wceq w3a ssrexv imp 3adant3 simp3 reu5 sylanbrc
      riotass syld3an3 ) CDEZABCFZABDGZABDHZABCIABDIJTUAUBKABDFZUBUCTUAUDUBTUAU
      DABCDLMNTUAUBOABDPQABCDRS $.
  $}

  ${
    $d y A $.  $d y ph $.  $d x y $.
    $( A restricted class abstraction with a unique member can be expressed as
       a singleton.  (Contributed by NM, 30-May-2006.) $)
    snriota $p |- ( E! x e. A ph ->
                   { x e. A | ph } = { ( iota_ x e. A ph ) } ) $=
      ( wreu cv wcel wa cab cio csn crab crio wceq df-reu sniota sylbi df-riota
      weu df-rab sneqi 3eqtr4g ) ABCDZBECFAGZBHZUCBIZJZABCKABCLZJUBUCBRUDUFMABC
      NUCBOPABCSUGUEABCQTUA $.
  $}

  ${
    $d x B $.  $d x z C $.  $d x y z A $.  $d x y ph $.  $d ps y z $.
    $d ch x z $.
    riotaxfrd.1 $e |- F/_ y C $.
    riotaxfrd.2 $e |- ( ( ph /\ y e. A ) -> B e. A ) $.
    riotaxfrd.3 $e |- ( ( ph /\ ( iota_ y e. A ch ) e. A ) -> C e. A ) $.
    riotaxfrd.4 $e |- ( x = B -> ( ps <-> ch ) ) $.
    riotaxfrd.5 $e |- ( y = ( iota_ y e. A ch ) -> B = C ) $.
    riotaxfrd.6 $e |- ( ( ph /\ x e. A ) -> E! y e. A x = B ) $.
    $( Change the variable ` x ` in the expression for ""the unique ` x ` such
       that ` ps ` "" to another variable ` y ` contained in expression ` B ` .
       Use ~ reuhypd to eliminate the last hypothesis.  (Contributed by NM,
       16-Jan-2012.)  (Revised by Mario Carneiro, 15-Oct-2016.) $)
    riotaxfrd $p |- ( ( ph /\ E! x e. A ps )
         -> ( iota_ x e. A ps ) = C ) $=
      ( wreu wa crio crab wcel adantl rabid baib riotabiia wceq reuxfrd riotacl
      cv riotacl2 wb nfriota1 rabxfrd sylan2 mpbird ex sylbid imp baibr reubiia
      syl5 biimpi nfcv nfrab1 nfel2 eleq1 riota2f syl2anc mpbid syl5eqr ) ABDFO
      ZPZBDFQDUGZBDFRZSZDFQZHVMBDFVMVKFSZBBDFUAZUBUCVJHVLSZVNHUDZAVIVQAVICEFOZV
      QABCDEGFJNLUEZAVSVQAVSPVQCEFQZCEFRSZVSWBACEFUHTVSAWAFSZVQWBUICEFUFZABCDEG
      WAHFCEFUJIJLMUKULUMUNUOUPVJHFSZVMDFOZVQVRUIAVIWEAVIVSWEVTVSWCAWEWDAWCWEKU
      NUSUOUPVIWFAVIWFBVMDFVMVOBVPUQURUTTVMVQDFHDHVADHVLBDFVBVCVKHVLVDVEVFVGVH
      $.
  $}

  ${
    $d x y z A $.  $d x z B $.
    eusvobj1.1 $e |- B e. _V $.
    $( Specify the same property in two ways when class ` B ( y ) ` is
       single-valued.  (Contributed by NM, 1-Nov-2010.)  (Proof shortened by
       Mario Carneiro, 24-Dec-2016.) $)
    eusvobj2 $p |- ( E! x E. y e. A x = B
       -> ( E. y e. A x = B <-> A. y e. A x = B ) ) $=
      ( vz cv wceq wrex weu wral cab csn wex wi euabsn2 wcel eleq2 abid exlimiv
      3bitr3g nfre1 nfeq1 elabrex elsnc eqcom bitri syl6bb syl5ib ralrimi eqeq1
      elsn nfab ralbidv syl5ibrcom sylbid sylbi c0 wne euex rexn0 r19.2z impbid
      ex 3syl ) AGZDHZBCIZAJZVHVGBCKZVIVHALZFGZMZHZFNVHVJOZVHAFPVNVOFVNVHVFVLHZ
      VJVNVFVKQVFVMQVHVPVKVMVFRVHASAVLULUAVNVJVPVLDHZBCKVNVQBCBVKVMVHBAVGBCUBUM
      UCBGCQDVKQZVNVQBACDEUDVNVRDVMQZVQVKVMDRVSDVLHVQDVLEUEDVLUFUGUHUIUJVPVGVQB
      CVFVLDUKUNUOUPTUQVIVHANCURUSZVJVHOVHAUTVHVTAVGBCVATVTVJVHVGBCVBVDVEVC $.

    $( Specify the same object in two ways when class ` B ( y ) ` is
       single-valued.  (Contributed by NM, 1-Nov-2010.)  (Proof shortened by
       Mario Carneiro, 19-Nov-2016.) $)
    eusvobj1 $p |- ( E! x E. y e. A x = B
       -> ( iota x E. y e. A x = B ) = ( iota x A. y e. A x = B ) ) $=
      ( cv wceq wrex weu wral wb wal cio nfeu1 eusvobj2 alrimi iotabi syl ) AFD
      GZBCHZAIZTSBCJZKZALTAMUBAMGUAUCATANABCDEOPTUBAQR $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x F $.
    $( There is one domain element for each value of a one-to-one onto
       function.  (Contributed by NM, 26-May-2006.) $)
    f1ofveu $p |- ( ( F : A -1-1-onto-> B /\ C e. B ) ->
                  E! x e. A ( F ` x ) = C ) $=
      ( wf1o wcel wa cv cfv wceq wreu cop ccnv wf f1ocnv f1of syl wb wfn 3com23
      feu sylan f1ocnvfvb dff1o4 simprbi fnopfvb 3adant3 syl3an1 bitrd reubidva
      w3a 3expa mpbird ) BCEFZDCGZHZAIZEJDKZABLDURMENZGZABLZUOCBUTOZUPVBUOCBUTF
      VCBCEPCBUTQRACBDUTUBUCUQUSVAABUOUPURBGZUSVASUOUPVDULUSDUTJURKZVAUOVDUPUSV
      ESBCURDEUDUAUOUTCTZUPVDVEVASZUOEBTVFBCEUEUFVFUPVGVDCDURUTUGUHUIUJUMUKUN
      $.

    $( Value of the converse of a one-to-one onto function.  (Contributed by
       NM, 26-May-2006.)  (Proof shortened by Mario Carneiro, 24-Dec-2016.) $)
    f1ocnvfv3 $p |- ( ( F : A -1-1-onto-> B /\ C e. B ) ->
                  ( `' F ` C ) = ( iota_ x e. A ( F ` x ) = C ) ) $=
      ( wf1o wcel wa cv cfv wceq crio ccnv f1ocnvdm f1ocnvfvb 3expa an32s eqcom
      wb syl6bbr riota5 eqcomd ) BCEFZDCGZHZAIZEJDKZABLDEMJZUEUGABUHBCDENUEUFBG
      ZHUGUHUFKZUFUHKUCUIUDUGUJSZUCUIUDUKBCUFDEOPQUFUHRTUAUB $.
  $}

  ${
    $d x A $.
    $( Restricted iota equals the empty set when not meaningful.  (Contributed
       by NM, 16-Jan-2012.)  (Revised by Mario Carneiro, 15-Oct-2016.)
       (Revised by NM, 13-Sep-2018.) $)
    riotaund $p |- ( -. E! x e. A ph -> ( iota_ x e. A ph ) = (/) ) $=
      ( wreu wn crio cv wcel cio df-riota weu wceq df-reu iotanul sylnbi syl5eq
      wa c0 ) ABCDZEABCFBGCHAQZBIZRABCJSTBKUARLABCMTBNOP $.

    $( The restricted iota class is limited in size by the base set.
       (Contributed by Mario Carneiro, 24-Dec-2016.)  Obsolete as of
       28-Aug-2018.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    riotassuniOLD $p |- ( iota_ x e. A ph ) C_ ( ~P U. A u. U. A ) $=
      ( wreu crio cuni cpw cun crab riotauni ssrab2 unissi ssun2 sstri syl6eqss
      wss wn c0 riotaund 0ss pm2.61i ) ABCDZABCEZCFZGZUDHZPUBUCABCIZFZUFABCJUHU
      DUFUGCABCKLUDUEMNOUBQUCRUFABCSUFTOUA $.

    $( Bidirectional closure of restricted iota when domain is not empty.
       (Contributed by NM, 28-Feb-2013.)  (Revised by Mario Carneiro,
       24-Dec-2016.)  (Revised by NM, 13-Sep-2018.) $)
    riotaclb $p |- ( -. (/) e. A
          -> ( E! x e. A ph <-> ( iota_ x e. A ph ) e. A ) ) $=
      ( c0 wcel wreu crio riotacl riotaund eleq1d notbid biimprcd con4d impbid2
      wn ) DCEZOZABCFZABCGZCEZABCHQRTROZTOQUATPUASDCABCIJKLMN $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Operations
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Extend class notation to include the value of an operation ` F ` (such as
     ` + ` ) for two arguments ` A ` and ` B ` .  Note that the syntax is
     simply three class symbols in a row surrounded by parentheses.  Since
     operation values are the only possible class expressions consisting of
     three class expressions in a row surrounded by parentheses, the syntax is
     unambiguous.  (For an example of how syntax could become ambiguous if we
     are not careful, see the comment in ~ cneg .) $)
  co $a class ( A F B ) $.

  $( Extend class notation to include class abstraction (class builder) of
     nested ordered pairs. $)
  coprab $a class { <. <. x , y >. , z >. | ph } $.

  $( Extend the definition of a class to include maps-to notation for defining
     an operation via a rule. $)
  cmpt2 $a class ( x e. A , y e. B |-> C ) $.

  $( Define the value of an operation.  Definition of operation value in
     [Enderton] p. 79.  Note that the syntax is simply three class expressions
     in a row bracketed by parentheses.  There are no restrictions of any kind
     on what those class expressions may be, although only certain kinds of
     class expressions - a binary operation ` F ` and its arguments ` A ` and
     ` B ` - will be useful for proving meaningful theorems.  For example, if
     class ` F ` is the operation ` + ` and arguments ` A ` and ` B ` are ` 3 `
     and ` 2 ` , the expression ` ( 3 + 2 ) ` can be proved to equal ` 5 ` (see
     ~ 3p2e5 ).  This definition is well-defined, although not very meaningful,
     when classes ` A ` and/or ` B ` are proper classes (i.e. are not sets);
     see ~ ovprc1 and ~ ovprc2 .  On the other hand, we often find uses for
     this definition when ` F ` is a proper class, such as ` +o ` in ~ oav .
     ` F ` is normally equal to a class of nested ordered pairs of the form
     defined by ~ df-oprab .  (Contributed by NM, 28-Feb-1995.) $)
  df-ov $a |- ( A F B ) = ( F ` <. A , B >. ) $.

  ${
    $d x w $.  $d y w $.  $d z w $.  $d w ph $.
    $( Define the class abstraction (class builder) of a collection of nested
       ordered pairs (for use in defining operations).  This is a special case
       of Definition 4.16 of [TakeutiZaring] p. 14.  Normally ` x ` , ` y ` ,
       and ` z ` are distinct, although the definition doesn't strictly require
       it.  See ~ df-ov for the value of an operation.  The brace notation is
       called ""class abstraction"" by Quine; it is also called a ""class builder""
       in the literature.  The value of the most common operation class builder
       is given by ~ ovmpt2 .  (Contributed by NM, 12-Mar-1995.) $)
    df-oprab $a |- { <. <. x , y >. , z >. | ph } =
                  { w | E. x E. y E. z ( w = <. <. x , y >. , z >. /\ ph ) } $.
  $}

  ${
    $d x z $.  $d y z $.  $d z A $.  $d z B $.  $d z C $.
    $( Define maps-to notation for defining an operation via a rule.  Read as
       ""the operation defined by the map from ` x , y ` (in ` A X. B ` ) to
       ` C ( x , y ) ` .""  An extension of ~ df-mpt for two arguments.
       (Contributed by NM, 17-Feb-2008.) $)
    df-mpt2 $a |- ( x e. A , y e. B |-> C ) =
             { <. <. x , y >. , z >. | ( ( x e. A /\ y e. B ) /\ z = C ) } $.
  $}

  $( Equality theorem for operation value.  (Contributed by NM,
     28-Feb-1995.) $)
  oveq $p |- ( F = G -> ( A F B ) = ( A G B ) ) $=
    ( wceq cop cfv co fveq1 df-ov 3eqtr4g ) CDEABFZCGLDGABCHABDHLCDIABCJABDJK
    $.

  $( Equality theorem for operation value.  (Contributed by NM,
     28-Feb-1995.) $)
  oveq1 $p |- ( A = B -> ( A F C ) = ( B F C ) ) $=
    ( wceq cop cfv co opeq1 fveq2d df-ov 3eqtr4g ) ABEZACFZDGBCFZDGACDHBCDHMNOD
    ABCIJACDKBCDKL $.

  $( Equality theorem for operation value.  (Contributed by NM,
     28-Feb-1995.) $)
  oveq2 $p |- ( A = B -> ( C F A ) = ( C F B ) ) $=
    ( wceq cop cfv co opeq2 fveq2d df-ov 3eqtr4g ) ABEZCAFZDGCBFZDGCADHCBDHMNOD
    ABCIJCADKCBDKL $.

  $( Equality theorem for operation value.  (Contributed by NM,
     16-Jul-1995.) $)
  oveq12 $p |- ( ( A = B /\ C = D ) -> ( A F C ) = ( B F D ) ) $=
    ( wceq co oveq1 oveq2 sylan9eq ) ABFCDFACEGBCEGBDEGABCEHCDBEIJ $.

  ${
    oveq1i.1 $e |- A = B $.
    $( Equality inference for operation value.  (Contributed by NM,
       28-Feb-1995.) $)
    oveq1i $p |- ( A F C ) = ( B F C ) $=
      ( wceq co oveq1 ax-mp ) ABFACDGBCDGFEABCDHI $.

    $( Equality inference for operation value.  (Contributed by NM,
       28-Feb-1995.) $)
    oveq2i $p |- ( C F A ) = ( C F B ) $=
      ( wceq co oveq2 ax-mp ) ABFCADGCBDGFEABCDHI $.

    ${
      oveq12i.2 $e |- C = D $.
      $( Equality inference for operation value.  (Contributed by NM,
         28-Feb-1995.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.) $)
      oveq12i $p |- ( A F C ) = ( B F D ) $=
        ( wceq co oveq12 mp2an ) ABHCDHACEIBDEIHFGABCDEJK $.
    $}

    $( Equality inference for operation value.  (Contributed by NM,
       24-Nov-2007.) $)
    oveqi $p |- ( C A D ) = ( C B D ) $=
      ( wceq co oveq ax-mp ) ABFCDAGCDBGFECDABHI $.
  $}

  ${
    oveq123i.1 $e |- A = C $.
    oveq123i.2 $e |- B = D $.
    oveq123i.3 $e |- F = G $.
    $( Equality inference for operation value.  (Contributed by FL,
       11-Jul-2010.) $)
    oveq123i $p |- ( A F B ) = ( C G D ) $=
      ( co oveq12i oveqi eqtri ) ABEJCDEJCDFJACBDEGHKEFCDILM $.
  $}

  ${
    oveq1d.1 $e |- ( ph -> A = B ) $.
    $( Equality deduction for operation value.  (Contributed by NM,
       13-Mar-1995.) $)
    oveq1d $p |- ( ph -> ( A F C ) = ( B F C ) ) $=
      ( wceq co oveq1 syl ) ABCGBDEHCDEHGFBCDEIJ $.

    $( Equality deduction for operation value.  (Contributed by NM,
       13-Mar-1995.) $)
    oveq2d $p |- ( ph -> ( C F A ) = ( C F B ) ) $=
      ( wceq co oveq2 syl ) ABCGDBEHDCEHGFBCDEIJ $.

    $( Equality deduction for operation value.  (Contributed by NM,
       9-Sep-2006.) $)
    oveqd $p |- ( ph -> ( C A D ) = ( C B D ) ) $=
      ( wceq co oveq syl ) ABCGDEBHDECHGFDEBCIJ $.

    ${
      oveq12d.2 $e |- ( ph -> C = D ) $.
      $( Equality deduction for operation value.  (Contributed by NM,
         13-Mar-1995.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.) $)
      oveq12d $p |- ( ph -> ( A F C ) = ( B F D ) ) $=
        ( wceq co oveq12 syl2anc ) ABCIDEIBDFJCEFJIGHBCDEFKL $.
    $}

    ${
      opreqan12i.2 $e |- ( ps -> C = D ) $.
      $( Equality deduction for operation value.  (Contributed by NM,
         10-Aug-1995.) $)
      oveqan12d $p |- ( ( ph /\ ps ) -> ( A F C ) = ( B F D ) ) $=
        ( wceq co oveq12 syl2an ) ACDJEFJCEGKDFGKJBHICDEFGLM $.

      $( Equality deduction for operation value.  (Contributed by NM,
         10-Aug-1995.) $)
      oveqan12rd $p |- ( ( ps /\ ph ) -> ( A F C ) = ( B F D ) ) $=
        ( co wceq oveqan12d ancoms ) ABCEGJDFGJKABCDEFGHILM $.
    $}
  $}

  ${
    oveq123d.1 $e |- ( ph -> F = G ) $.
    oveq123d.2 $e |- ( ph -> A = B ) $.
    oveq123d.3 $e |- ( ph -> C = D ) $.
    $( Equality deduction for operation value.  (Contributed by FL,
       22-Dec-2008.) $)
    oveq123d $p |- ( ph -> ( A F C ) = ( B G D ) ) $=
      ( co oveqd oveq12d eqtrd ) ABDFKBDGKCEGKAFGBDHLABCDEGIJMN $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y F $.  $d x y ph $.  $d y Y $.
    $d x y G $.  $d x y X $.
    $( If an operation value is element of a class for all operands of two
       classes, then the operation value is an element of the class for
       specific operands of the two classes.  (Contributed by Mario Carneiro,
       6-Dec-2014.) $)
    ovrspc2v $p |- ( ( ( X e. A /\ Y e. B ) /\
      A. x e. A A. y e. B ( x F y ) e. C ) -> ( X F Y ) e. C ) $=
      ( cv co wcel wceq oveq1 eleq1d oveq2 rspc2va ) AIZBIZFJZEKGHFJZEKGRFJZEKA
      BGHCDQGLSUAEQGRFMNRHLUATERHGFONP $.

    oveqrspc2v.1 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) ->
                         ( x F y ) = ( x G y ) ) $.
    $( Restricted specialization of operands, using implicit substitution.
       (Contributed by Mario Carneiro, 6-Dec-2014.) $)
    oveqrspc2v $p |- ( ( ph /\ ( X e. A /\ Y e. B ) ) ->
                         ( X F Y ) = ( X G Y ) ) $=
      ( cv co wceq wral wcel wa ralrimivva oveq1 eqeq12d oveq2 rspc2v mpan9 ) A
      BKZCKZFLZUCUDGLZMZCENBDNHDOIEOPHIFLZHIGLZMZAUGBCDEJQUGUJHUDFLZHUDGLZMBCHI
      DEUCHMUEUKUFULUCHUDFRUCHUDGRSUDIMUKUHULUIUDIHFTUDIHGTSUAUB $.
  $}

  ${
    oveqdr.1 $e |- ( ph -> F = G ) $.
    $( Equality of two operations for any two operands.  Useful in proofs using
       *propd theorems.  (Contributed by Mario Carneiro, 29-Jun-2015.) $)
    oveqdr $p |- ( ( ph /\ ps ) -> ( x F y ) = ( x G y ) ) $=
      ( cv co wceq oveqd adantr ) ACHZDHZEIMNFIJBAEFMNGKL $.
  $}

  ${
    nfovd.2 $e |- ( ph -> F/_ x A ) $.
    nfovd.3 $e |- ( ph -> F/_ x F ) $.
    nfovd.4 $e |- ( ph -> F/_ x B ) $.
    $( Deduction version of bound-variable hypothesis builder ~ nfov .
       (Contributed by NM, 13-Dec-2005.)  (Proof shortened by Andrew Salmon,
       22-Oct-2011.) $)
    nfovd $p |- ( ph -> F/_ x ( A F B ) ) $=
      ( co cop cfv df-ov nfopd nffvd nfcxfrd ) ABCDEICDJZEKCDELABPEGABCDFHMNO
      $.
  $}

  ${
    nfov.1 $e |- F/_ x A $.
    nfov.2 $e |- F/_ x F $.
    nfov.3 $e |- F/_ x B $.
    $( Bound-variable hypothesis builder for operation value.  (Contributed by
       NM, 4-May-2004.) $)
    nfov $p |- F/_ x ( A F B ) $=
      ( co wnfc wtru a1i nfovd trud ) ABCDHIJABCDABIJEKADIJFKACIJGKLM $.
  $}

  ${
    $d a ph r s t w $.  $d a r s t w x $.  $d a r s t w y $.  $d a r s t w z $.
    $( The law of concretion.  Special case of Theorem 9.5 of [Quine] p. 61.
       (Contributed by Mario Carneiro, 20-Mar-2013.) $)
    oprabid $p |- ( <. <. x , y >. , z >. e.
        { <. <. x , y >. , z >. | ph } <-> ph ) $=
      ( vw va vt vr vs cv cop wceq wa wex wi vex weq wal wn nfcvf2 opex eqvinop
      coprab biimpi eqeq1 opth1 syl6bi opeq1 eqeq2d df-3an anbi1i 3bitri 3exbii
      w3a otth2 bitri anass nfcvd nfeqd exdistrf eximi excom 3imtr4i 3syl sylbi
      anim2i weu euequ1 eupick mpan syl6 3impd syl5bi com12 eqcom syl6bb anbi1d
      syl5 3exbidv imbi1d imbi12d mpbiri adantr exlimivv com3l mpdd mpcom 19.8a
      ex impbid df-oprab elab2 ) EJZBJZCJZKZDJZKZLZAMZDNZCNZBNZAEWRABCDUCWPWQUA
      WSXCAWMFJZGJZKZLZXFWRLZMZGNFNZWSXCAOZWSXJFGWMWPWQWNWOUADPZUBUDXIWSXKOZFGX
      GXMXHXGWSXDWPLZXKXGWSXHXNWMXFWRUEXDXEWPWQFPGPUFUGXNXGWSXKXNXDHJZIJZKZLZXQ
      WPLZMZINHNXGXMOZHIXDWNWOBPZCPZUBXTYAHIXRYAXSXRXGWMXQXEKZLZXMXRXFYDWMXDXQX
      EUHUIYEXMWRYDLZYFAMZDNCNBNZAOZOYHBHQZCIQZDGQZAMZDNZMCNZMZBNZYFAYHYJYKYMMZ
      MZDNZCNBNZYQYGYSBCDYGYJYKMZYLMZAMUUBYMMYSYFUUCAYFYJYKYLUNZUUCWNWOXOXPWQXE
      YBYCXLUOZYJYKYLUJUPUKUUBYLAUQYJYKYMUQULUMUUAYJYRDNZMZCNBNZYJUUFCNZMZBNYQY
      TBNZCNUUGBNZCNUUAUUHUUKUULCYJYRBDBDQBRSZDWNXOBDTUUMDXOURUSUTVAYTBCVBUUGBC
      VBVCYJUUFBCBCQBRSZCWNXOBCTUUNCXOURUSUTUUJYPBUUIYOYJYKYMCDCDQCRSZDWOXPCDTU
      UODXPURUSUTVFVAVDVEYQYFAYFUUDYQAUUEYQYJYKYLAYQYJYOYKYLAOZOYJBVGYQYJYOOBHV
      HYJYOBVIVJYOYKYNUUPYKCVGYOYKYNOCIVHYKYNCVIVJYLDVGYNUUPDGVHYLADVIVJVKVKVLV
      MVNVRYEWSYFXKYIYEWSYDWRLYFWMYDWRUEYDWRVOVPZYEXCYHAYEWTYGBCDYEWSYFAUUQVQVS
      VTWAWBUGWCWDVEWEWFWCWDWGWSAXCWTXAXBXCWTDWHXACWHXBBWHVDWIWJABCDEWKWL $.
  $}

  $( The result of an operation is a set.  (Contributed by NM, 13-Mar-1995.) $)
  ovex $p |- ( A F B ) e. _V $=
    ( co cop cfv cvv df-ov fvex eqeltri ) ABCDABEZCFGABCHKCIJ $.

  $( The result of an operation value is always a subset of the union of the
     range.  (Contributed by Mario Carneiro, 12-Jan-2017.) $)
  ovssunirn $p |- ( X F Y ) C_ U. ran F $=
    ( co cop cfv crn cuni df-ov fvssunirn eqsstri ) BCADBCEZAFAGHBCAIALJK $.

  ${
    ovprc1.1 $e |- Rel dom F $.
    $( The value of an operation when the one of the arguments is a proper
       class.  Note: this theorem is dependent on our particular definitions of
       operation value, function value, and ordered pair.  (Contributed by
       Mario Carneiro, 26-Apr-2015.) $)
    ovprc $p |- ( -. ( A e. _V /\ B e. _V ) -> ( A F B ) = (/) ) $=
      ( cvv wcel wa wn co cop cfv df-ov cdm wceq wbr df-br wrel brrelex12 mpan
      c0 sylbir con3i ndmfv syl syl5eq ) AEFBEFGZHZABCIABJZCKZTABCLUGUHCMZFZHUI
      TNUKUFUKABUJOZUFABUJPUJQULUFDABUJRSUAUBUHCUCUDUE $.

    $( The value of an operation when the first argument is a proper class.
       (Contributed by NM, 16-Jun-2004.) $)
    ovprc1 $p |- ( -. A e. _V -> ( A F B ) = (/) ) $=
      ( cvv wcel wn wa co c0 wceq simpl con3i ovprc syl ) AEFZGPBEFZHZGABCIJKRP
      PQLMABCDNO $.

    $( The value of an operation when the second argument is a proper class.
       (Contributed by Mario Carneiro, 26-Apr-2015.) $)
    ovprc2 $p |- ( -. B e. _V -> ( A F B ) = (/) ) $=
      ( cvv wcel wn wa co c0 wceq simpr con3i ovprc syl ) BEFZGAEFZPHZGABCIJKRP
      QPLMABCDNO $.

    $( Reverse closure for an operation value.  (Contributed by Mario Carneiro,
       5-May-2015.) $)
    ovrcl $p |- ( C e. ( A F B ) -> ( A e. _V /\ B e. _V ) ) $=
      ( co wcel c0 wceq cvv wa n0i ovprc nsyl2 ) CABDFZGOHIAJGBJGKOCLABDEMN $.
  $}

  ${
    $d y A $.  $d y B $.  $d y C $.  $d y F $.  $d x y $.
    $( Move class substitution in and out of an operation.  (Contributed by NM,
       12-Nov-2005.)  (Revised by NM, 23-Aug-2018.) $)
    csbov123 $p |- [_ A / x ]_ ( B F C ) =
           ( [_ A / x ]_ B [_ A / x ]_ F [_ A / x ]_ C ) $=
      ( vy cvv wcel co csb cv csbeq1 oveq123d eqeq12d nfcsb1v csbeq1a c0 csbprc
      wceq cfv vex nfov weq csbief vtoclg wn cop df-ov fveq1d 0fv syl5req eqtrd
      syl6eq pm2.61i ) BGHZABCDEIZJZABCJZABDJZABEJZIZSZAFKZUPJZAVCCJZAVCDJZAVCE
      JZIZSVBFBGVCBSZVDUQVHVAAVCBUPLVIVEURVFUSVGUTAVCBELAVCBCLAVCBDLMNAVCUPVHFU
      AAVEVFVGAVCCOAVCEOAVCDOUBAFUCCVEDVFEVGAVCEPAVCCPAVCDPMUDUEUOUFZUQQVAABUPR
      VJVAURUSUGZUTTZQURUSUTUHVJVLVKQTQVJVKUTQABERUIVKUJUMUKULUN $.
  $}

  ${
    $d x B $.  $d x C $.
    $( Move class substitution in and out of an operation.  (Contributed by NM,
       23-Aug-2018.) $)
    csbov $p |- [_ A / x ]_ ( B F C ) = ( B [_ A / x ]_ F C ) $=
      ( co csb csbov123 cvv wcel wceq csbconstg oveq12d cop cfv 0fv df-ov eqtri
      c0 oveqd wn 3eqtr4ri csbprc 3eqtr4a pm2.61i ) ABCDEFGABCGZABDGZABEGZFZCDU
      HFZABCDEHBIJZUIUJKUKUFCUGDUHABCILABDILMUKUAZUFUGSFZCDSFZUIUJCDNZSOSUNUMUO
      PCDSQUMUFUGNZSOSUFUGSQUPPRUBULUHSUFUGABEUCZTULUHSCDUQTUDUER $.
  $}

  ${
    $d y z A $.  $d y z B $.  $d y z C $.  $d y z D $.  $d y z F $.
    $d x y z $.
    $( Move class substitution in and out of an operation.  (Contributed by NM,
       12-Nov-2005.)  (Proof shortened by Mario Carneiro, 5-Dec-2016.)
       Obsolete as of 20-Aug-2018.  Use ~ csbov123 instead.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    csbovgOLD $p |- ( A e. D -> [_ A / x ]_ ( B F C ) =
           ( [_ A / x ]_ B [_ A / x ]_ F [_ A / x ]_ C ) ) $=
      ( vy cv co csb wceq csbeq1 oveq123d eqeq12d nfcsb1v csbeq1a csbief vtoclg
      vex nfov ) AGHZCDFIZJZAUACJZAUADJZAUAFJZIZKABUBJZABCJZABDJZABFJZIZKGBEUAB
      KZUCUHUGULAUABUBLUMUDUIUEUJUFUKAUABFLAUABCLAUABDLMNAUAUBUGGSAUDUEUFAUACOA
      UAFOAUADOTAHUAKCUDDUEFUFAUAFPAUACPAUADPMQR $.
  $}

  ${
    $d x F $.
    $( Move class substitution in and out of an operation.  (Contributed by NM,
       12-Nov-2005.) $)
    csbov12g $p |- ( A e. V ->
                 [_ A / x ]_ ( B F C ) = ( [_ A / x ]_ B F [_ A / x ]_ C ) ) $=
      ( wcel co csb csbov123 csbconstg oveqd syl5eq ) BFGZABCDEHIABCIZABDIZABEI
      ZHOPEHABCDEJNQEOPABEFKLM $.
  $}

  ${
    $d x C $.  $d x F $.
    $( Move class substitution in and out of an operation.  (Contributed by NM,
       12-Nov-2005.) $)
    csbov1g $p |- ( A e. V ->
                  [_ A / x ]_ ( B F C ) = ( [_ A / x ]_ B F C ) ) $=
      ( wcel co csb csbov12g csbconstg oveq2d eqtrd ) BFGZABCDEHIABCIZABDIZEHOD
      EHABCDEFJNPDOEABDFKLM $.
  $}

  ${
    $d x B $.  $d x F $.
    $( Move class substitution in and out of an operation.  (Contributed by NM,
       12-Nov-2005.) $)
    csbov2g $p |- ( A e. V ->
                  [_ A / x ]_ ( B F C ) = ( B F [_ A / x ]_ C ) ) $=
      ( wcel co csb csbov12g csbconstg oveq1d eqtrd ) BFGZABCDEHIABCIZABDIZEHCP
      EHABCDEFJNOCPEABCFKLM $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x y C $.  $d y D $.  $d x y F $.  $d x y S $.
    $( A frequently used special case of ~ rspc2ev for operation values.
       (Contributed by NM, 21-Mar-2007.) $)
    rspceov $p |- ( ( C e. A /\ D e. B /\ S = ( C F D ) ) ->
                 E. x e. A E. y e. B S = ( x F y ) ) $=
      ( cv co wceq oveq1 eqeq2d oveq2 rspc2ev ) GAIZBIZHJZKGEFHJZKGEQHJZKABEFCD
      PEKRTGPEQHLMQFKTSGQFEHNMO $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x D $.  $d x F $.
    elovimad.1 $e |- ( ph -> A e. C ) $.
    elovimad.2 $e |- ( ph -> B e. D ) $.
    elovimad.3 $e |- ( ph -> Fun F ) $.
    elovimad.4 $e |- ( ph -> ( C X. D ) C_ dom F ) $.
    $( Elementhood of the image set of an operation value (Contributed by
       Thierry Arnoux, 13-Mar-2017.) $)
    elovimad $p |- ( ph -> ( A F B ) e. ( F "" ( C X. D ) ) ) $=
      ( co cop cfv cxp cima df-ov wcel opelxpi syl2anc wfun cdm sseldd funfvima
      wi mpd syl5eqel ) ABCFKBCLZFMZFDENZOZBCFPAUGUIQZUHUJQZABDQCEQUKGHBCDERSZA
      FTUGFUAZQUKULUDIAUIUNUGJUMUBUIUGFUCSUEUF $.
  $}

  ${
    $( Equivalence of operation value and ordered triple membership, analogous
       to ~ fnopfvb .  (Contributed by NM, 17-Dec-2008.)  (Revised by Mario
       Carneiro, 28-Apr-2015.) $)
    fnotovb $p |- ( ( F Fn ( A X. B ) /\ C e. A /\ D e. B ) ->
                   ( ( C F D ) = R <-> <. C , D , R >. e. F ) ) $=
      ( cxp wfn wcel w3a cop cfv wceq co cotp wb wa opelxpi fnopfvb sylan2
      3impb df-ov eqeq1i df-ot eleq1i 3bitr4g ) FABGZHZCAIZDBIZJCDKZFLZEMZUKEKZ
      FIZCDFNZEMCDEOZFIUHUIUJUMUOPZUIUJQUHUKUGIURCDABRUGUKEFSTUAUPULECDFUBUCUQU
      NFCDEUDUEUF $.
  $}

  $( A collection of ordered pairs with an extension of a binary relation is a
     set.  (Contributed by Alexander van der Vekens, 1-Nov-2017.)  (Revised by
     BJ/AV, 20-Jun-2019.)  (Proof shortened by OpenAI, 25-Mar-2020.) $)
  opabbrex $p |- ( ( A. x A. y ( x R y -> ph ) /\ { <. x , y >. | ph } e. V )
                   -> { <. x , y >. | ( x R y /\ ps ) } e. _V ) $=
    ( cv wbr wi wal copab wcel wa simpr wss pm3.41 2alimi adantr ssopab2 syl
    ssexd ) CGDGEHZAIZDJCJZACDKZFLZMZUBBMZCDKZUEFUDUFNUGUHAIZDJCJZUIUEOUDUKUFUC
    UJCDUBBAPQRUHACDSTUA $.

  ${
    $d R z $.  $d V z $.  $d x z $.  $d y z $.  $d ph z $.  $d ps z $.
    $( A collection of ordered pairs with an extension of a binary relation is
       a set.  (Contributed by Alexander van der Vekens, 1-Nov-2017.)  (Revised
       by BJ/AV, 20-Jun-2019.)  Obsolete version of ~ opabbrex as of
       25-Mar-2020.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    opabbrexOLD $p |- ( ( A. x A. y ( x R y -> ph )
                          /\ { <. x , y >. | ph } e. V )
                     -> { <. x , y >. | ( x R y /\ ps ) } e. _V ) $=
      ( vz cv wbr wi wal copab wcel wa cop wceq wex cab df-opab aleximi ss2abdv
      simpr syl5eqelr pm3.41 anim2d adantr syl5eqss ssexd ) CHZDHZEIZAJZDKZCKZA
      CDLZFMZNZUKBNZCDLZGHUIUJOPZANZDQZCQZGRZFUQVDUOFACDGSUNUPUBUCUQUSUTURNZDQZ
      CQZGRVDURCDGSUQVGVCGUNVGVCJUPUMVFVBCULVEVADULURAUTUKBAUDUETTUFUAUGUH $.
  $}


  $( The empty set is never an element in an ordered-pair class abstraction.
     (Contributed by Alexander van der Vekens, 5-Nov-2017.) $)
  0neqopab $p |- -. (/) e. { <. x , y >. | ph } $=
    ( c0 copab wcel wn cv cop wa wex elopab nfopab1 nfel2 nfn nfopab2 vex sylbi
    wceq exlimi wne wi opnzi nesym pm2.21 ax-mp adantr id pm2.61i ) DABCEZFZUKG
    ZUKDBHZCHZIZSZAJZCKZBKULABCDLURULBUKBBDUJABCMNOUQULCUKCCDUJABCPNOUPULAUODUA
    ZUPULUBZUMUNBQCQUCUSUPGUTUODUDUPULUERUFUGTTRULUHUI $.

  $( If two classes are in a relationship given by an ordered-pair class
     abstraction, the classes are sets.  (Contributed by Alexander van der
     Vekens, 5-Nov-2017.) $)
  brabv $p |- ( X { <. x , y >. | ph } Y -> ( X e. _V /\ Y e. _V ) ) $=
    ( copab wbr cop wcel cvv wa df-br wn wceq opprc 0neqopab eleq1 mtbiri syl
    c0 con4i sylbi ) DEABCFZGDEHZUCIZDJIEJIKZDEUCLUFUEUFMUDTNZUEMDEOUGUETUCIABC
    PUDTUCQRSUAUB $.

  ${
    $d x z w v $.  $d y z w v $.  $d w ph v $.
    $( Class abstraction for operations in terms of class abstraction of
       ordered pairs.  (Contributed by NM, 12-Mar-1995.) $)
    dfoprab2 $p |- { <. <. x , y >. , z >. | ph } =
                   { <. w , z >. | E. x E. y ( w = <. x , y >. /\ ph ) } $=
      ( vv cv cop wceq wa wex cab coprab copab excom exrot4 opeq1 3bitr3i bitri
      eqeq2d pm5.32ri anbi1i anass an32 exbii opex isseti 19.42v 3exbii 19.42vv
      mpbiran2 2exbii abbii df-oprab df-opab 3eqtr4i ) FGZBGZCGZHZDGZHZIZAJZDKC
      KBKZFLUQEGZVAHZIZVFUTIZAJZCKBKZJZDKEKZFLABCDMVKEDNVEVMFVHVJJZCKBKZEKDKZVO
      DKEKVEVMVODEOVPVNEKZDKCKBKVEVNDEBCPVQVDBCDVQVDVIJZEKZVDVNVREVHVIJZAJVCVIJ
      ZAJVNVRVTWAAVIVHVCVIVGVBUQVFUTVAQTUAUBVHVIAUCVCVIAUDRUEVSVDVIEKEUTURUSUFU
      GVDVIEUHUKSUISVOVLEDVHVJBCUJULRUMABCDFUNVKEDFUOUP $.

    $( An operation class abstraction is a relation.  (Contributed by NM,
       16-Jun-2004.) $)
    reloprab $p |- Rel { <. <. x , y >. , z >. | ph } $=
      ( vw cv cop wceq wa wex coprab dfoprab2 relopabi ) EFBFCFGHAICJBJEDABCDKA
      BCDELM $.
  $}

  ${
    $d X w x y z $.  $d Y w x y z $.  $d Z w x y z $.  $d ph w $.
    $( If a pair and a class are in a relationship given by a class abstraction
       of a collection of nested ordered pairs, the involved classes are sets.
       (Contributed by Alexander van der Vekens, 8-Jul-2018.) $)
    oprabv $p |- ( <. X , Y >. { <. <. x , y >. , z >. | ph } Z
                   -> ( X e. _V /\ Y e. _V /\ Z e. _V ) ) $=
      ( vw cop cvv wcel wa mpan wi cv wceq wex nfcv nfeq1 nfex wbr w3a reloprab
      coprab wrel brrelex12 df-br copab wsbc opex nfv nfan nfsbc1v eqeq1 anbi1d
      2exbidv sbceq1a anbi2d opelopabgf eqcom opth bitri eqvisset anim12i sylbi
      wb vex adantr exlimivv anim1i df-3an sylibr expcom sylbid dfoprab2 eleq2s
      com12 adantl mpcom ) EFIZJKZGJKZLZVTGABCDUDZUAZEJKZFJKZWBUBZWDUEWEWCABCDU
      CVTGWDUFMWBWEWHNWAWEWBWHWEVTGIZWDKWBWHNZVTGWDUGWJWIHOZBOZCOZIZPZALZCQBQZH
      DUHZWDWBWIWRKZWHWBWSVTWNPZADGUIZLZCQZBQZWHWAWBWSXDVFEFUJWQWTALZCQZBQXDHDV
      TGJJXFHBXEHCWTAHHVTWNHVTRSAHUKULTTXCDBXBDCWTXADDVTWNDVTRSADGUMULTTWKVTPZW
      PXEBCXGWOWTAWKVTWNUNUOUPDOGPZXEXBBCXHAXAWTADGUQURUPUSMXDWBWHXDWBLWFWGLZWB
      LWHXDXIWBXBXIBCWTXIXAWTWLEPZWMFPZLZXIWTWNVTPXLVTWNUTWLWMEFBVGCVGVAVBXJWFX
      KWGBEVCCFVCVDVEVHVIVJWFWGWBVKVLVMVNVQABCDHVOVPVEVQVRVS $.
  $}

$(
  @{
    @d x y z w v @.  @d ph v @.
    dfoprab2f.1 @e |- ( ph -> A. w ph ) @.
    @( Class abstraction for operations in terms of class abstraction of
       ordered pairs.  This is a version of ~ dfoprab2 with bound-variable
       hypothesis instead of distinct variable requirement. @)
    dfoprab2f @p |- { <. <. x , y >. , z >. | ph } =
                   { <. w , z >. | E. x E. y ( w = <. x , y >. /\ ph ) } @=
      ( vv coprab cv cop wceq wa wex copab dfoprab2 ax-5 hban hbex weq
      eqeq1 anbi1d 2exbidv cbvopab1
      eqtri ) ABCDHGIZBICIJZKZALZCMZBMZGDNEIZUFKZALZCMBM
      ZEDNABCDGOUJUNGDEUIEBUHECUGAEUGEPFQRRUNGPGESZUHUMBCUOUGULAUEUKUFTUAUBUCUD
      @.
  @}
$)

  ${
    $d w x $.  $d w y $.  $d w z $.  $d w ph $.
    $( The abstraction variables in an operation class abstraction are not
       free.  (Contributed by NM, 25-Apr-1995.)  (Revised by David Abernethy,
       19-Jun-2012.) $)
    nfoprab1 $p |- F/_ x { <. <. x , y >. , z >. | ph } $=
      ( vw coprab cv cop wceq wa wex cab df-oprab nfe1 nfab nfcxfr ) BABCDFEGBG
      CGHDGHIAJDKCKZBKZELABCDEMRBEQBNOP $.

    $( The abstraction variables in an operation class abstraction are not
       free.  (Contributed by NM, 25-Apr-1995.)  (Revised by David Abernethy,
       30-Jul-2012.) $)
    nfoprab2 $p |- F/_ y { <. <. x , y >. , z >. | ph } $=
      ( vw coprab cv cop wceq wa wex cab df-oprab nfe1 nfex nfab nfcxfr ) CABCD
      FEGBGCGHDGHIAJDKZCKZBKZELABCDEMTCESCBRCNOPQ $.

    $( The abstraction variables in an operation class abstraction are not
       free.  (Contributed by NM, 22-Aug-2013.) $)
    nfoprab3 $p |- F/_ z { <. <. x , y >. , z >. | ph } $=
      ( vw coprab cv cop wceq wa wex cab df-oprab nfe1 nfex nfab nfcxfr ) DABCD
      FEGBGCGHDGHIAJZDKZCKZBKZELABCDEMUADETDBSDCRDNOOPQ $.
  $}

  ${
    $d v w x $.  $d v w y $.  $d v w z $.  $d v ph $.
    nfoprab.1 $e |- F/ w ph $.
    $( Bound-variable hypothesis builder for an operation class abstraction.
       (Contributed by NM, 22-Aug-2013.) $)
    nfoprab $p |- F/_ w { <. <. x , y >. , z >. | ph } $=
      ( vv coprab cv cop wceq wa wex cab df-oprab nfv nfan nfex nfab nfcxfr ) E
      ABCDHGIBICIJDIJKZALZDMZCMZBMZGNABCDGOUEEGUDEBUCECUBEDUAAEUAEPFQRRRST $.
  $}

  ${
    $d x z w $.  $d y z w $.  $d w ph $.  $d w ps $.  $d w ch $.
    oprabbid.1 $e |- F/ x ph $.
    oprabbid.2 $e |- F/ y ph $.
    oprabbid.3 $e |- F/ z ph $.
    oprabbid.4 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal operation class abstractions (deduction
       rule).  (Contributed by NM, 21-Feb-2004.)  (Revised by Mario Carneiro,
       24-Jun-2014.) $)
    oprabbid $p |- ( ph ->
           { <. <. x , y >. , z >. | ps } = { <. <. x , y >. , z >. | ch } ) $=
      ( vw cv cop wceq wa wex cab coprab exbid df-oprab anbi2d abbidv 3eqtr4g )
      AKLDLELMFLMNZBOZFPZEPZDPZKQUDCOZFPZEPZDPZKQBDEFRCDEFRAUHULKAUGUKDGAUFUJEH
      AUEUIFIABCUDJUASSSUBBDEFKTCDEFKTUC $.
  $}

  ${
    $d x z w ph $.  $d y z w ph $.  $d w ps $.  $d w ch $.
    oprabbidv.1 $e |- ( ph -> ( ps <-> ch ) ) $.
    $( Equivalent wff's yield equal operation class abstractions (deduction
       rule).  (Contributed by NM, 21-Feb-2004.) $)
    oprabbidv $p |- ( ph ->
           { <. <. x , y >. , z >. | ps } = { <. <. x , y >. , z >. | ch } ) $=
      ( nfv oprabbid ) ABCDEFADHAEHAFHGI $.
  $}

  ${
    $d x z w $.  $d y z w $.  $d w ph $.  $d w ps $.
    oprabbii.1 $e |- ( ph <-> ps ) $.
    $( Equivalent wff's yield equal operation class abstractions.  (Contributed
       by NM, 28-May-1995.)  (Revised by David Abernethy, 19-Jun-2012.) $)
    oprabbii $p |- { <. <. x , y >. , z >. | ph }
                 = { <. <. x , y >. , z >. | ps } $=
      ( vw cv wceq coprab eqid wb a1i oprabbidv ax-mp ) GHZPIZACDEJBCDEJIPKQABC
      DEABLQFMNO $.
  $}

  ${
    $d ph w $.  $d ps w $.  $d x w $.  $d y w $.  $d z w $.
    $( Equivalence of ordered pair abstraction subclass and implication.
       Compare ~ ssopab2 .  (Contributed by FL, 6-Nov-2013.)  (Proof shortened
       by Mario Carneiro, 11-Dec-2016.) $)
    ssoprab2 $p |- ( A. x A. y A. z ( ph -> ps ) ->
        { <. <. x , y >. , z >. | ph } C_ { <. <. x , y >. , z >. | ps } ) $=
      ( vw wi wal cv cop wceq wa wex cab coprab anim2d aleximi ss2abdv df-oprab
      id 3sstr4g ) ABGZEHZDHZCHZFICIDIJEIJKZALZEMZDMZCMZFNUFBLZEMZDMZCMZFNACDEO
      BCDEOUEUJUNFUDUIUMCUCUHULDUBUGUKEUBABUFUBTPQQQRACDEFSBCDEFSUA $.
  $}

  $( Equivalence of ordered pair abstraction subclass and implication.  Compare
     ~ ssopab2b .  (Contributed by FL, 6-Nov-2013.)  (Proof shortened by Mario
     Carneiro, 11-Dec-2016.) $)
  ssoprab2b $p |- ( { <. <. x , y >. , z >. | ph } C_
    { <. <. x , y >. , z >. | ps } <-> A. x A. y A. z ( ph -> ps ) ) $=
    ( coprab wss wi wal nfoprab1 nfss nfoprab2 nfoprab3 cv wcel oprabid 3imtr3g
    cop ssel alrimi ssoprab2 impbii ) ACDEFZBCDEFZGZABHZEIZDIZCIUEUHCCUCUDACDEJ
    BCDEJKUEUGDDUCUDACDELBCDELKUEUFEEUCUDACDEMBCDEMKUECNDNRENRZUCOUIUDOABUCUDUI
    SACDEPBCDEPQTTTABCDEUAUB $.

  $( Equivalence of ordered pair abstraction subclass and biconditional.
     Compare ~ eqopab2b .  (Contributed by Mario Carneiro, 4-Jan-2017.) $)
  eqoprab2b $p |- ( { <. <. x , y >. , z >. | ph } =
    { <. <. x , y >. , z >. | ps } <-> A. x A. y A. z ( ph <-> ps ) ) $=
    ( coprab wss wa wi wceq wb ssoprab2b anbi12i eqss 2albiim albii 19.26 bitri
    wal 3bitr4i ) ACDEFZBCDEFZGZUBUAGZHABIESDSZCSZBAIESDSZCSZHZUAUBJABKESDSZCSZ
    UCUFUDUHABCDELBACDELMUAUBNUKUEUGHZCSUIUJULCABDEOPUEUGCQRT $.

  ${
    $d x y z A $.  $d y z B $.  $d x y z D $.  $d y z E $.  $d z C $.
    $d z F $.
    $( An equality theorem for the maps to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.)  (Revised by Mario Carneiro, 19-Mar-2015.) $)
    mpt2eq123 $p |- ( ( A = D /\ A. x e. A ( B = E /\ A. y e. B C = F ) ) ->
                 ( x e. A , y e. B |-> C ) = ( x e. D , y e. E |-> F ) ) $=
      ( vz wceq wral wa cv wcel coprab cmpt2 nfv nfra1 nfan wb nfcv nfral eqeq2
      rsp pm5.32d eleq2 anbi1d sylan9bbr anass 3bitr4g oprabbid df-mpt2 3eqtr4g
      syl6 ) CFJZDGJZEHJZBDKZLZACKZLZAMZCNZBMZDNZLIMZEJZLZABIOVBFNZVDGNZLVFHJZL
      ZABIOABCDEPABFGHPVAVHVLABIUOUTAUOAQUSACRSUOUTBUOBQUSBACBCUAUPURBUPBQUQBDR
      SUBSVAIQVAVCVEVGLZLZVIVJVKLZLZVHVLUTVNVCVOLUOVPUTVCVMVOUTVCUSVMVOTUSACUDU
      RVMVEVKLUPVOURVEVGVKURVEUQVGVKTUQBDUDEHVFUCUNUEUPVEVJVKDGVDUFUGUHUNUEUOVC
      VIVOCFVBUFUGUHVCVEVGUIVIVJVKUIUJUKABICDEULABIFGHULUM $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.
    $( An equality theorem for the maps to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpt2eq12 $p |- ( ( A = C /\ B = D ) ->
                 ( x e. A , y e. B |-> E ) = ( x e. C , y e. D |-> E ) ) $=
      ( wceq wral wa cmpt2 eqid rgenw jctr ralrimivw mpt2eq123 sylan2 ) DFHZCEH
      RGGHZBDIZJZACIABCDGKABEFGKHRUAACRTSBDGLMNOABCDGEFGPQ $.
  $}

  ${
    $d z A $.  $d z B $.  $d z C $.  $d z D $.  $d z E $.  $d x z ph $.
    $d z F $.  $d y z ph $.
    mpt2eq123dv.1 $e |- ( ph -> A = D ) $.
    ${
      mpt2eq123dva.2 $e |- ( ( ph /\ x e. A ) -> B = E ) $.
      mpt2eq123dva.3 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) -> C = F ) $.
      $( An equality deduction for the maps to notation.  (Contributed by Mario
         Carneiro, 26-Jan-2017.) $)
      mpt2eq123dva $p |- ( ph
              -> ( x e. A , y e. B |-> C ) = ( x e. D , y e. E |-> F ) ) $=
        ( vz cv wcel wa wceq coprab cmpt2 pm5.32da eqeq2d eleq2d anbi1d df-mpt2
        bitrd oprabbidv 3eqtr4g ) ABNZDOZCNZEOZPZMNZFQZPZBCMRUHGOZUJHOZPZUMIQZP
        ZBCMRBCDEFSBCGHISAUOUTBCMAUOULUSPUTAULUNUSAULPFIUMLUATAULURUSAULUIUQPUR
        AUIUKUQAUIPEHUJKUBTAUIUPUQADGUHJUBUCUEUCUEUFBCMDEFUDBCMGHIUDUG $.
    $}

    mpt2eq123dv.2 $e |- ( ph -> B = E ) $.
    mpt2eq123dv.3 $e |- ( ph -> C = F ) $.
    $( An equality deduction for the maps to notation.  (Contributed by NM,
       12-Sep-2011.) $)
    mpt2eq123dv $p |- ( ph
            -> ( x e. A , y e. B |-> C ) = ( x e. D , y e. E |-> F ) ) $=
      ( wceq cv wcel adantr wa mpt2eq123dva ) ABCDEFGHIJAEHMBNDOZKPAFIMSCNEOQLP
      R $.
  $}

  ${
    mpt2eq123i.1 $e |- A = D $.
    mpt2eq123i.2 $e |- B = E $.
    mpt2eq123i.3 $e |- C = F $.
    $( An equality inference for the maps to notation.  (Contributed by NM,
       15-Jul-2013.) $)
    mpt2eq123i $p |- ( x e. A , y e. B |-> C ) = ( x e. D , y e. E |-> F ) $=
      ( cmpt2 wceq wtru a1i mpt2eq123dv trud ) ABCDELABFGHLMNABCDEFGHCFMNIODGMN
      JOEHMNKOPQ $.
  $}

  ${
    $d x z ph $.  $d y z ph $.  $d z A $.  $d z B $.  $d z C $.  $d z D $.
    mpt2eq3dva.1 $e |- ( ( ph /\ x e. A /\ y e. B ) -> C = D ) $.
    $( Slightly more general equality inference for the maps to notation.
       (Contributed by NM, 17-Oct-2013.) $)
    mpt2eq3dva $p |- ( ph -> ( x e. A , y e. B |-> C )
              = ( x e. A , y e. B |-> D ) ) $=
      ( vz cv wcel wa wceq coprab cmpt2 3expb eqeq2d pm5.32da oprabbidv df-mpt2
      3eqtr4g ) ABJDKZCJEKZLZIJZFMZLZBCINUDUEGMZLZBCINBCDEFOBCDEGOAUGUIBCIAUDUF
      UHAUDLFGUEAUBUCFGMHPQRSBCIDEFTBCIDEGTUA $.
  $}

  ${
    mpt2eq3ia.1 $e |- ( ( x e. A /\ y e. B ) -> C = D ) $.
    $( An equality inference for the maps to notation.  (Contributed by Mario
       Carneiro, 16-Dec-2013.) $)
    mpt2eq3ia $p |- ( x e. A , y e. B |-> C ) = ( x e. A , y e. B |-> D ) $=
      ( cmpt2 wceq wtru cv wcel 3adant1 mpt2eq3dva trud ) ABCDEHABCDFHIJABCDEFA
      KCLBKDLEFIJGMNO $.
  $}

  ${
    $d ph x $.  $d ph y $.
    mpt2eq3dv.1 $e |- ( ph -> C = D ) $.
    $( An equality deduction for the maps to notation restricted to the value
       of the operation.  (Contributed by SO, 16-Jul-2018.) $)
    mpt2eq3dv $p |- ( ph -> ( x e. A , y e. B |-> C ) =
        ( x e. A , y e. B |-> D ) ) $=
      ( cv wcel wceq 3ad2ant1 mpt2eq3dva ) ABCDEFGABIDJFGKCIEJHLM $.
  $}

  ${
    $d z A $.  $d z B $.  $d z C $.  $d z x $.  $d z y $.
    $( Bound-variable hypothesis builder for an operation in maps-to notation.
       (Contributed by NM, 27-Aug-2013.) $)
    nfmpt21 $p |- F/_ x ( x e. A , y e. B |-> C ) $=
      ( vz cmpt2 cv wcel wa wceq coprab df-mpt2 nfoprab1 nfcxfr ) AABCDEGAHCIBH
      DIJFHEKJZABFLABFCDEMPABFNO $.

    $( Bound-variable hypothesis builder for an operation in maps-to notation.
       (Contributed by NM, 27-Aug-2013.) $)
    nfmpt22 $p |- F/_ y ( x e. A , y e. B |-> C ) $=
      ( vz cmpt2 cv wcel wa wceq coprab df-mpt2 nfoprab2 nfcxfr ) BABCDEGAHCIBH
      DIJFHEKJZABFLABFCDEMPABFNO $.
  $}

  ${
    $d w x z $.  $d w y z $.  $d w A $.  $d w B $.  $d w C $.
    nfmpt2.1 $e |- F/_ z A $.
    nfmpt2.2 $e |- F/_ z B $.
    nfmpt2.3 $e |- F/_ z C $.
    $( Bound-variable hypothesis builder for the maps-to notation.
       (Contributed by NM, 20-Feb-2013.) $)
    nfmpt2 $p |- F/_ z ( x e. A , y e. B |-> C ) $=
      ( vw cmpt2 cv wcel wa wceq coprab df-mpt2 nfcri nfan nfeq2 nfoprab nfcxfr
      ) CABDEFKALDMZBLEMZNZJLZFOZNZABJPABJDEFQUHABJCUEUGCUCUDCCADGRCBEHRSCUFFIT
      SUAUB $.
  $}

  ${
    $d w x z $.  $d w y z $.  $d w z B $.  $d w z C $.
    $( A mapping operation with empty domain.  (Contributed by Stefan O'Rear,
       29-Jan-2015.)  (Revised by Mario Carneiro, 15-May-2015.) $)
    mpt20 $p |- ( x e. (/) , y e. B |-> C ) = (/) $=
      ( vz vw c0 cmpt2 cv wcel wa wceq coprab cop wex cab df-mpt2 df-oprab noel
      nex simprll mto abf 3eqtri ) ABGCDHAIZGJZBIZCJZKEIZDLZKZABEMFIUEUGNUINLZU
      KKZEOZBOZAOZFPGABEGCDQUKABEFRUPFUOAUNBUMEUMUFUESULUFUHUJUAUBTTTUCUD $.
  $}

  ${
    $d x y z $.
    $( Two ways to state the domain of an operation.  (Contributed by FL,
       24-Jan-2010.) $)
    oprab4 $p |-
      { <. <. x , y >. , z >. | ( <. x , y >. e. ( A X. B ) /\ ph ) } =
        { <. <. x , y >. , z >. | ( ( x e. A /\ y e. B ) /\ ph ) } $=
      ( cv cop cxp wcel wa opelxp anbi1i oprabbii ) BGZCGZHEFIJZAKOEJPFJKZAKBCD
      QRAOPEFLMN $.
  $}

  ${
    $d x y z w v $.  $d v ph $.  $d v ps $.
    cbvoprab1.1 $e |- F/ w ph $.
    cbvoprab1.2 $e |- F/ x ps $.
    cbvoprab1.3 $e |- ( x = w -> ( ph <-> ps ) ) $.
    $( Rule used to change first bound variable in an operation abstraction,
       using implicit substitution.  (Contributed by NM, 20-Dec-2008.)
       (Revised by Mario Carneiro, 5-Dec-2016.) $)
    cbvoprab1 $p |- { <. <. x , y >. , z >. | ph }
                  = { <. <. w , y >. , z >. | ps } $=
      ( vv cv cop wceq wa wex copab coprab nfv nfan nfex eqeq2d anbi12d opabbii
      opeq1 exbidv cbvex dfoprab2 3eqtr4i ) JKZCKZDKZLZMZANZDOZCOZJEPUIFKZUKLZM
      ZBNZDOZFOZJEPACDEQBFDEQUPVBJEUOVACFUNFDUMAFUMFRGSTUTCDUSBCUSCRHSTUJUQMZUN
      UTDVCUMUSABVCULURUIUJUQUKUDUAIUBUEUFUCACDEJUGBFDEJUGUH $.
  $}

  ${
    $d v w x y z $.  $d ph v $.  $d ps v $.
    cbvoprab2.1 $e |- F/ w ph $.
    cbvoprab2.2 $e |- F/ y ps $.
    cbvoprab2.3 $e |- ( y = w -> ( ph <-> ps ) ) $.
    $( Change the second bound variable in an operation abstraction.
       (Contributed by Jeff Madsen, 11-Jun-2010.)  (Revised by Mario Carneiro,
       11-Dec-2016.) $)
    cbvoprab2 $p |- { <. <. x , y >. , z >. | ph } =
                    { <. <. x , w >. , z >. | ps } $=
      ( vv cv cop wceq wa wex cab coprab nfv nfan nfex opeq2 opeq1d cbvex exbii
      eqeq2d anbi12d exbidv abbii df-oprab 3eqtr4i ) JKZCKZDKZLZEKZLZMZANZEOZDO
      ZCOZJPUKULFKZLZUOLZMZBNZEOZFOZCOZJPACDEQBCFEQVAVIJUTVHCUSVGDFURFEUQAFUQFR
      GSTVFDEVEBDVEDRHSTUMVBMZURVFEVJUQVEABVJUPVDUKVJUNVCUOUMVBULUAUBUEIUFUGUCU
      DUHACDEJUIBCFEJUIUJ $.
  $}

  ${
    $d x y z w v u $.  $d u ph $.  $d u ps $.
    cbvoprab12.1 $e |- F/ w ph $.
    cbvoprab12.2 $e |- F/ v ph $.
    cbvoprab12.3 $e |- F/ x ps $.
    cbvoprab12.4 $e |- F/ y ps $.
    cbvoprab12.5 $e |- ( ( x = w /\ y = v ) -> ( ph <-> ps ) ) $.
    $( Rule used to change first two bound variables in an operation
       abstraction, using implicit substitution.  (Contributed by NM,
       21-Feb-2004.)  (Proof shortened by Andrew Salmon, 22-Oct-2011.) $)
    cbvoprab12 $p |- { <. <. x , y >. , z >. | ph }
                   = { <. <. w , v >. , z >. | ps } $=
      ( vu cv cop wceq wa wex nfv nfan coprab anbi12d opabbii dfoprab2 3eqtr4i
      copab opeq12 eqeq2d cbvex2 ) MNZCNZDNZOZPZAQZDRCRZMEUFUJFNZGNZOZPZBQZGRFR
      ZMEUFACDEUABFGEUAUPVBMEUOVACDFGUNAFUNFSHTUNAGUNGSITUTBCUTCSJTUTBDUTDSKTUK
      UQPULURPQZUNUTABVCUMUSUJUKULUQURUGUHLUBUIUCACDEMUDBFGEMUDUE $.
  $}

  ${
    $d x y z w v u $.  $d u w v ph $.  $d u x y ps $.
    cbvoprab12v.1 $e |- ( ( x = w /\ y = v ) -> ( ph <-> ps ) ) $.
    $( Rule used to change first two bound variables in an operation
       abstraction, using implicit substitution.  (Contributed by NM,
       8-Oct-2004.) $)
    cbvoprab12v $p |- { <. <. x , y >. , z >. | ph }
                    = { <. <. w , v >. , z >. | ps } $=
      ( nfv cbvoprab12 ) ABCDEFGAFIAGIBCIBDIHJ $.
  $}

  ${
    $d x z w v $.  $d y z w v $.  $d v ph $.  $d v ps $.
    cbvoprab3.1 $e |- F/ w ph $.
    cbvoprab3.2 $e |- F/ z ps $.
    cbvoprab3.3 $e |- ( z = w -> ( ph <-> ps ) ) $.
    $( Rule used to change the third bound variable in an operation
       abstraction, using implicit substitution.  (Contributed by NM,
       22-Aug-2013.) $)
    cbvoprab3 $p |- { <. <. x , y >. , z >. | ph } =
                     { <. <. x , y >. , w >. | ps } $=
      ( vv cv wceq wa wex copab coprab nfv nfan nfex dfoprab2 2exbidv cbvopab2
      cop anbi2d 3eqtr4i ) JKCKDKUCLZAMZDNZCNZJEOUFBMZDNZCNZJFOACDEPBCDFPUIULJE
      FUHFCUGFDUFAFUFFQGRSSUKECUJEDUFBEUFEQHRSSEKFKLZUGUJCDUMABUFIUDUAUBACDEJTB
      CDFJTUE $.
  $}

  ${
    $d x z w v $.  $d y z w v $.  $d w v ph $.  $d z v ps $.
    cbvoprab3v.1 $e |- ( z = w -> ( ph <-> ps ) ) $.
    $( Rule used to change the third bound variable in an operation
       abstraction, using implicit substitution.  (Contributed by NM,
       8-Oct-2004.)  (Revised by David Abernethy, 19-Jun-2012.) $)
    cbvoprab3v $p |- { <. <. x , y >. , z >. | ph } =
                     { <. <. x , y >. , w >. | ps } $=
      ( nfv cbvoprab3 ) ABCDEFAFHBEHGI $.
  $}

  ${
    $d u v w x y z $.  $d u w x y z A $.  $d u w B $.  $d u C $.  $d u y D $.
    $d u E $.
    cbvmpt2x.1 $e |- F/_ z B $.
    cbvmpt2x.2 $e |- F/_ x D $.
    cbvmpt2x.3 $e |- F/_ z C $.
    cbvmpt2x.4 $e |- F/_ w C $.
    cbvmpt2x.5 $e |- F/_ x E $.
    cbvmpt2x.6 $e |- F/_ y E $.
    cbvmpt2x.7 $e |- ( x = z -> B = D ) $.
    cbvmpt2x.8 $e |- ( ( x = z /\ y = w ) -> C = E ) $.
    $( Rule to change the bound variable in a maps-to function, using implicit
       substitution.  This version of ~ cbvmpt2 allows ` B ` to be a function
       of ` x ` .  (Contributed by NM, 29-Dec-2014.) $)
    cbvmpt2x $p |- ( x e. A , y e. B |-> C ) = ( z e. A , w e. D |-> E ) $=
      ( vu cv nfan wcel wa wceq coprab cmpt2 nfv nfcri nfeq2 nfcv weq wb adantr
      eleq1 eleq2d sylan9bb anbi12d eqeq2d cbvoprab12 df-mpt2 3eqtr4i ) ASZEUAZ
      BSZFUAZUBZRSZGUCZUBZABRUDCSZEUAZDSZHUAZUBZVFIUCZUBZCDRUDABEFGUECDEHIUEVHV
      OABRCDVEVGCVBVDCVBCUFCBFJUGTCVFGLUHTVEVGDVBVDDVBDUFDBFDFUIUGTDVFGMUHTVMVN
      AVJVLAVJAUFADHKUGTAVFINUHTVMVNBVMBUFBVFIOUHTACUJZBDUJZUBZVEVMVGVNVRVBVJVD
      VLVPVBVJUKVQVAVIEUMULVPVDVCHUAVQVLVPFHVCPUNVCVKHUMUOUPVRGIVFQUQUPURABREFG
      USCDREHIUSUT $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.
    cbvmpt2.1 $e |- F/_ z C $.
    cbvmpt2.2 $e |- F/_ w C $.
    cbvmpt2.3 $e |- F/_ x D $.
    cbvmpt2.4 $e |- F/_ y D $.
    cbvmpt2.5 $e |- ( ( x = z /\ y = w ) -> C = D ) $.
    $( Rule to change the bound variable in a maps-to function, using implicit
       substitution.  (Contributed by NM, 17-Dec-2013.) $)
    cbvmpt2 $p |- ( x e. A , y e. B |-> C ) = ( z e. A , w e. B |-> D ) $=
      ( nfcv weq eqidd cbvmpt2x ) ABCDEFGFHCFNAFNIJKLACOFPMQ $.
  $}

  ${
    $d v w x y z A $.  $d v w x y z B $.  $d v w z C $.  $d v x y D $.
    cbvmpt2v.1 $e |- ( x = z -> C = E ) $.
    cbvmpt2v.2 $e |- ( y = w -> E = D ) $.
    $( Rule to change the bound variable in a maps-to function, using implicit
       substitution.  With a longer proof analogous to ~ cbvmpt , some distinct
       variable requirements could be eliminated.  (Contributed by NM,
       11-Jun-2013.) $)
    cbvmpt2v $p |- ( x e. A , y e. B |-> C ) = ( z e. A , w e. B |-> D ) $=
      ( nfcv weq sylan9eq cbvmpt2 ) ABCDEFGHCGLDGLAHLBHLACMBDMGIHJKNO $.
  $}

  ${
    elimdelov.1 $e |- ( ph -> C e. ( A F B ) ) $.
    elimdelov.2 $e |- Z e. ( X F Y ) $.
    $( Eliminate a hypothesis which is a predicate expressing membership in the
       result of an operator (deduction version).  See ~ ghomgrplem for an
       example of its use.  (Contributed by Paul Chapman, 25-Mar-2008.) $)
    elimdelov $p |- if ( ph , C , Z ) e.
                     ( if ( ph , A , X ) F if ( ph , B , Y ) ) $=
      ( cif co wcel iftrue oveq12d 3eltr4d wn iffalse syl6eqel eleqtrrd pm2.61i
      ) AADHKZABFKZACGKZELZMADBCELUBUEIADHNAUCBUDCEABFNACGNOPAQZUBFGELZUEUFUBHU
      GADHRJSUFUCFUDGEABFRACGROTUA $.
  $}

  $( Move a conditional outside of an operation (Contributed by Thierry Arnoux,
     25-Jan-2017.) $)
  ovif $p |- ( if ( ph , A , B ) F C ) = if ( ph , ( A F C ) , ( B F C ) ) $=
    ( cif co oveq1 ifsb ) ABCABCFZDEGBDEGCDEGJBDEHJCDEHI $.

  $( Move a conditional outside of an operation (Contributed by Thierry Arnoux,
     1-Oct-2018.) $)
  ovif2 $p |- ( A F if ( ph , B , C ) ) = if ( ph , ( A F B ) , ( A F C ) ) $=
    ( cif co oveq2 ifsb ) ACDBACDFZEGBCEGBDEGJCBEHJDBEHI $.

  $( Move a conditional outside of an operation (Contributed by Thierry Arnoux,
     25-Jan-2017.) $)
  ovif12 $p |- ( if ( ph , A , B ) F if ( ph , C , D ) )
    = if ( ph , ( A F C ) , ( B F D ) ) $=
    ( cif co wceq iftrue oveq12d eqtr4d wn iffalse pm2.61i ) AABCGZADEGZFHZABDF
    HZCEFHZGZIARSUAAPBQDFABCJADEJKASTJLAMZRTUAUBPCQEFABCNADENKASTNLO $.

  $( Move a conditional outside of an operation.  (Contributed by AV,
     11-Nov-2019.) $)
  ifov $p |- ( A if ( ph , F , G ) B ) = if ( ph , ( A F B ) , ( A G B ) ) $=
    ( cif co oveq ifsb ) ADEBCADEFZGBCDGBCEGBCJDHBCJEHI $.

  ${
    $d x z w $.  $d y z w $.  $d w ph $.
    $( The domain of an operation class abstraction.  (Contributed by NM,
       17-Mar-1995.)  (Revised by David Abernethy, 19-Jun-2012.) $)
    dmoprab $p |- dom { <. <. x , y >. , z >. | ph } =
                  { <. x , y >. | E. z ph } $=
      ( vw coprab cdm cv cop wceq wa wex copab cab dfoprab2 dmeqi dmopab exrot3
      19.42v 2exbii bitri abbii df-opab eqtr4i 3eqtri ) ABCDFZGEHBHCHIJZAKZCLBL
      ZEDMZGUIDLZENZADLZBCMZUFUJABCDEOPUIEDQULUGUMKZCLBLZENUNUKUPEUKUHDLZCLBLUP
      UHDBCRUQUOBCUGADSTUAUBUMBCEUCUDUE $.
  $}

  ${
    $d x y z A $.  $d x y z B $.
    $( The domain of an operation class abstraction.  (Contributed by NM,
       24-Aug-1995.) $)
    dmoprabss $p |- dom { <. <. x , y >. , z >. |
           ( ( x e. A /\ y e. B ) /\ ph ) } C_ ( A X. B ) $=
      ( cv wcel wa coprab cdm wex copab dmoprab 19.42v opabbii opabssxp eqsstri
      cxp ) BGEHCGFHIZAIZBCDJKUADLZBCMZEFSZUABCDNUCTADLZIZBCMUDUBUFBCTADOPUEBCE
      FQRR $.
  $}

  ${
    $d x z w $.  $d y z w $.  $d w ph $.
    $( The range of an operation class abstraction.  (Contributed by NM,
       30-Aug-2004.)  (Revised by David Abernethy, 19-Apr-2013.) $)
    rnoprab $p |- ran { <. <. x , y >. , z >. | ph } =
                  { z | E. x E. y ph } $=
      ( vw coprab crn cv cop wceq wa wex copab cab dfoprab2 rneqi rnopab exrot3
      opex isseti 19.41v mpbiran 2exbii bitri abbii 3eqtri ) ABCDFZGEHBHZCHZIZJ
      ZAKZCLBLZEDMZGUMELZDNACLBLZDNUGUNABCDEOPUMEDQUOUPDUOULELZCLBLUPULEBCRUQAB
      CUQUKELAEUJUHUISTUKAEUAUBUCUDUEUF $.
  $}

  ${
    $d A y $.  $d x y z $.
    $( The range of a restricted operation class abstraction.  (Contributed by
       Scott Fenton, 21-Mar-2012.) $)
    rnoprab2 $p |- ran { <. <. x , y >. , z >. |
                          ( ( x e. A /\ y e. B ) /\ ph ) } =
                    { z | E. x e. A E. y e. B ph } $=
      ( cv wcel wa coprab crn wex cab wrex rnoprab r2ex abbii eqtr4i ) BGEHCGFH
      IAIZBCDJKSCLBLZDMACFNBENZDMSBCDOUATDABCEFPQR $.
  $}

  ${
    $d x y z $.
    $( The domain of an operation class abstraction is a relation.
       (Contributed by NM, 17-Mar-1995.) $)
    reldmoprab $p |- Rel dom { <. <. x , y >. , z >. | ph } $=
      ( wex coprab cdm dmoprab relopabi ) ADEBCABCDFGABCDHI $.

    $( Structure of an operation class abstraction.  (Contributed by NM,
       28-Nov-2006.) $)
    oprabss $p |- { <. <. x , y >. , z >. | ph } C_ ( ( _V X. _V ) X. _V ) $=
      ( coprab cdm crn cxp wrel reloprab relssdmrn ax-mp reldmoprab df-rel mpbi
      cvv wss ssv xpss12 mp2an sstri ) ABCDEZUBFZUBGZHZPPHZPHZUBIUBUEQABCDJUBKL
      UCUFQZUDPQUEUGQUCIUHABCDMUCNOUDRUCUFUDPSTUA $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d w ph $.
    $d x y z w ps $.
    eloprabga.1 $e |- ( ( x = A /\ y = B /\ z = C ) -> ( ph <-> ps ) ) $.
    $( The law of concretion for operation class abstraction.  Compare
       ~ elopab .  (Contributed by NM, 14-Sep-1999.)  (Unnecessary distinct
       variable restrictions were removed by David Abernethy, 19-Jun-2012.)
       (Revised by Mario Carneiro, 19-Dec-2013.) $)
    eloprabga $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
       ( <. <. A , B >. , C >. e. { <. <. x , y >. , z >. | ph } <-> ps ) ) $=
      ( vw wcel cvv cop cv wceq wa wex coprab wb elex w3a wi simpr eqeq1d eqcom
      opex vex otth2 bitri syl6bb anbi1d pm5.32i 3exbidv df-oprab eleq2i bitr2i
      cab abid syl5bb adantl elisset 3anim123i eeeanv sylibr biantrurd 19.41vvv
      eleq1 syl6rbbr adantr 3bitr3d expcom vtocle syl3an ) FINFONZGJNGONZHKNHON
      ZFGPZHPZACDEUAZNZBUBZFIUCGJUCHKUCVQVRVSUDZWDUEMWAVTHUIWEMQZWARZWDWEWGSZWF
      CQZDQZPEQZPZRZASZETDTCTZWIFRZWJGRZWKHRZUDZBSZETDTCTZWCBWHWNWTCDEWHWNWSASW
      TWHWMWSAWHWMWAWLRZWSWHWFWAWLWEWGUFUGXBWLWARWSWAWLUHWIWJFGWKHCUJDUJEUJUKUL
      UMUNWSABLUOUMUPWGWOWCUBWEWOWFWBNZWGWCXCWFWOMUTZNWOWBXDWFACDEMUQURWOMVAUSW
      FWAWBVJVBVCWEXABUBWGWEBWSETDTCTZBSXAWEXEBWEWPCTZWQDTZWRETZUDXEVQXFVRXGVSX
      HCFOVDDGOVDEHOVDVEWPWQWRCDEVFVGVHWSBCDEVIVKVLVMVNVOVP $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d w ph $.
    $d x y z w th $.
    eloprabg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    eloprabg.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    eloprabg.3 $e |- ( z = C -> ( ch <-> th ) ) $.
    $( The law of concretion for operation class abstraction.  Compare
       ~ elopab .  (Contributed by NM, 14-Sep-1999.)  (Revised by David
       Abernethy, 19-Jun-2012.) $)
    eloprabg $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
       ( <. <. A , B >. , C >. e. { <. <. x , y >. , z >. | ph } <-> th ) ) $=
      ( cv wceq syl3an9b eloprabga ) ADEFGHIJKLMEQHRABFQIRCGQJRDNOPST $.
  $}

  ${
    $d ph w $.  $d ps w $.  $d x z w $.  $d y z w $.
    ssoprab2i.1 $e |- ( ph -> ps ) $.
    $( Inference of operation class abstraction subclass from implication.
       (Contributed by NM, 11-Nov-1995.)  (Revised by David Abernethy,
       19-Jun-2012.) $)
    ssoprab2i $p |- { <. <. x , y >. , z >. | ph } C_
                    { <. <. x , y >. , z >. | ps } $=
      ( vw cv cop wceq wex copab coprab anim2i 2eximi ssopab2i dfoprab2 3sstr4i
      wa ) GHCHDHIJZASZDKCKZGELTBSZDKCKZGELACDEMBCDEMUBUDGEUAUCCDABTFNOPACDEGQB
      CDEGQR $.
  $}

  ${
    $d x z $.  $d y z $.  $d z C $.
    $( Operation with universal domain in maps-to notation.  (Contributed by
       NM, 16-Aug-2013.) $)
    mpt2v $p |- ( x e. _V , y e. _V |-> C )
                     = { <. <. x , y >. , z >. | z = C } $=
      ( cvv cmpt2 cv wcel wa coprab df-mpt2 vex pm3.2i biantrur oprabbii eqtr4i
      wceq ) ABEEDFAGEHZBGEHZIZCGDQZIZABCJUAABCJABCEEDKUAUBABCTUARSALBLMNOP $.
  $}

  ${
    $d w x y z A $.  $d w y z B $.  $d w x y C $.  $d w z D $.
    mpt2mpt.1 $e |- ( z = <. x , y >. -> C = D ) $.
    $( Express a two-argument function as a one-argument function, or
       vice-versa.  In this version ` B ( x ) ` is not assumed to be constant
       w.r.t ` x ` .  (Contributed by Mario Carneiro, 29-Dec-2014.) $)
    mpt2mptx $p |- ( z e. U_ x e. A ( { x } X. B ) |-> C ) =
      ( x e. A , y e. B |-> D ) $=
      ( vw cv csn cxp ciun cmpt wcel wceq wa copab wex eqtr4i df-mpt coprab cop
      cmpt2 df-mpt2 eliunxp anbi1i 19.41vv eqeq2d anbi2d pm5.32i 2exbii 3bitr2i
      anass bitri opabbii dfoprab2 ) CADAJZKELMZFNCJZUSOZIJZFPZQZCIRZABDEGUDZCI
      USFUAVFURDOBJZEOQZVBGPZQZABIUBZVEABIDEGUEVEUTURVGUCPZVJQZBSASZCIRVKVDVNCI
      VDVLVHQZBSASZVCQVOVCQZBSASVNVAVPVCABDEUTUFUGVOVCABUHVQVMABVQVLVHVCQZQVMVL
      VHVCUNVLVRVJVLVCVIVHVLFGVBHUIUJUKUOULUMUPVJABICUQTTT $.

    $d x B $.
    $( Express a two-argument function as a one-argument function, or
       vice-versa.  (Contributed by Mario Carneiro, 17-Dec-2013.)  (Revised by
       Mario Carneiro, 29-Dec-2014.) $)
    mpt2mpt $p |- ( z e. ( A X. B ) |-> C ) = ( x e. A , y e. B |-> D ) $=
      ( cv csn cxp ciun cmpt cmpt2 wceq iunxpconst mpteq1 ax-mp mpt2mptx eqtr3i
      ) CADAIJEKLZFMZCDEKZFMZABDEGNUAUCOUBUDOADEPCUAUCFQRABCDEFGHST $.
  $}

  $( A mapping with two arguments with the first argument from a difference set
     with a singleton and a conditional as result.  (Contributed by AV,
     13-Feb-2019.) $)
  mpt2difsnif $p |- ( i e. ( A \ { X } ) , j e. B |-> if ( i = X , C , D ) )
                  = ( i e. ( A \ { X } ) , j e. B |-> D ) $=
    ( csn cdif cv wceq cif wcel wa wn wne eldifsn df-ne biimpi adantl mpt2eq3ia
    sylbi adantr iffalsed ) EFAGHIZBEJZGKZCDLDUFUEMZFJBMZNUGCDUHUGOZUIUHUFAMZUF
    GPZNUJUFAGQULUJUKULUJUFGRSTUBUCUDUA $.

  $( A mapping with two arguments with the first argument from a singleton and
     a conditional as result.  (Contributed by AV, 14-Feb-2019.) $)
  mpt2snif $p |- ( i e. { X } , j e. B |-> if ( i = X , C , D ) )
               = ( i e. { X } , j e. B |-> C ) $=
    ( csn cv wceq cif wcel wa elsni adantr iftrued mpt2eq3ia ) DEFGZADHZFIZBCJB
    RQKZEHAKZLSBCTSUARFMNOP $.

  ${
    $d A x y z $.  $d B x y z $.  $d C x y z $.
    $( Representation of a constant operation using the mapping operation.
       (Contributed by SO, 11-Jul-2018.) $)
    fconstmpt2 $p |- ( ( A X. B ) X. { C } ) = ( x e. A , y e. B |-> C ) $=
      ( vz cxp csn cmpt cmpt2 fconstmpt cv cop wceq eqidd mpt2mpt eqtri ) CDGZE
      HGFREIABCDEJFREKABFCDEEFLALBLMNEOPQ $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w ph $.
    $( Restriction of an operation class abstraction.  (Contributed by NM,
       10-Feb-2007.) $)
    resoprab $p |- ( { <. <. x , y >. , z >. | ph } |` ( A X. B ) ) =
                  { <. <. x , y >. , z >. | ( ( x e. A /\ y e. B ) /\ ph ) } $=
      ( vw cv cop wceq wex copab cxp cres wcel coprab resopab 19.42vv dfoprab2
      wa eleq1 opelxp syl6bb anbi1d pm5.32i bitri 2exbii bitr3i opabbii reseq1i
      an12 eqtri 3eqtr4i ) GHZBHZCHZIZJZATZCKBKZGDLZEFMZNZURUOEOUPFOTZATZTZCKBK
      ZGDLZABCDPZVBNVEBCDPVCUNVBOZUTTZGDLVHUTGDVBQVKVGGDVKVJUSTZCKBKVGVJUSBCRVL
      VFBCVLURVJATZTVFVJURAUKURVMVEURVJVDAURVJUQVBOVDUNUQVBUAUOUPEFUBUCUDUEUFUG
      UHUIULVIVAVBABCDGSUJVEBCDGSUM $.
  $}

  ${
    $d A x y z $.  $d B x y z $.  $d C x y z $.  $d D x y z $.  $d E z $.
    $( Restriction of an operator abstraction.  (Contributed by Jeff Madsen,
       2-Sep-2009.) $)
    resoprab2 $p |- ( ( C C_ A /\ D C_ B ) -> ( { <. <. x , y >. , z >. |
                  ( ( x e. A /\ y e. B ) /\ ph ) } |` ( C X. D ) ) =
              { <. <. x , y >. , z >. | ( ( x e. C /\ y e. D ) /\ ph ) } ) $=
      ( wss wa cv wcel coprab cxp cres resoprab anass ssel pm4.71d bicomd an4
      bi2anan9 syl5bb anbi1d syl5bbr oprabbidv syl5eq ) GEIZHFIZJZBKZELZCKZFLZJ
      ZAJZBCDMGHNOUKGLZUMHLZJZUPJZBCDMUSAJZBCDMUPBCDGHPUJUTVABCDUTUSUOJZAJUJVAU
      SUOAQUJVBUSAVBUQULJZURUNJZJUJUSUQURULUNUAUHVCUQUIVDURUHUQVCUHUQULGEUKRSTU
      IURVDUIURUNHFUMRSTUBUCUDUEUFUG $.

    $( Restriction of the mapping operation.  (Contributed by Mario Carneiro,
       17-Dec-2013.) $)
    resmpt2 $p |- ( ( C C_ A /\ D C_ B ) ->
                    ( ( x e. A , y e. B |-> E ) |` ( C X. D ) ) =
                      ( x e. C , y e. D |-> E ) ) $=
      ( vz wss wa cv wcel wceq coprab cxp cres cmpt2 resoprab2 df-mpt2 reseq1i
      3eqtr4g ) ECIFDIJAKZCLBKZDLJHKGMZJABHNZEFOZPUBELUCFLJUDJABHNABCDGQZUFPABE
      FGQUDABHCDEFRUGUEUFABHCDGSTABHEFGSUA $.
  $}

  ${
    $d x y z w $.  $d w ph $.
    $( ""At most one"" is a sufficient condition for an operation class
       abstraction to be a function.  (Contributed by NM, 28-Aug-2007.) $)
    funoprabg $p |- ( A. x A. y E* z ph ->
                    Fun { <. <. x , y >. , z >. | ph } ) $=
      ( vw wmo wal cv cop wceq wa wex coprab wfun mosubopt alrimiv copab funeqi
      dfoprab2 funopab bitr2i sylib ) ADFCGBGZEHZBHCHIJAKCLBLZDFZEGZABCDMZNZUCU
      FEADBCUDOPUIUEEDQZNUGUHUJABCDESRUEEDTUAUB $.
  $}

  ${
    $d x y z w $.  $d w ph $.
    funoprab.1 $e |- E* z ph $.
    $( ""At most one"" is a sufficient condition for an operation class
       abstraction to be a function.  (Contributed by NM, 17-Mar-1995.) $)
    funoprab $p |- Fun { <. <. x , y >. , z >. | ph } $=
      ( wmo wal coprab wfun gen2 funoprabg ax-mp ) ADFZCGBGABCDHIMBCEJABCDKL $.
  $}

  ${
    $d x y z $.  $d z ph $.
    $( Functionality and domain of an operation class abstraction.
       (Contributed by NM, 28-Aug-2007.) $)
    fnoprabg $p |- ( A. x A. y ( ph -> E! z ps ) ->
  { <. <. x , y >. , z >. | ( ph /\ ps ) } Fn { <. x , y >. | ph } ) $=
      ( weu wi wal wa coprab wfun cdm copab wceq wfn wmo eumo imim2i wex sps wb
      moanimv sylibr 2alimi funoprabg syl dmoprab nfa1 nfa2 simpl exlimiv ancld
      euex 19.42v syl6ibr impbid2 opabbid syl5eq df-fn sylanbrc ) ABEFZGZDHZCHZ
      ABIZCDEJZKZVFLZACDMZNVFVIOVDVEEPZDHCHVGVBVJCDVBABEPZGVJVAVKABEQRABEUBUCUD
      VECDEUEUFVDVHVEESZCDMVIVECDEUGVDVLACDVCCUHVBDCUIVCVLAUAZCVBVMDVBVLAVEAEAB
      UJUKVBAABESZIVLVBAVNVAVNABEUMRULABEUNUOUPTTUQURVFVIUSUT $.
  $}

  ${
    $d A w z $.  $d B w z $.  $d C w z $.  $d x y w z $.
    mpt2fun.1 $e |- F = ( x e. A , y e. B |-> C ) $.
    $( The maps-to notation for an operation is always a function.
       (Contributed by Scott Fenton, 21-Mar-2012.) $)
    mpt2fun $p |- Fun F $=
      ( vz vw wfun cv wcel wa wceq coprab wmo weq wi wal mpbir eqtr3 gen2 eqeq1
      ad2ant2l anbi2d mo4 funoprab cmpt2 df-mpt2 eqtri funeqi ) FJAKCLBKDLMZHKZ
      ENZMZABHOZJUOABHUOHPUOULIKZENZMZMHIQZRZISHSVAHIUNURUTULULUMUQEUAUDUBUOUSH
      IUTUNURULUMUQEUCUEUFTUGFUPFABCDEUHUPGABHCDEUIUJUKT $.
  $}

  ${
    $d x y z $.  $d z ph $.
    fnoprab.1 $e |- ( ph -> E! z ps ) $.
    $( Functionality and domain of an operation class abstraction.
       (Contributed by NM, 15-May-1995.) $)
    fnoprab $p |- { <. <. x , y >. , z >. | ( ph /\ ps ) } Fn
                    { <. x , y >. | ph } $=
      ( weu wi wal wa coprab copab wfn gen2 fnoprabg ax-mp ) ABEGHZDICIABJCDEKA
      CDLMQCDFNABCDEOP $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w C $.  $d x y z w F $.
    $( An operation maps to a class to which all values belong.  (Contributed
       by NM, 7-Feb-2004.) $)
    ffnov $p |- ( F : ( A X. B ) --> C <-> ( F Fn ( A X. B ) /\
         A. x e. A A. y e. B ( x F y ) e. C ) ) $=
      ( vw cxp wf wfn cv cfv wcel wral wa co ffnfv cop wceq fveq2 df-ov syl6eqr
      eleq1d ralxp anbi2i bitri ) CDHZEFIFUGJZGKZFLZEMZGUGNZOUHAKZBKZFPZEMZBDNA
      CNZOGUGEFQULUQUHUKUPGABCDUIUMUNRZSZUJUOEUSUJURFLUOUIURFTUMUNFUAUBUCUDUEUF
      $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x y F $.  $d x y R $.  $d x y S $.
    fovcl.1 $e |- F : ( R X. S ) --> C $.
    $( Closure law for an operation.  (Contributed by NM, 19-Apr-2007.) $)
    fovcl $p |- ( ( A e. R /\ B e. S ) -> ( A F B ) e. C ) $=
      ( vx vy wcel wa cv co wral cxp wf wfn ffnov wceq eleq1d ax-mp oveq1 oveq2
      simprbi rspc2v mpi ) ADJBEJKHLZILZFMZCJZIENHDNZABFMZCJZDEOZCFPZUKGUOFUNQU
      KHIDECFRUDUAUJUMAUHFMZCJHIABDEUGASUIUPCUGAUHFUBTUHBSUPULCUHBAFUCTUEUF $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d z C $.  $d z D $.  $d x y z F $.
    $d x y z G $.
    $( Equality of two operations is determined by their values.  (Contributed
       by NM, 1-Sep-2005.) $)
    eqfnov $p |- ( ( F Fn ( A X. B ) /\ G Fn ( C X. D ) ) -> ( F = G <->
( ( A X. B ) = ( C X. D ) /\ A. x e. A A. y e. B ( x F y ) = ( x G y ) ) ) ) $=
      ( vz cxp wfn wa wceq cv cfv wral co eqfnfv2 fveq2 df-ov cop eqeq12d ralxp
      eqeq12i syl6bbr anbi2i syl6bb ) GCDJZKHEFJZKLGHMUHUIMZINZGOZUKHOZMZIUHPZL
      UJANZBNZGQZUPUQHQZMZBDPACPZLIUHUIGHRUOVAUJUNUTIABCDUKUPUQUAZMZUNVBGOZVBHO
      ZMUTVCULVDUMVEUKVBGSUKVBHSUBURVDUSVEUPUQGTUPUQHTUDUEUCUFUG $.
  $}

  ${
    $d A x y $.  $d B x y $.  $d F x y $.  $d G x y $.
    $( Two operators with the same domain are equal iff their values at each
       point in the domain are equal.  (Contributed by Jeff Madsen,
       7-Jun-2010.) $)
    eqfnov2 $p |- ( ( F Fn ( A X. B ) /\ G Fn ( A X. B ) ) ->
                  ( F = G <-> A. x e. A A. y e. B ( x F y ) = ( x G y ) ) ) $=
      ( cxp wfn wa wceq cv co wral eqfnov simpr eqidd ancri impbii syl6bb ) ECD
      GZHFTHIEFJTTJZAKZBKZELUBUCFLJBDMACMZIZUDABCDCDEFNUEUDUAUDOUDUAUDTPQRS $.
  $}

  ${
    $d x y z w A $.  $d x y z w B $.  $d x y z w F $.
    $( Representation of a function in terms of its values.  (Contributed by
       NM, 7-Feb-2004.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    fnov $p |- ( F Fn ( A X. B ) <->
                    F = ( x e. A , y e. B |-> ( x F y ) ) ) $=
      ( vz cxp wfn cv cfv cmpt wceq cmpt2 dffn5 cop fveq2 df-ov syl6eqr mpt2mpt
      co eqeq2i bitri ) ECDGZHEFUCFIZEJZKZLEABCDAIZBIZETZMZLFUCENUFUJEABFCDUEUI
      UDUGUHOZLUEUKEJUIUDUKEPUGUHEQRSUAUB $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d z C $.  $d z D $.
    $( Bidirectional equality theorem for a mapping abstraction.  Equivalent to
       ~ eqfnov2 .  (Contributed by Mario Carneiro, 4-Jan-2017.) $)
    mpt22eqb $p |- ( A. x e. A A. y e. B C e. V ->
      ( ( x e. A , y e. B |-> C ) = ( x e. A , y e. B |-> D ) <->
        A. x e. A A. y e. B C = D ) ) $=
      ( vz wcel wral wceq cv wb wal cmpt2 ralimi ralbi syl wa coprab df-mpt2 wi
      pm13.183 eqeq12i eqoprab2b pm5.32 19.21v bitr3i 2albii r2al bitr4i 3bitri
      albii syl6rbbr ) EGIZBDJZACJZEFKZBDJZACJZHLZEKZVAFKZMZHNZBDJZACJZABCDEOZA
      BCDFOZKZUQUSVFMZACJUTVGMUPVKACUPURVEMZBDJVKUOVLBDHEFGUCPURVEBDQRPUSVFACQR
      VJALCIBLDISZVBSZABHTZVMVCSZABHTZKVNVPMZHNZBNANZVGVHVOVIVQABHCDEUAABHCDFUA
      UDVNVPABHUEVTVMVEUBZBNANVGVSWAABVSVMVDUBZHNWAWBVRHVMVBVCUFUMVMVDHUGUHUIVE
      ABCDUJUKULUN $.
  $}

  ${
    $d w x $.  $d w y z A $.  $d w z B $.  $d w z C $.  $d w z F $.  $d z ps $.
    $d x y z D $.  $d x y ph $.
    rngop.1 $e |- F = ( x e. A , y e. B |-> C ) $.
    $( The range of an operation given by the ""maps to"" notation.  (Contributed
       by FL, 20-Jun-2011.) $)
    rnmpt2 $p |- ran F = { z | E. x e. A E. y e. B z = C } $=
      ( crn cv wcel wa wceq coprab wrex cab cmpt2 df-mpt2 eqtri rneqi rnoprab2
      ) GIAJDKBJEKLCJFMZLABCNZIUBBEOADOCPGUCGABDEFQUCHABCDEFRSTUBABCDEUAS $.

    $( The domain of an operation defined by maps-to notation is a relation.
       (Contributed by Stefan O'Rear, 27-Nov-2014.) $)
    reldmmpt2 $p |- Rel dom F $=
      ( vz cdm wrel cv wcel wa wceq coprab reldmoprab cmpt2 df-mpt2 eqtri dmeqi
      releqi mpbir ) FIZJAKCLBKDLMHKENMZABHOZIZJUDABHPUCUFFUEFABCDEQUEGABHCDERS
      TUAUB $.

    $( Membership in the range of an operation class abstraction.  (Contributed
       by NM, 27-Aug-2007.)  (Revised by Mario Carneiro, 31-Aug-2015.) $)
    elrnmpt2g $p |- ( D e. V ->
                     ( D e. ran F <-> E. x e. A E. y e. B D = C ) ) $=
      ( vz cv wceq wrex crn eqeq1 2rexbidv rnmpt2 elab2g ) JKZELZBDMACMFELZBDMA
      CMJFGNHSFLTUAABCDSFEOPABJCDEGIQR $.

    ${
      elrnmpt2.1 $e |- C e. _V $.
      $( Membership in the range of an operation class abstraction.
         (Contributed by NM, 1-Aug-2004.)  (Revised by Mario Carneiro,
         31-Aug-2015.) $)
      elrnmpt2 $p |- ( D e. ran F <-> E. x e. A E. y e. B D = C ) $=
        ( vz crn wcel cv wceq wrex cab rnmpt2 eleq2i cvv rexlimivw eleq1 mpbiri
        eqeq1 2rexbidv elab3 bitri ) FGKZLFJMZENZBDOACOZJPZLFENZBDOZACOZUGUKFAB
        JCDEGHQRUJUNJFUMFSLZACULUOBDULUOESLIFESUAUBTTUHFNUIULABCDUHFEUCUDUEUF
        $.
    $}

    ${
      $d w x y z $.  $d A p w y z $.  $d B p w z $.  $d C p w z $.  $d F w z $.
      $d D x y z $.  $d R p x y z $.  $d ph x y $.  $d ps z $.
      $( Membership in the range of a restricted operation class abstraction.
         (Contributed by Thierry Arnoux, 25-May-2019.) $)
      elrnmpt2res $p |- ( D e. V -> ( D e. ran ( F |` R )
        <-> E. x e. A E. y e. B ( D = C /\ x R y ) ) ) $=
        ( vz vp wcel cres cv wa wceq wex anbi2d copab crn wbr wrex eqeq1 anbi1d
        2exbidv coprab cab cop ancom eleq1 df-br syl6bbr syl5bbr syl5bb pm5.32i
        an12 bitri 2exbii 19.42vv bitr3i opabbii dfoprab2 cmpt2 df-mpt2 reseq1i
        3eqtri resopab eqtri 3eqtr4ri rneqi rnoprab elab2g r2ex ) FIMFHGNZUAZMA
        OZCMBOZDMPZFEQZVQVRGUBZPZPZBRARZWBBDUCACUCVSKOZEQZWAPZPZBRARZWDKFVPIWEF
        QZWHWCABWJWGWBVSWJWFVTWAWEFEUDUESUFVPWHABKUGZUAWIKUHVOWKLOZVQVRUIZQZWHP
        ZBRARZLKTWLGMZWNVSWFPZPZBRARZPZLKTZWKVOWPXALKWPWQWSPZBRARXAXCWOABXCWNWQ
        WRPZPWOWQWNWRUQWNXDWHXDVSWQWFPZPWNWHWQVSWFUQWNXEWGVSXEWFWQPWNWGWFWQUJWN
        WQWAWFWNWQWMGMWAWLWMGUKVQVRGULUMSUNSUOUPURUSWQWSABUTVAVBWHABKLVCVOWTLKT
        ZGNXBHXFGHABCDEVDWRABKUGXFJABKCDEVEWRABKLVCVGVFWTLKGVHVIVJVKWHABKVLVIVM
        WBABCDVNUM $.
    $}

    ralrnmpt2.2 $e |- ( z = C -> ( ph <-> ps ) ) $.
    $( A restricted quantifier over an image set.  (Contributed by Mario
       Carneiro, 1-Sep-2015.) $)
    ralrnmpt2 $p |- ( A. x e. A A. y e. B C e. V ->
      ( A. z e. ran F ph <-> A. x e. A A. y e. B ps ) ) $=
      ( vw wral cv wceq wrex wi wal wb crn wcel cab rnmpt2 eqeq1 2rexbidv ralab
      raleqi ralcom4 r19.23v albii bitr2i 3bitri bitri nfv ceqsalg ralimi ralbi
      syl syl5bbr syl5bb ) AEIUAZNZEOZHPZDGQZARZESZCFNZHJUBZDGNZCFNZBDGNZCFNZVC
      AEMOZHPZDGQCFQZMUCZNVFCFQZARZESZVIAEVBVRCDMFGHIKUDUHVQVSAEMVOVDPVPVECDFGV
      OVDHUEUFUGVIVGCFNZESWAVGCEFUIWBVTEVFACFUJUKULUMVLVHVMTZCFNVIVNTVKWCCFVHVE
      ARZESZDGNZVKVMWFWDDGNZESVHWDDEGUIWGVGEVEADGUJUKUNVKWEBTZDGNWFVMTVJWHDGABE
      HJBEUOLUPUQWEBDGURUSUTUQVHVMCFURUSVA $.

    $( A restricted quantifier over an image set.  (Contributed by Mario
       Carneiro, 1-Sep-2015.) $)
    rexrnmpt2 $p |- ( A. x e. A A. y e. B C e. V ->
      ( E. z e. ran F ph <-> E. x e. A E. y e. B ps ) ) $=
      ( wcel wral wn crn wrex cv notbid dfrex2 wceq rexbii rexnal bitri 3bitr4g
      ralrnmpt2 ) HJMDGNCFNZAOZEIPZNZOBOZDGNZCFNZOZAEUIQBDGQZCFQZUGUJUMUHUKCDEF
      GHIJKERHUAABLSUFSAEUITUPULOZCFQUNUOUQCFBDGTUBULCFUCUDUE $.
  $}

  ${
    $d x y z $.  $d z R $.  $d z S $.
    ovid.1 $e |- ( ( x e. R /\ y e. S ) -> E! z ph ) $.
    ovid.2 $e |- F =
                  { <. <. x , y >. , z >. | ( ( x e. R /\ y e. S ) /\ ph ) } $.
    $( The value of an operation class abstraction.  (Contributed by NM,
       16-May-1995.)  (Revised by David Abernethy, 19-Jun-2012.) $)
    ovid $p |- ( ( x e. R /\ y e. S ) -> ( ( x F y ) = z <-> ph ) ) $=
      ( cv co wceq cop cfv wcel wa df-ov eqeq1i copab wfn coprab fnoprab fneq1i
      wb mpbir opabid biimpri fnopfvb sylancr eleq2i oprabid bitri bitrd syl5bb
      baib ) BJZCJZGKZDJZLUPUQMZGNZUSLZUPEOUQFOPZAURVAUSUPUQGQRVCVBUTUSMZGOZAVC
      GVCBCSZTZUTVFOZVBVEUDVGVCAPZBCDUAZVFTVCABCDHUBVFGVJIUCUEVHVCVCBCUFUGVFUTU
      SGUHUIVEVCAVEVDVJOVIGVJVDIUJVIBCDUKULUOUMUN $.
  $}

  ${
    $d x y z $.
    ovidig.1 $e |- E* z ph $.
    ovidig.2 $e |- F = { <. <. x , y >. , z >. | ph } $.
    $( The value of an operation class abstraction.  Compare ~ ovidi .  The
       condition ` ( x e. R /\ y e. S ) ` is been removed.  (Contributed by
       Mario Carneiro, 29-Dec-2014.) $)
    ovidig $p |- ( ph -> ( x F y ) = z ) $=
      ( cv co cop cfv df-ov wfun wcel wceq coprab funoprab funeqi mpbir oprabid
      biimpri syl6eleqr funopfv mpsyl syl5eq ) ABHZCHZEIUFUGJZEKZDHZUFUGELEMZAU
      HUJJZENUIUJOUKABCDPZMABCDFQEUMGRSAULUMEULUMNAABCDTUAGUBUHUJEUCUDUE $.
  $}

  ${
    $d x y z $.  $d z R $.  $d z S $.
    ovidi.2 $e |- ( ( x e. R /\ y e. S ) -> E* z ph ) $.
    ovidi.3 $e |- F =
                  { <. <. x , y >. , z >. | ( ( x e. R /\ y e. S ) /\ ph ) } $.
    $( The value of an operation class abstraction (weak version).
       (Contributed by Mario Carneiro, 29-Dec-2014.) $)
    ovidi $p |- ( ( x e. R /\ y e. S ) -> ( ph -> ( x F y ) = z ) ) $=
      ( cv wcel wa co wceq wmo wi moanimv mpbir ovidig ex ) BJZEKCJZFKLZAUAUBGM
      DJNUCALZBCDGUDDOUCADOPHUCADQRIST $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z R $.  $d x y z S $.
    $d x y z th $.
    ov.1 $e |- C e. _V $.
    ov.2 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ov.3 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ov.4 $e |- ( z = C -> ( ch <-> th ) ) $.
    ov.5 $e |- ( ( x e. R /\ y e. S ) -> E! z ph ) $.
    ov.6 $e |- F =
                  { <. <. x , y >. , z >. | ( ( x e. R /\ y e. S ) /\ ph ) } $.
    $( The value of an operation class abstraction.  (Contributed by NM,
       16-May-1995.)  (Revised by David Abernethy, 19-Jun-2012.) $)
    ov $p |- ( ( A e. R /\ B e. S ) -> ( ( A F B ) = C <-> th ) ) $=
      ( wcel wa co wceq cop cv coprab cfv df-ov fveq1i eqtri eqeq1i wfn fnoprab
      copab eleq1 anbi1d anbi2d opelopabg ibir fnopfvb sylancr anbi12d eloprabg
      wb cvv mp3an3 bitrd syl5bb bianabs ) HKTZILTZUAZHIMUBZJUCZDVNHIUDZEUEZKTZ
      FUEZLTZUAZAUAZEFGUFZUGZJUCZVLVLDUAZVMWCJVMVOMUGWCHIMUHVOMWBSUIUJUKVLWDVOJ
      UDWBTZWEVLWBVTEFUNZULVOWGTZWDWFVDVTAEFGRUMVLWHVTVJVSUAZVLEFHIKLVPHUCZVQVJ
      VSVPHKUOUPZVRIUCZVSVKVJVRILUOUQZURUSWGVOJWBUTVAVJVKJVETWFWEVDNWAWIBUAVLCU
      AWEEFGHIJKLVEWJVTWIABWKOVBWLWIVLBCWMPVBGUEJUCCDVLQUQVCVFVGVHVI $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z ps $.
    ovigg.1 $e |- ( ( x = A /\ y = B /\ z = C ) -> ( ph <-> ps ) ) $.
    ovigg.4 $e |- E* z ph $.
    ovigg.5 $e |- F = { <. <. x , y >. , z >. | ph } $.
    $( The value of an operation class abstraction.  Compare ~ ovig .  The
       condition ` ( x e. R /\ y e. S ) ` is been removed.  (Contributed by FL,
       24-Mar-2007.)  (Revised by Mario Carneiro, 19-Dec-2013.) $)
    ovigg $p |- ( ( A e. V /\ B e. W /\ C e. X ) ->
                         ( ps -> ( A F B ) = C ) ) $=
      ( wcel w3a cop wceq cfv coprab eloprabga df-ov fveq1i eqtri wfun funoprab
      co wi funopfv ax-mp syl5eq syl6bir ) FJPGKPHLPQBFGRZHRACDEUAZPZFGIUHZHSAB
      CDEFGHJKLMUBUPUQUNUOTZHUQUNITURFGIUCUNIUOOUDUEUOUFUPURHSUIACDENUGUNHUOUJU
      KULUM $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z R $.  $d x y z S $.
    $d x y z ps $.
    ovig.1 $e |- ( ( x = A /\ y = B /\ z = C ) -> ( ph <-> ps ) ) $.
    ovig.2 $e |- ( ( x e. R /\ y e. S ) -> E* z ph ) $.
    ovig.3 $e |- F =
                  { <. <. x , y >. , z >. | ( ( x e. R /\ y e. S ) /\ ph ) } $.
    $( The value of an operation class abstraction (weak version).
       (Unnecessary distinct variable restrictions were removed by David
       Abernethy, 19-Jun-2012.)  (Contributed by NM, 14-Sep-1999.)  (Revised by
       Mario Carneiro, 19-Dec-2013.) $)
    ovig $p |- ( ( A e. R /\ B e. S /\ C e. D ) ->
                         ( ps -> ( A F B ) = C ) ) $=
      ( wcel w3a wa wceq cv co 3simpa wb eleq1 bi2anan9 3adant3 anbi12d moanimv
      wmo wi mpbir ovigg mpand ) FJPZGKPZHIPZQUNUORZBFGLUAHSUNUOUPUBCTZJPZDTZKP
      ZRZARZUQBRCDEFGHLJKIURFSZUTGSZETHSZQVBUQABVDVEVBUQUCVFVDUSUNVEVAUOURFJUDU
      TGKUDUEUFMUGVCEUIVBAEUIUJNVBAEUHUKOULUM $.
  $}

  ${
    $d x y z $.  $d z A $.  $d z B $.  $d z C $.  $d z F $.
    ovmpt4g.3 $e |- F = ( x e. A , y e. B |-> C ) $.
    $( Value of a function given by the ""maps to"" notation.  (This is the
       operation analog of ~ fvmpt2 .)  (Contributed by NM, 21-Feb-2004.)
       (Revised by Mario Carneiro, 1-Sep-2015.) $)
    ovmpt4g $p |- ( ( x e. A /\ y e. B /\ C e. V ) -> ( x F y ) = C ) $=
      ( vz cv wcel co wceq wex wa elisset wmo moeq a1i cmpt2 coprab eqtri ovidi
      df-mpt2 eqeq2 mpbidi exlimdv syl5 3impia ) AJZCKZBJZDKZEGKZUJULFLZEMZUNIJ
      ZEMZINUKUMOZUPIEGPUSURUPIURUOUQMUPUSURABICDFURIQUSIERSFABCDETUSUROABIUAHA
      BICDEUDUBUCUQEUOUEUFUGUHUI $.
  $}

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z D $.  $d z F $.
    $d z R $.
    ovmpt2s.3 $e |- F = ( x e. C , y e. D |-> R ) $.
    $( Value of a function given by the ""maps to"" notation, expressed using
       explicit substitution.  (Contributed by Mario Carneiro, 30-Apr-2015.) $)
    ovmpt2s $p |- ( ( A e. C /\ B e. D /\ [_ A / x ]_ [_ B / y ]_ R e. V ) ->
      ( A F B ) = [_ A / x ]_ [_ B / y ]_ R ) $=
      ( wcel csb co wceq cvv cv wi nfcv nfcsb1v nfel1 elex cmpt2 nfmpt21 nfcxfr
      nfov nfeq nfim nfmpt22 csbeq1a eleq1d oveq1 eqeq12d imbi12d oveq2 ovmpt4g
      wa 3expia vtocl2gaf csbcom eleq1i eqeq2i 3imtr4g syl5 3impia ) CEKZDFKZAC
      BDGLLZIKZCDHMZVGNZVHVGOKZVEVFUPZVJVGIUAVLBDACGLZLZOKZVIVNNZVKVJGOKZAPZBPZ
      HMZGNZQVMOKZCVSHMZVMNZQVOVPQABCDEFACRZBCRZBDRZWBWDAAVMOACGSZTAWCVMACVSHWE
      AHABEFGUBZJABEFGUCUDAVSRUEWHUFUGVOVPBBVNOBDVMSZTBVIVNBCDHWFBHWIJABEFGUHUD
      WGUEWJUFUGVRCNZVQWBWAWDWKGVMOACGUIZUJWKVTWCGVMVRCVSHUKWLULUMVSDNZWBVOWDVP
      WMVMVNOBDVMUIZUJWMWCVIVMVNVSDCHUNWNULUMVREKVSFKVQWAABEFGHOJUOUQURVGVNOABC
      DGUSZUTVGVNVIWOVAVBVCVD $.
  $}

  ${
    $d t u v w A $.  $d t u v w B $.  $d t u v w x y z C $.  $d t u v w z R $.
    $d t u v w x y z D $.  $d w F $.  $d w G $.  $d t u v w S $.
    ov2gf.a $e |- F/_ x A $.
    ov2gf.c $e |- F/_ y A $.
    ov2gf.d $e |- F/_ y B $.
    ov2gf.1 $e |- F/_ x G $.
    ov2gf.2 $e |- F/_ y S $.
    ov2gf.3 $e |- ( x = A -> R = G ) $.
    ov2gf.4 $e |- ( y = B -> G = S ) $.
    ov2gf.5 $e |- F = ( x e. C , y e. D |-> R ) $.
    $( The value of an operation class abstraction.  A version of ~ ovmpt2g
       using bound-variable hypotheses.  (Contributed by NM, 17-Aug-2006.)
       (Revised by Mario Carneiro, 19-Dec-2013.) $)
    ov2gf $p |- ( ( A e. C /\ B e. D /\ S e. H ) -> ( A F B ) = S ) $=
      ( wcel co wceq cvv wa elex cv wi nfel1 nfmpt21 nfcxfr nfcv nfov nfeq nfim
      cmpt2 nfmpt22 eleq1d oveq1 eqeq12d imbi12d oveq2 ovmpt4g 3expia vtocl2gaf
      syl5 3impia ) CETZDFTZHKTZCDIUAZHUBZVIHUCTZVGVHUDVKHKUEGUCTZAUFZBUFZIUAZG
      UBZUGJUCTZCVOIUAZJUBZUGVLVKUGABCDEFLMNVRVTAAJUCOUHAVSJACVOILAIABEFGUOZSAB
      EFGUIUJAVOUKULOUMUNVLVKBBHUCPUHBVJHBCDIMBIWASABEFGUPUJNULPUMUNVNCUBZVMVRV
      QVTWBGJUCQUQWBVPVSGJVNCVOIURQUSUTVODUBZVRVLVTVKWCJHUCRUQWCVSVJJHVODCIVARU
      SUTVNETVOFTVMVQABEFGIUCSVBVCVDVEVF $.
  $}

  ${
    $d x y z $.  $d x z A $.  $d y z B $.  $d z C $.  $d z D $.  $d z R $.
    $d z S $.
    ovmpt2dx.1 $e |- ( ph -> F = ( x e. C , y e. D |-> R ) ) $.
    ovmpt2dx.2 $e |- ( ( ph /\ ( x = A /\ y = B ) ) -> R = S ) $.
    ovmpt2dx.3 $e |- ( ( ph /\ x = A ) -> D = L ) $.
    ovmpt2dx.4 $e |- ( ph -> A e. C ) $.
    ovmpt2dx.5 $e |- ( ph -> B e. L ) $.
    ovmpt2dx.6 $e |- ( ph -> S e. X ) $.
    ${
      ovmpt2dxf.px $e |- F/ x ph $.
      ovmpt2dxf.py $e |- F/ y ph $.
      ovmpt2dxf.ay $e |- F/_ y A $.
      ovmpt2dxf.bx $e |- F/_ x B $.
      ovmpt2dxf.sx $e |- F/_ x S $.
      ovmpt2dxf.sy $e |- F/_ y S $.
      $( Value of an operation given by a maps-to rule, deduction form.
         (Contributed by Mario Carneiro, 29-Dec-2014.) $)
      ovmpt2dxf $p |- ( ph -> ( A F B ) = S ) $=
        ( co cmpt2 oveqd cv wcel cvv w3a wceq wi wsbc ovmpt4g a1i alrimi spsbcd
        eqid wa adantr simplr ad2antrr eqeltrd simpr 3eltr4d anassrs elex biimt
        wb syl syl3anc oveq12d eqeq12d bitr3d nfeq2 nfan nfmpt22 nfcv nfov nfeq
        wnf sbciedf nfmpt21 mpbid eqtrd ) ADEJUEDEBCFGHUFZUEZIAJWGDEMUGABUHZFUI
        ZCUHZGUIZHUJUIZUKZWIWKWGUEZHULZUMZCEUNZBDUNWHIULZAWRBDFPAWRBSAWQCEKQAWQ
        CTWQABCFGHWGUJWGUSUOUPUQURUQURAWRWSBDFPAWIDULZUTZWQWSCEKAEKUIZWTQVAXAWK
        EULZUTZWPWQWSXDWJWLWMWPWQVJXDWIDFAWTXCVBZADFUIWTXCPVCVDXDEKWKGAXBWTXCQV
        CXAXCVEZXAGKULXCOVAVFXDHIUJAWTXCHIULNVGZAIUJUIZWTXCAILUIXHRILVHVKVCVDWN
        WPVIVLXDWOWHHIXDWIDWKEWGXEXFVMXGVNVOAWTCTCWIDUAVPVQWSCWBXACWHICDEWGUABC
        FGHVRCEVSVTUDWAUPWCSWSBWBABWHIBDEWGBDVSBCFGHWDUBVTUCWAUPWCWEWF $.
    $}

    $d y A $.  $d x B $.  $d x y S $.  $d x y ph $.
    $( Value of an operation given by a maps-to rule, deduction form.
       (Contributed by Mario Carneiro, 29-Dec-2014.) $)
    ovmpt2dx $p |- ( ph -> ( A F B ) = S ) $=
      ( nfv nfcv ovmpt2dxf ) ABCDEFGHIJKLMNOPQRABSACSCDTBETBITCITUA $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y S $.  $d x y ph $.
    ovmpt2d.1 $e |- ( ph -> F = ( x e. C , y e. D |-> R ) ) $.
    ovmpt2d.2 $e |- ( ( ph /\ ( x = A /\ y = B ) ) -> R = S ) $.
    ovmpt2d.3 $e |- ( ph -> A e. C ) $.
    ovmpt2d.4 $e |- ( ph -> B e. D ) $.
    ovmpt2d.5 $e |- ( ph -> S e. X ) $.
    $( Value of an operation given by a maps-to rule, deduction form.
       (Contributed by Mario Carneiro, 7-Dec-2014.) $)
    ovmpt2d $p |- ( ph -> ( A F B ) = S ) $=
      ( cv wceq wa eqidd ovmpt2dx ) ABCDEFGHIJGKLMABQDRSGTNOPUA $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y L $.  $d x y S $.
    ovmpt2x.1 $e |- ( ( x = A /\ y = B ) -> R = S ) $.
    ovmpt2x.2 $e |- ( x = A -> D = L ) $.
    ovmpt2x.3 $e |- F = ( x e. C , y e. D |-> R ) $.
    $( The value of an operation class abstraction.  Variant of ~ ovmpt2ga
       which does not require ` D ` and ` x ` to be distinct.  (Contributed by
       Jeff Madsen, 10-Jun-2010.)  (Revised by Mario Carneiro, 20-Dec-2013.) $)
    ovmpt2x $p |- ( ( A e. C /\ B e. L /\ S e. H ) -> ( A F B ) = S ) $=
      ( wcel cvv co wceq cv adantl elex w3a cmpt2 wa simp1 simp2 simp3 ovmpt2dx
      a1i syl3an3 ) HJOCEOZDKOZHPOZCDIQHRHJUAUKULUMUBZABCDEFGHIKPIABEFGUCRUNNUI
      ASCRZBSDRUDGHRUNLTUOFKRUNMTUKULUMUEUKULUMUFUKULUMUGUHUJ $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y S $.
    ovmpt2ga.1 $e |- ( ( x = A /\ y = B ) -> R = S ) $.
    ovmpt2ga.2 $e |- F = ( x e. C , y e. D |-> R ) $.
    $( Value of an operation given by a maps-to rule.  (Contributed by Mario
       Carneiro, 19-Dec-2013.) $)
    ovmpt2ga $p |- ( ( A e. C /\ B e. D /\ S e. H ) -> ( A F B ) = S ) $=
      ( wcel cvv co wceq elex w3a cmpt2 cv a1i adantl simp1 simp2 simp3 ovmpt2d
      wa syl3an3 ) HJMCEMZDFMZHNMZCDIOHPHJQUIUJUKRZABCDEFGHINIABEFGSPULLUAATCPB
      TDPUGGHPULKUBUIUJUKUCUIUJUKUDUIUJUKUEUFUH $.

    ovmpt2a.4 $e |- S e. _V $.
    $( Value of an operation given by a maps-to rule.  (Contributed by NM,
       19-Dec-2013.) $)
    ovmpt2a $p |- ( ( A e. C /\ B e. D ) -> ( A F B ) = S ) $=
      ( wcel cvv co wceq ovmpt2ga mp3an3 ) CEMDFMHNMCDIOHPLABCDEFGHINJKQR $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y ph $.
    ovmpt2df.1 $e |- ( ph -> A e. C ) $.
    ovmpt2df.2 $e |- ( ( ph /\ x = A ) -> B e. D ) $.
    ovmpt2df.3 $e |- ( ( ph /\ ( x = A /\ y = B ) ) -> R e. V ) $.
    ovmpt2df.4 $e |- ( ( ph /\ ( x = A /\ y = B ) ) ->
      ( ( A F B ) = R -> ps ) ) $.
    ${
      ovmpt2df.5 $e |- F/_ x F $.
      ovmpt2df.6 $e |- F/ x ps $.
      ovmpt2df.7 $e |- F/_ y F $.
      ovmpt2df.8 $e |- F/ y ps $.
      $( Alternate deduction version of ~ ovmpt2 , suitable for iteration.
         (Contributed by Mario Carneiro, 7-Jan-2017.) $)
      ovmpt2df $p |- ( ph -> ( F = ( x e. C , y e. D |-> R ) -> ps ) ) $=
        ( wcel cv wceq cmpt2 nfv nfmpt21 nfeq nfim cvv wex elex syl isset sylib
        wi wa nfmpt22 co oveq simprl simprr oveq12d adantr eqeltrd adantrr eqid
        ovmpt4g syl3anc eqtr3d eqeq2d sylbid syl5 expr exlimd mpd exlimdd ) ACU
        AZEUBZJCDGHIUCZUBZBUNZCACUDVSBCCJVRPCDGHIUEUFQUGAEUHTZVQCUIAEGTZWALEGUJ
        UKCEULUMAVQUOZDUAZFUBZDUIZVTWCFUHTZWFWCFHTZWGMFHUJUKDFULUMWCWEVTDWCDUDV
        SBDDJVRRCDGHIUPUFSUGAVQWEVTVSEFJUQZEFVRUQZUBZAVQWEUOZUOZBEFJVRURWMWKWII
        UBBWMWJIWIWMVPWDVRUQZWJIWMVPEWDFVRAVQWEUSZAVQWEUTZVAWMVPGTWDHTIKTWNIUBW
        MVPEGWOAWBWLLVBVCWMWDFHWPAVQWHWEMVDVCNCDGHIVRKVRVEVFVGVHVIOVJVKVLVMVNVO
        $.
    $}

    $d x y F $.  $d x y ps $.
    $( Alternate deduction version of ~ ovmpt2 , suitable for iteration.
       (Contributed by Mario Carneiro, 7-Jan-2017.) $)
    ovmpt2dv $p |- ( ph -> ( F = ( x e. C , y e. D |-> R ) -> ps ) ) $=
      ( nfcv nfv ovmpt2df ) ABCDEFGHIJKLMNOCJPBCQDJPBDQR $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y ph $.  $d x y S $.
    ovmpt2dv2.1 $e |- ( ph -> A e. C ) $.
    ovmpt2dv2.2 $e |- ( ( ph /\ x = A ) -> B e. D ) $.
    ovmpt2dv2.3 $e |- ( ( ph /\ ( x = A /\ y = B ) ) -> R e. V ) $.
    ovmpt2dv2.4 $e |- ( ( ph /\ ( x = A /\ y = B ) ) -> R = S ) $.
    $( Alternate deduction version of ~ ovmpt2 , suitable for iteration.
       (Contributed by Mario Carneiro, 7-Jan-2017.) $)
    ovmpt2dv2 $p |- ( ph ->
      ( F = ( x e. C , y e. D |-> R ) -> ( A F B ) = S ) ) $=
      ( co wceq cv wa nfcv cmpt2 eqidd eqeq2d biimpd nfmpt21 nfov nfeq1 nfmpt22
      ovmpt2df mpd oveq eqeq1d syl5ibrcom ) ADEJPZIQJBCFGHUAZQZDEUOPZIQZAUOUOQU
      RAUOUBAURBCDEFGHUOKLMNABRDQCREQSSZUQHQURUSHIUQOUCUDBCFGHUEZBUQIBDEUOBDTUT
      BETUFUGBCFGHUHZCUQICDEUOCDTVACETUFUGUIUJUPUNUQIDEJUOUKULUM $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y S $.
    ovmpt2g.1 $e |- ( x = A -> R = G ) $.
    ovmpt2g.2 $e |- ( y = B -> G = S ) $.
    ovmpt2g.3 $e |- F = ( x e. C , y e. D |-> R ) $.
    $( Value of an operation given by a maps-to rule.  Special case.
       (Contributed by NM, 14-Sep-1999.)  (Revised by David Abernethy,
       19-Jun-2012.) $)
    ovmpt2g $p |- ( ( A e. C /\ B e. D /\ S e. H ) -> ( A F B ) = S ) $=
      ( cv wceq sylan9eq ovmpt2ga ) ABCDEFGHIKAOCPBODPGJHLMQNR $.

    ovmpt2.4 $e |- S e. _V $.
    $( Value of an operation given by a maps-to rule.  Special case.
       (Contributed by NM, 16-May-1995.)  (Revised by David Abernethy,
       19-Jun-2012.) $)
    ovmpt2 $p |- ( ( A e. C /\ B e. D ) -> ( A F B ) = S ) $=
      ( wcel cvv co wceq ovmpt2g mp3an3 ) CEODFOHPOCDIQHRNABCDEFGHIJPKLMST $.
  $}

  ${
    $d f t u v w x y z A $.  $d f t u v w x y z B $.  $d t F $.  $d x y z R $.
    $d f t u v w y z C $.  $d f t u v w y z D $.  $d f t u v w x y z H $.
    $d f t u v w z S $.
    ov3.1 $e |- S e. _V $.
    ov3.2 $e |- ( ( ( w = A /\ v = B ) /\ ( u = C /\ f = D ) ) ->
         R = S ) $.
    ov3.3 $e |- F = { <. <. x , y >. , z >. | ( ( x e. ( H X. H ) /\
                      y e. ( H X. H ) ) /\
                      E. w E. v E. u E. f ( ( x = <. w , v >. /\
                      y = <. u , f >. ) /\ z = R ) ) } $.
    $( The value of an operation class abstraction.  Special case.
       (Contributed by NM, 28-May-1995.)  (Revised by Mario Carneiro,
       29-Dec-2014.) $)
    ov3 $p |- ( ( ( A e. H /\ B e. H ) /\ ( C e. H /\ D e. H ) ) ->
        ( <. A , B >. F <. C , D >. ) = S ) $=
      ( wa wex wcel cv wceq cop isseti nfv nfcv cxp coprab nfoprab3 nfcxfr nfov
      co nfeq1 eqeq2d copsex4g wi opelxpi nfoprab1 nfim nfoprab2 anbi1d 4exbidv
      eqeq1 oveq1 eqeq1d imbi12d anbi2d oveq2 moeq mosubop anass 2exbii 19.42vv
      wmo bitri mobii mpbir a1i ovidi vtocl2gaf syl2an sylbird eqeq2 mpbidi mpi
      exlimd ) GOUAHOUASZIOUAJOUASZSZCUBZLUCZCTGHUDZIJUDZNUMZLUCZCLPUEWJWLWPCWJ
      CUFCWOLCWMWNNCWMUGCNAUBZOOUHZUABUBZWRUASZWQDUBZEUBZUDZUCZWSFUBZMUBZUDZUCZ
      SZWKKUCZSZMTFTZETDTZSZABCUIZRXNABCUJUKCWNUGULUNWLWOWKUCZWPWJWJWLWMXCUCZWN
      XGUCZSZXJSZMTFTETDTZXPXJWLDEFMGHIJOOXAGUCXBHUCSXEIUCXFJUCSSKLWKQUOUPWHWMW
      RUAWNWRUAYAXPUQZWIGHOOURIJOOURXMWQWSNUMZWKUCZUQXQXHSZXJSZMTFTETDTZWMWSNUM
      ZWKUCZUQYBABWMWNWRWRAWMUGZBWMUGZBWNUGZYGYIAYGAUFAYHWKAWMWSNYJANXORXNABCUS
      UKAWSUGULUNUTYAXPBYABUFBWOWKBWMWNNYKBNXORXNABCVAUKYLULUNUTWQWMUCZXMYGYDYI
      YMXKYFDEFMYMXIYEXJYMXDXQXHWQWMXCVDVBVBVCYMYCYHWKWQWMWSNVEVFVGWSWNUCZYGYAY
      IXPYNYFXTDEFMYNYEXSXJYNXHXRXQWSWNXGVDVHVBVCYNYHWOWKWSWNWMNVIVFVGXMABCWRWR
      NXMCVOZWTYOXDXHXJSZMTFTZSZETDTZCVOYQCDEWQXJCFMWSCKVJVKVKXMYSCXLYRDEXLXDYP
      SZMTFTYRXKYTFMXDXHXJVLVMXDYPFMVNVPVMVQVRVSRVTWAWBWCWKLWOWDWEWGWF $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w x y z C $.  $d w z R $.
    $d w x y z S $.
    ov6g.1 $e |- ( <. x , y >. = <. A , B >. -> R = S ) $.
    ov6g.2 $e |- F = { <. <. x , y >. , z >. | ( <. x , y >. e. C
                      /\ z = R ) } $.
    $( The value of an operation class abstraction.  Special case.
       (Contributed by NM, 13-Nov-2006.) $)
    ov6g $p |- ( ( ( A e. G /\ B e. H /\ <. A , B >. e. C ) /\ S e. J )
                     -> ( A F B ) = S ) $=
      ( vw wcel wa cv wceq wex cop w3a co cfv df-ov eqid biidd copsex2g 3adant3
      mpbiri adantr wi eqeq1 anbi1d eqeq2d eqcoms pm5.32i syl6bb 2exbidv anbi2d
      wb wmo moeq mosubop a1i coprab copab dfoprab2 eleq1 bitr3i 2exbii 19.42vv
      an12 bitri opabbii 3eqtri fvopab3ig 3ad2antl3 mpd syl5eq ) DJPZEKPZDEUAZF
      PZUBZHLPZQZDEIUCWCIUDZHDEIUEWGWCARZBRZUAZSZHHSZQZBTATZWHHSZWEWOWFWAWBWOWD
      WAWBQWOWMHUFWMWMABDEJKWIDSWJESQWMUGUHUJUIUKWDWAWFWOWPULWBORZWKSZCRZGSZQZB
      TATZWLWSHSZQZBTATWOOCWCHFLIWQWCSZXAXDABXEXAWLWTQXDXEWRWLWTWQWCWKUMUNWLWTX
      CWTXCVAWKWCWKWCSGHWSMUOUPUQURUSXCXDWNABXCXCWMWLWSHHUMUTUSXBCVBWQFPZWTCABW
      QCGVCVDVEIWKFPZWTQZABCVFWRXHQZBTATZOCVGXFXBQZOCVGNXHABCOVHXJXKOCXJXFXAQZB
      TATXKXIXLABXIWRXFWTQZQXLWRXMXHWRXFXGWTWQWKFVIUNUQWRXFWTVMVJVKXFXAABVLVNVO
      VPVQVRVSVT $.
  $}

  ${
    $d ph c $.  $d ps x $.  $d ch x y $.  $d th x y z $.  $d ta x y c $.
    $d R x y z c $.  $d S x y z c $.  $d A x y z c $.  $d B x y z c $.
    $d C x y z c $.
    ovg.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    ovg.2 $e |- ( y = B -> ( ps <-> ch ) ) $.
    ovg.3 $e |- ( z = C -> ( ch <-> th ) ) $.
    ovg.4 $e |- ( ( ta /\ ( x e. R /\ y e. S ) ) -> E! z ph ) $.
    ovg.5 $e |- F = { <. <. x , y >. , z >. |
                                            ( ( x e. R /\ y e. S ) /\ ph ) } $.
    $( The value of an operation class abstraction.  (Contributed by Jeff
       Madsen, 10-Jun-2010.) $)
    ovg $p |- ( ( ta /\ ( A e. R /\ B e. S /\ C e. D ) )
                                            -> ( ( A F B ) = C <-> th ) ) $=
      ( vc wcel w3a wa co wceq cop cv coprab df-ov fveq1i eqtri eqeq1i wb eqeq2
      cfv wi opeq2 eleq1d bibi12d imbi2d copab wfn weu wal ex alrimivv fnoprabg
      syl eleq1 anbi1d anbi2d opelopabg fnopfvb syl2an vtoclg com12 exp32 3imp2
      ibir anbi12d eloprabg adantl bitrd syl5bb biidd bianabs 3adant3 ) EIMUBZJ
      NUBZKLUBZUCZUDZIJOUEZKUFZWIWJUDZDUDZDWOIJUGZFUHZMUBZGUHZNUBZUDZAUDZFGHUIZ
      UPZKUFZWMWQWNXFKWNWROUPXFIJOUJWROXETUKULUMWMXGWRKUGZXEUBZWQEWIWJWKXGXIUNZ
      EWIWJWKXJUQWKEWPUDZXJXKXFUAUHZUFZWRXLUGZXEUBZUNZUQXKXJUQUAKLXLKUFZXPXJXKX
      QXMXGXOXIXLKXFUOXQXNXHXEXLKWRURUSUTVAEXEXCFGVBZVCZWRXRUBZXPWPEXCAHVDZUQZG
      VEFVEXSEYBFGEXCYASVFVGXCAFGHVHVIWPXTXCWIXBUDZWPFGIJMNWSIUFZWTWIXBWSIMVJVK
      ZXAJUFZXBWJWIXAJNVJVLZVMVTXRWRXLXEVNVOVPVQVRVSWLXIWQUNEXDYCBUDWPCUDWQFGHI
      JKMNLYDXCYCABYEPWAYFYCWPBCYGQWAHUHKUFCDWPRVLWBWCWDWEWLWQDUNZEWIWJYHWKWPWQ
      DWPWQWFWGWHWCWD $.
  $}

  $( The value of a restricted operation.  (Contributed by FL, 10-Nov-2006.) $)
  ovres $p |- ( ( A e. C /\ B e. D ) -> ( A ( F |` ( C X. D ) ) B )
    = ( A F B ) ) $=
    ( wcel wa cop cxp cres cfv co wceq opelxpi fvres syl df-ov 3eqtr4g ) ACFBDF
    GZABHZECDIZJZKZTEKZABUBLABELSTUAFUCUDMABCDNTUAEOPABUBQABEQR $.

  ${
    ovresd.1 $e |- ( ph -> A e. X ) $.
    ovresd.2 $e |- ( ph -> B e. X ) $.
    $( Lemma for converting metric theorems to metric space theorems.
       (Contributed by Mario Carneiro, 2-Oct-2015.) $)
    ovresd $p |- ( ph -> ( A ( D |` ( X X. X ) ) B ) = ( A D B ) ) $=
      ( wcel cxp cres co wceq ovres syl2anc ) ABEHCEHBCDEEIJKBCDKLFGBCEEDMN $.
  $}

  $( The value of a member of the domain of a subclass of an operation.
     (Contributed by NM, 23-Aug-2007.) $)
  oprssov $p |- ( ( ( Fun F /\ G Fn ( C X. D ) /\ G C_ F ) /\
        ( A e. C /\ B e. D ) ) -> ( A F B ) = ( A G B ) ) $=
    ( wfun cxp wfn wss w3a wcel wa cres co wceq ovres adantl cdm eqtr3d reseq2d
    fndm 3ad2ant2 funssres 3adant2 oveqd adantr ) EGZFCDHZIZFEJZKZACLBDLMZMABEU
    INZOZABEOZABFOZUMUOUPPULABCDEQRULUOUQPUMULUNFABULEFSZNZUNFUJUHUSUNPUKUJURUI
    EUIFUBUAUCUHUKUSFPUJEFUDUETUFUGT $.

  $( An operation's value belongs to its codomain.  (Contributed by NM,
     27-Aug-2006.) $)
  fovrn $p |- ( ( F : ( R X. S ) --> C /\ A e. R /\ B e. S ) ->
               ( A F B ) e. C ) $=
    ( cxp wf wcel co wa cop opelxpi cfv df-ov ffvelrn syl5eqel sylan2 3impb ) D
    EGZCFHZADIZBEIZABFJZCIZUBUCKUAABLZTIZUEABDEMUAUGKUDUFFNCABFOTCUFFPQRS $.

  ${
    fovrnd.1 $e |- ( ph -> F : ( R X. S ) --> C ) $.
    $( An operation's value belongs to its codomain.  (Contributed by Mario
       Carneiro, 29-Dec-2016.) $)
    fovrnda $p |- ( ( ph /\ ( A e. R /\ B e. S ) ) -> ( A F B ) e. C ) $=
      ( wcel co cxp wf fovrn syl3an1 3expb ) ABEIZCFIZBCGJDIZAEFKDGLPQRHBCDEFGM
      NO $.

    fovrnd.2 $e |- ( ph -> A e. R ) $.
    fovrnd.3 $e |- ( ph -> B e. S ) $.
    $( An operation's value belongs to its codomain.  (Contributed by Mario
       Carneiro, 29-Dec-2016.) $)
    fovrnd $p |- ( ph -> ( A F B ) e. C ) $=
      ( cxp wf wcel co fovrn syl3anc ) AEFKDGLBEMCFMBCGNDMHIJBCDEFGOP $.
  $}

  ${
    $d w x y z A $.  $d w x y z B $.  $d w z C $.  $d w x y z F $.
    $( The range of an operation expressed as a collection of the operation's
       values.  (Contributed by NM, 29-Oct-2006.) $)
    fnrnov $p |- ( F Fn ( A X. B ) -> ran F = { z | E. x e. A E. y e. B
                     z = ( x F y ) } ) $=
      ( vw cxp wfn crn cv cfv wceq wrex cab co fnrnfv cop fveq2 df-ov syl6eqr
      eqeq2d rexxp abbii syl6eq ) FDEHZIFJCKZGKZFLZMZGUFNZCOUGAKZBKZFPZMZBENADN
      ZCOGCUFFQUKUPCUJUOGABDEUHULUMRZMZUIUNUGURUIUQFLUNUHUQFSULUMFTUAUBUCUDUE
      $.

    $( An onto mapping of an operation expressed in terms of operation values.
       (Contributed by NM, 29-Oct-2006.) $)
    foov $p |- ( F : ( A X. B ) -onto-> C <-> ( F : ( A X. B ) --> C /\
                  A. z e. C E. x e. A E. y e. B z = ( x F y ) ) ) $=
      ( vw cxp wfo wf cv cfv wceq wrex wral wa co dffo3 cop fveq2 df-ov syl6eqr
      eqeq2d rexxp ralbii anbi2i bitri ) DEIZFGJUIFGKZCLZHLZGMZNZHUIOZCFPZQUJUK
      ALZBLZGRZNZBEOADOZCFPZQHCUIFGSUPVBUJUOVACFUNUTHABDEULUQURTZNZUMUSUKVDUMVC
      GMUSULVCGUAUQURGUBUCUDUEUFUGUH $.
  $}

  $( An operation's value belongs to its range.  (Contributed by NM,
     10-Feb-2007.) $)
  fnovrn $p |- ( ( F Fn ( A X. B ) /\ C e. A /\ D e. B ) ->
                   ( C F D ) e. ran F ) $=
    ( cxp wfn wcel co crn cop opelxpi cfv df-ov fnfvelrn syl5eqel sylan2 3impb
    wa ) EABFZGZCAHZDBHZCDEIZEJZHZUBUCSUACDKZTHZUFCDABLUAUHSUDUGEMUECDENTUGEOPQ
    R $.

  ${
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z D $.  $d x y z F $.
    $( A member of an operation's range is a value of the operation.
       (Contributed by NM, 7-Feb-2007.)  (Revised by Mario Carneiro,
       30-Jan-2014.) $)
    ovelrn $p |- ( F Fn ( A X. B ) -> ( C e. ran F <->
                  E. x e. A E. y e. B C = ( x F y ) ) ) $=
      ( vz cxp wfn crn wcel cv co wceq wrex cab fnrnov eleq2d cvv rexlimivw
      ovex eleq1 mpbiri eqeq1 2rexbidv elab3 syl6bb ) FCDHIZEFJZKEGLZALZBLZFMZN
      ZBDOACOZGPZKEUMNZBDOZACOZUHUIUPEABGCDFQRUOUSGEURESKZACUQUTBDUQUTUMSKUKULF
      UAEUMSUBUCTTUJENUNUQABCDUJEUMUDUEUFUG $.

    $( Membership relation for the values of a function whose image is a
       subclass.  (Contributed by Mario Carneiro, 23-Dec-2013.) $)
    funimassov $p |- ( ( Fun F /\ ( A X. B ) C_ dom F ) ->
        ( ( F "" ( A X. B ) ) C_ C <-> A. x e. A A. y e. B ( x F y ) e. C ) ) $=
      ( vz wfun cxp cdm wss wa cima cv cfv wcel wral co funimass4 cop syl6eqr
      wceq fveq2 df-ov eleq1d ralxp syl6bb ) FHCDIZFJKLFUHMEKGNZFOZEPZGUHQANZBN
      ZFRZEPZBDQACQGUHEFSUKUOGABCDUIULUMTZUBZUJUNEUQUJUPFOUNUIUPFUCULUMFUDUAUEU
      FUG $.

    $( Operation value in an image.  (Contributed by Mario Carneiro,
       23-Dec-2013.)  (Revised by Mario Carneiro, 29-Jan-2014.) $)
    ovelimab $p |- ( ( F Fn A /\ ( B X. C ) C_ A ) ->
        ( D e. ( F "" ( B X. C ) ) <-> E. x e. B E. y e. C D = ( x F y ) ) ) $=
      ( vz wfn cxp wss wa cima wcel cv cfv wceq wrex co syl6bb fvelimab syl6eqr
      cop fveq2 df-ov eqeq1d eqcom rexxp ) GCIDEJZCKLFGUIMNHOZGPZFQZHUIRFAOZBOZ
      GSZQZBERADRHCUIFGUAULUPHABDEUJUMUNUCZQZULUOFQUPURUKUOFURUKUQGPUOUJUQGUDUM
      UNGUEUBUFUOFUGTUHT $.
  $}

  $( An operation value is a member of the image plus null.  (Contributed by
     Thierry Arnoux, 25-Jun-2019.) $)
  ovima0 $p |- ( ( X e. A /\ Y e. B )
    -> ( X R Y ) e. ( ( R "" ( A X. B ) ) u. { (/) } ) ) $=
    ( wcel wa co c0 wceq cxp cima csn cun simpr ssun2 0ex snid sselii wn eqeq1i
    syl6eqel ssun1 cop cfv opelxpi notbii biimpi eliman0 syl2an syl5eqel sseldi
    df-ov pm2.61dan ) DAFEBFGZDECHZIJZUPCABKZLZIMZNZFUOUQGUPIVAUOUQOUTVAIUTUSPI
    QRSUBUOUQTZGZUSVAUPUSUTUCVCUPDEUDZCUEZUSDECUMZUOVDURFVEIJZTZVEUSFVBDEABUFVB
    VHUQVGUPVEIVFUAUGUHVDURCUIUJUKULUN $.

  ${
    oprvalconst2.1 $e |- C e. _V $.
    $( The value of a constant operation.  (Contributed by NM, 5-Nov-2006.) $)
    ovconst2 $p |- ( ( R e. A /\ S e. B ) ->
                       ( R ( ( A X. B ) X. { C } ) S ) = C ) $=
      ( wcel wa cxp csn co cop cfv df-ov wceq opelxpi fvconst2 syl syl5eq ) DAG
      EBGHZDEABIZCJIZKDELZUBMZCDEUBNTUCUAGUDCODEABPUACUCFQRS $.
  $}

  ${
    $d x y S $.  $d x y F $.
    oprssdm.1 $e |- -. (/) e. S $.
    oprssdm.2 $e |- ( ( x e. S /\ y e. S ) -> ( x F y ) e. S ) $.
    $( Domain of closure of an operation.  (Contributed by NM, 24-Aug-1995.) $)
    oprssdm $p |- ( S X. S ) C_ dom F $=
      ( cxp cdm relxp cv cop wcel wa opelxp cfv co df-ov syl5eqelr wn c0 eleq1d
      ndmfv mtbiri con4i syl sylbi relssi ) ABCCGZDHZCCIAJZBJZKZUHLUJCLUKCLMZUL
      UILZUJUKCCNUMULDOZCLZUNUMUOUJUKDPCUJUKDQFRUNUPUNSZUPTCLEUQUOTCULDUBUAUCUD
      UEUFUG $.
  $}

  $( The value of an operation outside its domain.  (Contributed by Alexander
     van der Vekens, 7-Sep-2017.) $)
  nssdmovg $p |- ( ( dom F C_ ( R X. S ) /\ -. ( A e. R /\ B e. S ) )
              -> ( A F B ) = (/) ) $=
    ( cdm cxp wss wcel wa wn co cop cfv c0 df-ov wceq ssel2 opelxp sylib syl5eq
    stoic1a ndmfv syl ) EFZCDGZHZACIBDIJZKJZABELABMZENZOABEPUIUJUEIZKUKOQUGULUH
    UGULJUJUFIUHUEUFUJRABCDSTUBUJEUCUDUA $.

  $( The value of an operation outside its domain.  (Contributed by NM,
     28-Mar-2008.) $)
  ndmovg $p |- ( ( dom F = ( R X. S ) /\ -. ( A e. R /\ B e. S ) )
              -> ( A F B ) = (/) ) $=
    ( cdm cxp wceq wcel wa wn co cop cfv c0 df-ov eleq2 opelxp syl6bb notbid
    ndmfv syl6bir imp syl5eq ) EFZCDGZHZACIBDIJZKZJABELABMZENZOABEPUGUIUKOHZUGU
    IUJUEIZKULUGUMUHUGUMUJUFIUHUEUFUJQABCDRSTUJEUAUBUCUD $.

  ${
    ndmov.1 $e |- dom F = ( S X. S ) $.
    $( The value of an operation outside its domain.  (Contributed by NM,
       24-Aug-1995.) $)
    ndmov $p |- ( -. ( A e. S /\ B e. S ) -> ( A F B ) = (/) ) $=
      ( cdm cxp wceq wcel wa wn co c0 ndmovg mpan ) DFCCGHACIBCIJKABDLMHEABCCDN
      O $.

    ${
      ndmovcl.2 $e |- ( ( A e. S /\ B e. S ) -> ( A F B ) e. S ) $.
      ndmovcl.3 $e |- (/) e. S $.
      $( The closure of an operation outside its domain, when the domain
         includes the empty set.  This technical lemma can make the operation
         more convenient to work in some cases.  It is dependent on our
         particular definitions of operation value, function value, and ordered
         pair.  (Contributed by NM, 24-Sep-2004.) $)
      ndmovcl $p |- ( A F B ) e. S $=
        ( wcel wa co wn c0 ndmov syl6eqel pm2.61i ) ACHBCHIZABDJZCHFPKQLCABCDEM
        GNO $.
    $}

    ${
      ndmovrcl.3 $e |- -. (/) e. S $.
      $( Reverse closure law, when an operation's domain doesn't contain the
         empty set.  (Contributed by NM, 3-Feb-1996.) $)
      ndmovrcl $p |- ( ( A F B ) e. S -> ( A e. S /\ B e. S ) ) $=
        ( wcel wa co wn c0 ndmov eleq1d mtbiri con4i ) ACGBCGHZABDIZCGZPJZRKCGF
        SQKCABCDELMNO $.
    $}

    $( Any operation is commutative outside its domain.  (Contributed by NM,
       24-Aug-1995.) $)
    ndmovcom $p |- ( -. ( A e. S /\ B e. S ) -> ( A F B ) = ( B F A ) ) $=
      ( wcel wa wn co c0 ndmov wceq ancom sylnbi eqtr4d ) ACFZBCFZGZHABDIJBADIZ
      ABCDEKRQPGSJLPQMBACDEKNO $.

    ${
      ndmov.5 $e |- -. (/) e. S $.
      $( Any operation is associative outside its domain, if the domain doesn't
         contain the empty set.  (Contributed by NM, 24-Aug-1995.) $)
      ndmovass $p |- ( -. ( A e. S /\ B e. S /\ C e. S ) ->
              ( ( A F B ) F C ) = ( A F ( B F C ) ) ) $=
        ( wcel w3a wn co c0 wa wceq ndmovrcl anim1i sylibr con3i ndmov syl
        df-3an anim2i 3anass eqtr4d ) ADHZBDHZCDHZIZJZABEKZCEKZLABCEKZEKZUIUJDH
        ZUGMZJUKLNUOUHUOUEUFMZUGMUHUNUPUGABDEFGOPUEUFUGUAQRUJCDEFSTUIUEULDHZMZJ
        UMLNURUHURUEUFUGMZMUHUQUSUEBCDEFGOUBUEUFUGUCQRAULDEFSTUD $.

      ndmov.6 $e |- dom G = ( S X. S ) $.
      $( Any operation is distributive outside its domain, if the domain
         doesn't contain the empty set.  (Contributed by NM, 24-Aug-1995.) $)
      ndmovdistr $p |- ( -. ( A e. S /\ B e. S /\ C e. S ) ->
          ( A G ( B F C ) ) = ( ( A G B ) F ( A G C ) ) ) $=
        ( wcel wn co c0 wa wceq ndmovrcl sylibr con3i ndmov syl anim12i anandi3
        w3a anim2i 3anass eqtr4d ) ADJZBDJZCDJZUCZKZABCELZFLZMABFLZACFLZELZUKUG
        ULDJZNZKUMMOURUJURUGUHUINZNUJUQUSUGBCDEGHPUDUGUHUIUEQRAULDFISTUKUNDJZUO
        DJZNZKUPMOVBUJVBUGUHNZUGUINZNUJUTVCVAVDABDFIHPACDFIHPUAUGUHUIUBQRUNUODE
        GSTUF $.
    $}

    ndmovord.4 $e |- R C_ ( S X. S ) $.
    ndmovord.5 $e |- -. (/) e. S $.
    ndmovord.6 $e |- ( ( A e. S /\ B e. S /\ C e. S ) ->
                   ( A R B <-> ( C F A ) R ( C F B ) ) ) $.
    $( Elimination of redundant antecedents in an ordering law.  (Contributed
       by NM, 7-Mar-1996.) $)
    ndmovord $p |- ( C e. S -> ( A R B <-> ( C F A ) R ( C F B ) ) ) $=
      ( wcel wa wbr co wb wi 3expia brel ndmovrcl simprd wn anim12i syl pm2.61i
      pm5.21ni a1d ) AEKZBEKZLZCEKZABDMZCAFNZCBFNZDMZOZPUGUHUJUOJQUIUAUOUJUKUIU
      NABEEDHRUNULEKZUMEKZLUIULUMEEDHRUPUGUQUHUPUJUGCAEFGISTUQUJUHCBEFGISTUBUCU
      EUFUD $.
  $}

  ${
    ndmovordi.2 $e |- dom F = ( S X. S ) $.
    ndmovordi.4 $e |- R C_ ( S X. S ) $.
    ndmovordi.5 $e |- -. (/) e. S $.
    ndmovordi.6 $e |- ( C e. S -> ( A R B <-> ( C F A ) R ( C F B ) ) ) $.
    $( Elimination of redundant antecedent in an ordering law.  (Contributed by
       NM, 25-Jun-1998.) $)
    ndmovordi $p |- ( ( C F A ) R ( C F B ) -> A R B ) $=
      ( wcel co wbr brel simpld ndmovrcl syl biimprd mpcom ) CEKZCAFLZCBFLZDMZA
      BDMZUCUAEKZTUCUEUBEKUAUBEEDHNOUETAEKCAEFGIPOQTUDUCJRS $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y C $.  $d x y D $.  $d x y E $.  $d x y ph $.
    $d x y F $.
    caovclg.1 $e |- ( ( ph /\ ( x e. C /\ y e. D ) ) -> ( x F y ) e. E ) $.
    $( Convert an operation closure law to class notation.  (Contributed by
       Mario Carneiro, 26-May-2014.) $)
    caovclg $p |- ( ( ph /\ ( A e. C /\ B e. D ) ) -> ( A F B ) e. E ) $=
      ( cv co wcel wral wa ralrimivva wceq oveq1 eleq1d oveq2 rspc2v mpan9 ) AB
      KZCKZILZHMZCGNBFNDFMEGMODEILZHMZAUFBCFGJPUFUHDUDILZHMBCDEFGUCDQUEUIHUCDUD
      IRSUDEQUIUGHUDEDITSUAUB $.

    caovcld.2 $e |- ( ph -> A e. C ) $.
    caovcld.3 $e |- ( ph -> B e. D ) $.
    $( Convert an operation closure law to class notation.  (Contributed by
       Mario Carneiro, 30-Dec-2014.) $)
    caovcld $p |- ( ph -> ( A F B ) e. E ) $=
      ( wcel co id caovclg syl12anc ) AADFMEGMDEINHMAOKLABCDEFGHIJPQ $.
  $}

  ${
    $d x y A $.  $d y B $.  $d x y F $.  $d x y ph $.  $d x y S $.
    caovcl.1 $e |- ( ( x e. S /\ y e. S ) -> ( x F y ) e. S ) $.
    $( Convert an operation closure law to class notation.  (Contributed by NM,
       4-Aug-1995.)  (Revised by Mario Carneiro, 26-May-2014.) $)
    caovcl $p |- ( ( A e. S /\ B e. S ) -> ( A F B ) e. S ) $=
      ( wtru wcel wa co tru cv adantl caovclg mpan ) HCEIDEIJCDFKEILHABCDEEEFAM
      ZEIBMZEIJQRFKEIHGNOP $.
  $}

  ${
    $( General laws for commutative, associative, distributive operations. $)
    $d x y z A $.  $d x y z B $.  $d x y z C $.  $d x y z D $.  $d x y z ph $.
    $d x y z F $.  $d x y z G $.  $d x y z H $.  $d x y z K $.  $d x y z R $.
    $d x y z S $.  $d x y z T $.
    ${
      caovcomg.1 $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) ->
                          ( x F y ) = ( y F x ) ) $.
      $( Convert an operation commutative law to class notation.  (Contributed
         by Mario Carneiro, 1-Jun-2013.) $)
      caovcomg $p |- ( ( ph /\ ( A e. S /\ B e. S ) ) ->
                        ( A F B ) = ( B F A ) ) $=
        ( cv co wceq wral wcel wa ralrimivva oveq1 oveq2 eqeq12d rspc2v mpan9 )
        ABIZCIZGJZUBUAGJZKZCFLBFLDFMEFMNDEGJZEDGJZKZAUEBCFFHOUEUHDUBGJZUBDGJZKB
        CDEFFUADKUCUIUDUJUADUBGPUADUBGQRUBEKUIUFUJUGUBEDGQUBEDGPRST $.

      caovcomd.2 $e |- ( ph -> A e. S ) $.
      caovcomd.3 $e |- ( ph -> B e. S ) $.
      $( Convert an operation commutative law to class notation.  (Contributed
         by Mario Carneiro, 30-Dec-2014.) $)
      caovcomd $p |- ( ph -> ( A F B ) = ( B F A ) ) $=
        ( wcel co wceq id caovcomg syl12anc ) AADFKEFKDEGLEDGLMANIJABCDEFGHOP
        $.
    $}

    ${
      caovcom.1 $e |- A e. _V $.
      caovcom.2 $e |- B e. _V $.
      caovcom.3 $e |- ( x F y ) = ( y F x ) $.
      $( Convert an operation commutative law to class notation.  (Contributed
         by NM, 26-Aug-1995.)  (Revised by Mario Carneiro, 1-Jun-2013.) $)
      caovcom $p |- ( A F B ) = ( B F A ) $=
        ( cvv wcel wa co wceq pm3.2i cv a1i caovcomg mp2an ) CIJZSDIJZKCDELDCEL
        MFSTFGNSABCDIEAOZBOZELUBUAELMSUAIJUBIJKKHPQR $.
    $}

    ${
      caovassg.1 $e |- ( ( ph /\ ( x e. S /\ y e. S /\ z e. S ) ) ->
        ( ( x F y ) F z ) = ( x F ( y F z ) ) ) $.
      $( Convert an operation associative law to class notation.  (Contributed
         by Mario Carneiro, 1-Jun-2013.)  (Revised by Mario Carneiro,
         26-May-2014.) $)
      caovassg $p |- ( ( ph /\ ( A e. S /\ B e. S /\ C e. S ) ) ->
          ( ( A F B ) F C ) = ( A F ( B F C ) ) ) $=
        ( cv co wceq wral wcel oveq1 oveq1d eqeq12d oveq2 oveq2d rspc3v mpan9
        w3a ralrimivvva ) ABKZCKZILZDKZILZUEUFUHILZILZMZDHNCHNBHNEHOFHOGHOUCEFI
        LZGILZEFGILZILZMZAULBCDHHHJUDULUQEUFILZUHILZEUJILZMUMUHILZEFUHILZILZMBC
        DEFGHHHUEEMZUIUSUKUTVDUGURUHIUEEUFIPQUEEUJIPRUFFMZUSVAUTVCVEURUMUHIUFFE
        ISQVEUJVBEIUFFUHIPTRUHGMZVAUNVCUPUHGUMISVFVBUOEIUHGFISTRUAUB $.

      caovassd.2 $e |- ( ph -> A e. S ) $.
      caovassd.3 $e |- ( ph -> B e. S ) $.
      caovassd.4 $e |- ( ph -> C e. S ) $.
      $( Convert an operation associative law to class notation.  (Contributed
         by Mario Carneiro, 30-Dec-2014.) $)
      caovassd $p |- ( ph -> ( ( A F B ) F C ) = ( A F ( B F C ) ) ) $=
        ( wcel co wceq id caovassg syl13anc ) AAEHNFHNGHNEFIOGIOEFGIOIOPAQKLMAB
        CDEFGHIJRS $.
    $}

    ${
      caovass.1 $e |- A e. _V $.
      caovass.2 $e |- B e. _V $.
      caovass.3 $e |- C e. _V $.
      caovass.4 $e |- ( ( x F y ) F z ) = ( x F ( y F z ) ) $.
      $( Convert an operation associative law to class notation.  (Contributed
         by NM, 26-Aug-1995.)  (Revised by Mario Carneiro, 26-May-2014.) $)
      caovass $p |- ( ( A F B ) F C ) = ( A F ( B F C ) ) $=
        ( cvv wcel co wceq wtru w3a tru cv wa a1i caovassg mpan mp3an ) DLMZELM
        ZFLMZDEGNFGNDEFGNGNOZHIJPUEUFUGQUHRPABCDEFLGASZBSZGNCSZGNUIUJUKGNGNOPUI
        LMUJLMUKLMQTKUAUBUCUD $.
    $}

    ${
      caovcang.1 $e |- ( ( ph /\ ( x e. T /\ y e. S /\ z e. S ) ) ->
                         ( ( x F y ) = ( x F z ) <-> y = z ) ) $.
      $( Convert an operation cancellation law to class notation.  (Contributed
         by NM, 20-Aug-1995.)  (Revised by Mario Carneiro, 30-Dec-2014.) $)
      caovcang $p |- ( ( ph /\ ( A e. T /\ B e. S /\ C e. S ) ) ->
                       ( ( A F B ) = ( A F C ) <-> B = C ) ) $=
        ( cv co wceq wb wral wcel oveq1 oveq2 bibi12d ralrimivvva bibi1d eqeq1d
        w3a eqeq12d eqeq1 eqeq2d eqeq2 rspc3v mpan9 ) ABLZCLZJMZUKDLZJMZNZULUNN
        ZOZDHPCHPBIPEIQFHQGHQUDEFJMZEGJMZNZFGNZOZAURBCDIHHKUAURVCEULJMZEUNJMZNZ
        UQOUSVENZFUNNZOBCDEFGIHHUKENZUPVFUQVIUMVDUOVEUKEULJRUKEUNJRUEUBULFNZVFV
        GUQVHVJVDUSVEULFEJSUCULFUNUFTUNGNZVGVAVHVBVKVEUTUSUNGEJSUGUNGFUHTUIUJ
        $.

      caovcand.2 $e |- ( ph -> A e. T ) $.
      caovcand.3 $e |- ( ph -> B e. S ) $.
      caovcand.4 $e |- ( ph -> C e. S ) $.
      $( Convert an operation cancellation law to class notation.  (Contributed
         by Mario Carneiro, 30-Dec-2014.) $)
      caovcand $p |- ( ph -> ( ( A F B ) = ( A F C ) <-> B = C ) ) $=
        ( wcel co wceq wb id caovcang syl13anc ) AAEIOFHOGHOEFJPEGJPQFGQRASLMNA
        BCDEFGHIJKTUA $.

      caovcanrd.5 $e |- ( ph -> A e. S ) $.
      caovcanrd.6 $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) ->
                          ( x F y ) = ( y F x ) ) $.
      $( Commute the arguments of an operation cancellation law.  (Contributed
         by Mario Carneiro, 30-Dec-2014.) $)
      caovcanrd $p |- ( ph -> ( ( B F A ) = ( C F A ) <-> B = C ) ) $=
        ( co wceq caovcomd eqeq12d caovcand bitr3d ) AEFJQZEGJQZRFEJQZGEJQZRFGR
        AUCUEUDUFABCEFHJPOMSABCEGHJPONSTABCDEFGHIJKLMNUAUB $.
    $}

    ${
      caovcan.1 $e |- C e. _V $.
      caovcan.2 $e |- ( ( x e. S /\ y e. S ) ->
                   ( ( x F y ) = ( x F z ) -> y = z ) ) $.
      $( Convert an operation cancellation law to class notation.  (Contributed
         by NM, 20-Aug-1995.) $)
      caovcan $p |- ( ( A e. S /\ B e. S ) ->
                   ( ( A F B ) = ( A F C ) -> B = C ) ) $=
        ( cv co wceq wi oveq1 eqeq12d imbi1d oveq2 imbi12d wcel eqeq1d eqeq1 wa
        eqeq2d eqeq2 imbi2d vtocl vtocl2ga ) AKZBKZHLZUIFHLZMZUJFMZNZDUJHLZDFHL
        ZMZUNNDEHLZUQMZEFMZNABDEGGUIDMZUMURUNVBUKUPULUQUIDUJHOUIDFHOPQUJEMZURUT
        UNVAVCUPUSUQUJEDHRUAUJEFUBSUIGTUJGTUCZUKUICKZHLZMZUJVEMZNZNVDUONCFIVEFM
        ZVIUOVDVJVGUMVHUNVJVFULUKVEFUIHRUDVEFUJUESUFJUGUH $.
    $}

    ${
      caovordig.1 $e |- ( ( ph /\ ( x e. S /\ y e. S /\ z e. S ) ) ->
                         ( x R y -> ( z F x ) R ( z F y ) ) ) $.
      $( Convert an operation ordering law to class notation.  (Contributed by
         Mario Carneiro, 31-Dec-2014.) $)
      caovordig $p |- ( ( ph /\ ( A e. S /\ B e. S /\ C e. S ) ) ->
                      ( A R B -> ( C F A ) R ( C F B ) ) ) $=
        ( cv wbr co wi wral wcel wceq oveq2 imbi12d w3a ralrimivvva breq1 breq2
        breq1d breq2d oveq1 breq12d imbi2d rspc3v mpan9 ) ABLZCLZHMZDLZULJNZUOU
        MJNZHMZOZDIPCIPBIPEIQFIQGIQUAEFHMZGEJNZGFJNZHMZOZAUSBCDIIIKUBUSVDEUMHMZ
        UOEJNZUQHMZOUTVFUOFJNZHMZOBCDEFGIIIULERZUNVEURVGULEUMHUCVJUPVFUQHULEUOJ
        SUETUMFRZVEUTVGVIUMFEHUDVKUQVHVFHUMFUOJSUFTUOGRZVIVCUTVLVFVAVHVBHUOGEJU
        GUOGFJUGUHUIUJUK $.

      caovordid.2 $e |- ( ph -> A e. S ) $.
      caovordid.3 $e |- ( ph -> B e. S ) $.
      caovordid.4 $e |- ( ph -> C e. S ) $.
      $( Convert an operation ordering law to class notation.  (Contributed by
         Mario Carneiro, 31-Dec-2014.) $)
      caovordid $p |- ( ph -> ( A R B -> ( C F A ) R ( C F B ) ) ) $=
        ( wcel wbr co wi id caovordig syl13anc ) AAEIOFIOGIOEFHPGEJQGFJQHPRASLM
        NABCDEFGHIJKTUA $.
    $}

    ${
      caovordg.1 $e |- ( ( ph /\ ( x e. S /\ y e. S /\ z e. S ) ) ->
                         ( x R y <-> ( z F x ) R ( z F y ) ) ) $.
      $( Convert an operation ordering law to class notation.  (Contributed by
         NM, 19-Feb-1996.)  (Revised by Mario Carneiro, 30-Dec-2014.) $)
      caovordg $p |- ( ( ph /\ ( A e. S /\ B e. S /\ C e. S ) ) ->
                      ( A R B <-> ( C F A ) R ( C F B ) ) ) $=
        ( cv wbr co wb wral wcel wceq oveq2 bibi12d w3a ralrimivvva breq1 breq2
        breq1d breq2d oveq1 breq12d bibi2d rspc3v mpan9 ) ABLZCLZHMZDLZULJNZUOU
        MJNZHMZOZDIPCIPBIPEIQFIQGIQUAEFHMZGEJNZGFJNZHMZOZAUSBCDIIIKUBUSVDEUMHMZ
        UOEJNZUQHMZOUTVFUOFJNZHMZOBCDEFGIIIULERZUNVEURVGULEUMHUCVJUPVFUQHULEUOJ
        SUETUMFRZVEUTVGVIUMFEHUDVKUQVHVFHUMFUOJSUFTUOGRZVIVCUTVLVFVAVHVBHUOGEJU
        GUOGFJUGUHUIUJUK $.

      caovordd.2 $e |- ( ph -> A e. S ) $.
      caovordd.3 $e |- ( ph -> B e. S ) $.
      caovordd.4 $e |- ( ph -> C e. S ) $.
      $( Convert an operation ordering law to class notation.  (Contributed by
         Mario Carneiro, 30-Dec-2014.) $)
      caovordd $p |- ( ph -> ( A R B <-> ( C F A ) R ( C F B ) ) ) $=
        ( wcel wbr co wb id caovordg syl13anc ) AAEIOFIOGIOEFHPGEJQGFJQHPRASLMN
        ABCDEFGHIJKTUA $.

      caovord2d.com $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) ->
                            ( x F y ) = ( y F x ) ) $.
      $( Operation ordering law with commuted arguments.  (Contributed by Mario
         Carneiro, 30-Dec-2014.) $)
      caovord2d $p |- ( ph -> ( A R B <-> ( A F C ) R ( B F C ) ) ) $=
        ( wbr co caovordd caovcomd breq12d bitrd ) AEFHPGEJQZGFJQZHPEGJQZFGJQZH
        PABCDEFGHIJKLMNRAUBUDUCUEHABCGEIJONLSABCGFIJONMSTUA $.

      caovord3d.5 $e |- ( ph -> D e. S ) $.
      $( Ordering law.  (Contributed by Mario Carneiro, 30-Dec-2014.) $)
      caovord3d $p |- ( ph ->
        ( ( A F B ) = ( C F D ) -> ( A R C <-> D R B ) ) ) $=
        ( co wbr wb wceq breq1 caovord2d caovordd bibi12d syl5ibr ) EFKRZGHKRZU
        AEGISZHFISZTAUGGFKRZISZUHUKISZTUGUHUKIUBAUIULUJUMABCDEGFIJKLMONPUCABCDH
        FGIJKLQNOUDUEUF $.
    $}

    ${
      caovord.1 $e |- A e. _V $.
      caovord.2 $e |- B e. _V $.
      caovord.3 $e |- ( z e. S -> ( x R y <-> ( z F x ) R ( z F y ) ) ) $.
      $( Convert an operation ordering law to class notation.  (Contributed by
         NM, 19-Feb-1996.) $)
      caovord $p |- ( C e. S -> ( A R B <-> ( C F A ) R ( C F B ) ) ) $=
        ( wbr cv co wb wceq oveq1 wi oveq2 breq12d bibi2d wcel wa breq1 bibi12d
        breq1d breq2 breq2d sylan9bb imbi2d vtocl2 vtoclga ) DEGMZCNZDIOZUOEIOZ
        GMZPZUNFDIOZFEIOZGMZPCFHUOFQZURVBUNVCUPUTUQVAGUOFDIRUOFEIRUAUBUOHUCZANZ
        BNZGMZUOVEIOZUOVFIOZGMZPZSVDUSSABDEJKVEDQZVFEQZUDVKUSVDVLVKDVFGMZUPVIGM
        ZPVMUSVLVGVNVJVOVEDVFGUEVLVHUPVIGVEDUOITUGUFVMVNUNVOURVFEDGUHVMVIUQUPGV
        FEUOITUIUFUJUKLULUM $.

      $( (We don't bother to eliminate this redundant hypothesis.) $)
      caovord2.3 $e |- C e. _V $.
      caovord2.com $e |- ( x F y ) = ( y F x ) $.
      $( Operation ordering law with commuted arguments.  (Contributed by NM,
         27-Feb-1996.) $)
      caovord2 $p |- ( C e. S -> ( A R B <-> ( A F C ) R ( B F C ) ) ) $=
        ( wcel wbr co caovord caovcom breq12i syl6bb ) FHODEGPFDIQZFEIQZGPDFIQZ
        EFIQZGPABCDEFGHIJKLRUBUDUCUEGABFDIMJNSABFEIMKNSTUA $.

      $( (We don't bother to eliminate redundant hypotheses.) $)
      caovord3.4 $e |- D e. _V $.
      $( Ordering law.  (Contributed by NM, 29-Feb-1996.) $)
      caovord3 $p |- ( ( ( B e. S /\ C e. S ) /\
                ( A F B ) = ( C F D ) ) -> ( A R C <-> D R B ) ) $=
        ( wcel wa co wbr wceq wb caovord2 adantr breq1 sylan9bb ad2antlr bitr4d
        caovord ) EIQZFIQZRZDEJSZFGJSZUAZRDFHTZUNFEJSZHTZGEHTZULUPUMUQHTZUOURUJ
        UPUTUBUKABCDFEHIJKNMLOUCUDUMUNUQHUEUFUKUSURUBUJUOABCGEFHIJPLMUIUGUH $.
    $}

    ${
      caovdig.1 $e |- ( ( ph /\ ( x e. K /\ y e. S /\ z e. S ) ) ->
        ( x G ( y F z ) ) = ( ( x G y ) H ( x G z ) ) ) $.
      $( Convert an operation distributive law to class notation.  (Contributed
         by NM, 25-Aug-1995.)  (Revised by Mario Carneiro, 26-Jul-2014.) $)
      caovdig $p |- ( ( ph /\ ( A e. K /\ B e. S /\ C e. S ) ) ->
        ( A G ( B F C ) ) = ( ( A G B ) H ( A G C ) ) ) $=
        ( cv co wceq wral wcel oveq1 eqeq12d oveq12d oveq2d oveq2 oveq1d rspc3v
        w3a ralrimivvva mpan9 ) ABNZCNZDNZIOZJOZUIUJJOZUIUKJOZKOZPZDHQCHQBLQELR
        FHRGHRUFEFGIOZJOZEFJOZEGJOZKOZPZAUQBCDLHHMUGUQVCEULJOZEUJJOZEUKJOZKOZPE
        FUKIOZJOZUTVFKOZPBCDEFGLHHUIEPZUMVDUPVGUIEULJSVKUNVEUOVFKUIEUJJSUIEUKJS
        UATUJFPZVDVIVGVJVLULVHEJUJFUKISUBVLVEUTVFKUJFEJUCUDTUKGPZVIUSVJVBVMVHUR
        EJUKGFIUCUBVMVFVAUTKUKGEJUCUBTUEUH $.

      caovdid.2 $e |- ( ph -> A e. K ) $.
      caovdid.3 $e |- ( ph -> B e. S ) $.
      caovdid.4 $e |- ( ph -> C e. S ) $.
      $( Convert an operation distributive law to class notation.  (Contributed
         by Mario Carneiro, 30-Dec-2014.) $)
      caovdid $p |- ( ph -> ( A G ( B F C ) ) = ( ( A G B ) H ( A G C ) ) ) $=
        ( wcel co wceq id caovdig syl13anc ) AAELQFHQGHQEFGIRJREFJREGJRKRSATNOP
        ABCDEFGHIJKLMUAUB $.
    $}

    ${
      caovdir2d.1 $e |- ( ( ph /\ ( x e. S /\ y e. S /\ z e. S ) ) ->
        ( x G ( y F z ) ) = ( ( x G y ) F ( x G z ) ) ) $.
      caovdir2d.2 $e |- ( ph -> A e. S ) $.
      caovdir2d.3 $e |- ( ph -> B e. S ) $.
      caovdir2d.4 $e |- ( ph -> C e. S ) $.
      caovdir2d.cl $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) ->
                           ( x F y ) e. S ) $.
      caovdir2d.com $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) ->
                            ( x G y ) = ( y G x ) ) $.
      $( Convert an operation distributive law to class notation.  (Contributed
         by Mario Carneiro, 30-Dec-2014.) $)
      caovdir2d $p |- ( ph
          -> ( ( A F B ) G C ) = ( ( A G C ) F ( B G C ) ) ) $=
        ( co caovdid caovcld caovcomd oveq12d 3eqtr4d ) AGEFIQZJQGEJQZGFJQZIQUC
        GJQEGJQZFGJQZIQABCDGEFHIJIHKNLMRABCUCGHJPABCEFHHHIOLMSNTAUFUDUGUEIABCEG
        HJPLNTABCFGHJPMNTUAUB $.
    $}

    ${
      caovdirg.1 $e |- ( ( ph /\ ( x e. S /\ y e. S /\ z e. K ) ) ->
        ( ( x F y ) G z ) = ( ( x G z ) H ( y G z ) ) ) $.
      $( Convert an operation reverse distributive law to class notation.
         (Contributed by Mario Carneiro, 19-Oct-2014.) $)
      caovdirg $p |- ( ( ph /\ ( A e. S /\ B e. S /\ C e. K ) ) ->
        ( ( A F B ) G C ) = ( ( A G C ) H ( B G C ) ) ) $=
        ( cv co wceq wral wcel oveq1 oveq2 w3a ralrimivvva oveq1d oveq2d rspc3v
        eqeq12d oveq12d mpan9 ) ABNZCNZIOZDNZJOZUIULJOZUJULJOZKOZPZDLQCHQBHQEHR
        FHRGLRUAEFIOZGJOZEGJOZFGJOZKOZPZAUQBCDHHLMUBUQVCEUJIOZULJOZEULJOZUOKOZP
        URULJOZVFFULJOZKOZPBCDEFGHHLUIEPZUMVEUPVGVKUKVDULJUIEUJISUCVKUNVFUOKUIE
        ULJSUCUFUJFPZVEVHVGVJVLVDURULJUJFEITUCVLUOVIVFKUJFULJSUDUFULGPZVHUSVJVB
        ULGURJTVMVFUTVIVAKULGEJTULGFJTUGUFUEUH $.

      caovdird.2 $e |- ( ph -> A e. S ) $.
      caovdird.3 $e |- ( ph -> B e. S ) $.
      caovdird.4 $e |- ( ph -> C e. K ) $.
      $( Convert an operation distributive law to class notation.  (Contributed
         by Mario Carneiro, 30-Dec-2014.) $)
      caovdird $p |- ( ph -> ( ( A F B ) G C ) = ( ( A G C ) H ( B G C ) ) ) $=
        ( wcel co wceq id caovdirg syl13anc ) AAEHQFHQGLQEFIRGJREGJRFGJRKRSATNO
        PABCDEFGHIJKLMUAUB $.
    $}

    ${
      caovdi.1 $e |- A e. _V $.
      caovdi.2 $e |- B e. _V $.
      caovdi.3 $e |- C e. _V $.
      caovdi.4 $e |- ( x G ( y F z ) ) = ( ( x G y ) F ( x G z ) ) $.
      $( Convert an operation distributive law to class notation.  (Contributed
         by NM, 25-Aug-1995.)  (Revised by Mario Carneiro, 28-Jun-2013.) $)
      caovdi $p |- ( A G ( B F C ) ) = ( ( A G B ) F ( A G C ) ) $=
        ( cvv wcel co wceq wtru w3a tru cv wa a1i caovdig mpan mp3an ) DMNZEMNZ
        FMNZDEFGOHODEHODFHOGOPZIJKQUFUGUHRUISQABCDEFMGHGMATZBTZCTZGOHOUJUKHOUJU
        LHOGOPQUJMNUKMNULMNRUALUBUCUDUE $.
    $}

    ${
      caovd.1 $e |- ( ph -> A e. S ) $.
      caovd.2 $e |- ( ph -> B e. S ) $.
      caovd.3 $e |- ( ph -> C e. S ) $.
      caovd.com $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) ->
        ( x F y ) = ( y F x ) ) $.
      caovd.ass $e |- ( ( ph /\ ( x e. S /\ y e. S /\ z e. S ) ) ->
        ( ( x F y ) F z ) = ( x F ( y F z ) ) ) $.
      $( Rearrange arguments in a commutative, associative operation.
         (Contributed by NM, 26-Aug-1995.)  (Revised by Mario Carneiro,
         30-Dec-2014.) $)
      caov32d $p |- ( ph -> ( ( A F B ) F C ) = ( ( A F C ) F B ) ) $=
        ( co caovcomd oveq2d caovassd 3eqtr4d ) AEFGIOZIOEGFIOZIOEFIOGIOEGIOFIO
        ATUAEIABCFGHIMKLPQABCDEFGHINJKLRABCDEGFHINJLKRS $.

      $( Rearrange arguments in a commutative, associative operation.
         (Contributed by NM, 26-Aug-1995.)  (Revised by Mario Carneiro,
         30-Dec-2014.) $)
      caov12d $p |- ( ph -> ( A F ( B F C ) ) = ( B F ( A F C ) ) ) $=
        ( co caovcomd oveq1d caovassd 3eqtr3d ) AEFIOZGIOFEIOZGIOEFGIOIOFEGIOIO
        ATUAGIABCEFHIMJKPQABCDEFGHINJKLRABCDFEGHINKJLRS $.

      $( Rearrange arguments in a commutative, associative operation.
         (Contributed by NM, 26-Aug-1995.)  (Revised by Mario Carneiro,
         30-Dec-2014.) $)
      caov31d $p |- ( ph -> ( ( A F B ) F C ) = ( ( C F B ) F A ) ) $=
        ( co caovcomd oveq1d caov32d 3eqtr4d ) AEGIOZFIOGEIOZFIOEFIOGIOGFIOEIOA
        TUAFIABCEGHIMJLPQABCDEFGHIJKLMNRABCDGFEHILKJMNRS $.

      $( Rearrange arguments in a commutative, associative operation.
         (Contributed by NM, 26-Aug-1995.)  (Revised by Mario Carneiro,
         30-Dec-2014.) $)
      caov13d $p |- ( ph -> ( A F ( B F C ) ) = ( C F ( B F A ) ) ) $=
        ( co caov31d caovassd 3eqtr3d ) AEFIOGIOGFIOEIOEFGIOIOGFEIOIOABCDEFGHIJ
        KLMNPABCDEFGHINJKLQABCDGFEHINLKJQR $.

      ${
        caovd.4 $e |- ( ph -> D e. S ) $.
        caovd.cl $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) -> ( x F y ) e. S ) $.
        $( Rearrange arguments in a commutative, associative operation.
           (Contributed by NM, 26-Aug-1995.)  (Revised by Mario Carneiro,
           30-Dec-2014.) $)
        caov4d $p |- ( ph -> ( ( A F B ) F ( C F D ) ) =
                             ( ( A F C ) F ( B F D ) ) ) $=
          ( co caovcld caovassd caov12d oveq2d 3eqtr4d ) AEFGHJRZJRZJREGFHJRZJR
          ZJREFJRUDJREGJRUFJRAUEUGEJABCDFGHIJLMPNOUAUBABCDEFUDIJOKLABCGHIIIJQMP
          STABCDEGUFIJOKMABCFHIIIJQLPSTUC $.

        $( Rearrange arguments in a commutative, associative operation.
           (Contributed by NM, 26-Aug-1995.)  (Revised by Mario Carneiro,
           30-Dec-2014.) $)
        caov411d $p |- ( ph -> ( ( A F B ) F ( C F D ) ) =
                               ( ( C F B ) F ( A F D ) ) ) $=
          ( co caovcomd oveq1d caov4d 3eqtr3d ) AFEJRZGHJRZJRFGJRZEHJRZJREFJRZU
          DJRGFJRZUFJRABCDFEGHIJLKMNOPQUAAUCUGUDJABCFEIJNLKSTAUEUHUFJABCFGIJNLM
          STUB $.

        $( Rearrange arguments in a commutative, associative operation.
           (Contributed by NM, 26-Aug-1995.)  (Revised by Mario Carneiro,
           30-Dec-2014.) $)
        caov42d $p |- ( ph -> ( ( A F B ) F ( C F D ) ) =
                              ( ( A F C ) F ( D F B ) ) ) $=
          ( co caov4d caovcomd oveq2d eqtrd ) AEFJRGHJRJREGJRZFHJRZJRUCHFJRZJRA
          BCDEFGHIJKLMNOPQSAUDUEUCJABCFHIJNLPTUAUB $.
      $}
    $}

    ${
      caov.1 $e |- A e. _V $.
      caov.2 $e |- B e. _V $.
      caov.3 $e |- C e. _V $.
      caov.com $e |- ( x F y ) = ( y F x ) $.
      caov.ass $e |- ( ( x F y ) F z ) = ( x F ( y F z ) ) $.
      $( Rearrange arguments in a commutative, associative operation.
         (Contributed by NM, 26-Aug-1995.) $)
      caov32 $p |- ( ( A F B ) F C ) = ( ( A F C ) F B ) $=
        ( co caovcom oveq2i caovass 3eqtr4i ) DEFGMZGMDFEGMZGMDEGMFGMDFGMEGMRSD
        GABEFGIJKNOABCDEFGHIJLPABCDFEGHJILPQ $.

      $( Rearrange arguments in a commutative, associative operation.
         (Contributed by NM, 26-Aug-1995.) $)
      caov12 $p |- ( A F ( B F C ) ) = ( B F ( A F C ) ) $=
        ( co caovcom oveq1i caovass 3eqtr3i ) DEGMZFGMEDGMZFGMDEFGMGMEDFGMGMRSF
        GABDEGHIKNOABCDEFGHIJLPABCEDFGIHJLPQ $.

      $( Rearrange arguments in a commutative, associative operation.
         (Contributed by NM, 26-Aug-1995.) $)
      caov31 $p |- ( ( A F B ) F C ) = ( ( C F B ) F A ) $=
        ( co caovass caov12 eqtri caov32 eqtr3i 3eqtr4i ) DFGMEGMZFDEGMZGMZUAFG
        MFEGMZDGMZTDUCGMUBABCDFEGHJILNABCDFEGHJIKLOPABCDEFGHIJKLQFDGMEGMUDUBABC
        FDEGJHIKLQABCFDEGJHILNRS $.

      $( Rearrange arguments in a commutative, associative operation.
         (Contributed by NM, 26-Aug-1995.) $)
      caov13 $p |- ( A F ( B F C ) ) = ( C F ( B F A ) ) $=
        ( co caov31 caovass 3eqtr3i ) DEGMFGMFEGMDGMDEFGMGMFEDGMGMABCDEFGHIJKLN
        ABCDEFGHIJLOABCFEDGJIHLOP $.

      ${
        caov.4 $e |- D e. _V $.
        $( Rearrange arguments in a commutative, associative operation.
           (Contributed by NM, 26-Aug-1995.) $)
        caov4 $p |- ( ( A F B ) F ( C F D ) ) = ( ( A F C ) F ( B F D ) ) $=
          ( co caov12 oveq2i ovex caovass 3eqtr4i ) DEFGHOZHOZHODFEGHOZHOZHODEH
          OUAHODFHOUCHOUBUDDHABCEFGHJKNLMPQABCDEUAHIJFGHRMSABCDFUCHIKEGHRMST $.

        $( Rearrange arguments in a commutative, associative operation.
           (Contributed by NM, 26-Aug-1995.) $)
        caov411 $p |- ( ( A F B ) F ( C F D ) ) = ( ( C F B ) F ( A F D ) ) $=
          ( co caov31 oveq1i ovex caovass 3eqtr3i ) DEHOZFHOZGHOFEHOZDHOZGHOUAF
          GHOHOUCDGHOHOUBUDGHABCDEFHIJKLMPQABCUAFGHDEHRKNMSABCUCDGHFEHRINMST $.

        $( Rearrange arguments in a commutative, associative operation.
           (Contributed by NM, 26-Aug-1995.) $)
        caov42 $p |- ( ( A F B ) F ( C F D ) ) =
                        ( ( A F C ) F ( D F B ) ) $=
          ( co caov4 caovcom oveq2i eqtri ) DEHOFGHOHODFHOZEGHOZHOTGEHOZHOABCDE
          FGHIJKLMNPUAUBTHABEGHJNLQRS $.
      $}
    $}

    ${
      caovdir.1 $e |- A e. _V $.
      caovdir.2 $e |- B e. _V $.
      caovdir.3 $e |- C e. _V $.
      caovdir.com $e |- ( x G y ) = ( y G x ) $.
      caovdir.distr $e |- ( x G ( y F z ) ) = ( ( x G y ) F ( x G z ) ) $.
      $( Reverse distributive law.  (Contributed by NM, 26-Aug-1995.) $)
      caovdir $p |- ( ( A F B ) G C ) = ( ( A G C ) F ( B G C ) ) $=
        ( co caovdi ovex caovcom oveq12i 3eqtr3i ) FDEGNZHNFDHNZFEHNZGNTFHNDFHN
        ZEFHNZGNABCFDEGHKIJMOABFTHKDEGPLQUAUCUBUDGABFDHKILQABFEHKJLQRS $.

      $d x y z H $.  $d x y z R $.
      caovdl.4 $e |- D e. _V $.
      caovdl.5 $e |- H e. _V $.
      caovdl.ass $e |- ( ( x G y ) G z ) = ( x G ( y G z ) ) $.
      $( Lemma used by real number construction.  (Contributed by NM,
         26-Aug-1995.) $)
      caovdilem $p |- ( ( ( A G C ) F ( B G D ) ) G H ) =
                       ( ( A G ( C G H ) ) F ( B G ( D G H ) ) ) $=
        ( co ovex caovdir caovass oveq12i eqtri ) DFISZEGISZHSJISUEJISZUFJISZHS
        DFJISISZEGJISISZHSABCUEUFJHIDFITEGITQNOUAUGUIUHUJHABCDFJIKMQRUBABCEGJIL
        PQRUBUCUD $.

      caovdl2.6 $e |- R e. _V $.
      caovdl2.com $e |- ( x F y ) = ( y F x ) $.
      caovdl2.ass $e |- ( ( x F y ) F z ) = ( x F ( y F z ) ) $.
      $( Lemma used in real number construction.  (Contributed by NM,
         26-Aug-1995.) $)
      caovlem2 $p |- ( ( ( ( A G C ) F ( B G D ) ) G H ) F
                        ( ( ( A G D ) F ( B G C ) ) G R ) ) =
   ( ( A G ( ( C G H ) F ( D G R ) ) ) F ( B G ( ( C G R ) F ( D G H ) ) ) ) $=
        ( co ovex caov42 caovdilem oveq12i caovdi 3eqtr4i ) DFKJUCZJUCZEGKJUCZJ
        UCZIUCZDGHJUCZJUCZEFHJUCZJUCZIUCZIUCUKUPIUCZURUMIUCZIUCDFJUCEGJUCIUCKJU
        CZDGJUCEFJUCIUCHJUCZIUCDUJUOIUCJUCZEUQULIUCJUCZIUCABCUKUMUPURIDUJJUDEUL
        JUDDUOJUDUAUBEUQJUDUEVBUNVCUSIABCDEFGIJKLMNOPQRSUFABCDEGFIJHLMQOPNTSUFU
        GVDUTVEVAIABCDUJUOIJLFKJUDGHJUDPUHABCEUQULIJMFHJUDGKJUDPUHUGUI $.
    $}

    ${
      $d u w A $.  $d u v w x y B $.  $d u v w x y z F $.  $d w x S $.
      $( Identity element. $)
      caovmo.2 $e |- B e. S $.
      caovmo.dom $e |- dom F = ( S X. S ) $.
      caovmo.3 $e |- -. (/) e. S $.
      caovmo.com $e |- ( x F y ) = ( y F x ) $.
      caovmo.ass $e |- ( ( x F y ) F z ) = ( x F ( y F z ) ) $.
      caovmo.id $e |- ( x e. S -> ( x F B ) = x ) $.
      $( Uniqueness of inverse element in commutative, associative operation
         with identity.  Remark in proof of Proposition 9-2.4 of [Gleason]
         p. 119.  (Contributed by NM, 4-Mar-1996.) $)
      caovmo $p |- E* w ( A F w ) = B $=
        ( vv wcel co wceq wa syl vu cv wmo wi oveq1 eqeq1d mobidv wal oveq2 mo4
        simpr oveq2d simpl oveq1d vex caovass caov12 eqtri elexi caovcom eqtr3d
        3eqtr3g syl6eqel simprd id eqeq12d vtoclga 3eqtr3d ax-gen mpgbir vtoclg
        ndmovrcl moanimv mpbir eleq1 mpbiri simpld ancri moimi ax-mp ) EGPZEDUB
        ZHQZFRZSZDUCZWDDUCZWFWAWGUDUAUBZWBHQZFRZDUCZWGUAEGWHERZWJWDDWLWIWCFWHEW
        BHUEUFUGWKWJWHOUBZHQZFRZSZWBWMRZUDZOUHDWJWODOWQWIWNFWBWMWHHUIUFUJWROWPW
        BFHQZWMFHQZWBWMWPWBWNHQZWSWTWPWNFWBHWJWOUKZULWPWIWMHQZFWMHQXAWTWPWIFWMH
        WJWOUMZUNXCWHWBWMHQHQXAABCWHWBWMHUAUOZDUOZOUOZMUPABCWHWBWMHXEXFXGLMUQUR
        ABFWMHFGIUSXGLUTVBVAWPWBGPZWSWBRZWPWHGPZXHWPWIGPXJXHSWPWIFGXDIVCWHWBGHJ
        KVLTVDAUBZFHQZXKRZXIAWBGXKWBRZXLWSXKWBXKWBFHUEXNVEVFNVGTWPWMGPZWTWMRZWP
        XJXOWPWNGPXJXOSWPWNFGXBIVCWHWMGHJKVLTVDXMXPAWMGXKWMRZXLWTXKWMXKWMFHUEXQ
        VEVFNVGTVHVIVJVKWAWDDVMVNWDWEDWDWAWDWAXHWDWCGPZWAXHSWDXRFGPIWCFGVOVPEWB
        GHJKVLTVQVRVSVT $.
    $}
  $}

  ${
    $d n u v w x y z B $.  $d n u v w x y z O $.  $d n u v w x y z ph $.
    $d u v w y z N $.  $d n u v w x y z .+ $.  $d u v w y z X $.
    $d u v w y ps $.
    grprinvlem.c $e |- ( ( ph /\ x e. B /\ y e. B ) -> ( x .+ y ) e. B ) $.
    grprinvlem.o $e |- ( ph -> O e. B ) $.
    grprinvlem.i $e |- ( ( ph /\ x e. B ) -> ( O .+ x ) = x ) $.
    grprinvlem.a $e |- ( ( ph /\ ( x e. B /\ y e. B /\ z e. B ) )
          -> ( ( x .+ y ) .+ z ) = ( x .+ ( y .+ z ) ) ) $.
    grprinvlem.n $e |- ( ( ph /\ x e. B ) -> E. y e. B ( y .+ x ) = O ) $.
    ${
      grprinvlem.x $e |- ( ( ph /\ ps ) -> X e. B ) $.
      grprinvlem.e $e |- ( ( ph /\ ps ) -> ( X .+ X ) = X ) $.
      $( Lemma for ~ grprinvd .  (Contributed by NM, 9-Aug-2013.) $)
      grprinvlem $p |- ( ( ph /\ ps ) -> X = O ) $=
        ( cv co wceq wcel vu vv vw wa wrex wral ralrimiva oveq2 rexbidv cbvralv
        eqeq1d sylib rspccva syldan oveq2d adantr simprr oveq1d simpll caovassg
        sylan w3a simprl caovassd id eqeq12d rspcv sylc 3eqtr3d rexlimddv ) ABU
        DZDQZIGRZHSZIHSDFABIFTZVNDFUEZOAVLEQZGRZHSZDFUEZEFUFZVOVPAVLCQZGRZHSZDF
        UEZCFUFWAAWECFNUGWEVTCEFWBVQSZWDVSDFWFWCVRHWBVQVLGUHUKUIUJULVTVPEIFVQIS
        ZVSVNDFWGVRVMHVQIVLGUHUKUIUMVAUNVKVLFTZVNUDZUDZVLIIGRZGRZVMIHVKWLVMSWIV
        KWKIVLGPUOUPWJVMIGRHIGRZWLIWJVMHIGVKWHVNUQZURWJUAUBUCVLIIFGWJAUAQZFTUBQ
        ZFTUCQZFTVBWOWPGRWQGRWOWPWQGRGRSABWIUSACDEWOWPWQFGMUTVAVKWHVNVCVKVOWIOU
        PZWRVDVKWMISZWIVKVOHVLGRZVLSZDFUFZWSOAXBBAHWBGRZWBSZCFUFXBAXDCFLUGXDXAC
        DFWBVLSZXCWTWBVLWBVLHGUHXEVEVFUJULUPXAWSDIFVLISZWTWMVLIVLIHGUHXFVEVFVGV
        HUPVIWNVIVJ $.
    $}

    ${
      grprinvd.x $e |- ( ( ph /\ ps ) -> X e. B ) $.
      grprinvd.n $e |- ( ( ph /\ ps ) -> N e. B ) $.
      grprinvd.e $e |- ( ( ph /\ ps ) -> ( N .+ X ) = O ) $.
      $( Deduce right inverse from left inverse and left identity in an
         associative structure (such as a group).  (Contributed by NM,
         10-Aug-2013.)  (Proof shortened by Mario Carneiro, 6-Jan-2015.) $)
      grprinvd $p |- ( ( ph /\ ps ) -> ( X .+ N ) = O ) $=
        ( co wcel vu vv vw wa cv caovclg adantlr caovcld wceq caovassg caovassd
        3expb oveq1d wral ralrimiva oveq2 id eqeq12d cbvralv sylib adantr rspcv
        w3a sylc 3eqtr3d oveq2d eqtrd grprinvlem ) ABCDEFGIJHGSZKLMNOABUDZUAUBJ
        HFFFGAUAUEZFTZUBUEZFTZUDVKVMGSZFTBACDVKVMFFFGACUEZFTDUEZFTVPVQGSFTKULUF
        UGPQUHZVJVIVIGSJHVIGSZGSVIVJUAUBUCJHVIFGAVLVNUCUEZFTVCVOVTGSVKVMVTGSGSU
        IBACDEVKVMVTFGNUJUGZPQVRUKVJVSHJGVJHJGSZHGSIHGSZVSHVJWBIHGRUMVJUAUBUCHJ
        HFGWAQPQUKVJHFTIVQGSZVQUIZDFUNZWCHUIZQAWFBAIVPGSZVPUIZCFUNWFAWICFMUOWIW
        ECDFVPVQUIZWHWDVPVQVPVQIGUPWJUQURUSUTVAWEWGDHFVQHUIZWDWCVQHVQHIGUPWKUQU
        RVBVDVEVFVGVH $.
    $}

    $( Deduce right identity from left inverse and left identity in an
       associative structure (such as a group).  (Contributed by NM,
       10-Aug-2013.)  (Proof shortened by Mario Carneiro, 6-Jan-2015.) $)
    grpridd $p |- ( ( ph /\ x e. B ) -> ( x .+ O ) = x ) $=
      ( vn vu vv cv wcel wa co wceq vw wrex oveq1 eqeq1d cbvrexv sylib caovassg
      w3a adantlr simprl simprrl caovassd simprrr oveq1d oveq2d 3eqtr3d anassrs
      grprinvd rexlimddv eqtr3d ) ABPZEQZRZGVAFSZVAGFSZVAVCMPZVAFSZGTZVDVETZMEV
      CCPZVAFSZGTZCEUBVHMEUBLVLVHCMEVJVFTVKVGGVJVFVAFUCUDUEUFAVBVFEQZVHRZVIAVBV
      NRZRZVAVFFSZVAFSVAVGFSVDVEVPNOUAVAVFVAEFANPZEQOPZEQUAPZEQUHVRVSFSVTFSVRVS
      VTFSFSTVOABCDVRVSVTEFKUGUIAVBVNUJZAVBVMVHUKZWAULVPVQGVAFAVOBCDEFVFGVAHIJK
      LWAWBAVBVMVHUMZURUNVPVGGVAFWCUOUPUQUSJUT $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        ""Maps to"" notation
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y z $.  $d X x y z $.  $d Y x y z $.  $d C z $.
    mpt2ndm0.f $e |- F = ( x e. X , y e. Y |-> C ) $.
    $( The value of an operation given by a maps-to rule is the empty set if
       the arguments are not contained in the base sets of the rule.
       (Contributed by Alexander van der Vekens, 12-Oct-2017.) $)
    mpt2ndm0 $p |- ( -. ( V e. X /\ W e. Y ) -> ( V F W ) = (/) ) $=
      ( vz cdm cxp wss wcel wa wn co c0 wceq cv cmpt2 df-mpt2 dmoprabss eqsstri
      coprab eqtri dmeqi nssdmovg mpan ) DKZGHLZMEGNFHNOPEFDQRSUJATGNBTHNOJTCSZ
      OABJUEZKUKDUMDABGHCUAUMIABJGHCUBUFUGULABJGHUCUDEFGHDUHUI $.
  $}

  ${
    $d A x y z $.  $d B x y z $.  $d C z $.
    elmpt2cl.f $e |- F = ( x e. A , y e. B |-> C ) $.
    $( If a two-parameter class is not empty, constrain the implicit pair.
       (Contributed by Stefan O'Rear, 7-Mar-2015.) $)
    elmpt2cl $p |- ( X e. ( S F T ) -> ( S e. A /\ T e. B ) ) $=
      ( vz co wcel cop cxp wa cdm cv wceq coprab cmpt2 df-mpt2 dmoprabss elfvdm
      eqtri dmeqi eqsstri cfv df-ov eleq2s sseldi opelxp sylib ) IFGHLZMZFGNZCD
      OZMFCMGDMPUOHQZUQUPURARCMBRDMPKRESZPABKTZQUQHUTHABCDEUAUTJABKCDEUBUEUFUSA
      BKCDUCUGUPURMIUPHUHUNIUPHUDFGHUIUJUKFGCDULUM $.

    $( If a two-parameter class is not empty, the first argument is in its
       nominal domain.  (Contributed by FL, 15-Oct-2012.)  (Revised by Stefan
       O'Rear, 7-Mar-2015.) $)
    elmpt2cl1 $p |- ( X e. ( S F T ) -> S e. A ) $=
      ( co wcel elmpt2cl simpld ) IFGHKLFCLGDLABCDEFGHIJMN $.

    $( If a two-parameter class is not empty, the second argument is in its
       nominal domain.  (Contributed by FL, 15-Oct-2012.)  (Revised by Stefan
       O'Rear, 7-Mar-2015.) $)
    elmpt2cl2 $p |- ( X e. ( S F T ) -> T e. B ) $=
      ( co wcel elmpt2cl simprd ) IFGHKLFCLGDLABCDEFGHIJMN $.
  $}

  ${
    $d A a b $.  $d B a b $.  $d E a b $.  $d F a b $.  $d X a b $.
    $d Y a b $.  $d V a b $.
    elovmpt2.d $e |- D = ( a e. A , b e. B |-> C ) $.
    elovmpt2.c $e |- C e. _V $.
    elovmpt2.e $e |- ( ( a = X /\ b = Y ) -> C = E ) $.
    $( Utility lemma for two-parameter classes.

       _EDITORIAL_: can simplify ~ isghm , ~ islmhm .  (Contributed by Stefan
       O'Rear, 21-Jan-2015.) $)
    elovmpt2 $p |- ( F e. ( X D Y ) <-> ( X e. A /\ Y e. B /\ F e. E ) ) $=
      ( co wcel wa cvv wceq wal cv w3a elmpt2cl gen2 eleq1d spc2gv mpi ovmpt2ga
      mpd3an3 eleq2d biadan2 df-3an bitr4i ) FGHDNZOZGAOZHBOZPZFEOZPUOUPURUAUNU
      QURIJABCGHDFKUBUQUMEFUOUPEQOZUMERUQCQOZJSISUSUTIJLUCUTUSIJGHABITGRJTHRPCE
      QMUDUEUFIJGHABCEDQMKUGUHUIUJUOUPURUKUL $.
  $}

  ${
    $d M x y z $.  $d X x y z $.  $d Y x y z $.  $d Z z $.
    elovmpt2rab.o $e |- O = ( x e. _V , y e. _V |-> { z e. M | ph } ) $.
    elovmpt2rab.v $e |- ( ( X e. _V /\ Y e. _V ) -> M e. _V ) $.
    $( Implications for the value of an operation, defined by the maps-to
       notation with a class abstraction as a result, having an element.
       (Contributed by Alexander van der Vekens, 15-Jul-2018.) $)
    elovmpt2rab $p |- ( Z e. ( X O Y ) -> ( X e. _V /\ Y e. _V /\ Z e. M ) ) $=
      ( cvv wcel wa crab wsbc wceq cv nfcv nfel1 w3a elmpt2cl cmpt2 a1i sbceq1a
      co wb sylan9bbr adantl rabbidv eqidd simpl simpr rabexg syl nfsbc1v nfrab
      nfan nfsbc ovmpt2dxf eleq2d elrabi df-3an simplbi2com com12 sylbid mpcom
      wi ) GLMZHLMZNZIGHFUFZMZVIVJIEMZUAZBCLLADEOZGHFIJUBVKVMIACHPZBGPZDEOZMZVO
      VKVLVSIVKBCGHLLVPVSFLLFBCLLVPUCQVKJUDVKBRGQZCRHQZNZNAVRDEWCAVRUGVKWBAVQWA
      VRACHUEVQBGUEUHUIUJVKWANLUKVIVJULVIVJUMVKELMVSLMKVRDELUNUOVIVJBBGLBGSTBHL
      BHSZTURVIVJCCGLCGSZTCHLCHSTURWEWDVRBDEVQBGUPBESUQVRCDEVQCBGWEACHUPUSCESUQ
      UTVAVTVKVOVTVNVKVOVHVRDIEVBVOVKVNVIVJVNVCVDUOVEVFVG $.
  $}

  ${
    $d M x y z $.  $d X x y z $.  $d Y x y z $.  $d Z z $.  $d m z $.
    elovmpt2rab1.o $e |- O = ( x e. _V , y e. _V
                              |-> { z e. [_ x / m ]_ M | ph } ) $.
    elovmpt2rab1.v $e |- ( ( X e. _V /\ Y e. _V ) -> [_ X / m ]_ M e. _V ) $.
    $( Implications for the value of an operation, defined by the maps-to
       notation with a class abstraction as a result, having an element.  Here,
       the base set of the class abstraction depends on the first operand.
       (Contributed by Alexander van der Vekens, 15-Jul-2018.) $)
    elovmpt2rab1 $p |- ( Z e. ( X O Y )
                         -> ( X e. _V /\ Y e. _V /\ Z e. [_ X / m ]_ M ) ) $=
      ( cvv wcel wa csb cv wceq nfcv nfel1 co w3a crab elmpt2cl wsbc a1i csbeq1
      cmpt2 ad2antrl wb sylan9bbr adantl rabeqbidv eqidd simpl simpr rabexg syl
      sbceq1a nfan nfcsb nfrab nfsbc ovmpt2dxf eleq2d elrabi df-3an simplbi2com
      nfsbc1v wi com12 sylbid mpcom ) HMNZIMNZOZJHIGUAZNZVNVOJEHFPZNZUBZBCMMADE
      BQZFPZUCZHIGJKUDVPVRJACIUEZBHUEZDVSUCZNZWAVPVQWGJVPBCHIMMWDWGGMMGBCMMWDUH
      RVPKUFVPWBHRZCQIRZOZOAWFDWCVSWIWCVSRVPWJEWBHFUGUIWKAWFUJVPWJAWEWIWFACIUSW
      EBHUSUKULUMVPWIOMUNVNVOUOVNVOUPVPVSMNWGMNLWFDVSMUQURVNVOBBHMBHSZTBIMBISZT
      UTVNVOCCHMCHSZTCIMCISTUTWNWMWFBDVSWEBHVIBEHFWLBFSVAVBWFCDVSWECBHWNACIVIVC
      CEHFWNCFSVAVBVDVEWHVPWAWHVTVPWAVJWFDJVSVFWAVPVTVNVOVTVGVHURVKVLVM $.
  $}

  ${
    $d x w A $.  $d w B $.  $d w F $.
    relmptopab.1 $e |- F = ( x e. A |-> { <. y , z >. | ph } ) $.
    $( Any function to sets of ordered pairs produces a relation on function
       value unconditionally.  (Contributed by Mario Carneiro, 7-Aug-2014.)
       (Proof shortened by Mario Carneiro, 24-Dec-2016.) $)
    relmptopab $p |- Rel ( F ` B ) $=
      ( cfv wrel cvv cxp wss copab fvmptss cv wcel relopab df-rel mpbi a1i mprg
      mpbir ) FGIZJUDKKLZMZACDNZUEMZUFBEBEUGUEFGHOUHBPEQUGJUHACDRUGSTUAUBUDSUC
      $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d y C $.  $d x D $.  $d x y ph $.
    f1od.1 $e |- F = ( x e. A |-> C ) $.
    ${
      f1od.2 $e |- ( ( ph /\ x e. A ) -> C e. W ) $.
      f1od.3 $e |- ( ( ph /\ y e. B ) -> D e. X ) $.
      f1od.4 $e |- ( ph -> ( ( x e. A /\ y = C ) <-> ( y e. B /\ x = D ) ) ) $.
      $( Describe an implicit one-to-one onto function.  (Contributed by Mario
         Carneiro, 30-Apr-2015.) $)
      f1ocnvd $p |- ( ph ->
        ( F : A -1-1-onto-> B /\ `' F = ( y e. B |-> D ) ) ) $=
        ( ccnv cmpt wceq wfn wcel copab wf1o wral ralrimiva fnmpt eqid opabbidv
        cv wa df-mpt eqtri cnveqi cnvopab 3eqtr4g fneq1d mpbird dff1o4 sylanbrc
        syl jca ) ADEHUAZHOZCEGPZQAHDRZVAERZUTAFISZBDUBVCAVEBDLUCBDFHIKUDURAVDV
        BERZAGJSZCEUBVFAVGCEMUCCEGVBJVBUEUDURAEVAVBABUGZDSCUGZFQUHZCBTZVIESVHGQ
        UHZCBTVAVBAVJVLCBNUFVAVJBCTZOVKHVMHBDFPVMKBCDFUIUJUKVJBCULUJCBEGUIUMZUN
        UODEHUPUQVNUS $.

      $( Describe an implicit one-to-one onto function.  (Contributed by Mario
         Carneiro, 12-May-2014.) $)
      f1od $p |- ( ph -> F : A -1-1-onto-> B ) $=
        ( wf1o ccnv cmpt wceq f1ocnvd simpld ) ADEHOHPCEGQRABCDEFGHIJKLMNST $.
    $}

    f1o2d.2 $e |- ( ( ph /\ x e. A ) -> C e. B ) $.
    f1o2d.3 $e |- ( ( ph /\ y e. B ) -> D e. A ) $.
    f1o2d.4 $e |- ( ( ph /\ ( x e. A /\ y e. B ) ) ->
                    ( x = D <-> y = C ) ) $.
    $( Describe an implicit one-to-one onto function.  (Contributed by Mario
       Carneiro, 30-Apr-2015.) $)
    f1ocnv2d $p |- ( ph ->
      ( F : A -1-1-onto-> B /\ `' F = ( y e. B |-> D ) ) ) $=
      ( cv wcel wceq wa wi eleq1a syl impr biimpar exp42 com34 imp32 jcai com23
      biimpa impbida f1ocnvd ) ABCDEFGHEDIJKABMZDNZCMZFOZPZULENZUJGOZPZAUNPUOUP
      AUKUMUOAUKPFENUMUOQJFEULRSTAUKUMUOUPQAUKUOUMUPAUKUOUMUPAUKUOPPZUPUMLUAUBU
      CUDUEAUQPUKUMAUOUPUKAUOPGDNUPUKQKGDUJRSTAUOUPUKUMQAUOUKUPUMAUKUOUPUMQAUKU
      OUPUMURUPUMLUGUBUFUCUDUEUHUI $.

    $( Describe an implicit one-to-one onto function.  (Contributed by Mario
       Carneiro, 12-May-2014.) $)
    f1o2d $p |- ( ph -> F : A -1-1-onto-> B ) $=
      ( wf1o ccnv cmpt wceq f1ocnv2d simpld ) ADEHMHNCEGOPABCDEFGHIJKLQR $.
  $}

  ${
    $d a b A $.  $d a b B $.  $d a b F $.  $d a b ph $.
    f1opw2.1 $e |- ( ph -> F : A -1-1-onto-> B ) $.
    f1opw2.2 $e |- ( ph -> ( `' F "" a ) e. _V ) $.
    f1opw2.3 $e |- ( ph -> ( F "" b ) e. _V ) $.
    $( A one-to-one mapping induces a one-to-one mapping on power sets.  This
       version of ~ f1opw avoids the Axiom of Replacement.  (Contributed by
       Mario Carneiro, 26-Jun-2015.) $)
    f1opw2 $p |- ( ph ->
        ( b e. ~P A |-> ( F "" b ) ) : ~P A -1-1-onto-> ~P B ) $=
      ( cpw cv cima wcel wss crn imassrn wceq syl cvv adantr ccnv cmpt eqid wfo
      wf1o f1ofo forn syl5sseq wb elpwg mpbird cdm dfdm4 f1odm syl5eqr wa elpwi
      adantl foimacnv syl2an eqcomd imaeq2 eqeq2d syl5ibrcom wf1 f1of1 f1imacnv
      impbid f1o2d ) AFEBJZCJZDFKZLZDUAZEKZLZFVJVMUBZVQUCAVMVKMZVLVJMZAVRVMCNZA
      DOZVMCDVLPABCDUDZWACQABCDUEZWBGBCDUFRZBCDUGRUHAVMSMVRVTUIIVMCSUJRUKTAVPVJ
      MZVOVKMZAWEVPBNZAVNOZVPBVNVOPAWHDULZBDUMAWCWIBQGBCDUNRUOUHAVPSMWEWGUIHVPB
      SUJRUKTAVSWFUPZUPZVLVPQZVOVMQZWKWMWLVODVPLZQWKWNVOAWBVOCNZWNVOQWJWDWFWOVS
      VOCUQURBCVODUSUTVAWLVMWNVOVLVPDVBVCVDWKWLWMVLVNVMLZQWKWPVLABCDVEZVLBNZWPV
      LQWJAWCWQGBCDVFRVSWRWFVLBUQTBCVLDVGUTVAWMVPWPVLVOVMVNVBVCVDVHVI $.
  $}

  ${
    $d a b A $.  $d a b B $.  $d a b F $.
    $( A one-to-one mapping induces a one-to-one mapping on power sets.
       (Contributed by Stefan O'Rear, 18-Nov-2014.)  (Revised by Mario
       Carneiro, 26-Jun-2015.) $)
    f1opw $p |- ( F : A -1-1-onto-> B -> ( b e. ~P A |-> ( F "" b ) ) :
          ~P A -1-1-onto-> ~P B ) $=
      ( va wf1o id ccnv wfun cv cima cvv wfo dff1o3 simprbi vex funimaex f1ofun
      wcel syl f1opw2 ) ABCFZABCEDUBGUBCHZIZUCEJZKLSUBABCMUDABCNOUCUEEPQTUBCICD
      JZKLSABCRCUFDPQTUA $.
  $}

  ${
    $d k x y A $.  $d x y B $.  $d k x ph $.  $d k x y W $.  $d k x y Z $.
    suppss2OLD.n $e |- ( ( ph /\ k e. ( A \ W ) ) -> B = Z ) $.
    $( Show that the support of a function is contained in a set.  (Contributed
       by Mario Carneiro, 19-Dec-2014.)  (Revised by Mario Carneiro,
       22-Mar-2015.)  Obsolete version of ~ suppss2 as of 28-May-2019.
       (New usage is discouraged.)  (Proof modification is discouraged.) $)
    suppss2OLD $p |- ( ph -> ( `' ( k e. A |-> B ) "" ( _V \ { Z } ) ) C_ W ) $=
      ( cmpt ccnv cvv csn cdif cima wcel crab eqid mptpreima cv wne wa eldifsni
      wn wceq eldif sylan2br expr necon1ad syl5 3impia rabssdv syl5eqss ) ADBCH
      ZIJFKLZMCUMNZDBOEDBCUMULULPQAUNDBEADRZBNZUNUOENZUNCFSAUPTZUQCJFUAURUQCFAU
      PUQUBZCFUCZUPUSTAUOBELNUTUOBEUDGUEUFUGUHUIUJUK $.
  $}

  ${
    $d ph x $.  $d Y x $.  $d Z x $.
    suppssfvOLD.a $e |- ( ph
        -> ( `' ( x e. D |-> A ) "" ( _V \ { Y } ) ) C_ L ) $.
    suppssfvOLD.f $e |- ( ph -> ( F ` Y ) = Z ) $.
    suppssfvOLD.v $e |- ( ( ph /\ x e. D ) -> A e. V ) $.
    $( Formula building theorem for support restriction, on a function which
       preserves zero.  (Contributed by Stefan O'Rear, 9-Mar-2015.)  Obsolete
       version of ~ suppssfv as of 28-May-2019.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    suppssfvOLD $p |- ( ph -> ( `' ( x e. D |-> ( F ` A ) ) ""
            ( _V \ { Z } ) ) C_ L ) $=
      ( cfv cmpt ccnv cvv csn cdif wcel wceq cima crab wne cv eldifsni elex syl
      wa adantr wi fveq2 eqeq1d syl5ibrcom necon3d imp eldifsn sylanbrc ex syl5
      ss2rabdv eqid mptpreima 3sstr4g sstrd ) ABDCEMZNZOPIQRZUAZBDCNZOPHQRZUAZF
      AVEVGSZBDUBCVJSZBDUBVHVKAVLVMBDVLVEIUCZABUDDSZUHZVMVEPIUEVPVNVMVPVNUHCPSZ
      CHUCZVMVPVQVNVPCGSVQLCGUFUGUIVPVNVRAVNVRUJVOACHVEIAVEITCHTZHEMZITKVSVEVTI
      CHEUKULUMUNUIUOCPHUPUQURUSUTBDVEVGVFVFVAVBBDCVJVIVIVAVBVCJVD $.
  $}

  ${
    $d ph v $.  $d ph x $.  $d B v $.  $d O v $.  $d R v $.  $d Y v $.
    $d Y x $.  $d Z v $.  $d Z x $.
    suppssov1OLD.s $e |- ( ph ->
        ( `' ( x e. D |-> A ) "" ( _V \ { Y } ) ) C_ L ) $.
    suppssov1OLD.o $e |- ( ( ph /\ v e. R ) -> ( Y O v ) = Z ) $.
    suppssov1OLD.a $e |- ( ( ph /\ x e. D ) -> A e. V ) $.
    suppssov1OLD.b $e |- ( ( ph /\ x e. D ) -> B e. R ) $.
    $( Formula building theorem for support restrictions: operator with left
       annihilator.  (Contributed by Stefan O'Rear, 9-Mar-2015.)  Obsolete
       version of ~ suppssov1 as of 28-May-2019.
       (New usage is discouraged.) $)
    suppssov1OLD $p |- ( ph -> ( `' ( x e. D |-> ( A O B ) ) ""
            ( _V \ { Z } ) ) C_ L ) $=
      ( co cvv wcel wceq cmpt ccnv csn cdif cima crab cv wa wne elex syl adantr
      eldifsni wral ralrimiva oveq2 eqeq1d rspcva syl2anc oveq1 syl5ibrcom syl5
      necon3d imp eldifsn sylanbrc ex ss2rabdv eqid mptpreima 3sstr4g sstrd ) A
      BFDEIQZUAZUBRLUCUDZUEZBFDUAZUBRKUCUDZUEZHAVMVOSZBFUFDVRSZBFUFVPVSAVTWABFA
      BUGFSZUHZVTWAWCVTUHDRSZDKUIZWAWCWDVTWCDJSWDODJUJUKULWCVTWEVTVMLUIWCWEVMRL
      UMWCDKVMLWCVMLTDKTZKEIQZLTZWCEGSKCUGZIQZLTZCGUNZWHPAWLWBAWKCGNUOULWKWHCEG
      WIETWJWGLWIEKIUPUQURUSWFVMWGLDKEIUTUQVAVCVBVDDRKVEVFVGVHBFVMVOVNVNVIVJBFD
      VRVQVQVIVJVKMVL $.
  $}

  ${
    $d x y $.
    elovmpt3imp.o $e |- O = ( x e. _V , y e. _V |-> ( z e. M |-> B ) ) $.
    $( If the value of a function which is the result of an operation defined
       by the maps-to notation is not empty, the operands must be sets.
       Remark: a function which is the result of an operation can be regared as
       operation with 3 operands - therefore the abbreviation ""mpt3"" is used in
       the label.  (Contributed by AV, 16-May-2019.) $)
    elovmpt3imp $p |- ( A e. ( ( X O Y ) ` Z ) -> ( X e. _V /\ Y e. _V ) ) $=
      ( co cfv wcel c0 wne cvv wa ne0i wceq wi ax-1 wn cmpt mpt2ndm0 0fv syl6eq
      fveq1 eqneqall 3syl pm2.61i syl ) DJHIGLZMZNUNOPZHQNIQNRZUNDSUPUOUPUAZUPU
      OUBUPUCUMOTZUNOTUQABCFEUDGHIQQKUEURUNJOMOJUMOUHJUFUGUPUNOUIUJUKUL $.
  $}

  ${
    $d K x y z $.  $d L a x y $.  $d N a $.  $d V x y $.  $d W x y $.
    $d U x y $.  $d X a x y z $.  $d Y a x y z $.
    ovmpt3rab1.o $e |- O = ( x e. _V , y e. _V
                             |-> ( z e. M |-> { a e. N | ph } ) ) $.
    ovmpt3rab1.m $e |- ( ( x = X /\ y = Y ) -> M = K ) $.
    ovmpt3rab1.n $e |- ( ( x = X /\ y = Y ) -> N = L ) $.
    ${
      ovmpt3rab1.p $e |- ( ( x = X /\ y = Y ) -> ( ph <-> ps ) ) $.
      ovmpt3rab1.x $e |- F/ x ps $.
      ovmpt3rab1.y $e |- F/ y ps $.
      $( The value of an operation defined by the maps-to notation with a
         function into a class abstraction as a result.  The domain of the
         function and the base set of the class abstraction may depend on the
         operands, using implicit substitution.  (Contributed by AV,
         16-Jul-2018.)  (Revised by AV, 16-May-2019.) $)
      ovmpt3rab1 $p |- ( ( X e. V /\ Y e. W /\ K e. U )
                         -> ( X O Y ) = ( z e. K |-> { a e. L | ps } ) ) $=
        ( wcel w3a cvv crab cmpt cmpt2 wceq a1i cv wa rabeqbidv mpteq12dv eqidd
        adantl elex 3ad2ant1 3ad2ant2 mptexg 3ad2ant3 nfv nfrab nfmpt ovmpt2dxf
        nfcv ) NLUCZOMUCZGFUCZUDZCDNOUEUEEIAPJUFZUGZEGBPHUFZUGZKUEUEKCDUEUEVLUH
        UIVJQUJCUKNUIZDUKOUIULZVLVNUIVJVPEIVKGVMRVPABPJHSTUMUNUPVJVOULUEUOVGVHN
        UEUCVINLUQURVHVGOUEUCVIOMUQUSVIVGVNUEUCVHEGVMFUTVAVJCVBVJDVBDNVFCOVFCEG
        VMCGVFBCPHUACHVFVCVDDEGVMDGVFBDPHUBDHVFVCVDVE $.
    $}

    $d L z $.  $d T z $.  $d U z $.  $d V z $.  $d W z $.
    $( If the value of a function which is the result of an operation defined
       by the maps-to notation is not empty, the operands and the argument of
       the function must be sets.  (Contributed by AV, 16-May-2019.) $)
    ovmpt3rabdm $p |- ( ( ( X e. V /\ Y e. W /\ K e. U ) /\ L e. T )
                        -> dom ( X O Y ) = K ) $=
      ( wcel w3a wa co wsbc crab cmpt wceq sbceq1a sylan9bbr nfsbc1v nfcv nfsbc
      cdm ovmpt3rab1 adantr dmeqd cvv wral rabexg adantl ralrimivw dmmptg eqtrd
      cv syl ) NLTOMTGFTUAZHETZUBZNOKUCZUMDGACOUDZBNUDZPHUEZUFZUMZGVHVIVMVFVIVM
      UGVGAVKBCDFGHIJKLMNOPQRSCVDOUGAVJBVDNUGVKACOUHVJBNUHUIVJBNUJVJCBNCNUKACOU
      JULUNUOUPVHVLUQTZDGURVNGUGVHVODGVGVOVFVKPHEUSUTVADGVLUQVBVEVC $.

    $d A a $.  $d Z a z $.
    $( Implications for the value of an operation defined by the maps-to
       notation with a function into a class abstraction as a result having an
       element.  The domain of the function and the base set of the class
       abstraction may depend on the operands, using implicit substitution.
       (Contributed by AV, 16-Jul-2018.)  (Revised by AV, 16-May-2019.) $)
    elovmpt3rab1 $p |- ( ( K e. U /\ L e. T ) -> ( A e. ( ( X O Y ) ` Z )
                   -> ( ( X e. _V /\ Y e. _V ) /\ ( Z e. K /\ A e. L ) ) ) ) $=
      ( wcel co cfv wa cvv crab elovmpt3imp simprl cdm elfvdm wceq simpl adantr
      wi simplr simprr ovmpt3rabdm syl31anc eleq2d biimpcd imp wsbc adantl cmpt
      w3a anim2i df-3an sylibr ad2antll cv sbceq1a sylan9bbr nfsbc1v nfcv nfsbc
      ovmpt3rab1 fveq1d rabexg nfrab rabbidv eqid fvmptf sylan2 eqtr2d eleqtrrd
      syl elrabi jca mpancom exp31 mpcom exp32 mpd com12 ) EOMNLUAZUBZTZHGTZIFT
      ZUCZMUDTZNUDTZUCZOHTZEITZUCZUCZWPXBWSXFUMBCDEAPKUEJLMNOQUFWPXBWSXFWPXBWSU
      CZUCXBXEWPXBWSUGWPXGXEOWNUHZTZWPXGXEUMEOWNUIXIWPXGXEXCXIWPUCZXGUCZXEXJXGX
      CXIXGXCUMWPXGXIXCXGXHHOXGWTXAWQWRXHHUJXBWTWSWTXAUKULWTXAWSUNXBWQWRUGXBWQW
      RUOABCDFGHIJKLUDUDMNPQRSUPUQURUSULUTXCXKUCZXCXDXCXKUKXLEACNVAZBMVAZDOVAZP
      IUEZTXDXLEWOXPXKWPXCXIWPXGUNVBXLWOODHXNPIUEZVCZUBZXPXLWTXAWQVDZWOXSUJXGXT
      XCXJXGXBWQUCXTWSWQXBWQWRUKVEWTXAWQVFVGVHXTOWNXRAXNBCDGHIJKLUDUDMNPQRSCVIN
      UJAXMBVIMUJXNACNVJXMBMVJVKXMBMVLXMCBMCMVMACNVLVNVOVPWEXKXCXPUDTZXSXPUJWSY
      AXJXBWRYAWQXOPIFVQVBVHDOXQXPHXRUDDOVMXODPIXNDOVLDIVMVRDVIOUJXNXOPIXNDOVJV
      SXRVTWAWBWCWDXOPEIWFWEWGWHWIWJUTWGWKWLWM $.
  $}

  ${
    $d A a $.  $d M a x y z $.  $d N a x y z $.  $d T z $.  $d U x y z $.
    $d X a x y z $.  $d Y a x y z $.  $d Z a z $.
    elovmpt3rab.o $e |- O = ( x e. _V , y e. _V
                              |-> ( z e. M |-> { a e. N | ph } ) ) $.
    $( Implications for the value of an operation defined by the maps-to
       notation with a class abstration as a result having an element.
       (Contributed by AV, 17-Jul-2018.)  (Revised by AV, 16-May-2019.) $)
    elovmpt3rab $p |- ( ( M e. U /\ N e. T ) -> ( A e. ( ( X O Y ) ` Z )
                   -> ( ( X e. _V /\ Y e. _V ) /\ ( Z e. M /\ A e. N ) ) ) ) $=
      ( cv wceq wa eqidd elovmpt3rab1 ) ABCDEFGHIHIJKLMNOBPKQCPLQRZHSUAIST $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                             Function operation
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c oF $.
  $c oR $.

  $( Extend class notation to include mapping of an operation to a function
     operation. $)
  cof $a class oF R $.

  $( Extend class notation to include mapping of a binary relation to a
     function relation. $)
  cofr $a class oR R $.

  ${
    $d f g x R $.
    $( Define the function operation map.  The definition is designed so that
       if ` R ` is a binary operation, then ` oF R ` is the analogous operation
       on functions which corresponds to applying ` R ` pointwise to the values
       of the functions.  (Contributed by Mario Carneiro, 20-Jul-2014.) $)
    df-of $a |- oF R = ( f e. _V , g e. _V |->
     ( x e. ( dom f i^i dom g ) |-> ( ( f ` x ) R ( g ` x ) ) ) ) $.

    $( Define the function relation map.  The definition is designed so that if
       ` R ` is a binary relation, then ` oF R ` is the analogous relation on
       functions which is true when each element of the left function relates
       to the corresponding element of the right function.  (Contributed by
       Mario Carneiro, 28-Jul-2014.) $)
    df-ofr $a |- oR R = { <. f , g >. |
      A. x e. ( dom f i^i dom g ) ( f ` x ) R ( g ` x ) } $.
  $}

  ${
    $d f g x y R $.  $d f g x y S $.
    $( Equality theorem for function operation.  (Contributed by Mario
       Carneiro, 20-Jul-2014.) $)
    ofeq $p |- ( R = S -> oF R = oF S ) $=
      ( vf vg vx wceq cvv cv cdm cin cfv co cmpt cmpt2 cof wcel w3a simp1 oveqd
      df-of mpteq2dv mpt2eq3dva 3eqtr4g ) ABFZCDGGECHZIDHZIJZEHZUEKZUHUFKZALZMZ
      NCDGGEUGUIUJBLZMZNAOBOUDCDGGULUNUDUEGPZUFGPZQZEUGUKUMUQABUIUJUDUOUPRSUAUB
      EACDTEBCDTUC $.

    $( Equality theorem for function relation.  (Contributed by Mario Carneiro,
       28-Jul-2014.) $)
    ofreq $p |- ( R = S -> oR R = oR S ) $=
      ( vx vf vg wceq cv cfv wbr cdm cin wral cofr breq ralbidv opabbidv df-ofr
      copab 3eqtr4g ) ABFZCGZDGZHZUAEGZHZAIZCUBJUDJKZLZDERUCUEBIZCUGLZDERAMBMTU
      HUJDETUFUICUGUCUEABNOPCADEQCBDEQS $.

    $( A function operation restricted to a set is a set.  (Contributed by NM,
       28-Jul-2014.) $)
    ofexg $p |- ( A e. V -> ( oF R |` A ) e. _V ) $=
      ( vf vg vx cof wfun wcel cres cvv cv cdm cin cmpt df-of mpt2fun resfunexg
      cfv co mpan ) BGZHACIUBAJKIDEKKFDLZMELZMNFLZUCSUEUDSBTOUBFBDEPQUBACRUA $.

    nfof.1 $e |- F/_ x R $.
    $( Hypothesis builder for function operation.  (Contributed by Mario
       Carneiro, 20-Jul-2014.) $)
    nfof $p |- F/_ x oF R $=
      ( cof nfcv ) ABDE $.

    $( Hypothesis builder for function relation.  (Contributed by Mario
       Carneiro, 28-Jul-2014.) $)
    nfofr $p |- F/_ x oR R $=
      ( cofr nfcv ) ABDE $.
  $}

  ${
    $d x A $.  $d f g x F $.  $d f g x G $.  $d x ph $.  $d x S $.  $d x X $.
    $d f g x R $.
    offval.1 $e |- ( ph -> F Fn A ) $.
    offval.2 $e |- ( ph -> G Fn B ) $.
    offval.3 $e |- ( ph -> A e. V ) $.
    offval.4 $e |- ( ph -> B e. W ) $.
    offval.5 $e |- ( A i^i B ) = S $.
    ${
      offval.6 $e |- ( ( ph /\ x e. A ) -> ( F ` x ) = C ) $.
      offval.7 $e |- ( ( ph /\ x e. B ) -> ( G ` x ) = D ) $.
      $( Value of an operation applied to two functions.  (Contributed by Mario
         Carneiro, 20-Jul-2014.) $)
      offval $p |- ( ph -> ( F oF R G ) = ( x e. S |-> ( C R D ) ) ) $=
        ( cvv vf vg cof co cdm cin cfv cmpt wcel wceq wfn fnex syl2anc fndm syl
        cv ineq12d syl6eq mpteq1d inex1g syl5eqelr mptexg 3syl eqeltrd wa fveq1
        dmeq ineqan12d oveqan12d mpteq12dv df-of ovmpt2ga syl3anc eleq2i bitr3i
        elin adantrr adantrl oveq12d sylan2b mpteq2dva 3eqtrd ) AIJGUCZUDZBIUEZ
        JUEZUFZBUPZIUGZWHJUGZGUDZUHZBHWKUHZBHEFGUDZUHAITUIZJTUIZWLTUIWDWLUJAICU
        KZCKUIZWOMOCKIULUMAJDUKZDLUIWPNPDLJULUMAWLWMTABWGHWKAWGCDUFZHAWECWFDAWQ
        WECUJMCIUNUOAWSWFDUJNDJUNUOUQQURUSZAWRHTUIWMTUIOWRHWTTQCDKUTVABHWKTVBVC
        VDUAUBIJTTBUAUPZUEZUBUPZUEZUFZWHXBUGZWHXDUGZGUDZUHWLWCTXBIUJZXDJUJZVEBX
        FXIWGWKXJXKXCWEXEWFXBIVGXDJVGVHXJXKXGWIXHWJGWHXBIVFWHXDJVFVIVJBGUAUBVKV
        LVMXAABHWKWNWHHUIZAWHCUIZWHDUIZVEZWKWNUJXLWHWTUIXOWTHWHQVNWHCDVPVOAXOVE
        WIEWJFGAXMWIEUJXNRVQAXNWJFUJXMSVRVSVTWAWB $.

      $( Value of a relation applied to two functions.  (Contributed by Mario
         Carneiro, 28-Jul-2014.) $)
      ofrfval $p |- ( ph -> ( F oR R G <-> A. x e. S C R D ) ) $=
        ( wcel vf vg cofr wbr cv cfv cdm cin wral cvv wb fnex syl2anc wceq dmeq
        wfn wa ineqan12d fveq1 breqan12d raleqbidv df-ofr brabga ineq12d syl6eq
        fndm raleqdv inss1 eqsstr3i sseli sylan2 inss2 breq12d ralbidva 3bitrd
        syl ) AIJGUCZUDZBUEZIUFZVSJUFZGUDZBIUGZJUGZUHZUIZWBBHUIEFGUDZBHUIAIUJTZ
        JUJTZVRWFUKAICUPZCKTWHMOCKIULUMAJDUPZDLTWINPDLJULUMVSUAUEZUFZVSUBUEZUFZ
        GUDZBWLUGZWNUGZUHZUIWFUAUBIJVQUJUJWLIUNZWNJUNZUQWPWBBWSWEWTXAWQWCWRWDWL
        IUOWNJUOURWTXAWMVTWOWAGVSWLIUSVSWNJUSUTVABGUAUBVBVCUMAWBBWEHAWECDUHZHAW
        CCWDDAWJWCCUNMCIVFVPAWKWDDUNNDJVFVPVDQVEVGAWBWGBHAVSHTZUQVTEWAFGXCAVSCT
        VTEUNHCVSHXBCQCDVHVIVJRVKXCAVSDTWAFUNHDVSHXBDQCDVLVIVJSVKVMVNVO $.
    $}

    ${
      ofval.6 $e |- ( ( ph /\ X e. A ) -> ( F ` X ) = C ) $.
      ofval.7 $e |- ( ( ph /\ X e. B ) -> ( G ` X ) = D ) $.
      $( Evaluate a function operation at a point.  (Contributed by Mario
         Carneiro, 20-Jul-2014.) $)
      ofval $p |- ( ( ph /\ X e. S ) -> ( ( F oF R G ) ` X ) = ( C R D ) ) $=
        ( cfv vx wcel wa cof co cv cmpt wceq eqidd offval fveq1d adantr oveq12d
        fveq2 eqid ovex fvmpt adantl inss1 eqsstr3i sseli sylan2 inss2 3eqtrd
        cin ) ALGUBZUCZLHIFUDUEZTZLUAGUAUFZHTZVJITZFUEZUGZTZLHTZLITZFUEZDEFUEAV
        IVOUHVFALVHVNAUABCVKVLFGHIJKMNOPQAVJBUBUCVKUIAVJCUBUCVLUIUJUKULVFVOVRUH
        AUALVMVRGVNVJLUHVKVPVLVQFVJLHUNVJLIUNUMVNUOVPVQFUPUQURVGVPDVQEFVFALBUBV
        PDUHGBLGBCVEZBQBCUSUTVARVBVFALCUBVQEUHGCLGVSCQBCVCUTVASVBUMVD $.

      $( Exhibit a function relation at a point.  (Contributed by Mario
         Carneiro, 28-Jul-2014.) $)
      ofrval $p |- ( ( ph /\ F oR R G /\ X e. S ) -> C R D ) $=
        ( wcel vx cofr wbr w3a cfv wa cv wral eqidd ofrfval biimpa wceq breq12d
        wi fveq2 rspccv syl 3impia simp1 cin inss1 eqsstr3i simp3 syl2anc inss2
        sseldi 3brtr3d ) AHIFUBUCZLGTZUDZLHUEZLIUEZDEFAVHVIVKVLFUCZAVHUFUAUGZHU
        EZVNIUEZFUCZUAGUHZVIVMUNAVHVRAUABCVOVPFGHIJKMNOPQAVNBTUFVOUIAVNCTUFVPUI
        UJUKVQVMUALGVNLULVOVKVPVLFVNLHUOVNLIUOUMUPUQURVJALBTVKDULAVHVIUSZVJGBLG
        BCUTZBQBCVAVBAVHVIVCZVFRVDVJALCTVLEULVSVJGCLGVTCQBCVEVBWAVFSVDVG $.
    $}

    $( The function operation produces a function.  (Contributed by Mario
       Carneiro, 22-Jul-2014.) $)
    offn $p |- ( ph -> ( F oF R G ) Fn S ) $=
      ( vx co wfn cfv wcel wa cof cv cmpt ovex eqid fnmpti offval fneq1d mpbiri
      eqidd ) AFGDUAPZEQOEOUBZFRZULGRZDPZUCZEQOEUOUPUMUNDUDUPUEUFAEUKUPAOBCUMUN
      DEFGHIJKLMNAULBSTUMUJAULCSTUNUJUGUHUI $.
  $}

  ${
    ofmresval.f $e |- ( ph -> F e. A ) $.
    ofmresval.g $e |- ( ph -> G e. B ) $.
    $( Value of a restriction of the function operation map.  (Contributed by
       NM, 20-Oct-2014.) $)
    ofmresval $p |- ( ph -> ( F ( oF R |` ( A X. B ) ) G ) = ( F oF R G ) ) $=
      ( wcel cof cxp cres co wceq ovres syl2anc ) AEBIFCIEFDJZBCKLMEFQMNGHEFBCQ
      OP $.
  $}

  $( Function value of a pointwise composition.  (Contributed by Stefan O'Rear,
     5-Oct-2014.)  (Proof shortened by Mario Carneiro, 5-Jun-2015.) $)
  fnfvof $p |- ( ( ( F Fn A /\ G Fn A ) /\ ( A e. V /\ X e. A ) ) ->
      ( ( F oF R G ) ` X ) = ( ( F ` X ) R ( G ` X ) ) ) $=
    ( wfn wa wcel cof co cfv wceq simpll simplr simpr inidm eqidd ofval anasss
    ) CAGZDAGZHZAEIZFAIZFCDBJKLFCLZFDLZBKMUCUDHZAAUFUGBACDEEFUAUBUDNUAUBUDOUCUD
    PZUIAQUHUEHZUFRUJUGRST $.

  ${
    $d z A $.  $d z C $.  $d y z G $.  $d x y z ph $.  $d x y S $.  $d x y T $.
    $d x y z F $.  $d x y z R $.  $d x y z U $.
    off.1 $e |- ( ( ph /\ ( x e. S /\ y e. T ) ) -> ( x R y ) e. U ) $.
    off.2 $e |- ( ph -> F : A --> S ) $.
    off.3 $e |- ( ph -> G : B --> T ) $.
    off.4 $e |- ( ph -> A e. V ) $.
    off.5 $e |- ( ph -> B e. W ) $.
    off.6 $e |- ( A i^i B ) = C $.
    $( The function operation produces a function.  (Contributed by Mario
       Carneiro, 20-Jul-2014.) $)
    off $p |- ( ph -> ( F oF R G ) : C --> U ) $=
      ( vz cof co wf cv cfv cmpt wcel wa wral cin inss1 eqsstr3i ffvelrn syl2an
      sseli inss2 ralrimivva adantr wceq oveq1 eleq1d oveq2 syl21anc eqid fmptd
      rspc2va wfn ffn syl eqidd offval feq1d mpbird ) AFJKLGUBUCZUDFJUAFUAUEZKU
      FZVPLUFZGUCZUGZUDAUAFVSJVTAVPFUHZUIVQHUHZVRIUHZBUEZCUEZGUCZJUHZCIUJBHUJZV
      SJUHZADHKUDZVPDUHZWBWAPFDVPFDEUKZDTDEULUMUPDHVPKUNUOAEILUDZVPEUHZWCWAQFEV
      PFWLETDEUQUMUPEIVPLUNUOAWHWAAWGBCHIOURUSWGWIVQWEGUCZJUHBCVQVRHIWDVQUTWFWO
      JWDVQWEGVAVBWEVRUTWOVSJWEVRVQGVCVBVGVDVTVEVFAFJVOVTAUADEVQVRGFKLMNAWJKDVH
      PDHKVIVJAWMLEVHQEILVIVJRSTAWKUIVQVKAWNUIVRVKVLVMVN $.
  $}

  ${
    $d x A $.  $d x C $.  $d x F $.  $d x G $.  $d x ph $.  $d x R $.
    ofres.1 $e |- ( ph -> F Fn A ) $.
    ofres.2 $e |- ( ph -> G Fn B ) $.
    ofres.3 $e |- ( ph -> A e. V ) $.
    ofres.4 $e |- ( ph -> B e. W ) $.
    ofres.5 $e |- ( A i^i B ) = C $.
    $( Restrict the operands of a function operation to the same domain as that
       of the operation itself.  (Contributed by Mario Carneiro,
       15-Sep-2014.) $)
    ofres $p |- ( ph -> ( F oF R G ) = ( ( F |` C ) oF R ( G |` C ) ) ) $=
      ( vx co cfv wcel cvv wfn cof cv cmpt cres eqidd offval wss inss1 eqsstr3i
      wa cin fnssres sylancl inss2 ssexg sylancr inidm wceq fvres adantl eqtr4d
      ) AFGEUAZPODOUBZFQZVCGQZEPUCFDUDZGDUDZVBPAOBCVDVEEDFGHIJKLMNAVCBRUJVDUEAV
      CCRUJVEUEUFAODDVDVEEDVFVGSSAFBTDBUGZVFDTJDBCUKZBNBCUHUIZBDFULUMAGCTDCUGVG
      DTKDVICNBCUNUICDGULUMAVHBHRDSRVJLDBHUOUPZVKDUQVCDRZVCVFQVDURAVCDFUSUTVLVC
      VGQVEURAVCDGUSUTUFVA $.
  $}

  ${
    $d x y z A $.  $d y z B $.  $d y z C $.  $d y F $.  $d y G $.  $d x y ph $.
    $d x y z R $.
    offval2.1 $e |- ( ph -> A e. V ) $.
    offval2.2 $e |- ( ( ph /\ x e. A ) -> B e. W ) $.
    offval2.3 $e |- ( ( ph /\ x e. A ) -> C e. X ) $.
    offval2.4 $e |- ( ph -> F = ( x e. A |-> B ) ) $.
    offval2.5 $e |- ( ph -> G = ( x e. A |-> C ) ) $.
    $( The function operation expressed as a mapping.  (Contributed by Mario
       Carneiro, 20-Jul-2014.) $)
    offval2 $p |- ( ph -> ( F oF R G ) = ( x e. A |-> ( B R C ) ) ) $=
      ( vy co cmpt wceq cof cv cfv wcel wral ralrimiva eqid fnmpt fneq1d mpbird
      wfn inidm wa adantr fveq1d offval nffvmpt1 nfcv nfov fveq2 oveq12d cbvmpt
      syl simpr fvmpt2 syl2anc mpteq2dva syl5eq eqtrd ) AGHFUARQCQUBZBCDSZUCZVJ
      BCESZUCZFRZSZBCDEFRZSZAQCCVLVNFCGHIIAGCUKVKCUKZADJUDZBCUEVSAVTBCMUFBCDVKJ
      VKUGZUHVCACGVKOUIUJAHCUKVMCUKZAEKUDZBCUEWBAWCBCNUFBCEVMKVMUGZUHVCACHVMPUI
      UJLLCULAVJCUDZUMZVJGVKAGVKTWEOUNUOWFVJHVMAHVMTWEPUNUOUPAVPBCBUBZVKUCZWGVM
      UCZFRZSVRQBCVOWJBVLVNFBCDVJUQBFURBCEVJUQUSQWJURVJWGTVLWHVNWIFVJWGVKUTVJWG
      VMUTVAVBABCWJVQAWGCUDZUMZWHDWIEFWLWKVTWHDTAWKVDZMBCDJVKWAVEVFWLWKWCWIETWM
      NBCEKVMWDVEVFVAVGVHVI $.

    $( The function relation acting on maps.  (Contributed by Mario Carneiro,
       20-Jul-2014.) $)
    ofrfval2 $p |- ( ph -> ( F oR R G <-> A. x e. A B R C ) ) $=
      ( vy wbr wral wceq cofr cmpt cfv wfn wcel ralrimiva eqid fnmpt syl fneq1d
      cv mpbird inidm wa adantr fveq1d ofrfval nffvmpt1 nfcv nfbr fveq2 breq12d
      nfv cbvral simpr fvmpt2 syl2anc ralbidva syl5bb bitrd ) AGHFUARQUKZBCDUBZ
      UCZVKBCEUBZUCZFRZQCSZDEFRZBCSZAQCCVMVOFCGHIIAGCUDVLCUDZADJUEZBCSVTAWABCMU
      FBCDVLJVLUGZUHUIACGVLOUJULAHCUDVNCUDZAEKUEZBCSWCAWDBCNUFBCEVNKVNUGZUHUIAC
      HVNPUJULLLCUMAVKCUEZUNZVKGVLAGVLTWFOUOUPWGVKHVNAHVNTWFPUOUPUQVQBUKZVLUCZW
      HVNUCZFRZBCSAVSVPWKQBCBVMVOFBCDVKURBFUSBCEVKURUTWKQVCVKWHTVMWIVOWJFVKWHVL
      VAVKWHVNVAVBVDAWKVRBCAWHCUEZUNZWIDWJEFWMWLWAWIDTAWLVEZMBCDJVLWBVFVGWMWLWD
      WJETWNNBCEKVNWEVFVGVBVHVIVJ $.
  $}

  ${
    $d A x a b $.  $d V a b $.  $d B a b $.  $d C a b $.  $d R a b x $.
    $( Value of a pointwise operation on two functions defined using maps-to
       notation.  (Contributed by Stefan O'Rear, 5-Oct-2014.) $)
    ofmpteq $p |- ( ( A e. V /\ ( x e. A |-> B ) Fn A
        /\ ( x e. A |-> C ) Fn A )
  -> ( ( x e. A |-> B ) oF R ( x e. A |-> C ) ) = ( x e. A |-> ( B R C ) ) ) $=
      ( va wcel cmpt wfn co cv csb cvv wral eqid mptfng wceq nfcv cbvmpt w3a wa
      cof simp1 simpr simpl2 sylibr nfcsb1v csbeq1a eleq1d rspc sylc simpl3 a1i
      nfel1 offval2 nfov oveq12d syl6eqr ) BFHZABCIZBJZABDIZBJZUAZVAVCEUCKGBAGL
      ZCMZAVFDMZEKZIABCDEKZIVEGBVGVHEVAVCFNNUTVBVDUDVEVFBHZUBZVKCNHZABOZVGNHZVE
      VKUEZVLVBVNUTVBVDVKUFABCVAVAPQUGVMVOAVFBAVGNAVFCUHZUOALVFRZCVGNAVFCUIZUJU
      KULVLVKDNHZABOZVHNHZVPVLVDWAUTVBVDVKUMABDVCVCPQUGVTWBAVFBAVHNAVFDUHZUOVRD
      VHNAVFDUIZUJUKULVAGBVGIRVEAGBCVGGCSVQVSTUNVCGBVHIRVEAGBDVHGDSWCWDTUNUPAGB
      VJVIGVJSAVGVHEVQAESWCUQVRCVGDVHEVSWDURTUS $.
  $}

  ${
    $d ph v x $.  $d A x $.  $d B v x $.  $d D x $.  $d O v x $.  $d R v $.
    $d Y v x $.  $d Z v x $.
    suppssof1OLD.s $e |- ( ph -> ( `' A "" ( _V \ { Y } ) ) C_ L ) $.
    suppssof1OLD.o $e |- ( ( ph /\ v e. R ) -> ( Y O v ) = Z ) $.
    suppssof1OLD.a $e |- ( ph -> A : D --> V ) $.
    suppssof1OLD.b $e |- ( ph -> B : D --> R ) $.
    suppssof1OLD.d $e |- ( ph -> D e. W ) $.
    $( Formula building theorem for support restrictions: vector operation with
       left annihilator.  (Contributed by Stefan O'Rear, 9-Mar-2015.)  Obsolete
       version of ~ suppssof1 as of 28-May-2019.  (New usage is discouraged.)
       (Proof modification is discouraged.) $)
    suppssof1OLD $p |- ( ph -> ( `' ( A oF O B ) "" ( _V \ { Z } ) ) C_ L ) $=
      ( vx ccnv cvv cof co csn cdif cima cv cfv cmpt wf wfn ffn syl inidm eqidd
      wcel wa offval cnveqd imaeq1d feqmptd eqsstr3d a1i ffvelrnda suppssov1OLD
      fvex eqsstrd ) ACDHUAUBZSZTLUCUDZUERERUFZCUGZVJDUGZHUBUHZSZVIUEGAVHVNVIAV
      GVMAREEVKVLHECDJJAEICUICEUJOEICUKULAEFDUIDEUJPEFDUKULQQEUMAVJEUOUPZVKUNVO
      VLUNUQURUSARBVKVLEFGHTKLAREVKUHZSZTKUCUDZUECSZVRUEGAVSVQVRACVPAREICOUTURU
      SMVANVKTUOVOVJCVEVBAEFVJDPVCVDVF $.
  $}

  ${
    $d y A $.  $d x y C $.  $d x y F $.  $d x y G $.  $d x y H $.  $d x y ph $.
    $d x D $.  $d x y R $.
    ofco.1 $e |- ( ph -> F Fn A ) $.
    ofco.2 $e |- ( ph -> G Fn B ) $.
    ofco.3 $e |- ( ph -> H : D --> C ) $.
    ofco.4 $e |- ( ph -> A e. V ) $.
    ofco.5 $e |- ( ph -> B e. W ) $.
    ofco.6 $e |- ( ph -> D e. X ) $.
    ofco.7 $e |- ( A i^i B ) = C $.
    $( The composition of a function operation with another function.
       (Contributed by Mario Carneiro, 19-Dec-2014.) $)
    ofco $p |- ( ph ->
      ( ( F oF R G ) o. H ) = ( ( F o. H ) oF R ( G o. H ) ) ) $=
      ( cfv vx vy cof co ccom cv cmpt ffvelrnda feqmptd wcel eqidd offval fveq2
      wa oveq12d fmptco wfn wf wss cin inss1 eqsstr3i fss sylancl fnfco syl2anc
      wceq inss2 inidm ffn syl fvco2 sylan eqtr4d ) AGHFUCZUDZIUEUAEUAUFZITZGTZ
      VRHTZFUDZUGGIUEZHIUEZVOUDAUAUBEDVRUBUFZGTZWDHTZFUDWAIVPAEDVQIOUHAUAEDIOUI
      AUBBCWEWFFDGHJKMNPQSAWDBUJUNWEUKAWDCUJUNWFUKULWDVRVGWEVSWFVTFWDVRGUMWDVRH
      UMUOUPAUAEEVSVTFEWBWCLLAGBUQEBIURZWBEUQMAEDIURZDBUSWGODBCUTZBSBCVAVBEDBIV
      CVDBEGIVEVFAHCUQECIURZWCEUQNAWHDCUSWJODWICSBCVHVBEDCIVCVDCEHIVEVFRREVIAIE
      UQZVQEUJZVQWBTVSVGAWHWKOEDIVJVKZEGIVQVLVMAWKWLVQWCTVTVGWMEHIVQVLVMULVN $.
  $}

  ${
    $d x A $.  $d x F $.  $d x G $.  $d x H $.  $d x ph $.  $d x R $.
    offveq.1 $e |- ( ph -> A e. V ) $.
    offveq.2 $e |- ( ph -> F Fn A ) $.
    offveq.3 $e |- ( ph -> G Fn A ) $.
    offveq.4 $e |- ( ph -> H Fn A ) $.
    offveq.5 $e |- ( ( ph /\ x e. A ) -> ( F ` x ) = B ) $.
    offveq.6 $e |- ( ( ph /\ x e. A ) -> ( G ` x ) = C ) $.
    ${
      offveq.7 $e |- ( ( ph /\ x e. A ) -> ( B R C ) = ( H ` x ) ) $.
      $( Convert an identity of the operation to the analogous identity on the
         function operation.  (Contributed by Mario Carneiro, 24-Jul-2014.) $)
      offveq $p |- ( ph -> ( F oF R G ) = H ) $=
        ( cof co cfv inidm offn cv wcel wa ofval eqtrd eqfnfvd ) ABCGHFRSZIACCF
        CGHJJLMKKCUAZUBNABUCZCUDUEUKUITDEFSUKITACCDEFCGHJJUKLMKKUJOPUFQUGUH $.
    $}

    $d y A $.  $d y z B $.  $d y z C $.  $d x y z F $.  $d y z G $.  $d y H $.
    $d y R $.  $d y ph $.
    $( Equivalent expressions for equality with a function operation.
       (Contributed by NM, 9-Oct-2014.)  (Proof shortened by Mario Carneiro,
       5-Dec-2016.) $)
    offveqb $p |- ( ph
          -> ( H = ( F oF R G ) <-> A. x e. A ( H ` x ) = ( B R C ) ) ) $=
      ( co wceq cmpt wral cof cfv wfn dffn5 sylib inidm offval eqeq12d cvv wcel
      cv wb fvex a1i ralrimivw mpteqb syl bitrd ) AIGHFUAQZRBCBUKZIUBZSZBCDEFQZ
      SZRZVAVCRBCTZAIVBUSVDAICUCIVBRNBCIUDUEABCCDEFCGHJJLMKKCUFOPUGUHAVAUIUJZBC
      TVEVFULAVGBCVGAUTIUMUNUOBCVAVCUIUPUQUR $.
  $}

  ${
    ofc1.1 $e |- ( ph -> A e. V ) $.
    ofc1.2 $e |- ( ph -> B e. W ) $.
    ofc1.3 $e |- ( ph -> F Fn A ) $.
    ofc1.4 $e |- ( ( ph /\ X e. A ) -> ( F ` X ) = C ) $.
    $( Left operation by a constant.  (Contributed by Mario Carneiro,
       24-Jul-2014.) $)
    ofc1 $p |- ( ( ph /\ X e. A ) ->
      ( ( ( A X. { B } ) oF R F ) ` X ) = ( B R C ) ) $=
      ( csn cxp wcel wfn fnconstg syl inidm cfv wceq fvconst2g sylan ofval ) AB
      BCDEBBCNOZFGGIACHPZUFBQKBCHRSLJJBTAUGIBPIUFUACUBKBCIHUCUDMUE $.
  $}

  ${
    ofc2.1 $e |- ( ph -> A e. V ) $.
    ofc2.2 $e |- ( ph -> B e. W ) $.
    ofc2.3 $e |- ( ph -> F Fn A ) $.
    ofc2.4 $e |- ( ( ph /\ X e. A ) -> ( F ` X ) = C ) $.
    $( Right operation by a constant.  (Contributed by NM, 7-Oct-2014.) $)
    ofc2 $p |- ( ( ph /\ X e. A ) ->
      ( ( F oF R ( A X. { B } ) ) ` X ) = ( C R B ) ) $=
      ( csn cxp wcel wfn fnconstg syl inidm cfv wceq fvconst2g sylan ofval ) AB
      BDCEBFBCNOZGGILACHPZUFBQKBCHRSJJBTMAUGIBPIUFUACUBKBCIHUCUDUE $.
  $}

  ${
    $d x A $.  $d x B $.  $d x C $.  $d x ph $.  $d x R $.  $d x W $.
    $d x X $.
    ofc12.1 $e |- ( ph -> A e. V ) $.
    ofc12.2 $e |- ( ph -> B e. W ) $.
    ofc12.3 $e |- ( ph -> C e. X ) $.
    $( Function operation on two constant functions.  (Contributed by Mario
       Carneiro, 28-Jul-2014.) $)
    ofc12 $p |- ( ph ->
      ( ( A X. { B } ) oF R ( A X. { C } ) ) = ( A X. { ( B R C ) } ) ) $=
      ( vx csn cxp co cmpt wcel adantr wceq fconstmpt cof a1i offval2 syl6eqr
      cv ) ABCMNZBDMNZEUAOLBCDEOZPBUHMNALBCDEUFUGFGHIACGQLUEBQZJRADHQUIKRUFLBCP
      SALBCTUBUGLBDPSALBDTUBUCLBUHTUD $.
  $}

  ${
    $d w x B $.  $d w x C $.  $d w x y z F $.  $d w x y z G $.  $d w x y z H $.
    $d w x y z O $.  $d w x y z P $.  $d w x y z ph $.  $d w x y z R $.
    $d w A $.  $d w x y z S $.  $d w x y z T $.  $d w x y z U $.
    caofref.1 $e |- ( ph -> A e. V ) $.
    caofref.2 $e |- ( ph -> F : A --> S ) $.
    ${
      caofref.3 $e |- ( ( ph /\ x e. S ) -> x R x ) $.
      $( Transfer a reflexive law to the function relation.  (Contributed by
         Mario Carneiro, 28-Jul-2014.) $)
      caofref $p |- ( ph -> F oR R F ) $=
        ( vw cofr wbr cv cfv wral wcel wa ffvelrnda ralrimiva adantr id breq12d
        wceq rspcv sylc wf wfn ffn syl inidm eqidd ofrfval mpbird ) AFFDLMKNZFO
        ZUPDMZKCPAUQKCAUOCQZRZUPEQBNZUTDMZBEPZUQACEUOFISAVBURAVABEJTUAVAUQBUPEU
        TUPUDZUTUPUTUPDVCUBZVDUCUEUFTAKCCUPUPDCFFGGACEFUGFCUHICEFUIUJZVEHHCUKUS
        UPULZVFUMUN $.
    $}

    ${
      $d v A $.  $d v F $.  $d x v N $.  $d v S $.  $d v ph $.  $d v w $.
      caofinv.3 $e |- ( ph -> B e. W ) $.
      caofinv.4 $e |- ( ph -> N : S --> S ) $.
      caofinv.5 $e |- ( ph -> G = ( v e. A |-> ( N ` ( F ` v ) ) ) ) $.
      ${
        caofinvl.6 $e |- ( ( ph /\ x e. S ) -> ( ( N ` x ) R x ) = B ) $.
        $( Transfer a left inverse law to the function operation.  (Contributed
           by NM, 22-Oct-2014.) $)
        caofinvl $p |- ( ph -> ( G oF R F ) = ( A X. { B } ) ) $=
          ( vw cfv cof co cmpt csn cv wf wcel wa adantr ffvelrnda ffvelrnd eqid
          cxp fmptd feq1d mpbird wfn wceq fvex fnmpti fneq1d mpbiri dffn5 sylib
          feqmptd offval2 fveq1d fveq2 fveq2d sylan9eq oveq1d wral ralrimiva id
          fvmpt oveq12d eqeq1d rspcva syl2anc eqtrd mpteq2dva fconstmpt syl6eqr
          ) AIHFUAUBZSDEUCZDEUDUMAWDSDSUEZITZWFHTZFUBZUCWEASDWGWHFIHKGGMADGWFIA
          DGIUFDGCDCUEZHTZJTZUCZUFACDWLGWMAWJDUGZUHGGWKJAGGJUFWNPUIADGWJHNUJUKW
          MULZUNADGIWMQUOUPUJADGWFHNUJZAIDUQZISDWGUCURAWQWMDUQCDWLWMWKJUSWOUTAD
          IWMQVAVBSDIVCVDASDGHNVEVFASDWIEAWFDUGZUHZWIWHJTZWHFUBZEWSWGWTWHFAWRWG
          WFWMTWTAWFIWMQVGCWFWLWTDWMWJWFURWKWHJWJWFHVHVIWOWHJUSVOVJVKWSWHGUGBUE
          ZJTZXBFUBZEURZBGVLZXAEURZWPAXFWRAXEBGRVMUIXEXGBWHGXBWHURZXDXAEXHXCWTX
          BWHFXBWHJVHXHVNVPVQVRVSVTWAVTSDEWBWC $.
      $}
    $}

    ${
      caofid0.3 $e |- ( ph -> B e. W ) $.
      ${
        caofid0l.5 $e |- ( ( ph /\ x e. S ) -> ( B R x ) = x ) $.
        $( Transfer a left identity law to the function operation.
           (Contributed by NM, 21-Oct-2014.) $)
        caofid0l $p |- ( ph -> ( ( A X. { B } ) oF R F ) = F ) $=
          ( vw cv cfv wcel wfn syl wceq csn cxp fnconstg wf ffn fvconst2g sylan
          wa eqidd ffvelrnda wral ralrimiva oveq2 eqeq12d rspccva syldan offveq
          co id ) ANCDNOZGPZECDUAUBZGGHJADIQZVBCRLCDIUCSACFGUDGCRKCFGUESZVDAVCU
          TCQZUTVBPDTLCDUTIUFUGAVEUHVAUIAVEVAFQZDVAEURZVATZACFUTGKUJADBOZEURZVI
          TZBFUKVFVHAVKBFMULVKVHBVAFVIVATZVJVGVIVAVIVADEUMVLUSUNUOUGUPUQ $.
      $}

      ${
        caofid0r.5 $e |- ( ( ph /\ x e. S ) -> ( x R B ) = x ) $.
        $( Transfer a right identity law to the function operation.
           (Contributed by NM, 21-Oct-2014.) $)
        caofid0r $p |- ( ph -> ( F oF R ( A X. { B } ) ) = F ) $=
          ( vw cv cfv wfn syl wcel wceq csn cxp wf ffn fnconstg eqidd fvconst2g
          wa sylan ffvelrnda wral ralrimiva oveq1 eqeq12d rspccva syldan offveq
          co id ) ANCNOZGPZDEGCDUAUBZGHJACFGUCGCQKCFGUDRZADISZVBCQLCDIUERVCAUTC
          SZUHVAUFAVDVEUTVBPDTLCDUTIUGUIAVEVAFSZVADEURZVATZACFUTGKUJABOZDEURZVI
          TZBFUKVFVHAVKBFMULVKVHBVAFVIVATZVJVGVIVAVIVADEUMVLUSUNUOUIUPUQ $.
      $}

      caofid1.4 $e |- ( ph -> C e. X ) $.
      ${
        caofid1.5 $e |- ( ( ph /\ x e. S ) -> ( x R B ) = C ) $.
        $( Transfer a right absorption law to the function operation.
           (Contributed by Mario Carneiro, 28-Jul-2014.) $)
        caofid1 $p |- ( ph -> ( F oF R ( A X. { B } ) ) = ( A X. { C } ) ) $=
          ( cfv wfn wcel wceq vw cv csn cxp wf ffn syl fnconstg eqidd fvconst2g
          wa sylan ffvelrnda wral ralrimiva eqeq1d rspccva syldan eqtr4d offveq
          co oveq1 ) AUACUAUBZHQZDFHCDUCUDZCEUCUDZILACGHUEHCRMCGHUFUGADJSZVECRN
          CDJUHUGAEKSZVFCROCEKUHUGAVCCSZUKZVDUIAVGVIVCVEQDTNCDVCJUJULVJVDDFVAZE
          VCVFQZAVIVDGSZVKETZACGVCHMUMABUBZDFVAZETZBGUNVMVNAVQBGPUOVQVNBVDGVOVD
          TVPVKEVOVDDFVBUPUQULURAVHVIVLETOCEVCKUJULUSUT $.
      $}

      caofid2.5 $e |- ( ( ph /\ x e. S ) -> ( B R x ) = C ) $.
      $( Transfer a right absorption law to the function operation.
         (Contributed by Mario Carneiro, 28-Jul-2014.) $)
      caofid2 $p |- ( ph -> ( ( A X. { B } ) oF R F ) = ( A X. { C } ) ) $=
        ( cfv wcel wfn wceq vw cv csn cxp fnconstg syl wf fvconst2g sylan eqidd
        ffn wa co ffvelrnda ralrimiva oveq2 eqeq1d rspccva syldan eqtr4d offveq
        wral ) AUACDUAUBZHQZFCDUCUDZHCEUCUDZILADJRZVECSNCDJUEUFACGHUGHCSMCGHUKU
        FAEKRZVFCSOCEKUEUFAVGVCCRZVCVEQDTNCDVCJUHUIAVIULZVDUJVJDVDFUMZEVCVFQZAV
        IVDGRZVKETZACGVCHMUNADBUBZFUMZETZBGVBVMVNAVQBGPUOVQVNBVDGVOVDTVPVKEVOVD
        DFUPUQURUIUSAVHVIVLETOCEVCKUHUIUTVA $.
    $}

    caofcom.3 $e |- ( ph -> G : A --> S ) $.
    ${
      caofcom.4 $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) ->
                        ( x R y ) = ( y R x ) ) $.
      $( Transfer a commutative law to the function operation.  (Contributed by
         Mario Carneiro, 26-Jul-2014.) $)
      caofcom $p |- ( ph -> ( F oF R G ) = ( G oF R F ) ) $=
        ( vw cfv co cmpt wcel wa ffvelrnda cv cof jca caovcomg syldan mpteq2dva
        wceq feqmptd offval2 3eqtr4d ) ANDNUAZGOZUKHOZEPZQNDUMULEPZQGHEUBZPHGUP
        PANDUNUOAUKDRZULFRZUMFRZSUNUOUGAUQSURUSADFUKGKTZADFUKHLTZUCABCULUMFEMUD
        UEUFANDULUMEGHIFFJUTVAANDFGKUHZANDFHLUHZUIANDUMULEHGIFFJVAUTVCVBUIUJ $.
    $}

    ${
      caofrss.4 $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) ->
                        ( x R y -> x T y ) ) $.
      $( Transfer a relation subset law to the function relation.  (Contributed
         by Mario Carneiro, 28-Jul-2014.) $)
      caofrss $p |- ( ph -> ( F oR R G -> F oR T G ) ) $=
        ( vw cv wbr wral wcel wi cofr wa ffvelrnda ralrimivva adantr wceq breq1
        cfv imbi12d breq2 rspc2va syl21anc ralimdva wfn ffn inidm eqidd ofrfval
        wf syl 3imtr4d ) AOPZHUHZVBIUHZEQZODRVCVDGQZODRHIEUAQHIGUAQAVEVFODAVBDS
        ZUBZVCFSVDFSBPZCPZEQZVIVJGQZTZCFRBFRZVEVFTZADFVBHLUCADFVBIMUCAVNVGAVMBC
        FFNUDUEVMVOVCVJEQZVCVJGQZTBCVCVDFFVIVCUFVKVPVLVQVIVCVJEUGVIVCVJGUGUIVJV
        DUFVPVEVQVFVJVDVCEUJVJVDVCGUJUIUKULUMAODDVCVDEDHIJJADFHUSHDUNLDFHUOUTZA
        DFIUSIDUNMDFIUOUTZKKDUPZVHVCUQZVHVDUQZURAODDVCVDGDHIJJVRVSKKVTWAWBURVA
        $.
    $}

    caofass.4 $e |- ( ph -> H : A --> S ) $.
    ${
      caofass.5 $e |- ( ( ph /\ ( x e. S /\ y e. S /\ z e. S ) ) ->
                        ( ( x R y ) T z ) = ( x O ( y P z ) ) ) $.
      $( Transfer an associative law to the function operation.  (Contributed
         by Mario Carneiro, 26-Jul-2014.) $)
      caofass $p |- ( ph ->
        ( ( F oF R G ) oF T H ) = ( F oF O ( G oF P H ) ) ) $=
        ( co vw cv cfv cmpt cof wcel wa wceq ralrimivvva adantr ffvelrnda oveq1
        wral wi oveq1d eqeq12d oveq2d rspc3v syl3anc mpd mpteq2dva cvv ovex a1i
        oveq2 feqmptd offval2 3eqtr4d ) AUAEUAUBZJUCZVIKUCZGTZVILUCZITZUDUAEVJV
        KVMFTZMTZUDJKGUETZLIUETJKLFUETZMUETAUAEVNVPAVIEUFZUGZBUBZCUBZGTZDUBZITZ
        WAWBWDFTZMTZUHZDHUMCHUMBHUMZVNVPUHZAWIVSAWHBCDHHHSUIUJVTVJHUFVKHUFVMHUF
        WIWJUNAEHVIJPUKZAEHVIKQUKZAEHVILRUKZWHWJVJWBGTZWDITZVJWFMTZUHVLWDITZVJV
        KWDFTZMTZUHBCDVJVKVMHHHWAVJUHZWEWOWGWPWTWCWNWDIWAVJWBGULUOWAVJWFMULUPWB
        VKUHZWOWQWPWSXAWNVLWDIWBVKVJGVEUOXAWFWRVJMWBVKWDFULUQUPWDVMUHZWQVNWSVPW
        DVMVLIVEXBWRVOVJMWDVMVKFVEUQUPURUSUTVAAUAEVLVMIVQLNVBHOVLVBUFVTVJVKGVCV
        DWMAUAEVJVKGJKNHHOWKWLAUAEHJPVFZAUAEHKQVFZVGAUAEHLRVFZVGAUAEVJVOMJVRNHV
        BOWKVOVBUFVTVKVMFVCVDXCAUAEVKVMFKLNHHOWLWMXDXEVGVGVH $.
    $}

    ${
      caoftrn.5 $e |- ( ( ph /\ ( x e. S /\ y e. S /\ z e. S ) ) ->
                        ( ( x R y /\ y T z ) -> x U z ) ) $.
      $( Transfer a transitivity law to the function relation.  (Contributed by
         Mario Carneiro, 28-Jul-2014.) $)
      caoftrn $p |- ( ph -> ( ( F oR R G /\ G oR T H ) -> F oR U H ) ) $=
        ( vw wbr cv cfv wa wral cofr wcel wi ralrimivvva adantr ffvelrnda breq1
        wceq anbi1d imbi12d breq2 anbi12d imbi1d anbi2d rspc3v syl3anc ralimdva
        mpd wf wfn ffn syl inidm eqidd ofrfval r19.26 syl6bbr 3imtr4d ) ASUAZJU
        BZVMKUBZFTZVOVMLUBZHTZUCZSEUDZVNVQITZSEUDJKFUETZKLHUETZUCZJLIUETAVSWASE
        AVMEUFZUCZBUAZCUAZFTZWHDUAZHTZUCZWGWJITZUGZDGUDCGUDBGUDZVSWAUGZAWOWEAWN
        BCDGGGRUHUIWFVNGUFVOGUFVQGUFWOWPUGAEGVMJOUJAEGVMKPUJAEGVMLQUJWNWPVNWHFT
        ZWKUCZVNWJITZUGVPVOWJHTZUCZWSUGBCDVNVOVQGGGWGVNULZWLWRWMWSXBWIWQWKWGVNW
        HFUKUMWGVNWJIUKUNWHVOULZWRXAWSXCWQVPWKWTWHVOVNFUOWHVOWJHUKUPUQWJVQULZXA
        VSWSWAXDWTVRVPWJVQVOHUOURWJVQVNIUOUNUSUTVBVAAWDVPSEUDZVRSEUDZUCVTAWBXEW
        CXFASEEVNVOFEJKMMAEGJVCJEVDOEGJVEVFZAEGKVCKEVDPEGKVEVFZNNEVGZWFVNVHZWFV
        OVHZVIASEEVOVQHEKLMMXHAEGLVCLEVDQEGLVEVFZNNXIXKWFVQVHZVIUPVPVRSEVJVKASE
        EVNVQIEJLMMXGXLNNXIXJXMVIVL $.
    $}
  $}

  ${
    $d w x y z A $.  $d w x y z F $.  $d w x y z G $.  $d w x y z ph $.
    $d w x y z H $.  $d w x y z K $.  $d w x y z O $.  $d w x y z R $.
    $d w x y z S $.  $d w x y z T $.
    caofdi.1 $e |- ( ph -> A e. V ) $.
    caofdi.2 $e |- ( ph -> F : A --> K ) $.
    caofdi.3 $e |- ( ph -> G : A --> S ) $.
    caofdi.4 $e |- ( ph -> H : A --> S ) $.
    ${
      caofdi.5 $e |- ( ( ph /\ ( x e. K /\ y e. S /\ z e. S ) ) ->
                          ( x T ( y R z ) ) = ( ( x T y ) O ( x T z ) ) ) $.
      $( Transfer a distributive law to the function operation.  (Contributed
         by Mario Carneiro, 26-Jul-2014.) $)
      caofdi $p |- ( ph ->
        ( F oF T ( G oF R H ) ) = ( ( F oF T G ) oF O ( F oF T H ) ) ) $=
        ( co vw cv cfv cmpt cof wcel wa w3a adantlr ffvelrnda caovdid mpteq2dva
        wceq cvv ovex a1i feqmptd offval2 3eqtr4d ) AUAEUAUBZIUCZUTJUCZUTKUCZFT
        ZHTZUDUAEVAVBHTZVAVCHTZMTZUDIJKFUETZHUEZTIJVJTZIKVJTZMUETAUAEVEVHAUTEUF
        ZUGZBCDVAVBVCGFHMLABUBZLUFCUBZGUFDUBZGUFUHVOVPVQFTHTVOVPHTVOVQHTMTUMVMS
        UIAELUTIPUJZAEGUTJQUJZAEGUTKRUJZUKULAUAEVAVDHIVINLUNOVRVDUNUFVNVBVCFUOU
        PAUAELIPUQZAUAEVBVCFJKNGGOVSVTAUAEGJQUQZAUAEGKRUQZURURAUAEVFVGMVKVLNUNU
        NOVFUNUFVNVAVBHUOUPVGUNUFVNVAVCHUOUPAUAEVAVBHIJNLGOVRVSWAWBURAUAEVAVCHI
        KNLGOVRVTWAWCURURUS $.
    $}

    ${
      caofdir.5 $e |- ( ( ph /\ ( x e. S /\ y e. S /\ z e. K ) ) ->
                          ( ( x R y ) T z ) = ( ( x T z ) O ( y T z ) ) ) $.
      $( Transfer a reverse distributive law to the function operation.
         (Contributed by NM, 19-Oct-2014.) $)
      caofdir $p |- ( ph ->
        ( ( G oF R H ) oF T F ) = ( ( G oF T F ) oF O ( H oF T F ) ) ) $=
        ( co vw cfv cmpt cof wcel w3a wceq adantlr ffvelrnda caovdird mpteq2dva
        cv wa cvv ovex a1i feqmptd offval2 3eqtr4d ) AUAEUAULZJUBZUTKUBZFTZUTIU
        BZHTZUCUAEVAVDHTZVBVDHTZMTZUCJKFUDTZIHUDZTJIVJTZKIVJTZMUDTAUAEVEVHAUTEU
        EZUMZBCDVAVBVDGFHMLABULZGUECULZGUEDULZLUEUFVOVPFTVQHTVOVQHTVPVQHTMTUGVM
        SUHAEGUTJQUIZAEGUTKRUIZAELUTIPUIZUJUKAUAEVCVDHVIINUNLOVCUNUEVNVAVBFUOUP
        VTAUAEVAVBFJKNGGOVRVSAUAEGJQUQZAUAEGKRUQZURAUAELIPUQZURAUAEVFVGMVKVLNUN
        UNOVFUNUEVNVAVDHUOUPVGUNUEVNVBVDHUOUPAUAEVAVDHJINGLOVRVTWAWCURAUAEVBVDH
        KINGLOVSVTWBWCURURUS $.
    $}
  $}

  ${
    $d ph x y z $.  $d A x y z $.  $d B y z $.  $d I z $.  $d M x y z $.
    $d S x y $.
    caonncan.i $e |- ( ph -> I e. V ) $.
    caonncan.a $e |- ( ph -> A : I --> S ) $.
    caonncan.b $e |- ( ph -> B : I --> S ) $.
    caonncan.z $e |- ( ( ph /\ ( x e. S /\ y e. S ) ) ->
        ( x M ( x M y ) ) = y ) $.
    $( Transfer ~ nncan -shaped laws to vectors of numbers.  (Contributed by
       Stefan O'Rear, 27-Mar-2015.) $)
    caonncan $p |- ( ph -> ( A oF M ( A oF M B ) ) = B ) $=
      ( vz cv co wcel wceq cvv a1i cfv cmpt wa wral ffvelrnda ralrimivva adantr
      cof id oveq1 oveq12d eqeq1d oveq2 eqeq12d rspc2va syl21anc mpteq2dva fvex
      oveq2d ovex feqmptd offval2 3eqtr4d ) ANGNOZDUAZVEVDEUAZHPZHPZUBNGVFUBDDE
      HUHZPZVIPEANGVHVFAVDGQZUCZVEFQVFFQBOZVMCOZHPZHPZVNRZCFUDBFUDZVHVFRZAGFVDD
      KUEAGFVDELUEAVRVKAVQBCFFMUFUGVQVSVEVEVNHPZHPZVNRBCVEVFFFVMVERZVPWAVNWBVMV
      EVOVTHWBUIVMVEVNHUJUKULVNVFRZWAVHVNVFWCVTVGVEHVNVFVEHUMUSWCUIUNUOUPUQANGV
      EVGHDVJISSJVESQVLVDDURTZVGSQVLVEVFHUTTANGFDKVAZANGVEVFHDEISSJWDVFSQVLVDEU
      RTWEANGFELVAZVBVBWFVC $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Proper subset relation
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $c [C.] $.

  $( Extend class notation to include the reified proper subset relation. $)
  crpss $a class [C.] $.

  ${
    $d x y A $.  $d x y B $.
    $( Define a relation which corresponds to proper subsethood ~ df-pss on
       sets.  This allows us to use proper subsethood with general concepts
       that require relations, such as strict ordering, see ~ sorpss .
       (Contributed by Stefan O'Rear, 2-Nov-2014.) $)
    df-rpss $a |- [C.] = { <. x , y >. | x C. y } $.

    $( The proper subset relation is a relation.  (Contributed by Stefan
       O'Rear, 2-Nov-2014.) $)
    relrpss $p |- Rel [C.] $=
      ( vx vy cv wpss crpss df-rpss relopabi ) ACBCDABEABFG $.

    $( The proper subset relation on sets is the same as class proper
       subsethood.  (Contributed by Stefan O'Rear, 2-Nov-2014.) $)
    brrpssg $p |- ( B e. V -> ( A [C.] B <-> A C. B ) ) $=
      ( vx vy wcel crpss wbr wpss wa elex relrpss brrelexi anim12i adantr pssss
      cvv wss ssexg cv syl2anr jca psseq1 psseq2 df-rpss brabg ancoms pm5.21nd
      wb ) BCFZABGHZABIZBQFZAQFZJUJUMUKUNBCKZABGLMNUJULJUMUNUJUMULUOOULABRUMUNU
      JABPUOABQSUAUBUNUMUKULUIDTZETZIAUQIULDEABQQGUPAUQUCUQBAUDDEUEUFUGUH $.
  $}

  ${
    brrpss.a $e |- B e. _V $.
    $( The proper subset relation on sets is the same as class proper
       subsethood.  (Contributed by Stefan O'Rear, 2-Nov-2014.) $)
    brrpss $p |- ( A [C.] B <-> A C. B ) $=
      ( cvv wcel crpss wbr wpss wb brrpssg ax-mp ) BDEABFGABHICABDJK $.
  $}

  ${
    $d x y z A $.
    $( Every class is partially ordered by proper subsets.  (Contributed by
       Stefan O'Rear, 2-Nov-2014.) $)
    porpss $p |- [C.] Po A $=
      ( vx vy vz crpss wpo cv wbr wn wa wi wral wpss pssirr psstr brrpss notbii
      vex anbi12i imbi12i mpbir2an rgenw rgen2w df-po mpbir ) AEFBGZUFEHZIZUFCG
      ZEHZUIDGZEHZJZUFUKEHZKZJZDALZCALBALUQBCAAUPDAUPUFUFMZIZUFUIMZUIUKMZJZUFUK
      MZKZUFNUFUIUKOUHUSUOVDUGURUFUFBRPQUMVBUNVCUJUTULVAUFUICRPUIUKDRZPSUFUKVEP
      TSUAUBUCBCDAEUDUE $.

    $( Express strict ordering under proper subsets, i.e. the notion of a chain
       of sets.  (Contributed by Stefan O'Rear, 2-Nov-2014.) $)
    sorpss $p |- ( [C.] Or A <-> A. x e. A A. y e. A ( x C_ y \/ y C_ x ) ) $=
      ( cv crpss wbr weq w3o wral wpo wss wor porpss biantrur wpss sspsstri vex
      wa wo brrpss biid 3orbi123i bitr4i 2ralbii df-so 3bitr4ri ) ADZBDZEFZABGZ
      UHUGEFZHZBCIACIZCEJZUMRUGUHKUHUGKSZBCIACICELUNUMCMNUOULABCCUOUGUHOZUJUHUG
      OZHULUGUHPUIUPUJUJUKUQUGUHBQTUJUAUHUGAQTUBUCUDABCEUEUF $.
  $}

  $( Property of a chain of sets.  (Contributed by Stefan O'Rear,
     2-Nov-2014.) $)
  sorpssi $p |- ( ( [C.] Or A /\ ( B e. A /\ C e. A ) ) ->
      ( B C_ C \/ C C_ B ) ) $=
    ( crpss wor wcel wa wpss wceq w3o wss wo wbr solin wb elex ad2antll brrpssg
    cvv syl biidd ad2antrl 3orbi123d mpbid sspsstri sylibr ) ADEZBAFZCAFZGGZBCH
    ZBCIZCBHZJZBCKCBKLUJBCDMZULCBDMZJUNABCDNUJUOUKULULUPUMUJCSFZUOUKOUIUQUGUHCA
    PQBCSRTUJULUAUJBSFZUPUMOUHURUGUIBAPUBCBSRTUCUDBCUEUF $.

  $( A chain of sets is closed under binary union.  (Contributed by Mario
     Carneiro, 16-May-2015.) $)
  sorpssun $p |- ( ( [C.] Or A /\ ( B e. A /\ C e. A ) ) ->
      ( B u. C ) e. A ) $=
    ( crpss wor wcel wa wss cun simprr wb ssequn1 eleq1 sylbi syl5ibrcom simprl
    wceq ssequn2 sorpssi mpjaod ) ADEZBAFZCAFZGGZBCHZBCIZAFZCBHZUDUGUEUCUAUBUCJ
    UEUFCQUGUCKBCLUFCAMNOUDUGUHUBUAUBUCPUHUFBQUGUBKCBRUFBAMNOABCST $.

  $( A chain of sets is closed under binary intersection.  (Contributed by
     Mario Carneiro, 16-May-2015.) $)
  sorpssin $p |- ( ( [C.] Or A /\ ( B e. A /\ C e. A ) ) ->
      ( B i^i C ) e. A ) $=
    ( crpss wor wcel wa wss cin simprl wceq df-ss eleq1 sylbi syl5ibrcom simprr
    wb dfss1 sorpssi mpjaod ) ADEZBAFZCAFZGGZBCHZBCIZAFZCBHZUDUGUEUBUAUBUCJUEUF
    BKUGUBQBCLUFBAMNOUDUGUHUCUAUBUCPUHUFCKUGUCQCBRUFCAMNOABCST $.

  ${
    $d Y z w u v $.
    $( In a chain of sets, a maximal element is the union of the chain.
       (Contributed by Stefan O'Rear, 2-Nov-2014.) $)
    sorpssuni $p |- ( [C.] Or Y -> ( E. u e. Y A. v e. Y -. u C. v <->
        U. Y e. Y ) ) $=
      ( crpss wor cv wpss wn wral wrex cuni wcel w3a wss wa sorpssi syl elssuni
      wo wi anassrs sspss orel1 eqimss2 syl6com sylbi ax-1 jaoi ralimdva 3impia
      weq unissb sylibr 3ad2ant2 eqssd simp2 rexlimdv3a ssnpss rgen wceq psseq1
      eqeltrd notbid ralbidv rspcev mpan2 impbid1 ) CDEZBFZAFZGZHZACIZBCJZCKZCL
      ZVHVMVPBCVHVICLZVMMZVOVICVRVOVIVRVJVINZACIZVOVINVHVQVMVTVHVQOZVLVSACWAVJC
      LZOVIVJNZVSSZVLVSTZVHVQWBWDCVIVJPUAWCWEVSWCVKBAUKZSZWEVIVJUBVLWGWFVSVKWFU
      CVJVIUDUEUFVSVLUGUHQUIUJACVIULUMVQVHVIVONVMVICRUNUOVHVQVMUPVBUQVPVOVJGZHZ
      ACIZVNWIACWBVJVONWIVJCRVJVOURQUSVMWJBVOCVIVOUTZVLWIACWKVKWHVIVOVJVAVCVDVE
      VFVG $.

    $( In a chain of sets, a minimal element is the intersection of the chain.
       (Contributed by Stefan O'Rear, 2-Nov-2014.) $)
    sorpssint $p |- ( [C.] Or Y -> ( E. u e. Y A. v e. Y -. v C. u <->
        |^| Y e. Y ) ) $=
      ( crpss wor cv wpss wn wral wrex cint wcel w3a wss intss1 3ad2ant2 wa syl
      wo wi sorpssi anassrs ax-1 weq sspss orel1 eqimss2 syl6com sylbi ralimdva
      jaoi 3impia ssint sylibr eqssd eqeltrd rexlimdv3a ssnpss rgen wceq psseq2
      simp2 notbid ralbidv rspcev mpan2 impbid1 ) CDEZAFZBFZGZHZACIZBCJZCKZCLZV
      HVMVPBCVHVJCLZVMMZVOVJCVRVOVJVQVHVOVJNVMVJCOPVRVJVINZACIZVJVONVHVQVMVTVHV
      QQZVLVSACWAVICLZQVSVIVJNZSZVLVSTZVHVQWBWDCVJVIUAUBVSWEWCVSVLUCWCVKABUDZSZ
      WEVIVJUEVLWGWFVSVKWFUFVJVIUGUHUIUKRUJULAVJCUMUNUOVHVQVMVBUPUQVPVIVOGZHZAC
      IZVNWIACWBVOVINWIVICOVOVIURRUSVMWJBVOCVJVOUTZVLWIACWKVKWHVJVOVIVAVCVDVEVF
      VG $.
  $}

  ${
    $d Y z w b c $.  $d Y x y $.  $d Y d $.  $d d A b c $.  $d A x y b c $.
    $d Y u $.  $d A u $.  $d d u x y $.
    $( The componentwise complement of a chain of sets is also a chain of
       sets.  (Contributed by Stefan O'Rear, 2-Nov-2014.) $)
    sorpsscmpl $p |- ( [C.] Or Y -> [C.] Or { u e. ~P A | ( A \ u ) e. Y } ) $=
      ( vx vy crpss wor cv wss wo cdif wcel wral wa difeq2 eleq1d elrab syl2anb
      weq wi cpw crab biimpi sorpssi expcom wceq selpw dfss4 bitri sscon sseq12
      an4 syl5ib wb ancoms orim12d com12 orcoms syl6 impd syl5 ralrimivv sorpss
      com3l sylibr ) CFGZDHZEHZIZVHVGIZJZEBAHZKZCLZABUAZUBZMDVPMVPFGVFVKDEVPVPV
      GVPLZVHVPLZNVGVOLZVHVOLZNZBVGKZCLZBVHKZCLZNZNZVFVKVQVSWCNZVTWENZWGVRVNWCA
      VGVOADSVMWBCVLVGBOPQVNWEAVHVOAESVMWDCVLVHBOPQWHWINWGVSWCVTWEULUCRVFWAWFVK
      WFVFWAVKWFVFWBWDIZWDWBIZJZWAVKTZVFWFWLCWBWDUDUEWKWJWMWAWKWJJZVKVSBWBKZVGU
      FZBWDKZVHUFZWNVKTVTVSVGBIWPDBUGVGBUHUIVTVHBIWREBUGVHBUHUIWPWRNZWKVIWJVJWK
      WOWQIWSVIWDWBBUJWOVGWQVHUKUMWJWQWOIZWSVJWBWDBUJWRWPWTVJUNWQVHWOVGUKUOUMUP
      RUQURUSVDUTVAVBDEVPVCVE $.
  $}


$(
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
             ZF Set Theory - add the Axiom of Union
#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#*#
$)

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                  Introduce the Axiom of Union
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d w x y z $.
    $( Axiom of Union.  An axiom of Zermelo-Fraenkel set theory.  It states
       that a set ` y ` exists that includes the union of a given set ` x `
       i.e. the collection of all members of the members of ` x ` .  The
       variant ~ axun2 states that the union itself exists.  A version with the
       standard abbreviation for union is ~ uniex2 .  A version using class
       notation is ~ uniex .

       The union of a class ~ df-uni should not be confused with the union of
       two classes ~ df-un .  Their relationship is shown in ~ unipr .
       (Contributed by NM, 23-Dec-1993.) $)
    ax-un $a |- E. y A. z ( E. w ( z e. w /\ w e. x ) -> z e. y ) $.

    $( Axiom of Union expressed with the fewest number of different variables.
       (Contributed by NM, 14-Aug-2003.) $)
    zfun $p |- E. x A. y ( E. x ( y e. x /\ x e. z ) -> y e. x ) $=
      ( vw wel wa wex wi wal ax-un weq elequ2 elequ1 anbi12d cbvexv albii exbii
      imbi1i mpbi ) BDEZDCEZFZDGZBAEZHZBIZAGUDACEZFZAGZUDHZBIZAGCABDJUFUKAUEUJB
      UCUIUDUBUHDADAKTUDUAUGDABLDACMNORPQS $.

    $( A variant of the Axiom of Union ~ ax-un .  For any set ` x ` , there
       exists a set ` y ` whose members are exactly the members of the members
       of ` x ` i.e. the union of ` x ` .  Axiom Union of [BellMachover]
       p. 466.  (Contributed by NM, 4-Jun-2006.) $)
    axun2 $p |- E. y A. z ( z e. y <-> E. w ( z e. w /\ w e. x ) ) $=
      ( wel wa wex ax-un bm1.3ii ) CDEDAEFDGBCABCDHI $.

    $( The Axiom of Union using the standard abbreviation for union.  Given any
       set ` x ` , its union ` y ` exists.  (Contributed by NM, 4-Jun-2006.) $)
    uniex2 $p |- E. y y = U. x $=
      ( vz cv cuni wceq wex wcel wb wi wa zfun eluni imbi1i albii exbii bm1.3ii
      wal mpbir dfcleq ) BDZADZEZFZBGCDZUAHZUEUCHZICRZBGUGBCUGUFJZCRZBGUFUAUBHK
      BGZUFJZCRZBGBCALUJUMBUIULCUGUKUFBUEUBMNOPSQUDUHBCUAUCTPS $.
  $}

  ${
    $d x y A $.
    uniex.1 $e |- A e. _V $.
    $( The Axiom of Union in class notation.  This says that if ` A ` is a set
       i.e. ` A e. _V ` (see ~ isset ), then the union of ` A ` is also a set.
       Same as Axiom 3 of [TakeutiZaring] p. 16.  (Contributed by NM,
       11-Aug-1993.) $)
    uniex $p |- U. A e. _V $=
      ( vx vy cv cuni cvv wcel wceq unieq eleq1d uniex2 issetri vtocl ) CEZFZGH
      AFZGHCABOAIPQGOAJKDPCDLMN $.
  $}

  ${
    $d x A $.
    $( The ZF Axiom of Union in class notation, in the form of a theorem
       instead of an inference.  We use the antecedent ` A e. V ` instead of
       ` A e. _V ` to make the theorem more general and thus shorten some
       proofs; obviously the universal class constant ` _V ` is one possible
       substitution for class variable ` V ` .  (Contributed by NM,
       25-Nov-1994.) $)
    uniexg $p |- ( A e. V -> U. A e. _V ) $=
      ( vx cv cuni cvv wcel wceq unieq eleq1d vex uniex vtoclg ) CDZEZFGAEZFGCA
      BNAHOPFNAIJNCKLM $.
  $}

  ${
    unex.1 $e |- A e. _V $.
    unex.2 $e |- B e. _V $.
    $( The union of two sets is a set.  Corollary 5.8 of [TakeutiZaring]
       p. 16.  (Contributed by NM, 1-Jul-1994.) $)
    unex $p |- ( A u. B ) e. _V $=
      ( cpr cuni cun cvv unipr prex uniex eqeltrri ) ABEZFABGHABCDIMABJKL $.
  $}

  $( An unordered triple of classes exists.  (Contributed by NM,
     10-Apr-1994.) $)
  tpex $p |- { A , B , C } e. _V $=
    ( ctp cpr csn cun cvv df-tp prex snex unex eqeltri ) ABCDABEZCFZGHABCINOABJ
    CKLM $.

  ${
    $d x y A $.  $d x y B $.
    $( Existence of union is equivalent to existence of its components.
       (Contributed by NM, 11-Jun-1998.) $)
    unexb $p |- ( ( A e. _V /\ B e. _V ) <-> ( A u. B ) e. _V ) $=
      ( vx vy cvv wcel wa cun cv wceq uneq1 eleq1d uneq2 vex unex vtocl2g ssun1
      wss ssexg mpan ssun2 jca impbii ) AEFZBEFZGABHZEFZCIZDIZHZEFAUIHZEFUGCDAB
      EEUHAJUJUKEUHAUIKLUIBJUKUFEUIBAMLUHUICNDNOPUGUDUEAUFRUGUDABQAUFESTBUFRUGU
      EBAUABUFESTUBUC $.
  $}

  $( A union of two sets is a set.  Corollary 5.8 of [TakeutiZaring] p. 16.
     (Contributed by NM, 18-Sep-2006.) $)
  unexg $p |- ( ( A e. V /\ B e. W ) -> ( A u. B ) e. _V ) $=
    ( wcel cvv cun elex wa unexb biimpi syl2an ) ACEAFEZBFEZABGFEZBDEACHBDHMNIO
    ABJKL $.

  $( The Cartesian product of two sets is a set.  Proposition 6.2 of
     [TakeutiZaring] p. 23.  See also ~ xpexgALT .  (Contributed by NM,
     14-Aug-1994.) $)
  xpexg $p |- ( ( A e. V /\ B e. W ) -> ( A X. B ) e. _V ) $=
    ( wcel wa cxp cun cpw wss cvv xpsspw unexg pwexg 3syl ssexg sylancr ) ACEBD
    EFZABGZABHZIZIZJUBKEZSKEABLRTKEUAKEUCABCDMTKNUAKNOSUBKPQ $.

  $( The Cartesian product of three sets is a set.  (Contributed by Alexander
     van der Vekens, 21-Feb-2018.) $)
  3xpexg $p |- ( V e. W -> ( ( V X. V ) X. V ) e. _V ) $=
    ( cxp cvv wcel xpexg anidms mpancom ) AACZDEZABEZIACDEKJAABBFGIADBFH $.

  ${
    xpex.1 $e |- A e. _V $.
    xpex.2 $e |- B e. _V $.
    $( The Cartesian product of two sets is a set.  Proposition 6.2 of
       [TakeutiZaring] p. 23.  (Contributed by NM, 14-Aug-1994.) $)
    xpex $p |- ( A X. B ) e. _V $=
      ( cvv wcel cxp xpexg mp2an ) AEFBEFABGEFCDABEEHI $.
  $}

  $( The Cartesian square of a set is a set.  (Contributed by AV,
     13-Jan-2020.) $)
  sqxpexg $p |- ( A e. V -> ( A X. A ) e. _V ) $=
    ( wcel cxp cvv xpexg anidms ) ABCAADECAABBFG $.

  ${
    $d x y z $.
    $( The class of all singletons is a proper class.  (Contributed by NM,
       10-Oct-2008.)  (Proof shortened by Eric Schmidt, 7-Dec-2008.) $)
    snnex $p |- { x | E. y x = { y } } e/ _V $=
      ( vz cv csn wceq wex cab cvv wcel cuni vprc wa ssnid ax6ev equcoms eximii
      sneq snex eleq2 eqeq1 exbidv anbi12d spcev mp2an eluniab mpbir vex eleq1i
      2th eqriv mtbir uniexg mto nelir ) ADZBDZEZFZBGZAHZIVAIJVAKZIJZVCIIJLVBII
      CVBICDZVBJZVDIJVEVDUPJZUTMZAGZVDVDEZJZVIURFZBGZVHCNUQVDFVKBBCOVKCBVDUQRPQ
      VGVJVLMAVIVDSUPVIFZVFVJUTVLUPVIVDTVMUSVKBUPVIURUAUBUCUDUEUTAVDUFUGCUHUJUK
      UIULVAIUMUNUO $.
  $}

  $( If the subtrahend of a class difference exists, then the minuend exists
     iff the difference exists.  (Contributed by NM, 12-Nov-2003.)  (Proof
     shortened by Andrew Salmon, 12-Aug-2011.) $)
  difex2 $p |- ( B e. C -> ( A e. _V <-> ( A \ B ) e. _V ) ) $=
    ( wcel cvv cdif difexg wa cun ssun2 uncom undif2 eqtr2i sseqtri unexg ssexg
    wss sylancr expcom impbid2 ) BCDZAEDZABFZEDZABEGUDUAUBUDUAHAUCBIZQUEEDUBABA
    IZUEABJUEBUCIUFUCBKBALMNUCBECOAUEEPRST $.

  $( If the difference of a class and a singleton is a set, the class itself is
     a set.  (Contributed by AV, 15-Jan-2019.) $)
  difsnexi $p |- ( ( N \ { K } ) e. _V -> N e. _V ) $=
    ( wcel csn cdif cvv wi wa simpr snex unexg sylancl wb difsnid eqcomd eleq1d
    cun adantr mpbird ex wn difsn biimpd pm2.61i ) ABCZBADZEZFCZBFCZGUEUHUIUEUH
    HZUIUGUFQZFCZUJUHUFFCULUEUHIAJUGUFFFKLUEUIULMUHUEBUKFUEUKBBANOPRSTUEUAZUHUI
    UMUGBFABUBPUCUD $.

  ${
    $d A x y v z $.  $d A x y u z $.
    $( Expression for double union that moves union into a class builder.
       (Contributed by FL, 28-May-2007.) $)
    uniuni $p |- U. U. A = U. { x | E. y ( x = U. y /\ y e. A ) } $=
      ( vz vu vv wel cv cuni wcel wex cab wceq eluni anbi2i exbii 19.42v bicomi
      wa 3bitri excom anass ancom bitr3i 2exbii exdistr vex uniex eleq2 ceqsexv
      exancom bitri 3bitr2i eqeq1 anbi1d exbidv elab abbii df-uni 3eqtr4i ) DEG
      ZEHZCIZJZSZEKZDLDFGZFHZAHZBHZIZMZVJCJZSZBKZALZJZSZFKZDLVCIVPIVFVSDVFVAEBG
      ZVMSZBKZSZEKZVMDHZVKJZSZBKZVSVEWCEVDWBVABVBCNOPWDVAWASZBKZEKZVMVAVTSZEKZS
      ZBKZWHWCWJEWJWCVAWABQRPWKWIEKBKVMWLSZEKBKWOWIEBUAWIWPBEWIWLVMSWPVAVTVMUBW
      LVMUCUDUEVMWLBEUFTWNWGBWMWFVMWFWMEWEVJNROPTWHVGVHVKMZVMSZSZFKZBKWSBKFKZVS
      WGWTBWGVMVGWQSZFKZSVMXBSZFKWTWFXCVMWFWQVGSFKXCVGWFFVKVJBUGUHVHVKWEUIUJWQV
      GFUKUDOVMXBFQXDWSFXDXBVMSWSVMXBUCVGWQVMUBULPUMPWSBFUAXAVGWRBKZSZFKVSVGWRF
      BUFXFVRFXEVQVGVQXEVOXEAVHFUGVIVHMZVNWRBXGVLWQVMVIVHVKUNUOUPUQROPULTTURDEV
      CUSDFVPUSUT $.
  $}

  $( The Axiom of Union and its converse.  A class is a set iff its union is a
     set.  (Contributed by NM, 11-Nov-2003.) $)
  uniexb $p |- ( A e. _V <-> U. A e. _V ) $=
    ( cvv wcel cuni uniexg cpw wss pwuni pwexg ssexg sylancr impbii ) ABCZADZBC
    ZABEOANFZGPBCMAHNBIAPBJKL $.

  $( The Axiom of Power Sets and its converse.  A class is a set iff its power
     class is a set.  (Contributed by NM, 11-Nov-2003.) $)
  pwexb $p |- ( A e. _V <-> ~P A e. _V ) $=
    ( cpw cvv wcel cuni uniexb unipw eleq1i bitr2i ) ABZCDJEZCDACDJFKACAGHI $.

  ${
    eldifpw.1 $e |- C e. _V $.
    $( Membership in a power class difference.  (Contributed by NM,
       25-Mar-2007.) $)
    eldifpw $p |- ( ( A e. ~P B /\ -. C C_ B ) ->
                   ( A u. C ) e. ( ~P ( B u. C ) \ ~P B ) ) $=
      ( cpw wcel wss wn wa cun elpwi unss1 cvv wb unexg mpan2 elpwg syl syl5ibr
      cdif mpd unssbd con3i anim12i eldif sylibr ) ABEZFZCBGZHZIACJZBCJZEZFZUKU
      GFZHZIUKUMUGTFUHUNUJUPUHABGZUNABKUQUNUHUKULGZABCLUHUKMFZUNURNUHCMFUSDACUG
      MOPUKULMQRSUAUOUIUOACBUKBKUBUCUDUKUMUGUEUF $.

    $( Membership in the power class of a union.  (Contributed by NM,
       26-Mar-2007.) $)
    elpwun $p |- ( A e. ~P ( B u. C ) <-> ( A \ C ) e. ~P B ) $=
      ( cun cpw wcel cvv cdif wb difex2 ax-mp sylibr wss elpwg difexg syl uncom
      elex sseq2i ssundif bitri syl6rbbr bitrd pm5.21nii ) ABCEZFZGZAHGZACIZBFZ
      GZAUGSULUJHGZUIUJUKSCHGUIUMJDACHKLMUIUHAUFNZULAUFHOUIULUJBNZUNUIUMULUOJAC
      HPUJBHOQUNACBEZNUOUFUPABCRTACBUAUBUCUDUE $.
  $}

  ${
    $d x y A $.
    iunpw.1 $e |- A e. _V $.
    $( An indexed union of a power class in terms of the power class of the
       union of its index.  Part of Exercise 24(b) of [Enderton] p. 33.
       (Contributed by NM, 29-Nov-2003.) $)
    iunpw $p |- ( E. x e. A x = U. A <-> ~P U. A = U_ x e. A ~P x ) $=
      ( vy cv cuni wceq wrex cpw ciun wss wcel sseq2 biimprcd com12 ssiun selpw
      reximdv eliun wa uniiun syl6sseqr impbid1 rexbii bitri 3bitr4g eqrdv ssid
      uniex elpw eleq2 syl5bbr mpbii sylib elssuni elpwi anim12i eqss sylibr ex
      reximia syl impbii ) AEZBFZGZABHZVEIZABVDIZJZGZVGDVHVJVGDEZVEKZVLVDKZABHZ
      VLVHLVLVJLZVGVMVOVMVGVOVMVFVNABVFVNVMVDVEVLMNROVOVLABVDJVEABVDVLPABUAUBUC
      DVEQVPVLVILZABHVOAVLBVISVQVNABDVDQUDUEUFUGVKVEVILZABHZVGVKVEVJLZVSVKVEVEK
      ZVTVEUHWAVEVHLVKVTVEVEBCUIUJVHVJVEUKULUMAVEBVISUNVRVFABVDBLZVRVFWBVRTVDVE
      KZVEVDKZTVFWBWCVRWDVDBUOVEVDUPUQVDVEURUSUTVAVBVC $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.  $d x y D $.  $d x y R $.
    $( A well-founded relation has no 3-cycle loops.  Special case of
       Proposition 6.23 of [TakeutiZaring] p. 30.  (Contributed by NM,
       10-Apr-1994.)  (Revised by Mario Carneiro, 22-Jun-2015.) $)
    fr3nr $p |- ( ( R Fr A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
                -. ( B R C /\ C R D /\ D R B ) ) $=
      ( vy vx wcel w3a wbr wn wral wss csn wb wceq breq2 notbid ralbidv syl wfr
      wa w3o cv ctp wrex cvv c0 wne a1i simpl cpr cun df-tp simpr1 simpr2 prssi
      tpex syl2anc simpr3 snssd unssd syl5eqss tpnzd fri syl22anc rextpg adantl
      mpbid wi snsstp3 snssg mpbiri breq1 rspcv snsstp1 3orim123d 3ianor sylibr
      snsstp2 mpd 3anrot sylnib ) AEUAZBAHZCAHZDAHZIZUBZDBEJZBCEJZCDEJZIZWKWLWJ
      IWIWJKZWKKZWLKZUCZWMKWIFUDZBEJZKZFBCDUEZLZWRCEJZKZFXALZWRDEJZKZFXALZUCZWQ
      WIWRGUDZEJZKZFXALZGXAUFZXIWIXAUGHZWDXAAMXAUHUIXNXOWIBCDURUJWDWHUKWIXABCUL
      ZDNZUMABCDUNWIXPXQAWIWEWFXPAMWDWEWFWGUOZWDWEWFWGUPZBCAUQUSWIDAWDWEWFWGUTZ
      VAVBVCWIBCDAXRVDGFAXAUGEVEVFWHXNXIOWDXMXBXEXHGBCDAAAXJBPZXLWTFXAYAXKWSXJB
      WREQRSXJCPZXLXDFXAYBXKXCXJCWREQRSXJDPZXLXGFXAYCXKXFXJDWREQRSVGVHVIWIXBWNX
      EWOXHWPWIDXAHZXBWNVJWIYDXQXAMZBCDVKWIWGYDYEOXTDXAAVLTVMWTWNFDXAWRDPWSWJWR
      DBEVNRVOTWIBXAHZXEWOVJWIYFBNXAMZBCDVPWIWEYFYGOXRBXAAVLTVMXDWOFBXAWRBPXCWK
      WRBCEVNRVOTWICXAHZXHWPVJWIYHCNXAMZBCDVTWIWFYHYIOXSCXAAVLTVMXGWPFCXAWRCPXF
      WLWRCDEVNRVOTVQWAWJWKWLVRVSWJWKWLWBWC $.
  $}

  $( A set well-founded by epsilon contains no 3-cycle loops.  (Contributed by
     NM, 19-Apr-1994.)  (Revised by Mario Carneiro, 22-Jun-2015.) $)
  epne3 $p |- ( ( _E Fr A /\ ( B e. A /\ C e. A /\ D e. A ) ) ->
                -. ( B e. C /\ C e. D /\ D e. B ) ) $=
    ( cep wfr wcel w3a wa wbr fr3nr wb epelg 3ad2ant2 3ad2ant3 3anbi123d adantl
    3ad2ant1 mtbid ) AEFZBAGZCAGZDAGZHZIBCEJZCDEJZDBEJZHZBCGZCDGZDBGZHZABCDEKUD
    UHULLTUDUEUIUFUJUGUKUBUAUEUILUCBCAMNUCUAUFUJLUBCDAMOUAUBUGUKLUCDBAMRPQS $.

  ${
    $d x y z R $.  $d x y z A $.
    $( Alternate definition of well-ordering.  Definition 6.24(2) of
       [TakeutiZaring] p. 30.  (Contributed by NM, 16-Mar-1997.)  (Proof
       shortened by Andrew Salmon, 12-Aug-2011.) $)
    dfwe2 $p |- ( R We A <-> ( R Fr A /\ A. x e. A A. y e. A
                ( x R y \/ x = y \/ y R x ) ) ) $=
      ( vz wa cv wbr weq w3o wral wn wi wcel w3a wal breq2 r3al 3imtr4g ralbii
      wwe wfr wor df-we df-so simpr ax-1 fr2nr 3adantr3 anbi2d notbid syl5ibcom
      wpo pm2.21 syl6 fr3nr df-3an biimpri ancoms nsyl pm2.21d expd 3jaod frirr
      a1i 3ad2antr1 jctild ex a2d alimdv 2alimdv ralidm equequ2 breq1 3orbi123d
      cbvralv bitr3i df-po ancrd impbid2 syl5bb pm5.32i bitri ) CDUACDUBZCDUCZF
      WDAGZBGZDHZABIZWGWFDHZJZBCKZACKZFCDUDWDWEWMWECDUMZWMFZWDWMABCDUEWDWOWMWNW
      MUFWDWMWNWDWFEGZDHZAEIZWPWFDHZJZECKZBCKZACKZWFWFDHLZWHWGWPDHZFZWQMZFZECKB
      CKACKZWMWNWDWFCNZWGCNZWPCNZOZWTMZEPZBPAPXMXHMZEPZBPAPXCXIWDXOXQABWDXNXPEW
      DXMWTXHWDXMWTXHMWDXMFZWTXGXDXRWQXGWRWSWQXGMXRWQXFUGVEXRWRXFLZXGXRWHWJFZLZ
      WRXSWDXJXKYAXLCWFWGDUHUIWRXTXFWRWJXEWHWFWPWGDQUJUKULXFWQUNUOXRWSXFWQXRWSX
      FFZWQXRWHXEWSOZYBCWFWGWPDUPXFWSYCYCXFWSFWHXEWSUQURUSUTVAVBVCWDXKXJXDXLCWF
      DVDVFVGVHVIVJVKWTABECCCRXHABECCCRSWLXBACWLWLBCKXBWKBCVLWLXABCWKWTBECBEIWH
      WQWIWRWJWSWGWPWFDQBEAVMWGWPWFDVNVOVPTVQTABECDVRSVSVTWAWBWC $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        Ordinals (continued)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x y $.
    $( The class of all ordinal numbers is ordinal.  Proposition 7.12 of
       [TakeutiZaring] p. 38, but without using the Axiom of Regularity.
       (Contributed by NM, 17-May-1994.) $)
    ordon $p |- Ord On $=
      ( vx vy con0 word wtr cep wwe tron wfr cv wbr weq wral onfr wcel eloni wa
      w3o epel mpbir2an ordtri3or 3orbi123i sylibr syl2an rgen2a dfwe2 df-ord
      biid ) CDCECFGZHUICFIAJZBJZFKZABLZUKUJFKZRZBCMACMNUOABCUJCOUJDZUKDZUOUKCO
      UJPUKPUPUQQUJUKOZUMUKUJOZRUOUJUKUAULURUMUMUNUSABSUMUHBASUBUCUDUEABCFUFTCU
      GT $.
  $}

  $( The epsilon relation well-orders the class of ordinal numbers.
     Proposition 4.8(g) of [Mendelson] p. 244.  (Contributed by NM,
     1-Nov-2003.) $)
  epweon $p |- _E We On $=
    ( con0 word cep wwe ordon ordwe ax-mp ) ABACDEAFG $.

  $( No set contains all ordinal numbers.  Proposition 7.13 of [TakeutiZaring]
     p. 38, but without using the Axiom of Regularity.  This is also known as
     the Burali-Forti paradox (remark in [Enderton] p. 194).  In 1897, Cesare
     Burali-Forti noticed that since the ""set"" of all ordinal numbers is an
     ordinal class ( ~ ordon ), it must be both an element of the set of all
     ordinal numbers yet greater than every such element.  ZF set theory
     resolves this paradox by not allowing the class of all ordinal numbers to
     be a set (so instead it is a proper class).  Here we prove the denial of
     its existence.  (Contributed by NM, 18-May-1994.) $)
  onprc $p |- -. On e. _V $=
    ( con0 cvv wcel word wn ordon ordirr ax-mp elong mpbiri mto ) ABCZAACZADZME
    FAGHLMNFABIJK $.

  ${
    $d x y A $.
    $( The union of a class of ordinal numbers is ordinal.  Proposition 7.19 of
       [TakeutiZaring] p. 40.  (Contributed by NM, 30-May-1994.)  (Proof
       shortened by Andrew Salmon, 12-Aug-2011.) $)
    ssorduni $p |- ( A C_ On -> Ord U. A ) $=
      ( vx vy con0 wss cuni wtr word cv wral wcel wrex eluni2 wa wi ssel onelss
      syl6 rexlimdv syl5bi anc2r syl ssuni syl8 ralrimiv dftr3 sylibr onelon ex
      ssrdv ordon trssord 3exp mpii sylc ) ADEZAFZGZUQDEZUQHZUPBIZUQEZBUQJURUPV
      BBUQVAUQKZVACIZKZCALZUPVBCVAAMZUPVEVBCAUPVDAKZVEVAVDEZVHNZVBUPVHVEVIOZOVH
      VEVJOOUPVHVDDKZVKADVDPZVDVAQRVHVEVIUAUBVAVDAUCUDSTUEBUQUFUGUPBUQDVCVFUPVA
      DKZVGUPVEVNCAUPVHVLVEVNOVMVLVEVNVDVAUHUIRSTUJURUSDHZUTUKURUSVOUTUQDULUMUN
      UO $.
  $}

  $( The union of a set of ordinal numbers is an ordinal number.  Theorem 9 of
     [Suppes] p. 132.  (Contributed by NM, 1-Nov-2003.) $)
  ssonuni $p |- ( A e. V -> ( A C_ On -> U. A e. On ) ) $=
    ( con0 wss cuni wcel word ssorduni cvv wb uniexg elong syl syl5ibr ) ACDAEZ
    CFZABFZOGZAHQOIFPRJABKOILMN $.

  ${
    ssonuni.1 $e |- A e. _V $.
    $( The union of a set of ordinal numbers is an ordinal number.  Corollary
       7N(d) of [Enderton] p. 193.  (Contributed by NM, 20-Sep-2003.) $)
    ssonunii $p |- ( A C_ On -> U. A e. On ) $=
      ( cvv wcel con0 wss cuni wi ssonuni ax-mp ) ACDAEFAGEDHBACIJ $.
  $}

  $( A way to express the ordinal property of a class in terms of the class of
     ordinal numbers.  Corollary 7.14 of [TakeutiZaring] p. 38 and its
     converse.  (Contributed by NM, 1-Jun-2003.) $)
  ordeleqon $p |- ( Ord A <-> ( A e. On \/ A = On ) ) $=
    ( word con0 wcel wceq wo cvv onprc elex mto w3o ordon ordtri3or mpan2 sylib
    df-3or ord mt3i eloni ordeq mpbiri jaoi impbii ) ABZACDZACEZFZUDUGCADZUHCGD
    HCAIJUDUGUHUDUEUFUHKZUGUHFUDCBZUILACMNUEUFUHPOQRUEUDUFASUFUDUJLACTUAUBUC $.

  $( Any ordinal class is a subclass of the class of ordinal numbers.
     Corollary 7.15 of [TakeutiZaring] p. 38.  (Contributed by NM,
     18-May-1994.)  (Proof shortened by Andrew Salmon, 12-Aug-2011.) $)
  ordsson $p |- ( Ord A -> A C_ On ) $=
    ( word con0 wss ordon wa wcel wceq ordeleqon biimpi adantr ordsseleq mpbird
    wo mpan2 ) ABZCBZACDZEPQFRACGACHNZPSQPSAIJKACLMO $.

  $( An ordinal number is a subset of the class of ordinal numbers.
     (Contributed by NM, 5-Jun-1994.) $)
  onss $p |- ( A e. On -> A C_ On ) $=
    ( con0 wcel word wss eloni ordsson syl ) ABCADABEAFAGH $.

  $( Two ways of saying a class of ordinals is unbounded.  (Contributed by
     Mario Carneiro, 8-Jun-2013.) $)
  ssonprc $p |- ( A C_ On -> ( A e/ _V <-> U. A = On ) ) $=
    ( cvv wnel wcel wn con0 wss cuni wceq df-nel word ssorduni ordeleqon orcomd
    wo sylib ord elex uniexb sylibr syl6 con1d onprc uniexg syl5ib mtoi impbid1
    eleq1 syl5bb ) ABCABDZEZAFGZAHZFIZABJULUKUNULUNUJULUNEUMFDZUJULUNUOULUOUNUL
    UMKUOUNOALUMMPNQUOUMBDZUJUMFRASTUAUBUNUJFBDZUCUJUPUNUQABUDUMFBUHUEUFUGUI $.

  $( The union of an ordinal number is an ordinal number.  (Contributed by NM,
     29-Sep-2006.) $)
  onuni $p |- ( A e. On -> U. A e. On ) $=
    ( con0 wcel wss cuni onss ssonuni mpd ) ABCABDAEBCAFABGH $.

  $( The union of an ordinal class is ordinal.  (Contributed by NM,
     12-Sep-2003.) $)
  orduni $p |- ( Ord A -> Ord U. A ) $=
    ( word con0 wss cuni ordsson ssorduni syl ) ABACDAEBAFAGH $.

  ${
    $d x y z A $.
    $( The intersection (infimum) of a nonempty class of ordinal numbers
       belongs to the class.  Compare Exercise 4 of [TakeutiZaring] p. 45.
       (Contributed by NM, 31-Jan-1997.) $)
    onint $p |- ( ( A C_ On /\ A =/= (/) ) -> |^| A e. A ) $=
      ( vx vy vz con0 wss c0 wne cint wcel wa cv cin wceq wrex wi wel ssel wral
      exp32 word ordon tz7.5 mp3an1 imdistani wn ontri1 syl6bir ex sylan9 com4r
      imp31 ralimdva disj vex elint2 3imtr4g sylan2 com4l imp32 intss1 ad2antrl
      ssrdv eqssd eleq1d biimpd com34 pm2.43d rexlimdv syl5 anabsi5 ) AEFZAGHZA
      IZAJZVLVMKABLZMGNZBAOZVLVOEUAVLVMVRUBBEAUCUDVLVQVOBAVLVPAJZVQVOPVLVSVQVSV
      OVLVSVQVSVOPVLVSVQKKZVSVOVTVPVNAVTVPVNVTCVPVNVLVSVQCBQZCLZVNJZPWAVLVSVQWC
      WAVLVSVQWCPZVLVSKWAVLVPEJZKZWDVLVSWEAEVPRUEWAWFKZDBQUFZDASCDQZDASVQWCWGWH
      WIDAWAWFDLZAJZWHWIPWFWKWHWAWIVLWKWJEJZWEWHWAWIPZPZAEWJRWEWLWNWEWLKWHVPWJF
      WMVPWJUGVPWJWBRUHUIUJUKULUMDAVPUNDWBACUOUPUQURTUSUTVCVSVNVPFVLVQVPAVAVBVD
      VEVFTVGVHVIVJVK $.
  $}

  $( The intersection of a class of ordinal numbers is zero iff the class
     contains zero.  (Contributed by NM, 24-Apr-2004.) $)
  onint0 $p |- ( A C_ On -> ( |^| A = (/) <-> (/) e. A ) ) $=
    ( con0 wss cint c0 wceq wcel wa wne cvv 0ex eleq1 mpbiri intex sylibr onint
    sylan2 wb adantl mpbid ex int0el impbid1 ) ABCZADZEFZEAGZUDUFUGUDUFHUEAGZUG
    UFUDAEIZUHUFUEJGZUIUFUJEJGKUEEJLMANOAPQUFUHUGRUDUEEALSTUAAUBUC $.

  ${
    $d x y A $.
    $( A nonempty class of ordinal numbers has the smallest member.  Exercise 9
       of [TakeutiZaring] p. 40.  (Contributed by NM, 3-Oct-2003.) $)
    onssmin $p |- ( ( A C_ On /\ A =/= (/) ) -> E. x e. A A. y e. A x C_ y ) $=
      ( con0 wss c0 wne wa cint wcel cv wral wrex onint rgen wceq sseq1 ralbidv
      intss1 rspcev sylancl ) CDECFGHCIZCJUBBKZEZBCLZAKZUCEZBCLZACMCNUDBCUCCSOU
      HUEAUBCUFUBPUGUDBCUFUBUCQRTUA $.
  $}

  ${
    $d x y $.
    $( If a property is true for some ordinal number, it is true for a minimal
       ordinal number.  This version uses explicit substitution.  Theorem
       Schema 62 of [Suppes] p. 228.  (Contributed by NM, 29-Sep-2003.) $)
    onminesb $p |- ( E. x e. On ph -> [. |^| { x e. On | ph } / x ]. ph ) $=
      ( con0 wrex crab cint wcel wsbc c0 wne rabn0 wss ssrab2 onint mpan sylbir
      nfcv elrabsf simprbi syl ) ABCDZABCEZFZUBGZABUCHZUAUBIJZUDABCKUBCLUFUDABC
      MUBNOPUDUCCGUEABUCCBCQRST $.

    $d y ph $.
    onminsb.1 $e |- F/ x ps $.
    onminsb.2 $e |- ( x = |^| { x e. On | ph } -> ( ph <-> ps ) ) $.
    $( If a property is true for some ordinal number, it is true for a minimal
       ordinal number.  This version uses implicit substitution.  Theorem
       Schema 62 of [Suppes] p. 228.  (Contributed by NM, 3-Oct-2003.) $)
    onminsb $p |- ( E. x e. On ph -> ps ) $=
      ( con0 wrex crab cint wcel wne rabn0 wss ssrab2 onint sylbir nfrab1 nfint
      c0 mpan nfcv elrabf simprbi syl ) ACFGZACFHZIZUFJZBUEUFSKZUHACFLUFFMUIUHA
      CFNUFOTPUHUGFJBABCUGFCUFACFQRCFUADEUBUCUD $.
  $}

  $( The intersection of a nonempty collection of ordinal numbers is an ordinal
     number.  Compare Exercise 6 of [TakeutiZaring] p. 44.  (Contributed by NM,
     29-Jan-1997.) $)
  oninton $p |- ( ( A C_ On /\ A =/= (/) ) -> |^| A e. On ) $=
    ( con0 wss c0 wne cint wcel onint ex ssel syld imp ) ABCZADEZAFZBGZMNOAGZPM
    NQAHIABOJKL $.

  $( The intersection of a class of ordinal numbers exists iff it is an ordinal
     number.  (Contributed by NM, 6-Nov-2003.) $)
  onintrab $p |- ( |^| { x e. On | ph } e. _V <->
                 |^| { x e. On | ph } e. On ) $=
    ( con0 crab cint cvv wcel c0 wne wss ssrab2 oninton mpan sylbir elex impbii
    intex ) ABCDZEZFGZSCGZTRHIZUARQRCJUBUAABCKRLMNSCOP $.

  $( An existence condition equivalent to an intersection's being an ordinal
     number.  (Contributed by NM, 6-Nov-2003.) $)
  onintrab2 $p |- ( E. x e. On ph <-> |^| { x e. On | ph } e. On ) $=
    ( con0 wrex crab cint cvv wcel intexrab onintrab bitri ) ABCDABCEFZGHLCHABC
    IABJK $.

  $( No member of a set of ordinal numbers belongs to its minimum.
     (Contributed by NM, 2-Feb-1997.) $)
  onnmin $p |- ( ( A C_ On /\ B e. A ) -> -. B e. |^| A ) $=
    ( con0 wss wcel wa cint wn intss1 adantl wb c0 wne ne0i sylan2 ssel2 ontri1
    oninton syl2anc mpbid ) ACDZBAEZFZAGZBDZBUDEHZUBUEUABAIJUCUDCEZBCEUEUFKUBUA
    ALMUGABNAROACBPUDBQST $.

  ${
    $d x A $.  $d x ps $.
    onnminsb.1 $e |- ( x = A -> ( ph <-> ps ) ) $.
    $( An ordinal number smaller than the minimum of a set of ordinal numbers
       does not have the property determining that set. ` ps ` is the wff
       resulting from the substitution of ` A ` for ` x ` in wff ` ph ` .
       (Contributed by NM, 9-Nov-2003.) $)
    onnminsb $p |- ( A e. On -> ( A e. |^| { x e. On | ph } -> -. ps ) ) $=
      ( con0 wcel crab cint wn wa elrab wss ssrab2 onnmin mpan sylbir ex con2d
      ) DFGZBDACFHZIGZTBUBJZTBKDUAGZUCABCDFELUAFMUDUCACFNUADOPQRS $.
  $}

  ${
    $d x A $.  $d x B $.
    $( A way to show that an ordinal number equals the minimum of a nonempty
       collection of ordinal numbers: it must be in the collection, and it must
       not be larger than any member of the collection.  (Contributed by NM,
       14-Nov-2003.) $)
    oneqmin $p |- ( ( B C_ On /\ B =/= (/) ) -> ( A = |^| B <->
                  ( A e. B /\ A. x e. A -. x e. B ) ) ) $=
      ( con0 wss c0 wne wa cint wceq wcel cv wn onint eleq1 syl5ibrcom wi eleq2
      wral adantr biimpd onnmin ex con2d syl9r ralrimdv jcad oneqmini impbid )
      CDEZCFGZHZBCIZJZBCKZALZCKZMZABSZHZULUNUOUSULUOUNUMCKCNBUMCOPUJUNUSQUKUJUN
      URABUNUPBKZUPUMKZUJURUNVAVBBUMUPRUAUJUQVBUJUQVBMCUPUBUCUDUEUFTUGUJUTUNQUK
      ABCUHTUI $.
  $}

  ${
    $d x y A $.
    bm2.5ii.1 $e |- A e. _V $.
    $( Problem 2.5(ii) of [BellMachover] p. 471.  (Contributed by NM,
       20-Sep-2003.) $)
    bm2.5ii $p |- ( A C_ On -> U. A = |^| { x e. On | A. y e. A y C_ x } ) $=
      ( con0 wss cuni wcel cv wral crab cint wceq ssonunii wb unissb a1i inteqi
      rabbiia intmin syl5reqr syl ) CEFCGZEHZUCBIAIZFBCJZAEKZLZMCDNUDUHUCUEFZAE
      KZLUCUJUGUIUFAEUIUFOUEEHBCUEPQSRAUCETUAUB $.
  $}

  ${
    $d x y z $.  $d y z ph $.  $d x z ps $.
    onminex.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    $( If a wff is true for an ordinal number, there is the smallest ordinal
       number for which it is true.  (Contributed by NM, 2-Feb-1997.)  (Proof
       shortened by Mario Carneiro, 20-Nov-2016.) $)
    onminex $p |- ( E. x e. On ph -> E. x e. On ( ph /\ A. y e. x -. ps ) ) $=
      ( vz con0 wrex wsb wn cv wral wa crab cint wcel wss raleq anbi12d nfv wne
      wsbc c0 ssrab2 rabn0 biimpri oninton sylancr onminesb onss sseld onnminsb
      syl syli ralrimiv wceq dfsbcq2 rspcev syl12anc nfan sbequ12 cbvrex sylibr
      nfs1v weq ) ACGHZACFIZBJZDFKZLZMZFGHZAVHDCKZLZMZCGHVFACGNZOZGPZACVQUBZVHD
      VQLZVLVFVPGQVPUCUAZVRACGUDWAVFACGUEUFVPUGUHZACUIVFVHDVQDKZVQPVFWCGPVHVFVQ
      GWCVFVRVQGQWBVQUJUMUKABCWCEULUNUOVKVSVTMFVQGVIVQUPVGVSVJVTACFVQUQVHDVIVQR
      SURUSVOVKCFGVOFTVGVJCACFVDVJCTUTCFVEAVGVNVJACFVAVHDVMVIRSVBVC $.
  $}

  $( The class of all ordinal numbers is its own successor.  (Contributed by
     NM, 12-Sep-2003.) $)
  sucon $p |- suc On = On $=
    ( con0 cvv wcel wn csuc wceq onprc sucprc ax-mp ) ABCDAEAFGAHI $.

  $( A successor exists iff its class argument exists.  (Contributed by NM,
     22-Jun-1998.) $)
  sucexb $p |- ( A e. _V <-> suc A e. _V ) $=
    ( cvv wcel csn wa cun csuc unexb snex biantru df-suc eleq1i 3bitr4i ) ABCZA
    DZBCZEAOFZBCNAGZBCAOHPNAIJRQBAKLM $.

  $( The successor of a set is a set (generalization).  (Contributed by NM,
     5-Jun-1994.) $)
  sucexg $p |- ( A e. V -> suc A e. _V ) $=
    ( wcel cvv csuc elex sucexb sylib ) ABCADCAEDCABFAGH $.

  ${
    sucex.1 $e |- A e. _V $.
    $( The successor of a set is a set.  (Contributed by NM, 30-Aug-1993.) $)
    sucex $p |- suc A e. _V $=
      ( cvv wcel csuc sucexg ax-mp ) ACDAECDBACFG $.
  $}

  ${
    $d x A $.
    $( The minimum of a class of ordinal numbers is less than the minimum of
       that class with its minimum removed.  (Contributed by NM,
       20-Nov-2003.) $)
    onmindif2 $p |- ( ( A C_ On /\ A =/= (/) ) ->
                   |^| A e. |^| ( A \ { |^| A } ) ) $=
      ( vx con0 wss c0 wne wa cint cdif wcel cv wral eldifsn wn wceq wo adantlr
      csn wb cvv onnmin oninton adantr ssel2 ontri1 onsseleq bitr3d syl2anc ord
      mpbid eqcom syl6ib necon1ad expimpd syl5bi ralrimiv elintg adantl mpbird
      intex sylbi ) ACDZAEFZGZAHZAVERIZHJZVEBKZJZBVFLZVDVIBVFVHVFJVHAJZVHVEFZGV
      DVIVHAVEMVDVKVLVIVDVKGZVIVHVEVMVINVEVHOZVHVEOVMVIVNVMVHVEJNZVIVNPZVBVKVOV
      CAVHUAQVMVECJZVHCJZVOVPSVDVQVKAUBUCVBVKVRVCACVHUDQVQVRGVEVHDVOVPVEVHUEVEV
      HUFUGUHUJUIVEVHUKULUMUNUOUPVCVGVJSZVBVCVETJVSAUTBVEVFTUQVAURUS $.
  $}

  ${
    $d x A $.
    $( The successor of an ordinal number is an ordinal number.  Proposition
       7.24 of [TakeutiZaring] p. 41.  (Contributed by NM, 6-Jun-1994.) $)
    suceloni $p |- ( A e. On -> suc A e. On ) $=
      ( vx con0 wcel csuc word wtr wss cv wral csn wo onelss wi wceq elsn sylbi
      eqimss a1i cvv orim12d cun df-suc eleq2i elun oridm 3imtr3g sssucid sstr2
      bitr2i syl6mpi ralrimiv dftr3 sylibr onss snssi unssd syl5eqss ordon 3exp
      trssord mpii sylc wb sucexg elong syl mpbird ) ACDZAEZCDZVJFZVIVJGZVJCHZV
      LVIBIZVJHZBVJJVMVIVPBVJVIVOVJDZVOAHZAVJHVPVIVOADZVOAKZDZLZVRVRLVQVRVIVSVR
      WAVRAVOMWAVRNVIWAVOAOVRBAPVOARQSUAVQVOAVTUBZDWBVJWCVOAUCZUDVOAVTUEUJVRUFU
      GAUHVOAVJUIUKULBVJUMUNVIVJWCCWDVIAVTCAUOACUPUQURVMVNCFZVLUSVMVNWEVLVJCVAU
      TVBVCVIVJTDVKVLVDACVEVJTVFVGVH $.
  $}

  $( The successor of an ordinal class is ordinal.  (Contributed by NM,
     3-Apr-1995.) $)
  ordsuc $p |- ( Ord A <-> Ord suc A ) $=
    ( cvv wcel word csuc wb elong suceloni eloni syl syl6bir sucidg ordelord ex
    con0 syl5com impbid wn wceq sucprc eqcomd ordeq pm2.61i ) ABCZADZAEZDZFZUDU
    EUGUDUEAOCZUGABGUIUFOCUGAHUFIJKUDAUFCZUGUEABLUGUJUEUFAMNPQUDRZAUFSUHUKUFAAT
    UAAUFUBJUC $.

  ${
    $d x A $.
    $( The collection of ordinals in the power class of an ordinal is its
       successor.  (Contributed by NM, 30-Jan-2005.) $)
    ordpwsuc $p |- ( Ord A -> ( ~P A i^i On ) = suc A ) $=
      ( vx word cpw con0 cin csuc cv wcel wss elin selpw anbi2ci bitri ordsssuc
      wa wb expcom pm5.32d simpr wi ordsuc ordelon ex sylbi ancrd impbid2 bitrd
      syl5bb eqrdv ) ACZBADZEFZAGZBHZUMIZUOEIZUOAJZPZUKUOUNIZUPUOULIZUQPUSUOULE
      KVAURUQBALMNUKUSUQUTPZUTUKUQURUTUQUKURUTQUOAORSUKVBUTUQUTTUKUTUQUKUNCZUTU
      QUAAUBVCUTUQUNUOUCUDUEUFUGUHUIUJ $.

    $( The collection of ordinal numbers in the power set of an ordinal number
       is its successor.  (Contributed by NM, 19-Oct-2004.) $)
    onpwsuc $p |- ( A e. On -> ( ~P A i^i On ) = suc A ) $=
      ( con0 wcel word cpw cin csuc wceq eloni ordpwsuc syl ) ABCADAEBFAGHAIAJK
      $.
  $}

  $( The successor of an ordinal number is an ordinal number.  (Contributed by
     NM, 9-Sep-2003.) $)
  sucelon $p |- ( A e. On <-> suc A e. On ) $=
    ( word cvv wcel wa csuc con0 ordsuc sucexb anbi12i elon2 3bitr4i ) ABZACDZE
    AFZBZOCDZEAGDOGDMPNQAHAIJAKOKL $.

  $( The successor of an element of an ordinal class is a subset of it.
     (Contributed by NM, 21-Jun-1998.) $)
  ordsucss $p |- ( Ord B -> ( A e. B -> suc A C_ B ) ) $=
    ( word wcel csuc wss wi wa ordelord wn ordnbtwn imnan sylibr adantr ordtri1
    wb ordsuc sylanb sylibrd pm2.43b sylan exp31 ) BCZABDZAEZBFZUDUCUDUFGZUCUDU
    CUGUCUDHACZUCUGBAIUHUCHUDBUEDZJZUFUHUDUJGZUCUHUDUIHJUKABKUDUILMNUHUECUCUFUJ
    PAQUEBORSUAUBTT $.

  $( An ordinal number is a proper subset of its successor.  (Contributed by
     Stefan O'Rear, 18-Nov-2014.) $)
  onpsssuc $p |- ( A e. On -> A C. suc A ) $=
    ( con0 wcel csuc wpss sucidg word eloni ordsuc sylib ordelpss syl2anc mpbid
    wb ) ABCZAADZCZAPEZABFOAGZPGZQRNAHZOSTUAAIJAPKLM $.

  $( A set belongs to an ordinal iff its successor is a subset of the ordinal.
     Exercise 8 of [TakeutiZaring] p. 42 and its converse.  (Contributed by NM,
     29-Nov-2003.) $)
  ordelsuc $p |- ( ( A e. C /\ Ord B ) -> ( A e. B <-> suc A C_ B ) ) $=
    ( wcel word wa csuc wss wi ordsucss adantl sucssel adantr impbid ) ACDZBEZF
    ABDZAGBHZPQRIOABJKORQIPABCLMN $.

  ${
    $d x A $.
    $( The successor of an ordinal number is the smallest larger ordinal
       number.  (Contributed by NM, 28-Nov-2003.) $)
    onsucmin $p |- ( A e. On -> suc A = |^| { x e. On | A e. x } ) $=
      ( con0 wcel cv crab cint csuc wss word wb ordelsuc sylan2 rabbidva inteqd
      eloni wceq sucelon intmin sylbi eqtr2d ) BCDZBAEZDZACFZGBHZUCIZACFZGZUFUB
      UEUHUBUDUGACUCCDUBUCJUDUGKUCPBUCCLMNOUBUFCDUIUFQBRAUFCSTUA $.
  $}

  $( Membership is inherited by successors.  Generalization of Exercise 9 of
     [TakeutiZaring] p. 42.  (Contributed by NM, 22-Jun-1998.)  (Proof
     shortened by Andrew Salmon, 12-Aug-2011.) $)
  ordsucelsuc $p |- ( Ord B -> ( A e. B <-> suc A e. suc B ) ) $=
    ( word wcel csuc wa simpl ordelord jca ordsuc sylibr sylanb cvv wb wss wceq
    wi wo adantr elex ancoms adantl ordsucss sucssel impbid sucexb elsucg sylbi
    ordsseleq ad2antrl 3bitr4d ex wn pm5.21ni a1d pm2.61i pm5.21nd ) BCZABDZAEZ
    BEZDZURACZFZURUSFURVCURUSGBAHIURVBFURVCURVBGURVACZVBVCBJVEVBFUTCZVCVAUTHAJZ
    KLIAMDZVDUSVBNZQVHVDVIVHVDFZUTBOZUTBDUTBPRZUSVBVDVKVLNZVHVCURVMVCVFURVMVGUT
    BUILUAUBVJUSVKURUSVKQVHVCABUCUJVHVKUSQVDABMUDSUEVHVBVLNZVDVHUTMDZVNAUFZUTBM
    UGUHSUKULVHUMVIVDUSVHVBABTVBVOVHUTVATVPKUNUOUPUQ $.

  $( The subclass relationship between two ordinal classes is inherited by
     their successors.  (Contributed by NM, 4-Oct-2003.) $)
  ordsucsssuc $p |- ( ( Ord A /\ Ord B ) -> ( A C_ B <-> suc A C_ suc B ) ) $=
    ( word wa wcel wn csuc wss ordsucelsuc notbid adantr ordtri1 ordsuc syl2anb
    wb 3bitr4d ) ACZBCZDBAEZFZBGZAGZEZFZABHUBUAHZQTUDORQSUCBAIJKABLQUBCUACUEUDO
    RAMBMUBUALNP $.

  $( Given an element ` A ` of the union of an ordinal ` B ` , ` suc A ` is an
     element of ` B ` itself.  (Contributed by Scott Fenton, 28-Mar-2012.)
     (Proof shortened by Mario Carneiro, 29-May-2015.) $)
  ordsucuniel $p |- ( Ord B -> ( A e. U. B <-> suc A e. B ) ) $=
    ( word cuni wcel csuc wi orduni ordelord ex syl wa ordsuc sylibr wb wn con0
    wss sylan ordtri1 ordsson ordunisssuc sylan2b 3bitr3d con4bid pm5.21ndd ) B
    CZACZABDZEZAFZBEZUGUICZUJUHGBHZUMUJUHUIAIJKUGULUHUGULLUKCZUHBUKIAMZNJUGUHUJ
    ULOUGUHLZUJULUQUIARZBUKRZUJPZULPZUGBQRUHURUSOBUABAUBSUGUMUHURUTOUNUIATSUHUG
    UOUSVAOUPBUKTUCUDUEJUF $.

  ${
    $d x A $.  $d x B $.
    $( The successor of the maximum (i.e. union) of two ordinals is the maximum
       of their successors.  (Contributed by NM, 28-Nov-2003.) $)
    ordsucun $p |- ( ( Ord A /\ Ord B ) ->
               suc ( A u. B ) = ( suc A u. suc B ) ) $=
      ( vx word wa cun csuc cv con0 wcel wi ordun ordsuc ordelon ex wb ordsssuc
      syl wo wss syl2anb ordssun adantl adantrr adantrl orbi12d 3bitr3d syl6bbr
      sylbi sylan2 elun expcom pm5.21ndd eqrdv ) ADZBDZEZCABFZGZAGZBGZFZUQCHZIJ
      ZVCUSJZVCVBJZUQURDZVEVDKZABLZVGUSDZVHURMVJVEVDUSVCNOUIRUOUTDZVADZVFVDKZUP
      AMBMVKVLEVBDZVMUTVALVNVFVDVBVCNORUAVDUQVEVFPVDUQEZVEVCUTJZVCVAJZSZVFVOVCU
      RTZVCATZVCBTZSZVEVRUQVSWBPVDVCABUBUCUQVDVGVSVEPVIVCURQUJVOVTVPWAVQVDUOVTV
      PPUPVCAQUDVDUPWAVQPUOVCBQUEUFUGVCUTVAUKUHULUMUN $.
  $}

  $( The maximum of two ordinals is equal to one of them.  (Contributed by
     Mario Carneiro, 25-Jun-2015.) $)
  ordunpr $p |- ( ( B e. On /\ C e. On ) -> ( B u. C ) e. { B , C } ) $=
    ( con0 wcel wa cun cpr wceq wss word eloni ordtri2or2 syl2an orcomd ssequn2
    wo ssequn1 orbi12i sylib cvv wb unexg elprg syl mpbird ) ACDZBCDZEZABFZABGD
    ZUIAHZUIBHZPZUHBAIZABIZPUMUHUOUNUFAJBJUOUNPUGAKBKABLMNUNUKUOULBAOABQRSUHUIT
    DUJUMUAABCCUBUIABTUCUDUE $.

  $( The maximum of two ordinals belongs to a third if each of them do.
     (Contributed by NM, 18-Sep-2006.)  (Revised by Mario Carneiro,
     25-Jun-2015.) $)
  ordunel $p |- ( ( Ord A /\ B e. A /\ C e. A ) -> ( B u. C ) e. A ) $=
    ( word wcel w3a cpr cun wss 3adant1 ordelon 3adant3 3adant2 ordunpr syl2anc
    prssi con0 sseldd ) ADZBAEZCAEZFZBCGZABCHZTUAUCAISBCAPJUBBQEZCQEZUDUCESTUEU
    AABKLSUAUFTACKMBCNOR $.

  $( A class of ordinal numbers is a subclass of the successor of its union.
     Similar to Proposition 7.26 of [TakeutiZaring] p. 41.  (Contributed by NM,
     19-Sep-2003.) $)
  onsucuni $p |- ( A C_ On -> A C_ suc U. A ) $=
    ( con0 wss cuni word csuc ssorduni wa ssid ordunisssuc mpbii mpdan ) ABCZAD
    ZEZANFCZAGMOHNNCPNIANJKL $.

  $( An ordinal class is a subclass of the successor of its union.
     (Contributed by NM, 12-Sep-2003.) $)
  ordsucuni $p |- ( Ord A -> A C_ suc U. A ) $=
    ( word con0 wss cuni csuc ordsson onsucuni syl ) ABACDAAEFDAGAHI $.

  $( An ordinal class is either its union or the successor of its union.  If we
     adopt the view that zero is a limit ordinal, this means every ordinal
     class is either a limit or a successor.  (Contributed by NM,
     13-Sep-2003.) $)
  orduniorsuc $p |- ( Ord A -> ( A = U. A \/ A = suc U. A ) ) $=
    ( word cuni wceq csuc wne wss wa wn wcel orduniss wb orduni mpancom biimprd
    ordelssne mpand ordsucss syld ordsucuni jctild df-ne necom bitr3i eqss orrd
    3imtr4g ) ABZAACZDZAUIEZDZUHUIAFZAUKGZUKAGZHUJIZULUHUMUOUNUHUMUIAJZUOUHUIAG
    ZUMUQAKUHUQURUMHZUIBUHUQUSLAMUIAPNOQUIARSATUAUPAUIFUMAUIUBAUIUCUDAUKUEUGUF
    $.

  ${
    $d x y A $.
    $( The class of all ordinal numbers is its own union.  Exercise 11 of
       [TakeutiZaring] p. 40.  (Contributed by NM, 12-Nov-2003.) $)
    unon $p |- U. On = On $=
      ( vx vy con0 cuni cv wcel wrex eluni2 onelon rexlimiva sylbi vex suceloni
      csuc sucid elunii sylancr impbii eqriv ) ACDZCAEZTFZUACFZUBUABEZFZBCGUCBU
      ACHUEUCBCUDUAIJKUCUAUANZFUFCFUBUAALOUAMUAUFCPQRS $.

    $( An ordinal class is equal to the union of its successor.  (Contributed
       by NM, 10-Dec-2004.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    ordunisuc $p |- ( Ord A -> U. suc A = A ) $=
      ( vx word con0 wcel wceq wo csuc ordeleqon cv suceq unieqd id eqeq12d wtr
      cuni eloni ordtr syl vex unisuc sylib vtoclga sucon unon eqtri jaoi sylbi
      unieqi 3eqtr4a ) ACADEZADFZGAHZPZAFZAIUKUOULBJZHZPZUPFZUOBADUPAFZURUNUPAU
      TUQUMUPAKLUTMNUPDEZUPOZUSVAUPCVBUPQUPRSUPBTUAUBUCULDHZPZDUNAVDDPDVCDUDUIU
      EUFULUMVCADKLULMUJUGUH $.

    $( The union of the ordinal subsets of an ordinal number is that number.
       (Contributed by NM, 30-Jan-2005.) $)
    orduniss2 $p |- ( Ord A -> U. { x e. On | x C_ A } = A ) $=
      ( word cv wss con0 crab cuni csuc cpw cin wcel wa df-rab incom inab df-pw
      cab eqcomi abid2 ineq12i 3eqtr3i eqtri ordpwsuc syl5eq unieqd ordunisuc
      eqtrd ) BCZADZBEZAFGZHBIZHBUIULUMUIULBJZFKZUMULUJFLZUKMARZUOUKAFNUPARZUKA
      RZKUSURKUQUOURUSOUPUKAPUSUNURFUNUSABQSAFTUAUBUCBUDUEUFBUGUH $.
  $}

  $( A successor ordinal is the successor of its union.  (Contributed by NM,
     10-Dec-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  onsucuni2 $p |- ( ( A e. On /\ A = suc B ) -> suc U. A = A ) $=
    ( con0 wcel csuc wceq cuni word eleq1 biimpac eloni ordsuc ordunisuc sylbir
    wa suceq syl eqtr4d 3syl unieq unieqd eqeq12d syl5ibr anabsi7 adantr eqtrd
    ) ACDZABEZFZOZAGZEZAEZGZAUGUIULUNFZUJUOUIUHGZEZUHEZGZFZUJUHCDZUHHZUTUIUGVAA
    UHCIJUHKVBUQUHUSVBUPBFZUQUHFVBBHVCBLBMNUPBPQUHMRSUIULUQUNUSUIUKUPFULUQFAUHT
    UKUPPQUIUMURAUHPUAUBUCUDUGUNAFZUIUGAHVDAKAMQUEUF $.

  $( The successor of an ordinal class contains the empty set.  (Contributed by
     NM, 4-Apr-1995.) $)
  0elsuc $p |- ( Ord A -> (/) e. suc A ) $=
    ( word csuc c0 wcel ordsuc wne nsuceq0 ord0eln0 mpbiri sylbi ) ABACZBZDLEZA
    FMNLDGAHLIJK $.

  $( The class of ordinal numbers is a limit ordinal.  (Contributed by NM,
     24-Mar-1995.) $)
  limon $p |- Lim On $=
    ( con0 wlim word c0 wne cuni wceq ordon onn0 unon eqcomi df-lim mpbir3an )
    ABACADEAAFZGHINAJKALM $.

  ${
    onssi.1 $e |- A e. On $.
    $( An ordinal number is a subset of ` On ` .  (Contributed by NM,
       11-Aug-1994.) $)
    onssi $p |- A C_ On $=
      ( con0 wcel wss onss ax-mp ) ACDACEBAFG $.

    $( The successor of an ordinal number is an ordinal number.  Corollary
       7N(c) of [Enderton] p. 193.  (Contributed by NM, 12-Jun-1994.) $)
    onsuci $p |- suc A e. On $=
      ( con0 wcel csuc suceloni ax-mp ) ACDAECDBAFG $.

    $( An ordinal number is either its own union (if zero or a limit ordinal)
       or the successor of its union.  (Contributed by NM, 13-Jun-1994.) $)
    onuniorsuci $p |- ( A = U. A \/ A = suc U. A ) $=
      ( word cuni wceq csuc wo onordi orduniorsuc ax-mp ) ACAADZEAKFEGABHAIJ $.

    ${
      $d x A $.
      $( A limit ordinal is not a successor ordinal.  (Contributed by NM,
         18-Feb-2004.) $)
      onuninsuci $p |- ( A = U. A <-> -. E. x e. On A = suc x ) $=
        ( cv csuc wceq con0 wrex cuni wn wa wcel onirri cun csn wtr sylancr syl
        id sylib df-suc eqeq2i unieq sylbi uniun unisn uneq2i eqtri syl6eq tron
        vex wss eleq1 mpbii trsuc eloni ordtr df-tr eqtrd sylan9eqr sucid eleq2
        word ssequn1 mpbiri adantr mto imnani rexlimivw onuni ax-mp onuniorsuci
        eqeltrd ori suceq eqeq2d rspcev impbii con2bii ) BADZEZFZAGHZBBIZFZWCWE
        JZWBWFAGWBWEWBWEKZBBLBCMWGBVTBWEWBBWDVTWESWBWDVTIZVTNZVTWBWDVTVTOZNZIZW
        IWBBWKFWDWLFWAWKBVTUAUBBWKUCUDWLWHWJIZNWIVTWJUEWMVTWHVTAUKZUFUGUHUIWBWH
        VTULZWIVTFWBVTGLZWOWBGPWAGLZWPUJWBBGLZWQCBWAGUMUNGVTUOQWPVTPZWOWPVTVCWS
        VTUPVTUQRVTURTRWHVTVDTUSUTWBVTBLZWEWBWTVTWALVTWNVABWAVTVBVEVFVMVGVHVIWF
        WDGLZBWDEZFZWCWRXACBVJVKWEXCBCVLVNWBXCAWDGVTWDFWAXBBVTWDVOVPVQQVRVS $.
    $}

    ${
      onsucssi.2 $e |- B e. On $.
      $( A set belongs to an ordinal number iff its successor is a subset of
         the ordinal number.  Exercise 8 of [TakeutiZaring] p. 42 and its
         converse.  (Contributed by NM, 16-Sep-1995.) $)
      onsucssi $p |- ( A e. B <-> suc A C_ B ) $=
        ( con0 wcel word csuc wss wb onordi ordelsuc mp2an ) AEFBGABFAHBIJCBDKA
        BELM $.
    $}
  $}

  $( A successor is not a limit ordinal.  (Contributed by NM, 25-Mar-1995.)
     (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
  nlimsucg $p |- ( A e. V -> -. Lim suc A ) $=
    ( csuc wlim wcel word cuni wceq limord ordsuc sylibr limuni ordunisuc eleq2
    wn eqeq2d ordirr notbid syl5ibrcom sucidg con3i syl6 sylbid sylc con2i ) AC
    ZDZABEZUGAFZUFUFGZHZUHOZUGUFFUIUFIAJKUFLUIUKUFAHZULUIUJAUFAMPUIUMAUFEZOZULU
    IUOUMAAEZOAQUMUNUPUFAANRSUHUNABTUAUBUCUDUE $.

  ${
    $d x A $.
    $( An ordinal equal to its union is not a successor.  (Contributed by NM,
       18-Feb-2004.) $)
    orduninsuc $p |- ( Ord A -> ( A = U. A <-> -. E. x e. On A = suc x ) ) $=
      ( word con0 wcel wceq cuni wn wb c0 id unieq eqeq12d eqeq1 rexbidv notbid
      wrex bibi12d cvv mpbiri wo cv ordeleqon cif 0elon elimel onuninsuci dedth
      csuc unon eqcomi onprc vex sucex eleq1 mto a1i nrex 2th jaoi sylbi ) BCBD
      EZBDFZUABBGZFZBAUBZUIZFZADQZHZIZBUCVBVKVCVBVKVBBJUDZVLGZFZVLVGFZADQZHZIBJ
      BVLFZVEVNVJVQVRBVLVDVMVRKBVLLMVRVIVPVRVHVOADBVLVGNOPRAVLBJDUEUFUGUHVCVKDD
      GZFZDVGFZADQZHZIVTWCVSDUJUKWAADWAHVFDEWADSEZULWAWDVGSEVFAUMUNDVGSUOTUPUQU
      RUSVCVEVTVJWCVCBDVDVSVCKBDLMVCVIWBVCVHWAADBDVGNOPRTUTVA $.

    $( An ordinal equal to its union contains the successor of each of its
       members.  (Contributed by NM, 1-Feb-2005.) $)
    ordunisuc2 $p |- ( Ord A -> ( A = U. A <-> A. x e. A suc x e. A ) ) $=
      ( word cuni wceq cv csuc con0 wn wcel wral wi wa wo eloni adantr simpr ex
      syl5bbr bitrd wrex orduninsuc ralnex suceloni syl ordtri3 con2bid onnbtwn
      wb sylan2 imnan sylibr con2d pm2.21 syl6 adantl ax-1 jaod ordtri2or sylan
      a1i wss ancoms orcomd ordsssuc2 biimpd orim12d mpd impbid bitr3d pm5.74da
      impexp ordelon ancrd impbid2 imbi1d ralbidv2 ) BCZBBDEBAFZGZEZAHUAIZVTBJZ
      ABKZABUBWBWAIZAHKVRWDWAAHUCVRWEWCAHBVRVSHJZWELWFVSBJZWCLZLZWHVRWFWEWHVRWF
      MZBVTJZWCNZWEWHWJWAWLWFVRVTCZWAWLIUIWFVTHJWMVSUDVTOUEBVTUFUJUGWJWLWHWJWKW
      HWCWFWKWHLVRWFWKWGIWHWFWGWKWFWGWKMIWGWKILVSBUHWGWKUKULUMWGWCUNUOUPWCWHLWJ
      WCWGUQVAURWJWHWLWJWHMZBVSVBZWGNZWLWJWPWHWJWGWOWFVRWGWONZWFVSCVRWQVSOVSBUS
      UTVCVDPWNWOWKWGWCWJWOWKLWHWJWOWKBVSVEVFPWJWHQVGVHRVIVJVKWIWFWGMZWCLVRWHWF
      WGWCVLVRWRWGWCVRWRWGWFWGQVRWGWFVRWGWFBVSVMRVNVOVPSTVQST $.

    $( An ordinal is zero, a successor ordinal, or a limit ordinal.
       (Contributed by NM, 1-Oct-2003.) $)
    ordzsl $p |- ( Ord A <->
                  ( A = (/) \/ E. x e. On A = suc x \/ Lim A ) ) $=
      ( word c0 wceq cv csuc con0 wrex wlim w3o cuni orduninsuc biimprd unizlim
      wo wn sylibd orrd wcel 3orass or12 bitri sylibr ord0 ordeq suceloni eleq1
      mpbiri syl5ibr eloni syl6com rexlimiv limord 3jaoi impbii ) BCZBDEZBAFZGZ
      EZAHIZBJZKZUQVBURVCPZPZVDUQVBVEUQVBQZBBLEZVEUQVHVGABMNBORSVDURVBVCPPVFURV
      BVCUAURVBVCUBUCUDURUQVBVCURUQDCUEBDUFUIVAUQAHVAUSHTZBHTZUQVIVJVAUTHTUSUGB
      UTHUHUJBUKULUMBUNUOUP $.

    $( An ordinal number is zero, a successor ordinal, or a limit ordinal
       number.  (Contributed by NM, 1-Oct-2003.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    onzsl $p |- ( A e. On <->
               ( A = (/) \/ E. x e. On A = suc x \/ ( A e. _V /\ Lim A ) ) ) $=
      ( con0 wcel c0 wceq cv csuc wrex cvv wlim wa word elex eloni ordzsl 3mix1
      w3o adantl eleq1 3mix2 3jaodan sylan2b syl2anc mpbiri suceloni syl5ibrcom
      3mix3 0elon rexlimiv limelon 3jaoi impbii ) BCDZBEFZBAGZHZFZACIZBJDZBKZLZ
      RZUNUTBMZVCBCNBOVDUTUOUSVARVCABPUTUOVCUSVAUOVCUTUOUSVBQSUSVCUTUSUOVBUASVB
      UOUSUHUBUCUDUOUNUSVBUOUNECDUIBECTUEURUNACUPCDUNURUQCDUPUFBUQCTUGUJBJUKULU
      M $.

    $( An alternate definition of a limit ordinal, which is any ordinal that is
       neither zero nor a successor.  (Contributed by NM, 1-Nov-2004.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    dflim3 $p |- ( Lim A <->
                 ( Ord A /\ -. ( A = (/) \/ E. x e. On A = suc x ) ) ) $=
      ( wlim word c0 wne cuni wceq w3a wa cv csuc con0 wrex wo wn df-lim 3anass
      wb df-ne a1i orduninsuc anbi12d ioran syl6bbr pm5.32i 3bitri ) BCBDZBEFZB
      BGHZIUHUIUJJZJUHBEHZBAKLHAMNZOPZJBQUHUIUJRUHUKUNUHUKULPZUMPZJUNUHUIUOUJUP
      UIUOSUHBETUAABUBUCULUMUDUEUFUG $.

    $( An alternate definition of a limit ordinal.  (Contributed by NM,
       1-Feb-2005.) $)
    dflim4 $p |- ( Lim A <->
                 ( Ord A /\ (/) e. A /\ A. x e. A suc x e. A ) ) $=
      ( wlim word wcel cuni wceq w3a csuc wral dflim2 ordunisuc2 anbi2d pm5.32i
      c0 cv wa 3anass 3bitr4i bitri ) BCBDZOBEZBBFGZHZUAUBAPIBEABJZHZBKUAUBUCQZ
      QUAUBUEQZQUDUFUAUGUHUAUCUEUBABLMNUAUBUCRUAUBUERST $.
  $}

  ${
    $d x A $.  $d x B $.
    $( The successor of a member of a limit ordinal is also a member.
       (Contributed by NM, 3-Sep-2003.) $)
    limsuc $p |- ( Lim A -> ( B e. A <-> suc B e. A ) ) $=
      ( vx wlim wcel csuc word c0 cv wral w3a dflim4 wceq suceq eleq1d 3ad2ant3
      wi rspccv sylbi wtr limord ordtr trsuc ex 3syl impbid ) ADZBAEZBFZAEZUGAG
      ZHAEZCIZFZAEZCAJZKUHUJQZCALUPUKUQULUOUJCBAUMBMUNUIAUMBNORPSUGUKATZUJUHQAU
      AAUBURUJUHABUCUDUEUF $.

    $( A class includes a limit ordinal iff the successor of the class includes
       it.  (Contributed by NM, 30-Oct-2003.) $)
    limsssuc $p |- ( Lim A -> ( A C_ B <-> A C_ suc B ) ) $=
      ( vx wlim wss csuc sssucid sstr2 wa cv wcel wceq wn wi eleq1 biimpcd word
      mpi sylib ex limsuc biimpa wb limord adantr ordelord sylan ordsuc ordtri1
      syl2anc con2bid mpbid sylan9r con2d com23 imp31 ssel2 vex elsuc ord con1d
      wo adantll mpd ssrdv impbid2 ) ADZABEZABFZEZVHBVIEVJBGABVIHRVGVJVHVGVJIZC
      ABVKCJZAKZVLBKZVKVMIVLBLZMZVNVGVJVMVPVGVMVJVPVGVMVJVPNVGVMIVOVJVMVOBAKZVG
      VJMZVOVMVQVLBAOPVGVQVRVGVQIZVIAKZVRVGVQVTABUAUBVSVJVTVSAQZVIQZVJVTMUCVGWA
      VQAUDZUEVSBQZWBVGWAVQWDWCABUFUGBUHSAVIUIUJUKULTUMUNTUOUPVJVMVPVNNVGVJVMIZ
      VNVOWEVNVOWEVLVIKVNVOVBAVIVLUQVLBCURUSSUTVAVCVDTVETVF $.
  $}

  ${
    $d x y $.
    $( Two ways to express the class of non-limit ordinal numbers.  Part of
       Definition 7.27 of [TakeutiZaring] p. 42, who use the symbol K_I for
       this class.  (Contributed by NM, 1-Nov-2004.) $)
    nlimon $p |- { x e. On | ( x = (/) \/ E. y e. On x = suc y ) } =
                   { x e. On | -. Lim x } $=
      ( cv c0 wceq csuc con0 wrex wo wlim wn wcel word wb eloni dflim3 baib syl
      con2bid rabbiia ) ACZDEUABCFEBGHIZUAJZKZAGUAGLUAMZUBUDNUAOUEUCUBUCUEUBKBU
      APQSRT $.
  $}

  ${
    $d x y z A $.
    $( The union of a nonempty class of limit ordinals is a limit ordinal.
       (Contributed by NM, 1-Feb-2005.) $)
    limuni3 $p |- ( ( A =/= (/) /\ A. x e. A Lim x ) -> Lim U. A ) $=
      ( vy vz c0 wne cv wlim wral wa cuni word wcel csuc con0 wss cvv adantl wi
      elunii limeq rspcv vex limelon mpan syl6com ssrdv ssorduni syl wex 0ellim
      n0 expcom syl5 syld exlimiv sylbi wrex eluni2 rspccv limsuc anbi1d syl6bi
      imp expd com3r sylcom rexlimdv syl5bi ralrimiv dflim4 syl3anbrc ) BEFZAGZ
      HZABIZJBKZLZEVQMZCGZNZVQMZCVQIZVQHVPVRVMVPBOPVRVPDBODGZBMZVPWDHZWDOMZVOWF
      AWDBVNWDUAZUBZWDQMWFWGDUCWDQUDUEUFUGBUHUIRVMVPVSVMWEDUJVPVSSZDBULWEWJDWEV
      PWFVSWIWFEWDMZWEVSWDUKWKWEVSEWDBTUMUNUOUPUQVDVPWCVMVPWBCVQVTVQMVTWDMZDBUR
      VPWBDVTBUSVPWLWBDBVPWEWFWLWBSVOWFAWDBWHUTWFWLWEWBWFWLWEWBWFWLWEJWAWDMZWEJ
      WBWFWLWMWEWDVTVAVBWAWDBTVCVEVFVGVHVIVJRCVQVKVL $.
  $}


$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
          Transfinite induction
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x A $.
    $( The Principle of Transfinite Induction.  Theorem 7.17 of [TakeutiZaring]
       p. 39.  This principle states that if ` A ` is a class of ordinal
       numbers with the property that every ordinal number included in ` A `
       also belongs to ` A ` , then every ordinal number is in ` A ` .

       See theorem ~ tfindes or ~ tfinds for the version involving basis and
       induction hypotheses.  (Contributed by NM, 18-Feb-2004.) $)
    tfi $p |- ( ( A C_ On /\ A. x e. On ( x C_ A -> x e. A ) ) -> A = On ) $=
      ( con0 wss cv wcel wi wral wa wceq cdif cin c0 wrex wn eldifn adantl onss
      eldifi difin0ss syl5com imim1d a2i syl5 imp mtod ralimi2 ralnex sylib wne
      ssdif0 necon3bbii word ordon difss tz7.5 mp3an12 sylbi anim2i eqss sylibr
      ex nsyl2 ) BCDZAEZBDZVEBFZGZACHZIVDCBDZIBCJVIVJVDVICBKZVELMJZAVKNZVJVIVLO
      ZAVKHVMOVHVNACVKVECFZVHGZVEVKFZVNVPVQIVLVGVQVGOVPVECBPQVPVQVLVGGZVQVOVPVR
      VECBSVOVHVRVOVLVFVGVOVECDVLVFVERCBVETUAUBUCUDUEUFVBUGVLAVKUHUIVJOVKMUJZVM
      VJVKMCBUKULCUMVKCDVSVMUNCBUOACVKUPUQURVCUSBCUTVA $.
  $}

  ${
    $d w y z ph $.  $d w x y z $.
    tfis.1 $e |- ( x e. On -> ( A. y e. x [ y / x ] ph -> ph ) ) $.
    $( Transfinite Induction Schema.  If all ordinal numbers less than a given
       number ` x ` have a property (induction hypothesis), then all ordinal
       numbers have the property (conclusion).  Exercise 25 of [Enderton]
       p. 200.  (Contributed by NM, 1-Aug-1994.)  (Revised by Mario Carneiro,
       20-Nov-2016.) $)
    tfis $p |- ( x e. On -> ph ) $=
      ( vz vw cv con0 wcel crab wss wi wral wceq ssrab2 wa nfcv syl5bbr simprbi
      wsb nfrab1 nfss nfcri dfss3 sseq1 rabid eleq1 imbi12d sbequ nfs1v sbequ12
      nfim nfv cbvrab elrab2 ralimi syl5 anc2li vtoclgaf rgen tfi mp2an rabeq2i
      eqcomi ) BGZHIZVFAABHHABHJZHVGHKEGZVGKZVHVGIZLZEHMVGHNABHOVKEHCGZVGIZCVEM
      ZVFAPZLVKBVHHBVHQZVIVJBBVHVGVPABHUAZUBBEVGVQUCULVEVHNZVNVIVOVJVNVEVGKVRVI
      CVEVGUDVEVHVGUERVOVEVGIVRVJABHUFVEVHVGUGRUHVFVNAVNABCTZCVEMVFAVMVSCVEVMVL
      HIVSABFTZVSFVLHVGAFCBUIAVTBFHBHQFHQAFUMABFUJABFUKUNUOSUPDUQURUSUTEVGVAVBV
      DVCS $.
  $}

  ${
    $d y ph $.  $d x y $.
    tfis2f.1 $e |- F/ x ps $.
    tfis2f.2 $e |- ( x = y -> ( ph <-> ps ) ) $.
    tfis2f.3 $e |- ( x e. On -> ( A. y e. x ps -> ph ) ) $.
    $( Transfinite Induction Schema, using implicit substitution.  (Contributed
       by NM, 18-Aug-1994.) $)
    tfis2f $p |- ( x e. On -> ph ) $=
      ( wsb cv wral con0 wcel sbie ralbii syl5bi tfis ) ACDACDHZDCIZJBDRJRKLAQB
      DRABCDEFMNGOP $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x y $.
    tfis2.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    tfis2.2 $e |- ( x e. On -> ( A. y e. x ps -> ph ) ) $.
    $( Transfinite Induction Schema, using implicit substitution.  (Contributed
       by NM, 18-Aug-1994.) $)
    tfis2 $p |- ( x e. On -> ph ) $=
      ( nfv tfis2f ) ABCDBCGEFH $.
  $}

  ${
    $d x ps $.  $d y ph $.  $d x ch $.  $d x A $.  $d x y $.
    tfis3.1 $e |- ( x = y -> ( ph <-> ps ) ) $.
    tfis3.2 $e |- ( x = A -> ( ph <-> ch ) ) $.
    tfis3.3 $e |- ( x e. On -> ( A. y e. x ps -> ph ) ) $.
    $( Transfinite Induction Schema, using implicit substitution.  (Contributed
       by NM, 4-Nov-2003.) $)
    tfis3 $p |- ( A e. On -> ch ) $=
      ( con0 tfis2 vtoclga ) ACDFJHABDEGIKL $.
  $}

  ${
    $d x v w y z T $.  $d v w y z R $.  $d x v w z S $.  $d x v w z ch $.
    $d x v w y z ph $.  $d w y z ps $.  $d x A $.  $d x th $.
    tfisi.a $e |- ( ph -> A e. V ) $.
    tfisi.b $e |- ( ph -> T e. On ) $.
    tfisi.c $e |- ( ( ph /\ ( R e. On /\ R C_ T ) /\
          A. y ( S e. R -> ch ) ) -> ps ) $.
    tfisi.d $e |- ( x = y -> ( ps <-> ch ) ) $.
    tfisi.e $e |- ( x = A -> ( ps <-> th ) ) $.
    tfisi.f $e |- ( x = y -> R = S ) $.
    tfisi.g $e |- ( x = A -> R = T ) $.
    $( A transfinite induction scheme in ""implicit"" form where the induction is
       done on an object derived from the object of interest.  (Contributed by
       Stefan O'Rear, 24-Aug-2015.) $)
    tfisi $p |- ( ph -> th ) $=
      ( vv wi vz vw wss ssid wceq wa eqid wcel wal con0 weq eqeq2 anbi2d imbi1d
      cv sseq1 imbi12d albidv eqeq1d imbi2d cbvalv syl6bb wral w3a simp3l simp2
      simp1l eqeltrd simp3r eqsstrd csb wsb simpl3l simpl1l simpr simpl2 onelss
      eleqtrd simpl3r sstrd simpl1r rspcva syl2anc eqidd csbhypf eqcomd equcoms
      sylc nfcv wb nfv sbhypf bicomd spv mp2and ex alrimiv sylib syl121anc 3exp
      eleq1d tfis3 syl spcgv mpi expd pm2.43i ) AJJUCZDJUDAXHDTAAXHDAJJUEZAXHUF
      ZDTZJUGAGKUHHJUEZXJBTZTZEUIZXIXKTZLAJUJUHXOMHUAUOZUEZAXQJUCZUFZBTZTZEUIZI
      UBUOZUEZAYDJUCZUFZCTZTZFUIZXOUAUBJUAUBUKZYCHYDUEZYGBTZTZEUIYJYKYBYNEYKXRY
      LYAYMXQYDHULYKXTYGBYKXSYFAXQYDJUPUMUNUQURYNYIEFEFUKZYLYEYMYHYOHIYDQUSYOBC
      YGOUTUQVAVBXQJUEZYBXNEYPXRXLYAXMXQJHULYPXTXJBYPXSXHAXQJJUPUMUNUQURXQUJUHZ
      YJUBXQVCZYCYQYRUFZYBEYSXRXTBYSXRXTVDZAHUJUHHJUCIHUHZCTZFUIZBYSXRAXSVEYTHX
      QUJYSXRXTVFZYQYRXRXTVGVHYTHXQJUUDYSXRAXSVIVJYTESUOHVKZHUHZBESVLZTZSUIUUCY
      TUUHSYTUUFUUGYTUUFUFZAUUEJUCZUUGAXSYSXRUUFVMUUIUUEXQJUUIYQUUEXQUHZUUEXQUC
      YQYRXRXTUUFVNUUIUUEHXQYTUUFVOYSXRXTUUFVPVRZXQUUEVQWHAXSYSXRUUFVSVTUUIIUUE
      UEZAUUJUFZCTZTZFUIZUUEUUEUEZUUNUUGTZUUIUUKYRUUQUULYQYRXRXTUUFWAYJUUQUBUUE
      XQYDUUEUEZYIUUPFUUTYEUUMYHUUOYDUUEIULUUTYGUUNCUUTYFUUJAYDUUEJUPUMUNUQURWB
      WCUUIUUEWDUUPUURUUSTFSFSUKZUUMUURUUOUUSUVAIUUEUUEUUMSFSFUKZUUEIESFUOZHIEU
      VCWIEIWIQWEZWFWGUSUVACUUGUUNCUUGWJSFUVBUUGCBCESUVCCEWKOWLZWMWGUTUQWNWHWOW
      PWQUUHUUBSFUVBUUFUUAUUGCUVBUUEIHUVDXAUVEUQVAWRNWSWTWQWPXBXCXNXPEGKEUOGUEZ
      XLXIXMXKUVFHJJRUSUVFBDXJPUTUQXDWHXEXFXGXE $.
  $}

  ${
    $d x y z $.  $d x A $.  $d x z ch $.  $d x ta $.  $d y z ph $.
    $( Substitutions. $)
    tfinds.1 $e |- ( x = (/) -> ( ph <-> ps ) ) $.
    tfinds.2 $e |- ( x = y -> ( ph <-> ch ) ) $.
    tfinds.3 $e |- ( x = suc y -> ( ph <-> th ) ) $.
    tfinds.4 $e |- ( x = A -> ( ph <-> ta ) ) $.
    $( Basis. $)
    tfinds.5 $e |- ps $.
    $( Induction step for successors. $)
    tfinds.6 $e |- ( y e. On -> ( ch -> th ) ) $.
    $( Induction step for limit ordinals. $)
    tfinds.7 $e |- ( Lim x -> ( A. y e. x ch -> ph ) ) $.
    $( Principle of Transfinite Induction (inference schema), using implicit
       substitutions.  The first four hypotheses establish the substitutions we
       need.  The last three are the basis, the induction step for successors,
       and the induction step for limit ordinals.  Theorem Schema 4 of [Suppes]
       p. 197.  (Contributed by NM, 16-Apr-1995.)  (Proof shortened by Andrew
       Salmon, 27-Aug-2011.) $)
    tfinds $p |- ( A e. On -> ta ) $=
      ( vz cv con0 wral wi wcel wlim wn word c0 wceq csuc wrex wo dflim3 notbii
      wa iman eloni pm2.27 syl mpbiri a1d nfra1 nfv nfim sucid rspcv ax-mp syl5
      vex raleq sbie syl5bbr cbvralv cbvralsv 3bitr4g imbi1d syl5ibrcom biimprd
      wsb sbequ a1i syldd rexlimi jaoi syl6 syl5bir syl5bi pm2.61d2 tfis3 ) ACE
      FGHJLFQZRUAZWGUBZCGWGSZATZWIUCWGUDZWGUEUFZWGGQZUGZUFZGRUHZUIZUCULZUCZWHWK
      WIWSGWGUJUKWTWLWRTZWHWKWLWRUMWHXAWRWKWHWLXAWRTWGUNWLWRUOUPWMWKWQWMAWJWMAB
      MIUQURWPWKGRWJAGCGWGUSAGUTVAWNRUAZWPWJDAXBWJDTWPAFWOSZDTXCCXBDWNWOUAXCCTW
      NGVFVBACFWNWOJVCVDNVEWPWJXCDWPAFPVPZPWGSXDPWOSWJXCXDPWGWOVGCXDGPWGCAFGVPW
      NPQUFXDACFGCFUTJVHAGPFVQVIVJAFPWOVKVLVMVNWPDATTXBWPADKVOVRVSVTWAWBWCWDOWE
      WF $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x ch $.  $d x th $.  $d x ta $.  $d y ph $.
    $( Substitutions. $)
    tfindsg.1 $e |- ( x = B -> ( ph <-> ps ) ) $.
    tfindsg.2 $e |- ( x = y -> ( ph <-> ch ) ) $.
    tfindsg.3 $e |- ( x = suc y -> ( ph <-> th ) ) $.
    tfindsg.4 $e |- ( x = A -> ( ph <-> ta ) ) $.
    $( Basis. $)
    tfindsg.5 $e |- ( B e. On -> ps ) $.
    $( Induction step for successor ordinals. $)
    tfindsg.6 $e |- ( ( ( y e. On /\ B e. On ) /\ B C_ y ) -> ( ch -> th ) ) $.
    $( Induction step for limit ordinals. $)
    tfindsg.7 $e |- ( ( ( Lim x /\ B e. On ) /\ B C_ x ) ->
                   ( A. y e. x ( B C_ y -> ch ) -> ph ) ) $.
    $( Transfinite Induction (inference schema), using implicit substitutions.
       The first four hypotheses establish the substitutions we need.  The last
       three are the basis, the induction step for successors, and the
       induction step for limit ordinals.  The basis of this version is an
       arbitrary ordinal ` B ` instead of zero.  Remark in [TakeutiZaring]
       p. 57.  (Contributed by NM, 5-Mar-2004.) $)
    tfindsg $p |- ( ( ( A e. On /\ B e. On ) /\ B C_ A ) -> ta ) $=
      ( wcel wi wceq wa con0 wss cv c0 csuc wb sseq2 adantl syl6bir imp imbi12d
      eqeq2 imbi1d ss0 con3i pm2.21d pm5.74d sylan9bbr pm2.61ian imbi2d a1d wex
      vex sucex eqvinc syl5ibr biimpd sylan9r exlimiv sylbi eqcoms imim2i com4r
      wne df-ne anbi2i annim bitri onsssuc suceloni onelpss sylan2 bitrd ancoms
      wn ax-1 syl8 a2d com23 sylbird syl5bir pm2.61d wlim wral ralimdv ad2antlr
      ex pm2.27 syld exp31 com3l com4t tfinds imp31 ) HUAQIUAQZIHUBZEXEIFUCZUBZ
      ARZRXEIUDUBZBRZRXEIGUCZUBZCRZRZXEIXLUEZUBZDRZRXEXFERZRFGHXGUDSZXIXKXEIUDS
      ZXTXIXKUFYAXTTXHXJABXTXHXJUFYAXGUDIUGZUHYAXTABUFZYAXTXGISZYCIUDXGULJUIUJU
      KXTXIXJARYAWEZXKXTXHXJAYBUMYEXJABYEXJYCXJYAIUNUOUPUQURUSUTXGXLSZXIXNXEYFX
      HXMACXGXLIUGKUKUTXGXPSZXIXRXEYGXHXQADXGXPIUGLUKUTXGHSZXIXSXEYHXHXFAEXGHIU
      GMUKUTXEBXJNVAXLUAQZXEXNXRYIXEXNXRRZYIXETZXQIXPSZRZYJXEYMYJRYIYMXNXQXEDYM
      XQXEDRZRXNYLYNXQYNXPIXPISYGYDTZFVBYNFXPIXLGVCVDVEYOYNFYDXEAYGDXEAYDBNJVFY
      GADLVGVHVIVJVKVLVAVMUHYMWEZXQIXPVNZTZYKYJYRXQYLWEZTYPYQYSXQIXPVOVPXQYLVQV
      RYKYRXMYJXEYIXMYRUFXEYITXMIXPQZYRIXLVSYIXEXPUAQYTYRUFXLVTIXPWAWBWCWDYKXNX
      MXRYKXMCXRYKXMCDXRYKXMCDROWQDXQWFWGWHWIWJWKWLWQWHXEXHXGWMZXOGXGWNZAUUAXEX
      HUUBARZUUAXEXHUUCUUAXETXHTUUBXNGXGWNZAXEUUBUUDRUUAXHXEXOXNGXGXEXNWRWOWPPW
      SWTXAXBXCXD $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x ch $.  $d x th $.  $d x ta $.  $d y ph $.
    $( Substitutions. $)
    tfindsg2.1 $e |- ( x = suc B -> ( ph <-> ps ) ) $.
    tfindsg2.2 $e |- ( x = y -> ( ph <-> ch ) ) $.
    tfindsg2.3 $e |- ( x = suc y -> ( ph <-> th ) ) $.
    tfindsg2.4 $e |- ( x = A -> ( ph <-> ta ) ) $.
    $( Basis. $)
    tfindsg2.5 $e |- ( B e. On -> ps ) $.
    $( Induction step for successor ordinals. $)
    tfindsg2.6 $e |- ( ( y e. On /\ B e. y ) -> ( ch -> th ) ) $.
    $( Induction step for limit ordinals. $)
    tfindsg2.7 $e |- ( ( Lim x /\ B e. x ) ->
                   ( A. y e. x ( B e. y -> ch ) -> ph ) ) $.
    $( Transfinite Induction (inference schema), using implicit substitutions.
       The first four hypotheses establish the substitutions we need.  The last
       three are the basis, the induction step for successors, and the
       induction step for limit ordinals.  The basis of this version is an
       arbitrary ordinal ` suc B ` instead of zero.  (Unnecessary distinct
       variable restrictions were removed by David Abernethy, 19-Jun-2012.)
       (Contributed by NM, 5-Jan-2005.) $)
    tfindsg2 $p |- ( ( A e. On /\ B e. A ) -> ta ) $=
      ( con0 wcel wa wi csuc wss onelon sucelon sylib eloni ordsucss syl sylbir
      word imp cv wb ordelsuc sylan2 ancoms ex adantr sylbird sylan2br wlim cvv
      wral vex limelon mpan anassrs imbi1d ralbidva imbi12d tfindsg expl mp2and
      mpbid ) HQRZIHRZSZIUAZQRZVRHUBZEVQIQRZVSHIUCIUDZUEVOVPVTVOHUJVPVTTHUFIHUG
      UHUKVOVSVTSETVPVOVSVTEABCDEFGHVRJKLMVSWABWBNUIGULZQRZVSSVRWCUBZCDTZVSWDWA
      WEWFTWBWDWASWEIWCRZWFWAWDWGWEUMZWDWAWCUJZWHWCUFZIWCQUNZUOUPWDWGWFTWAWDWGW
      FOUQURUSUTUKFULZVAZVSSVRWLUBZWECTZGWLVCZATZVSWMWAWNWQTZWBWMWASIWLRZWGCTZG
      WLVCZATZTZWRWMXCWAWMWSXBPUQURWAWMXCWRUMZWMWAWLQRZXDWLVBRWMXEFVDWLVBVEVFWA
      XESZWSWNXBWQXEWAWLUJWSWNUMWLUFIWLQUNUOXFXAWPAXFWTWOGWLXFWCWLRZSWGWECWAXEX
      GWHXEXGSZWAWIWHXHWDWIWLWCUCWJUHWKUOVGVHVIVHVJUOUPVNUTUKVKVLURVM $.
  $}

  ${
    $d x y z $.  $d y z ph $.
    tfindes.1 $e |- [. (/) / x ]. ph $.
    tfindes.2 $e |- ( x e. On -> ( ph -> [. suc x / x ]. ph ) ) $.
    tfindes.3 $e |- ( Lim y -> ( A. x e. y ph -> [. y / x ]. ph ) ) $.
    $( Transfinite Induction with explicit substitution.  The first hypothesis
       is the basis, the second is the induction step for successors, and the
       third is the induction step for limit ordinals.  Theorem Schema 4 of
       [Suppes] p. 197.  (Contributed by NM, 5-Mar-2004.) $)
    tfindes $p |- ( x e. On -> ph ) $=
      ( vz cv wsbc c0 csuc dfsbcq sbceq2a con0 wcel nfsbc1v nfim imbi12d wral
      wi nfv eleq1 sbceq1a suceq sbceq1d chvar wlim cbvralsv sbsbc ralbii bitri
      weq wsb syl5bir tfinds ) ABCHZIZABJIABGHZIZABURKZIZACGBHZABUPJLABUPURLABU
      PUTLABUPMDVBNOZAABVBKZIZTZTURNOZUSVATZTBGVGVHBVGBUAUSVABABURPABUTPQQBGULZ
      VCVGVFVHVBURNUBVIAUSVEVAABURUCVIABVDUTVBURUDUERREUFUSGUPSZABUPSZUPUGUQVKA
      BGUMZGUPSVJABGUPUHVLUSGUPABGUIUJUKFUNUO $.
  $}

  ${
    $d x y ta $.  $d x ps $.  $d x ch $.  $d x th $.  $d y ph $.
    $( Substitutions. $)
    tfinds2.1 $e |- ( x = (/) -> ( ph <-> ps ) ) $.
    tfinds2.2 $e |- ( x = y -> ( ph <-> ch ) ) $.
    tfinds2.3 $e |- ( x = suc y -> ( ph <-> th ) ) $.
    $( Basis. $)
    tfinds2.4 $e |- ( ta -> ps ) $.
    $( Induction step for successors. $)
    tfinds2.5 $e |- ( y e. On -> ( ta -> ( ch -> th ) ) ) $.
    $( Induction step for limit ordinals. $)
    tfinds2.6 $e |- ( Lim x -> ( ta -> ( A. y e. x ch -> ph ) ) ) $.
    $( Transfinite Induction (inference schema), using implicit substitutions.
       The first three hypotheses establish the substitutions we need.  The
       last three are the basis and the induction hypotheses (for successor and
       limit ordinals respectively).  Theorem Schema 4 of [Suppes] p. 197.  The
       wff ` ta ` is an auxiliary antecedent to help shorten proofs using this
       theorem.  (Contributed by NM, 4-Sep-2004.) $)
    tfinds2 $p |- ( x e. On -> ( ta -> ph ) ) $=
      ( wi wsbc sbcie wcel cvv ax-mp wb c0 0ex cv wceq imbi2d con0 csuc vex a2d
      mpbir sbcth sbcimg mpbi sbcel1v 3imtr3i bicomd equcoms sucex sbcbii suceq
      weq sbcco2 bitr3i 3imtr3g wral sbsbc sbralie r19.21v syl5bi limeq syl5bir
      wlim wsb tfindes ) EANZFGVOFUAOEBNZKVOVPFUAUBFUCZUAUDABEHUEPUJVQUFQZECNZG
      VQOZEDNZGVQOZVOVOFVQUGZOZGUCZUFQZGVQOZVSWANZGVQOZVRVTWBNZWFWHNZGVQOZWGWIN
      ZVQRQZWLFUHZWKGVQRWFECDLUIUKSWNWLWMTWOWFWHGVQRULSUMGVQUFUNWNWIWJTWOVSWAGV
      QRULSUOVSVOGVQWOGFVACAECATFGFGVAACIUPUQUEZPWBVOFWEUGZOZGVQOWDWRWAGVQVOWAF
      WQWEGUHZURVQWQUDADEJUEPUSVOFGWCWQVQWEUTVBVCVDVOFWEVEZVSGVQVEZFWEOZWEVLZVO
      FWEOZXBXAFGVMWTXAFGVFVSVOGFWPVGVCVQVLZFWEOZXAVONZFWEOZXCXBXDNZXEXGNZFWEOZ
      XFXHNZWERQZXKWSXJFWERXAECGVQVEZNXEVOECGVQVHXEEXNAMUIVIUKSXMXKXLTWSXEXGFWE
      RULSUMXEXCFWEWSVQWEVJPXMXHXITWSXAVOFWERULSUOVKVN $.
  $}

  ${
    $d x A $.  $d y ph $.  $d x ch $.  $d x ta $.  $d x y et $.
    $( Substitutions. $)
    tfinds3.1 $e |- ( x = (/) -> ( ph <-> ps ) ) $.
    tfinds3.2 $e |- ( x = y -> ( ph <-> ch ) ) $.
    tfinds3.3 $e |- ( x = suc y -> ( ph <-> th ) ) $.
    tfinds3.4 $e |- ( x = A -> ( ph <-> ta ) ) $.
    $( Basis. $)
    tfinds3.5 $e |- ( et -> ps ) $.
    $( Induction step for successors. $)
    tfinds3.6 $e |- ( y e. On -> ( et -> ( ch -> th ) ) ) $.
    $( Induction step for limit ordinals. $)
    tfinds3.7 $e |- ( Lim x -> ( et -> ( A. y e. x ch -> ph ) ) ) $.
    $( Principle of Transfinite Induction (inference schema), using implicit
       substitutions.  The first four hypotheses establish the substitutions we
       need.  The last three are the basis, the induction step for successors,
       and the induction step for limit ordinals.  (Contributed by NM,
       6-Jan-2005.)  (Revised by David Abernethy, 21-Jun-2011.) $)
    tfinds3 $p |- ( A e. On -> ( et -> ta ) ) $=
      ( wi cv wceq imbi2d c0 csuc con0 wcel a2d wral wlim r19.21v syl5bi tfinds
      ) FAQZFBQFCQZFDQFEQGHIGRZUASABFJTUMHRZSACFKTUMUNUBSADFLTUMISAEFMTNUNUCUDF
      CDOUEULHUMUFFCHUMUFZQUMUGZUKFCHUMUHUPFUOAPUEUIUJ $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        The natural numbers (i.e. finite ordinals)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Declare new symbol. $)
  $c _om $. $( Greek letter omega $)

  $( Extend class notation to include the class of natural numbers. $)
  com $a class _om $.

  ${
    $d x y $.
    $( Define the class of natural numbers, which are all ordinal numbers that
       are less than every limit ordinal, i.e. all finite ordinals.  Our
       definition is a variant of the Definition of N of [BellMachover]
       p. 471.  See ~ dfom2 for an alternate definition.  Later, when we assume
       the Axiom of Infinity, we show ` _om ` is a set in ~ omex , and ` _om `
       can then be defined per ~ dfom3 (the smallest inductive set) and
       ~ dfom4 .

       _Note_: the natural numbers ` _om ` are a subset of the ordinal numbers
       ~ df-on .  They are completely different from the natural numbers ` NN `
       ( ~ df-nn ) that are a subset of the complex numbers defined much later
       in our development, although the two sets have analogous properties and
       operations defined on them.  (Contributed by NM, 15-May-1994.) $)
    df-om $a |- _om = { x e. On | A. y ( Lim y -> x e. y ) } $.
  $}

  ${
    $d x z $.  $d y z $.
    $( An alternate definition of the set of natural numbers ` _om ` .
       Definition 7.28 of [TakeutiZaring] p. 42, who use the symbol K_I for the
       inner class builder of non-limit ordinal numbers (see ~ nlimon ).
       (Contributed by NM, 1-Nov-2004.) $)
    dfom2 $p |- _om = { x e. On | suc x C_ { y e. On | -. Lim y } } $=
      ( vz com cv wlim wcel wi wal con0 crab csuc wn df-om wa wb onsssuc impexp
      wss cvv ontri1 bitr3d ancoms weq limeq elrab a1i imbi12d pm5.74da limelon
      notbid vex mpan pm4.71ri imbi1i con34b ibar imbi2d syl5bb 3bitri syl6rbbr
      pm5.74i simpr suceloni onelon ex ancrd impbid2 imbi1d syl5bbr bitrd dfss2
      syl albidv syl6bbr rabbiia eqtri ) DCEZFZAEZVRGZHZCIZAJKVTLZBEZFZMZBJKZSZ
      AJKACNWCWIAJVTJGZWCVRWDGZVRWHGZHZCIWIWJWBWMCWJWBVRJGZWMHZWMWJWOWNWAMZWNVS
      MZOZHZHZWBWJWNWMWSWJWNOZWKWPWLWRWNWJWKWPPWNWJOVRVTSWKWPVRVTQVRVTUAUBUCWLW
      RPXAWGWQBVRJBCUDWFVSWEVRUEUKUFUGUHUIWBWNVSOZWAHWNWBHWTVSXBWAVSWNVRTGVSWNC
      ULVRTUJUMUNUOWNVSWARWNWBWSWBWPWQHWNWSVSWAUPWNWQWRWPWNWQUQURUSVBUTVAWOWNWK
      OZWLHWJWMWNWKWLRWJXCWKWLWJXCWKWNWKVCWJWKWNWJWDJGZWKWNHVTVDXDWKWNWDVRVEVFV
      MVGVHVIVJVKVNCWDWHVLVOVPVQ $.
  $}

  ${
    $d A x y $.
    $( Membership in omega.  The left conjunct can be eliminated if we assume
       the Axiom of Infinity; see ~ elom3 .  (Contributed by NM,
       15-May-1994.) $)
    elom $p |- ( A e. _om <-> ( A e. On /\ A. x ( Lim x -> A e. x ) ) ) $=
      ( vy cv wlim wcel wi wal con0 com wceq eleq1 imbi2d albidv df-om elrab2 )
      ADZEZCDZQFZGZAHRBQFZGZAHCBIJSBKZUAUCAUDTUBRSBQLMNCAOP $.
  $}

  ${
    $d x y $.
    $( Omega is a subset of ` On ` .  (Contributed by NM, 13-Jun-1994.)  (Proof
       shortened by Andrew Salmon, 27-Aug-2011.) $)
    omsson $p |- _om C_ On $=
      ( vx vy com cv csuc wlim wn con0 crab wss dfom2 ssrab2 eqsstri ) CADEBDFG
      BHIJZAHIHABKNAHLM $.
  $}

  ${
    $d x y A $.
    $( The class of natural numbers is a subclass of any (infinite) limit
       ordinal.  Exercise 1 of [TakeutiZaring] p. 44.  Remarkably, our proof
       does not require the Axiom of Infinity.  (Contributed by NM,
       30-Oct-2003.) $)
    limomss $p |- ( Lim A -> _om C_ A ) $=
      ( vx vy word wlim com wss limord con0 wcel wceq wo wi ordeleqon wa cv wal
      elom simprbi limeq eleq2 imbi12d spcgv syl5 com23 imp ssrdv omsson mpbiri
      ex sseq2 a1d jaoi sylbi mpcom ) ADZAEZFAGZAHUPAIJZAIKZLUQURMZANUSVAUTUSUQ
      URUSUQOBFAUSUQBPZFJZVBAJZMUSVCUQVDVCCPZEZVBVEJZMZCQZUSUQVDMZVCVBIJVICVBRS
      VHVJCAIVEAKVFUQVGVDVEATVEAVBUAUBUCUDUEUFUGUJUTURUQUTURFIGUHAIFUKUIULUMUNU
      O $.
  $}

  $( A natural number is an ordinal number.  (Contributed by NM,
     27-Jun-1994.) $)
  nnon $p |- ( A e. _om -> A e. On ) $=
    ( com con0 omsson sseli ) BCADE $.

  ${
    nnoni.1 $e |- A e. _om $.
    $( A natural number is an ordinal number.  (Contributed by NM,
       27-Jun-1994.) $)
    nnoni $p |- A e. On $=
      ( com wcel con0 nnon ax-mp ) ACDAEDBAFG $.
  $}

  $( A natural number is ordinal.  (Contributed by NM, 17-Oct-1995.) $)
  nnord $p |- ( A e. _om -> Ord A ) $=
    ( com wcel con0 word nnon eloni syl ) ABCADCAEAFAGH $.

  ${
    $d x y z $.
    $( Omega is ordinal.  Theorem 7.32 of [TakeutiZaring] p. 43.  (Contributed
       by NM, 18-Oct-1995.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    ordom $p |- Ord _om $=
      ( vy vx vz com wtr con0 wss word wel cv wcel wa wi wal wlim onelon expcom
      dftr2 limord elom ordtr trel 3syl com12 a2d alimdv anim12d 3imtr4g ax-gen
      expd imp mpgbir omsson ordon trssord mp3an ) DEZDFGFHDHUQABIZBJZDKZLAJZDK
      ZMZBNAABDRVCBURUTVBURUSFKZCJZOZBCIZMZCNZLVAFKZVFACIZMZCNZLUTVBURVDVJVIVMV
      DURVJUSVAPQURVHVLCURVFVGVKVFURVGVKMVFURVGVKVFVEHVEEURVGLVKMVESVEUAVEVAUSU
      BUCUJUDUEUFUGCUSTCVATUHUKUIULUMUNDFUOUP $.
  $}

  $( A member of a natural number is a natural number.  (Contributed by NM,
     21-Jun-1998.) $)
  elnn $p |- ( ( A e. B /\ B e. _om ) -> A e. _om ) $=
    ( com word wtr wcel wa wi ordom ordtr trel mp2b ) CDCEABFBCFGACFHICJCABKL
    $.

  $( The class of natural numbers ` _om ` is either an ordinal number (if we
     accept the Axiom of Infinity) or the proper class of all ordinal numbers
     (if we deny the Axiom of Infinity).  Remark in [TakeutiZaring] p. 43.
     (Contributed by NM, 10-May-1998.) $)
  omon $p |- ( _om e. On \/ _om = On ) $=
    ( com word con0 wcel wceq wo ordom ordeleqon mpbi ) ABACDACEFGAHI $.

  ${
    $( Omega is an ordinal number.  (Contributed by Mario Carneiro,
       30-Jan-2013.) $)
    omelon2 $p |- ( _om e. _V -> _om e. On ) $=
      ( com con0 wcel cvv wn wceq omon ori onprc eleq1 mtbiri syl con4i ) ABCZA
      DCZNEABFZOENPGHPOBDCIABDJKLM $.
  $}

  ${
    $d x y A $.
    $( A natural number is not a limit ordinal.  (Contributed by NM,
       18-Oct-1995.) $)
    nnlim $p |- ( A e. _om -> -. Lim A ) $=
      ( vx com wcel wlim word wn nnord ordirr syl cv wal con0 elom simprbi wceq
      wi limeq eleq2 imbi12d spcgv mpd mtod ) ACDZAEZAADZUDAFUFGAHAIJUDBKZEZAUG
      DZQZBLZUEUFQZUDAMDUKBANOUJULBACUGAPUHUEUIUFUGARUGAASTUAUBUC $.

    $( The class of natural numbers is a subclass of the class of non-limit
       ordinal numbers.  Exercise 4 of [TakeutiZaring] p. 42.  (Contributed by
       NM, 2-Nov-2004.)  (Proof shortened by Andrew Salmon, 27-Aug-2011.) $)
    omssnlim $p |- _om C_ { x e. On | -. Lim x } $=
      ( com cv wlim wn con0 crab wss wral omsson nnlim rgen ssrab mpbir2an ) BA
      CZDEZAFGHBFHPABIJPABOKLPAFBMN $.
  $}

  $( Omega is a limit ordinal.  Theorem 2.8 of [BellMachover] p. 473.  Our
     proof, however, does not require the Axiom of Infinity.  (Contributed by
     NM, 26-Mar-1995.)  (Proof shortened by Mario Carneiro, 2-Sep-2015.) $)
  limom $p |- Lim _om $=
    ( vx com word wlim ordom con0 wcel wceq wo ordeleqon cv wi wal ordirr ax-mp
    wn elom baib mtbii limeq limomss wb limord ordsseleq sylancr mpbid biimprcd
    wss ord syld con1d com12 alrimiv nsyl2 limon mpbiri jaoi sylbi ) BCZBDZEUSB
    FGZBFHZIUTBJVAUTVBVAAKZDZBVCGZLZAMZUTVABBGZVGUSVHPEBNOVHVAVGABQRSUTPZVFAVDV
    IVEVDVEUTVDVEPBVCHZUTVDVEVJVDBVCUHZVEVJIZVCUAVDUSVCCVKVLUBEVCUCBVCUDUEUFUIV
    JUTVDBVCTUGUJUKULUMUNVBUTFDUOBFTUPUQURO $.

  $( A class belongs to omega iff its successor does.  (Contributed by NM,
     3-Dec-1995.) $)
  peano2b $p |- ( A e. _om <-> suc A e. _om ) $=
    ( com wlim wcel csuc wb limom limsuc ax-mp ) BCABDAEBDFGBAHI $.

  ${
    $d x y A $.
    $( A nonzero natural number is a successor.  (Contributed by NM,
       18-Feb-2004.) $)
    nnsuc $p |- ( ( A e. _om /\ A =/= (/) ) -> E. x e. _om A = suc x ) $=
      ( com wcel c0 wne wa cv csuc wceq con0 wrex wlim wn nnlim adantr wi nnord
      word cuni orduninsuc w3a df-lim biimpri 3expia sylbird sylan mt3d biimpcd
      wb eleq1 peano2b syl6ibr ancrd adantld reximdv2 mpd ) BCDZBEFZGZBAHZIZJZA
      KLZVCACLZUTVDBMZURVFNUSBOPURBSZUSVDNZVFQBRVGUSGVHBBTJZVFVGVIVHUJUSABUAPVG
      USVIVFVFVGUSVIUBBUCUDUEUFUGUHURVDVEQUSURVCVCAKCURVCVACDZVCGVAKDURVCVJURVC
      VBCDZVJVCURVKBVBCUKUIVAULUMUNUOUPPUQ $.
  $}

  ${
    $d x A $.
    $( An ordinal subclass of non-limit ordinals is a class of natural
       numbers.  Exercise 7 of [TakeutiZaring] p. 42.  (Contributed by NM,
       2-Nov-2004.) $)
    ssnlim $p |- ( ( Ord A /\ A C_ { x e. On | -. Lim x } ) -> A C_ _om ) $=
      ( word cv wlim wn con0 crab wss wa com wcel limom ssel limeq notbid elrab
      wceq simprbi syl6 mt2i adantl wb ordom ordtri1 mpan2 adantr mpbird ) BCZB
      ADZEZFZAGHZIZJBKIZKBLZFZUNUQUIUNUPKEZMUNUPKUMLZURFZBUMKNUSKGLUTULUTAKGUJK
      RUKURUJKOPQSTUAUBUIUOUQUCZUNUIKCVAUDBKUEUFUGUH $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
                 Peano's postulates
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  $( Zero is a natural number.  One of Peano's five postulates for arithmetic.
     Proposition 7.30(1) of [TakeutiZaring] p. 42.  Note:  Unlike most
     textbooks, our proofs of ~ peano1 through ~ peano5 do not use the Axiom of
     Infinity.  Unlike Takeuti and Zaring, they also do not use the Axiom of
     Regularity.  (Contributed by NM, 15-May-1994.) $)
  peano1 $p |- (/) e. _om $=
    ( com wlim c0 wcel limom 0ellim ax-mp ) ABCADEAFG $.

  $( The successor of any natural number is a natural number.  One of Peano's
     five postulates for arithmetic.  Proposition 7.30(2) of [TakeutiZaring]
     p. 42.  (Contributed by NM, 3-Sep-2003.) $)
  peano2 $p |- ( A e. _om -> suc A e. _om ) $=
    ( com wcel csuc peano2b biimpi ) ABCADBCAEF $.

  $( The successor of any natural number is not zero.  One of Peano's five
     postulates for arithmetic.  Proposition 7.30(3) of [TakeutiZaring] p. 42.
     (Contributed by NM, 3-Sep-2003.) $)
  peano3 $p |- ( A e. _om -> suc A =/= (/) ) $=
    ( csuc c0 wne com wcel nsuceq0 a1i ) ABCDAEFAGH $.

  $( Two natural numbers are equal iff their successors are equal, i.e. the
     successor function is one-to-one.  One of Peano's five postulates for
     arithmetic.  Proposition 7.30(4) of [TakeutiZaring] p. 43.  (Contributed
     by NM, 3-Sep-2003.) $)
  peano4 $p |- ( ( A e. _om /\ B e. _om ) -> ( suc A = suc B <-> A = B ) ) $=
    ( com wcel con0 csuc wceq wb nnon suc11 syl2an ) ACDAEDBEDAFBFGABGHBCDAIBIA
    BJK $.

  ${
    $d x y A $.
    $( The induction postulate: any class containing zero and closed under the
       successor operation contains all natural numbers.  One of Peano's five
       postulates for arithmetic.  Proposition 7.30(5) of [TakeutiZaring]
       p. 43, except our proof does not require the Axiom of Infinity.  The
       more traditional statement of mathematical induction as a theorem
       schema, with a basis and an induction step, is derived from this theorem
       as theorem ~ findes .  (Contributed by NM, 18-Feb-2004.) $)
    peano5 $p |- ( ( (/) e. A /\
                 A. x e. _om ( x e. A -> suc x e. A ) ) -> _om C_ A ) $=
      ( vy c0 wcel cv csuc wi com wral wa wceq wss wrex wn adantl wne eleq1 nfv
      exp32 cdif cin eldifn eldifi biimpcd necon3bd mpan9 nnsuc syl2anc adantlr
      elndif adantr nfra1 nfan rsp vex sucid eleq2 mpbiri peano2b syl6bbr minel
      neldif sylan2 syl6bi mpid syl5 impd eleq1a com12 imim12d com13 sylan9 a1i
      rexlimd imp41 mtand nrexdv word ordom difss tz7.5 mp3an12 necon1bi ssdif0
      mpd syl sylibr ) DBEZAFZBEZWJGZBEZHZAIJZKZIBUAZDLZIBMWPWQCFZUBDLZCWQNZOWR
      WPWTCWQWPWSWQEZKZWTWSBEZXBXDOWPWSIBUCPXCWTKWSWLLZAINZXDXCXFWTWIXBXFWOWIXB
      KWSIEZWSDQZXFXBXGWIWSIBUDZPWIDWQEZOXBXHDBIUKXBXJWSDWSDLXBXJWSDWQRUEUFUGAW
      SUHUIUJULWIWOXBWTXFXDHZWOXBWTXKHHHWIWOXBWTXKWOXBWTKZKXEXDAIWOXLAWNAIUMXLA
      SUNXDASWOWJIEZWNXLXEXDHWNAIUOXEWNXLXDXEXLWKWMXDXEXBWTWKXBXGXEWTWKHZXIXEXG
      WJWSEZXNXEXOWJWLEWJAUPUQWSWLWJURUSXEXGXMXOXNHXEXGWLIEXMWSWLIRWJUTVAXMXOWT
      WKXOWTKXMWJWQEOWKWJWSWQVBWJIBVCVDTVEVFVGVHWMXEXDWLBWSVIVJVKVLVMVOTVNVPWFV
      QVRXAWQDIVSWQIMWQDQXAVTIBWACIWQWBWCWDWGIBWEWH $.
  $}

  ${
    $d x A $.
    $( A natural number is either 0 or a successor.  (Contributed by NM,
       27-May-1998.) $)
    nn0suc $p |- ( A e. _om -> ( A = (/) \/ E. x e. _om A = suc x ) ) $=
      ( com wcel c0 wceq cv csuc wrex wn wne df-ne nnsuc sylan2br ex orrd ) BCD
      ZBEFZBAGHFACIZQRJZSTQBEKSBELABMNOP $.
  $}

$(
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
              Finite induction (for finite ordinals)
=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
$)

  ${
    $d x A $.
    find.1 $e |- ( A C_ _om /\ (/) e. A /\ A. x e. A suc x e. A ) $.
    $( The Principle of Finite Induction (mathematical induction).  Corollary
       7.31 of [TakeutiZaring] p. 43.  The simpler hypothesis shown here was
       suggested in an email from ""Colin"" on 1-Oct-2001.  The hypothesis states
       that ` A ` is a set of natural numbers, zero belongs to ` A ` , and
       given any member of ` A ` the member's successor also belongs to
       ` A ` .  The conclusion is that every natural number is in ` A ` .
       (Contributed by NM, 22-Feb-2004.)  (Proof shortened by Andrew Salmon,
       27-Aug-2011.) $)
    find $p |- A = _om $=
      ( com wss c0 wcel cv csuc wral simp1i wi wa w3a 3simpc ax-mp df-ral alral
      wal sylbi anim2i peano5 eqssi ) BDBDEZFBGZAHZIBGZABJZCKUEUFBGUGLZADJZMZDB
      EUEUHMZUKUDUEUHNULCUDUEUHOPUHUJUEUHUIASUJUGABQUIADRTUAPABUBPUC $.
  $}

  ${
    $d x y $.  $d x A $.  $d x ps $.  $d x ch $.  $d x th $.  $d x ta $.
    $d y ph $.
    $( Substitutions. $)
    finds.1 $e |- ( x = (/) -> ( ph <-> ps ) ) $.
    finds.2 $e |- ( x = y -> ( ph <-> ch ) ) $.
    finds.3 $e |- ( x = suc y -> ( ph <-> th ) ) $.
    finds.4 $e |- ( x = A -> ( ph <-> ta ) ) $.
    $( Basis. $)
    finds.5 $e |- ps $.
    $( Induction step. $)
    finds.6 $e |- ( y e. _om -> ( ch -> th ) ) $.
    $( Principle of Finite Induction (inference schema), using implicit
       substitutions.  The first four hypotheses establish the substitutions we
       need.  The last two are the basis and the induction step.  Theorem
       Schema 22 of [Suppes] p. 136.  This is Metamath 100 proof #74.
       (Contributed by NM, 14-Apr-1995.) $)
    finds $p |- ( A e. _om -> ta ) $=
      ( com wcel cab c0 cv elab csuc wi wral wss 0ex mpbir sucex 3imtr4g peano5
      vex rgen mp2an sseli elabg mpbid ) HOPHAFQZPEOUPHRUPPZGSZUPPZURUAZUPPZUBZ
      GOUCOUPUDUQBMABFRUEITUFVBGOUROPCDUSVANACFURGUJZJTADFUTURVCUGKTUHUKGUPUIUL
      UMAEFHOLUNUO $.
  $}

  ${
    $d x A $.  $d x y B $.  $d x ps $.  $d x ch $.  $d x th $.  $d x ta $.
    $d y ph $.
    $( Substitutions. $)
    findsg.1 $e |- ( x = B -> ( ph <-> ps ) ) $.
    findsg.2 $e |- ( x = y -> ( ph <-> ch ) ) $.
    findsg.3 $e |- ( x = suc y -> ( ph <-> th ) ) $.
    findsg.4 $e |- ( x = A -> ( ph <-> ta ) ) $.
    $( Basis. $)
    findsg.5 $e |- ( B e. _om -> ps ) $.
    $( Induction step. $)
    findsg.6 $e |- ( ( ( y e. _om /\ B e. _om ) /\ B C_ y )
        -> ( ch -> th ) ) $.
    $( Principle of Finite Induction (inference schema), using implicit
       substitutions.  The first four hypotheses establish the substitutions we
       need.  The last two are the basis and the induction step.  The basis of
       this version is an arbitrary natural number ` B ` instead of zero.
       (Contributed by NM, 16-Sep-1995.) $)
    findsg $p |- ( ( ( A e. _om /\ B e. _om ) /\ B C_ A ) -> ta ) $=
      ( wcel wss wi wceq wa com cv c0 wb sseq2 adantl eqeq2 syl6bir imp imbi12d
      csuc wn imbi1d ss0 pm2.21d pm5.74d sylan9bbr pm2.61ian imbi2d a1d wex vex
      con3i sucex eqvinc syl5ibr biimpd sylan9r exlimiv sylbi eqcoms imim2i wne
      com4r df-ne anbi2i annim bitri con0 onsssuc suceloni onelpss sylan2 bitrd
      nnon syl2anr ex ax-1 syl8 a2d com23 sylbird syl5bir pm2.61d finds imp31 )
      HUAPIUAPZIHQZEWQIFUBZQZARZRWQIUCQZBRZRWQIGUBZQZCRZRWQIXDUKZQZDRZRWQWRERZR
      FGHWSUCSZXAXCWQIUCSZXKXAXCUDXLXKTWTXBABXKWTXBUDXLWSUCIUEZUFXLXKABUDZXLXKW
      SISZXNIUCWSUGJUHUIUJXKXAXBARXLULZXCXKWTXBAXMUMXPXBABXPXBXNXBXLIUNVCUOUPUQ
      URUSWSXDSZXAXFWQXQWTXEACWSXDIUEKUJUSWSXGSZXAXIWQXRWTXHADWSXGIUELUJUSWSHSZ
      XAXJWQXSWTWRAEWSHIUEMUJUSWQBXBNUTXDUAPZWQXFXIXTWQXFXIRZXTWQTZXHIXGSZRZYAW
      QYDYARXTYDXFXHWQDYDXHWQDRZRXFYCYEXHYEXGIXGISXRXOTZFVAYEFXGIXDGVBVDVEYFYEF
      XOWQAXRDWQAXOBNJVFXRADLVGVHVIVJVKVLUTVNUFYDULZXHIXGVMZTZYBYAYIXHYCULZTYGY
      HYJXHIXGVOVPXHYCVQVRYBYIXEYAWQIVSPZXDVSPZXEYIUDXTIWEXDWEYKYLTXEIXGPZYIIXD
      VTYLYKXGVSPYMYIUDXDWAIXGWBWCWDWFYBXFXEXIYBXECXIYBXECDXIYBXECDROWGDXHWHWIW
      JWKWLWMWNWGWJWOWP $.
  $}

  ${
    $d x y ta $.  $d x ps $.  $d x ch $.  $d x th $.  $d y ph $.
    $( Substitutions. $)
    finds2.1 $e |- ( x = (/) -> ( ph <-> ps ) ) $.
    finds2.2 $e |- ( x = y -> ( ph <-> ch ) ) $.
    finds2.3 $e |- ( x = suc y -> ( ph <-> th ) ) $.
    $( Basis. $)
    finds2.4 $e |- ( ta -> ps ) $.
    $( Induction step. $)
    finds2.5 $e |- ( y e. _om -> ( ta -> ( ch -> th ) ) ) $.
    $( Principle of Finite Induction (inference schema), using implicit
       substitutions.  The first three hypotheses establish the substitutions
       we need.  The last two are the basis and the induction step.  Theorem
       Schema 22 of [Suppes] p. 136.  (Contributed by NM, 29-Nov-2002.) $)
    finds2 $p |- ( x e. _om -> ( ta -> ph ) ) $=
      ( cv com wcel wi c0 wceq imbi2d elab cab csuc wss 0ex mpbir a2d vex sucex
      wral 3imtr4g rgen peano5 mp2an sseli abid sylib ) FMZNOUQEAPZFUAZOURNUSUQ
      QUSOZGMZUSOZVAUBZUSOZPZGNUINUSUCUTEBPZKURVFFQUDUQQRABEHSTUEVEGNVANOZECPZE
      DPZVBVDVGECDLUFURVHFVAGUGZUQVARACEISTURVIFVCVAVJUHUQVCRADEJSTUJUKGUSULUMU
      NURFUOUP $.
  $}

  ${
    $d x y $.  $d x ps $.  $d x ch $.  $d x th $.  $d y ph $.
    $( Substitutions. $)
    finds1.1 $e |- ( x = (/) -> ( ph <-> ps ) ) $.
    finds1.2 $e |- ( x = y -> ( ph <-> ch ) ) $.
    finds1.3 $e |- ( x = suc y -> ( ph <-> th ) ) $.
    $( Basis. $)
    finds1.4 $e |- ps $.
    $( Induction step. $)
    finds1.5 $e |- ( y e. _om -> ( ch -> th ) ) $.
    $( Principle of Finite Induction (inference schema), using implicit
       substitutions.  The first three hypotheses establish the substitutions
       we need.  The last two are the basis and the induction step.  Theorem
       Schema 22 of [Suppes] p. 136.  (Contributed by NM, 22-Mar-2006.) $)
    finds1 $p |- ( x e. _om -> ph ) $=
      ( cv com wcel c0 wceq eqid a1i wi a1d finds2 mpi ) ELMNOOPZAOQABCDUCEFGHI
      BUCJRFLMNCDSUCKTUAUB $.
  $}

  ${
    $d x y z $.  $d y z ph $.
    findes.1 $e |- [. (/) / x ]. ph $.
    findes.2 $e |- ( x e. _om -> ( ph -> [. suc x / x ]. ph ) ) $.
    $( Finite induction with explicit substitution.  The first hypothesis is
       the basis and the second is the induction step.  Theorem Schema 22 of
       [Suppes] p. 136.  See ~ tfindes for the transfinite version.  This is an
       alternative for Metamath 100 proof #74.  (Contributed by Raph Levien,
       9-Jul-2003.) $)
    findes $p |- ( x e. _om -> ph ) $=
      ( vz vy wsb c0 wsbc csuc dfsbcq2 sbequ sbequ12r com wcel nfv nfim imbi12d
      cv wi nfs1v nfsbc1v weq eleq1 sbequ12 suceq sbceq1d chvar finds ) ABEGABH
      IABFGZABFSZJZIZAEFBSZABEHKAEFBLABEULKAEBMCUNNOZAABUNJZIZTZTUKNOZUJUMTZTBF
      USUTBUSBPUJUMBABFUAABULUBQQBFUCZUOUSURUTUNUKNUDVAAUJUQUMABFUEVAABUPULUNUK
      UFUGRRDUHUI $.
  $}

  $( The domain of a set is a set.  Corollary 6.8(2) of [TakeutiZaring] p. 26.
     (Contributed by NM, 7-Apr-1995.) $)
  dmexg $p |- ( A e. V -> dom A e. _V ) $=
    ( wcel cuni cvv cdm uniexg wss crn ssun1 dmrnssfld sstri ssexg mpan 3syl
    cun ) ABCADZECQDZECZAFZECZABGQEGTRHSUATTAIZPRTUBJAKLTREMNO $.

  $( The range of a set is a set.  Corollary 6.8(3) of [TakeutiZaring] p. 26.
     Similar to Lemma 3D of [Enderton] p. 41.  (Contributed by NM,
     31-Mar-1995.) $)
  rnexg $p |- ( A e. V -> ran A e. _V ) $=
    ( wcel cuni cvv crn uniexg wss cdm ssun2 dmrnssfld sstri ssexg mpan 3syl
    cun ) ABCADZECQDZECZAFZECZABGQEGTRHSUATAIZTPRTUBJAKLTREMNO $.

  ${
    dmex.1 $e |- A e. _V $.
    $( The domain of a set is a set.  Corollary 6.8(2) of [TakeutiZaring]
       p. 26.  (Contributed by NM, 7-Jul-2008.) $)
    dmex $p |- dom A e. _V $=
      ( cvv wcel cdm dmexg ax-mp ) ACDAECDBACFG $.

    $( The range of a set is a set.  Corollary 6.8(3) of [TakeutiZaring]
       p. 26.  Similar to Lemma 3D of [Enderton] p. 41.  (Contributed by NM,
       7-Jul-2008.) $)
    rnex $p |- ran A e. _V $=
      ( cvv wcel crn rnexg ax-mp ) ACDAECDBACFG $.
  $}

  $( The identity function is a proper class.  This means, for example, that we
     cannot use it as a member of the class of continuous functions unless it
     is restricted to a set, as in ~ idcn .  (Contributed by NM,
     1-Jan-2007.) $)
  iprc $p |- -. _I e. _V $=
    ( cid cvv wcel cdm vprc dmi eleq1i mtbir dmexg mto ) ABCADZBCZLBBCEKBBFGHAB
    IJ $.

  ${
    $d x y A $.
    $( The existence of a restricted identity function, proved without using
       the Axiom of Replacement (unlike ~ resfunexg ).  (Contributed by NM,
       13-Jan-2007.) $)
    resiexg $p |- ( A e. V -> ( _I |` A ) e. _V ) $=
      ( vx vy wcel cid cres cxp wss cvv relres weq cv wa cop simpr eleq1 biimpa
      jca vex opelres wbr df-br ideq bitr3i anbi1i bitri opelxp 3imtr4i sqxpexg
      relssi ssexg sylancr ) ABEFAGZAAHZIUOJEUNJECDUNUOFAKCDLZCMZAEZNZURDMZAEZN
      UQUTOZUNEZVBUOEUSURVAUPURPUPURVAUQUTAQRSVCVBFEZURNUSUQUTFADTZUAVDUPURVDUQ
      UTFUBUPUQUTFUCUQUTVEUDUEUFUGUQUTAAUHUIUKABUJUNUOJULUM $.
  $}

  $( The image of a set is a set.  Theorem 3.17 of [Monk1] p. 39.  (Contributed
     by NM, 24-Jul-1995.) $)
  imaexg $p |- ( A e. V -> ( A "" B ) e. _V ) $=
    ( wcel cima crn wss cvv imassrn rnexg ssexg sylancr ) ACDABEZAFZGNHDMHDABIA
    CJMNHKL $.

  ${
    $d x y z A $.  $d x y z B $.  $d x y z ph $.  $d z ps $.
    opabex2.1 $e |- ( ph -> A e. V ) $.
    opabex2.2 $e |- ( ph -> B e. W ) $.
    opabex2.3 $e |- ( ( ph /\ ps ) -> x e. A ) $.
    opabex2.4 $e |- ( ( ph /\ ps ) -> y e. B ) $.
    $( Condition for an operation to be a set.  (Contributed by Thierry Arnoux,
       25-Jun-2019.) $)
    opabex2 $p |- ( ph -> { <. x , y >. | ps } e. _V ) $=
      ( vz copab cvv wcel syl2anc cv wa wex cxp cop wceq df-opab simprl opelxpi
      xpexg cab adantrl eqeltrd ex exlimdvv abssdv syl5eqss ssexd ) ABCDNZEFUAZ
      OAEGPFHPUQOPIJEFGHUGQAUPMRZCRZDRZUBZUCZBSZDTCTZMUHUQBCDMUDAVDMUQAVCURUQPZ
      CDAVCVEAVCSURVAUQAVBBUEABVAUQPZVBABSUSEPUTFPVFKLUSUTEFUFQUIUJUKULUMUNUO
      $.
  $}

  ${
    $d x y A $.  $d x y R $.  $d x V $.
    $( Any set relation is set-like.  (Contributed by Mario Carneiro,
       22-Jun-2015.) $)
    exse2 $p |- ( R e. V -> R Se A ) $=
      ( vy vx wcel cv wbr crab cvv wral wse cdm wss wa cab df-rab breldm adantl
      vex abssi eqsstri dmexg ssexg sylancr ralrimivw df-se sylibr ) BCFZDGZEGZ
      BHZDAIZJFZEAKABLUIUNEAUIUMBMZNUOJFUNUMUJAFZULOZDPUOULDAQUQDUOULUJUOFUPUJU
      KBDTETRSUAUBBCUCUMUOJUDUEUFEDABUGUH $.
  $}

  $( If a Cartesian product is a set, one of its components must be a set.
     (Contributed by NM, 27-Aug-2006.) $)
  xpexr $p |- ( ( A X. B ) e. C -> ( A e. _V \/ B e. _V ) ) $=
    ( cxp wcel cvv wn wi wceq 0ex eleq1 mpbiri pm2.24d a1d wne crn rnexg eleq1d
    c0 rnxp syl5ib a1dd pm2.61ine orrd ) ABDZCEZAFEZBFEZUFUGGZUHHZHASASIZUJUFUK
    UGUHUKUGSFEJASFKLMNASOZUFUHUIUFUEPZFEULUHUECQULUMBFABTRUAUBUCUD $.

  $( If a nonempty Cartesian product is a set, so are both of its components.
     (Contributed by NM, 27-Aug-2006.) $)
  xpexr2 $p |- ( ( ( A X. B ) e. C /\ ( A X. B ) =/= (/) ) ->
               ( A e. _V /\ B e. _V ) ) $=
    ( cxp c0 wne wcel wa cvv xpnz cdm wceq dmxp adantl adantr eqeltrrd crn rnxp
    dmexg rnexg anim12dan ancom2s sylan2br ) ABDZEFUDCGZAEFZBEFZHAIGZBIGZHZABJU
    EUGUFUJUEUGUHUFUIUEUGHUDKZAIUGUKALUEABMNUEUKIGUGUDCSOPUEUFHUDQZBIUFULBLUEAB
    RNUEULIGUFUDCTOPUAUBUC $.

  $( A condition where the converse of ~ xpex holds as well.  Corollary 6.9(2)
     in [TakeutiZaring] p. 26.  (Contributed by Andrew Salmon, 13-Nov-2011.) $)
  xpexcnv $p |- ( ( B =/= (/) /\ ( A X. B ) e. _V ) -> A e. _V ) $=
    ( c0 wne cxp cvv wcel cdm dmexg dmxp eleq1d syl5ib imp ) BCDZABEZFGZAFGZPOH
    ZFGNQOFINRAFABJKLM $.

  ${
    $d x y A $.  $d x B $.  $d x y R $.  $d x V $.
    $( If the relation in a strict order is a set, then the base field is also
       a set.  (Contributed by Mario Carneiro, 27-Apr-2015.) $)
    soex $p |- ( ( R Or A /\ R e. V ) -> A e. _V ) $=
      ( vx wor wcel wa cvv c0 wceq simpr 0ex syl6eqel wne cv wex cun unexg wss
      n0 csn cdm snex dmexg rnexg syl2anc sylancr ad2antlr cdif sossfld adantlr
      crn ssundif sylibr ssexd ex exlimdv imp sylan2b pm2.61dane ) ABEZBCFZGZAH
      FZAIVCAIJZGAIHVCVEKLMAINVCDOZAFZDPZVDDATVCVHVDVCVGVDDVCVGVDVCVGGZAVFUAZBU
      BZBULZQZQZHVBVNHFZVAVGVBVJHFVMHFZVOVFUCVBVKHFVLHFVPBCUDBCUEVKVLHHRUFVJVMH
      HRUGUHVIAVJUIVMSZAVNSVAVGVQVBAVFBUJUKAVJVMUMUNUOUPUQURUSUT $.
  $}

  ${
    $d x y A $.  $d x y B $.  $d x y C $.
    $( Membership in a Cartesian product.  This version requires no quantifiers
       or dummy variables.  See also ~ elxp5 , ~ elxp6 , and ~ elxp7 .
       (Contributed by NM, 17-Feb-2004.) $)
    elxp4 $p |- ( A e. ( B X. C ) <-> ( A = <. U. dom { A } , U. ran { A } >.
                 /\ ( U. dom { A } e. B /\ U. ran { A } e. C ) ) ) $=
      ( vx vy wcel cv cop wceq wa wex csn cdm cuni crn sneq unieqd vex pm4.71ri
      syl6req elxp rneqd op2nda anbi1i anass bitri exbii snex rnex uniex eqeq2d
      opeq2 eleq1 anbi2d anbi12d ceqsexv dmeqd op1sta 3bitri dmex opeq1 anbi1d
      cxp ) ABCVCFADGZEGZHZIZVDBFZVECFZJZJZEKZDKVDALZMZNZIZAVDVMOZNZHZIZVHVRCFZ
      JZJZJZDKAVOVRHZIZVOBFZWAJZJZDEABCUAVLWDDVLWCVPVTJZWBJWDVLVEVRIZVKJZEKWCVK
      WLEVKWKVGJZVJJWLVGWMVJVGWKVGVRVFLZOZNVEVGVQWOVGVMWNAVFPUBQVDVEDRZERUCTSUD
      WKVGVJUEUFUGVKWCEVRVQVMAUHZUIUJZWKVGVTVJWBWKVFVSAVEVRVDULUKWKVIWAVHVEVRCU
      MUNUOUPUFVTWJWBVTVPVTVOVSLZMZNVDVTVNWTVTVMWSAVSPUQQVDVRWPWRURTSUDVPVTWBUE
      USUGWCWIDVOVNVMWQUTUJVPVTWFWBWHVPVSWEAVDVOVRVAUKVPVHWGWAVDVOBUMVBUOUPUS
      $.

    $( Membership in a Cartesian product requiring no quantifiers or dummy
       variables.  Provides a slightly shorter version of ~ elxp4 when the
       double intersection does not create class existence problems (caused by
       ~ int0 ).  (Contributed by NM, 1-Aug-2004.) $)
    elxp5 $p |- ( A e. ( B X. C ) <-> ( A = <. |^| |^| A , U. ran { A } >.
                 /\ ( |^| |^| A e. B /\ U. ran { A } e. C ) ) ) $=
      ( vx vy wcel cv cop wceq wa wex cint csn crn cuni syl6req pm4.71ri anbi1i
      vex anass elxp sneq rneqd unieqd op2nda bitri exbii snex rnex uniex opeq2
      cxp eqeq2d eleq1 anbi2d anbi12d ceqsexv inteqd op1stb 3bitri cvv eqvisset
      inteq adantr exlimiv elex ad2antrl opeq1 anbi1d ceqsexgv pm5.21nii ) ABCU
      LFADGZEGZHZIZVLBFZVMCFZJZJZEKZDKVLALZLZIZAVLAMZNZOZHZIZVPWFCFZJZJZJZDKZAW
      BWFHZIZWBBFZWIJZJZDEABCUAVTWLDVTWKWCWHJZWJJWLVTVMWFIZVSJZEKWKVSXAEVSWTVOJ
      ZVRJXAVOXBVRVOWTVOWFVNMZNZOVMVOWEXDVOWDXCAVNUBUCUDVLVMDSZESUEPQRWTVOVRTUF
      UGVSWKEWFWEWDAUHUIUJZWTVOWHVRWJWTVNWGAVMWFVLUKUMWTVQWIVPVMWFCUNUOUPUQUFWH
      WSWJWHWCWHWBWGLZLVLWHWAXGAWGVCURVLWFXEXFUSPQRWCWHWJTUTUGWMWBVAFZWRWLXHDWC
      XHWKDWBVBVDVEWPXHWOWIWBBVFVGWKWRDWBVAWCWHWOWJWQWCWGWNAVLWBWFVHUMWCVPWPWIV
      LWBBUNVIUPVJVKUT $.
  $}

  $( The converse of a set is a set.  Corollary 6.8(1) of [TakeutiZaring]
     p. 26.  (Contributed by NM, 17-Mar-1998.) $)
  cnvexg $p |- ( A e. V -> `' A e. _V ) $=
    ( wcel ccnv cdm crn cxp wss cvv wrel relcnv relssdmrn ax-mp df-rn syl5eqelr
    rnexg dfdm4 dmexg xpexg syl2anc ssexg sylancr ) ABCZADZUDEZUDFZGZHZUGICZUDI
    CUDJUHAKUDLMUCUEICUFICUIUCUEAFIANABPOUCUFAEIAQABROUEUFIISTUDUGIUAUB $.

  ${
    cnvex.1 $e |- A e. _V $.
    $( The converse of a set is a set.  Corollary 6.8(1) of [TakeutiZaring]
       p. 26.  (Contributed by NM, 19-Dec-2003.) $)
    cnvex $p |- `' A e. _V $=
      ( cvv wcel ccnv cnvexg ax-mp ) ACDAECDBACFG $.
  $}

  $( A relation is a set iff its converse is a set.  (Contributed by FL,
     3-Mar-2007.) $)
  relcnvexb $p |- ( Rel R -> ( R e. _V <-> `' R e. _V ) ) $=
    ( wrel cvv wcel ccnv cnvexg wceq wi dfrel2 eleq1 syl5ib sylbi impbid2 ) ABZ
    ACDZAEZCDZACFNPEZAGZQOHAIQRCDSOPCFRACJKLM $.

  $( If the range of a 1-1 onto function is a set, the function itself is a
     set.  (Contributed by AV, 2-Jun-2019.) $)
  f1oexrnex $p |- ( ( F : A -1-1-onto-> B /\ B e. V ) -> F e. _V ) $=
    ( wf1o wcel wa cvv ccnv wf f1ocnv f1of 3syl fex sylancom wrel f1orel adantr
    simpl wb relcnvexb syl mpbird ) ABCEZBDFZGZCHFZCIZHFZUDUEBAUHJZUIUFUDBAUHEU
    JUDUESABCKBAUHLMBADUHNOUFCPZUGUITUDUKUEABCQRCUAUBUC $.

  ${
    $d A f g $.  $d B f g $.
    $( There is a one-to-one onto function from a set to a second set iff there
       is a one-to-one onto function from the second set to the first set.
       (Contributed by Alexander van der Vekens, 30-Sep-2018.) $)
    f1oexbi $p |- ( E. f f : A -1-1-onto-> B <-> E. g g : B -1-1-onto-> A ) $=
      ( cv wf1o wex ccnv cvv wcel vex cnvex f1ocnv f1oeq1 spcegv exlimiv impbii
      mpsyl ) ABCEZFZCGZBADEZFZDGZTUDCSHZIJTBAUEFZUDSCKLABSMUCUFDUEIBAUBUENORPU
      CUADUBHZIJUCABUGFZUAUBDKLBAUBMTUHCUGIABSUGNORPQ $.
  $}

  $( The composition of two sets is a set.  (Contributed by NM,
     19-Mar-1998.) $)
  coexg $p |- ( ( A e. V /\ B e. W ) -> ( A o. B ) e. _V ) $=
    ( wcel wa ccom cdm crn cxp wss cvv cossxp dmexg rnexg xpexg syl2anr sylancr
    ssexg ) ACEZBDEZFABGZBHZAIZJZKUELEZUBLEABMUAUCLEUDLEUFTBDNACOUCUDLLPQUBUELS
    R $.

  ${
    coex.1 $e |- A e. _V $.
    coex.2 $e |- B e. _V $.
    $( The composition of two sets is a set.  (Contributed by NM,
       15-Dec-2003.) $)
    coex $p |- ( A o. B ) e. _V $=
      ( cvv wcel ccom coexg mp2an ) AEFBEFABGEFCDABEEHI $.
  $}

  ${
    $d f g x y z w v A $.  $d x y B $.  $d x y R $.
    $( The union of a chain (with respect to inclusion) of single-rooted sets
       is single-rooted.  (See ~ funcnv for ""single-rooted"" definition.)
       (Contributed by NM, 11-Aug-2004.) $)
    funcnvuni $p |- ( A. f e. A ( Fun `' f /\ A. g e. A ( f C_ g \/ g C_ f ) )
                    -> Fun `' U. A ) $=
      ( vy vx vz vw vv cv ccnv wfun wss wo wral wa wceq wrex wi wal weq cbvrexv
      cab cuni cnveq eqeq2d wcel funeqd sseq1 sseq2 orbi12d ralbidv rspcv funeq
      anbi12d biimprcd cnvss orim12i wb sseq12 syl5ibrcom expd syl6com rexlimdv
      ancoms com23 alrimdv anim12ii syl5bi alrimiv vex eqeq1 rexbidv elab ralab
      df-ral anbi2i imbi12i albii bitr2i sylib fununi cnvuni cnvex dfiun2 eqtri
      syl ciun funeqi sylibr ) BIZJZKZWJCIZLZWMWJLZMZCANZOZBANZDIZEIZJZPZEAQZDU
      BZUCZKZAUCJZKWSFIZKZXIGIZLZXKXILZMZGXENZOZFXENZXGWSXIXBPZEAQZXJXKXBPZEAQZ
      XNRZGSZOZRZFSZXQWSYEFXSXIHIZJZPZHAQWSYDXRYIEHAEHTXBYHXIXAYGUDUEUAWSYIYDHA
      YGAUFWSYHKZYGWMLZWMYGLZMZCANZOZYIYDRWRYOBYGABHTZWLYJWQYNYPWKYHWJYGUDUGYPW
      PYMCAYPWNYKWOYLWJYGWMUHWJYGWMUIUJUKUNULYJYIXJYNYCYIXJYJXIYHUMUOYNYIYBGYNY
      AYIXNYNXTYIXNRZEAXAAUFYNYGXALZXAYGLZMZXTYQRYMYTCXAACETYKYRYLYSWMXAYGUIWMX
      AYGUHUJULYTXTYIXNYTXNXTYIOZYHXBLZXBYHLZMYRUUBYSUUCYGXAUPXAYGUPUQUUAXLUUBX
      MUUCYIXTXLUUBURXIYHXKXBUSVDXKXBXIYHUSUJUTVAVBVCVEVFVGVBVCVHVIXQXIXEUFZXPR
      ZFSYFXPFXEVOUUEYEFUUDXSXPYDXDXSDXIFVJDFTXCXREAWTXIXBVKVLVMXOYCXJXDYAXNGDD
      GTXCXTEAWTXKXBVKVLVNVPVQVRVSVTXEFGWAWFXHXFXHEAXBWGXFEAWBEDAXBXAEVJWCWDWEW
      HWI $.

    $( The union of a chain (with respect to inclusion) of one-to-one functions
       is a one-to-one function.  (Contributed by NM, 11-Aug-2004.) $)
    fun11uni $p |- ( A. f e. A ( ( Fun f /\ Fun `' f ) /\
                   A. g e. A ( f C_ g \/ g C_ f ) ) ->
                   ( Fun U. A /\ Fun `' U. A ) ) $=
      ( cv wfun ccnv wa wo wral cuni simpl anim1i ralimi fununi simpr funcnvuni
      wss syl jca ) BDZEZTFEZGZTCDZQUDTQHCAIZGZBAIZAJZEZUHFEZUGUAUEGZBAIUIUFUKB
      AUCUAUEUAUBKLMABCNRUGUBUEGZBAIUJUFULBAUCUBUEUAUBOLMABCPRS $.
  $}

  $( A function with bounded domain and range is a set.  This version of ~ fex
     is proven without the Axiom of Replacement.  (Contributed by Mario
     Carneiro, 24-Jun-2015.) $)
  fex2 $p |- ( ( F : A --> B /\ A e. V /\ B e. W ) -> F e. _V ) $=
    ( wf wcel w3a cxp cvv xpexg 3adant1 wss fssxp 3ad2ant1 ssexd ) ABCFZADGZBEG
    ZHCABIZJRSTJGQABDEKLQRCTMSABCNOP $.

  ${
    $d A x $.  $d B x $.
    fabexg.1 $e |- F = { x | ( x : A --> B /\ ph ) } $.
    $( Existence of a set of functions.  (Contributed by Paul Chapman,
       25-Feb-2008.) $)
    fabexg $p |- ( ( A e. C /\ B e. D ) -> F e. _V ) $=
      ( wcel wa cxp cvv cpw xpexg pwexg wss cv cab wf fssxp selpw sylibr anim1i
      ss2abi eqsstri ssab2 sstri ssexg mpan 3syl ) CEIDFIJCDKZLIUKMZLIZGLIZCDEF
      NUKLOGULPUMUNGBQZULIZAJZBRZULGCDUOSZAJZBRURHUTUQBUSUPAUSUOUKPUPCDUOTBUKUA
      UBUCUDUEABULUFUGGULLUHUIUJ $.
  $}

"
Class {
	#name : #MmRawFileDataPartFive,
	#superclass : #MmDatabase,
	#category : #'Metamath-Parsing'
}
